{
  "name": "GET_ListTypes",
  "description": "Returns summary information about extension that have been registered with CloudFormation.",
  "parameters": {
    "type": "object",
    "properties": {
      "Visibility": {
        "type": "string",
        "enum": [
          "PUBLIC",
          "PRIVATE"
        ],
        "description": "<p>The scope at which the extensions are visible and usable in CloudFormation operations.</p> <p>Valid values include:</p> <ul> <li> <p> <code>PRIVATE</code>: Extensions that are visible and usable within this account and Region. This includes:</p> <ul> <li> <p>Private extensions you have registered in this account and Region.</p> </li> <li> <p>Public extensions that you have activated in this account and Region.</p> </li> </ul> </li> <li> <p> <code>PUBLIC</code>: Extensions that are publicly visible and available to be activated within any Amazon Web Services account. This includes extensions from Amazon Web Services, in addition to third-party publishers.</p> </li> </ul> <p>The default is <code>PRIVATE</code>.</p>"
      },
      "ProvisioningType": {
        "type": "string",
        "enum": [
          "NON_PROVISIONABLE",
          "IMMUTABLE",
          "FULLY_MUTABLE"
        ],
        "description": "<p>For resource types, the provisioning behavior of the resource type. CloudFormation determines the provisioning type during registration, based on the types of handlers in the schema handler package submitted.</p> <p>Valid values include:</p> <ul> <li> <p> <code>FULLY_MUTABLE</code>: The resource type includes an update handler to process updates to the type during stack update operations.</p> </li> <li> <p> <code>IMMUTABLE</code>: The resource type doesn't include an update handler, so the type can't be updated and must instead be replaced during stack update operations.</p> </li> <li> <p> <code>NON_PROVISIONABLE</code>: The resource type doesn't include create, read, and delete handlers, and therefore can't actually be provisioned.</p> </li> </ul> <p>The default is <code>FULLY_MUTABLE</code>.</p>"
      },
      "DeprecatedStatus": {
        "type": "string",
        "enum": [
          "LIVE",
          "DEPRECATED"
        ],
        "description": "<p>The deprecation status of the extension that you want to get summary information about.</p> <p>Valid values include:</p> <ul> <li> <p> <code>LIVE</code>: The extension is registered for use in CloudFormation operations.</p> </li> <li> <p> <code>DEPRECATED</code>: The extension has been deregistered and can no longer be used in CloudFormation operations.</p> </li> </ul>"
      },
      "Type": {
        "type": "string",
        "enum": [
          "RESOURCE",
          "MODULE",
          "HOOK"
        ],
        "description": "The type of extension."
      },
      "Filters": {
        "type": "object",
        "properties": {
          "Category": {
            "allOf": [
              {
                "$ref": "#/$defs/Category"
              },
              {
                "description": "<p>The category of extensions to return.</p> <ul> <li> <p> <code>REGISTERED</code>: Private extensions that have been registered for this account and Region.</p> </li> <li> <p> <code>ACTIVATED</code>: Public extensions that have been activated for this account and Region.</p> </li> <li> <p> <code>THIRD_PARTY</code>: Extensions available for use from publishers other than Amazon. This includes:</p> <ul> <li> <p>Private extensions registered in the account.</p> </li> <li> <p>Public extensions from publishers other than Amazon, whether activated or not.</p> </li> </ul> </li> <li> <p> <code>AWS_TYPES</code>: Extensions available for use from Amazon.</p> </li> </ul>"
              }
            ]
          },
          "PublisherId": {
            "allOf": [
              {
                "$ref": "#/$defs/PublisherId"
              },
              {
                "description": "<p>The id of the publisher of the extension.</p> <p>Extensions published by Amazon aren't assigned a publisher ID. Use the <code>AWS_TYPES</code> category to specify a list of types published by Amazon.</p>"
              }
            ]
          },
          "TypeNamePrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/TypeNamePrefix"
              },
              {
                "description": "A prefix to use as a filter for results."
              }
            ]
          }
        },
        "description": "<p>Filter criteria to use in determining which extensions to return.</p> <p>Filters must be compatible with <code>Visibility</code> to return valid results. For example, specifying <code>AWS_TYPES</code> for <code>Category</code> and <code>PRIVATE</code> for <code>Visibility</code> returns an empty list of types, but specifying <code>PUBLIC</code> for <code>Visibility</code> returns the desired list.</p>"
      },
      "MaxResults": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100,
        "description": "The maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a <code>NextToken</code> value that you can assign to the <code>NextToken</code> request parameter to get the next set of results."
      },
      "NextToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "description": "If the previous paginated request didn't return all the remaining results, the response object's <code>NextToken</code> parameter value is set to a token. To retrieve the next set of results, call this action again and assign that token to the request object's <code>NextToken</code> parameter. If there are no remaining results, the previous response object's <code>NextToken</code> parameter is set to <code>null</code>."
      },
      "Action": {
        "type": "string",
        "enum": [
          "ListTypes"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2010-05-15"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "Action",
      "Version"
    ],
    "$defs": {
      "Category": {
        "type": "string",
        "enum": [
          "REGISTERED",
          "ACTIVATED",
          "THIRD_PARTY",
          "AWS_TYPES"
        ]
      },
      "PublisherId": {
        "type": "string",
        "pattern": "[0-9a-zA-Z]{12,40}",
        "minLength": 1,
        "maxLength": 40
      },
      "TypeNamePrefix": {
        "type": "string",
        "pattern": "([A-Za-z0-9]{2,64}::){0,2}([A-Za-z0-9]{2,64}:?){0,1}",
        "minLength": 1,
        "maxLength": 204
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://cloudformation.us-east-1.amazonaws.com/#Action=ListTypes{?Visibility,ProvisioningType,DeprecatedStatus,Type,Filters,MaxResults,NextToken,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**TypeSummaries**",
            "**NextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
