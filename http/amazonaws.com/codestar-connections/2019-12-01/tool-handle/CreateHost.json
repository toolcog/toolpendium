{
  "name": "CreateHost",
  "description": "<p>Creates a resource that represents the infrastructure where a third-party provider is installed. The host is used when you create connections to an installed third-party provider type, such as GitHub Enterprise Server. You create one host for all connections to that provider.</p> <note> <p>A host created through the CLI or the SDK is in `PENDING` status by default. You can make its status `AVAILABLE` by setting up the host in the console.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "com.amazonaws.codestar.connections.CodeStar_connections_20191201.CreateHost"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateHostInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateHostInput": {
        "type": "object",
        "required": [
          "Name",
          "ProviderType",
          "ProviderEndpoint"
        ],
        "title": "CreateHostInput",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/HostName"
              },
              {
                "description": "The name of the host to be created."
              }
            ]
          },
          "ProviderType": {
            "allOf": [
              {
                "$ref": "#/$defs/ProviderType"
              },
              {
                "description": "The name of the installed provider to be associated with your connection. The host resource represents the infrastructure where your provider type is installed. The valid provider type is GitHub Enterprise Server."
              }
            ]
          },
          "ProviderEndpoint": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "The endpoint of the infrastructure to be represented by the host after it is created."
              }
            ]
          },
          "VpcConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/VpcConfiguration"
              },
              {
                "description": "The VPC configuration to be provisioned for the host. A VPC must be configured and the infrastructure to be represented by the host must already be connected to the VPC."
              }
            ]
          },
          "Tags": {
            "$ref": "#/$defs/TagList"
          }
        }
      },
      "HostName": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 64
      },
      "ProviderType": {
        "type": "string",
        "enum": [
          "Bitbucket",
          "GitHub",
          "GitHubEnterpriseServer",
          "GitLab"
        ]
      },
      "Url": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 512
      },
      "VpcConfiguration": {
        "type": "object",
        "required": [
          "VpcId",
          "SubnetIds",
          "SecurityGroupIds"
        ],
        "properties": {
          "VpcId": {
            "allOf": [
              {
                "$ref": "#/$defs/VpcId"
              },
              {
                "description": "The ID of the Amazon VPC connected to the infrastructure where your provider type is installed."
              }
            ]
          },
          "SubnetIds": {
            "allOf": [
              {
                "$ref": "#/$defs/SubnetIds"
              },
              {
                "description": "The ID of the subnet or subnets associated with the Amazon VPC connected to the infrastructure where your provider type is installed."
              }
            ]
          },
          "SecurityGroupIds": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroupIds"
              },
              {
                "description": "The ID of the security group or security groups associated with the Amazon VPC connected to the infrastructure where your provider type is installed."
              }
            ]
          },
          "TlsCertificate": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsCertificate"
              },
              {
                "description": "The value of the Transport Layer Security (TLS) certificate associated with the infrastructure where your provider type is installed."
              }
            ]
          }
        },
        "description": "The VPC configuration provisioned for the host."
      },
      "VpcId": {
        "type": "string",
        "pattern": "vpc-\\w{8}(\\w{9})?",
        "minLength": 12,
        "maxLength": 21
      },
      "SubnetIds": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SubnetId"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "SubnetId": {
        "type": "string",
        "pattern": "subnet-\\w{8}(\\w{9})?",
        "minLength": 15,
        "maxLength": 24
      },
      "SecurityGroupIds": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SecurityGroupId"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "SecurityGroupId": {
        "type": "string",
        "pattern": "sg-\\w{8}(\\w{9})?",
        "minLength": 11,
        "maxLength": 20
      },
      "TlsCertificate": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 1,
        "maxLength": 16384
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "<p>A tag is a key-value pair that is used to manage the resource.</p> <p>This tag is available for use by Amazon Web Services services that support tags.</p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codestar-connections.us-east-1.amazonaws.com/#X-Amz-Target=com.amazonaws.codestar.connections.CodeStar_connections_20191201.CreateHost"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**HostArn**",
            "**Tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
