{
  "name": "GET_GetFlowLogsIntegrationTemplate",
  "description": "<p>Generates a CloudFormation template that streamlines and automates the integration of VPC flow logs with Amazon Athena. This make it easier for you to query and gain insights from VPC flow logs data. Based on the information that you provide, we configure resources in the template to do the following:</p> <ul> <li> <p>Create a table in Athena that maps fields to a custom log format</p> </li> <li> <p>Create a Lambda function that updates the table with new partitions on a daily, weekly, or monthly basis</p> </li> <li> <p>Create a table partitioned between two timestamps in the past</p> </li> <li> <p>Create a set of named queries in Athena that you can use to get started quickly</p> </li> </ul> <note> <p> <code>GetFlowLogsIntegrationTemplate</code> does not support integration between Amazon Web Services Transit Gateway Flow Logs and Amazon Athena.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "DryRun": {
        "type": "boolean",
        "description": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."
      },
      "FlowLogId": {
        "type": "string",
        "description": "The ID of the flow log."
      },
      "ConfigDeliveryS3DestinationArn": {
        "type": "string",
        "description": "To store the CloudFormation template in Amazon S3, specify the location in Amazon S3."
      },
      "IntegrateService": {
        "type": "object",
        "properties": {
          "AthenaIntegrations": {
            "allOf": [
              {
                "$ref": "#/$defs/AthenaIntegrationsSet"
              },
              {
                "xml": {
                  "name": "AthenaIntegration"
                },
                "description": "Information about the integration with Amazon Athena."
              }
            ]
          }
        },
        "description": "Information about the service integration."
      },
      "Action": {
        "type": "string",
        "enum": [
          "GetFlowLogsIntegrationTemplate"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2016-11-15"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "FlowLogId",
      "ConfigDeliveryS3DestinationArn",
      "IntegrateService",
      "Action",
      "Version"
    ],
    "$defs": {
      "AthenaIntegrationsSet": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/AthenaIntegration"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        },
        "minItems": 1,
        "maxItems": 10
      },
      "AthenaIntegration": {
        "type": "object",
        "required": [
          "IntegrationResultS3DestinationArn",
          "PartitionLoadFrequency"
        ],
        "properties": {
          "IntegrationResultS3DestinationArn": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The location in Amazon S3 to store the generated CloudFormation template."
              }
            ]
          },
          "PartitionLoadFrequency": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionLoadFrequency"
              },
              {
                "description": "The schedule for adding new partitions to the table."
              }
            ]
          },
          "PartitionStartDate": {
            "allOf": [
              {
                "$ref": "#/$defs/MillisecondDateTime"
              },
              {
                "description": "The start date for the partition."
              }
            ]
          },
          "PartitionEndDate": {
            "allOf": [
              {
                "$ref": "#/$defs/MillisecondDateTime"
              },
              {
                "description": "The end date for the partition."
              }
            ]
          }
        },
        "description": "Describes integration options for Amazon Athena."
      },
      "String": {
        "type": "string"
      },
      "PartitionLoadFrequency": {
        "type": "string",
        "enum": [
          "none",
          "daily",
          "weekly",
          "monthly"
        ]
      },
      "MillisecondDateTime": {
        "type": "string",
        "format": "date-time"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://ec2.us-east-1.amazonaws.com/#Action=GetFlowLogsIntegrationTemplate{?DryRun,FlowLogId,ConfigDeliveryS3DestinationArn,IntegrateService,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Result**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
