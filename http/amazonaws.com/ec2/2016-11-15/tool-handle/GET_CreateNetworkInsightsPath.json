{
  "name": "GET_CreateNetworkInsightsPath",
  "description": "<p>Creates a path to analyze for reachability.</p> <p>Reachability Analyzer enables you to analyze and debug network reachability between two resources in your virtual private cloud (VPC). For more information, see the <a href=\"https://docs.aws.amazon.com/vpc/latest/reachability/\">Reachability Analyzer Guide</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "SourceIp": {
        "type": "string",
        "pattern": "^([0-9]{1,3}.){3}[0-9]{1,3}$",
        "minLength": 0,
        "maxLength": 15,
        "description": "The IP address of the source."
      },
      "DestinationIp": {
        "type": "string",
        "pattern": "^([0-9]{1,3}.){3}[0-9]{1,3}$",
        "minLength": 0,
        "maxLength": 15,
        "description": "The IP address of the destination."
      },
      "Source": {
        "type": "string",
        "description": "The ID or ARN of the source. If the resource is in another account, you must specify an ARN."
      },
      "Destination": {
        "type": "string",
        "description": "The ID or ARN of the destination. If the resource is in another account, you must specify an ARN."
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "tcp",
          "udp"
        ],
        "description": "The protocol."
      },
      "DestinationPort": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535,
        "description": "The destination port."
      },
      "TagSpecification": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/TagSpecification"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        },
        "description": "The tags to add to the path."
      },
      "DryRun": {
        "type": "boolean",
        "description": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."
      },
      "ClientToken": {
        "type": "string",
        "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to ensure idempotency</a>."
      },
      "FilterAtSource": {
        "type": "object",
        "properties": {
          "SourceAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/IpAddress"
              },
              {
                "description": "The source IPv4 address."
              }
            ]
          },
          "SourcePortRange": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestFilterPortRange"
              },
              {
                "description": "The source port range."
              }
            ]
          },
          "DestinationAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/IpAddress"
              },
              {
                "description": "The destination IPv4 address."
              }
            ]
          },
          "DestinationPortRange": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestFilterPortRange"
              },
              {
                "description": "The destination port range."
              }
            ]
          }
        },
        "description": "Scopes the analysis to network paths that match specific filters at the source. If you specify this parameter, you can't specify the parameters for the source IP address or the destination port."
      },
      "FilterAtDestination": {
        "type": "object",
        "properties": {
          "SourceAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/IpAddress"
              },
              {
                "description": "The source IPv4 address."
              }
            ]
          },
          "SourcePortRange": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestFilterPortRange"
              },
              {
                "description": "The source port range."
              }
            ]
          },
          "DestinationAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/IpAddress"
              },
              {
                "description": "The destination IPv4 address."
              }
            ]
          },
          "DestinationPortRange": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestFilterPortRange"
              },
              {
                "description": "The destination port range."
              }
            ]
          }
        },
        "description": "Scopes the analysis to network paths that match specific filters at the destination. If you specify this parameter, you can't specify the parameter for the destination IP address."
      },
      "Action": {
        "type": "string",
        "enum": [
          "CreateNetworkInsightsPath"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2016-11-15"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "Source",
      "Protocol",
      "ClientToken",
      "Action",
      "Version"
    ],
    "$defs": {
      "TagSpecification": {
        "type": "object",
        "properties": {
          "ResourceType": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceType"
              },
              {
                "xml": {
                  "name": "resourceType"
                },
                "description": "The type of resource to tag on creation."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "xml": {
                  "name": "Tag"
                },
                "description": "The tags to apply to the resource."
              }
            ]
          }
        },
        "description": "<p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>"
      },
      "ResourceType": {
        "type": "string",
        "enum": [
          "capacity-reservation",
          "client-vpn-endpoint",
          "customer-gateway",
          "carrier-gateway",
          "coip-pool",
          "dedicated-host",
          "dhcp-options",
          "egress-only-internet-gateway",
          "elastic-ip",
          "elastic-gpu",
          "export-image-task",
          "export-instance-task",
          "fleet",
          "fpga-image",
          "host-reservation",
          "image",
          "import-image-task",
          "import-snapshot-task",
          "instance",
          "instance-event-window",
          "internet-gateway",
          "ipam",
          "ipam-pool",
          "ipam-scope",
          "ipv4pool-ec2",
          "ipv6pool-ec2",
          "key-pair",
          "launch-template",
          "local-gateway",
          "local-gateway-route-table",
          "local-gateway-virtual-interface",
          "local-gateway-virtual-interface-group",
          "local-gateway-route-table-vpc-association",
          "local-gateway-route-table-virtual-interface-group-association",
          "natgateway",
          "network-acl",
          "network-interface",
          "network-insights-analysis",
          "network-insights-path",
          "network-insights-access-scope",
          "network-insights-access-scope-analysis",
          "placement-group",
          "prefix-list",
          "replace-root-volume-task",
          "reserved-instances",
          "route-table",
          "security-group",
          "security-group-rule",
          "snapshot",
          "spot-fleet-request",
          "spot-instances-request",
          "subnet",
          "subnet-cidr-reservation",
          "traffic-mirror-filter",
          "traffic-mirror-session",
          "traffic-mirror-target",
          "transit-gateway",
          "transit-gateway-attachment",
          "transit-gateway-connect-peer",
          "transit-gateway-multicast-domain",
          "transit-gateway-policy-table",
          "transit-gateway-route-table",
          "transit-gateway-route-table-announcement",
          "volume",
          "vpc",
          "vpc-endpoint",
          "vpc-endpoint-connection",
          "vpc-endpoint-service",
          "vpc-endpoint-service-permission",
          "vpc-peering-connection",
          "vpn-connection",
          "vpn-gateway",
          "vpc-flow-log",
          "capacity-reservation-fleet",
          "traffic-mirror-filter-rule",
          "vpc-endpoint-connection-device-type",
          "verified-access-instance",
          "verified-access-group",
          "verified-access-endpoint",
          "verified-access-policy",
          "verified-access-trust-provider",
          "vpn-connection-device-type",
          "vpc-block-public-access-exclusion",
          "ipam-resource-discovery",
          "ipam-resource-discovery-association",
          "instance-connect-endpoint"
        ]
      },
      "TagList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Tag"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "xml": {
                  "name": "key"
                },
                "description": "<p>The key of the tag.</p> <p>Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with <code>aws:</code>.</p>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "xml": {
                  "name": "value"
                },
                "description": "<p>The value of the tag.</p> <p>Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.</p>"
              }
            ]
          }
        },
        "description": "Describes a tag."
      },
      "String": {
        "type": "string"
      },
      "IpAddress": {
        "type": "string",
        "pattern": "^([0-9]{1,3}.){3}[0-9]{1,3}$",
        "minLength": 0,
        "maxLength": 15
      },
      "RequestFilterPortRange": {
        "type": "object",
        "properties": {
          "FromPort": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The first port in the range."
              }
            ]
          },
          "ToPort": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The last port in the range."
              }
            ]
          }
        },
        "description": "Describes a port range."
      },
      "Port": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://ec2.us-east-1.amazonaws.com/#Action=CreateNetworkInsightsPath{?SourceIp,DestinationIp,Source,Destination,Protocol,DestinationPort,TagSpecification,DryRun,ClientToken,FilterAtSource,FilterAtDestination,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**NetworkInsightsPath**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
