{
  "name": "GET_CreateVpnConnection",
  "description": "<p>Creates a VPN connection between an existing virtual private gateway or transit gateway and a customer gateway. The supported connection type is <code>ipsec.1</code>.</p> <p>The response includes information that you need to give to your network administrator to configure your customer gateway.</p> <important> <p>We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway device.</p> </important> <p>If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.</p> <p>This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn't return an error.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\">Amazon Web Services Site-to-Site VPN</a> in the <i>Amazon Web Services Site-to-Site VPN User Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "CustomerGatewayId": {
        "type": "string",
        "description": "The ID of the customer gateway."
      },
      "Type": {
        "type": "string",
        "description": "The type of VPN connection (<code>ipsec.1</code>)."
      },
      "VpnGatewayId": {
        "type": "string",
        "description": "The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway."
      },
      "TransitGatewayId": {
        "type": "string",
        "description": "The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway."
      },
      "DryRun": {
        "type": "boolean",
        "description": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>."
      },
      "Options": {
        "type": "object",
        "properties": {
          "EnableAcceleration": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p>Indicate whether to enable acceleration for the VPN connection.</p> <p>Default: <code>false</code> </p>"
              }
            ]
          },
          "StaticRoutesOnly": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "xml": {
                  "name": "staticRoutesOnly"
                },
                "description": "<p>Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a static route.</p> <p>Default: <code>false</code> </p>"
              }
            ]
          },
          "TunnelInsideIpVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/TunnelInsideIpVersion"
              },
              {
                "description": "<p>Indicate whether the VPN tunnels process IPv4 or IPv6 traffic.</p> <p>Default: <code>ipv4</code> </p>"
              }
            ]
          },
          "TunnelOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/VpnTunnelOptionsSpecificationsList"
              },
              {
                "description": "The tunnel options for the VPN connection."
              }
            ]
          },
          "LocalIpv4NetworkCidr": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.</p> <p>Default: <code>0.0.0.0/0</code> </p>"
              }
            ]
          },
          "RemoteIpv4NetworkCidr": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The IPv4 CIDR on the Amazon Web Services side of the VPN connection.</p> <p>Default: <code>0.0.0.0/0</code> </p>"
              }
            ]
          },
          "LocalIpv6NetworkCidr": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.</p> <p>Default: <code>::/0</code> </p>"
              }
            ]
          },
          "RemoteIpv6NetworkCidr": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The IPv6 CIDR on the Amazon Web Services side of the VPN connection.</p> <p>Default: <code>::/0</code> </p>"
              }
            ]
          },
          "OutsideIpAddressType": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The type of IPv4 address assigned to the outside interface of the customer gateway device.</p> <p>Valid values: <code>PrivateIpv4</code> | <code>PublicIpv4</code> </p> <p>Default: <code>PublicIpv4</code> </p>"
              }
            ]
          },
          "TransportTransitGatewayAttachmentId": {
            "allOf": [
              {
                "$ref": "#/$defs/TransitGatewayAttachmentId"
              },
              {
                "description": "<p>The transit gateway attachment ID to use for the VPN tunnel.</p> <p>Required if <code>OutsideIpAddressType</code> is set to <code>PrivateIpv4</code>.</p>"
              }
            ]
          }
        },
        "description": "The options for the VPN connection."
      },
      "TagSpecification": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/TagSpecification"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        },
        "description": "The tags to apply to the VPN connection."
      },
      "Action": {
        "type": "string",
        "enum": [
          "CreateVpnConnection"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2016-11-15"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "CustomerGatewayId",
      "Type",
      "Action",
      "Version"
    ],
    "$defs": {
      "Boolean": {
        "type": "boolean"
      },
      "TunnelInsideIpVersion": {
        "type": "string",
        "enum": [
          "ipv4",
          "ipv6"
        ]
      },
      "VpnTunnelOptionsSpecificationsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/VpnTunnelOptionsSpecification"
        }
      },
      "VpnTunnelOptionsSpecification": {
        "type": "object",
        "properties": {
          "TunnelInsideCidr": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The range of inside IPv4 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. </p> <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The following CIDR blocks are reserved and cannot be used:</p> <ul> <li> <p> <code>169.254.0.0/30</code> </p> </li> <li> <p> <code>169.254.1.0/30</code> </p> </li> <li> <p> <code>169.254.2.0/30</code> </p> </li> <li> <p> <code>169.254.3.0/30</code> </p> </li> <li> <p> <code>169.254.4.0/30</code> </p> </li> <li> <p> <code>169.254.5.0/30</code> </p> </li> <li> <p> <code>169.254.169.252/30</code> </p> </li> </ul>"
              }
            ]
          },
          "TunnelInsideIpv6Cidr": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The range of inside IPv6 addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same transit gateway.</p> <p>Constraints: A size /126 CIDR block from the local <code>fd00::/8</code> range.</p>"
              }
            ]
          },
          "PreSharedKey": {
            "allOf": [
              {
                "$ref": "#/$defs/preSharedKey"
              },
              {
                "description": "<p>The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and customer gateway.</p> <p>Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).</p>"
              }
            ]
          },
          "Phase1LifetimeSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "<p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p> <p>Constraints: A value between 900 and 28,800.</p> <p>Default: <code>28800</code> </p>"
              }
            ]
          },
          "Phase2LifetimeSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "<p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p> <p>Constraints: A value between 900 and 3,600. The value must be less than the value for <code>Phase1LifetimeSeconds</code>.</p> <p>Default: <code>3600</code> </p>"
              }
            ]
          },
          "RekeyMarginTimeSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "<p>The margin time, in seconds, before the phase 2 lifetime expires, during which the Amazon Web Services side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for <code>RekeyFuzzPercentage</code>.</p> <p>Constraints: A value between 60 and half of <code>Phase2LifetimeSeconds</code>.</p> <p>Default: <code>540</code> </p>"
              }
            ]
          },
          "RekeyFuzzPercentage": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "<p>The percentage of the rekey window (determined by <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly selected.</p> <p>Constraints: A value between 0 and 100.</p> <p>Default: <code>100</code> </p>"
              }
            ]
          },
          "ReplayWindowSize": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "<p>The number of packets in an IKE replay window.</p> <p>Constraints: A value between 64 and 2048.</p> <p>Default: <code>1024</code> </p>"
              }
            ]
          },
          "DPDTimeoutSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "<p>The number of seconds after which a DPD timeout occurs.</p> <p>Constraints: A value greater than or equal to 30.</p> <p>Default: <code>30</code> </p>"
              }
            ]
          },
          "DPDTimeoutAction": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The action to take after DPD timeout occurs. Specify <code>restart</code> to restart the IKE initiation. Specify <code>clear</code> to end the IKE session.</p> <p>Valid Values: <code>clear</code> | <code>none</code> | <code>restart</code> </p> <p>Default: <code>clear</code> </p>"
              }
            ]
          },
          "Phase1EncryptionAlgorithms": {
            "allOf": [
              {
                "$ref": "#/$defs/Phase1EncryptionAlgorithmsRequestList"
              },
              {
                "xml": {
                  "name": "Phase1EncryptionAlgorithm"
                },
                "description": "<p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code> </p>"
              }
            ]
          },
          "Phase2EncryptionAlgorithms": {
            "allOf": [
              {
                "$ref": "#/$defs/Phase2EncryptionAlgorithmsRequestList"
              },
              {
                "xml": {
                  "name": "Phase2EncryptionAlgorithm"
                },
                "description": "<p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>AES128</code> | <code>AES256</code> | <code>AES128-GCM-16</code> | <code>AES256-GCM-16</code> </p>"
              }
            ]
          },
          "Phase1IntegrityAlgorithms": {
            "allOf": [
              {
                "$ref": "#/$defs/Phase1IntegrityAlgorithmsRequestList"
              },
              {
                "xml": {
                  "name": "Phase1IntegrityAlgorithm"
                },
                "description": "<p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> | <code>SHA2-512</code> </p>"
              }
            ]
          },
          "Phase2IntegrityAlgorithms": {
            "allOf": [
              {
                "$ref": "#/$defs/Phase2IntegrityAlgorithmsRequestList"
              },
              {
                "xml": {
                  "name": "Phase2IntegrityAlgorithm"
                },
                "description": "<p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> | <code>SHA2-384</code> | <code>SHA2-512</code> </p>"
              }
            ]
          },
          "Phase1DHGroupNumbers": {
            "allOf": [
              {
                "$ref": "#/$defs/Phase1DHGroupNumbersRequestList"
              },
              {
                "xml": {
                  "name": "Phase1DHGroupNumber"
                },
                "description": "<p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>2</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> | <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> | <code>24</code> </p>"
              }
            ]
          },
          "Phase2DHGroupNumbers": {
            "allOf": [
              {
                "$ref": "#/$defs/Phase2DHGroupNumbersRequestList"
              },
              {
                "xml": {
                  "name": "Phase2DHGroupNumber"
                },
                "description": "<p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>2</code> | <code>5</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>19</code> | <code>20</code> | <code>21</code> | <code>22</code> | <code>23</code> | <code>24</code> </p>"
              }
            ]
          },
          "IKEVersions": {
            "allOf": [
              {
                "$ref": "#/$defs/IKEVersionsRequestList"
              },
              {
                "xml": {
                  "name": "IKEVersion"
                },
                "description": "<p>The IKE versions that are permitted for the VPN tunnel.</p> <p>Valid values: <code>ikev1</code> | <code>ikev2</code> </p>"
              }
            ]
          },
          "StartupAction": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The action to take when the establishing the tunnel for the VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify <code>start</code> for Amazon Web Services to initiate the IKE negotiation.</p> <p>Valid Values: <code>add</code> | <code>start</code> </p> <p>Default: <code>add</code> </p>"
              }
            ]
          },
          "LogOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/VpnTunnelLogOptionsSpecification"
              },
              {
                "description": "Options for logging VPN tunnel activity."
              }
            ]
          },
          "EnableTunnelLifecycleControl": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Turn on or off tunnel endpoint lifecycle control feature."
              }
            ]
          }
        },
        "description": "The tunnel options for a single VPN tunnel."
      },
      "String": {
        "type": "string"
      },
      "preSharedKey": {
        "type": "string",
        "format": "password"
      },
      "Integer": {
        "type": "integer"
      },
      "Phase1EncryptionAlgorithmsRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Phase1EncryptionAlgorithmsRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Phase1EncryptionAlgorithmsRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value for the encryption algorithm."
              }
            ]
          }
        },
        "description": "Specifies the encryption algorithm for the VPN tunnel for phase 1 IKE negotiations."
      },
      "Phase2EncryptionAlgorithmsRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Phase2EncryptionAlgorithmsRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Phase2EncryptionAlgorithmsRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The encryption algorithm."
              }
            ]
          }
        },
        "description": "Specifies the encryption algorithm for the VPN tunnel for phase 2 IKE negotiations."
      },
      "Phase1IntegrityAlgorithmsRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Phase1IntegrityAlgorithmsRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Phase1IntegrityAlgorithmsRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value for the integrity algorithm."
              }
            ]
          }
        },
        "description": "Specifies the integrity algorithm for the VPN tunnel for phase 1 IKE negotiations."
      },
      "Phase2IntegrityAlgorithmsRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Phase2IntegrityAlgorithmsRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Phase2IntegrityAlgorithmsRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The integrity algorithm."
              }
            ]
          }
        },
        "description": "Specifies the integrity algorithm for the VPN tunnel for phase 2 IKE negotiations."
      },
      "Phase1DHGroupNumbersRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Phase1DHGroupNumbersRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Phase1DHGroupNumbersRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The Diffie-Hellmann group number."
              }
            ]
          }
        },
        "description": "Specifies a Diffie-Hellman group number for the VPN tunnel for phase 1 IKE negotiations."
      },
      "Phase2DHGroupNumbersRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Phase2DHGroupNumbersRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Phase2DHGroupNumbersRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The Diffie-Hellmann group number."
              }
            ]
          }
        },
        "description": "Specifies a Diffie-Hellman group number for the VPN tunnel for phase 2 IKE negotiations."
      },
      "IKEVersionsRequestList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/IKEVersionsRequestListValue"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "IKEVersionsRequestListValue": {
        "type": "object",
        "properties": {
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The IKE version."
              }
            ]
          }
        },
        "description": "The IKE version that is permitted for the VPN tunnel."
      },
      "VpnTunnelLogOptionsSpecification": {
        "type": "object",
        "properties": {
          "CloudWatchLogOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/CloudWatchLogOptionsSpecification"
              },
              {
                "description": "Options for sending VPN tunnel logs to CloudWatch."
              }
            ]
          }
        },
        "description": "Options for logging VPN tunnel activity."
      },
      "CloudWatchLogOptionsSpecification": {
        "type": "object",
        "properties": {
          "LogEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p>Enable or disable VPN tunnel logging feature. Default value is <code>False</code>.</p> <p>Valid values: <code>True</code> | <code>False</code> </p>"
              }
            ]
          },
          "LogGroupArn": {
            "allOf": [
              {
                "$ref": "#/$defs/CloudWatchLogGroupArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to."
              }
            ]
          },
          "LogOutputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>Set log format. Default format is <code>json</code>.</p> <p>Valid values: <code>json</code> | <code>text</code> </p>"
              }
            ]
          }
        },
        "description": "Options for sending VPN tunnel logs to CloudWatch."
      },
      "CloudWatchLogGroupArn": {
        "type": "string"
      },
      "TransitGatewayAttachmentId": {
        "type": "string"
      },
      "TagSpecification": {
        "type": "object",
        "properties": {
          "ResourceType": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceType"
              },
              {
                "xml": {
                  "name": "resourceType"
                },
                "description": "The type of resource to tag on creation."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "xml": {
                  "name": "Tag"
                },
                "description": "The tags to apply to the resource."
              }
            ]
          }
        },
        "description": "<p>The tags to apply to a resource when the resource is being created. When you specify a tag, you must specify the resource type to tag, otherwise the request will fail.</p> <note> <p>The <code>Valid Values</code> lists all the resource types that can be tagged. However, the action you're using might not support tagging all of these resource types. If you try to tag a resource type that is unsupported for the action you're using, you'll get an error.</p> </note>"
      },
      "ResourceType": {
        "type": "string",
        "enum": [
          "capacity-reservation",
          "client-vpn-endpoint",
          "customer-gateway",
          "carrier-gateway",
          "coip-pool",
          "dedicated-host",
          "dhcp-options",
          "egress-only-internet-gateway",
          "elastic-ip",
          "elastic-gpu",
          "export-image-task",
          "export-instance-task",
          "fleet",
          "fpga-image",
          "host-reservation",
          "image",
          "import-image-task",
          "import-snapshot-task",
          "instance",
          "instance-event-window",
          "internet-gateway",
          "ipam",
          "ipam-pool",
          "ipam-scope",
          "ipv4pool-ec2",
          "ipv6pool-ec2",
          "key-pair",
          "launch-template",
          "local-gateway",
          "local-gateway-route-table",
          "local-gateway-virtual-interface",
          "local-gateway-virtual-interface-group",
          "local-gateway-route-table-vpc-association",
          "local-gateway-route-table-virtual-interface-group-association",
          "natgateway",
          "network-acl",
          "network-interface",
          "network-insights-analysis",
          "network-insights-path",
          "network-insights-access-scope",
          "network-insights-access-scope-analysis",
          "placement-group",
          "prefix-list",
          "replace-root-volume-task",
          "reserved-instances",
          "route-table",
          "security-group",
          "security-group-rule",
          "snapshot",
          "spot-fleet-request",
          "spot-instances-request",
          "subnet",
          "subnet-cidr-reservation",
          "traffic-mirror-filter",
          "traffic-mirror-session",
          "traffic-mirror-target",
          "transit-gateway",
          "transit-gateway-attachment",
          "transit-gateway-connect-peer",
          "transit-gateway-multicast-domain",
          "transit-gateway-policy-table",
          "transit-gateway-route-table",
          "transit-gateway-route-table-announcement",
          "volume",
          "vpc",
          "vpc-endpoint",
          "vpc-endpoint-connection",
          "vpc-endpoint-service",
          "vpc-endpoint-service-permission",
          "vpc-peering-connection",
          "vpn-connection",
          "vpn-gateway",
          "vpc-flow-log",
          "capacity-reservation-fleet",
          "traffic-mirror-filter-rule",
          "vpc-endpoint-connection-device-type",
          "verified-access-instance",
          "verified-access-group",
          "verified-access-endpoint",
          "verified-access-policy",
          "verified-access-trust-provider",
          "vpn-connection-device-type",
          "vpc-block-public-access-exclusion",
          "ipam-resource-discovery",
          "ipam-resource-discovery-association",
          "instance-connect-endpoint"
        ]
      },
      "TagList": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/$defs/Tag"
            },
            {
              "xml": {
                "name": "item"
              }
            }
          ]
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "xml": {
                  "name": "key"
                },
                "description": "<p>The key of the tag.</p> <p>Constraints: Tag keys are case-sensitive and accept a maximum of 127 Unicode characters. May not begin with <code>aws:</code>.</p>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "xml": {
                  "name": "value"
                },
                "description": "<p>The value of the tag.</p> <p>Constraints: Tag values are case-sensitive and accept a maximum of 256 Unicode characters.</p>"
              }
            ]
          }
        },
        "description": "Describes a tag."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://ec2.us-east-1.amazonaws.com/#Action=CreateVpnConnection{?CustomerGatewayId,Type,VpnGatewayId,TransitGatewayId,DryRun,Options,TagSpecification,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Contains the output of CreateVpnConnection.",
        "**Key properties:**",
        {
          "$ul": [
            "**VpnConnection**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
