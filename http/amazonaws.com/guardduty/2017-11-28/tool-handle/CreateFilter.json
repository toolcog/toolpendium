{
  "name": "CreateFilter",
  "description": "Creates a filter using the specified finding criteria. The maximum number of saved filters per Amazon Web Services account per Region is 100. For more information, see <a href=\"https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_limits.html\">Quotas for GuardDuty</a>.",
  "parameters": {
    "type": "object",
    "properties": {
      "detectorId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 300,
        "description": "The ID of the detector belonging to the GuardDuty account that you want to create a filter for."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "name",
          "findingCriteria"
        ],
        "properties": {
          "name": {
            "description": "The name of the filter. Valid characters include period (.), underscore (_), dash (-), and alphanumeric characters. A whitespace is considered to be an invalid character.",
            "type": "string",
            "minLength": 3,
            "maxLength": 64
          },
          "description": {
            "description": "The description of the filter. Valid characters include alphanumeric characters, and special characters such as hyphen, period, colon, underscore, parentheses (<code>{ }</code>, <code>[ ]</code>, and <code>( )</code>), forward slash, horizontal tab, vertical tab, newline, form feed, return, and whitespace.",
            "type": "string",
            "minLength": 0,
            "maxLength": 512
          },
          "action": {
            "description": "Specifies the action that is to be applied to the findings that match the filter.",
            "type": "string",
            "enum": [
              "NOOP",
              "ARCHIVE"
            ],
            "minLength": 1,
            "maxLength": 300
          },
          "rank": {
            "description": "Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.",
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "findingCriteria": {
            "description": "Contains information about the criteria used for querying findings.",
            "type": "object",
            "properties": {
              "Criterion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Criterion"
                  },
                  {
                    "xml": {
                      "name": "criterion"
                    },
                    "description": "Represents a map of finding properties that match specified conditions and values when querying findings."
                  }
                ]
              }
            }
          },
          "clientToken": {
            "description": "The idempotency token for the create request.",
            "type": "string",
            "minLength": 0,
            "maxLength": 64
          },
          "tags": {
            "description": "The tags to be added to a new filter resource.",
            "type": "object",
            "minProperties": 1,
            "maxProperties": 200,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "detectorId",
      "body"
    ],
    "$defs": {
      "Criterion": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Condition"
        }
      },
      "Condition": {
        "type": "object",
        "properties": {
          "Eq": {
            "allOf": [
              {
                "$ref": "#/$defs/Eq"
              },
              {
                "deprecated": true,
                "xml": {
                  "name": "eq"
                },
                "description": "Represents the <i>equal</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "Neq": {
            "allOf": [
              {
                "$ref": "#/$defs/Neq"
              },
              {
                "deprecated": true,
                "xml": {
                  "name": "neq"
                },
                "description": "Represents the <i>not equal</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "Gt": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "deprecated": true,
                "xml": {
                  "name": "gt"
                },
                "description": "Represents a <i>greater than</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "Gte": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "deprecated": true,
                "xml": {
                  "name": "gte"
                },
                "description": "Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "Lt": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "deprecated": true,
                "xml": {
                  "name": "lt"
                },
                "description": "Represents a <i>less than</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "Lte": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "deprecated": true,
                "xml": {
                  "name": "lte"
                },
                "description": "Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "Equals": {
            "allOf": [
              {
                "$ref": "#/$defs/Equals"
              },
              {
                "xml": {
                  "name": "equals"
                },
                "description": "Represents an <i>equal</i> <b/> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "NotEquals": {
            "allOf": [
              {
                "$ref": "#/$defs/NotEquals"
              },
              {
                "xml": {
                  "name": "notEquals"
                },
                "description": "Represents a <i>not equal</i> <b/> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "GreaterThan": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "xml": {
                  "name": "greaterThan"
                },
                "description": "Represents a <i>greater than</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "GreaterThanOrEqual": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "xml": {
                  "name": "greaterThanOrEqual"
                },
                "description": "Represents a <i>greater than or equal</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "LessThan": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "xml": {
                  "name": "lessThan"
                },
                "description": "Represents a <i>less than</i> condition to be applied to a single field when querying for findings."
              }
            ]
          },
          "LessThanOrEqual": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "xml": {
                  "name": "lessThanOrEqual"
                },
                "description": "Represents a <i>less than or equal</i> condition to be applied to a single field when querying for findings."
              }
            ]
          }
        },
        "description": "Contains information about the condition."
      },
      "Eq": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "Neq": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "Integer": {
        "type": "integer"
      },
      "Equals": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "NotEquals": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "Long": {
        "type": "integer"
      },
      "TagValue": {
        "type": "string",
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://guardduty.us-east-1.amazonaws.com/detector/{detectorId}/filter"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Name**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
