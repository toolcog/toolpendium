{
  "name": "StartPiiEntitiesDetectionJob",
  "description": "Starts an asynchronous PII entity detection job for a collection of documents.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "Comprehend_20171127.StartPiiEntitiesDetectionJob"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartPiiEntitiesDetectionJobRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartPiiEntitiesDetectionJobRequest": {
        "type": "object",
        "required": [
          "InputDataConfig",
          "OutputDataConfig",
          "Mode",
          "DataAccessRoleArn",
          "LanguageCode"
        ],
        "title": "StartPiiEntitiesDetectionJobRequest",
        "properties": {
          "InputDataConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/InputDataConfig"
              },
              {
                "description": "The input properties for a PII entities detection job."
              }
            ]
          },
          "OutputDataConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputDataConfig"
              },
              {
                "description": "Provides conÔ¨Åguration parameters for the output of PII entity detection jobs."
              }
            ]
          },
          "Mode": {
            "allOf": [
              {
                "$ref": "#/$defs/PiiEntitiesDetectionMode"
              },
              {
                "description": "Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted."
              }
            ]
          },
          "RedactionConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/RedactionConfig"
              },
              {
                "description": "<p>Provides configuration parameters for PII entity redaction.</p> <p>This parameter is required if you set the <code>Mode</code> parameter to <code>ONLY_REDACTION</code>. In that case, you must provide a <code>RedactionConfig</code> definition that includes the <code>PiiEntityTypes</code> parameter.</p>"
              }
            ]
          },
          "DataAccessRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/IamRoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data."
              }
            ]
          },
          "JobName": {
            "allOf": [
              {
                "$ref": "#/$defs/JobName"
              },
              {
                "description": "The identifier of the job."
              }
            ]
          },
          "LanguageCode": {
            "allOf": [
              {
                "$ref": "#/$defs/LanguageCode"
              },
              {
                "description": "The language of the input documents. Currently, English is the only valid language."
              }
            ]
          },
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientRequestTokenString"
              },
              {
                "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "Tags to associate with the PII entities detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with \"Sales\" as the key might be added to a resource to indicate its use by the sales department."
              }
            ]
          }
        }
      },
      "InputDataConfig": {
        "type": "object",
        "required": [
          "S3Uri"
        ],
        "properties": {
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>The Amazon S3 URI for the input data. The URI must be in same Region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. </p> <p>For example, if you use the URI <code>S3://bucketName/prefix</code>, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.</p>"
              }
            ]
          },
          "InputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/InputFormat"
              },
              {
                "description": "<p>Specifies how the text in an input file should be processed:</p> <ul> <li> <p> <code>ONE_DOC_PER_FILE</code> - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.</p> </li> <li> <p> <code>ONE_DOC_PER_LINE</code> - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.</p> </li> </ul>"
              }
            ]
          },
          "DocumentReaderConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentReaderConfig"
              },
              {
                "description": "Provides configuration parameters to override the default actions for extracting text from PDF documents and image files."
              }
            ]
          }
        },
        "description": "The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis."
      },
      "S3Uri": {
        "type": "string",
        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
        "maxLength": 1024
      },
      "InputFormat": {
        "type": "string",
        "enum": [
          "ONE_DOC_PER_FILE",
          "ONE_DOC_PER_LINE"
        ]
      },
      "DocumentReaderConfig": {
        "type": "object",
        "required": [
          "DocumentReadAction"
        ],
        "properties": {
          "DocumentReadAction": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentReadAction"
              },
              {
                "description": "<p>This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:</p> <ul> <li> <p> <code>TEXTRACT_DETECT_DOCUMENT_TEXT</code> - The Amazon Comprehend service uses the <code>DetectDocumentText</code> API operation. </p> </li> <li> <p> <code>TEXTRACT_ANALYZE_DOCUMENT</code> - The Amazon Comprehend service uses the <code>AnalyzeDocument</code> API operation. </p> </li> </ul>"
              }
            ]
          },
          "DocumentReadMode": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentReadMode"
              },
              {
                "description": "<p>Determines the text extraction actions for PDF files. Enter one of the following values:</p> <ul> <li> <p> <code>SERVICE_DEFAULT</code> - use the Amazon Comprehend service defaults for PDF files.</p> </li> <li> <p> <code>FORCE_DOCUMENT_READ_ACTION</code> - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files. </p> </li> </ul>"
              }
            ]
          },
          "FeatureTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ListOfDocumentReadFeatureTypes"
              },
              {
                "description": "<p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p> <ul> <li> <p> <code>TABLES</code> - Returns information about any tables that are detected in the input document. </p> </li> <li> <p> <code>FORMS</code> - Returns information and the data from any forms that are detected in the input document. </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. </p> <p> By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type: </p> <ul> <li> <p> <b>Word files</b> - Amazon Comprehend parser extracts the text. </p> </li> <li> <p> <b>Digital PDF files</b> - Amazon Comprehend parser extracts the text. </p> </li> <li> <p> <b>Image files and scanned PDF files</b> - Amazon Comprehend uses the Amazon Textract <code>DetectDocumentText</code> API to extract the text. </p> </li> </ul> <p> <code>DocumentReaderConfig</code> does not apply to plain text files or Word files.</p> <p> For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/idp-set-textract-options.html\"> Setting text extraction options</a> in the Comprehend Developer Guide. </p>"
      },
      "DocumentReadAction": {
        "type": "string",
        "enum": [
          "TEXTRACT_DETECT_DOCUMENT_TEXT",
          "TEXTRACT_ANALYZE_DOCUMENT"
        ]
      },
      "DocumentReadMode": {
        "type": "string",
        "enum": [
          "SERVICE_DEFAULT",
          "FORCE_DOCUMENT_READ_ACTION"
        ]
      },
      "ListOfDocumentReadFeatureTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DocumentReadFeatureTypes"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "DocumentReadFeatureTypes": {
        "type": "string",
        "enum": [
          "TABLES",
          "FORMS"
        ],
        "description": "<p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p> <ul> <li> <p> <code>TABLES</code> - Returns additional information about any tables that are detected in the input document. </p> </li> <li> <p> <code>FORMS</code> - Returns additional information about any forms that are detected in the input document. </p> </li> </ul>"
      },
      "OutputDataConfig": {
        "type": "object",
        "required": [
          "S3Uri"
        ],
        "properties": {
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>When you use the <code>OutputDataConfig</code> object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same Region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file.</p> <p>When the topic detection job is finished, the service creates an output file in a directory specific to the job. The <code>S3Uri</code> field contains the location of the output file, called <code>output.tar.gz</code>. It is a compressed archive that contains the ouput of the operation.</p> <p> For a PII entity detection job, the output file is plain text, not a compressed archive. The output file name is the same as the input file, with <code>.out</code> appended at the end. </p>"
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>KMS Key Alias: <code>\"alias/ExampleAlias\"</code> </p> </li> <li> <p>ARN of a KMS Key Alias: <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code> </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>Provides configuration parameters for the output of inference jobs.</p> <p/>"
      },
      "KmsKeyId": {
        "type": "string",
        "pattern": "^\\p{ASCII}+$",
        "maxLength": 2048
      },
      "PiiEntitiesDetectionMode": {
        "type": "string",
        "enum": [
          "ONLY_REDACTION",
          "ONLY_OFFSETS"
        ]
      },
      "RedactionConfig": {
        "type": "object",
        "properties": {
          "PiiEntityTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ListOfPiiEntityTypes"
              },
              {
                "description": "An array of the types of PII entities that Amazon Comprehend detects in the input text for your request."
              }
            ]
          },
          "MaskMode": {
            "allOf": [
              {
                "$ref": "#/$defs/PiiEntitiesDetectionMaskMode"
              },
              {
                "description": "Specifies whether the PII entity is redacted with the mask character or the entity type."
              }
            ]
          },
          "MaskCharacter": {
            "allOf": [
              {
                "$ref": "#/$defs/MaskCharacter"
              },
              {
                "description": "A character that replaces each character in the redacted PII entity."
              }
            ]
          }
        },
        "description": "Provides configuration parameters for PII entity redaction."
      },
      "ListOfPiiEntityTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PiiEntityType"
        }
      },
      "PiiEntityType": {
        "type": "string",
        "enum": [
          "BANK_ACCOUNT_NUMBER",
          "BANK_ROUTING",
          "CREDIT_DEBIT_NUMBER",
          "CREDIT_DEBIT_CVV",
          "CREDIT_DEBIT_EXPIRY",
          "PIN",
          "EMAIL",
          "ADDRESS",
          "NAME",
          "PHONE",
          "SSN",
          "DATE_TIME",
          "PASSPORT_NUMBER",
          "DRIVER_ID",
          "URL",
          "AGE",
          "USERNAME",
          "PASSWORD",
          "AWS_ACCESS_KEY",
          "AWS_SECRET_KEY",
          "IP_ADDRESS",
          "MAC_ADDRESS",
          "ALL",
          "LICENSE_PLATE",
          "VEHICLE_IDENTIFICATION_NUMBER",
          "UK_NATIONAL_INSURANCE_NUMBER",
          "CA_SOCIAL_INSURANCE_NUMBER",
          "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",
          "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",
          "IN_PERMANENT_ACCOUNT_NUMBER",
          "IN_NREGA",
          "INTERNATIONAL_BANK_ACCOUNT_NUMBER",
          "SWIFT_CODE",
          "UK_NATIONAL_HEALTH_SERVICE_NUMBER",
          "CA_HEALTH_NUMBER",
          "IN_AADHAAR",
          "IN_VOTER_NUMBER"
        ]
      },
      "PiiEntitiesDetectionMaskMode": {
        "type": "string",
        "enum": [
          "MASK",
          "REPLACE_WITH_PII_ENTITY_TYPE"
        ]
      },
      "MaskCharacter": {
        "type": "string",
        "pattern": "[!@#$%&*]",
        "minLength": 1,
        "maxLength": 1
      },
      "IamRoleArn": {
        "type": "string",
        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
        "minLength": 20,
        "maxLength": 2048
      },
      "JobName": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
        "minLength": 1,
        "maxLength": 256
      },
      "LanguageCode": {
        "type": "string",
        "enum": [
          "en",
          "es",
          "fr",
          "de",
          "it",
          "pt",
          "ar",
          "hi",
          "ja",
          "ko",
          "zh",
          "zh-TW"
        ]
      },
      "ClientRequestTokenString": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The initial part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use ‚ÄúDepartment‚Äù as the key portion of the pair, with multiple possible values such as ‚Äúsales,‚Äù ‚Äúlegal,‚Äù and ‚Äúadministration.‚Äù "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": " The second part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use ‚ÄúDepartment‚Äù as the initial (key) portion of the pair, with a value of ‚Äúsales‚Äù to indicate the sales department. "
              }
            ]
          }
        },
        "description": "A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‚ÄòDepartment‚Äô:‚ÄôSales‚Äô might be added to a resource to indicate its use by a particular department. "
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://comprehend.us-east-1.amazonaws.com/#X-Amz-Target=Comprehend_20171127.StartPiiEntitiesDetectionJob"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**JobId**",
            "**JobArn**",
            "**JobStatus**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
