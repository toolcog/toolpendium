{
  "name": "CreateFlywheel",
  "description": "<p>A flywheel is an Amazon Web Services resource that orchestrates the ongoing training of a model for custom classification or custom entity recognition. You can create a flywheel to start with an existing trained model, or Comprehend can create and train a new model.</p> <p>When you create the flywheel, Comprehend creates a data lake in your account. The data lake holds the training data and test data for all versions of the model.</p> <p>To use a flywheel with an existing trained model, you specify the active model version. Comprehend copies the model's training data and test data into the flywheel's data lake.</p> <p>To use the flywheel with a new model, you need to provide a dataset for training data (and optional test data) when you create the flywheel.</p> <p>For more information about flywheels, see <a href=\"https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html\"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "Comprehend_20171127.CreateFlywheel"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateFlywheelRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateFlywheelRequest": {
        "type": "object",
        "required": [
          "FlywheelName",
          "DataAccessRoleArn",
          "DataLakeS3Uri"
        ],
        "title": "CreateFlywheelRequest",
        "properties": {
          "FlywheelName": {
            "allOf": [
              {
                "$ref": "#/$defs/ComprehendArnName"
              },
              {
                "description": "Name for the flywheel."
              }
            ]
          },
          "ActiveModelArn": {
            "allOf": [
              {
                "$ref": "#/$defs/ComprehendModelArn"
              },
              {
                "description": "To associate an existing model with the flywheel, specify the Amazon Resource Number (ARN) of the model version."
              }
            ]
          },
          "DataAccessRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/IamRoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend the permissions required to access the flywheel data in the data lake."
              }
            ]
          },
          "TaskConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskConfig"
              },
              {
                "description": "Configuration about the custom classifier associated with the flywheel."
              }
            ]
          },
          "ModelType": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelType"
              },
              {
                "description": "The model type."
              }
            ]
          },
          "DataLakeS3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/FlywheelS3Uri"
              },
              {
                "description": "Enter the S3 location for the data lake. You can specify a new S3 bucket or a new folder of an existing S3 bucket. The flywheel creates the data lake at this location."
              }
            ]
          },
          "DataSecurityConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSecurityConfig"
              },
              {
                "description": "Data security configurations."
              }
            ]
          },
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientRequestTokenString"
              },
              {
                "description": "A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "The tags to associate with this flywheel."
              }
            ]
          }
        }
      },
      "ComprehendArnName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
        "maxLength": 63
      },
      "ComprehendModelArn": {
        "type": "string",
        "pattern": "arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier|entity-recognizer)/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?",
        "maxLength": 256
      },
      "IamRoleArn": {
        "type": "string",
        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
        "minLength": 20,
        "maxLength": 2048
      },
      "TaskConfig": {
        "type": "object",
        "required": [
          "LanguageCode"
        ],
        "properties": {
          "LanguageCode": {
            "allOf": [
              {
                "$ref": "#/$defs/LanguageCode"
              },
              {
                "description": "Language code for the language that the model supports."
              }
            ]
          },
          "DocumentClassificationConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentClassificationConfig"
              },
              {
                "description": "Configuration required for a classification model."
              }
            ]
          },
          "EntityRecognitionConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityRecognitionConfig"
              },
              {
                "description": "Configuration required for an entity recognition model."
              }
            ]
          }
        },
        "description": "Configuration about the custom classifier associated with the flywheel."
      },
      "LanguageCode": {
        "type": "string",
        "enum": [
          "en",
          "es",
          "fr",
          "de",
          "it",
          "pt",
          "ar",
          "hi",
          "ja",
          "ko",
          "zh",
          "zh-TW"
        ]
      },
      "DocumentClassificationConfig": {
        "type": "object",
        "required": [
          "Mode"
        ],
        "properties": {
          "Mode": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentClassifierMode"
              },
              {
                "description": "Classification mode indicates whether the documents are <code>MULTI_CLASS</code> or <code>MULTI_LABEL</code>."
              }
            ]
          },
          "Labels": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelsList"
              },
              {
                "description": "One or more labels to associate with the custom classifier."
              }
            ]
          }
        },
        "description": "Configuration required for a custom classification model."
      },
      "DocumentClassifierMode": {
        "type": "string",
        "enum": [
          "MULTI_CLASS",
          "MULTI_LABEL"
        ]
      },
      "LabelsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LabelListItem"
        },
        "maxItems": 1000
      },
      "LabelListItem": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "maxLength": 5000
      },
      "EntityRecognitionConfig": {
        "type": "object",
        "required": [
          "EntityTypes"
        ],
        "properties": {
          "EntityTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityTypesList"
              },
              {
                "description": "Up to 25 entity types that the model is trained to recognize."
              }
            ]
          }
        },
        "description": "Configuration required for an entity recognition model."
      },
      "EntityTypesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EntityTypesListItem"
        }
      },
      "EntityTypesListItem": {
        "type": "object",
        "required": [
          "Type"
        ],
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityTypeName"
              },
              {
                "description": "<p>An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.</p> <p>Entity types must not contain the following invalid characters: \\n (line break), \\\\n (escaped line break, \\r (carriage return), \\\\r (escaped carriage return), \\t (tab), \\\\t (escaped tab), space, and , (comma).</p>"
              }
            ]
          }
        },
        "description": "An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer."
      },
      "EntityTypeName": {
        "type": "string",
        "pattern": "^(?![^\\n\\r\\t,]*\\\\n|\\\\r|\\\\t)[^\\n\\r\\t,]+$",
        "maxLength": 64
      },
      "ModelType": {
        "type": "string",
        "enum": [
          "DOCUMENT_CLASSIFIER",
          "ENTITY_RECOGNIZER"
        ]
      },
      "FlywheelS3Uri": {
        "type": "string",
        "pattern": "s3://[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9](/.*)?",
        "maxLength": 512
      },
      "DataSecurityConfig": {
        "type": "object",
        "properties": {
          "ModelKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:</p> <ul> <li> <p>KMS Key ID: <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>Amazon Resource Name (ARN) of a KMS Key: <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
              }
            ]
          },
          "VolumeKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "ID for the KMS key that Amazon Comprehend uses to encrypt the volume."
              }
            ]
          },
          "DataLakeKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "ID for the KMS key that Amazon Comprehend uses to encrypt the data in the data lake."
              }
            ]
          },
          "VpcConfig": {
            "$ref": "#/$defs/VpcConfig"
          }
        },
        "description": "Data security configuration."
      },
      "KmsKeyId": {
        "type": "string",
        "pattern": "^\\p{ASCII}+$",
        "maxLength": 2048
      },
      "VpcConfig": {
        "type": "object",
        "required": [
          "SecurityGroupIds",
          "Subnets"
        ],
        "properties": {
          "SecurityGroupIds": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroupIds"
              },
              {
                "description": "The ID number for a security group on an instance of your private VPC. Security groups on your VPC function serve as a virtual firewall to control inbound and outbound traffic and provides security for the resources that you’ll be accessing on the VPC. This ID number is preceded by \"sg-\", for instance: \"sg-03b388029b0a285ea\". For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html\">Security Groups for your VPC</a>. "
              }
            ]
          },
          "Subnets": {
            "allOf": [
              {
                "$ref": "#/$defs/Subnets"
              },
              {
                "description": "The ID for each subnet being used in your private VPC. This subnet is a subset of the a range of IPv4 addresses used by the VPC and is specific to a given availability zone in the VPC’s Region. This ID number is preceded by \"subnet-\", for instance: \"subnet-04ccf456919e69055\". For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\">VPCs and Subnets</a>. "
              }
            ]
          }
        },
        "description": " Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html\">Amazon VPC</a>. "
      },
      "SecurityGroupIds": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SecurityGroupId"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "SecurityGroupId": {
        "type": "string",
        "pattern": "[-0-9a-zA-Z]+",
        "minLength": 1,
        "maxLength": 32
      },
      "Subnets": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SubnetId"
        },
        "minItems": 1,
        "maxItems": 16
      },
      "SubnetId": {
        "type": "string",
        "pattern": "[-0-9a-zA-Z]+",
        "minLength": 1,
        "maxLength": 32
      },
      "ClientRequestTokenString": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The initial part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the key portion of the pair, with multiple possible values such as “sales,” “legal,” and “administration.” "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": " The second part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the initial (key) portion of the pair, with a value of “sales” to indicate the sales department. "
              }
            ]
          }
        },
        "description": "A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department. "
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://comprehend.us-east-1.amazonaws.com/#X-Amz-Target=Comprehend_20171127.CreateFlywheel"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FlywheelArn**",
            "**ActiveModelArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
