{
  "name": "CreateLicenseConfiguration",
  "description": "<p>Creates a license configuration.</p> <p>A license configuration is an abstraction of a customer license agreement that can be consumed and enforced by License Manager. Components include specifications for the license type (licensing by instance, socket, CPU, or vCPU), allowed tenancy (shared tenancy, Dedicated Instance, Dedicated Host, or all of these), license affinity to host (how long a license must be associated with a host), and the number of licenses purchased and used.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSLicenseManager.CreateLicenseConfiguration"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateLicenseConfigurationRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateLicenseConfigurationRequest": {
        "type": "object",
        "required": [
          "Name",
          "LicenseCountingType"
        ],
        "title": "CreateLicenseConfigurationRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Name of the license configuration."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Description of the license configuration."
              }
            ]
          },
          "LicenseCountingType": {
            "allOf": [
              {
                "$ref": "#/$defs/LicenseCountingType"
              },
              {
                "description": "Dimension used to track the license inventory."
              }
            ]
          },
          "LicenseCount": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxLong"
              },
              {
                "description": "Number of licenses managed by the license configuration."
              }
            ]
          },
          "LicenseCountHardLimit": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxBoolean"
              },
              {
                "description": "Indicates whether hard or soft license enforcement is used. Exceeding a hard limit blocks the launch of new instances."
              }
            ]
          },
          "LicenseRules": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "<p>License rules. The syntax is #name=value (for example, #allowedTenancy=EC2-DedicatedHost). The available rules vary by dimension, as follows.</p> <ul> <li> <p> <code>Cores</code> dimension: <code>allowedTenancy</code> | <code>licenseAffinityToHost</code> | <code>maximumCores</code> | <code>minimumCores</code> </p> </li> <li> <p> <code>Instances</code> dimension: <code>allowedTenancy</code> | <code>maximumCores</code> | <code>minimumCores</code> | <code>maximumSockets</code> | <code>minimumSockets</code> | <code>maximumVcpus</code> | <code>minimumVcpus</code> </p> </li> <li> <p> <code>Sockets</code> dimension: <code>allowedTenancy</code> | <code>licenseAffinityToHost</code> | <code>maximumSockets</code> | <code>minimumSockets</code> </p> </li> <li> <p> <code>vCPUs</code> dimension: <code>allowedTenancy</code> | <code>honorVcpuOptimization</code> | <code>maximumVcpus</code> | <code>minimumVcpus</code> </p> </li> </ul> <p>The unit for <code>licenseAffinityToHost</code> is days and the range is 1 to 180. The possible values for <code>allowedTenancy</code> are <code>EC2-Default</code>, <code>EC2-DedicatedHost</code>, and <code>EC2-DedicatedInstance</code>. The possible values for <code>honorVcpuOptimization</code> are <code>True</code> and <code>False</code>.</p>"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "Tags to add to the license configuration."
              }
            ]
          },
          "DisassociateWhenNotFound": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxBoolean"
              },
              {
                "description": "When true, disassociates a resource when software is uninstalled."
              }
            ]
          },
          "ProductInformationList": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductInformationList"
              },
              {
                "description": "Product information."
              }
            ]
          }
        }
      },
      "String": {
        "type": "string"
      },
      "LicenseCountingType": {
        "type": "string",
        "enum": [
          "vCPU",
          "Instance",
          "Core",
          "Socket"
        ]
      },
      "BoxLong": {
        "type": "integer"
      },
      "BoxBoolean": {
        "type": "boolean"
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Tag key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Tag value."
              }
            ]
          }
        },
        "description": "Details about a tag for a license configuration."
      },
      "ProductInformationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ProductInformation"
        }
      },
      "ProductInformation": {
        "type": "object",
        "required": [
          "ResourceType",
          "ProductInformationFilterList"
        ],
        "properties": {
          "ResourceType": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Resource type. The possible values are <code>SSM_MANAGED</code> | <code>RDS</code>."
              }
            ]
          },
          "ProductInformationFilterList": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductInformationFilterList"
              },
              {
                "description": "<p>A Product information filter consists of a <code>ProductInformationFilterComparator</code> which is a logical operator, a <code>ProductInformationFilterName</code> which specifies the type of filter being declared, and a <code>ProductInformationFilterValue</code> that specifies the value to filter on. </p> <p>Accepted values for <code>ProductInformationFilterName</code> are listed here along with descriptions and valid options for <code>ProductInformationFilterComparator</code>. </p> <p>The following filters and are supported when the resource type is <code>SSM_MANAGED</code>:</p> <ul> <li> <p> <code>Application Name</code> - The name of the application. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Application Publisher</code> - The publisher of the application. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Application Version</code> - The version of the application. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Platform Name</code> - The name of the platform. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Platform Type</code> - The platform type. Logical operator is <code>EQUALS</code>.</p> </li> <li> <p> <code>Tag:key</code> - The key of a tag attached to an Amazon Web Services resource you wish to exclude from automated discovery. Logical operator is <code>NOT_EQUALS</code>. The key for your tag must be appended to <code>Tag:</code> following the example: <code>Tag:name-of-your-key</code>. <code>ProductInformationFilterValue</code> is optional if you are not using values for the key. </p> </li> <li> <p> <code>AccountId</code> - The 12-digit ID of an Amazon Web Services account you wish to exclude from automated discovery. Logical operator is <code>NOT_EQUALS</code>.</p> </li> <li> <p> <code>License Included</code> - The type of license included. Logical operators are <code>EQUALS</code> and <code>NOT_EQUALS</code>. Possible values are: <code>sql-server-enterprise</code> | <code>sql-server-standard</code> | <code>sql-server-web</code> | <code>windows-server-datacenter</code>.</p> </li> </ul> <p>The following filters and logical operators are supported when the resource type is <code>RDS</code>:</p> <ul> <li> <p> <code>Engine Edition</code> - The edition of the database engine. Logical operator is <code>EQUALS</code>. Possible values are: <code>oracle-ee</code> | <code>oracle-se</code> | <code>oracle-se1</code> | <code>oracle-se2</code>.</p> </li> <li> <p> <code>License Pack</code> - The license pack. Logical operator is <code>EQUALS</code>. Possible values are: <code>data guard</code> | <code>diagnostic pack sqlt</code> | <code>tuning pack sqlt</code> | <code>ols</code> | <code>olap</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Describes product information for a license configuration."
      },
      "ProductInformationFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ProductInformationFilter"
        }
      },
      "ProductInformationFilter": {
        "type": "object",
        "required": [
          "ProductInformationFilterName",
          "ProductInformationFilterComparator"
        ],
        "properties": {
          "ProductInformationFilterName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Filter name."
              }
            ]
          },
          "ProductInformationFilterValue": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "Filter value."
              }
            ]
          },
          "ProductInformationFilterComparator": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Logical operator."
              }
            ]
          }
        },
        "description": "Describes product information filters."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://license-manager.us-east-1.amazonaws.com/#X-Amz-Target=AWSLicenseManager.CreateLicenseConfiguration"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**LicenseConfigurationArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
