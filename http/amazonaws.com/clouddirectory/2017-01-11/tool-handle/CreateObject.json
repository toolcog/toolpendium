{
  "name": "CreateObject",
  "description": "Creates an object in a <a>Directory</a>. Additionally attaches the object to a parent, if a parent reference and <code>LinkName</code> is specified. An object is simply a collection of <a>Facet</a> attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. ",
  "parameters": {
    "type": "object",
    "properties": {
      "x-amz-data-partition": {
        "type": "string",
        "description": "The Amazon Resource Name (ARN) that is associated with the <a>Directory</a> in which the object will be created. For more information, see <a>arns</a>."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "SchemaFacets"
        ],
        "properties": {
          "SchemaFacets": {
            "description": "A list of schema facets to be associated with the object. Do not provide minor version components. See <a>SchemaFacet</a> for details.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SchemaFacet"
            }
          },
          "ObjectAttributeList": {
            "description": "The attribute map whose attribute ARN contains the key and attribute value as the map value.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AttributeKeyAndValue"
            }
          },
          "ParentReference": {
            "description": "The reference that identifies an object.",
            "type": "object",
            "properties": {
              "Selector": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SelectorObjectReference"
                  },
                  {
                    "description": "<p>A path selector supports easy selection of an object by the parent/child links leading to it from the directory root. Use the link names from each parent/child link to construct the path. Path selectors start with a slash (/) and link names are separated by slashes. For more information about paths, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_access_objects.html\">Access Objects</a>. You can identify an object in one of the following ways:</p> <ul> <li> <p> <i>$ObjectIdentifier</i> - An object identifier is an opaque string provided by Amazon Cloud Directory. When creating objects, the system will provide you with the identifier of the created object. An objectâ€™s identifier is immutable and no two objects will ever share the same object identifier. To identify an object with ObjectIdentifier, the ObjectIdentifier must be wrapped in double quotes. </p> </li> <li> <p> <i>/some/path</i> - Identifies the object based on path</p> </li> <li> <p> <i>#SomeBatchReference</i> - Identifies the object in a batch call</p> </li> </ul>"
                  }
                ]
              }
            }
          },
          "LinkName": {
            "description": "The name of link that is used to attach this object to a parent.",
            "type": "string",
            "pattern": "[^\\/\\[\\]\\(\\):\\{\\}#@!?\\s\\\\;]+",
            "minLength": 1,
            "maxLength": 64
          }
        }
      }
    },
    "required": [
      "x-amz-data-partition",
      "body"
    ],
    "$defs": {
      "SchemaFacet": {
        "type": "object",
        "properties": {
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The ARN of the schema that contains the facet with no minor component. See <a>arns</a> and <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_inplaceschemaupgrade.html\">In-Place Schema Upgrade</a> for a description of when to provide minor versions. If this value is set, FacetName must also be set."
              }
            ]
          },
          "FacetName": {
            "allOf": [
              {
                "$ref": "#/$defs/FacetName"
              },
              {
                "description": "The name of the facet. If this value is set, SchemaArn must also be set."
              }
            ]
          }
        },
        "description": "A facet."
      },
      "Arn": {
        "type": "string"
      },
      "FacetName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9._-]*$",
        "minLength": 1,
        "maxLength": 64
      },
      "AttributeKeyAndValue": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeKey"
              },
              {
                "description": "The key of the attribute."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TypedAttributeValue"
              },
              {
                "description": "The value of the attribute."
              }
            ]
          }
        },
        "description": "The combination of an attribute key and an attribute value."
      },
      "AttributeKey": {
        "type": "object",
        "required": [
          "SchemaArn",
          "FacetName",
          "Name"
        ],
        "properties": {
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the schema that contains the facet and attribute."
              }
            ]
          },
          "FacetName": {
            "allOf": [
              {
                "$ref": "#/$defs/FacetName"
              },
              {
                "description": "The name of the facet that the attribute exists within."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeName"
              },
              {
                "description": "The name of the attribute."
              }
            ]
          }
        },
        "description": "A unique identifier for an attribute."
      },
      "AttributeName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9._:-]*$",
        "minLength": 1,
        "maxLength": 230
      },
      "TypedAttributeValue": {
        "type": "object",
        "properties": {
          "StringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/StringAttributeValue"
              },
              {
                "description": "A string data value."
              }
            ]
          },
          "BinaryValue": {
            "allOf": [
              {
                "$ref": "#/$defs/BinaryAttributeValue"
              },
              {
                "description": "A binary data value."
              }
            ]
          },
          "BooleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanAttributeValue"
              },
              {
                "description": "A Boolean data value."
              }
            ]
          },
          "NumberValue": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberAttributeValue"
              },
              {
                "description": "A number data value."
              }
            ]
          },
          "DatetimeValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DatetimeAttributeValue"
              },
              {
                "description": "A date and time value."
              }
            ]
          }
        },
        "description": "Represents the data for a typed attribute. You can set one, and only one, of the elements. Each attribute in an item is a name-value pair. Attributes have a single value."
      },
      "StringAttributeValue": {
        "type": "string"
      },
      "BinaryAttributeValue": {
        "type": "string"
      },
      "BooleanAttributeValue": {
        "type": "boolean"
      },
      "NumberAttributeValue": {
        "type": "string"
      },
      "DatetimeAttributeValue": {
        "type": "string",
        "format": "date-time"
      },
      "SelectorObjectReference": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://clouddirectory.us-east-1.amazonaws.com/amazonclouddirectory/2017-01-11/object#x-amz-data-partition"
    },
    "headers": {
      "x-amz-data-partition": {
        "$": "x-amz-data-partition"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ObjectIdentifier**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
