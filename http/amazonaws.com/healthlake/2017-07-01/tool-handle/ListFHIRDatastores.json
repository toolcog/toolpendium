{
  "name": "ListFHIRDatastores",
  "description": "Lists all FHIR data stores that are in the userâ€™s account, regardless of data store status.",
  "parameters": {
    "type": "object",
    "properties": {
      "MaxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "NextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "HealthLake.ListFHIRDatastores"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ListFHIRDatastoresRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ListFHIRDatastoresRequest": {
        "type": "object",
        "title": "ListFHIRDatastoresRequest",
        "properties": {
          "Filter": {
            "allOf": [
              {
                "$ref": "#/$defs/DatastoreFilter"
              },
              {
                "description": "Lists all filters associated with a FHIR data store request."
              }
            ]
          },
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/NextToken"
              },
              {
                "description": "Fetches the next page of data stores when results are paginated."
              }
            ]
          },
          "MaxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxResultsInteger"
              },
              {
                "description": "The maximum number of data stores returned in a single page of a ListFHIRDatastoresRequest call."
              }
            ]
          }
        }
      },
      "DatastoreFilter": {
        "type": "object",
        "properties": {
          "DatastoreName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatastoreName"
              },
              {
                "description": "Allows the user to filter data store results by name."
              }
            ]
          },
          "DatastoreStatus": {
            "allOf": [
              {
                "$ref": "#/$defs/DatastoreStatus"
              },
              {
                "description": "Allows the user to filter data store results by status."
              }
            ]
          },
          "CreatedBefore": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "A filter that allows the user to set cutoff dates for records. All data stores created before the specified date will be included in the results. "
              }
            ]
          },
          "CreatedAfter": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "A filter that allows the user to set cutoff dates for records. All data stores created after the specified date will be included in the results."
              }
            ]
          }
        },
        "description": "The filters applied to data store query."
      },
      "DatastoreName": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
        "minLength": 1,
        "maxLength": 256
      },
      "DatastoreStatus": {
        "type": "string",
        "enum": [
          "CREATING",
          "ACTIVE",
          "DELETING",
          "DELETED"
        ]
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "NextToken": {
        "type": "string",
        "pattern": "\\p{ASCII}{0,8192}",
        "maxLength": 8192
      },
      "MaxResultsInteger": {
        "type": "integer",
        "minimum": 1,
        "maximum": 500
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://healthlake.us-east-1.amazonaws.com/#X-Amz-Target=HealthLake.ListFHIRDatastores{?MaxResults,NextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**DatastorePropertiesList**",
            "**NextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
