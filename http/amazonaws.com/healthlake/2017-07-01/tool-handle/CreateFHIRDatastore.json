{
  "name": "CreateFHIRDatastore",
  "description": "Creates a data store that can ingest and export FHIR formatted data.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "HealthLake.CreateFHIRDatastore"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateFHIRDatastoreRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateFHIRDatastoreRequest": {
        "type": "object",
        "required": [
          "DatastoreTypeVersion"
        ],
        "title": "CreateFHIRDatastoreRequest",
        "properties": {
          "DatastoreName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatastoreName"
              },
              {
                "description": "The user generated name for the data store."
              }
            ]
          },
          "DatastoreTypeVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/FHIRVersion"
              },
              {
                "description": "The FHIR version of the data store. The only supported version is R4."
              }
            ]
          },
          "SseConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SseConfiguration"
              },
              {
                "description": " The server-side encryption key configuration for a customer provided encryption key specified for creating a data store. "
              }
            ]
          },
          "PreloadDataConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/PreloadDataConfig"
              },
              {
                "description": "Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea."
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientTokenString"
              },
              {
                "description": "Optional user provided token used for ensuring idempotency."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": " Resource tags that are applied to a data store when it is created. "
              }
            ]
          },
          "IdentityProviderConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/IdentityProviderConfiguration"
              },
              {
                "description": "The configuration of the identity provider that you want to use for your data store."
              }
            ]
          }
        }
      },
      "DatastoreName": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-%@]*)$",
        "minLength": 1,
        "maxLength": 256
      },
      "FHIRVersion": {
        "type": "string",
        "enum": [
          "R4"
        ]
      },
      "SseConfiguration": {
        "type": "object",
        "required": [
          "KmsEncryptionConfig"
        ],
        "properties": {
          "KmsEncryptionConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsEncryptionConfig"
              },
              {
                "description": " The KMS encryption configuration used to provide details for data encryption. "
              }
            ]
          }
        },
        "description": " The server-side encryption key configuration for a customer provided encryption key. "
      },
      "KmsEncryptionConfig": {
        "type": "object",
        "required": [
          "CmkType"
        ],
        "properties": {
          "CmkType": {
            "allOf": [
              {
                "$ref": "#/$defs/CmkType"
              },
              {
                "description": " The type of customer-managed-key(CMK) used for encryption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs. "
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionKeyID"
              },
              {
                "description": " The KMS encryption key id/alias used to encrypt the data store contents at rest. "
              }
            ]
          }
        },
        "description": " The customer-managed-key(CMK) used when creating a data store. If a customer owned key is not specified, an AWS owned key will be used for encryption. "
      },
      "CmkType": {
        "type": "string",
        "enum": [
          "CUSTOMER_MANAGED_KMS_KEY",
          "AWS_OWNED_KMS_KEY"
        ]
      },
      "EncryptionKeyID": {
        "type": "string",
        "pattern": "(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\\d:)?(\\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))",
        "minLength": 1,
        "maxLength": 400
      },
      "PreloadDataConfig": {
        "type": "object",
        "required": [
          "PreloadDataType"
        ],
        "properties": {
          "PreloadDataType": {
            "allOf": [
              {
                "$ref": "#/$defs/PreloadDataType"
              },
              {
                "description": "The type of preloaded data. Only Synthea preloaded data is supported."
              }
            ]
          }
        },
        "description": " The input properties for the preloaded data store. Only data preloaded from Synthea is supported."
      },
      "PreloadDataType": {
        "type": "string",
        "enum": [
          "SYNTHEA"
        ]
      },
      "ClientTokenString": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": " The key portion of a tag. Tag keys are case sensitive. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": " The value portion of a tag. Tag values are case sensitive. "
              }
            ]
          }
        },
        "description": " A tag is a label consisting of a user-defined key and value. The form for tags is {\"Key\", \"Value\"} "
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      },
      "IdentityProviderConfiguration": {
        "type": "object",
        "required": [
          "AuthorizationStrategy"
        ],
        "properties": {
          "AuthorizationStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthorizationStrategy"
              },
              {
                "description": "The authorization strategy that you selected when you created the data store."
              }
            ]
          },
          "FineGrainedAuthorizationEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "If you enabled fine-grained authorization when you created the data store."
              }
            ]
          },
          "Metadata": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationMetadata"
              },
              {
                "description": "<p>The JSON metadata elements that you want to use in your identity provider configuration. Required elements are listed based on the launch specification of the SMART application. For more information on all possible elements, see <a href=\"https://build.fhir.org/ig/HL7/smart-app-launch/conformance.html#metadata\">Metadata</a> in SMART's App Launch specification.</p> <p> <code>authorization_endpoint</code>: The URL to the OAuth2 authorization endpoint.</p> <p> <code>grant_types_supported</code>: An array of grant types that are supported at the token endpoint. You must provide at least one grant type option. Valid options are <code>authorization_code</code> and <code>client_credentials</code>.</p> <p> <code>token_endpoint</code>: The URL to the OAuth2 token endpoint.</p> <p> <code>capabilities</code>: An array of strings of the SMART capabilities that the authorization server supports.</p> <p> <code>code_challenge_methods_supported</code>: An array of strings of supported PKCE code challenge methods. You must include the <code>S256</code> method in the array of PKCE code challenge methods.</p>"
              }
            ]
          },
          "IdpLambdaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Lambda function that you want to use to decode the access token created by the authorization server."
              }
            ]
          }
        },
        "description": "The identity provider configuration that you gave when the data store was created."
      },
      "AuthorizationStrategy": {
        "type": "string",
        "enum": [
          "SMART_ON_FHIR_V1",
          "AWS_AUTH"
        ]
      },
      "Boolean": {
        "type": "boolean"
      },
      "ConfigurationMetadata": {
        "type": "string"
      },
      "LambdaArn": {
        "type": "string",
        "pattern": "arn:aws:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9\\-_\\.]+(:(\\$LATEST|[a-zA-Z0-9\\-_]+))?",
        "minLength": 49,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://healthlake.us-east-1.amazonaws.com/#X-Amz-Target=HealthLake.CreateFHIRDatastore"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**DatastoreId**",
            "**DatastoreArn**",
            "**DatastoreStatus**",
            "**DatastoreEndpoint**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
