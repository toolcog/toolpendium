{
  "name": "StartCodegenJob",
  "description": "Starts a code generation job for a specified Amplify app and backend environment.",
  "parameters": {
    "type": "object",
    "properties": {
      "appId": {
        "type": "string",
        "pattern": "d[a-z0-9]+",
        "minLength": 1,
        "maxLength": 20,
        "description": "The unique ID for the Amplify app."
      },
      "environmentName": {
        "type": "string",
        "description": "The name of the backend environment that is a part of the Amplify app."
      },
      "clientToken": {
        "type": "string",
        "description": "The idempotency token used to ensure that the code generation job request completes only once."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "codegenJobToCreate"
        ],
        "properties": {
          "codegenJobToCreate": {
            "description": "The code generation job resource configuration.",
            "type": "object",
            "properties": {
              "renderConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CodegenJobRenderConfig"
                  },
                  {
                    "description": "The code generation configuration for the codegen job."
                  }
                ]
              },
              "genericDataSchema": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CodegenJobGenericDataSchema"
                  },
                  {
                    "description": "The data schema to use for a code generation job."
                  }
                ]
              },
              "autoGenerateForms": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Specifies whether to autogenerate forms in the code generation job."
                  }
                ]
              },
              "features": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CodegenFeatureFlags"
                  },
                  {
                    "description": "The feature flags for a code generation job."
                  }
                ]
              },
              "tags": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Tags"
                  },
                  {
                    "description": "One or more key-value pairs to use when tagging the code generation job data."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "appId",
      "environmentName",
      "body"
    ],
    "$defs": {
      "CodegenJobRenderConfig": {
        "type": "object",
        "properties": {
          "react": {
            "allOf": [
              {
                "$ref": "#/$defs/ReactStartCodegenJobData"
              },
              {
                "description": "The name of the <code>ReactStartCodegenJobData</code> object."
              }
            ]
          }
        },
        "description": "Describes the configuration information for rendering the UI component associated with the code generation job."
      },
      "ReactStartCodegenJobData": {
        "type": "object",
        "properties": {
          "module": {
            "allOf": [
              {
                "$ref": "#/$defs/JSModule"
              },
              {
                "description": "The JavaScript module type."
              }
            ]
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/$defs/JSTarget"
              },
              {
                "description": "The ECMAScript specification to use."
              }
            ]
          },
          "script": {
            "allOf": [
              {
                "$ref": "#/$defs/JSScript"
              },
              {
                "description": "The file type to use for a JavaScript project."
              }
            ]
          },
          "renderTypeDeclarations": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the code generation job should render type declaration files."
              }
            ]
          },
          "inlineSourceMap": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the code generation job should render inline source maps."
              }
            ]
          },
          "apiConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ApiConfiguration"
              },
              {
                "description": "The API configuration for the code generation job."
              }
            ]
          }
        },
        "description": "Describes the code generation job configuration for a React project."
      },
      "JSModule": {
        "type": "string",
        "enum": [
          "es2020",
          "esnext"
        ]
      },
      "JSTarget": {
        "type": "string",
        "enum": [
          "es2015",
          "es2020"
        ]
      },
      "JSScript": {
        "type": "string",
        "enum": [
          "jsx",
          "tsx",
          "js"
        ]
      },
      "Boolean": {
        "type": "boolean"
      },
      "ApiConfiguration": {
        "type": "object",
        "properties": {
          "graphQLConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/GraphQLRenderConfig"
              },
              {
                "description": "The configuration for an application using GraphQL APIs."
              }
            ]
          },
          "dataStoreConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DataStoreRenderConfig"
              },
              {
                "description": "The configuration for an application using DataStore APIs."
              }
            ]
          },
          "noApiConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/NoApiRenderConfig"
              },
              {
                "description": "The configuration for an application with no API being used."
              }
            ]
          }
        },
        "description": "Describes the API configuration for a code generation job."
      },
      "GraphQLRenderConfig": {
        "type": "object",
        "required": [
          "typesFilePath",
          "queriesFilePath",
          "mutationsFilePath",
          "subscriptionsFilePath",
          "fragmentsFilePath"
        ],
        "properties": {
          "typesFilePath": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The path to the GraphQL types file, relative to the component output directory."
              }
            ]
          },
          "queriesFilePath": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The path to the GraphQL queries file, relative to the component output directory."
              }
            ]
          },
          "mutationsFilePath": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The path to the GraphQL mutations file, relative to the component output directory."
              }
            ]
          },
          "subscriptionsFilePath": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The path to the GraphQL subscriptions file, relative to the component output directory."
              }
            ]
          },
          "fragmentsFilePath": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The path to the GraphQL fragments file, relative to the component output directory."
              }
            ]
          }
        },
        "description": "Describes the GraphQL configuration for an API for a code generation job."
      },
      "String": {
        "type": "string"
      },
      "DataStoreRenderConfig": {
        "type": "object",
        "properties": {},
        "description": "Describes the DataStore configuration for an API for a code generation job."
      },
      "NoApiRenderConfig": {
        "type": "object",
        "properties": {},
        "description": "Describes the configuration for an application with no API being used."
      },
      "CodegenJobGenericDataSchema": {
        "type": "object",
        "required": [
          "dataSourceType",
          "models",
          "enums",
          "nonModels"
        ],
        "properties": {
          "dataSourceType": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenJobGenericDataSourceType"
              },
              {
                "description": "The type of the data source for the schema. Currently, the only valid value is an Amplify <code>DataStore</code>."
              }
            ]
          },
          "models": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataModels"
              },
              {
                "description": "The name of a <code>CodegenGenericDataModel</code>."
              }
            ]
          },
          "enums": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataEnums"
              },
              {
                "description": "The name of a <code>CodegenGenericDataEnum</code>."
              }
            ]
          },
          "nonModels": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataNonModels"
              },
              {
                "description": "The name of a <code>CodegenGenericDataNonModel</code>."
              }
            ]
          }
        },
        "description": "Describes the data schema for a code generation job."
      },
      "CodegenJobGenericDataSourceType": {
        "type": "string",
        "enum": [
          "DataStore"
        ]
      },
      "CodegenGenericDataModels": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/CodegenGenericDataModel"
        }
      },
      "CodegenGenericDataModel": {
        "type": "object",
        "required": [
          "fields",
          "primaryKeys"
        ],
        "properties": {
          "fields": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataFields"
              },
              {
                "description": "The fields in the generic data model."
              }
            ]
          },
          "isJoinTable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the generic data model is a join table."
              }
            ]
          },
          "primaryKeys": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenPrimaryKeysList"
              },
              {
                "description": "The primary keys of the generic data model."
              }
            ]
          }
        },
        "description": "Describes a model in a generic data schema."
      },
      "CodegenGenericDataFields": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/CodegenGenericDataField"
        }
      },
      "CodegenGenericDataField": {
        "type": "object",
        "required": [
          "dataType",
          "dataTypeValue",
          "required",
          "readOnly",
          "isArray"
        ],
        "properties": {
          "dataType": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataFieldDataType"
              },
              {
                "description": "The data type for the generic data field."
              }
            ]
          },
          "dataTypeValue": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value of the data type for the generic data field."
              }
            ]
          },
          "required": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the generic data field is required."
              }
            ]
          },
          "readOnly": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the generic data field is read-only."
              }
            ]
          },
          "isArray": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the generic data field is an array."
              }
            ]
          },
          "relationship": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataRelationshipType"
              },
              {
                "description": "The relationship of the generic data schema."
              }
            ]
          }
        },
        "description": "Describes a field in a generic data schema."
      },
      "CodegenGenericDataFieldDataType": {
        "type": "string",
        "enum": [
          "ID",
          "String",
          "Int",
          "Float",
          "AWSDate",
          "AWSTime",
          "AWSDateTime",
          "AWSTimestamp",
          "AWSEmail",
          "AWSURL",
          "AWSIPAddress",
          "Boolean",
          "AWSJSON",
          "AWSPhone",
          "Enum",
          "Model",
          "NonModel"
        ]
      },
      "CodegenGenericDataRelationshipType": {
        "type": "object",
        "required": [
          "type",
          "relatedModelName"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericDataRelationshipType"
              },
              {
                "description": "The data relationship type."
              }
            ]
          },
          "relatedModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the related model in the data relationship."
              }
            ]
          },
          "relatedModelFields": {
            "allOf": [
              {
                "$ref": "#/$defs/RelatedModelFieldsList"
              },
              {
                "description": "The related model fields in the data relationship."
              }
            ]
          },
          "canUnlinkAssociatedModel": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the relationship can unlink the associated model."
              }
            ]
          },
          "relatedJoinFieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the related join field in the data relationship."
              }
            ]
          },
          "relatedJoinTableName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the related join table in the data relationship."
              }
            ]
          },
          "belongsToFieldOnRelatedModel": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value of the <code>belongsTo</code> field on the related data model. "
              }
            ]
          },
          "associatedFields": {
            "allOf": [
              {
                "$ref": "#/$defs/AssociatedFieldsList"
              },
              {
                "description": "The associated fields of the data relationship."
              }
            ]
          },
          "isHasManyIndex": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the <code>@index</code> directive is supported for a <code>hasMany</code> data relationship."
              }
            ]
          }
        },
        "description": "Describes the relationship between generic data models."
      },
      "GenericDataRelationshipType": {
        "type": "string",
        "enum": [
          "HAS_MANY",
          "HAS_ONE",
          "BELONGS_TO"
        ]
      },
      "RelatedModelFieldsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "AssociatedFieldsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "CodegenPrimaryKeysList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "CodegenGenericDataEnums": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/CodegenGenericDataEnum"
        }
      },
      "CodegenGenericDataEnum": {
        "type": "object",
        "required": [
          "values"
        ],
        "properties": {
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataEnumValuesList"
              },
              {
                "description": "The list of enum values in the generic data schema."
              }
            ]
          }
        },
        "description": "Describes the enums in a generic data schema."
      },
      "CodegenGenericDataEnumValuesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "CodegenGenericDataNonModels": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/CodegenGenericDataNonModel"
        }
      },
      "CodegenGenericDataNonModel": {
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "allOf": [
              {
                "$ref": "#/$defs/CodegenGenericDataNonModelFields"
              },
              {
                "description": "The fields in a generic data schema non model."
              }
            ]
          }
        },
        "description": "Describes a non-model in a generic data schema."
      },
      "CodegenGenericDataNonModelFields": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/CodegenGenericDataField"
        }
      },
      "CodegenFeatureFlags": {
        "type": "object",
        "properties": {
          "isRelationshipSupported": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifes whether a code generation job supports data relationships."
              }
            ]
          },
          "isNonModelSupported": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether a code generation job supports non models."
              }
            ]
          }
        },
        "description": "Describes the feature flags that you can specify for a code generation job."
      },
      "Tags": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/TagValue"
        }
      },
      "TagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://amplifyuibuilder.us-east-1.amazonaws.com/app/{appId}/environment/{environmentName}/codegen-jobs{?clientToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**entity**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
