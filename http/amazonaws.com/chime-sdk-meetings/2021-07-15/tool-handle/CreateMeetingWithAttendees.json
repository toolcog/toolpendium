{
  "name": "CreateMeetingWithAttendees",
  "description": " Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see <a href=\"https://docs.aws.amazon.com/chime/latest/dg/chime-sdk-meetings-regions.html\">Amazon Chime SDK Media Regions</a> in the <i>Amazon Chime Developer Guide</i>. For more information about the Amazon Chime SDK, see <a href=\"https://docs.aws.amazon.com/chime/latest/dg/meetings-sdk.html\">Using the Amazon Chime SDK</a> in the <i>Amazon Chime Developer Guide</i>. ",
  "parameters": {
    "type": "object",
    "properties": {
      "operation": {
        "type": "string",
        "enum": [
          "create-attendees"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "ClientRequestToken",
          "MediaRegion",
          "ExternalMeetingId",
          "Attendees"
        ],
        "properties": {
          "ClientRequestToken": {
            "description": "The unique identifier for the client request. Use a different token for different meetings.",
            "type": "string",
            "pattern": "[-_a-zA-Z0-9]*",
            "minLength": 2,
            "maxLength": 64,
            "format": "password"
          },
          "MediaRegion": {
            "description": "<p>The Region in which to create the meeting.</p> <p> Available values: <code>af-south-1</code>, <code>ap-northeast-1</code>, <code>ap-northeast-2</code>, <code>ap-south-1</code>, <code>ap-southeast-1</code>, <code>ap-southeast-2</code>, <code>ca-central-1</code>, <code>eu-central-1</code>, <code>eu-north-1</code>, <code>eu-south-1</code>, <code>eu-west-1</code>, <code>eu-west-2</code>, <code>eu-west-3</code>, <code>sa-east-1</code>, <code>us-east-1</code>, <code>us-east-2</code>, <code>us-west-1</code>, <code>us-west-2</code>. </p> <p>Available values in AWS GovCloud (US) Regions: <code>us-gov-east-1</code>, <code>us-gov-west-1</code>.</p>",
            "type": "string",
            "minLength": 2,
            "maxLength": 64
          },
          "MeetingHostId": {
            "description": "Reserved.",
            "type": "string",
            "minLength": 2,
            "maxLength": 64,
            "format": "password"
          },
          "ExternalMeetingId": {
            "description": "<p>The external meeting ID.</p> <p>Pattern: <code>[-_&amp;@+=,(){}\\[\\]\\/«».:|'\"#a-zA-Z0-9À-ÿ\\s]*</code> </p> <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>",
            "type": "string",
            "minLength": 2,
            "maxLength": 64,
            "format": "password"
          },
          "MeetingFeatures": {
            "description": "The configuration settings of the features available to a meeting.",
            "type": "object",
            "properties": {
              "Audio": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AudioFeatures"
                  },
                  {
                    "description": "The configuration settings for the audio features available to a meeting."
                  }
                ]
              }
            }
          },
          "NotificationsConfiguration": {
            "description": "The configuration for resource targets to receive notifications when meeting and attendee events occur.",
            "type": "object",
            "properties": {
              "LambdaFunctionArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The ARN of the AWS Lambda function in the notifications configuration."
                  }
                ]
              },
              "SnsTopicArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The ARN of the SNS topic."
                  }
                ]
              },
              "SqsQueueArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The ARN of the SQS queue."
                  }
                ]
              }
            }
          },
          "Attendees": {
            "description": "The attendee information, including attendees' IDs and join tokens.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/CreateAttendeeRequestItem"
            },
            "minItems": 1,
            "maxItems": 20
          },
          "PrimaryMeetingId": {
            "description": "When specified, replicates the media from the primary meeting to the new meeting.",
            "type": "string",
            "minLength": 2,
            "maxLength": 64
          },
          "TenantIds": {
            "description": "A consistent and opaque identifier, created and maintained by the builder to represent a segment of their users.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/TenantId"
            },
            "minItems": 1,
            "maxItems": 5
          },
          "Tags": {
            "description": "The tags in the request.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 0,
            "maxItems": 50
          }
        }
      }
    },
    "required": [
      "operation",
      "body"
    ],
    "$defs": {
      "AudioFeatures": {
        "type": "object",
        "properties": {
          "EchoReduction": {
            "allOf": [
              {
                "$ref": "#/$defs/MeetingFeatureStatus"
              },
              {
                "description": "Makes echo reduction available to clients who connect to the meeting."
              }
            ]
          }
        },
        "description": "An optional category of meeting features that contains audio-specific configurations, such as operating parameters for Amazon Voice Focus. "
      },
      "MeetingFeatureStatus": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "UNAVAILABLE"
        ]
      },
      "Arn": {
        "type": "string",
        "pattern": "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$",
        "minLength": 1,
        "maxLength": 1024,
        "format": "password"
      },
      "CreateAttendeeRequestItem": {
        "type": "object",
        "required": [
          "ExternalUserId"
        ],
        "properties": {
          "ExternalUserId": {
            "allOf": [
              {
                "$ref": "#/$defs/ExternalUserId"
              },
              {
                "description": "<p>The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.</p> <p>Pattern: <code>[-_&amp;@+=,(){}\\[\\]\\/«».:|'\"#a-zA-Z0-9À-ÿ\\s]*</code> </p> <p>Values that begin with <code>aws:</code> are reserved. You can't configure a value that uses this prefix. Case insensitive.</p>"
              }
            ]
          },
          "Capabilities": {
            "allOf": [
              {
                "$ref": "#/$defs/AttendeeCapabilities"
              },
              {
                "description": "A list of one or more capabilities."
              }
            ]
          }
        },
        "description": "The Amazon Chime SDK attendee fields to create, used with the BatchCreateAttendee action."
      },
      "ExternalUserId": {
        "type": "string",
        "minLength": 2,
        "maxLength": 64,
        "format": "password"
      },
      "AttendeeCapabilities": {
        "type": "object",
        "required": [
          "Audio",
          "Video",
          "Content"
        ],
        "properties": {
          "Audio": {
            "allOf": [
              {
                "$ref": "#/$defs/MediaCapabilities"
              },
              {
                "description": "The audio capability assigned to an attendee."
              }
            ]
          },
          "Video": {
            "allOf": [
              {
                "$ref": "#/$defs/MediaCapabilities"
              },
              {
                "description": "The video capability assigned to an attendee."
              }
            ]
          },
          "Content": {
            "allOf": [
              {
                "$ref": "#/$defs/MediaCapabilities"
              },
              {
                "description": "The content capability assigned to an attendee."
              }
            ]
          }
        },
        "description": "<p>The media capabilities of an attendee: audio, video, or content. </p> <note> <p>You use the capabilities with a set of values that control what the capabilities can do, such as <code>SendReceive</code> data. For more information about those values, see .</p> </note> <p>When using capabilities, be aware of these corner cases:</p> <ul> <li> <p>You can't set <code>content</code> capabilities to <code>SendReceive</code> or <code>Receive</code> unless you also set <code>video</code> capabilities to <code>SendReceive</code> or <code>Receive</code>. If you don't set the <code>video</code> capability to receive, the response will contain an HTTP 400 Bad Request status code. However, you can set your <code>video</code> capability to receive and you set your <code>content</code> capability to not receive.</p> </li> <li> <p>When you change an <code>audio</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee left their microphone unmuted, audio will flow from the attendee to the other meeting participants.</p> </li> <li> <p>When you change a <code>video</code> or <code>content</code> capability from <code>None</code> or <code>Receive</code> to <code>Send</code> or <code>SendReceive</code> , and if the attendee turned on their video or content streams, remote attendees can receive those streams, but only after media renegotiation between the client and the Amazon Chime back-end server.</p> </li> </ul>"
      },
      "MediaCapabilities": {
        "type": "string",
        "enum": [
          "SendReceive",
          "Send",
          "Receive",
          "None"
        ]
      },
      "TenantId": {
        "type": "string",
        "pattern": "^(?!.*?(.)\\1{3})[-_!@#$a-zA-Z0-9]*$",
        "minLength": 2,
        "maxLength": 256
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "A key-value pair that you define."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^[a-zA-Z+-=._:/]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "[\\s\\w+-=\\.:/@]*",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://meetings-chime.us-east-1.amazonaws.com/meetings#operation=create-attendees{?operation}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Meeting**",
            "**Attendees**",
            "**Errors**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
