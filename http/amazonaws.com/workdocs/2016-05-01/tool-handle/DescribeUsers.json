{
  "name": "DescribeUsers",
  "description": "<p>Describes the specified users. You can describe all users or filter the results (for example, by status or organization).</p> <p>By default, Amazon WorkDocs returns the first 24 active or pending users. If there are more results, the response includes a marker that you can use to request the next set of results.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "Authentication": {
        "type": "string",
        "minLength": 1,
        "maxLength": 8199,
        "format": "password",
        "description": "Amazon WorkDocs authentication token. Not required when using Amazon Web Services administrator credentials to access the API."
      },
      "organizationId": {
        "type": "string",
        "pattern": "[&\\w+-.@]+",
        "minLength": 1,
        "maxLength": 256,
        "description": "The ID of the organization."
      },
      "userIds": {
        "type": "string",
        "pattern": "[&\\w+-.@, ]+",
        "minLength": 1,
        "maxLength": 2000,
        "description": "The IDs of the users."
      },
      "query": {
        "type": "string",
        "pattern": "[\\u0020-\\uFFFF]+",
        "minLength": 1,
        "maxLength": 512,
        "format": "password",
        "description": "<p>A query to filter users by user name. Remember the following about the <code>Userids</code> and <code>Query</code> parameters:</p> <ul> <li> <p>If you don't use either parameter, the API returns a paginated list of all users on the site.</p> </li> <li> <p>If you use both parameters, the API ignores the <code>Query</code> parameter.</p> </li> <li> <p>The <code>Userid</code> parameter only returns user names that match a corresponding user ID.</p> </li> <li> <p>The <code>Query</code> parameter runs a \"prefix\" search for users by the <code>GivenName</code>, <code>SurName</code>, or <code>UserName</code> fields included in a <a href=\"https://docs.aws.amazon.com/workdocs/latest/APIReference/API_CreateUser.html\">CreateUser</a> API call. For example, querying on <code>Ma</code> returns Márcia Oliveira, María García, and Mateo Jackson. If you use multiple characters, the API only returns data that matches all characters. For example, querying on <code>Ma J</code> only returns Mateo Jackson.</p> </li> </ul>"
      },
      "include": {
        "type": "string",
        "enum": [
          "ALL",
          "ACTIVE_PENDING"
        ],
        "description": "The state of the users. Specify \"ALL\" to include inactive users."
      },
      "order": {
        "type": "string",
        "enum": [
          "ASCENDING",
          "DESCENDING"
        ],
        "description": "The order for the results."
      },
      "sort": {
        "type": "string",
        "enum": [
          "USER_NAME",
          "FULL_NAME",
          "STORAGE_LIMIT",
          "USER_STATUS",
          "STORAGE_USED"
        ],
        "description": "The sorting criteria."
      },
      "marker": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048,
        "description": "The marker for the next set of results. (You received this marker from a previous call.)"
      },
      "limit": {
        "type": "integer",
        "minimum": 1,
        "maximum": 999,
        "description": "The maximum number of items to return."
      },
      "fields": {
        "type": "string",
        "pattern": "[\\w,]+",
        "minLength": 1,
        "maxLength": 256,
        "description": "A comma-separated list of values. Specify \"STORAGE_METADATA\" to include the user storage quota and utilization information."
      },
      "Limit": {
        "type": "string",
        "description": "Pagination limit"
      },
      "Marker": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://workdocs.us-east-1.amazonaws.com/api/v1/users{?organizationId,userIds,query,include,order,sort,marker,limit,fields,Limit,Marker}"
    },
    "headers": {
      "Authentication": {
        "$": "Authentication"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Users**",
            "**TotalNumberOfUsers**",
            "**Marker**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
