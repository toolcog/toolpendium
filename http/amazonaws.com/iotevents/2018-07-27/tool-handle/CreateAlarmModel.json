{
  "name": "CreateAlarmModel",
  "description": "Creates an alarm model to monitor an AWS IoT Events input attribute. You can use the alarm to get notified when the value is outside a specified range. For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/create-alarms.html\">Create an alarm model</a> in the <i>AWS IoT Events Developer Guide</i>.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "alarmModelName",
          "roleArn",
          "alarmRule"
        ],
        "properties": {
          "alarmModelName": {
            "description": "A unique name that helps you identify the alarm model. You can't change this name after you create the alarm model.",
            "type": "string",
            "pattern": "^[a-zA-Z0-9_-]+$",
            "minLength": 1,
            "maxLength": 128
          },
          "alarmModelDescription": {
            "description": "A description that tells you what the alarm model detects.",
            "type": "string",
            "maxLength": 128
          },
          "roleArn": {
            "description": "The ARN of the IAM role that allows the alarm to perform actions and access AWS resources. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>AWS General Reference</i>.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          },
          "tags": {
            "description": "<p>A list of key-value pairs that contain metadata for the alarm model. The tags help you manage the alarm model. For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/tagging-iotevents.html\">Tagging your AWS IoT Events resources</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>You can create up to 50 tags for one alarm model.</p>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            }
          },
          "key": {
            "description": "An input attribute used as a key to create an alarm. AWS IoT Events routes <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Input.html\">inputs</a> associated with this key to the alarm.",
            "type": "string",
            "pattern": "^((`[\\w\\- ]+`)|([\\w\\-]+))(\\.((`[\\w- ]+`)|([\\w\\-]+)))*$",
            "minLength": 1,
            "maxLength": 128
          },
          "severity": {
            "description": "A non-negative integer that reflects the severity level of the alarm.",
            "type": "integer",
            "minimum": 0,
            "maximum": 2147483647
          },
          "alarmRule": {
            "description": "Defines when your alarm is invoked.",
            "type": "object",
            "properties": {
              "simpleRule": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SimpleRule"
                  },
                  {
                    "description": "A rule that compares an input property value to a threshold value with a comparison operator."
                  }
                ]
              }
            }
          },
          "alarmNotification": {
            "description": "Contains information about one or more notification actions.",
            "type": "object",
            "properties": {
              "notificationActions": {
                "allOf": [
                  {
                    "$ref": "#/$defs/NotificationActions"
                  },
                  {
                    "description": "Contains the notification settings of an alarm model. The settings apply to all alarms that were created based on this alarm model."
                  }
                ]
              }
            }
          },
          "alarmEventActions": {
            "description": "Contains information about one or more alarm actions.",
            "type": "object",
            "properties": {
              "alarmActions": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AlarmActions"
                  },
                  {
                    "description": "Specifies one or more supported actions to receive notifications when the alarm state changes."
                  }
                ]
              }
            }
          },
          "alarmCapabilities": {
            "description": "Contains the configuration information of alarm state changes.",
            "type": "object",
            "properties": {
              "initializationConfiguration": {
                "allOf": [
                  {
                    "$ref": "#/$defs/InitializationConfiguration"
                  },
                  {
                    "description": "Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model."
                  }
                ]
              },
              "acknowledgeFlow": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AcknowledgeFlow"
                  },
                  {
                    "description": "Specifies whether to get notified for alarm state changes."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "Metadata that can be used to manage the resource."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "SimpleRule": {
        "type": "object",
        "required": [
          "inputProperty",
          "comparisonOperator",
          "threshold"
        ],
        "properties": {
          "inputProperty": {
            "allOf": [
              {
                "$ref": "#/$defs/InputProperty"
              },
              {
                "description": "The value on the left side of the comparison operator. You can specify an AWS IoT Events input attribute as an input property."
              }
            ]
          },
          "comparisonOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparisonOperator"
              },
              {
                "description": "The comparison operator."
              }
            ]
          },
          "threshold": {
            "allOf": [
              {
                "$ref": "#/$defs/Threshold"
              },
              {
                "description": "The value on the right side of the comparison operator. You can enter a number or specify an AWS IoT Events input attribute."
              }
            ]
          }
        },
        "description": "A rule that compares an input property value to a threshold value with a comparison operator."
      },
      "InputProperty": {
        "type": "string",
        "minLength": 1,
        "maxLength": 512
      },
      "ComparisonOperator": {
        "type": "string",
        "enum": [
          "GREATER",
          "GREATER_OR_EQUAL",
          "LESS",
          "LESS_OR_EQUAL",
          "EQUAL",
          "NOT_EQUAL"
        ]
      },
      "Threshold": {
        "type": "string",
        "minLength": 1,
        "maxLength": 512
      },
      "NotificationActions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NotificationAction"
        },
        "minItems": 1
      },
      "NotificationAction": {
        "type": "object",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/$defs/NotificationTargetActions"
              },
              {
                "description": "Specifies an AWS Lambda function to manage alarm notifications. You can create one or use the <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html\">AWS Lambda function provided by AWS IoT Events</a>."
              }
            ]
          },
          "smsConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/SMSConfigurations"
              },
              {
                "description": "Contains the configuration information of SMS notifications."
              }
            ]
          },
          "emailConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/EmailConfigurations"
              },
              {
                "description": "Contains the configuration information of email notifications."
              }
            ]
          }
        },
        "description": "Contains the notification settings of an alarm model. The settings apply to all alarms that were created based on this alarm model."
      },
      "NotificationTargetActions": {
        "type": "object",
        "properties": {
          "lambdaAction": {
            "$ref": "#/$defs/LambdaAction"
          }
        },
        "description": "Specifies an AWS Lambda function to manage alarm notifications. You can create one or use the <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html\">AWS Lambda function provided by AWS IoT Events</a>."
      },
      "LambdaAction": {
        "type": "object",
        "required": [
          "functionArn"
        ],
        "properties": {
          "functionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the Lambda function that is executed."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to a Lambda function."
              }
            ]
          }
        },
        "description": "Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action."
      },
      "AmazonResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Payload": {
        "type": "object",
        "required": [
          "contentExpression",
          "type"
        ],
        "properties": {
          "contentExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentExpression"
              },
              {
                "description": "The content of the payload. You can use a string expression that includes quoted strings (<code>'&lt;string&gt;'</code>), variables (<code>$variable.&lt;variable-name&gt;</code>), input values (<code>$input.&lt;input-name&gt;.&lt;path-to-datum&gt;</code>), string concatenations, and quoted strings that contain <code>${}</code> as the content. The recommended maximum size of a content expression is 1 KB."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/PayloadType"
              },
              {
                "description": "The value of the payload type can be either <code>STRING</code> or <code>JSON</code>."
              }
            ]
          }
        },
        "description": "<p>Information needed to configure the payload.</p> <p>By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use <code>contentExpression</code>.</p>"
      },
      "ContentExpression": {
        "type": "string",
        "minLength": 1
      },
      "PayloadType": {
        "type": "string",
        "enum": [
          "STRING",
          "JSON"
        ]
      },
      "SMSConfigurations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SMSConfiguration"
        },
        "minItems": 1
      },
      "SMSConfiguration": {
        "type": "object",
        "required": [
          "recipients"
        ],
        "properties": {
          "senderId": {
            "allOf": [
              {
                "$ref": "#/$defs/SMSSenderId"
              },
              {
                "description": "The sender ID."
              }
            ]
          },
          "additionalMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/NotificationAdditionalMessage"
              },
              {
                "description": "The message that you want to send. The message can be up to 200 characters."
              }
            ]
          },
          "recipients": {
            "allOf": [
              {
                "$ref": "#/$defs/RecipientDetails"
              },
              {
                "description": "<p>Specifies one or more recipients who receive the message.</p> <important> <p>You must <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html\">add the users that receive SMS messages to your AWS SSO store</a>.</p> </important>"
              }
            ]
          }
        },
        "description": "Contains the configuration information of SMS notifications."
      },
      "SMSSenderId": {
        "type": "string"
      },
      "NotificationAdditionalMessage": {
        "type": "string"
      },
      "RecipientDetails": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RecipientDetail"
        },
        "minItems": 1
      },
      "RecipientDetail": {
        "type": "object",
        "properties": {
          "ssoIdentity": {
            "allOf": [
              {
                "$ref": "#/$defs/SSOIdentity"
              },
              {
                "description": "The AWS Single Sign-On (AWS SSO) authentication information."
              }
            ]
          }
        },
        "description": "The information that identifies the recipient."
      },
      "SSOIdentity": {
        "type": "object",
        "required": [
          "identityStoreId"
        ],
        "properties": {
          "identityStoreId": {
            "allOf": [
              {
                "$ref": "#/$defs/IdentityStoreId"
              },
              {
                "description": "The ID of the AWS SSO identity store."
              }
            ]
          },
          "userId": {
            "allOf": [
              {
                "$ref": "#/$defs/SSOReferenceId"
              },
              {
                "description": "The user ID."
              }
            ]
          }
        },
        "description": "Contains information about your identity source in AWS Single Sign-On. For more information, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">AWS Single Sign-On User Guide</a>."
      },
      "IdentityStoreId": {
        "type": "string"
      },
      "SSOReferenceId": {
        "type": "string"
      },
      "EmailConfigurations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EmailConfiguration"
        },
        "minItems": 1
      },
      "EmailConfiguration": {
        "type": "object",
        "required": [
          "from",
          "recipients"
        ],
        "properties": {
          "from": {
            "allOf": [
              {
                "$ref": "#/$defs/FromEmail"
              },
              {
                "description": "<p>The email address that sends emails.</p> <important> <p>If you use the AWS IoT Events managed AWS Lambda function to manage your emails, you must <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html\">verify the email address that sends emails in Amazon SES</a>.</p> </important>"
              }
            ]
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/EmailContent"
              },
              {
                "description": "Contains the subject and message of an email."
              }
            ]
          },
          "recipients": {
            "allOf": [
              {
                "$ref": "#/$defs/EmailRecipients"
              },
              {
                "description": "<p>Contains the information of one or more recipients who receive the emails.</p> <important> <p>You must <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html\">add the users that receive emails to your AWS SSO store</a>.</p> </important>"
              }
            ]
          }
        },
        "description": "Contains the configuration information of email notifications."
      },
      "FromEmail": {
        "type": "string"
      },
      "EmailContent": {
        "type": "object",
        "properties": {
          "subject": {
            "allOf": [
              {
                "$ref": "#/$defs/EmailSubject"
              },
              {
                "description": "The subject of the email."
              }
            ]
          },
          "additionalMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/NotificationAdditionalMessage"
              },
              {
                "description": "The message that you want to send. The message can be up to 200 characters."
              }
            ]
          }
        },
        "description": "Contains the subject and message of an email."
      },
      "EmailSubject": {
        "type": "string"
      },
      "EmailRecipients": {
        "type": "object",
        "properties": {
          "to": {
            "allOf": [
              {
                "$ref": "#/$defs/RecipientDetails"
              },
              {
                "description": "Specifies one or more recipients who receive the email."
              }
            ]
          }
        },
        "description": "<p>Contains the information of one or more recipients who receive the emails.</p> <important> <p>You must <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/addusers.html\">add the users that receive emails to your AWS SSO store</a>.</p> </important>"
      },
      "AlarmActions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AlarmAction"
        }
      },
      "AlarmAction": {
        "type": "object",
        "properties": {
          "sns": {
            "$ref": "#/$defs/SNSTopicPublishAction"
          },
          "iotTopicPublish": {
            "$ref": "#/$defs/IotTopicPublishAction"
          },
          "lambda": {
            "$ref": "#/$defs/LambdaAction"
          },
          "iotEvents": {
            "$ref": "#/$defs/IotEventsAction"
          },
          "sqs": {
            "$ref": "#/$defs/SqsAction"
          },
          "firehose": {
            "$ref": "#/$defs/FirehoseAction"
          },
          "dynamoDB": {
            "$ref": "#/$defs/DynamoDBAction"
          },
          "dynamoDBv2": {
            "$ref": "#/$defs/DynamoDBv2Action"
          },
          "iotSiteWise": {
            "$ref": "#/$defs/IotSiteWiseAction"
          }
        },
        "description": "Specifies one of the following actions to receive notifications when the alarm state changes."
      },
      "SNSTopicPublishAction": {
        "type": "object",
        "required": [
          "targetArn"
        ],
        "properties": {
          "targetArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the Amazon SNS target where the message is sent."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message as an Amazon SNS push notification."
              }
            ]
          }
        },
        "description": "Information required to publish the Amazon SNS message."
      },
      "IotTopicPublishAction": {
        "type": "object",
        "required": [
          "mqttTopic"
        ],
        "properties": {
          "mqttTopic": {
            "allOf": [
              {
                "$ref": "#/$defs/MQTTTopic"
              },
              {
                "description": "The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.&lt;variable-name&gt;</code>) and input values (<code>$input.&lt;input-name&gt;.&lt;path-to-datum&gt;</code>) as the topic string."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you publish a message to an AWS IoT Core topic."
              }
            ]
          }
        },
        "description": "Information required to publish the MQTT message through the AWS IoT message broker."
      },
      "MQTTTopic": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "IotEventsAction": {
        "type": "object",
        "required": [
          "inputName"
        ],
        "properties": {
          "inputName": {
            "allOf": [
              {
                "$ref": "#/$defs/InputName"
              },
              {
                "description": "The name of the AWS IoT Events input where the data is sent."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to an AWS IoT Events input."
              }
            ]
          }
        },
        "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action."
      },
      "InputName": {
        "type": "string",
        "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
        "minLength": 1,
        "maxLength": 128
      },
      "SqsAction": {
        "type": "object",
        "required": [
          "queueUrl"
        ],
        "properties": {
          "queueUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/QueueUrl"
              },
              {
                "description": "The URL of the SQS queue where the data is written."
              }
            ]
          },
          "useBase64": {
            "allOf": [
              {
                "$ref": "#/$defs/UseBase64"
              },
              {
                "description": "Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to an Amazon SQS queue."
              }
            ]
          }
        },
        "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue."
      },
      "QueueUrl": {
        "type": "string"
      },
      "UseBase64": {
        "type": "boolean"
      },
      "FirehoseAction": {
        "type": "object",
        "required": [
          "deliveryStreamName"
        ],
        "properties": {
          "deliveryStreamName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeliveryStreamName"
              },
              {
                "description": "The name of the Kinesis Data Firehose delivery stream where the data is written."
              }
            ]
          },
          "separator": {
            "allOf": [
              {
                "$ref": "#/$defs/FirehoseSeparator"
              },
              {
                "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma)."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to an Amazon Kinesis Data Firehose delivery stream."
              }
            ]
          }
        },
        "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream."
      },
      "DeliveryStreamName": {
        "type": "string"
      },
      "FirehoseSeparator": {
        "type": "string",
        "pattern": "([\\n\\t])|(\\r\\n)|(,)"
      },
      "DynamoDBAction": {
        "type": "object",
        "required": [
          "hashKeyField",
          "hashKeyValue",
          "tableName"
        ],
        "properties": {
          "hashKeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyType"
              },
              {
                "description": "<p>The data type for the hash key (also called the partition key). You can specify the following values:</p> <ul> <li> <p> <code>'STRING'</code> - The hash key is a string.</p> </li> <li> <p> <code>'NUMBER'</code> - The hash key is a number.</p> </li> </ul> <p>If you don't specify <code>hashKeyType</code>, the default value is <code>'STRING'</code>.</p>"
              }
            ]
          },
          "hashKeyField": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyField"
              },
              {
                "description": "The name of the hash key (also called the partition key). The <code>hashKeyField</code> value must match the partition key of the target DynamoDB table."
              }
            ]
          },
          "hashKeyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyValue"
              },
              {
                "description": "The value of the hash key (also called the partition key)."
              }
            ]
          },
          "rangeKeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyType"
              },
              {
                "description": "<p>The data type for the range key (also called the sort key), You can specify the following values:</p> <ul> <li> <p> <code>'STRING'</code> - The range key is a string.</p> </li> <li> <p> <code>'NUMBER'</code> - The range key is number.</p> </li> </ul> <p>If you don't specify <code>rangeKeyField</code>, the default value is <code>'STRING'</code>.</p>"
              }
            ]
          },
          "rangeKeyField": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyField"
              },
              {
                "description": "The name of the range key (also called the sort key). The <code>rangeKeyField</code> value must match the sort key of the target DynamoDB table. "
              }
            ]
          },
          "rangeKeyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyValue"
              },
              {
                "description": "The value of the range key (also called the sort key)."
              }
            ]
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoOperation"
              },
              {
                "description": "<p>The type of operation to perform. You can specify the following values: </p> <ul> <li> <p> <code>'INSERT'</code> - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.</p> </li> <li> <p> <code>'UPDATE'</code> - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.</p> </li> <li> <p> <code>'DELETE'</code> - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.</p> </li> </ul> <p>If you don't specify this parameter, AWS IoT Events triggers the <code>'INSERT'</code> operation.</p>"
              }
            ]
          },
          "payloadField": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyField"
              },
              {
                "description": "<p>The name of the DynamoDB column that receives the action payload.</p> <p>If you don't specify this parameter, the name of the DynamoDB column is <code>payload</code>.</p>"
              }
            ]
          },
          "tableName": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoTableName"
              },
              {
                "description": "The name of the DynamoDB table. The <code>tableName</code> value must match the table name of the target DynamoDB table. "
              }
            ]
          },
          "payload": {
            "$ref": "#/$defs/Payload"
          }
        },
        "description": "<p>Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\">payload</a>. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.</p> <p>You must use expressions for all parameters in <code>DynamoDBAction</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>hashKeyType</code> parameter can be <code>'STRING'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>hashKeyField</code> parameter can be <code>$input.GreenhouseInput.name</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>hashKeyValue</code> parameter uses a substitution template. </p> <p> <code>'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'</code> </p> </li> <li> <p>For a string concatenation, you must use <code>+</code>. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>tableName</code> parameter uses a string concatenation. </p> <p> <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>If the defined payload type is a string, <code>DynamoDBAction</code> writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the <code>payloadField</code> parameter is <code>&lt;payload-field&gt;_raw</code>.</p>"
      },
      "DynamoKeyType": {
        "type": "string"
      },
      "DynamoKeyField": {
        "type": "string"
      },
      "DynamoKeyValue": {
        "type": "string"
      },
      "DynamoOperation": {
        "type": "string"
      },
      "DynamoTableName": {
        "type": "string"
      },
      "DynamoDBv2Action": {
        "type": "object",
        "required": [
          "tableName"
        ],
        "properties": {
          "tableName": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoTableName"
              },
              {
                "description": "The name of the DynamoDB table."
              }
            ]
          },
          "payload": {
            "$ref": "#/$defs/Payload"
          }
        },
        "description": "<p>Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\">payload</a>. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.</p> <p>You must use expressions for all parameters in <code>DynamoDBv2Action</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>tableName</code> parameter can be <code>'GreenhouseTemperatureTable'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>tableName</code> parameter can be <code>$variable.ddbtableName</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>contentExpression</code> parameter in <code>Payload</code> uses a substitution template. </p> <p> <code>'{\\\"sensorID\\\": \\\"${$input.GreenhouseInput.sensor_id}\\\", \\\"temperature\\\": \\\"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\\\"}'</code> </p> </li> <li> <p>For a string concatenation, you must use <code>+</code>. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>tableName</code> parameter uses a string concatenation. </p> <p> <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>The value for the <code>type</code> parameter in <code>Payload</code> must be <code>JSON</code>.</p>"
      },
      "IotSiteWiseAction": {
        "type": "object",
        "properties": {
          "entryId": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyEntryId"
              },
              {
                "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier."
              }
            ]
          },
          "assetId": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetId"
              },
              {
                "description": "The ID of the asset that has the specified property."
              }
            ]
          },
          "propertyId": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyId"
              },
              {
                "description": "The ID of the asset property."
              }
            ]
          },
          "propertyAlias": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyAlias"
              },
              {
                "description": "The alias of the asset property."
              }
            ]
          },
          "propertyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyValue"
              },
              {
                "description": "The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. "
              }
            ]
          }
        },
        "description": "<p>Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.</p> <p>You must use expressions for all parameters in <code>IotSiteWiseAction</code>. The expressions accept literals, operators, functions, references, and substitutions templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>propertyAlias</code> parameter can be <code>'/company/windfarm/3/turbine/7/temperature'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>assetId</code> parameter can be <code>$input.TurbineInput.assetId1</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>propertyAlias</code> parameter uses a substitution template. </p> <p> <code>'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'</code> </p> </li> </ul> <p>You must specify either <code>propertyAlias</code> or both <code>assetId</code> and <code>propertyId</code> to identify the target asset property in AWS IoT SiteWise.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>"
      },
      "AssetPropertyEntryId": {
        "type": "string"
      },
      "AssetId": {
        "type": "string"
      },
      "AssetPropertyId": {
        "type": "string"
      },
      "AssetPropertyAlias": {
        "type": "string"
      },
      "AssetPropertyValue": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyVariant"
              },
              {
                "description": "The value to send to an asset property."
              }
            ]
          },
          "timestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyTimestamp"
              },
              {
                "description": "The timestamp associated with the asset property value. The default is the current event time."
              }
            ]
          },
          "quality": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyQuality"
              },
              {
                "description": "The quality of the asset property value. The value must be <code>'GOOD'</code>, <code>'BAD'</code>, or <code>'UNCERTAIN'</code>."
              }
            ]
          }
        },
        "description": "<p>A structure that contains value information. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html\">AssetPropertyValue</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyValue</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>quality</code> parameter can be <code>'GOOD'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>quality</code> parameter can be <code>$input.TemperatureInput.sensorData.quality</code>.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>"
      },
      "AssetPropertyVariant": {
        "type": "object",
        "properties": {
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyStringValue"
              },
              {
                "description": "The asset property value is a string. You must use an expression, and the evaluated result should be a string."
              }
            ]
          },
          "integerValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyIntegerValue"
              },
              {
                "description": "The asset property value is an integer. You must use an expression, and the evaluated result should be an integer."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyDoubleValue"
              },
              {
                "description": "The asset property value is a double. You must use an expression, and the evaluated result should be a double."
              }
            ]
          },
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyBooleanValue"
              },
              {
                "description": "The asset property value is a Boolean value that must be <code>'TRUE'</code> or <code>'FALSE'</code>. You must use an expression, and the evaluated result should be a Boolean value."
              }
            ]
          }
        },
        "description": "<p>A structure that contains an asset property value. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html\">Variant</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyVariant</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>integerValue</code> parameter can be <code>'100'</code>.</p> </li> <li> <p>For references, you must specify either variables or parameters. For example, the value for the <code>booleanValue</code> parameter can be <code>$variable.offline</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. </p> <p>In the following example, the value for the <code>doubleValue</code> parameter uses a substitution template. </p> <p> <code>'${$input.TemperatureInput.sensorData.temperature * 6 / 5 + 32}'</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>You must specify one of the following value types, depending on the <code>dataType</code> of the specified asset property. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html\">AssetProperty</a> in the <i>AWS IoT SiteWise API Reference</i>.</p>"
      },
      "AssetPropertyStringValue": {
        "type": "string"
      },
      "AssetPropertyIntegerValue": {
        "type": "string"
      },
      "AssetPropertyDoubleValue": {
        "type": "string"
      },
      "AssetPropertyBooleanValue": {
        "type": "string"
      },
      "AssetPropertyTimestamp": {
        "type": "object",
        "required": [
          "timeInSeconds"
        ],
        "properties": {
          "timeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyTimeInSeconds"
              },
              {
                "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199."
              }
            ]
          },
          "offsetInNanos": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyOffsetInNanos"
              },
              {
                "description": "The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999."
              }
            ]
          }
        },
        "description": "<p>A structure that contains timestamp information. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html\">TimeInNanos</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyTimestamp</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>timeInSeconds</code> parameter can be <code>'1586400675'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>offsetInNanos</code> parameter can be <code>$variable.time</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>timeInSeconds</code> parameter uses a substitution template.</p> <p> <code>'${$input.TemperatureInput.sensorData.timestamp / 1000}'</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>"
      },
      "AssetPropertyTimeInSeconds": {
        "type": "string"
      },
      "AssetPropertyOffsetInNanos": {
        "type": "string"
      },
      "AssetPropertyQuality": {
        "type": "string"
      },
      "InitializationConfiguration": {
        "type": "object",
        "required": [
          "disabledOnInitialization"
        ],
        "properties": {
          "disabledOnInitialization": {
            "allOf": [
              {
                "$ref": "#/$defs/DisabledOnInitialization"
              },
              {
                "description": "The value must be <code>TRUE</code> or <code>FALSE</code>. If <code>FALSE</code>, all alarm instances created based on the alarm model are activated. The default value is <code>TRUE</code>."
              }
            ]
          }
        },
        "description": "Specifies the default alarm state. The configuration applies to all alarms that were created based on this alarm model."
      },
      "DisabledOnInitialization": {
        "type": "boolean"
      },
      "AcknowledgeFlow": {
        "type": "object",
        "required": [
          "enabled"
        ],
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/AcknowledgeFlowEnabled"
              },
              {
                "description": "The value must be <code>TRUE</code> or <code>FALSE</code>. If <code>TRUE</code>, you receive a notification when the alarm state changes. You must choose to acknowledge the notification before the alarm state can return to <code>NORMAL</code>. If <code>FALSE</code>, you won't receive notifications. The alarm automatically changes to the <code>NORMAL</code> state when the input property value returns to the specified range."
              }
            ]
          }
        },
        "description": "Specifies whether to get notified for alarm state changes."
      },
      "AcknowledgeFlowEnabled": {
        "type": "boolean"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotevents.us-east-1.amazonaws.com/alarm-models"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**creationTime**",
            "**alarmModelArn**",
            "**alarmModelVersion**",
            "**lastUpdateTime**",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
