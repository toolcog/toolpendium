{
  "name": "PutLoggingOptions",
  "description": "<p>Sets or updates the AWS IoT Events logging options.</p> <p>If you update the value of any <code>loggingOptions</code> field, it takes up to one minute for the change to take effect. If you change the policy attached to the role you specified in the <code>roleArn</code> field (for example, to correct an invalid policy), it takes up to five minutes for that change to take effect.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "loggingOptions"
        ],
        "properties": {
          "loggingOptions": {
            "description": "The values of the AWS IoT Events logging options.",
            "type": "object",
            "properties": {
              "roleArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AmazonResourceName"
                  },
                  {
                    "description": "The ARN of the role that grants permission to AWS IoT Events to perform logging."
                  }
                ]
              },
              "level": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LoggingLevel"
                  },
                  {
                    "description": "The logging level."
                  }
                ]
              },
              "enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LoggingEnabled"
                  },
                  {
                    "description": "If TRUE, logging is enabled for AWS IoT Events."
                  }
                ]
              },
              "detectorDebugOptions": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DetectorDebugOptions"
                  },
                  {
                    "description": "Information that identifies those detector models and their detectors (instances) for which the logging level is given."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "AmazonResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "LoggingLevel": {
        "type": "string",
        "enum": [
          "ERROR",
          "INFO",
          "DEBUG"
        ]
      },
      "LoggingEnabled": {
        "type": "boolean"
      },
      "DetectorDebugOptions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DetectorDebugOption"
        },
        "minItems": 1
      },
      "DetectorDebugOption": {
        "type": "object",
        "required": [
          "detectorModelName"
        ],
        "properties": {
          "detectorModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/DetectorModelName"
              },
              {
                "description": "The name of the detector model."
              }
            ]
          },
          "keyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyValue"
              },
              {
                "description": "The value of the input attribute key used to create the detector (the instance of the detector model)."
              }
            ]
          }
        },
        "description": "The detector model and the specific detectors (instances) for which the logging level is given."
      },
      "DetectorModelName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "KeyValue": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9\\-_:]+$",
        "minLength": 1,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://iotevents.us-east-1.amazonaws.com/logging"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
