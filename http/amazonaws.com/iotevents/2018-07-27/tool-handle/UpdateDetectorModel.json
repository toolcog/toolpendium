{
  "name": "UpdateDetectorModel",
  "description": "Updates a detector model. Detectors (instances) spawned by the previous version are deleted and then re-created as new inputs arrive.",
  "parameters": {
    "type": "object",
    "properties": {
      "detectorModelName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]+$",
        "minLength": 1,
        "maxLength": 128,
        "description": "The name of the detector model that is updated."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "detectorModelDefinition",
          "roleArn"
        ],
        "properties": {
          "detectorModelDefinition": {
            "description": "Information that defines how a detector operates.",
            "type": "object",
            "properties": {
              "states": {
                "allOf": [
                  {
                    "$ref": "#/$defs/States"
                  },
                  {
                    "description": "Information about the states of the detector."
                  }
                ]
              },
              "initialStateName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StateName"
                  },
                  {
                    "description": "The state that is entered at the creation of each detector (instance)."
                  }
                ]
              }
            }
          },
          "detectorModelDescription": {
            "description": "A brief description of the detector model.",
            "type": "string",
            "maxLength": 128
          },
          "roleArn": {
            "description": "The ARN of the role that grants permission to AWS IoT Events to perform its operations.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2048
          },
          "evaluationMethod": {
            "description": "Information about the order in which events are evaluated and how actions are executed. ",
            "type": "string",
            "enum": [
              "BATCH",
              "SERIAL"
            ]
          }
        }
      }
    },
    "required": [
      "detectorModelName",
      "body"
    ],
    "$defs": {
      "States": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/State"
        },
        "minItems": 1
      },
      "State": {
        "type": "object",
        "required": [
          "stateName"
        ],
        "properties": {
          "stateName": {
            "allOf": [
              {
                "$ref": "#/$defs/StateName"
              },
              {
                "description": "The name of the state."
              }
            ]
          },
          "onInput": {
            "allOf": [
              {
                "$ref": "#/$defs/OnInputLifecycle"
              },
              {
                "description": "When an input is received and the <code>condition</code> is TRUE, perform the specified <code>actions</code>."
              }
            ]
          },
          "onEnter": {
            "allOf": [
              {
                "$ref": "#/$defs/OnEnterLifecycle"
              },
              {
                "description": "When entering this state, perform these <code>actions</code> if the <code>condition</code> is TRUE."
              }
            ]
          },
          "onExit": {
            "allOf": [
              {
                "$ref": "#/$defs/OnExitLifecycle"
              },
              {
                "description": "When exiting this state, perform these <code>actions</code> if the specified <code>condition</code> is <code>TRUE</code>."
              }
            ]
          }
        },
        "description": "Information that defines a state of a detector."
      },
      "StateName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "OnInputLifecycle": {
        "type": "object",
        "properties": {
          "events": {
            "allOf": [
              {
                "$ref": "#/$defs/Events"
              },
              {
                "description": "Specifies the actions performed when the <code>condition</code> evaluates to TRUE."
              }
            ]
          },
          "transitionEvents": {
            "allOf": [
              {
                "$ref": "#/$defs/TransitionEvents"
              },
              {
                "description": "Specifies the actions performed, and the next state entered, when a <code>condition</code> evaluates to TRUE."
              }
            ]
          }
        },
        "description": "Specifies the actions performed when the <code>condition</code> evaluates to TRUE."
      },
      "Events": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Event"
        }
      },
      "Event": {
        "type": "object",
        "required": [
          "eventName"
        ],
        "properties": {
          "eventName": {
            "allOf": [
              {
                "$ref": "#/$defs/EventName"
              },
              {
                "description": "The name of the event."
              }
            ]
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "description": "Optional. The Boolean expression that, when TRUE, causes the <code>actions</code> to be performed. If not present, the actions are performed (=TRUE). If the expression result is not a Boolean value, the actions are not performed (=FALSE)."
              }
            ]
          },
          "actions": {
            "allOf": [
              {
                "$ref": "#/$defs/Actions"
              },
              {
                "description": "The actions to be performed."
              }
            ]
          }
        },
        "description": "Specifies the <code>actions</code> to be performed when the <code>condition</code> evaluates to TRUE."
      },
      "EventName": {
        "type": "string",
        "maxLength": 128
      },
      "Condition": {
        "type": "string",
        "maxLength": 512
      },
      "Actions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Action"
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "setVariable": {
            "allOf": [
              {
                "$ref": "#/$defs/SetVariableAction"
              },
              {
                "description": "Sets a variable to a specified value."
              }
            ]
          },
          "sns": {
            "allOf": [
              {
                "$ref": "#/$defs/SNSTopicPublishAction"
              },
              {
                "description": "Sends an Amazon SNS message."
              }
            ]
          },
          "iotTopicPublish": {
            "allOf": [
              {
                "$ref": "#/$defs/IotTopicPublishAction"
              },
              {
                "description": "Publishes an MQTT message with the given topic to the AWS IoT message broker."
              }
            ]
          },
          "setTimer": {
            "allOf": [
              {
                "$ref": "#/$defs/SetTimerAction"
              },
              {
                "description": "Information needed to set the timer."
              }
            ]
          },
          "clearTimer": {
            "allOf": [
              {
                "$ref": "#/$defs/ClearTimerAction"
              },
              {
                "description": "Information needed to clear the timer."
              }
            ]
          },
          "resetTimer": {
            "allOf": [
              {
                "$ref": "#/$defs/ResetTimerAction"
              },
              {
                "description": "Information needed to reset the timer."
              }
            ]
          },
          "lambda": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaAction"
              },
              {
                "description": "Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action."
              }
            ]
          },
          "iotEvents": {
            "allOf": [
              {
                "$ref": "#/$defs/IotEventsAction"
              },
              {
                "description": "Sends AWS IoT Events input, which passes information about the detector model instance and the event that triggered the action."
              }
            ]
          },
          "sqs": {
            "allOf": [
              {
                "$ref": "#/$defs/SqsAction"
              },
              {
                "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue."
              }
            ]
          },
          "firehose": {
            "allOf": [
              {
                "$ref": "#/$defs/FirehoseAction"
              },
              {
                "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream."
              }
            ]
          },
          "dynamoDB": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoDBAction"
              },
              {
                "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\">payload</a>. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify. For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html\">Actions</a> in <i>AWS IoT Events Developer Guide</i>."
              }
            ]
          },
          "dynamoDBv2": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoDBv2Action"
              },
              {
                "description": "Writes to the DynamoDB table that you created. The default action payload contains all attribute-value pairs that have the information about the detector model instance and the event that triggered the action. You can customize the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\">payload</a>. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify. For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-event-actions.html\">Actions</a> in <i>AWS IoT Events Developer Guide</i>."
              }
            ]
          },
          "iotSiteWise": {
            "allOf": [
              {
                "$ref": "#/$defs/IotSiteWiseAction"
              },
              {
                "description": "Sends information about the detector model instance and the event that triggered the action to an asset property in AWS IoT SiteWise ."
              }
            ]
          }
        },
        "description": "An action to be performed when the <code>condition</code> is TRUE."
      },
      "SetVariableAction": {
        "type": "object",
        "required": [
          "variableName",
          "value"
        ],
        "properties": {
          "variableName": {
            "allOf": [
              {
                "$ref": "#/$defs/VariableName"
              },
              {
                "description": "The name of the variable."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/VariableValue"
              },
              {
                "description": "The new value of the variable."
              }
            ]
          }
        },
        "description": "Information about the variable and its new value."
      },
      "VariableName": {
        "type": "string",
        "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
        "minLength": 1,
        "maxLength": 128
      },
      "VariableValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "SNSTopicPublishAction": {
        "type": "object",
        "required": [
          "targetArn"
        ],
        "properties": {
          "targetArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the Amazon SNS target where the message is sent."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message as an Amazon SNS push notification."
              }
            ]
          }
        },
        "description": "Information required to publish the Amazon SNS message."
      },
      "AmazonResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Payload": {
        "type": "object",
        "required": [
          "contentExpression",
          "type"
        ],
        "properties": {
          "contentExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentExpression"
              },
              {
                "description": "The content of the payload. You can use a string expression that includes quoted strings (<code>'&lt;string&gt;'</code>), variables (<code>$variable.&lt;variable-name&gt;</code>), input values (<code>$input.&lt;input-name&gt;.&lt;path-to-datum&gt;</code>), string concatenations, and quoted strings that contain <code>${}</code> as the content. The recommended maximum size of a content expression is 1 KB."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/PayloadType"
              },
              {
                "description": "The value of the payload type can be either <code>STRING</code> or <code>JSON</code>."
              }
            ]
          }
        },
        "description": "<p>Information needed to configure the payload.</p> <p>By default, AWS IoT Events generates a standard payload in JSON for any action. This action payload contains all attribute-value pairs that have the information about the detector model instance and the event triggered the action. To configure the action payload, you can use <code>contentExpression</code>.</p>"
      },
      "ContentExpression": {
        "type": "string",
        "minLength": 1
      },
      "PayloadType": {
        "type": "string",
        "enum": [
          "STRING",
          "JSON"
        ]
      },
      "IotTopicPublishAction": {
        "type": "object",
        "required": [
          "mqttTopic"
        ],
        "properties": {
          "mqttTopic": {
            "allOf": [
              {
                "$ref": "#/$defs/MQTTTopic"
              },
              {
                "description": "The MQTT topic of the message. You can use a string expression that includes variables (<code>$variable.&lt;variable-name&gt;</code>) and input values (<code>$input.&lt;input-name&gt;.&lt;path-to-datum&gt;</code>) as the topic string."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you publish a message to an AWS IoT Core topic."
              }
            ]
          }
        },
        "description": "Information required to publish the MQTT message through the AWS IoT message broker."
      },
      "MQTTTopic": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "SetTimerAction": {
        "type": "object",
        "required": [
          "timerName"
        ],
        "properties": {
          "timerName": {
            "allOf": [
              {
                "$ref": "#/$defs/TimerName"
              },
              {
                "description": "The name of the timer."
              }
            ]
          },
          "seconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Seconds"
              },
              {
                "deprecated": true,
                "description": "The number of seconds until the timer expires. The minimum value is 60 seconds to ensure accuracy. The maximum value is 31622400 seconds. seconds is deprecated. You can use durationExpression for SetTimerAction. The value of seconds can be used as a string expression for durationExpression."
              }
            ]
          },
          "durationExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/VariableValue"
              },
              {
                "description": "The duration of the timer, in seconds. You can use a string expression that includes numbers, variables (<code>$variable.&lt;variable-name&gt;</code>), and input values (<code>$input.&lt;input-name&gt;.&lt;path-to-datum&gt;</code>) as the duration. The range of the duration is 1-31622400 seconds. To ensure accuracy, the minimum duration is 60 seconds. The evaluated result of the duration is rounded down to the nearest whole number. "
              }
            ]
          }
        },
        "description": "Information needed to set the timer."
      },
      "TimerName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "Seconds": {
        "type": "integer",
        "minimum": 1,
        "maximum": 31622400
      },
      "ClearTimerAction": {
        "type": "object",
        "required": [
          "timerName"
        ],
        "properties": {
          "timerName": {
            "allOf": [
              {
                "$ref": "#/$defs/TimerName"
              },
              {
                "description": "The name of the timer to clear."
              }
            ]
          }
        },
        "description": "Information needed to clear the timer."
      },
      "ResetTimerAction": {
        "type": "object",
        "required": [
          "timerName"
        ],
        "properties": {
          "timerName": {
            "allOf": [
              {
                "$ref": "#/$defs/TimerName"
              },
              {
                "description": "The name of the timer to reset."
              }
            ]
          }
        },
        "description": "Information required to reset the timer. The timer is reset to the previously evaluated result of the duration. The duration expression isn't reevaluated when you reset the timer."
      },
      "LambdaAction": {
        "type": "object",
        "required": [
          "functionArn"
        ],
        "properties": {
          "functionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the Lambda function that is executed."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to a Lambda function."
              }
            ]
          }
        },
        "description": "Calls a Lambda function, passing in information about the detector model instance and the event that triggered the action."
      },
      "IotEventsAction": {
        "type": "object",
        "required": [
          "inputName"
        ],
        "properties": {
          "inputName": {
            "allOf": [
              {
                "$ref": "#/$defs/InputName"
              },
              {
                "description": "The name of the AWS IoT Events input where the data is sent."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to an AWS IoT Events input."
              }
            ]
          }
        },
        "description": "Sends an AWS IoT Events input, passing in information about the detector model instance and the event that triggered the action."
      },
      "InputName": {
        "type": "string",
        "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
        "minLength": 1,
        "maxLength": 128
      },
      "SqsAction": {
        "type": "object",
        "required": [
          "queueUrl"
        ],
        "properties": {
          "queueUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/QueueUrl"
              },
              {
                "description": "The URL of the SQS queue where the data is written."
              }
            ]
          },
          "useBase64": {
            "allOf": [
              {
                "$ref": "#/$defs/UseBase64"
              },
              {
                "description": "Set this to TRUE if you want the data to be base-64 encoded before it is written to the queue. Otherwise, set this to FALSE."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to an Amazon SQS queue."
              }
            ]
          }
        },
        "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon SQS queue."
      },
      "QueueUrl": {
        "type": "string"
      },
      "UseBase64": {
        "type": "boolean"
      },
      "FirehoseAction": {
        "type": "object",
        "required": [
          "deliveryStreamName"
        ],
        "properties": {
          "deliveryStreamName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeliveryStreamName"
              },
              {
                "description": "The name of the Kinesis Data Firehose delivery stream where the data is written."
              }
            ]
          },
          "separator": {
            "allOf": [
              {
                "$ref": "#/$defs/FirehoseSeparator"
              },
              {
                "description": "A character separator that is used to separate records written to the Kinesis Data Firehose delivery stream. Valid values are: '\\n' (newline), '\\t' (tab), '\\r\\n' (Windows newline), ',' (comma)."
              }
            ]
          },
          "payload": {
            "allOf": [
              {
                "$ref": "#/$defs/Payload"
              },
              {
                "description": "You can configure the action payload when you send a message to an Amazon Kinesis Data Firehose delivery stream."
              }
            ]
          }
        },
        "description": "Sends information about the detector model instance and the event that triggered the action to an Amazon Kinesis Data Firehose delivery stream."
      },
      "DeliveryStreamName": {
        "type": "string"
      },
      "FirehoseSeparator": {
        "type": "string",
        "pattern": "([\\n\\t])|(\\r\\n)|(,)"
      },
      "DynamoDBAction": {
        "type": "object",
        "required": [
          "hashKeyField",
          "hashKeyValue",
          "tableName"
        ],
        "properties": {
          "hashKeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyType"
              },
              {
                "description": "<p>The data type for the hash key (also called the partition key). You can specify the following values:</p> <ul> <li> <p> <code>'STRING'</code> - The hash key is a string.</p> </li> <li> <p> <code>'NUMBER'</code> - The hash key is a number.</p> </li> </ul> <p>If you don't specify <code>hashKeyType</code>, the default value is <code>'STRING'</code>.</p>"
              }
            ]
          },
          "hashKeyField": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyField"
              },
              {
                "description": "The name of the hash key (also called the partition key). The <code>hashKeyField</code> value must match the partition key of the target DynamoDB table."
              }
            ]
          },
          "hashKeyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyValue"
              },
              {
                "description": "The value of the hash key (also called the partition key)."
              }
            ]
          },
          "rangeKeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyType"
              },
              {
                "description": "<p>The data type for the range key (also called the sort key), You can specify the following values:</p> <ul> <li> <p> <code>'STRING'</code> - The range key is a string.</p> </li> <li> <p> <code>'NUMBER'</code> - The range key is number.</p> </li> </ul> <p>If you don't specify <code>rangeKeyField</code>, the default value is <code>'STRING'</code>.</p>"
              }
            ]
          },
          "rangeKeyField": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyField"
              },
              {
                "description": "The name of the range key (also called the sort key). The <code>rangeKeyField</code> value must match the sort key of the target DynamoDB table. "
              }
            ]
          },
          "rangeKeyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyValue"
              },
              {
                "description": "The value of the range key (also called the sort key)."
              }
            ]
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoOperation"
              },
              {
                "description": "<p>The type of operation to perform. You can specify the following values: </p> <ul> <li> <p> <code>'INSERT'</code> - Insert data as a new item into the DynamoDB table. This item uses the specified hash key as a partition key. If you specified a range key, the item uses the range key as a sort key.</p> </li> <li> <p> <code>'UPDATE'</code> - Update an existing item of the DynamoDB table with new data. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.</p> </li> <li> <p> <code>'DELETE'</code> - Delete an existing item of the DynamoDB table. This item's partition key must match the specified hash key. If you specified a range key, the range key must match the item's sort key.</p> </li> </ul> <p>If you don't specify this parameter, AWS IoT Events triggers the <code>'INSERT'</code> operation.</p>"
              }
            ]
          },
          "payloadField": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoKeyField"
              },
              {
                "description": "<p>The name of the DynamoDB column that receives the action payload.</p> <p>If you don't specify this parameter, the name of the DynamoDB column is <code>payload</code>.</p>"
              }
            ]
          },
          "tableName": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoTableName"
              },
              {
                "description": "The name of the DynamoDB table. The <code>tableName</code> value must match the table name of the target DynamoDB table. "
              }
            ]
          },
          "payload": {
            "$ref": "#/$defs/Payload"
          }
        },
        "description": "<p>Defines an action to write to the Amazon DynamoDB table that you created. The standard action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\">payload</a>. One column of the DynamoDB table receives all attribute-value pairs in the payload that you specify.</p> <p>You must use expressions for all parameters in <code>DynamoDBAction</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>hashKeyType</code> parameter can be <code>'STRING'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>hashKeyField</code> parameter can be <code>$input.GreenhouseInput.name</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>hashKeyValue</code> parameter uses a substitution template. </p> <p> <code>'${$input.GreenhouseInput.temperature * 6 / 5 + 32} in Fahrenheit'</code> </p> </li> <li> <p>For a string concatenation, you must use <code>+</code>. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>tableName</code> parameter uses a string concatenation. </p> <p> <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>If the defined payload type is a string, <code>DynamoDBAction</code> writes non-JSON data to the DynamoDB table as binary data. The DynamoDB console displays the data as Base64-encoded text. The value for the <code>payloadField</code> parameter is <code>&lt;payload-field&gt;_raw</code>.</p>"
      },
      "DynamoKeyType": {
        "type": "string"
      },
      "DynamoKeyField": {
        "type": "string"
      },
      "DynamoKeyValue": {
        "type": "string"
      },
      "DynamoOperation": {
        "type": "string"
      },
      "DynamoTableName": {
        "type": "string"
      },
      "DynamoDBv2Action": {
        "type": "object",
        "required": [
          "tableName"
        ],
        "properties": {
          "tableName": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoTableName"
              },
              {
                "description": "The name of the DynamoDB table."
              }
            ]
          },
          "payload": {
            "$ref": "#/$defs/Payload"
          }
        },
        "description": "<p>Defines an action to write to the Amazon DynamoDB table that you created. The default action payload contains all the information about the detector model instance and the event that triggered the action. You can customize the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_Payload.html\">payload</a>. A separate column of the DynamoDB table receives one attribute-value pair in the payload that you specify.</p> <p>You must use expressions for all parameters in <code>DynamoDBv2Action</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>tableName</code> parameter can be <code>'GreenhouseTemperatureTable'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>tableName</code> parameter can be <code>$variable.ddbtableName</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>contentExpression</code> parameter in <code>Payload</code> uses a substitution template. </p> <p> <code>'{\\\"sensorID\\\": \\\"${$input.GreenhouseInput.sensor_id}\\\", \\\"temperature\\\": \\\"${$input.GreenhouseInput.temperature * 9 / 5 + 32}\\\"}'</code> </p> </li> <li> <p>For a string concatenation, you must use <code>+</code>. A string concatenation can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>tableName</code> parameter uses a string concatenation. </p> <p> <code>'GreenhouseTemperatureTable ' + $input.GreenhouseInput.date</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>The value for the <code>type</code> parameter in <code>Payload</code> must be <code>JSON</code>.</p>"
      },
      "IotSiteWiseAction": {
        "type": "object",
        "properties": {
          "entryId": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyEntryId"
              },
              {
                "description": "A unique identifier for this entry. You can use the entry ID to track which data entry causes an error in case of failure. The default is a new unique identifier."
              }
            ]
          },
          "assetId": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetId"
              },
              {
                "description": "The ID of the asset that has the specified property."
              }
            ]
          },
          "propertyId": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyId"
              },
              {
                "description": "The ID of the asset property."
              }
            ]
          },
          "propertyAlias": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyAlias"
              },
              {
                "description": "The alias of the asset property."
              }
            ]
          },
          "propertyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyValue"
              },
              {
                "description": "The value to send to the asset property. This value contains timestamp, quality, and value (TQV) information. "
              }
            ]
          }
        },
        "description": "<p>Sends information about the detector model instance and the event that triggered the action to a specified asset property in AWS IoT SiteWise.</p> <p>You must use expressions for all parameters in <code>IotSiteWiseAction</code>. The expressions accept literals, operators, functions, references, and substitutions templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>propertyAlias</code> parameter can be <code>'/company/windfarm/3/turbine/7/temperature'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>assetId</code> parameter can be <code>$input.TurbineInput.assetId1</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>propertyAlias</code> parameter uses a substitution template. </p> <p> <code>'company/windfarm/${$input.TemperatureInput.sensorData.windfarmID}/turbine/ ${$input.TemperatureInput.sensorData.turbineID}/temperature'</code> </p> </li> </ul> <p>You must specify either <code>propertyAlias</code> or both <code>assetId</code> and <code>propertyId</code> to identify the target asset property in AWS IoT SiteWise.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>"
      },
      "AssetPropertyEntryId": {
        "type": "string"
      },
      "AssetId": {
        "type": "string"
      },
      "AssetPropertyId": {
        "type": "string"
      },
      "AssetPropertyAlias": {
        "type": "string"
      },
      "AssetPropertyValue": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyVariant"
              },
              {
                "description": "The value to send to an asset property."
              }
            ]
          },
          "timestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyTimestamp"
              },
              {
                "description": "The timestamp associated with the asset property value. The default is the current event time."
              }
            ]
          },
          "quality": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyQuality"
              },
              {
                "description": "The quality of the asset property value. The value must be <code>'GOOD'</code>, <code>'BAD'</code>, or <code>'UNCERTAIN'</code>."
              }
            ]
          }
        },
        "description": "<p>A structure that contains value information. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetPropertyValue.html\">AssetPropertyValue</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyValue</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>quality</code> parameter can be <code>'GOOD'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>quality</code> parameter can be <code>$input.TemperatureInput.sensorData.quality</code>.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>"
      },
      "AssetPropertyVariant": {
        "type": "object",
        "properties": {
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyStringValue"
              },
              {
                "description": "The asset property value is a string. You must use an expression, and the evaluated result should be a string."
              }
            ]
          },
          "integerValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyIntegerValue"
              },
              {
                "description": "The asset property value is an integer. You must use an expression, and the evaluated result should be an integer."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyDoubleValue"
              },
              {
                "description": "The asset property value is a double. You must use an expression, and the evaluated result should be a double."
              }
            ]
          },
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyBooleanValue"
              },
              {
                "description": "The asset property value is a Boolean value that must be <code>'TRUE'</code> or <code>'FALSE'</code>. You must use an expression, and the evaluated result should be a Boolean value."
              }
            ]
          }
        },
        "description": "<p>A structure that contains an asset property value. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_Variant.html\">Variant</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyVariant</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>integerValue</code> parameter can be <code>'100'</code>.</p> </li> <li> <p>For references, you must specify either variables or parameters. For example, the value for the <code>booleanValue</code> parameter can be <code>$variable.offline</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates. </p> <p>In the following example, the value for the <code>doubleValue</code> parameter uses a substitution template. </p> <p> <code>'${$input.TemperatureInput.sensorData.temperature * 6 / 5 + 32}'</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p> <p>You must specify one of the following value types, depending on the <code>dataType</code> of the specified asset property. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_AssetProperty.html\">AssetProperty</a> in the <i>AWS IoT SiteWise API Reference</i>.</p>"
      },
      "AssetPropertyStringValue": {
        "type": "string"
      },
      "AssetPropertyIntegerValue": {
        "type": "string"
      },
      "AssetPropertyDoubleValue": {
        "type": "string"
      },
      "AssetPropertyBooleanValue": {
        "type": "string"
      },
      "AssetPropertyTimestamp": {
        "type": "object",
        "required": [
          "timeInSeconds"
        ],
        "properties": {
          "timeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyTimeInSeconds"
              },
              {
                "description": "The timestamp, in seconds, in the Unix epoch format. The valid range is between 1-31556889864403199."
              }
            ]
          },
          "offsetInNanos": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetPropertyOffsetInNanos"
              },
              {
                "description": "The nanosecond offset converted from <code>timeInSeconds</code>. The valid range is between 0-999999999."
              }
            ]
          }
        },
        "description": "<p>A structure that contains timestamp information. For more information, see <a href=\"https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_TimeInNanos.html\">TimeInNanos</a> in the <i>AWS IoT SiteWise API Reference</i>.</p> <p>You must use expressions for all parameters in <code>AssetPropertyTimestamp</code>. The expressions accept literals, operators, functions, references, and substitution templates.</p> <p class=\"title\"> <b>Examples</b> </p> <ul> <li> <p>For literal values, the expressions must contain single quotes. For example, the value for the <code>timeInSeconds</code> parameter can be <code>'1586400675'</code>.</p> </li> <li> <p>For references, you must specify either variables or input values. For example, the value for the <code>offsetInNanos</code> parameter can be <code>$variable.time</code>.</p> </li> <li> <p>For a substitution template, you must use <code>${}</code>, and the template must be in single quotes. A substitution template can also contain a combination of literals, operators, functions, references, and substitution templates.</p> <p>In the following example, the value for the <code>timeInSeconds</code> parameter uses a substitution template.</p> <p> <code>'${$input.TemperatureInput.sensorData.timestamp / 1000}'</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html\">Expressions</a> in the <i>AWS IoT Events Developer Guide</i>.</p>"
      },
      "AssetPropertyTimeInSeconds": {
        "type": "string"
      },
      "AssetPropertyOffsetInNanos": {
        "type": "string"
      },
      "AssetPropertyQuality": {
        "type": "string"
      },
      "TransitionEvents": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TransitionEvent"
        }
      },
      "TransitionEvent": {
        "type": "object",
        "required": [
          "eventName",
          "condition",
          "nextState"
        ],
        "properties": {
          "eventName": {
            "allOf": [
              {
                "$ref": "#/$defs/EventName"
              },
              {
                "description": "The name of the transition event."
              }
            ]
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "description": "Required. A Boolean expression that when TRUE causes the actions to be performed and the <code>nextState</code> to be entered."
              }
            ]
          },
          "actions": {
            "allOf": [
              {
                "$ref": "#/$defs/Actions"
              },
              {
                "description": "The actions to be performed."
              }
            ]
          },
          "nextState": {
            "allOf": [
              {
                "$ref": "#/$defs/StateName"
              },
              {
                "description": "The next state to enter."
              }
            ]
          }
        },
        "description": "Specifies the actions performed and the next state entered when a <code>condition</code> evaluates to TRUE."
      },
      "OnEnterLifecycle": {
        "type": "object",
        "properties": {
          "events": {
            "allOf": [
              {
                "$ref": "#/$defs/Events"
              },
              {
                "description": "Specifies the actions that are performed when the state is entered and the <code>condition</code> is <code>TRUE</code>."
              }
            ]
          }
        },
        "description": "When entering this state, perform these <code>actions</code> if the <code>condition</code> is TRUE."
      },
      "OnExitLifecycle": {
        "type": "object",
        "properties": {
          "events": {
            "allOf": [
              {
                "$ref": "#/$defs/Events"
              },
              {
                "description": "Specifies the <code>actions</code> that are performed when the state is exited and the <code>condition</code> is <code>TRUE</code>."
              }
            ]
          }
        },
        "description": "When exiting this state, perform these <code>actions</code> if the specified <code>condition</code> is <code>TRUE</code>."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotevents.us-east-1.amazonaws.com/detector-models/{detectorModelName}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detectorModelConfiguration**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
