{
  "name": "SendCommand",
  "description": "<p>Sends a command to an Amazon QLDB ledger.</p> <note> <p>Instead of interacting directly with this API, we recommend using the QLDB driver or the QLDB shell to execute data transactions on a ledger.</p> <ul> <li> <p>If you are working with an AWS SDK, use the QLDB driver. The driver provides a high-level abstraction layer above this <i>QLDB Session</i> data plane and manages <code>SendCommand</code> API calls for you. For information and a list of supported programming languages, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-driver.html\">Getting started with the driver</a> in the <i>Amazon QLDB Developer Guide</i>.</p> </li> <li> <p>If you are working with the AWS Command Line Interface (AWS CLI), use the QLDB shell. The shell is a command line interface that uses the QLDB driver to interact with a ledger. For information, see <a href=\"https://docs.aws.amazon.com/qldb/latest/developerguide/data-shell.html\">Accessing Amazon QLDB using the QLDB shell</a>.</p> </li> </ul> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "QLDBSession.SendCommand"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/SendCommandRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "SendCommandRequest": {
        "type": "object",
        "title": "SendCommandRequest",
        "properties": {
          "SessionToken": {
            "allOf": [
              {
                "$ref": "#/$defs/SessionToken"
              },
              {
                "description": "<p>Specifies the session token for the current command. A session token is constant throughout the life of the session.</p> <p>To obtain a session token, run the <code>StartSession</code> command. This <code>SessionToken</code> is required for every subsequent command that is issued during the current session.</p>"
              }
            ]
          },
          "StartSession": {
            "allOf": [
              {
                "$ref": "#/$defs/StartSessionRequest"
              },
              {
                "description": "Command to start a new session. A session token is obtained as part of the response."
              }
            ]
          },
          "StartTransaction": {
            "allOf": [
              {
                "$ref": "#/$defs/StartTransactionRequest"
              },
              {
                "description": "Command to start a new transaction."
              }
            ]
          },
          "EndSession": {
            "allOf": [
              {
                "$ref": "#/$defs/EndSessionRequest"
              },
              {
                "description": "Command to end the current session."
              }
            ]
          },
          "CommitTransaction": {
            "allOf": [
              {
                "$ref": "#/$defs/CommitTransactionRequest"
              },
              {
                "description": "Command to commit the specified transaction."
              }
            ]
          },
          "AbortTransaction": {
            "allOf": [
              {
                "$ref": "#/$defs/AbortTransactionRequest"
              },
              {
                "description": "Command to abort the current transaction."
              }
            ]
          },
          "ExecuteStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecuteStatementRequest"
              },
              {
                "description": "Command to execute a statement in the specified transaction."
              }
            ]
          },
          "FetchPage": {
            "allOf": [
              {
                "$ref": "#/$defs/FetchPageRequest"
              },
              {
                "description": "Command to fetch a page."
              }
            ]
          }
        }
      },
      "SessionToken": {
        "type": "string",
        "pattern": "^[A-Za-z-0-9+/=]+$",
        "minLength": 4,
        "maxLength": 1024
      },
      "StartSessionRequest": {
        "type": "object",
        "required": [
          "LedgerName"
        ],
        "properties": {
          "LedgerName": {
            "allOf": [
              {
                "$ref": "#/$defs/LedgerName"
              },
              {
                "description": "The name of the ledger to start a new session against."
              }
            ]
          }
        },
        "description": "Specifies a request to start a new session."
      },
      "LedgerName": {
        "type": "string",
        "pattern": "(?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$",
        "minLength": 1,
        "maxLength": 32
      },
      "StartTransactionRequest": {
        "type": "object",
        "properties": {},
        "description": "Specifies a request to start a transaction."
      },
      "EndSessionRequest": {
        "type": "object",
        "properties": {},
        "description": "Specifies a request to end the session."
      },
      "CommitTransactionRequest": {
        "type": "object",
        "required": [
          "TransactionId",
          "CommitDigest"
        ],
        "properties": {
          "TransactionId": {
            "allOf": [
              {
                "$ref": "#/$defs/TransactionId"
              },
              {
                "description": "Specifies the transaction ID of the transaction to commit."
              }
            ]
          },
          "CommitDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/CommitDigest"
              },
              {
                "description": "<p>Specifies the commit digest for the transaction to commit. For every active transaction, the commit digest must be passed. QLDB validates <code>CommitDigest</code> and rejects the commit with an error if the digest computed on the client does not match the digest computed by QLDB.</p> <p>The purpose of the <code>CommitDigest</code> parameter is to ensure that QLDB commits a transaction if and only if the server has processed the exact set of statements sent by the client, in the same order that client sent them, and with no duplicates.</p>"
              }
            ]
          }
        },
        "description": "Contains the details of the transaction to commit."
      },
      "TransactionId": {
        "type": "string",
        "pattern": "^[A-Za-z-0-9]+$",
        "minLength": 22,
        "maxLength": 22
      },
      "CommitDigest": {
        "type": "string"
      },
      "AbortTransactionRequest": {
        "type": "object",
        "properties": {},
        "description": "Contains the details of the transaction to abort."
      },
      "ExecuteStatementRequest": {
        "type": "object",
        "required": [
          "TransactionId",
          "Statement"
        ],
        "properties": {
          "TransactionId": {
            "allOf": [
              {
                "$ref": "#/$defs/TransactionId"
              },
              {
                "description": "Specifies the transaction ID of the request."
              }
            ]
          },
          "Statement": {
            "allOf": [
              {
                "$ref": "#/$defs/Statement"
              },
              {
                "description": "Specifies the statement of the request."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/StatementParameters"
              },
              {
                "description": "Specifies the parameters for the parameterized statement in the request."
              }
            ]
          }
        },
        "description": "Specifies a request to execute a statement."
      },
      "Statement": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100000
      },
      "StatementParameters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ValueHolder"
        }
      },
      "ValueHolder": {
        "type": "object",
        "properties": {
          "IonBinary": {
            "allOf": [
              {
                "$ref": "#/$defs/IonBinary"
              },
              {
                "description": "An Amazon Ion binary value contained in a <code>ValueHolder</code> structure."
              }
            ]
          },
          "IonText": {
            "allOf": [
              {
                "$ref": "#/$defs/IonText"
              },
              {
                "description": "An Amazon Ion plaintext value contained in a <code>ValueHolder</code> structure."
              }
            ]
          }
        },
        "description": "A structure that can contain a value in multiple encoding formats."
      },
      "IonBinary": {
        "type": "string",
        "minLength": 1,
        "maxLength": 131072
      },
      "IonText": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1048576
      },
      "FetchPageRequest": {
        "type": "object",
        "required": [
          "TransactionId",
          "NextPageToken"
        ],
        "properties": {
          "TransactionId": {
            "allOf": [
              {
                "$ref": "#/$defs/TransactionId"
              },
              {
                "description": "Specifies the transaction ID of the page to be fetched."
              }
            ]
          },
          "NextPageToken": {
            "allOf": [
              {
                "$ref": "#/$defs/PageToken"
              },
              {
                "description": "Specifies the next page token of the page to be fetched."
              }
            ]
          }
        },
        "description": "Specifies the details of the page to be fetched."
      },
      "PageToken": {
        "type": "string",
        "pattern": "^[A-Za-z-0-9+/=]+$",
        "minLength": 4,
        "maxLength": 1024
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://session.qldb.us-east-1.amazonaws.com/#X-Amz-Target=QLDBSession.SendCommand"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**StartSession**",
            "**StartTransaction**",
            "**EndSession**",
            "**CommitTransaction**",
            "**AbortTransaction**",
            "**ExecuteStatement**",
            "**FetchPage**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
