{
  "name": "CreateApplication",
  "description": "Creates an application.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "releaseLabel",
          "type",
          "clientToken"
        ],
        "properties": {
          "name": {
            "description": "The name of the application.",
            "type": "string",
            "pattern": "[A-Za-z0-9._/#-]+",
            "minLength": 1,
            "maxLength": 64
          },
          "releaseLabel": {
            "description": "The Amazon EMR release associated with the application.",
            "type": "string",
            "pattern": "[A-Za-z0-9._/-]+",
            "minLength": 1,
            "maxLength": 64
          },
          "type": {
            "description": "The type of application you want to start, such as Spark or Hive.",
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "clientToken": {
            "description": "The client idempotency token of the application to create. Its value must be unique for each request.",
            "type": "string",
            "pattern": "[A-Za-z0-9._-]+",
            "minLength": 1,
            "maxLength": 64
          },
          "initialCapacity": {
            "description": "The capacity to initialize when the application is created.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 10,
            "additionalProperties": {
              "$ref": "#/$defs/InitialCapacityConfig"
            }
          },
          "maximumCapacity": {
            "description": "The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.",
            "type": "object",
            "properties": {
              "cpu": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CpuSize"
                  },
                  {
                    "description": "The maximum allowed CPU for an application."
                  }
                ]
              },
              "memory": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MemorySize"
                  },
                  {
                    "description": "The maximum allowed resources for an application."
                  }
                ]
              },
              "disk": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DiskSize"
                  },
                  {
                    "description": "The maximum allowed disk for an application."
                  }
                ]
              }
            }
          },
          "tags": {
            "description": "The tags assigned to the application.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 200,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          },
          "autoStartConfiguration": {
            "description": "The configuration for an application to automatically start on job submission.",
            "type": "object",
            "properties": {
              "enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Enables the application to automatically start on job submission. Defaults to true."
                  }
                ]
              }
            }
          },
          "autoStopConfiguration": {
            "description": "The configuration for an application to automatically stop after a certain amount of time being idle.",
            "type": "object",
            "properties": {
              "enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Enables the application to automatically stop after a certain amount of time being idle. Defaults to true."
                  }
                ]
              },
              "idleTimeoutMinutes": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AutoStopConfigIdleTimeoutMinutesInteger"
                  },
                  {
                    "description": "The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes."
                  }
                ]
              }
            }
          },
          "networkConfiguration": {
            "description": "The network configuration for customer VPC connectivity.",
            "type": "object",
            "properties": {
              "subnetIds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SubnetIds"
                  },
                  {
                    "description": "The array of subnet Ids for customer VPC connectivity."
                  }
                ]
              },
              "securityGroupIds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SecurityGroupIds"
                  },
                  {
                    "description": "The array of security group Ids for customer VPC connectivity."
                  }
                ]
              }
            }
          },
          "architecture": {
            "description": "The CPU architecture of an application.",
            "type": "string",
            "enum": [
              "ARM64",
              "X86_64"
            ]
          },
          "imageConfiguration": {
            "description": "The image configuration.",
            "type": "object",
            "properties": {
              "imageUri": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ImageUri"
                  },
                  {
                    "description": "The URI of an image in the Amazon ECR registry. This field is required when you create a new application. If you leave this field blank in an update, Amazon EMR will remove the image configuration."
                  }
                ]
              }
            }
          },
          "workerTypeSpecifications": {
            "description": "The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/WorkerTypeSpecificationInput"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "InitialCapacityConfig": {
        "type": "object",
        "required": [
          "workerCount"
        ],
        "properties": {
          "workerCount": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkerCounts"
              },
              {
                "description": "The number of workers in the initial capacity configuration."
              }
            ]
          },
          "workerConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkerResourceConfig"
              },
              {
                "description": "The resource configuration of the initial capacity configuration."
              }
            ]
          }
        },
        "description": "The initial capacity configuration per worker."
      },
      "WorkerCounts": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1000000
      },
      "WorkerResourceConfig": {
        "type": "object",
        "required": [
          "cpu",
          "memory"
        ],
        "properties": {
          "cpu": {
            "allOf": [
              {
                "$ref": "#/$defs/CpuSize"
              },
              {
                "description": "The CPU requirements for every worker instance of the worker type."
              }
            ]
          },
          "memory": {
            "allOf": [
              {
                "$ref": "#/$defs/MemorySize"
              },
              {
                "description": "The memory requirements for every worker instance of the worker type."
              }
            ]
          },
          "disk": {
            "allOf": [
              {
                "$ref": "#/$defs/DiskSize"
              },
              {
                "description": "The disk requirements for every worker instance of the worker type."
              }
            ]
          }
        },
        "description": "The cumulative configuration requirements for every worker instance of the worker type."
      },
      "CpuSize": {
        "type": "string",
        "pattern": "[1-9][0-9]*(\\s)?(vCPU|vcpu|VCPU)?",
        "minLength": 1,
        "maxLength": 15
      },
      "MemorySize": {
        "type": "string",
        "pattern": "[1-9][0-9]*(\\s)?(GB|gb|gB|Gb)?",
        "minLength": 1,
        "maxLength": 15
      },
      "DiskSize": {
        "type": "string",
        "pattern": "[1-9][0-9]*(\\s)?(GB|gb|gB|Gb)",
        "minLength": 1,
        "maxLength": 15
      },
      "TagValue": {
        "type": "string",
        "pattern": "[A-Za-z0-9 /_.:=+@-]*",
        "minLength": 0,
        "maxLength": 256
      },
      "Boolean": {
        "type": "boolean"
      },
      "AutoStopConfigIdleTimeoutMinutesInteger": {
        "type": "integer",
        "minimum": 1,
        "maximum": 10080
      },
      "SubnetIds": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SubnetString"
        },
        "minItems": 0,
        "maxItems": 16
      },
      "SubnetString": {
        "type": "string",
        "pattern": "[-0-9a-zA-Z]+.*",
        "minLength": 1,
        "maxLength": 32
      },
      "SecurityGroupIds": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SecurityGroupString"
        },
        "minItems": 0,
        "maxItems": 5
      },
      "SecurityGroupString": {
        "type": "string",
        "pattern": "[-0-9a-zA-Z]+.*",
        "minLength": 1,
        "maxLength": 32
      },
      "ImageUri": {
        "type": "string",
        "pattern": "([a-z0-9]+[a-z0-9-.]*)\\/((?:[a-z0-9]+(?:[._-][a-z0-9]+)*\\/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)(?:\\:([a-zA-Z0-9_][a-zA-Z0-9-._]{0,299})|@(sha256:[0-9a-f]{64}))",
        "minLength": 1,
        "maxLength": 1024
      },
      "WorkerTypeSpecificationInput": {
        "type": "object",
        "properties": {
          "imageConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageConfigurationInput"
              },
              {
                "description": "The image configuration for a worker type."
              }
            ]
          }
        },
        "description": "The specifications for a worker type."
      },
      "ImageConfigurationInput": {
        "type": "object",
        "properties": {
          "imageUri": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageUri"
              },
              {
                "description": "The URI of an image in the Amazon ECR registry. This field is required when you create a new application. If you leave this field blank in an update, Amazon EMR will remove the image configuration."
              }
            ]
          }
        },
        "description": "The image configuration."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://emr-serverless.us-east-1.amazonaws.com/applications"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**applicationId**",
            "**name**",
            "**arn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
