{
  "name": "StartMatchmaking",
  "description": "<p>Uses FlexMatch to create a game match for a group of players based on custom matchmaking rules. With games that use Amazon GameLift managed hosting, this operation also triggers Amazon GameLift to find hosting resources and start a new game session for the new match. Each matchmaking request includes information on one or more players and specifies the FlexMatch matchmaker to use. When a request is for multiple players, FlexMatch attempts to build a match that includes all players in the request, placing them in the same team and finding additional players as needed to fill the match. </p> <p>To start matchmaking, provide a unique ticket ID, specify a matchmaking configuration, and include the players to be matched. You must also include any player attributes that are required by the matchmaking configuration's rule set. If successful, a matchmaking ticket is returned with status set to <code>QUEUED</code>. </p> <p>Track matchmaking events to respond as needed and acquire game session connection information for successfully completed matches. Ticket status updates are tracked using event notification through Amazon Simple Notification Service, which is defined in the matchmaking configuration.</p> <p> <b>Learn more</b> </p> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-client.html\"> Add FlexMatch to a game client</a> </p> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/match-notification.html\"> Set Up FlexMatch event notification</a> </p> <p> <a href=\"https://docs.aws.amazon.com/gamelift/latest/flexmatchguide/gamelift-match.html\"> How Amazon GameLift FlexMatch works</a> </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "GameLift.StartMatchmaking"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartMatchmakingInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartMatchmakingInput": {
        "type": "object",
        "required": [
          "ConfigurationName",
          "Players"
        ],
        "title": "StartMatchmakingInput",
        "properties": {
          "TicketId": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchmakingIdStringModel"
              },
              {
                "description": "A unique identifier for a matchmaking ticket. If no ticket ID is specified here, Amazon GameLift will generate one in the form of a UUID. Use this identifier to track the matchmaking ticket status and retrieve match results."
              }
            ]
          },
          "ConfigurationName": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchmakingConfigurationName"
              },
              {
                "description": "Name of the matchmaking configuration to use for this request. Matchmaking configurations must exist in the same Region as this request. You can use either the configuration name or ARN value."
              }
            ]
          },
          "Players": {
            "allOf": [
              {
                "$ref": "#/$defs/PlayerList"
              },
              {
                "description": "<p>Information on each player to be matched. This information must include a player ID, and may contain player attributes and latency data to be used in the matchmaking process. After a successful match, <code>Player</code> objects contain the name of the team the player is assigned to.</p> <p>You can include up to 10 <code>Players</code> in a <code>StartMatchmaking</code> request.</p>"
              }
            ]
          }
        }
      },
      "MatchmakingIdStringModel": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-\\.]*",
        "maxLength": 128
      },
      "MatchmakingConfigurationName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-\\.]*|^arn:.*:matchmakingconfiguration\\/[a-zA-Z0-9-\\.]*",
        "minLength": 1,
        "maxLength": 256
      },
      "PlayerList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Player"
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "PlayerId": {
            "allOf": [
              {
                "$ref": "#/$defs/NonZeroAndMaxString"
              },
              {
                "description": "A unique identifier for a player"
              }
            ]
          },
          "PlayerAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/PlayerAttributeMap"
              },
              {
                "description": "<p>A collection of key:value pairs containing player information for use in matchmaking. Player attribute keys must match the <i>playerAttributes</i> used in a matchmaking rule set. Example: <code>\"PlayerAttributes\": {\"skill\": {\"N\": \"23\"}, \"gameMode\": {\"S\": \"deathmatch\"}}</code>.</p> <p>You can provide up to 10 <code>PlayerAttributes</code>.</p>"
              }
            ]
          },
          "Team": {
            "allOf": [
              {
                "$ref": "#/$defs/NonZeroAndMaxString"
              },
              {
                "description": "Name of the team that the player is assigned to in a match. Team names are defined in a matchmaking rule set."
              }
            ]
          },
          "LatencyInMs": {
            "allOf": [
              {
                "$ref": "#/$defs/LatencyMap"
              },
              {
                "description": "<p>A set of values, expressed in milliseconds, that indicates the amount of latency that a player experiences when connected to @aws; Regions. If this property is present, FlexMatch considers placing the match only in Regions for which latency is reported. </p> <p>If a matchmaker has a rule that evaluates player latency, players must report latency in order to be matched. If no latency is reported in this scenario, FlexMatch assumes that no Regions are available to the player and the ticket is not matchable. </p>"
              }
            ]
          }
        },
        "description": "Represents a player in matchmaking. When starting a matchmaking request, a player has a player ID, attributes, and may have latency data. Team information is added after a match has been successfully completed."
      },
      "NonZeroAndMaxString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "PlayerAttributeMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "S": {
            "allOf": [
              {
                "$ref": "#/$defs/PlayerAttributeString"
              },
              {
                "description": "For single string values. Maximum string length is 100 characters."
              }
            ]
          },
          "N": {
            "allOf": [
              {
                "$ref": "#/$defs/DoubleObject"
              },
              {
                "description": "For number values, expressed as double."
              }
            ]
          },
          "SL": {
            "allOf": [
              {
                "$ref": "#/$defs/PlayerAttributeStringList"
              },
              {
                "description": "For a list of up to 100 strings. Maximum length for each string is 100 characters. Duplicate values are not recognized; all occurrences of the repeated value after the first of a repeated value are ignored."
              }
            ]
          },
          "SDM": {
            "allOf": [
              {
                "$ref": "#/$defs/PlayerAttributeStringDoubleMap"
              },
              {
                "description": "For a map of up to 10 data type:value pairs. Maximum length for each string value is 100 characters. "
              }
            ]
          }
        },
        "description": "Values for use in player attribute key-value pairs. This object lets you specify an attribute value using any of the valid data types: string, number, string array, or data map. Each <code>AttributeValue</code> object can use only one of the available properties."
      },
      "PlayerAttributeString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "DoubleObject": {
        "type": "number",
        "format": "double"
      },
      "PlayerAttributeStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PlayerAttributeString"
        }
      },
      "PlayerAttributeStringDoubleMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/DoubleObject"
        }
      },
      "LatencyMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/PositiveInteger"
        }
      },
      "PositiveInteger": {
        "type": "integer",
        "minimum": 1
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://gamelift.us-east-1.amazonaws.com/#X-Amz-Target=GameLift.StartMatchmaking"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**MatchmakingTicket**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
