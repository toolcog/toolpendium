{
  "name": "PostText",
  "description": "<p>Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. </p> <p> In response, Amazon Lex returns the next <code>message</code> to convey to the user an optional <code>responseCard</code> to display. Consider the following example messages: </p> <ul> <li> <p> For a user input \"I would like a pizza\", Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \"What size pizza would you like?\" </p> </li> <li> <p> After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \"Proceed with the pizza order?\". </p> </li> <li> <p> After the user replies to a confirmation prompt with a \"yes\", Amazon Lex might return a conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p> </li> </ul> <p> Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \"yes\" or \"no\" user response. In addition to the <code>message</code>, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the <code>slotToElicit</code>, <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in the response. Consider the following examples: </p> <ul> <li> <p>If the message is to elicit slot data, Amazon Lex returns the following context information:</p> <ul> <li> <p> <code>dialogState</code> set to ElicitSlot </p> </li> <li> <p> <code>intentName</code> set to the intent name in the current context </p> </li> <li> <p> <code>slotToElicit</code> set to the slot name for which the <code>message</code> is eliciting information </p> </li> <li> <p> <code>slots</code> set to a map of slots, configured for the intent, with currently known values </p> </li> </ul> </li> <li> <p> If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent and <code>SlotToElicit</code> is set to null. </p> </li> <li> <p>If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent and <code>slotToElicit</code> is set to null. </p> </li> </ul> <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "botName": {
        "type": "string",
        "description": "The name of the Amazon Lex bot."
      },
      "botAlias": {
        "type": "string",
        "description": "The alias of the Amazon Lex bot."
      },
      "userId": {
        "type": "string",
        "pattern": "[0-9a-zA-Z._:-]+",
        "minLength": 2,
        "maxLength": 100,
        "description": "<p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p> <p>To decide the user ID to use for your application, consider the following factors.</p> <ul> <li> <p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p> </li> <li> <p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p> </li> <li> <p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p> </li> <li> <p>A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p> </li> </ul>"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "inputText"
        ],
        "properties": {
          "sessionAttributes": {
            "description": "<p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          },
          "requestAttributes": {
            "description": "<p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          },
          "inputText": {
            "description": "The text that the user entered (Amazon Lex interprets this text).",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "format": "password"
          },
          "activeContexts": {
            "description": "<p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ActiveContext"
            },
            "minItems": 0,
            "maxItems": 20
          }
        }
      }
    },
    "required": [
      "botName",
      "botAlias",
      "userId",
      "body"
    ],
    "$defs": {
      "String": {
        "type": "string"
      },
      "ActiveContext": {
        "type": "object",
        "required": [
          "name",
          "timeToLive",
          "parameters"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextName"
              },
              {
                "description": "The name of the context."
              }
            ]
          },
          "timeToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTimeToLive"
              },
              {
                "description": "The length of time or number of turns that a context remains active."
              }
            ]
          },
          "parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextParametersMap"
              },
              {
                "description": "State variables for the current context. You can use these values as default values for slots in subsequent events."
              }
            ]
          }
        },
        "description": "A context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the <code>PutContent</code>, <code>PutText</code>, or <code>PutSession</code> operation."
      },
      "ActiveContextName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "ActiveContextTimeToLive": {
        "type": "object",
        "properties": {
          "timeToLiveInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTimeToLiveInSeconds"
              },
              {
                "description": "The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours)."
              }
            ]
          },
          "turnsToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTurnsToLive"
              },
              {
                "description": "The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex."
              }
            ]
          }
        },
        "description": "The length of time or number of turns that a context remains active."
      },
      "ActiveContextTimeToLiveInSeconds": {
        "type": "integer",
        "minimum": 5,
        "maximum": 86400
      },
      "ActiveContextTurnsToLive": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "ActiveContextParametersMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 10,
        "additionalProperties": {
          "$ref": "#/$defs/Text"
        }
      },
      "Text": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "format": "password"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://runtime.lex.us-east-1.amazonaws.com/bot/{botName}/alias/{botAlias}/user/{userId}/text"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**intentName**",
            "**nluIntentConfidence**",
            "**alternativeIntents**",
            "**slots**",
            "**sessionAttributes**",
            "**message**",
            "**sentimentResponse**",
            "**messageFormat**",
            "**dialogState**",
            "**slotToElicit**",
            "**responseCard**",
            "**sessionId**",
            "**botVersion**",
            "**activeContexts**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
