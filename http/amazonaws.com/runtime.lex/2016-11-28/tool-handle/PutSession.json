{
  "name": "PutSession",
  "description": "<p>Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\">Managing Sessions</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "botName": {
        "type": "string",
        "description": "The name of the bot that contains the session data."
      },
      "botAlias": {
        "type": "string",
        "description": "The alias in use for the bot that contains the session data."
      },
      "userId": {
        "type": "string",
        "pattern": "[0-9a-zA-Z._:-]+",
        "minLength": 2,
        "maxLength": 100,
        "description": "The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. "
      },
      "Accept": {
        "type": "string",
        "description": "<p>The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.</p> <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in the response.</p> </li> <li> <p>If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the MPEG format.</p> </li> <li> <p>If the value is <code>audio/pcm</code>, the speech is returned as <code>audio/pcm</code> in 16-bit, little endian format.</p> </li> <li> <p>The following are the accepted values:</p> <ul> <li> <p> <code>audio/mpeg</code> </p> </li> <li> <p> <code>audio/ogg</code> </p> </li> <li> <p> <code>audio/pcm</code> </p> </li> <li> <p> <code>audio/*</code> (defaults to mpeg)</p> </li> <li> <p> <code>text/plain; charset=utf-8</code> </p> </li> </ul> </li> </ul>"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "sessionAttributes": {
            "description": "Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          },
          "dialogAction": {
            "description": "Describes the next action that the bot should take in its interaction with the user and provides information about the context in which the action takes place. Use the <code>DialogAction</code> data type to set the interaction to a specific state, or to return the interaction to a previous state.",
            "type": "object",
            "properties": {
              "type": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogActionType"
                  },
                  {
                    "description": "<p>The next action that the bot should take in its interaction with the user. The possible values are:</p> <ul> <li> <p> <code>ConfirmIntent</code> - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"</p> </li> <li> <p> <code>Close</code> - Indicates that the there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.</p> </li> <li> <p> <code>Delegate</code> - The next action is determined by Amazon Lex.</p> </li> <li> <p> <code>ElicitIntent</code> - The next action is to determine the intent that the user wants to fulfill.</p> </li> <li> <p> <code>ElicitSlot</code> - The next action is to elicit a slot value from the user.</p> </li> </ul>"
                  }
                ]
              },
              "intentName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/IntentName"
                  },
                  {
                    "description": "The name of the intent."
                  }
                ]
              },
              "slots": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StringMap"
                  },
                  {
                    "description": "Map of the slots that have been gathered and their values. "
                  }
                ]
              },
              "slotToElicit": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The name of the slot that should be elicited from the user."
                  }
                ]
              },
              "fulfillmentState": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FulfillmentState"
                  },
                  {
                    "description": "<p>The fulfillment state of the intent. The possible values are:</p> <ul> <li> <p> <code>Failed</code> - The Lambda function associated with the intent failed to fulfill the intent.</p> </li> <li> <p> <code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated with the intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.</p> </li> </ul>"
                  }
                ]
              },
              "message": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Text"
                  },
                  {
                    "description": "The message that should be shown to the user. If you don't specify a message, Amazon Lex will use the message configured for the intent."
                  }
                ]
              },
              "messageFormat": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageFormatType"
                  },
                  {
                    "description": "<ul> <li> <p> <code>PlainText</code> - The message contains plain UTF-8 text.</p> </li> <li> <p> <code>CustomPayload</code> - The message is a custom format for the client.</p> </li> <li> <p> <code>SSML</code> - The message contains text formatted for voice output.</p> </li> <li> <p> <code>Composite</code> - The message contains an escaped JSON object containing one or more messages. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\">Message Groups</a>. </p> </li> </ul>"
                  }
                ]
              }
            }
          },
          "recentIntentSummaryView": {
            "description": "<p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p> <p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/IntentSummary"
            },
            "minItems": 0,
            "maxItems": 3
          },
          "activeContexts": {
            "description": "<p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ActiveContext"
            },
            "minItems": 0,
            "maxItems": 20
          }
        }
      }
    },
    "required": [
      "botName",
      "botAlias",
      "userId",
      "body"
    ],
    "$defs": {
      "String": {
        "type": "string"
      },
      "DialogActionType": {
        "type": "string",
        "enum": [
          "ElicitIntent",
          "ConfirmIntent",
          "ElicitSlot",
          "Close",
          "Delegate"
        ]
      },
      "IntentName": {
        "type": "string"
      },
      "StringMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "FulfillmentState": {
        "type": "string",
        "enum": [
          "Fulfilled",
          "Failed",
          "ReadyForFulfillment"
        ]
      },
      "Text": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "format": "password"
      },
      "MessageFormatType": {
        "type": "string",
        "enum": [
          "PlainText",
          "CustomPayload",
          "SSML",
          "Composite"
        ]
      },
      "IntentSummary": {
        "type": "object",
        "required": [
          "dialogActionType"
        ],
        "properties": {
          "intentName": {
            "allOf": [
              {
                "$ref": "#/$defs/IntentName"
              },
              {
                "description": "The name of the intent."
              }
            ]
          },
          "checkpointLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/IntentSummaryCheckpointLabel"
              },
              {
                "description": "<p>A user-defined label that identifies a particular intent. You can use this label to return to a previous intent. </p> <p>Use the <code>checkpointLabelFilter</code> parameter of the <code>GetSessionRequest</code> operation to filter the intents returned by the operation to those with only the specified label.</p>"
              }
            ]
          },
          "slots": {
            "allOf": [
              {
                "$ref": "#/$defs/StringMap"
              },
              {
                "description": "Map of the slots that have been gathered and their values. "
              }
            ]
          },
          "confirmationStatus": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfirmationStatus"
              },
              {
                "description": "<p>The status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to <code>Confirmed</code>. If the user denies the intent, Amazon Lex sets this value to <code>Denied</code>. The possible values are:</p> <ul> <li> <p> <code>Confirmed</code> - The user has responded \"Yes\" to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.</p> </li> <li> <p> <code>Denied</code> - The user has responded \"No\" to the confirmation prompt.</p> </li> <li> <p> <code>None</code> - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.</p> </li> </ul>"
              }
            ]
          },
          "dialogActionType": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogActionType"
              },
              {
                "description": "<p>The next action that the bot should take in its interaction with the user. The possible values are:</p> <ul> <li> <p> <code>ConfirmIntent</code> - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"</p> </li> <li> <p> <code>Close</code> - Indicates that the there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.</p> </li> <li> <p> <code>ElicitIntent</code> - The next action is to determine the intent that the user wants to fulfill.</p> </li> <li> <p> <code>ElicitSlot</code> - The next action is to elicit a slot value from the user.</p> </li> </ul>"
              }
            ]
          },
          "fulfillmentState": {
            "allOf": [
              {
                "$ref": "#/$defs/FulfillmentState"
              },
              {
                "description": "<p>The fulfillment state of the intent. The possible values are:</p> <ul> <li> <p> <code>Failed</code> - The Lambda function associated with the intent failed to fulfill the intent.</p> </li> <li> <p> <code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated with the intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.</p> </li> </ul>"
              }
            ]
          },
          "slotToElicit": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The next slot to elicit from the user. If there is not slot to elicit, the field is blank."
              }
            ]
          }
        },
        "description": "Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state."
      },
      "IntentSummaryCheckpointLabel": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]+",
        "minLength": 1,
        "maxLength": 255
      },
      "ConfirmationStatus": {
        "type": "string",
        "enum": [
          "None",
          "Confirmed",
          "Denied"
        ]
      },
      "ActiveContext": {
        "type": "object",
        "required": [
          "name",
          "timeToLive",
          "parameters"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextName"
              },
              {
                "description": "The name of the context."
              }
            ]
          },
          "timeToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTimeToLive"
              },
              {
                "description": "The length of time or number of turns that a context remains active."
              }
            ]
          },
          "parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextParametersMap"
              },
              {
                "description": "State variables for the current context. You can use these values as default values for slots in subsequent events."
              }
            ]
          }
        },
        "description": "A context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the <code>PutContent</code>, <code>PutText</code>, or <code>PutSession</code> operation."
      },
      "ActiveContextName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "ActiveContextTimeToLive": {
        "type": "object",
        "properties": {
          "timeToLiveInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTimeToLiveInSeconds"
              },
              {
                "description": "The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours)."
              }
            ]
          },
          "turnsToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTurnsToLive"
              },
              {
                "description": "The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex."
              }
            ]
          }
        },
        "description": "The length of time or number of turns that a context remains active."
      },
      "ActiveContextTimeToLiveInSeconds": {
        "type": "integer",
        "minimum": 5,
        "maximum": 86400
      },
      "ActiveContextTurnsToLive": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "ActiveContextParametersMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 10,
        "additionalProperties": {
          "$ref": "#/$defs/Text"
        }
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://runtime.lex.us-east-1.amazonaws.com/bot/{botName}/alias/{botAlias}/user/{userId}/session"
    },
    "headers": {
      "Accept": {
        "$": "Accept"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**audioStream**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
