{
  "name": "CreateServiceTemplateVersion",
  "description": "Create a new major or minor version of a service template. A major version of a service template is a version that <i>isn't</i> backward compatible. A minor version of a service template is a version that's backward compatible within its major version.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AwsProton20200720.CreateServiceTemplateVersion"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateServiceTemplateVersionInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateServiceTemplateVersionInput": {
        "type": "object",
        "required": [
          "compatibleEnvironmentTemplates",
          "source",
          "templateName"
        ],
        "title": "CreateServiceTemplateVersionInput",
        "properties": {
          "clientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientToken"
              },
              {
                "description": "When included, if two identical requests are made with the same client token, Proton returns the service template version that the first request created."
              }
            ]
          },
          "compatibleEnvironmentTemplates": {
            "allOf": [
              {
                "$ref": "#/$defs/CompatibleEnvironmentTemplateInputList"
              },
              {
                "description": "An array of environment template objects that are compatible with the new service template version. A service instance based on this service template version can run in environments based on compatible templates."
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A description of the new version of a service template."
              }
            ]
          },
          "majorVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/TemplateVersionPart"
              },
              {
                "description": "<p>To create a new minor version of the service template, include a <code>major Version</code>.</p> <p>To create a new major and minor version of the service template, <i>exclude</i> <code>major Version</code>.</p>"
              }
            ]
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/$defs/TemplateVersionSourceInput"
              },
              {
                "description": "An object that includes the template bundle S3 bucket path and name for the new version of a service template."
              }
            ]
          },
          "supportedComponentSources": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceTemplateSupportedComponentSourceInputList"
              },
              {
                "description": "<p>An array of supported component sources. Components with supported sources can be attached to service instances based on this service template version.</p> <p>For more information about components, see <a href=\"https://docs.aws.amazon.com/proton/latest/userguide/ag-components.html\">Proton components</a> in the <i>Proton User Guide</i>.</p>"
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "<p>An optional list of metadata items that you can associate with the Proton service template version. A tag is a key-value pair.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/proton/latest/userguide/resources.html\">Proton resources and tagging</a> in the <i>Proton User Guide</i>.</p>"
              }
            ]
          },
          "templateName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "The name of the service template."
              }
            ]
          }
        }
      },
      "ClientToken": {
        "type": "string",
        "pattern": "^[!-~]*$",
        "minLength": 0,
        "maxLength": 64
      },
      "CompatibleEnvironmentTemplateInputList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CompatibleEnvironmentTemplateInput"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "CompatibleEnvironmentTemplateInput": {
        "type": "object",
        "required": [
          "majorVersion",
          "templateName"
        ],
        "properties": {
          "majorVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/TemplateVersionPart"
              },
              {
                "description": "The major version of the compatible environment template."
              }
            ]
          },
          "templateName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "The compatible environment template name."
              }
            ]
          }
        },
        "description": "Compatible environment template data."
      },
      "TemplateVersionPart": {
        "type": "string",
        "pattern": "^(0|([1-9]{1}\\d*))$",
        "minLength": 1,
        "maxLength": 20
      },
      "ResourceName": {
        "type": "string",
        "pattern": "^[0-9A-Za-z]+[0-9A-Za-z_\\-]*$",
        "minLength": 1,
        "maxLength": 100
      },
      "Description": {
        "type": "string",
        "minLength": 0,
        "maxLength": 500,
        "format": "password"
      },
      "TemplateVersionSourceInput": {
        "type": "object",
        "properties": {
          "s3": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectSource"
              },
              {
                "description": "An S3 source object that includes the template bundle S3 path and name for a template minor version."
              }
            ]
          }
        },
        "description": "Template version source data."
      },
      "S3ObjectSource": {
        "type": "object",
        "required": [
          "bucket",
          "key"
        ],
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The name of the S3 bucket that contains a template bundle."
              }
            ]
          },
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Key"
              },
              {
                "description": "The path to the S3 bucket that contains a template bundle."
              }
            ]
          }
        },
        "description": "Template bundle S3 bucket data."
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[a-z0-9]+[a-z0-9-\\.]+[a-z0-9]+$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Key": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ServiceTemplateSupportedComponentSourceInputList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ServiceTemplateSupportedComponentSourceType"
        }
      },
      "ServiceTemplateSupportedComponentSourceType": {
        "type": "string",
        "enum": [
          "DIRECTLY_DEFINED"
        ]
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key of the resource tag."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the resource tag."
              }
            ]
          }
        },
        "description": "A description of a resource tag."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://proton.us-east-1.amazonaws.com/#X-Amz-Target=AwsProton20200720.CreateServiceTemplateVersion"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**serviceTemplateVersion**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
