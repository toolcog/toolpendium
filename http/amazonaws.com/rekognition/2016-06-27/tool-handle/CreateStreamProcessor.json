{
  "name": "CreateStreamProcessor",
  "description": "<p>Creates an Amazon Rekognition stream processor that you can use to detect and recognize faces or to detect labels in a streaming video.</p> <p>Amazon Rekognition Video is a consumer of live video from Amazon Kinesis Video Streams. There are two different settings for stream processors in Amazon Rekognition: detecting faces and detecting labels.</p> <ul> <li> <p>If you are creating a stream processor for detecting faces, you provide as input a Kinesis video stream (<code>Input</code>) and a Kinesis data stream (<code>Output</code>) stream for receiving the output. You must use the <code>FaceSearch</code> option in <code>Settings</code>, specifying the collection that contains the faces you want to recognize. After you have finished analyzing a streaming video, use <a>StopStreamProcessor</a> to stop processing.</p> </li> <li> <p>If you are creating a stream processor to detect labels, you provide as input a Kinesis video stream (<code>Input</code>), Amazon S3 bucket information (<code>Output</code>), and an Amazon SNS topic ARN (<code>NotificationChannel</code>). You can also provide a KMS key ID to encrypt the data sent to your Amazon S3 bucket. You specify what you want to detect by using the <code>ConnectedHome</code> option in settings, and selecting one of the following: <code>PERSON</code>, <code>PET</code>, <code>PACKAGE</code>, <code>ALL</code> You can also specify where in the frame you want Amazon Rekognition to monitor with <code>RegionsOfInterest</code>. When you run the <a>StartStreamProcessor</a> operation on a label detection stream processor, you input start and stop information to determine the length of the processing time.</p> </li> </ul> <p> Use <code>Name</code> to assign an identifier for the stream processor. You use <code>Name</code> to manage the stream processor. For example, you can start processing the source video by calling <a>StartStreamProcessor</a> with the <code>Name</code> field. </p> <p>This operation requires permissions to perform the <code>rekognition:CreateStreamProcessor</code> action. If you want to tag your stream processor, you also require permission to perform the <code>rekognition:TagResource</code> operation.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "RekognitionService.CreateStreamProcessor"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateStreamProcessorRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateStreamProcessorRequest": {
        "type": "object",
        "required": [
          "Input",
          "Output",
          "Name",
          "Settings",
          "RoleArn"
        ],
        "title": "CreateStreamProcessorRequest",
        "properties": {
          "Input": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessorInput"
              },
              {
                "description": "Kinesis video stream stream that provides the source streaming video. If you are using the AWS CLI, the parameter name is <code>StreamProcessorInput</code>. This is required for both face search and label detection stream processors."
              }
            ]
          },
          "Output": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessorOutput"
              },
              {
                "description": "Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. If you are using the AWS CLI, the parameter name is <code>StreamProcessorOutput</code>. This must be a <a>S3Destination</a> of an Amazon S3 bucket that you own for a label detection stream processor or a Kinesis data stream ARN for a face search stream processor."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessorName"
              },
              {
                "description": "An identifier you assign to the stream processor. You can use <code>Name</code> to manage the stream processor. For example, you can get the current status of the stream processor by calling <a>DescribeStreamProcessor</a>. <code>Name</code> is idempotent. This is required for both face search and label detection stream processors. "
              }
            ]
          },
          "Settings": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessorSettings"
              },
              {
                "description": "Input parameters used in a streaming video analyzed by a stream processor. You can use <code>FaceSearch</code> to recognize faces in a streaming video, or you can use <code>ConnectedHome</code> to detect labels."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagMap"
              },
              {
                "description": " A set of tags (key-value pairs) that you want to attach to the stream processor. "
              }
            ]
          },
          "NotificationChannel": {
            "$ref": "#/$defs/StreamProcessorNotificationChannel"
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p> The identifier for your AWS Key Management Service key (AWS KMS key). This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor. You can supply the Amazon Resource Name (ARN) of your KMS key, the ID of your KMS key, an alias for your KMS key, or an alias ARN. The key is used to encrypt results and data published to your Amazon S3 bucket, which includes image frames and hero images. Your source images are unaffected. </p> <p> </p>"
              }
            ]
          },
          "RegionsOfInterest": {
            "allOf": [
              {
                "$ref": "#/$defs/RegionsOfInterest"
              },
              {
                "description": " Specifies locations in the frames where Amazon Rekognition checks for objects or people. You can specify up to 10 regions of interest, and each region has either a polygon or a bounding box. This is an optional parameter for label detection stream processors and should not be used to create a face search stream processor. "
              }
            ]
          },
          "DataSharingPreference": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessorDataSharingPreference"
              },
              {
                "description": " Shows whether you are sharing data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams. "
              }
            ]
          }
        }
      },
      "StreamProcessorInput": {
        "type": "object",
        "properties": {
          "KinesisVideoStream": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisVideoStream"
              },
              {
                "description": "The Kinesis video stream input stream for the source streaming video."
              }
            ]
          }
        },
        "description": "Information about the source streaming video. "
      },
      "KinesisVideoStream": {
        "type": "object",
        "properties": {
          "Arn": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisVideoArn"
              },
              {
                "description": "ARN of the Kinesis video stream stream that streams the source video."
              }
            ]
          }
        },
        "description": "Kinesis video stream stream that provides the source streaming video for a Amazon Rekognition Video stream processor. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide."
      },
      "KinesisVideoArn": {
        "type": "string",
        "pattern": "(^arn:([a-z\\d-]+):kinesisvideo:([a-z\\d-]+):\\d{12}:.+$)"
      },
      "StreamProcessorOutput": {
        "type": "object",
        "properties": {
          "KinesisDataStream": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisDataStream"
              },
              {
                "description": "The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results."
              }
            ]
          },
          "S3Destination": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Destination"
              },
              {
                "description": " The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation. "
              }
            ]
          }
        },
        "description": "Information about the Amazon Kinesis Data Streams stream to which a Amazon Rekognition Video stream processor streams the results of a video analysis. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide."
      },
      "KinesisDataStream": {
        "type": "object",
        "properties": {
          "Arn": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisDataArn"
              },
              {
                "description": "ARN of the output Amazon Kinesis Data Streams stream."
              }
            ]
          }
        },
        "description": "The Kinesis data stream Amazon Rekognition to which the analysis results of a Amazon Rekognition stream processor are streamed. For more information, see CreateStreamProcessor in the Amazon Rekognition Developer Guide."
      },
      "KinesisDataArn": {
        "type": "string",
        "pattern": "(^arn:([a-z\\d-]+):kinesis:([a-z\\d-]+):\\d{12}:.+$)"
      },
      "S3Destination": {
        "type": "object",
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": " The name of the Amazon S3 bucket you want to associate with the streaming video project. You must be the owner of the Amazon S3 bucket. "
              }
            ]
          },
          "KeyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3KeyPrefix"
              },
              {
                "description": " The prefix value of the location within the bucket that you want the information to be published to. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html\">Using prefixes</a>. "
              }
            ]
          }
        },
        "description": " The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation. These results include the name of the stream processor resource, the session ID of the stream processing session, and labeled timestamps and bounding boxes for detected labels. "
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "[0-9A-Za-z\\.\\-_]*",
        "minLength": 3,
        "maxLength": 255
      },
      "S3KeyPrefix": {
        "type": "string",
        "maxLength": 1024
      },
      "StreamProcessorName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.\\-]+",
        "minLength": 1,
        "maxLength": 128
      },
      "StreamProcessorSettings": {
        "type": "object",
        "properties": {
          "FaceSearch": {
            "allOf": [
              {
                "$ref": "#/$defs/FaceSearchSettings"
              },
              {
                "description": "Face search settings to use on a streaming video. "
              }
            ]
          },
          "ConnectedHome": {
            "$ref": "#/$defs/ConnectedHomeSettings"
          }
        },
        "description": "Input parameters used in a streaming video analyzed by a Amazon Rekognition stream processor. You can use <code>FaceSearch</code> to recognize faces in a streaming video, or you can use <code>ConnectedHome</code> to detect labels. "
      },
      "FaceSearchSettings": {
        "type": "object",
        "properties": {
          "CollectionId": {
            "allOf": [
              {
                "$ref": "#/$defs/CollectionId"
              },
              {
                "description": "The ID of a collection that contains faces that you want to search for."
              }
            ]
          },
          "FaceMatchThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/Percent"
              },
              {
                "description": "Minimum face match confidence score that must be met to return a result for a recognized face. The default is 80. 0 is the lowest confidence. 100 is the highest confidence. Values between 0 and 100 are accepted, and values lower than 80 are set to 80."
              }
            ]
          }
        },
        "description": "Input face recognition parameters for an Amazon Rekognition stream processor. Includes the collection to use for face recognition and the face attributes to detect. Defining the settings is required in the request parameter for <a>CreateStreamProcessor</a>."
      },
      "CollectionId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.\\-]+",
        "minLength": 1,
        "maxLength": 255
      },
      "Percent": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 100
      },
      "ConnectedHomeSettings": {
        "type": "object",
        "required": [
          "Labels"
        ],
        "properties": {
          "Labels": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectedHomeLabels"
              },
              {
                "description": " Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: \"PERSON\", \"PET\", \"PACKAGE\", and \"ALL\". "
              }
            ]
          },
          "MinConfidence": {
            "allOf": [
              {
                "$ref": "#/$defs/Percent"
              },
              {
                "description": " The minimum confidence required to label an object in the video. "
              }
            ]
          }
        },
        "description": " Label detection settings to use on a streaming video. Defining the settings is required in the request parameter for <a>CreateStreamProcessor</a>. Including this setting in the <code>CreateStreamProcessor</code> request enables you to use the stream processor for label detection. You can then select what you want the stream processor to detect, such as people or pets. When the stream processor has started, one notification is sent for each object class specified. For example, if packages and pets are selected, one SNS notification is published the first time a package is detected and one SNS notification is published the first time a pet is detected, as well as an end-of-session summary. "
      },
      "ConnectedHomeLabels": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ConnectedHomeLabel"
        },
        "minItems": 1,
        "maxItems": 128
      },
      "ConnectedHomeLabel": {
        "type": "string"
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+"
      },
      "TagMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 200,
        "additionalProperties": {
          "$ref": "#/$defs/TagValue"
        }
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      },
      "StreamProcessorNotificationChannel": {
        "type": "object",
        "required": [
          "SNSTopicArn"
        ],
        "properties": {
          "SNSTopicArn": {
            "allOf": [
              {
                "$ref": "#/$defs/SNSTopicArn"
              },
              {
                "description": " The Amazon Resource Number (ARN) of the Amazon Amazon Simple Notification Service topic to which Amazon Rekognition posts the completion status. "
              }
            ]
          }
        },
        "description": "<p>The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the object detection results and completion status of a video analysis operation.</p> <p>Amazon Rekognition publishes a notification the first time an object of interest or a person is detected in the video stream. For example, if Amazon Rekognition detects a person at second 2, a pet at second 4, and a person again at second 5, Amazon Rekognition sends 2 object class detected notifications, one for a person at second 2 and one for a pet at second 4.</p> <p>Amazon Rekognition also publishes an an end-of-session notification with a summary when the stream processing session is complete.</p>"
      },
      "SNSTopicArn": {
        "type": "string",
        "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)"
      },
      "KmsKeyId": {
        "type": "string",
        "pattern": "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$",
        "minLength": 1,
        "maxLength": 2048
      },
      "RegionsOfInterest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RegionOfInterest"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "RegionOfInterest": {
        "type": "object",
        "properties": {
          "BoundingBox": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBox"
              },
              {
                "description": "The box representing a region of interest on screen."
              }
            ]
          },
          "Polygon": {
            "allOf": [
              {
                "$ref": "#/$defs/Polygon"
              },
              {
                "description": " Specifies a shape made up of up to 10 <code>Point</code> objects to define a region of interest. "
              }
            ]
          }
        },
        "description": "<p>Specifies a location within the frame that Rekognition checks for objects of interest such as text, labels, or faces. It uses a <code>BoundingBox</code> or <code>Polygon</code> to set a region of the screen.</p> <p>A word, face, or label is included in the region if it is more than half in that region. If there is more than one region, the word, face, or label is compared with all regions of the screen. Any object of interest that is more than half in a region is kept in the results.</p>"
      },
      "BoundingBox": {
        "type": "object",
        "properties": {
          "Width": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Width of the bounding box as a ratio of the overall image width."
              }
            ]
          },
          "Height": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Height of the bounding box as a ratio of the overall image height."
              }
            ]
          },
          "Left": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Left coordinate of the bounding box as a ratio of overall image width."
              }
            ]
          },
          "Top": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Top coordinate of the bounding box as a ratio of overall image height."
              }
            ]
          }
        },
        "description": "<p>Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the <code>left</code> or <code>top</code> values. </p> </note>"
      },
      "Float": {
        "type": "number",
        "format": "float"
      },
      "Polygon": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Point"
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "X": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value of the X coordinate for a point on a <code>Polygon</code>."
              }
            ]
          },
          "Y": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value of the Y coordinate for a point on a <code>Polygon</code>."
              }
            ]
          }
        },
        "description": "<p>The X and Y coordinates of a point on an image or video frame. The X and Y values are ratios of the overall image size or video resolution. For example, if an input image is 700x200 and the values are X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</p> <p>An array of <code>Point</code> objects makes up a <code>Polygon</code>. A <code>Polygon</code> is returned by <a>DetectText</a> and by <a>DetectCustomLabels</a> <code>Polygon</code> represents a fine-grained polygon around a detected item. For more information, see Geometry in the Amazon Rekognition Developer Guide. </p>"
      },
      "StreamProcessorDataSharingPreference": {
        "type": "object",
        "required": [
          "OptIn"
        ],
        "properties": {
          "OptIn": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " If this option is set to true, you choose to share data with Rekognition to improve model performance. "
              }
            ]
          }
        },
        "description": " Allows you to opt in or opt out to share data with Rekognition to improve model performance. You can choose this option at the account level or on a per-stream basis. Note that if you opt out at the account level this setting is ignored on individual streams. "
      },
      "Boolean": {
        "type": "boolean"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rekognition.us-east-1.amazonaws.com/#X-Amz-Target=RekognitionService.CreateStreamProcessor"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**StreamProcessorArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
