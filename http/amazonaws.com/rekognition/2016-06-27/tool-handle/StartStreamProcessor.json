{
  "name": "StartStreamProcessor",
  "description": "<p>Starts processing a stream processor. You create a stream processor by calling <a>CreateStreamProcessor</a>. To tell <code>StartStreamProcessor</code> which stream processor to start, use the value of the <code>Name</code> field specified in the call to <code>CreateStreamProcessor</code>.</p> <p>If you are using a label detection stream processor to detect labels, you need to provide a <code>Start selector</code> and a <code>Stop selector</code> to determine the length of the stream processing time.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "RekognitionService.StartStreamProcessor"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartStreamProcessorRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartStreamProcessorRequest": {
        "type": "object",
        "required": [
          "Name"
        ],
        "title": "StartStreamProcessorRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessorName"
              },
              {
                "description": "The name of the stream processor to start processing."
              }
            ]
          },
          "StartSelector": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessingStartSelector"
              },
              {
                "description": "<p> Specifies the starting point in the Kinesis stream to start processing. You can use the producer timestamp or the fragment number. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html\">Fragment</a>. </p> <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>"
              }
            ]
          },
          "StopSelector": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamProcessingStopSelector"
              },
              {
                "description": "<p> Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. </p> <p>This is a required parameter for label detection stream processors and should not be used to start a face search stream processor.</p>"
              }
            ]
          }
        }
      },
      "StreamProcessorName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.\\-]+",
        "minLength": 1,
        "maxLength": 128
      },
      "StreamProcessingStartSelector": {
        "type": "object",
        "properties": {
          "KVSStreamStartSelector": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisVideoStreamStartSelector"
              },
              {
                "description": " Specifies the starting point in the stream to start processing. This can be done with a producer timestamp or a fragment number in a Kinesis stream. "
              }
            ]
          }
        },
        "description": "This is a required parameter for label detection stream processors and should not be used to start a face search stream processor."
      },
      "KinesisVideoStreamStartSelector": {
        "type": "object",
        "properties": {
          "ProducerTimestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/ULong"
              },
              {
                "description": " The timestamp from the producer corresponding to the fragment, in milliseconds, expressed in unix time format. "
              }
            ]
          },
          "FragmentNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisVideoStreamFragmentNumber"
              },
              {
                "description": " The unique identifier of the fragment. This value monotonically increases based on the ingestion order. "
              }
            ]
          }
        },
        "description": "Specifies the starting point in a Kinesis stream to start processing. You can use the producer timestamp or the fragment number. One of either producer timestamp or fragment number is required. If you use the producer timestamp, you must put the time in milliseconds. For more information about fragment numbers, see <a href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_reader_Fragment.html\">Fragment</a>. "
      },
      "ULong": {
        "type": "integer",
        "minimum": 0
      },
      "KinesisVideoStreamFragmentNumber": {
        "type": "string",
        "pattern": "^[0-9]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "StreamProcessingStopSelector": {
        "type": "object",
        "properties": {
          "MaxDurationInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxDurationInSecondsULong"
              },
              {
                "description": " Specifies the maximum amount of time in seconds that you want the stream to be processed. The largest amount of time is 2 minutes. The default is 10 seconds. "
              }
            ]
          }
        },
        "description": " Specifies when to stop processing the stream. You can specify a maximum amount of time to process the video. "
      },
      "MaxDurationInSecondsULong": {
        "type": "integer",
        "minimum": 1,
        "maximum": 120
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rekognition.us-east-1.amazonaws.com/#X-Amz-Target=RekognitionService.StartStreamProcessor"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**SessionId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
