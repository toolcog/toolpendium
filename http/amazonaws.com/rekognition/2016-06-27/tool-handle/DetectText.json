{
  "name": "DetectText",
  "description": "<p>Detects text in the input image and converts it into machine-readable text.</p> <p>Pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. If you use the AWS CLI to call Amazon Rekognition operations, you must pass it as a reference to an image in an Amazon S3 bucket. For the AWS CLI, passing image bytes is not supported. The image must be either a .png or .jpeg formatted file. </p> <p>The <code>DetectText</code> operation returns text in an array of <a>TextDetection</a> elements, <code>TextDetections</code>. Each <code>TextDetection</code> element provides information about a single word or line of text that was detected in the image. </p> <p>A word is one or more script characters that are not separated by spaces. <code>DetectText</code> can detect up to 100 words in an image.</p> <p>A line is a string of equally spaced words. A line isn't necessarily a complete sentence. For example, a driver's license number is detected as a line. A line ends when there is no aligned text after it. Also, a line ends when there is a large gap between words, relative to the length of the words. This means, depending on the gap between words, Amazon Rekognition may detect multiple lines in text aligned in the same direction. Periods don't represent the end of a line. If a sentence spans multiple lines, the <code>DetectText</code> operation returns multiple lines.</p> <p>To determine whether a <code>TextDetection</code> element is a line of text or a word, use the <code>TextDetection</code> object <code>Type</code> field. </p> <p>To be detected, text must be within +/- 90 degrees orientation of the horizontal axis.</p> <p>For more information, see Detecting text in the Amazon Rekognition Developer Guide.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "RekognitionService.DetectText"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/DetectTextRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "DetectTextRequest": {
        "type": "object",
        "required": [
          "Image"
        ],
        "title": "DetectTextRequest",
        "properties": {
          "Image": {
            "allOf": [
              {
                "$ref": "#/$defs/Image"
              },
              {
                "description": "<p>The input image as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Rekognition operations, you can't pass image bytes. </p> <p>If you are using an AWS SDK to call Amazon Rekognition, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. For more information, see Images in the Amazon Rekognition developer guide.</p>"
              }
            ]
          },
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/DetectTextFilters"
              },
              {
                "description": "Optional parameters that let you set the criteria that the text must meet to be included in your response."
              }
            ]
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "Bytes": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageBlob"
              },
              {
                "description": "Blob of image bytes up to 5 MBs. Note that the maximum image size you can pass to <code>DetectCustomLabels</code> is 4MB. "
              }
            ]
          },
          "S3Object": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Object"
              },
              {
                "description": "Identifies an S3 object as the image source."
              }
            ]
          }
        },
        "description": "<p>Provides the input image either as bytes or an S3 object.</p> <p>You pass image bytes to an Amazon Rekognition API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass an image loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64-encoded. Your code may not need to encode image bytes if you are using an AWS SDK to call Amazon Rekognition API operations. </p> <p>For more information, see Analyzing an Image Loaded from a Local File System in the Amazon Rekognition Developer Guide.</p> <p> You pass images stored in an S3 bucket to an Amazon Rekognition API operation by using the <code>S3Object</code> property. Images stored in an S3 bucket do not need to be base64-encoded.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>If you use the AWS CLI to call Amazon Rekognition operations, passing image bytes using the Bytes property is not supported. You must first upload the image to an Amazon S3 bucket and then call the operation using the S3Object property.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>"
      },
      "ImageBlob": {
        "type": "string",
        "minLength": 1,
        "maxLength": 5242880
      },
      "S3Object": {
        "type": "object",
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "Name of the S3 bucket."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectName"
              },
              {
                "description": "S3 object key name."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectVersion"
              },
              {
                "description": "If the bucket is versioning enabled, you can specify the object version. "
              }
            ]
          }
        },
        "description": "<p>Provides the S3 bucket name and object name.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>"
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "[0-9A-Za-z\\.\\-_]*",
        "minLength": 3,
        "maxLength": 255
      },
      "S3ObjectName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "S3ObjectVersion": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DetectTextFilters": {
        "type": "object",
        "properties": {
          "WordFilter": {
            "$ref": "#/$defs/DetectionFilter"
          },
          "RegionsOfInterest": {
            "allOf": [
              {
                "$ref": "#/$defs/RegionsOfInterest"
              },
              {
                "description": " A Filter focusing on a certain area of the image. Uses a <code>BoundingBox</code> object to set the region of the image."
              }
            ]
          }
        },
        "description": "A set of optional parameters that you can use to set the criteria that the text must meet to be included in your response. <code>WordFilter</code> looks at a wordâ€™s height, width, and minimum confidence. <code>RegionOfInterest</code> lets you set a specific region of the image to look for text in. "
      },
      "DetectionFilter": {
        "type": "object",
        "properties": {
          "MinConfidence": {
            "allOf": [
              {
                "$ref": "#/$defs/Percent"
              },
              {
                "description": "Sets the confidence of word detection. Words with detection confidence below this will be excluded from the result. Values should be between 0 and 100. The default MinConfidence is 80."
              }
            ]
          },
          "MinBoundingBoxHeight": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBoxHeight"
              },
              {
                "description": "Sets the minimum height of the word bounding box. Words with bounding box heights lesser than this value will be excluded from the result. Value is relative to the video frame height."
              }
            ]
          },
          "MinBoundingBoxWidth": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBoxWidth"
              },
              {
                "description": "Sets the minimum width of the word bounding box. Words with bounding boxes widths lesser than this value will be excluded from the result. Value is relative to the video frame width."
              }
            ]
          }
        },
        "description": "A set of parameters that allow you to filter out certain results from your returned results."
      },
      "Percent": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 100
      },
      "BoundingBoxHeight": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 1
      },
      "BoundingBoxWidth": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 1
      },
      "RegionsOfInterest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RegionOfInterest"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "RegionOfInterest": {
        "type": "object",
        "properties": {
          "BoundingBox": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBox"
              },
              {
                "description": "The box representing a region of interest on screen."
              }
            ]
          },
          "Polygon": {
            "allOf": [
              {
                "$ref": "#/$defs/Polygon"
              },
              {
                "description": " Specifies a shape made up of up to 10 <code>Point</code> objects to define a region of interest. "
              }
            ]
          }
        },
        "description": "<p>Specifies a location within the frame that Rekognition checks for objects of interest such as text, labels, or faces. It uses a <code>BoundingBox</code> or <code>Polygon</code> to set a region of the screen.</p> <p>A word, face, or label is included in the region if it is more than half in that region. If there is more than one region, the word, face, or label is compared with all regions of the screen. Any object of interest that is more than half in a region is kept in the results.</p>"
      },
      "BoundingBox": {
        "type": "object",
        "properties": {
          "Width": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Width of the bounding box as a ratio of the overall image width."
              }
            ]
          },
          "Height": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Height of the bounding box as a ratio of the overall image height."
              }
            ]
          },
          "Left": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Left coordinate of the bounding box as a ratio of overall image width."
              }
            ]
          },
          "Top": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Top coordinate of the bounding box as a ratio of overall image height."
              }
            ]
          }
        },
        "description": "<p>Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the <code>left</code> or <code>top</code> values. </p> </note>"
      },
      "Float": {
        "type": "number",
        "format": "float"
      },
      "Polygon": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Point"
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "X": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value of the X coordinate for a point on a <code>Polygon</code>."
              }
            ]
          },
          "Y": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value of the Y coordinate for a point on a <code>Polygon</code>."
              }
            ]
          }
        },
        "description": "<p>The X and Y coordinates of a point on an image or video frame. The X and Y values are ratios of the overall image size or video resolution. For example, if an input image is 700x200 and the values are X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</p> <p>An array of <code>Point</code> objects makes up a <code>Polygon</code>. A <code>Polygon</code> is returned by <a>DetectText</a> and by <a>DetectCustomLabels</a> <code>Polygon</code> represents a fine-grained polygon around a detected item. For more information, see Geometry in the Amazon Rekognition Developer Guide. </p>"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rekognition.us-east-1.amazonaws.com/#X-Amz-Target=RekognitionService.DetectText"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**TextDetections**",
            "**TextModelVersion**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
