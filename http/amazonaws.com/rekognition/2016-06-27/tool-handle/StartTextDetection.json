{
  "name": "StartTextDetection",
  "description": "<p>Starts asynchronous detection of text in a stored video.</p> <p>Amazon Rekognition Video can detect text in a video stored in an Amazon S3 bucket. Use <a>Video</a> to specify the bucket name and the filename of the video. <code>StartTextDetection</code> returns a job identifier (<code>JobId</code>) which you use to get the results of the operation. When text detection is finished, Amazon Rekognition Video publishes a completion status to the Amazon Simple Notification Service topic that you specify in <code>NotificationChannel</code>.</p> <p>To get the results of the text detection operation, first check that the status value published to the Amazon SNS topic is <code>SUCCEEDED</code>. if so, call <a>GetTextDetection</a> and pass the job identifier (<code>JobId</code>) from the initial call to <code>StartTextDetection</code>. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "RekognitionService.StartTextDetection"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartTextDetectionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartTextDetectionRequest": {
        "type": "object",
        "required": [
          "Video"
        ],
        "title": "StartTextDetectionRequest",
        "properties": {
          "Video": {
            "$ref": "#/$defs/Video"
          },
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientRequestToken"
              },
              {
                "description": "Idempotent token used to identify the start request. If you use the same token with multiple <code>StartTextDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentaly started more than once."
              }
            ]
          },
          "NotificationChannel": {
            "$ref": "#/$defs/NotificationChannel"
          },
          "JobTag": {
            "allOf": [
              {
                "$ref": "#/$defs/JobTag"
              },
              {
                "description": "An identifier returned in the completion status published by your Amazon Simple Notification Service topic. For example, you can use <code>JobTag</code> to group related jobs and identify them in the completion notification."
              }
            ]
          },
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/StartTextDetectionFilters"
              },
              {
                "description": "Optional parameters that let you set criteria the text must meet to be included in your response."
              }
            ]
          }
        }
      },
      "Video": {
        "type": "object",
        "properties": {
          "S3Object": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Object"
              },
              {
                "description": "The Amazon S3 bucket name and file name for the video."
              }
            ]
          }
        },
        "description": "Video file stored in an Amazon S3 bucket. Amazon Rekognition video start operations such as <a>StartLabelDetection</a> use <code>Video</code> to specify a video for analysis. The supported file formats are .mp4, .mov and .avi."
      },
      "S3Object": {
        "type": "object",
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "Name of the S3 bucket."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectName"
              },
              {
                "description": "S3 object key name."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectVersion"
              },
              {
                "description": "If the bucket is versioning enabled, you can specify the object version. "
              }
            ]
          }
        },
        "description": "<p>Provides the S3 bucket name and object name.</p> <p>The region for the S3 bucket containing the S3 object must match the region you use for Amazon Rekognition operations.</p> <p>For Amazon Rekognition to process an S3 object, the user must have permission to access the S3 object. For more information, see How Amazon Rekognition works with IAM in the Amazon Rekognition Developer Guide. </p>"
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "[0-9A-Za-z\\.\\-_]*",
        "minLength": 3,
        "maxLength": 255
      },
      "S3ObjectName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "S3ObjectVersion": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ClientRequestToken": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-_]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "NotificationChannel": {
        "type": "object",
        "required": [
          "SNSTopicArn",
          "RoleArn"
        ],
        "properties": {
          "SNSTopicArn": {
            "allOf": [
              {
                "$ref": "#/$defs/SNSTopicArn"
              },
              {
                "description": "The Amazon SNS topic to which Amazon Rekognition posts the completion status."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The ARN of an IAM role that gives Amazon Rekognition publishing permissions to the Amazon SNS topic. "
              }
            ]
          }
        },
        "description": "The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status of a video analysis operation. For more information, see <a href=\"https://docs.aws.amazon.com/rekognition/latest/dg/api-video.html\">Calling Amazon Rekognition Video operations</a>. Note that the Amazon SNS topic must have a topic name that begins with <i>AmazonRekognition</i> if you are using the AmazonRekognitionServiceRole permissions policy to access the topic. For more information, see <a href=\"https://docs.aws.amazon.com/rekognition/latest/dg/api-video-roles.html#api-video-roles-all-topics\">Giving access to multiple Amazon SNS topics</a>."
      },
      "SNSTopicArn": {
        "type": "string",
        "pattern": "(^arn:aws:sns:.*:\\w{12}:.+$)"
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+"
      },
      "JobTag": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.\\-:+=\\/]+",
        "minLength": 1,
        "maxLength": 1024
      },
      "StartTextDetectionFilters": {
        "type": "object",
        "properties": {
          "WordFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/DetectionFilter"
              },
              {
                "description": "Filters focusing on qualities of the text, such as confidence or size."
              }
            ]
          },
          "RegionsOfInterest": {
            "allOf": [
              {
                "$ref": "#/$defs/RegionsOfInterest"
              },
              {
                "description": "Filter focusing on a certain area of the frame. Uses a <code>BoundingBox</code> object to set the region of the screen."
              }
            ]
          }
        },
        "description": "Set of optional parameters that let you set the criteria text must meet to be included in your response. <code>WordFilter</code> looks at a word's height, width and minimum confidence. <code>RegionOfInterest</code> lets you set a specific region of the screen to look for text in."
      },
      "DetectionFilter": {
        "type": "object",
        "properties": {
          "MinConfidence": {
            "allOf": [
              {
                "$ref": "#/$defs/Percent"
              },
              {
                "description": "Sets the confidence of word detection. Words with detection confidence below this will be excluded from the result. Values should be between 0 and 100. The default MinConfidence is 80."
              }
            ]
          },
          "MinBoundingBoxHeight": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBoxHeight"
              },
              {
                "description": "Sets the minimum height of the word bounding box. Words with bounding box heights lesser than this value will be excluded from the result. Value is relative to the video frame height."
              }
            ]
          },
          "MinBoundingBoxWidth": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBoxWidth"
              },
              {
                "description": "Sets the minimum width of the word bounding box. Words with bounding boxes widths lesser than this value will be excluded from the result. Value is relative to the video frame width."
              }
            ]
          }
        },
        "description": "A set of parameters that allow you to filter out certain results from your returned results."
      },
      "Percent": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 100
      },
      "BoundingBoxHeight": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 1
      },
      "BoundingBoxWidth": {
        "type": "number",
        "format": "float",
        "minimum": 0,
        "maximum": 1
      },
      "RegionsOfInterest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RegionOfInterest"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "RegionOfInterest": {
        "type": "object",
        "properties": {
          "BoundingBox": {
            "allOf": [
              {
                "$ref": "#/$defs/BoundingBox"
              },
              {
                "description": "The box representing a region of interest on screen."
              }
            ]
          },
          "Polygon": {
            "allOf": [
              {
                "$ref": "#/$defs/Polygon"
              },
              {
                "description": " Specifies a shape made up of up to 10 <code>Point</code> objects to define a region of interest. "
              }
            ]
          }
        },
        "description": "<p>Specifies a location within the frame that Rekognition checks for objects of interest such as text, labels, or faces. It uses a <code>BoundingBox</code> or <code>Polygon</code> to set a region of the screen.</p> <p>A word, face, or label is included in the region if it is more than half in that region. If there is more than one region, the word, face, or label is compared with all regions of the screen. Any object of interest that is more than half in a region is kept in the results.</p>"
      },
      "BoundingBox": {
        "type": "object",
        "properties": {
          "Width": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Width of the bounding box as a ratio of the overall image width."
              }
            ]
          },
          "Height": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Height of the bounding box as a ratio of the overall image height."
              }
            ]
          },
          "Left": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Left coordinate of the bounding box as a ratio of overall image width."
              }
            ]
          },
          "Top": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Top coordinate of the bounding box as a ratio of overall image height."
              }
            ]
          }
        },
        "description": "<p>Identifies the bounding box around the label, face, text, object of interest, or personal protective equipment. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates representing the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall image size. For example, if the input image is 700x200 pixels, and the top-left coordinate of the bounding box is 350x50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p> <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall image dimension. For example, if the input image is 700x200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p> <note> <p> The bounding box coordinates can have negative values. For example, if Amazon Rekognition is able to detect a face that is at the image edge and is only partially visible, the service can return coordinates that are outside the image bounds and, depending on the image edge, you might get negative values or values greater than 1 for the <code>left</code> or <code>top</code> values. </p> </note>"
      },
      "Float": {
        "type": "number",
        "format": "float"
      },
      "Polygon": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Point"
        }
      },
      "Point": {
        "type": "object",
        "properties": {
          "X": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value of the X coordinate for a point on a <code>Polygon</code>."
              }
            ]
          },
          "Y": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value of the Y coordinate for a point on a <code>Polygon</code>."
              }
            ]
          }
        },
        "description": "<p>The X and Y coordinates of a point on an image or video frame. The X and Y values are ratios of the overall image size or video resolution. For example, if an input image is 700x200 and the values are X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the image.</p> <p>An array of <code>Point</code> objects makes up a <code>Polygon</code>. A <code>Polygon</code> is returned by <a>DetectText</a> and by <a>DetectCustomLabels</a> <code>Polygon</code> represents a fine-grained polygon around a detected item. For more information, see Geometry in the Amazon Rekognition Developer Guide. </p>"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rekognition.us-east-1.amazonaws.com/#X-Amz-Target=RekognitionService.StartTextDetection"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**JobId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
