{
  "name": "UpdateProvisionedProduct",
  "description": "<p>Requests updates to the configuration of the specified provisioned product.</p> <p>If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWS242ServiceCatalogService.UpdateProvisionedProduct"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateProvisionedProductInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateProvisionedProductInput": {
        "type": "object",
        "required": [
          "UpdateToken"
        ],
        "title": "UpdateProvisionedProductInput",
        "properties": {
          "AcceptLanguage": {
            "allOf": [
              {
                "$ref": "#/$defs/AcceptLanguage"
              },
              {
                "description": "<p>The language code.</p> <ul> <li> <p> <code>jp</code> - Japanese</p> </li> <li> <p> <code>zh</code> - Chinese</p> </li> </ul>"
              }
            ]
          },
          "ProvisionedProductName": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedProductNameOrArn"
              },
              {
                "description": "The name of the provisioned product. You cannot specify both <code>ProvisionedProductName</code> and <code>ProvisionedProductId</code>."
              }
            ]
          },
          "ProvisionedProductId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The identifier of the provisioned product. You must provide the name or ID, but not both."
              }
            ]
          },
          "ProductId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The identifier of the product. You must provide the name or ID, but not both."
              }
            ]
          },
          "ProductName": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductViewName"
              },
              {
                "description": "The name of the product. You must provide the name or ID, but not both."
              }
            ]
          },
          "ProvisioningArtifactId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The identifier of the provisioning artifact."
              }
            ]
          },
          "ProvisioningArtifactName": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisioningArtifactName"
              },
              {
                "description": "The name of the provisioning artifact. You must provide the name or ID, but not both."
              }
            ]
          },
          "PathId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The path identifier. This value is optional if the product has a default path, and required if the product has more than one path. You must provide the name or ID, but not both."
              }
            ]
          },
          "PathName": {
            "allOf": [
              {
                "$ref": "#/$defs/PortfolioDisplayName"
              },
              {
                "description": "The name of the path. You must provide the name or ID, but not both."
              }
            ]
          },
          "ProvisioningParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/UpdateProvisioningParameters"
              },
              {
                "description": "The new parameters."
              }
            ]
          },
          "ProvisioningPreferences": {
            "allOf": [
              {
                "$ref": "#/$defs/UpdateProvisioningPreferences"
              },
              {
                "description": "An object that contains information about the provisioning preferences for a stack set."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/Tags"
              },
              {
                "description": "One or more tags. Requires the product to have <code>RESOURCE_UPDATE</code> constraint with <code>TagUpdatesOnProvisionedProduct</code> set to <code>ALLOWED</code> to allow tag updates."
              }
            ]
          },
          "UpdateToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyToken"
              },
              {
                "description": "The idempotency token that uniquely identifies the provisioning update request."
              }
            ]
          }
        }
      },
      "AcceptLanguage": {
        "type": "string",
        "maxLength": 100
      },
      "ProvisionedProductNameOrArn": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9._-]{0,127}|arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
        "minLength": 1,
        "maxLength": 1224
      },
      "Id": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-]*",
        "minLength": 1,
        "maxLength": 100
      },
      "ProductViewName": {
        "type": "string",
        "maxLength": 8191
      },
      "ProvisioningArtifactName": {
        "type": "string",
        "maxLength": 8192
      },
      "PortfolioDisplayName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "UpdateProvisioningParameters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/UpdateProvisioningParameter"
        }
      },
      "UpdateProvisioningParameter": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterKey"
              },
              {
                "description": "The parameter key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValue"
              },
              {
                "description": "The parameter value."
              }
            ]
          },
          "UsePreviousValue": {
            "allOf": [
              {
                "$ref": "#/$defs/UsePreviousValue"
              },
              {
                "description": "If set to true, <code>Value</code> is ignored and the previous parameter value is kept."
              }
            ]
          }
        },
        "description": "The parameter key-value pair used to update a provisioned product."
      },
      "ParameterKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "ParameterValue": {
        "type": "string",
        "maxLength": 4096
      },
      "UsePreviousValue": {
        "type": "boolean"
      },
      "UpdateProvisioningPreferences": {
        "type": "object",
        "properties": {
          "StackSetAccounts": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetAccounts"
              },
              {
                "description": "<p>One or more Amazon Web Services accounts that will have access to the provisioned product.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>The Amazon Web Services accounts specified should be within the list of accounts in the <code>STACKSET</code> constraint. To get the list of accounts in the <code>STACKSET</code> constraint, use the <code>DescribeProvisioningParameters</code> operation.</p> <p>If no values are specified, the default value is all accounts from the <code>STACKSET</code> constraint.</p>"
              }
            ]
          },
          "StackSetRegions": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetRegions"
              },
              {
                "description": "<p>One or more Amazon Web Services Regions where the provisioned product will be available.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>The specified Regions should be within the list of Regions from the <code>STACKSET</code> constraint. To get the list of Regions in the <code>STACKSET</code> constraint, use the <code>DescribeProvisioningParameters</code> operation.</p> <p>If no values are specified, the default value is all Regions from the <code>STACKSET</code> constraint.</p>"
              }
            ]
          },
          "StackSetFailureToleranceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetFailureToleranceCount"
              },
              {
                "description": "<p>The number of accounts, per Region, for which this operation can fail before Service Catalog stops the operation in that Region. If the operation is stopped in a Region, Service Catalog doesn't attempt the operation in any subsequent Regions.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>Conditional: You must specify either <code>StackSetFailureToleranceCount</code> or <code>StackSetFailureTolerancePercentage</code>, but not both.</p> <p>The default value is <code>0</code> if no value is specified.</p>"
              }
            ]
          },
          "StackSetFailureTolerancePercentage": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetFailureTolerancePercentage"
              },
              {
                "description": "<p>The percentage of accounts, per Region, for which this stack operation can fail before Service Catalog stops the operation in that Region. If the operation is stopped in a Region, Service Catalog doesn't attempt the operation in any subsequent Regions.</p> <p>When calculating the number of accounts based on the specified percentage, Service Catalog rounds down to the next whole number.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>Conditional: You must specify either <code>StackSetFailureToleranceCount</code> or <code>StackSetFailureTolerancePercentage</code>, but not both.</p>"
              }
            ]
          },
          "StackSetMaxConcurrencyCount": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetMaxConcurrencyCount"
              },
              {
                "description": "<p>The maximum number of accounts in which to perform this operation at one time. This is dependent on the value of <code>StackSetFailureToleranceCount</code>. <code>StackSetMaxConcurrentCount</code> is at most one more than the <code>StackSetFailureToleranceCount</code>.</p> <p>Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>Conditional: You must specify either <code>StackSetMaxConcurrentCount</code> or <code>StackSetMaxConcurrentPercentage</code>, but not both.</p>"
              }
            ]
          },
          "StackSetMaxConcurrencyPercentage": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetMaxConcurrencyPercentage"
              },
              {
                "description": "<p>The maximum percentage of accounts in which to perform this operation at one time.</p> <p>When calculating the number of accounts based on the specified percentage, Service Catalog rounds down to the next whole number. This is true except in cases where rounding down would result is zero. In this case, Service Catalog sets the number as <code>1</code> instead.</p> <p>Note that this setting lets you specify the maximum for operations. For large deployments, under certain circumstances the actual number of accounts acted upon concurrently may be lower due to service throttling.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>Conditional: You must specify either <code>StackSetMaxConcurrentCount</code> or <code>StackSetMaxConcurrentPercentage</code>, but not both.</p>"
              }
            ]
          },
          "StackSetOperationType": {
            "allOf": [
              {
                "$ref": "#/$defs/StackSetOperationType"
              },
              {
                "description": "<p>Determines what action Service Catalog performs to a stack set or a stack instance represented by the provisioned product. The default value is <code>UPDATE</code> if nothing is specified.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <dl> <dt>CREATE</dt> <dd> <p>Creates a new stack instance in the stack set represented by the provisioned product. In this case, only new stack instances are created based on accounts and Regions; if new ProductId or ProvisioningArtifactID are passed, they will be ignored.</p> </dd> <dt>UPDATE</dt> <dd> <p>Updates the stack set represented by the provisioned product and also its stack instances.</p> </dd> <dt>DELETE</dt> <dd> <p>Deletes a stack instance in the stack set represented by the provisioned product.</p> </dd> </dl>"
              }
            ]
          }
        },
        "description": "The user-defined preferences that will be applied when updating a provisioned product. Not all preferences are applicable to all provisioned product types."
      },
      "StackSetAccounts": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AccountId"
        }
      },
      "AccountId": {
        "type": "string",
        "pattern": "^[0-9]{12}$"
      },
      "StackSetRegions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Region"
        }
      },
      "Region": {
        "type": "string"
      },
      "StackSetFailureToleranceCount": {
        "type": "integer",
        "minimum": 0
      },
      "StackSetFailureTolerancePercentage": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100
      },
      "StackSetMaxConcurrencyCount": {
        "type": "integer",
        "minimum": 1
      },
      "StackSetMaxConcurrencyPercentage": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100
      },
      "StackSetOperationType": {
        "type": "string",
        "enum": [
          "CREATE",
          "UPDATE",
          "DELETE"
        ]
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value for this key."
              }
            ]
          }
        },
        "description": "Information about a tag. A tag is a key-value pair. Tags are propagated to the resources created when provisioning a product."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 256
      },
      "IdempotencyToken": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://servicecatalog.us-east-1.amazonaws.com/#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProduct"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**RecordDetail**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
