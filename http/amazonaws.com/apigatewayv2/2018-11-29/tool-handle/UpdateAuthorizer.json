{
  "name": "UpdateAuthorizer",
  "description": "Updates an Authorizer.",
  "parameters": {
    "type": "object",
    "properties": {
      "apiId": {
        "type": "string",
        "description": "The API identifier."
      },
      "authorizerId": {
        "type": "string",
        "description": "The authorizer identifier."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "authorizerCredentialsArn": {
            "description": "Represents an Amazon Resource Name (ARN).",
            "type": "string"
          },
          "authorizerPayloadFormatVersion": {
            "description": "A string with a length between [1-64].",
            "type": "string"
          },
          "authorizerResultTtlInSeconds": {
            "description": "An integer with a value between [0-3600].",
            "type": "integer",
            "minimum": 0,
            "maximum": 3600
          },
          "authorizerType": {
            "description": "The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).",
            "type": "string",
            "enum": [
              "REQUEST",
              "JWT"
            ]
          },
          "authorizerUri": {
            "description": "A string representation of a URI with a length between [1-2048].",
            "type": "string"
          },
          "enableSimpleResponses": {
            "description": "Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\">Working with AWS Lambda authorizers for HTTP APIs</a>",
            "type": "boolean"
          },
          "identitySource": {
            "description": "The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/__string"
            }
          },
          "identityValidationExpression": {
            "description": "A string with a length between [0-1024].",
            "type": "string"
          },
          "jwtConfiguration": {
            "description": "Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.",
            "type": "object",
            "properties": {
              "Audience": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOf__string"
                  },
                  {
                    "xml": {
                      "name": "audience"
                    },
                    "description": "A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href=\"https://tools.ietf.org/html/rfc7519#section-4.1.3\">RFC 7519</a>. Supported only for HTTP APIs."
                  }
                ]
              },
              "Issuer": {
                "allOf": [
                  {
                    "$ref": "#/$defs/UriWithLengthBetween1And2048"
                  },
                  {
                    "xml": {
                      "name": "issuer"
                    },
                    "description": "The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>\n               . Required for the JWT authorizer type. Supported only for HTTP APIs."
                  }
                ]
              }
            }
          },
          "name": {
            "description": "A string with a length between [1-128].",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "apiId",
      "authorizerId",
      "body"
    ],
    "$defs": {
      "__string": {
        "type": "string"
      },
      "__listOf__string": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__string"
        }
      },
      "UriWithLengthBetween1And2048": {
        "type": "string",
        "description": "A string representation of a URI with a length between [1-2048]."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "http://apigateway.us-east-1.amazonaws.com/v2/apis/{apiId}/authorizers/{authorizerId}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AuthorizerCredentialsArn**",
            "**AuthorizerId**",
            "**AuthorizerPayloadFormatVersion**",
            "**AuthorizerResultTtlInSeconds**",
            "**AuthorizerType**",
            "**AuthorizerUri**",
            "**EnableSimpleResponses**",
            "**IdentitySource**",
            "**IdentityValidationExpression**",
            "**JwtConfiguration**",
            "**Name**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
