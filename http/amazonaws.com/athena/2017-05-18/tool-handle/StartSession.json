{
  "name": "StartSession",
  "description": "Creates a session for running calculations within a workgroup. The session is ready when it reaches an <code>IDLE</code> state.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonAthena.StartSession"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartSessionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartSessionRequest": {
        "type": "object",
        "required": [
          "WorkGroup",
          "EngineConfiguration"
        ],
        "title": "StartSessionRequest",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/DescriptionString"
              },
              {
                "description": "The session description."
              }
            ]
          },
          "WorkGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkGroupName"
              },
              {
                "description": "The workgroup to which the session belongs."
              }
            ]
          },
          "EngineConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EngineConfiguration"
              },
              {
                "description": "Contains engine data processing unit (DPU) configuration settings and parameter mappings."
              }
            ]
          },
          "NotebookVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The notebook version. This value is supplied automatically for notebook sessions in the Athena console and is not required for programmatic session access. The only valid notebook version is <code>Athena notebook version 1</code>. If you specify a value for <code>NotebookVersion</code>, you must also specify a value for <code>NotebookId</code>. See <a>EngineConfiguration$AdditionalConfigs</a>."
              }
            ]
          },
          "SessionIdleTimeoutInMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/SessionIdleTimeoutInMinutes"
              },
              {
                "description": "The idle timeout in minutes for the session."
              }
            ]
          },
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyToken"
              },
              {
                "description": "<p>A unique case-sensitive string used to ensure the request to create the session is idempotent (executes only once). If another <code>StartSessionRequest</code> is received, the same response is returned and another session is not created. If a parameter has changed, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
              }
            ]
          }
        }
      },
      "DescriptionString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "WorkGroupName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9._-]{1,128}"
      },
      "EngineConfiguration": {
        "type": "object",
        "required": [
          "MaxConcurrentDpus"
        ],
        "properties": {
          "CoordinatorDpuSize": {
            "allOf": [
              {
                "$ref": "#/$defs/CoordinatorDpuSize"
              },
              {
                "description": "The number of DPUs to use for the coordinator. A coordinator is a special executor that orchestrates processing work and manages other executors in a notebook session. The default is 1."
              }
            ]
          },
          "MaxConcurrentDpus": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrentDpus"
              },
              {
                "description": "The maximum number of DPUs that can run concurrently."
              }
            ]
          },
          "DefaultExecutorDpuSize": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultExecutorDpuSize"
              },
              {
                "description": "The default number of DPUs to use for executors. An executor is the smallest unit of compute that a notebook session can request from Athena. The default is 1."
              }
            ]
          },
          "AdditionalConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "Contains additional notebook engine <code>MAP&lt;string, string&gt;</code> parameter mappings in the form of key-value pairs. To specify an Athena notebook that the Jupyter server will download and serve, specify a value for the <a>StartSessionRequest$NotebookVersion</a> field, and then add a key named <code>NotebookId</code> to <code>AdditionalConfigs</code> that has the value of the Athena notebook ID."
              }
            ]
          },
          "SparkProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "Specifies custom jar files and Spark properties for use cases like cluster encryption, table formats, and general Spark tuning."
              }
            ]
          }
        },
        "description": "Contains data processing unit (DPU) configuration settings and parameter mappings for a notebook engine."
      },
      "CoordinatorDpuSize": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1
      },
      "MaxConcurrentDpus": {
        "type": "integer",
        "minimum": 2,
        "maximum": 5000
      },
      "DefaultExecutorDpuSize": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1
      },
      "ParametersMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ParametersMapValue"
        }
      },
      "ParametersMapValue": {
        "type": "string",
        "maxLength": 51200
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "SessionIdleTimeoutInMinutes": {
        "type": "integer",
        "minimum": 1,
        "maximum": 480
      },
      "IdempotencyToken": {
        "type": "string",
        "minLength": 32,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://athena.us-east-1.amazonaws.com/#X-Amz-Target=AmazonAthena.StartSession"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**SessionId**",
            "**State**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
