{
  "name": "StartQueryExecution",
  "description": "Runs the SQL query statements contained in the <code>Query</code>. Requires you to have access to the workgroup in which the query ran. Running queries against an external catalog requires <a>GetDataCatalog</a> permission to the catalog. For code samples using the Amazon Web Services SDK for Java, see <a href=\"http://docs.aws.amazon.com/athena/latest/ug/code-samples.html\">Examples and Code Samples</a> in the <i>Amazon Athena User Guide</i>.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonAthena.StartQueryExecution"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartQueryExecutionInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartQueryExecutionInput": {
        "type": "object",
        "required": [
          "QueryString"
        ],
        "title": "StartQueryExecutionInput",
        "properties": {
          "QueryString": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryString"
              },
              {
                "description": "The SQL query statements to be executed."
              }
            ]
          },
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyToken"
              },
              {
                "description": "<p>A unique case-sensitive string used to ensure the request to create the query is idempotent (executes only once). If another <code>StartQueryExecution</code> request is received, the same response is returned and another query is not created. If a parameter has changed, for example, the <code>QueryString</code>, an error is returned.</p> <important> <p>This token is listed as not required because Amazon Web Services SDKs (for example the Amazon Web Services SDK for Java) auto-generate the token for users. If you are not using the Amazon Web Services SDK or the Amazon Web Services CLI, you must provide this token or the action will fail.</p> </important>"
              }
            ]
          },
          "QueryExecutionContext": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryExecutionContext"
              },
              {
                "description": "The database within which the query executes."
              }
            ]
          },
          "ResultConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ResultConfiguration"
              },
              {
                "description": "Specifies information about where and how to save the results of the query execution. If the query runs in a workgroup, then workgroup's settings may override query settings. This affects the query results location. The workgroup settings override is specified in EnforceWorkGroupConfiguration (true/false) in the WorkGroupConfiguration. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
              }
            ]
          },
          "WorkGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkGroupName"
              },
              {
                "description": "The name of the workgroup in which the query is being started."
              }
            ]
          },
          "ExecutionParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutionParameters"
              },
              {
                "description": "A list of values for the parameters in a query. The values are applied sequentially to the parameters in the query in the order in which the parameters occur."
              }
            ]
          },
          "ResultReuseConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ResultReuseConfiguration"
              },
              {
                "description": "Specifies the query result reuse behavior for the query."
              }
            ]
          }
        }
      },
      "QueryString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 262144
      },
      "IdempotencyToken": {
        "type": "string",
        "minLength": 32,
        "maxLength": 128
      },
      "QueryExecutionContext": {
        "type": "object",
        "properties": {
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/DatabaseString"
              },
              {
                "description": "The name of the database used in the query execution. The database must exist in the catalog."
              }
            ]
          },
          "Catalog": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogNameString"
              },
              {
                "description": "The name of the data catalog used in the query execution."
              }
            ]
          }
        },
        "description": "The database and data catalog context in which the query execution occurs."
      },
      "DatabaseString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "CatalogNameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "ResultConfiguration": {
        "type": "object",
        "properties": {
          "OutputLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/ResultOutputLocation"
              },
              {
                "description": "The location in Amazon S3 where your query and calculation results are stored, such as <code>s3://path/to/query/bucket/</code>. To run the query, you must specify the query results location using one of the ways: either for individual queries using either this setting (client-side), or in the workgroup, using <a>WorkGroupConfiguration</a>. If none of them is set, Athena issues an error that no output location is provided. For more information, see <a href=\"https://docs.aws.amazon.com/athena/latest/ug/querying.html\">Working with query results, recent queries, and output files</a>. If workgroup settings override client-side settings, then the query uses the settings specified for the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a>."
              }
            ]
          },
          "EncryptionConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionConfiguration"
              },
              {
                "description": "If query and calculation results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the encryption configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
              }
            ]
          },
          "ExpectedBucketOwner": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsAccountId"
              },
              {
                "description": "<p>The Amazon Web Services account ID that you expect to be the owner of the Amazon S3 bucket specified by <a>ResultConfiguration$OutputLocation</a>. If set, Athena uses the value for <code>ExpectedBucketOwner</code> when it makes Amazon S3 calls to your specified output location. If the <code>ExpectedBucketOwner</code> Amazon Web Services account ID does not match the actual owner of the Amazon S3 bucket, the call fails with a permissions error.</p> <p>This is a client-side setting. If workgroup settings override client-side settings, then the query uses the <code>ExpectedBucketOwner</code> setting that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. See <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>.</p>"
              }
            ]
          },
          "AclConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/AclConfiguration"
              },
              {
                "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. Currently the only supported canned ACL is <code>BUCKET_OWNER_FULL_CONTROL</code>. This is a client-side setting. If workgroup settings override client-side settings, then the query uses the ACL configuration that is specified for the workgroup, and also uses the location for storing query results specified in the workgroup. For more information, see <a>WorkGroupConfiguration$EnforceWorkGroupConfiguration</a> and <a href=\"https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html\">Workgroup Settings Override Client-Side Settings</a>."
              }
            ]
          }
        },
        "description": "The location in Amazon S3 where query and calculation results are stored and the encryption option, if any, used for query and calculation results. These are known as \"client-side settings\". If workgroup settings override client-side settings, then the query uses the workgroup settings."
      },
      "ResultOutputLocation": {
        "type": "string"
      },
      "EncryptionConfiguration": {
        "type": "object",
        "required": [
          "EncryptionOption"
        ],
        "properties": {
          "EncryptionOption": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionOption"
              },
              {
                "description": "<p>Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (<code>SSE_S3</code>), server-side encryption with KMS-managed keys (<code>SSE_KMS</code>), or client-side encryption with KMS-managed keys (<code>CSE_KMS</code>) is used.</p> <p>If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup. </p>"
              }
            ]
          },
          "KmsKey": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "For <code>SSE_KMS</code> and <code>CSE_KMS</code>, this is the KMS key ARN or ID."
              }
            ]
          }
        },
        "description": "If query and calculation results are encrypted in Amazon S3, indicates the encryption option used (for example, <code>SSE_KMS</code> or <code>CSE_KMS</code>) and key information."
      },
      "EncryptionOption": {
        "type": "string",
        "enum": [
          "SSE_S3",
          "SSE_KMS",
          "CSE_KMS"
        ]
      },
      "String": {
        "type": "string"
      },
      "AwsAccountId": {
        "type": "string",
        "pattern": "^[0-9]+$",
        "minLength": 12,
        "maxLength": 12
      },
      "AclConfiguration": {
        "type": "object",
        "required": [
          "S3AclOption"
        ],
        "properties": {
          "S3AclOption": {
            "allOf": [
              {
                "$ref": "#/$defs/S3AclOption"
              },
              {
                "description": "The Amazon S3 canned ACL that Athena should specify when storing query results. Currently the only supported canned ACL is <code>BUCKET_OWNER_FULL_CONTROL</code>. If a query runs in a workgroup and the workgroup overrides client-side settings, then the Amazon S3 canned ACL specified in the workgroup's settings is used for all queries that run in the workgroup. For more information about Amazon S3 canned ACLs, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl\">Canned ACL</a> in the <i>Amazon S3 User Guide</i>."
              }
            ]
          }
        },
        "description": "Indicates that an Amazon S3 canned ACL should be set to control ownership of stored query results. When Athena stores query results in Amazon S3, the canned ACL is set with the <code>x-amz-acl</code> request header. For more information about S3 Object Ownership, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/about-object-ownership.html#object-ownership-overview\">Object Ownership settings</a> in the <i>Amazon S3 User Guide</i>."
      },
      "S3AclOption": {
        "type": "string",
        "enum": [
          "BUCKET_OWNER_FULL_CONTROL"
        ]
      },
      "WorkGroupName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9._-]{1,128}"
      },
      "ExecutionParameters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ExecutionParameter"
        },
        "minItems": 1
      },
      "ExecutionParameter": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ResultReuseConfiguration": {
        "type": "object",
        "properties": {
          "ResultReuseByAgeConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ResultReuseByAgeConfiguration"
              },
              {
                "description": "Specifies whether previous query results are reused, and if so, their maximum age."
              }
            ]
          }
        },
        "description": "Specifies the query result reuse behavior for the query."
      },
      "ResultReuseByAgeConfiguration": {
        "type": "object",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "True if previous query results can be reused when the query is run; otherwise, false. The default is false."
              }
            ]
          },
          "MaxAgeInMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/Age"
              },
              {
                "description": "Specifies, in minutes, the maximum age of a previous query result that Athena should consider for reuse. The default is 60."
              }
            ]
          }
        },
        "description": "Specifies whether previous query results are reused, and if so, their maximum age."
      },
      "Boolean": {
        "type": "boolean"
      },
      "Age": {
        "type": "integer",
        "minimum": 0,
        "maximum": 10080
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://athena.us-east-1.amazonaws.com/#X-Amz-Target=AmazonAthena.StartQueryExecution"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**QueryExecutionId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
