{
  "name": "CreateModelVersion",
  "description": "Creates a version of the model using the specified model type and model id. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSHawksNestServiceFacade.CreateModelVersion"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateModelVersionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateModelVersionRequest": {
        "type": "object",
        "required": [
          "modelId",
          "modelType",
          "trainingDataSource",
          "trainingDataSchema"
        ],
        "title": "CreateModelVersionRequest",
        "properties": {
          "modelId": {
            "allOf": [
              {
                "$ref": "#/$defs/modelIdentifier"
              },
              {
                "description": "The model ID. "
              }
            ]
          },
          "modelType": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelTypeEnum"
              },
              {
                "description": "The model type."
              }
            ]
          },
          "trainingDataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingDataSourceEnum"
              },
              {
                "description": "The training data source location in Amazon S3. "
              }
            ]
          },
          "trainingDataSchema": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingDataSchema"
              },
              {
                "description": "The training data schema."
              }
            ]
          },
          "externalEventsDetail": {
            "allOf": [
              {
                "$ref": "#/$defs/ExternalEventsDetail"
              },
              {
                "description": "Details of the external events data used for model version training. Required if <code>trainingDataSource</code> is <code>EXTERNAL_EVENTS</code>."
              }
            ]
          },
          "ingestedEventsDetail": {
            "allOf": [
              {
                "$ref": "#/$defs/IngestedEventsDetail"
              },
              {
                "description": "Details of the ingested events data used for model version training. Required if <code>trainingDataSource</code> is <code>INGESTED_EVENTS</code>."
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/tagList"
              },
              {
                "description": "A collection of key and value pairs."
              }
            ]
          }
        }
      },
      "modelIdentifier": {
        "type": "string",
        "pattern": "^[0-9a-z_]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "ModelTypeEnum": {
        "type": "string",
        "enum": [
          "ONLINE_FRAUD_INSIGHTS",
          "TRANSACTION_FRAUD_INSIGHTS",
          "ACCOUNT_TAKEOVER_INSIGHTS"
        ]
      },
      "TrainingDataSourceEnum": {
        "type": "string",
        "enum": [
          "EXTERNAL_EVENTS",
          "INGESTED_EVENTS"
        ]
      },
      "TrainingDataSchema": {
        "type": "object",
        "required": [
          "modelVariables"
        ],
        "properties": {
          "modelVariables": {
            "allOf": [
              {
                "$ref": "#/$defs/ListOfStrings"
              },
              {
                "description": "The training data schema variables."
              }
            ]
          },
          "labelSchema": {
            "$ref": "#/$defs/LabelSchema"
          }
        },
        "description": "The training data schema."
      },
      "ListOfStrings": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string"
        }
      },
      "string": {
        "type": "string"
      },
      "LabelSchema": {
        "type": "object",
        "properties": {
          "labelMapper": {
            "allOf": [
              {
                "$ref": "#/$defs/labelMapper"
              },
              {
                "description": "The label mapper maps the Amazon Fraud Detector supported model classification labels (<code>FRAUD</code>, <code>LEGIT</code>) to the appropriate event type labels. For example, if \"<code>FRAUD</code>\" and \"<code>LEGIT</code>\" are Amazon Fraud Detector supported labels, this mapper could be: <code>{\"FRAUD\" =&gt; [\"0\"]</code>, <code>\"LEGIT\" =&gt; [\"1\"]}</code> or <code>{\"FRAUD\" =&gt; [\"false\"]</code>, <code>\"LEGIT\" =&gt; [\"true\"]}</code> or <code>{\"FRAUD\" =&gt; [\"fraud\", \"abuse\"]</code>, <code>\"LEGIT\" =&gt; [\"legit\", \"safe\"]}</code>. The value part of the mapper is a list, because you may have multiple label variants from your event type for a single Amazon Fraud Detector label. "
              }
            ]
          },
          "unlabeledEventsTreatment": {
            "allOf": [
              {
                "$ref": "#/$defs/UnlabeledEventsTreatment"
              },
              {
                "description": "<p>The action to take for unlabeled events.</p> <ul> <li> <p>Use <code>IGNORE</code> if you want the unlabeled events to be ignored. This is recommended when the majority of the events in the dataset are labeled.</p> </li> <li> <p>Use <code>FRAUD</code> if you want to categorize all unlabeled events as “Fraud”. This is recommended when most of the events in your dataset are fraudulent.</p> </li> <li> <p>Use <code>LEGIT</code> if you want to categorize all unlabeled events as “Legit”. This is recommended when most of the events in your dataset are legitimate.</p> </li> <li> <p>Use <code>AUTO</code> if you want Amazon Fraud Detector to decide how to use the unlabeled data. This is recommended when there is significant unlabeled events in the dataset.</p> </li> </ul> <p>By default, Amazon Fraud Detector ignores the unlabeled data.</p>"
              }
            ]
          }
        },
        "description": "The label schema."
      },
      "labelMapper": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ListOfStrings"
        }
      },
      "UnlabeledEventsTreatment": {
        "type": "string",
        "enum": [
          "IGNORE",
          "FRAUD",
          "LEGIT",
          "AUTO"
        ]
      },
      "ExternalEventsDetail": {
        "type": "object",
        "required": [
          "dataLocation",
          "dataAccessRoleArn"
        ],
        "properties": {
          "dataLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/s3BucketLocation"
              },
              {
                "description": "The Amazon S3 bucket location for the data."
              }
            ]
          },
          "dataAccessRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/iamRoleArn"
              },
              {
                "description": "The ARN of the role that provides Amazon Fraud Detector access to the data location."
              }
            ]
          }
        },
        "description": "Details for the external events data used for model version training."
      },
      "s3BucketLocation": {
        "type": "string",
        "pattern": "^s3:\\/\\/(.+)$",
        "minLength": 1,
        "maxLength": 512
      },
      "iamRoleArn": {
        "type": "string",
        "pattern": "^arn\\:aws[a-z-]{0,15}\\:iam\\:\\:[0-9]{12}\\:role\\/[^\\s]{2,64}$",
        "minLength": 1,
        "maxLength": 256
      },
      "IngestedEventsDetail": {
        "type": "object",
        "required": [
          "ingestedEventsTimeWindow"
        ],
        "properties": {
          "ingestedEventsTimeWindow": {
            "allOf": [
              {
                "$ref": "#/$defs/IngestedEventsTimeWindow"
              },
              {
                "description": "The start and stop time of the ingested events."
              }
            ]
          }
        },
        "description": "The details of the ingested event."
      },
      "IngestedEventsTimeWindow": {
        "type": "object",
        "required": [
          "startTime",
          "endTime"
        ],
        "properties": {
          "startTime": {
            "allOf": [
              {
                "$ref": "#/$defs/time"
              },
              {
                "description": "Timestamp of the first ingensted event."
              }
            ]
          },
          "endTime": {
            "allOf": [
              {
                "$ref": "#/$defs/time"
              },
              {
                "description": "Timestamp of the final ingested event."
              }
            ]
          }
        },
        "description": "The start and stop time of the ingested events."
      },
      "time": {
        "type": "string",
        "minLength": 11,
        "maxLength": 30
      },
      "tagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/tagKey"
              },
              {
                "description": "A tag key."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/tagValue"
              },
              {
                "description": "A value assigned to a tag key."
              }
            ]
          }
        },
        "description": "A key and value pair. "
      },
      "tagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "tagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://frauddetector.us-east-1.amazonaws.com/#X-Amz-Target=AWSHawksNestServiceFacade.CreateModelVersion"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**modelId**",
            "**modelType**",
            "**modelVersionNumber**",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
