{
  "name": "SendEvent",
  "description": "Stores events in Amazon Fraud Detector without generating fraud predictions for those events. For example, you can use <code>SendEvent</code> to upload a historical dataset, which you can then later use to train a model.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSHawksNestServiceFacade.SendEvent"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/SendEventRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "SendEventRequest": {
        "type": "object",
        "required": [
          "eventId",
          "eventTypeName",
          "eventTimestamp",
          "eventVariables",
          "entities"
        ],
        "title": "SendEventRequest",
        "properties": {
          "eventId": {
            "allOf": [
              {
                "$ref": "#/$defs/identifier"
              },
              {
                "description": "The event ID to upload."
              }
            ]
          },
          "eventTypeName": {
            "allOf": [
              {
                "$ref": "#/$defs/identifier"
              },
              {
                "description": "The event type name of the event."
              }
            ]
          },
          "eventTimestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/utcTimestampISO8601"
              },
              {
                "description": "The timestamp that defines when the event under evaluation occurred. The timestamp must be specified using ISO 8601 standard in UTC."
              }
            ]
          },
          "eventVariables": {
            "allOf": [
              {
                "$ref": "#/$defs/EventVariableMap"
              },
              {
                "description": "Names of the event type's variables you defined in Amazon Fraud Detector to represent data elements and their corresponding values for the event you are sending for evaluation."
              }
            ]
          },
          "assignedLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/identifier"
              },
              {
                "description": "The label to associate with the event. Required if specifying <code>labelTimestamp</code>."
              }
            ]
          },
          "labelTimestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/utcTimestampISO8601"
              },
              {
                "description": "The timestamp associated with the label. Required if specifying <code>assignedLabel</code>."
              }
            ]
          },
          "entities": {
            "allOf": [
              {
                "$ref": "#/$defs/listOfEntities"
              },
              {
                "description": "An array of entities."
              }
            ]
          }
        }
      },
      "identifier": {
        "type": "string",
        "pattern": "^[0-9a-z_-]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "utcTimestampISO8601": {
        "type": "string",
        "minLength": 10,
        "maxLength": 30
      },
      "EventVariableMap": {
        "type": "object",
        "minProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/variableValue"
        }
      },
      "variableValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 8192,
        "format": "password"
      },
      "listOfEntities": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Entity"
        }
      },
      "Entity": {
        "type": "object",
        "required": [
          "entityType",
          "entityId"
        ],
        "properties": {
          "entityType": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The entity type."
              }
            ]
          },
          "entityId": {
            "allOf": [
              {
                "$ref": "#/$defs/entityRestrictedString"
              },
              {
                "description": "The entity ID. If you do not know the <code>entityId</code>, you can pass <code>unknown</code>, which is areserved string literal."
              }
            ]
          }
        },
        "description": "The entity details. "
      },
      "string": {
        "type": "string"
      },
      "entityRestrictedString": {
        "type": "string",
        "pattern": "^[0-9A-Za-z_.@+-]+$",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://frauddetector.us-east-1.amazonaws.com/#X-Amz-Target=AWSHawksNestServiceFacade.SendEvent"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
