{
  "name": "CreateDatastore",
  "description": "Creates a data store, which is a repository for messages.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "datastoreName"
        ],
        "properties": {
          "datastoreName": {
            "description": "The name of the data store.",
            "type": "string",
            "pattern": "(^(?!_{2}))(^[a-zA-Z0-9_]+$)",
            "minLength": 1,
            "maxLength": 128
          },
          "datastoreStorage": {
            "description": "Where data in a data store is stored.. You can choose <code>serviceManagedS3</code> storage, <code>customerManagedS3</code> storage, or <code>iotSiteWiseMultiLayerStorage</code> storage. The default is <code>serviceManagedS3</code>. You can't change the choice of Amazon S3 storage after your data store is created. ",
            "type": "object",
            "properties": {
              "serviceManagedS3": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ServiceManagedDatastoreS3Storage"
                  },
                  {
                    "description": "Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created. "
                  }
                ]
              },
              "customerManagedS3": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CustomerManagedDatastoreS3Storage"
                  },
                  {
                    "description": "S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created. "
                  }
                ]
              },
              "iotSiteWiseMultiLayerStorage": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DatastoreIotSiteWiseMultiLayerStorage"
                  },
                  {
                    "description": " Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. "
                  }
                ]
              }
            }
          },
          "retentionPeriod": {
            "description": "How long, in days, message data is kept.",
            "type": "object",
            "properties": {
              "unlimited": {
                "allOf": [
                  {
                    "$ref": "#/$defs/UnlimitedRetentionPeriod"
                  },
                  {
                    "description": "If true, message data is kept indefinitely."
                  }
                ]
              },
              "numberOfDays": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RetentionPeriodInDays"
                  },
                  {
                    "description": "The number of days that message data is kept. The <code>unlimited</code> parameter must be false."
                  }
                ]
              }
            }
          },
          "tags": {
            "description": "Metadata which can be used to manage the data store.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 1,
            "maxItems": 50
          },
          "fileFormatConfiguration": {
            "description": "<p>Contains the configuration information of file formats. IoT Analytics data stores support JSON and <a href=\"https://parquet.apache.org/\">Parquet</a>.</p> <p>The default file format is JSON. You can specify only one format.</p> <p>You can't change the file format after you create the data store.</p>",
            "type": "object",
            "properties": {
              "jsonConfiguration": {
                "allOf": [
                  {
                    "$ref": "#/$defs/JsonConfiguration"
                  },
                  {
                    "description": "Contains the configuration information of the JSON format."
                  }
                ]
              },
              "parquetConfiguration": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ParquetConfiguration"
                  },
                  {
                    "description": "Contains the configuration information of the Parquet format."
                  }
                ]
              }
            }
          },
          "datastorePartitions": {
            "description": " Contains information about the partition dimensions in a data store. ",
            "type": "object",
            "properties": {
              "partitions": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Partitions"
                  },
                  {
                    "description": " A list of partition dimensions in a data store. "
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "ServiceManagedDatastoreS3Storage": {
        "type": "object",
        "properties": {},
        "description": "Used to store data in an Amazon S3 bucket managed by IoT Analytics. You can't change the choice of Amazon S3 storage after your data store is created. "
      },
      "CustomerManagedDatastoreS3Storage": {
        "type": "object",
        "required": [
          "bucket",
          "roleArn"
        ],
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/BucketName"
              },
              {
                "description": "The name of the Amazon S3 bucket where your data is stored."
              }
            ]
          },
          "keyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3KeyPrefix"
              },
              {
                "description": "(Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/)."
              }
            ]
          },
          "roleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The ARN of the role that grants IoT Analytics permission to interact with your Amazon S3 resources."
              }
            ]
          }
        },
        "description": "S3-customer-managed; When you choose customer-managed storage, the <code>retentionPeriod</code> parameter is ignored. You can't change the choice of Amazon S3 storage after your data store is created. "
      },
      "BucketName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9.\\-_]*$",
        "minLength": 3,
        "maxLength": 255
      },
      "S3KeyPrefix": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9!_.*'()/{}:-]*/$",
        "minLength": 1,
        "maxLength": 255
      },
      "RoleArn": {
        "type": "string",
        "minLength": 20,
        "maxLength": 2048
      },
      "DatastoreIotSiteWiseMultiLayerStorage": {
        "type": "object",
        "required": [
          "customerManagedS3Storage"
        ],
        "properties": {
          "customerManagedS3Storage": {
            "allOf": [
              {
                "$ref": "#/$defs/IotSiteWiseCustomerManagedDatastoreS3Storage"
              },
              {
                "description": " Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. "
              }
            ]
          }
        },
        "description": " Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. "
      },
      "IotSiteWiseCustomerManagedDatastoreS3Storage": {
        "type": "object",
        "required": [
          "bucket"
        ],
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/BucketName"
              },
              {
                "description": " The name of the Amazon S3 bucket where your data is stored. "
              }
            ]
          },
          "keyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3KeyPrefix"
              },
              {
                "description": " (Optional) The prefix used to create the keys of the data store data objects. Each object in an Amazon S3 bucket has a key that is its unique identifier in the bucket. Each object in a bucket has exactly one key. The prefix must end with a forward slash (/). "
              }
            ]
          }
        },
        "description": " Used to store data used by IoT SiteWise in an Amazon S3 bucket that you manage. You can't change the choice of Amazon S3 storage after your data store is created. "
      },
      "UnlimitedRetentionPeriod": {
        "type": "boolean"
      },
      "RetentionPeriodInDays": {
        "type": "integer",
        "minimum": 1
      },
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "A set of key-value pairs that are used to manage the resource."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "TagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "JsonConfiguration": {
        "type": "object",
        "properties": {},
        "description": "Contains the configuration information of the JSON format."
      },
      "ParquetConfiguration": {
        "type": "object",
        "properties": {
          "schemaDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaDefinition"
              },
              {
                "description": "Information needed to define a schema."
              }
            ]
          }
        },
        "description": "Contains the configuration information of the Parquet format."
      },
      "SchemaDefinition": {
        "type": "object",
        "properties": {
          "columns": {
            "allOf": [
              {
                "$ref": "#/$defs/Columns"
              },
              {
                "description": "<p>Specifies one or more columns that store your data.</p> <p>Each schema can have up to 100 columns. Each column can have up to 100 nested types.</p>"
              }
            ]
          }
        },
        "description": "Information needed to define a schema."
      },
      "Columns": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Column"
        }
      },
      "Column": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "The name of the column."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnDataType"
              },
              {
                "description": "The type of data. For more information about the supported data types, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-common.html\">Common data types</a> in the <i>Glue Developer Guide</i>."
              }
            ]
          }
        },
        "description": "Contains information about a column that stores your data."
      },
      "ColumnName": {
        "type": "string",
        "pattern": "^[A-Za-z_]([A-Za-z0-9]*|[A-Za-z0-9][A-Za-z0-9_]*)$",
        "minLength": 1,
        "maxLength": 255
      },
      "ColumnDataType": {
        "type": "string",
        "minLength": 1,
        "maxLength": 131072,
        "x-pattern": "^[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*$"
      },
      "Partitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DatastorePartition"
        },
        "minItems": 0,
        "maxItems": 25
      },
      "DatastorePartition": {
        "type": "object",
        "properties": {
          "attributePartition": {
            "allOf": [
              {
                "$ref": "#/$defs/Partition"
              },
              {
                "description": " A partition dimension defined by an <code>attributeName</code>. "
              }
            ]
          },
          "timestampPartition": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestampPartition"
              },
              {
                "description": " A partition dimension defined by a timestamp attribute. "
              }
            ]
          }
        },
        "description": " A single dimension to partition a data store. The dimension must be an <code>AttributePartition</code> or a <code>TimestampPartition</code>. "
      },
      "Partition": {
        "type": "object",
        "required": [
          "attributeName"
        ],
        "properties": {
          "attributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionAttributeName"
              },
              {
                "description": " The name of the attribute that defines a partition dimension. "
              }
            ]
          }
        },
        "description": " A partition dimension defined by an attribute. "
      },
      "PartitionAttributeName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "TimestampPartition": {
        "type": "object",
        "required": [
          "attributeName"
        ],
        "properties": {
          "attributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionAttributeName"
              },
              {
                "description": " The attribute name of the partition defined by a timestamp. "
              }
            ]
          },
          "timestampFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestampFormat"
              },
              {
                "description": " The timestamp format of a partition defined by a timestamp. The default format is seconds since epoch (January 1, 1970 at midnight UTC time). "
              }
            ]
          }
        },
        "description": " A partition dimension defined by a timestamp attribute. "
      },
      "TimestampFormat": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9\\s\\[\\]_,.'/:-]*$",
        "minLength": 1,
        "maxLength": 50
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotanalytics.us-east-1.amazonaws.com/datastores"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**datastoreName**",
            "**datastoreArn**",
            "**retentionPeriod**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
