{
  "name": "CreateOriginEndpoint",
  "description": "Creates a new OriginEndpoint record.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "channelId",
          "id"
        ],
        "properties": {
          "authorization": {
            "description": "CDN Authorization credentials",
            "type": "object",
            "properties": {
              "CdnIdentifierSecret": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "cdnIdentifierSecret"
                    },
                    "description": "The Amazon Resource Name (ARN) for the secret in Secrets Manager that your Content Distribution Network (CDN) uses for authorization to access your endpoint.\n"
                  }
                ]
              },
              "SecretsRoleArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "secretsRoleArn"
                    },
                    "description": "The Amazon Resource Name (ARN) for the IAM role that allows MediaPackage to communicate with AWS Secrets Manager.\n"
                  }
                ]
              }
            }
          },
          "channelId": {
            "description": "The ID of the Channel that the OriginEndpoint will be associated with.\nThis cannot be changed after the OriginEndpoint is created.\n",
            "type": "string"
          },
          "cmafPackage": {
            "description": "A Common Media Application Format (CMAF) packaging configuration.",
            "type": "object",
            "properties": {
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CmafEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "HlsManifests": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOfHlsManifestCreateOrUpdateParameters"
                  },
                  {
                    "xml": {
                      "name": "hlsManifests"
                    },
                    "description": "A list of HLS manifest configurations"
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "Duration (in seconds) of each segment. Actual segments will be\nrounded to the nearest multiple of the source segment duration.\n"
                  }
                ]
              },
              "SegmentPrefix": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "segmentPrefix"
                    },
                    "description": "An optional custom string that is prepended to the name of each segment. If not specified, it defaults to the ChannelId."
                  }
                ]
              },
              "StreamSelection": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StreamSelection"
                  },
                  {
                    "xml": {
                      "name": "streamSelection"
                    }
                  }
                ]
              }
            }
          },
          "dashPackage": {
            "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
            "type": "object",
            "properties": {
              "AdTriggers": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AdTriggers"
                  },
                  {
                    "xml": {
                      "name": "adTriggers"
                    }
                  }
                ]
              },
              "AdsOnDeliveryRestrictions": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AdsOnDeliveryRestrictions"
                  },
                  {
                    "xml": {
                      "name": "adsOnDeliveryRestrictions"
                    }
                  }
                ]
              },
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DashEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "IncludeIframeOnlyStream": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeIframeOnlyStream"
                    },
                    "description": "When enabled, an I-Frame only stream will be included in the output."
                  }
                ]
              },
              "ManifestLayout": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ManifestLayout"
                  },
                  {
                    "xml": {
                      "name": "manifestLayout"
                    },
                    "description": "Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level."
                  }
                ]
              },
              "ManifestWindowSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "manifestWindowSeconds"
                    },
                    "description": "Time window (in seconds) contained in each manifest."
                  }
                ]
              },
              "MinBufferTimeSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "minBufferTimeSeconds"
                    },
                    "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation."
                  }
                ]
              },
              "MinUpdatePeriodSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "minUpdatePeriodSeconds"
                    },
                    "description": "Minimum duration (in seconds) between potential changes to the Dynamic Adaptive Streaming over HTTP (DASH) Media Presentation Description (MPD)."
                  }
                ]
              },
              "PeriodTriggers": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOf__PeriodTriggersElement"
                  },
                  {
                    "xml": {
                      "name": "periodTriggers"
                    },
                    "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH)\nMedia Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not\nbe partitioned into more than one period. If the list contains \"ADS\", new periods will be created where\nthe Channel source contains SCTE-35 ad markers.\n"
                  }
                ]
              },
              "Profile": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Profile"
                  },
                  {
                    "xml": {
                      "name": "profile"
                    },
                    "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled. When set to \"DVB-DASH_2014\", DVB-DASH 2014 compliant output is enabled."
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "Duration (in seconds) of each segment. Actual segments will be\nrounded to the nearest multiple of the source segment duration.\n"
                  }
                ]
              },
              "SegmentTemplateFormat": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SegmentTemplateFormat"
                  },
                  {
                    "xml": {
                      "name": "segmentTemplateFormat"
                    },
                    "description": "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs."
                  }
                ]
              },
              "StreamSelection": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StreamSelection"
                  },
                  {
                    "xml": {
                      "name": "streamSelection"
                    }
                  }
                ]
              },
              "SuggestedPresentationDelaySeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "suggestedPresentationDelaySeconds"
                    },
                    "description": "Duration (in seconds) to delay live content before presentation."
                  }
                ]
              },
              "UtcTiming": {
                "allOf": [
                  {
                    "$ref": "#/$defs/UtcTiming"
                  },
                  {
                    "xml": {
                      "name": "utcTiming"
                    },
                    "description": "Determines the type of UTCTiming included in the Media Presentation Description (MPD)"
                  }
                ]
              },
              "UtcTimingUri": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "utcTimingUri"
                    },
                    "description": "Specifies the value attribute of the UTCTiming field when utcTiming is set to HTTP-ISO, HTTP-HEAD or HTTP-XSDATE"
                  }
                ]
              }
            }
          },
          "description": {
            "description": "A short text description of the OriginEndpoint.",
            "type": "string"
          },
          "hlsPackage": {
            "description": "An HTTP Live Streaming (HLS) packaging configuration.",
            "type": "object",
            "properties": {
              "AdMarkers": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AdMarkers"
                  },
                  {
                    "xml": {
                      "name": "adMarkers"
                    },
                    "description": "This setting controls how ad markers are included in the packaged OriginEndpoint.\n\"NONE\" will omit all SCTE-35 ad markers from the output.\n\"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad\nmarkers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.\n\"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35\nmessages in the input source.\n\"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events \nin HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value \nthat is greater than 0.\n"
                  }
                ]
              },
              "AdTriggers": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AdTriggers"
                  },
                  {
                    "xml": {
                      "name": "adTriggers"
                    }
                  }
                ]
              },
              "AdsOnDeliveryRestrictions": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AdsOnDeliveryRestrictions"
                  },
                  {
                    "xml": {
                      "name": "adsOnDeliveryRestrictions"
                    }
                  }
                ]
              },
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/HlsEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "IncludeDvbSubtitles": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeDvbSubtitles"
                    },
                    "description": "When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output."
                  }
                ]
              },
              "IncludeIframeOnlyStream": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeIframeOnlyStream"
                    },
                    "description": "When enabled, an I-Frame only stream will be included in the output."
                  }
                ]
              },
              "PlaylistType": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PlaylistType"
                  },
                  {
                    "xml": {
                      "name": "playlistType"
                    },
                    "description": "The HTTP Live Streaming (HLS) playlist type.\nWhen either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE\nentry will be included in the media playlist.\n"
                  }
                ]
              },
              "PlaylistWindowSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "playlistWindowSeconds"
                    },
                    "description": "Time window (in seconds) contained in each parent manifest."
                  }
                ]
              },
              "ProgramDateTimeIntervalSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "programDateTimeIntervalSeconds"
                    },
                    "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag\ninserted into manifests. Additionally, when an interval is specified\nID3Timed Metadata messages will be generated every 5 seconds using the\ningest time of the content.\nIf the interval is not specified, or set to 0, then\nno EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no\nID3Timed Metadata messages will be generated. Note that irrespective\nof this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,\nit will be passed through to HLS output.\n"
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "Duration (in seconds) of each fragment. Actual fragments will be\nrounded to the nearest multiple of the source fragment duration.\n"
                  }
                ]
              },
              "StreamSelection": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StreamSelection"
                  },
                  {
                    "xml": {
                      "name": "streamSelection"
                    }
                  }
                ]
              },
              "UseAudioRenditionGroup": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "useAudioRenditionGroup"
                    },
                    "description": "When enabled, audio streams will be placed in rendition groups in the output."
                  }
                ]
              }
            }
          },
          "id": {
            "description": "The ID of the OriginEndpoint.  The ID must be unique within the region\nand it cannot be changed after the OriginEndpoint is created.\n",
            "type": "string"
          },
          "manifestName": {
            "description": "A short string that will be used as the filename of the OriginEndpoint URL (defaults to \"index\").",
            "type": "string"
          },
          "mssPackage": {
            "description": "A Microsoft Smooth Streaming (MSS) packaging configuration.",
            "type": "object",
            "properties": {
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MssEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "ManifestWindowSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "manifestWindowSeconds"
                    },
                    "description": "The time window (in seconds) contained in each manifest."
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "The duration (in seconds) of each segment."
                  }
                ]
              },
              "StreamSelection": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StreamSelection"
                  },
                  {
                    "xml": {
                      "name": "streamSelection"
                    }
                  }
                ]
              }
            }
          },
          "origination": {
            "description": "Control whether origination of video is allowed for this OriginEndpoint. If set to ALLOW, the OriginEndpoint\nmay by requested, pursuant to any other form of access control. If set to DENY, the OriginEndpoint may not be\nrequested. This can be helpful for Live to VOD harvesting, or for temporarily disabling origination\n",
            "enum": [
              "ALLOW",
              "DENY"
            ],
            "type": "string"
          },
          "startoverWindowSeconds": {
            "description": "Maximum duration (seconds) of content to retain for startover playback.\nIf not specified, startover playback will be disabled for the OriginEndpoint.\n",
            "type": "integer"
          },
          "tags": {
            "description": "A collection of tags associated with a resource",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/__string"
            }
          },
          "timeDelaySeconds": {
            "description": "Amount of delay (seconds) to enforce on the playback of live content.\nIf not specified, there will be no time delay in effect for the OriginEndpoint.\n",
            "type": "integer"
          },
          "whitelist": {
            "description": "A list of source IP CIDR blocks that will be allowed to access the OriginEndpoint.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/__string"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "__string": {
        "type": "string"
      },
      "CmafEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "constantInitializationVector"
                },
                "description": "An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV)."
              }
            ]
          },
          "EncryptionMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/CmafEncryptionMethod"
              },
              {
                "xml": {
                  "name": "encryptionMethod"
                }
              }
            ]
          },
          "KeyRotationIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "keyRotationIntervalSeconds"
                },
                "description": "Time (in seconds) between each encryption key rotation."
              }
            ]
          },
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "A Common Media Application Format (CMAF) encryption configuration."
      },
      "CmafEncryptionMethod": {
        "enum": [
          "SAMPLE_AES",
          "AES_CTR"
        ],
        "type": "string",
        "description": "The encryption method to use."
      },
      "__integer": {
        "type": "integer"
      },
      "SpekeKeyProvider": {
        "required": [
          "ResourceId",
          "SystemIds",
          "Url",
          "RoleArn"
        ],
        "type": "object",
        "properties": {
          "CertificateArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "certificateArn"
                },
                "description": "An Amazon Resource Name (ARN) of a Certificate Manager certificate\nthat MediaPackage will use for enforcing secure end-to-end data\ntransfer with the key provider service.\n"
              }
            ]
          },
          "EncryptionContractConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionContractConfiguration"
              },
              {
                "xml": {
                  "name": "encryptionContractConfiguration"
                }
              }
            ]
          },
          "ResourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "resourceId"
                },
                "description": "The resource ID to include in key requests."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "roleArn"
                },
                "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental\nMediaPackage will assume when accessing the key provider service.\n"
              }
            ]
          },
          "SystemIds": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOf__string"
              },
              {
                "xml": {
                  "name": "systemIds"
                },
                "description": "The system IDs to include in key requests."
              }
            ]
          },
          "Url": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "url"
                },
                "description": "The URL of the external key provider service."
              }
            ]
          }
        },
        "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys."
      },
      "EncryptionContractConfiguration": {
        "required": [
          "PresetSpeke20Audio",
          "PresetSpeke20Video"
        ],
        "type": "object",
        "properties": {
          "PresetSpeke20Audio": {
            "allOf": [
              {
                "$ref": "#/$defs/PresetSpeke20Audio"
              },
              {
                "xml": {
                  "name": "presetSpeke20Audio"
                },
                "description": "A collection of audio encryption presets."
              }
            ]
          },
          "PresetSpeke20Video": {
            "allOf": [
              {
                "$ref": "#/$defs/PresetSpeke20Video"
              },
              {
                "xml": {
                  "name": "presetSpeke20Video"
                },
                "description": "A collection of video encryption presets."
              }
            ]
          }
        },
        "description": "Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. \nThe encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. \nTo configure the encryption contract, specify which audio and video encryption presets to use.\nNote the following considerations when using encryptionContractConfiguration:\nencryptionContractConfiguration can be used for DASH or CMAF endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification.\nYou must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.\n"
      },
      "PresetSpeke20Audio": {
        "enum": [
          "PRESET-AUDIO-1",
          "PRESET-AUDIO-2",
          "PRESET-AUDIO-3",
          "SHARED",
          "UNENCRYPTED"
        ],
        "type": "string"
      },
      "PresetSpeke20Video": {
        "enum": [
          "PRESET-VIDEO-1",
          "PRESET-VIDEO-2",
          "PRESET-VIDEO-3",
          "PRESET-VIDEO-4",
          "PRESET-VIDEO-5",
          "PRESET-VIDEO-6",
          "PRESET-VIDEO-7",
          "PRESET-VIDEO-8",
          "SHARED",
          "UNENCRYPTED"
        ],
        "type": "string"
      },
      "__listOf__string": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__string"
        }
      },
      "__listOfHlsManifestCreateOrUpdateParameters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HlsManifestCreateOrUpdateParameters"
        }
      },
      "HlsManifestCreateOrUpdateParameters": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "AdMarkers": {
            "allOf": [
              {
                "$ref": "#/$defs/AdMarkers"
              },
              {
                "xml": {
                  "name": "adMarkers"
                },
                "description": "This setting controls how ad markers are included in the packaged OriginEndpoint.\n\"NONE\" will omit all SCTE-35 ad markers from the output.\n\"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad\nmarkers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.\n\"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35\nmessages in the input source.\n\"DATERANGE\" inserts EXT-X-DATERANGE tags to signal ad and program transition events \nin HLS and CMAF manifests. For this option, you must set a programDateTimeIntervalSeconds value \nthat is greater than 0.\n"
              }
            ]
          },
          "AdTriggers": {
            "allOf": [
              {
                "$ref": "#/$defs/AdTriggers"
              },
              {
                "xml": {
                  "name": "adTriggers"
                }
              }
            ]
          },
          "AdsOnDeliveryRestrictions": {
            "allOf": [
              {
                "$ref": "#/$defs/AdsOnDeliveryRestrictions"
              },
              {
                "xml": {
                  "name": "adsOnDeliveryRestrictions"
                }
              }
            ]
          },
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "id"
                },
                "description": "The ID of the manifest. The ID must be unique within the OriginEndpoint and it cannot be changed after it is created."
              }
            ]
          },
          "IncludeIframeOnlyStream": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "xml": {
                  "name": "includeIframeOnlyStream"
                },
                "description": "When enabled, an I-Frame only stream will be included in the output."
              }
            ]
          },
          "ManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "manifestName"
                },
                "description": "An optional short string appended to the end of the OriginEndpoint URL. If not specified, defaults to the manifestName for the OriginEndpoint."
              }
            ]
          },
          "PlaylistType": {
            "allOf": [
              {
                "$ref": "#/$defs/PlaylistType"
              },
              {
                "xml": {
                  "name": "playlistType"
                },
                "description": "The HTTP Live Streaming (HLS) playlist type.\nWhen either \"EVENT\" or \"VOD\" is specified, a corresponding EXT-X-PLAYLIST-TYPE\nentry will be included in the media playlist.\n"
              }
            ]
          },
          "PlaylistWindowSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "playlistWindowSeconds"
                },
                "description": "Time window (in seconds) contained in each parent manifest."
              }
            ]
          },
          "ProgramDateTimeIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "programDateTimeIntervalSeconds"
                },
                "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag\ninserted into manifests. Additionally, when an interval is specified\nID3Timed Metadata messages will be generated every 5 seconds using the\ningest time of the content.\nIf the interval is not specified, or set to 0, then\nno EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no\nID3Timed Metadata messages will be generated. Note that irrespective\nof this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,\nit will be passed through to HLS output.\n"
              }
            ]
          }
        },
        "description": "A HTTP Live Streaming (HLS) manifest configuration."
      },
      "AdMarkers": {
        "enum": [
          "NONE",
          "SCTE35_ENHANCED",
          "PASSTHROUGH",
          "DATERANGE"
        ],
        "type": "string"
      },
      "AdTriggers": {
        "type": "array",
        "description": "A list of SCTE-35 message types that are treated as ad markers in the output.  If empty, no\nad markers are output.  Specify multiple items to create ad markers for all of the included\nmessage types.\n",
        "items": {
          "$ref": "#/$defs/__AdTriggersElement"
        }
      },
      "__AdTriggersElement": {
        "enum": [
          "SPLICE_INSERT",
          "BREAK",
          "PROVIDER_ADVERTISEMENT",
          "DISTRIBUTOR_ADVERTISEMENT",
          "PROVIDER_PLACEMENT_OPPORTUNITY",
          "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
          "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
          "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY"
        ],
        "type": "string"
      },
      "AdsOnDeliveryRestrictions": {
        "enum": [
          "NONE",
          "RESTRICTED",
          "UNRESTRICTED",
          "BOTH"
        ],
        "type": "string",
        "description": "This setting allows the delivery restriction flags on SCTE-35 segmentation descriptors to\ndetermine whether a message signals an ad.  Choosing \"NONE\" means no SCTE-35 messages become\nads.  Choosing \"RESTRICTED\" means SCTE-35 messages of the types specified in AdTriggers that\ncontain delivery restrictions will be treated as ads.  Choosing \"UNRESTRICTED\" means SCTE-35\nmessages of the types specified in AdTriggers that do not contain delivery restrictions will\nbe treated as ads.  Choosing \"BOTH\" means all SCTE-35 messages of the types specified in\nAdTriggers will be treated as ads.  Note that Splice Insert messages do not have these flags\nand are always treated as ads if specified in AdTriggers.\n"
      },
      "__boolean": {
        "type": "boolean"
      },
      "PlaylistType": {
        "enum": [
          "NONE",
          "EVENT",
          "VOD"
        ],
        "type": "string"
      },
      "StreamSelection": {
        "type": "object",
        "properties": {
          "MaxVideoBitsPerSecond": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "maxVideoBitsPerSecond"
                },
                "description": "The maximum video bitrate (bps) to include in output."
              }
            ]
          },
          "MinVideoBitsPerSecond": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "minVideoBitsPerSecond"
                },
                "description": "The minimum video bitrate (bps) to include in output."
              }
            ]
          },
          "StreamOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamOrder"
              },
              {
                "xml": {
                  "name": "streamOrder"
                },
                "description": "A directive that determines the order of streams in the output."
              }
            ]
          }
        },
        "description": "A StreamSelection configuration."
      },
      "StreamOrder": {
        "enum": [
          "ORIGINAL",
          "VIDEO_BITRATE_ASCENDING",
          "VIDEO_BITRATE_DESCENDING"
        ],
        "type": "string"
      },
      "DashEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "KeyRotationIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "keyRotationIntervalSeconds"
                },
                "description": "Time (in seconds) between each encryption key rotation."
              }
            ]
          },
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration."
      },
      "ManifestLayout": {
        "enum": [
          "FULL",
          "COMPACT"
        ],
        "type": "string"
      },
      "__listOf__PeriodTriggersElement": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__PeriodTriggersElement"
        }
      },
      "__PeriodTriggersElement": {
        "enum": [
          "ADS"
        ],
        "type": "string"
      },
      "Profile": {
        "enum": [
          "NONE",
          "HBBTV_1_5",
          "HYBRIDCAST",
          "DVB_DASH_2014"
        ],
        "type": "string"
      },
      "SegmentTemplateFormat": {
        "enum": [
          "NUMBER_WITH_TIMELINE",
          "TIME_WITH_TIMELINE",
          "NUMBER_WITH_DURATION"
        ],
        "type": "string"
      },
      "UtcTiming": {
        "enum": [
          "NONE",
          "HTTP-HEAD",
          "HTTP-ISO",
          "HTTP-XSDATE"
        ],
        "type": "string"
      },
      "HlsEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "constantInitializationVector"
                },
                "description": "A constant initialization vector for encryption (optional).\nWhen not specified the initialization vector will be periodically rotated.\n"
              }
            ]
          },
          "EncryptionMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionMethod"
              },
              {
                "xml": {
                  "name": "encryptionMethod"
                },
                "description": "The encryption method to use."
              }
            ]
          },
          "KeyRotationIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "keyRotationIntervalSeconds"
                },
                "description": "Interval (in seconds) between each encryption key rotation."
              }
            ]
          },
          "RepeatExtXKey": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "xml": {
                  "name": "repeatExtXKey"
                },
                "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests."
              }
            ]
          },
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "An HTTP Live Streaming (HLS) encryption configuration."
      },
      "EncryptionMethod": {
        "enum": [
          "AES_128",
          "SAMPLE_AES"
        ],
        "type": "string"
      },
      "MssEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "A Microsoft Smooth Streaming (MSS) encryption configuration."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mediapackage.us-east-1.amazonaws.com/origin_endpoints"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**Authorization**",
            "**ChannelId**",
            "**CmafPackage**",
            "**CreatedAt**",
            "**DashPackage**",
            "**Description**",
            "**HlsPackage**",
            "**Id**",
            "**ManifestName**",
            "**MssPackage**",
            "**Origination**",
            "**StartoverWindowSeconds**",
            "**Tags**",
            "**TimeDelaySeconds**",
            "**Url**",
            "**Whitelist**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
