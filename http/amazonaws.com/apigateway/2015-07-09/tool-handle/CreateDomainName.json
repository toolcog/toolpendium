{
  "name": "CreateDomainName",
  "description": "Creates a new domain name.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "domainName"
        ],
        "properties": {
          "domainName": {
            "description": "The name of the DomainName resource.",
            "type": "string"
          },
          "certificateName": {
            "description": "The user-friendly name of the certificate that will be used by edge-optimized endpoint for this domain name.",
            "type": "string"
          },
          "certificateBody": {
            "description": "[Deprecated] The body of the server certificate that will be used by edge-optimized endpoint for this domain name provided by your certificate authority.",
            "type": "string"
          },
          "certificatePrivateKey": {
            "description": "[Deprecated] Your edge-optimized endpoint's domain name certificate's private key.",
            "type": "string"
          },
          "certificateChain": {
            "description": "[Deprecated] The intermediate certificates and optionally the root certificate, one after the other without any blank lines, used by an edge-optimized endpoint for this domain name. If you include the root certificate, your certificate chain must start with intermediate certificates and end with the root certificate. Use the intermediate certificates that were provided by your certificate authority. Do not include any intermediaries that are not in the chain of trust path.",
            "type": "string"
          },
          "certificateArn": {
            "description": "The reference to an AWS-managed certificate that will be used by edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.",
            "type": "string"
          },
          "regionalCertificateName": {
            "description": "The user-friendly name of the certificate that will be used by regional endpoint for this domain name.",
            "type": "string"
          },
          "regionalCertificateArn": {
            "description": "The reference to an AWS-managed certificate that will be used by regional endpoint for this domain name. AWS Certificate Manager is the only supported source.",
            "type": "string"
          },
          "endpointConfiguration": {
            "description": "The endpoint configuration to indicate the types of endpoints an API (RestApi) or its custom domain name (DomainName) has. ",
            "type": "object",
            "properties": {
              "types": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ListOfEndpointType"
                  },
                  {
                    "description": "A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is <code>\"EDGE\"</code>. For a regional API and its custom domain name, the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is <code>PRIVATE</code>."
                  }
                ]
              },
              "vpcEndpointIds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ListOfString"
                  },
                  {
                    "description": "A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for <code>PRIVATE</code> endpoint type."
                  }
                ]
              }
            }
          },
          "tags": {
            "description": "The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          },
          "securityPolicy": {
            "description": "The Transport Layer Security (TLS) version + cipher suite for this DomainName. The valid values are <code>TLS_1_0</code> and <code>TLS_1_2</code>.",
            "type": "string",
            "enum": [
              "TLS_1_0",
              "TLS_1_2"
            ]
          },
          "mutualTlsAuthentication": {
            "description": "The mutual TLS authentication configuration for a custom domain name. If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.",
            "type": "object",
            "properties": {
              "truststoreUri": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example <code>s3://bucket-name/key-name</code>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object."
                  }
                ]
              },
              "truststoreVersion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket"
                  }
                ]
              }
            }
          },
          "ownershipVerificationCertificateArn": {
            "description": "The ARN of the public certificate issued by ACM to validate ownership of your custom domain. Only required when configuring mutual TLS and using an ACM imported or private CA certificate ARN as the regionalCertificateArn.",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "ListOfEndpointType": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EndpointType"
        }
      },
      "EndpointType": {
        "type": "string",
        "enum": [
          "REGIONAL",
          "EDGE",
          "PRIVATE"
        ],
        "description": "The endpoint type. The valid values are <code>EDGE</code> for edge-optimized API setup, most suitable for mobile applications; <code>REGIONAL</code> for regional API endpoint setup, most suitable for calling from AWS Region; and <code>PRIVATE</code> for private APIs."
      },
      "ListOfString": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://apigateway.us-east-1.amazonaws.com/domainnames"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a custom domain name as a user-friendly host name of an API (RestApi).",
        "**Key properties:**",
        {
          "$ul": [
            "**domainName**",
            "**certificateName**",
            "**certificateArn**",
            "**certificateUploadDate**",
            "**regionalDomainName**",
            "**regionalHostedZoneId**",
            "**regionalCertificateName**",
            "**regionalCertificateArn**",
            "**distributionDomainName**",
            "**distributionHostedZoneId**",
            "**endpointConfiguration**",
            "**domainNameStatus**",
            "**domainNameStatusMessage**",
            "**securityPolicy**",
            "**tags**",
            "**mutualTlsAuthentication**",
            "**ownershipVerificationCertificateArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
