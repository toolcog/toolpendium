{
  "name": "RespondDecisionTaskCompleted",
  "description": "<p>Used by deciders to tell the service that the <a>DecisionTask</a> identified by the <code>taskToken</code> has successfully completed. The <code>decisions</code> argument specifies the list of decisions made while processing the task.</p> <p>A <code>DecisionTaskCompleted</code> event is added to the workflow history. The <code>executionContext</code> specified is attached to the event in the workflow execution history.</p> <p> <b>Access Control</b> </p> <p>If an IAM policy grants permission to use <code>RespondDecisionTaskCompleted</code>, it can express permissions for the list of decisions in the <code>decisions</code> parameter. Each of the decisions has one or more parameters, much like a regular API call. To allow for policies to be as readable as possible, you can express permissions on decisions as if they were actual API calls, including applying conditions to some parameters. For more information, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SimpleWorkflowService.RespondDecisionTaskCompleted"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/RespondDecisionTaskCompletedInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "RespondDecisionTaskCompletedInput": {
        "type": "object",
        "required": [
          "taskToken"
        ],
        "title": "RespondDecisionTaskCompletedInput",
        "properties": {
          "taskToken": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskToken"
              },
              {
                "description": "<p>The <code>taskToken</code> from the <a>DecisionTask</a>.</p> <important> <p> <code>taskToken</code> is generated by the service and should be treated as an opaque value. If the task is passed to another process, its <code>taskToken</code> must also be passed. This enables it to provide its progress and respond with results.</p> </important>"
              }
            ]
          },
          "decisions": {
            "allOf": [
              {
                "$ref": "#/$defs/DecisionList"
              },
              {
                "description": "The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the <a>Decision</a> structure for details."
              }
            ]
          },
          "executionContext": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "User defined context to add to workflow execution."
              }
            ]
          }
        },
        "description": "Input data for a TaskCompleted response to a decision task."
      },
      "TaskToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DecisionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Decision"
        }
      },
      "Decision": {
        "type": "object",
        "required": [
          "decisionType"
        ],
        "properties": {
          "decisionType": {
            "allOf": [
              {
                "$ref": "#/$defs/DecisionType"
              },
              {
                "description": "Specifies the type of the decision."
              }
            ]
          },
          "scheduleActivityTaskDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleActivityTaskDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>ScheduleActivityTask</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "requestCancelActivityTaskDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestCancelActivityTaskDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>RequestCancelActivityTask</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "completeWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/CompleteWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>CompleteWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "failWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/FailWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>FailWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "cancelWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/CancelWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>CancelWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "continueAsNewWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/ContinueAsNewWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "recordMarkerDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/RecordMarkerDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>RecordMarker</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "startTimerDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/StartTimerDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>StartTimer</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "cancelTimerDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/CancelTimerDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>CancelTimer</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "signalExternalWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/SignalExternalWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>SignalExternalWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "requestCancelExternalWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestCancelExternalWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "startChildWorkflowExecutionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/StartChildWorkflowExecutionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>StartChildWorkflowExecution</code> decision. It isn't set for other decision types."
              }
            ]
          },
          "scheduleLambdaFunctionDecisionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleLambdaFunctionDecisionAttributes"
              },
              {
                "description": "Provides the details of the <code>ScheduleLambdaFunction</code> decision. It isn't set for other decision types."
              }
            ]
          }
        },
        "description": "<p>Specifies a decision made by the decider. A decision can be one of these types:</p> <ul> <li> <p> <code>CancelTimer</code> – Cancels a previously started timer and records a <code>TimerCanceled</code> event in the history.</p> </li> <li> <p> <code>CancelWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCanceled</code> event in the history.</p> </li> <li> <p> <code>CompleteWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCompleted</code> event in the history .</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecution</code> – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A <code>WorkflowExecutionContinuedAsNew</code> event is recorded in the history.</p> </li> <li> <p> <code>FailWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionFailed</code> event in the history.</p> </li> <li> <p> <code>RecordMarker</code> – Records a <code>MarkerRecorded</code> event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don't need to look at the history beyond the marker event.</p> </li> <li> <p> <code>RequestCancelActivityTask</code> – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to <a>RecordActivityTaskHeartbeat</a>.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecution</code> – Requests that a request be made to cancel the specified external workflow execution and records a <code>RequestCancelExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>ScheduleActivityTask</code> – Schedules an activity task.</p> </li> <li> <p> <code>SignalExternalWorkflowExecution</code> – Requests a signal to be delivered to the specified external workflow execution and records a <code>SignalExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>StartChildWorkflowExecution</code> – Requests that a child workflow execution be started and records a <code>StartChildWorkflowExecutionInitiated</code> event in the history. The child workflow execution is a separate workflow execution with its own history.</p> </li> <li> <p> <code>StartTimer</code> – Starts a timer for this workflow execution and records a <code>TimerStarted</code> event in the history. This timer fires after the specified delay and record a <code>TimerFired</code> event.</p> </li> </ul> <p> <b>Access Control</b> </p> <p>If you grant permission to use <code>RespondDecisionTaskCompleted</code>, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <p> <b>Decision Failure</b> </p> <p>Decisions can fail for several reasons</p> <ul> <li> <p>The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.</p> </li> <li> <p>A limit on your account was reached.</p> </li> <li> <p>The decision lacks sufficient permissions.</p> </li> </ul> <p>One of the following events might be added to the history to indicate an error. The event attribute's <code>cause</code> parameter indicates the cause. If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <ul> <li> <p> <code>ScheduleActivityTaskFailed</code> – A <code>ScheduleActivityTask</code> decision failed. This could happen if the activity type specified in the decision isn't registered, is in a deprecated state, or the decision isn't properly configured.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – A <code>RequestCancelActivityTask</code> decision failed. This could happen if there is no open activity task with the specified activityId.</p> </li> <li> <p> <code>StartTimerFailed</code> – A <code>StartTimer</code> decision failed. This could happen if there is another open timer with the same timerId.</p> </li> <li> <p> <code>CancelTimerFailed</code> – A <code>CancelTimer</code> decision failed. This could happen if there is no open timer with the specified timerId.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – A <code>StartChildWorkflowExecution</code> decision failed. This could happen if the workflow type specified isn't registered, is deprecated, or the decision isn't properly configured.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – A <code>SignalExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – A <code>RequestCancelExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A <code>CancelWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – A <code>CompleteWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – A <code>ContinueAsNewWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A <code>FailWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> </ul> <p>The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.</p> <note> <p>A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: <code>CompleteWorkflowExecution</code>, <code>FailWorkflowExecution</code>, <code>CancelWorkflowExecution</code> and <code>ContinueAsNewWorkflowExecution</code>. An <code>UnhandledDecision</code> fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call <a>RespondDecisionTaskCompleted</a> without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.</p> </note> <p> <b>How to Code a Decision</b> </p> <p>You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:</p> <ul> <li> <p> <code> <a>ScheduleActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CompleteWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>FailWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>ContinueAsNewWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RecordMarkerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>SignalExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartChildWorkflowExecutionDecisionAttributes</a> </code> </p> </li> </ul>"
      },
      "DecisionType": {
        "type": "string",
        "enum": [
          "ScheduleActivityTask",
          "RequestCancelActivityTask",
          "CompleteWorkflowExecution",
          "FailWorkflowExecution",
          "CancelWorkflowExecution",
          "ContinueAsNewWorkflowExecution",
          "RecordMarker",
          "StartTimer",
          "CancelTimer",
          "SignalExternalWorkflowExecution",
          "RequestCancelExternalWorkflowExecution",
          "StartChildWorkflowExecution",
          "ScheduleLambdaFunction"
        ]
      },
      "ScheduleActivityTaskDecisionAttributes": {
        "type": "object",
        "required": [
          "activityType",
          "activityId"
        ],
        "properties": {
          "activityType": {
            "allOf": [
              {
                "$ref": "#/$defs/ActivityType"
              },
              {
                "description": " The type of the activity task to schedule."
              }
            ]
          },
          "activityId": {
            "allOf": [
              {
                "$ref": "#/$defs/ActivityId"
              },
              {
                "description": "<p> The <code>activityId</code> of the activity task.</p> <p>The specified string must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\\u0000-\\u001f</code> | <code>\\u007f-\\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>"
              }
            ]
          },
          "control": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity."
              }
            ]
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The input provided to the activity task."
              }
            ]
          },
          "scheduleToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>The maximum duration for this activity task.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "taskList": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskList"
              },
              {
                "description": "<p>If set, specifies the name of the task list in which to schedule the activity task. If not specified, the <code>defaultTaskList</code> registered with the activity type is used.</p> <note> <p>A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault is returned.</p> </note> <p>The specified string must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\\u0000-\\u001f</code> | <code>\\u007f-\\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>"
              }
            ]
          },
          "taskPriority": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskPriority"
              },
              {
                "description": "<p> If set, specifies the priority with which the activity task is to be assigned to a worker. This overrides the defaultTaskPriority specified when registering the activity type using <a>RegisterActivityType</a>. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html\">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
              }
            ]
          },
          "scheduleToStartTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p> If set, specifies the maximum duration the activity task can wait to be assigned to a worker. This overrides the default schedule-to-start timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "startToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>If set, specifies the maximum duration a worker may take to process this activity task. This overrides the default start-to-close timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "heartbeatTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>If set, specifies the maximum time before which a worker processing a task of this type must report progress by calling <a>RecordActivityTaskHeartbeat</a>. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or returns a result, it is ignored. This overrides the default heartbeat timeout specified when registering the activity type using <a>RegisterActivityType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p>"
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>ScheduleActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code> – String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code> – String constraint. The key is <code>swf:activityType.version</code>.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "ActivityType": {
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "<p>The name of this activity.</p> <note> <p>The combination of activity type name and version must be unique within a domain.</p> </note>"
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "<p>The version of this activity.</p> <note> <p>The combination of activity type name and version must be unique with in a domain.</p> </note>"
              }
            ]
          }
        },
        "description": "Represents an activity type."
      },
      "Name": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Version": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "ActivityId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Data": {
        "type": "string",
        "maxLength": 32768
      },
      "DurationInSecondsOptional": {
        "type": "string",
        "maxLength": 8
      },
      "TaskList": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the task list."
              }
            ]
          }
        },
        "description": "Represents a task list."
      },
      "TaskPriority": {
        "type": "string"
      },
      "RequestCancelActivityTaskDecisionAttributes": {
        "type": "object",
        "required": [
          "activityId"
        ],
        "properties": {
          "activityId": {
            "allOf": [
              {
                "$ref": "#/$defs/ActivityId"
              },
              {
                "description": "The <code>activityId</code> of the activity task to be canceled."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>RequestCancelActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "CompleteWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "properties": {
          "result": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The result of the workflow execution. The form of the result is implementation defined."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>CompleteWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "FailWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "properties": {
          "reason": {
            "allOf": [
              {
                "$ref": "#/$defs/FailureReason"
              },
              {
                "description": "A descriptive reason for the failure that may help in diagnostics."
              }
            ]
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": " Details of the failure."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "FailureReason": {
        "type": "string",
        "maxLength": 256
      },
      "CancelWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "properties": {
          "details": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": " Details of the cancellation."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>CancelWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "ContinueAsNewWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "properties": {
          "input": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The input provided to the new workflow execution."
              }
            ]
          },
          "executionStartToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>If set, specifies the total duration for this workflow execution. This overrides the <code>defaultExecutionStartToCloseTimeout</code> specified when registering the workflow type.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "taskList": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskList"
              },
              {
                "description": "The task list to use for the decisions of the new (continued) workflow execution."
              }
            ]
          },
          "taskPriority": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskPriority"
              },
              {
                "description": "<p> The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html\">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
              }
            ]
          },
          "taskStartToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "childPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ChildPolicy"
              },
              {
                "description": "<p>If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul> <note> <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "tagList": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>."
              }
            ]
          },
          "workflowTypeVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "The version of the workflow to start."
              }
            ]
          },
          "lambdaRole": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The IAM role to attach to the new (continued) execution."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tag</code> – A tag used to identify the workflow execution</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "ChildPolicy": {
        "type": "string",
        "enum": [
          "TERMINATE",
          "REQUEST_CANCEL",
          "ABANDON"
        ]
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "maxItems": 5
      },
      "Tag": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "Arn": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1600
      },
      "RecordMarkerDecisionAttributes": {
        "type": "object",
        "required": [
          "markerName"
        ],
        "properties": {
          "markerName": {
            "allOf": [
              {
                "$ref": "#/$defs/MarkerName"
              },
              {
                "description": " The name of the marker."
              }
            ]
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": " The details of the marker."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>RecordMarker</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "MarkerName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "StartTimerDecisionAttributes": {
        "type": "object",
        "required": [
          "timerId",
          "startToFireTimeout"
        ],
        "properties": {
          "timerId": {
            "allOf": [
              {
                "$ref": "#/$defs/TimerId"
              },
              {
                "description": "<p> The unique ID of the timer.</p> <p>The specified string must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\\u0000-\\u001f</code> | <code>\\u007f-\\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>"
              }
            ]
          },
          "control": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The data attached to the event that can be used by the decider in subsequent workflow tasks."
              }
            ]
          },
          "startToFireTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSeconds"
              },
              {
                "description": "<p> The duration to wait before firing the timer.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>.</p>"
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>StartTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "TimerId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "DurationInSeconds": {
        "type": "string",
        "minLength": 1,
        "maxLength": 8
      },
      "CancelTimerDecisionAttributes": {
        "type": "object",
        "required": [
          "timerId"
        ],
        "properties": {
          "timerId": {
            "allOf": [
              {
                "$ref": "#/$defs/TimerId"
              },
              {
                "description": " The unique ID of the timer to cancel."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>CancelTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "SignalExternalWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "required": [
          "workflowId",
          "signalName"
        ],
        "properties": {
          "workflowId": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowId"
              },
              {
                "description": " The <code>workflowId</code> of the workflow execution to be signaled."
              }
            ]
          },
          "runId": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowRunIdOptional"
              },
              {
                "description": "The <code>runId</code> of the workflow execution to be signaled."
              }
            ]
          },
          "signalName": {
            "allOf": [
              {
                "$ref": "#/$defs/SignalName"
              },
              {
                "description": " The name of the signal.The target workflow execution uses the signal name and input to process the signal."
              }
            ]
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": " The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal."
              }
            ]
          },
          "control": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The data attached to the event that can be used by the decider in subsequent decision tasks."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "WorkflowId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "WorkflowRunIdOptional": {
        "type": "string",
        "maxLength": 64
      },
      "SignalName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "RequestCancelExternalWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "required": [
          "workflowId"
        ],
        "properties": {
          "workflowId": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowId"
              },
              {
                "description": " The <code>workflowId</code> of the external workflow execution to cancel."
              }
            ]
          },
          "runId": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowRunIdOptional"
              },
              {
                "description": "The <code>runId</code> of the external workflow execution to cancel."
              }
            ]
          },
          "control": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The data attached to the event that can be used by the decider in subsequent workflow tasks."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "StartChildWorkflowExecutionDecisionAttributes": {
        "type": "object",
        "required": [
          "workflowType",
          "workflowId"
        ],
        "properties": {
          "workflowType": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowType"
              },
              {
                "description": " The type of the workflow execution to be started."
              }
            ]
          },
          "workflowId": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowId"
              },
              {
                "description": "<p> The <code>workflowId</code> of the workflow execution.</p> <p>The specified string must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\\u0000-\\u001f</code> | <code>\\u007f-\\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>"
              }
            ]
          },
          "control": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the child workflow execution."
              }
            ]
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The input to be provided to the workflow execution."
              }
            ]
          },
          "executionStartToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "taskList": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskList"
              },
              {
                "description": "<p>The name of the task list to be used for decision tasks of the child workflow execution.</p> <note> <p>A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.</p> </note> <p>The specified string must not start or end with whitespace. It must not contain a <code>:</code> (colon), <code>/</code> (slash), <code>|</code> (vertical bar), or any control characters (<code>\\u0000-\\u001f</code> | <code>\\u007f-\\u009f</code>). Also, it must <i>not</i> be the literal string <code>arn</code>.</p>"
              }
            ]
          },
          "taskPriority": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskPriority"
              },
              {
                "description": "<p> A task priority that, if set, specifies the priority for a decision task of this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's <code>Integer.MIN_VALUE</code> (-2147483648) to <code>Integer.MAX_VALUE</code> (2147483647). Higher numbers indicate higher priority.</p> <p>For more information about setting task priority, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/programming-priority.html\">Setting Task Priority</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
              }
            ]
          },
          "taskStartToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the <code>defaultTaskStartToCloseTimout</code> specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The duration is specified in seconds, an integer greater than or equal to <code>0</code>. You can use <code>NONE</code> to specify unlimited duration.</p> <note> <p>A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "childPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ChildPolicy"
              },
              {
                "description": "<p> If set, specifies the policy to use for the child workflow executions if the workflow execution being started is terminated by calling the <a>TerminateWorkflowExecution</a> action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using <a>RegisterWorkflowType</a>.</p> <p>The supported child policies are:</p> <ul> <li> <p> <code>TERMINATE</code> – The child executions are terminated.</p> </li> <li> <p> <code>REQUEST_CANCEL</code> – A request to cancel is attempted for each child execution by recording a <code>WorkflowExecutionCancelRequested</code> event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> </li> <li> <p> <code>ABANDON</code> – No action is taken. The child executions continue to run.</p> </li> </ul> <note> <p>A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned.</p> </note>"
              }
            ]
          },
          "tagList": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling <a>ListOpenWorkflowExecutions</a> or <a>ListClosedWorkflowExecutions</a> and specifying a <a>TagFilter</a>."
              }
            ]
          },
          "lambdaRole": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The IAM role attached to the child workflow execution."
              }
            ]
          }
        },
        "description": "<p>Provides the details of the <code>StartChildWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.N</code> – The key is \"swf:tagList.N\" where N is the tag number from 0 to 4, inclusive.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code> – String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>"
      },
      "WorkflowType": {
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "<p> The name of the workflow type.</p> <note> <p>The combination of workflow type name and version must be unique with in a domain.</p> </note>"
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "<p> The version of the workflow type.</p> <note> <p>The combination of workflow type name and version must be unique with in a domain.</p> </note>"
              }
            ]
          }
        },
        "description": "Represents a workflow type."
      },
      "ScheduleLambdaFunctionDecisionAttributes": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/FunctionId"
              },
              {
                "description": "A string that identifies the Lambda function execution in the event history."
              }
            ]
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/FunctionName"
              },
              {
                "description": "The name, or ARN, of the Lambda function to schedule."
              }
            ]
          },
          "control": {
            "allOf": [
              {
                "$ref": "#/$defs/Data"
              },
              {
                "description": "The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task."
              }
            ]
          },
          "input": {
            "allOf": [
              {
                "$ref": "#/$defs/FunctionInput"
              },
              {
                "description": "The optional input data to be supplied to the Lambda function."
              }
            ]
          },
          "startToCloseTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationInSecondsOptional"
              },
              {
                "description": "<p>The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-900 (1s-15m).</p> <p>If no value is supplied, then a default value of 900s is assumed.</p>"
              }
            ]
          }
        },
        "description": "Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of decisions <code>decisions</code> passed to <a>RespondDecisionTaskCompleted</a>."
      },
      "FunctionId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "FunctionName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "FunctionInput": {
        "type": "string",
        "minLength": 0,
        "maxLength": 32768
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://swf.us-east-1.amazonaws.com/#X-Amz-Target=SimpleWorkflowService.RespondDecisionTaskCompleted"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
