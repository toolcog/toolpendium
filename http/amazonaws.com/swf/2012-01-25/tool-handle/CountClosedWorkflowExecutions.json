{
  "name": "CountClosedWorkflowExecutions",
  "description": "<p>Returns the number of closed workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href=\"https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html\">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SimpleWorkflowService.CountClosedWorkflowExecutions"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CountClosedWorkflowExecutionsInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CountClosedWorkflowExecutionsInput": {
        "type": "object",
        "required": [
          "domain"
        ],
        "title": "CountClosedWorkflowExecutionsInput",
        "properties": {
          "domain": {
            "allOf": [
              {
                "$ref": "#/$defs/DomainName"
              },
              {
                "description": "The name of the domain containing the workflow executions to count."
              }
            ]
          },
          "startTimeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutionTimeFilter"
              },
              {
                "description": "<p>If specified, only workflow executions that meet the start time criteria of the filter are counted.</p> <note> <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p> </note>"
              }
            ]
          },
          "closeTimeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutionTimeFilter"
              },
              {
                "description": "<p>If specified, only workflow executions that meet the close time criteria of the filter are counted.</p> <note> <p> <code>startTimeFilter</code> and <code>closeTimeFilter</code> are mutually exclusive. You must specify one of these in a request but not both.</p> </note>"
              }
            ]
          },
          "executionFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowExecutionFilter"
              },
              {
                "description": "<p>If specified, only workflow executions matching the <code>WorkflowId</code> in the filter are counted.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>"
              }
            ]
          },
          "typeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowTypeFilter"
              },
              {
                "description": "<p>If specified, indicates the type of the workflow executions to be counted.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>"
              }
            ]
          },
          "tagFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TagFilter"
              },
              {
                "description": "<p>If specified, only executions that have a tag that matches the filter are counted.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>"
              }
            ]
          },
          "closeStatusFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/CloseStatusFilter"
              },
              {
                "description": "<p>If specified, only workflow executions that match this close status are counted. This filter has an affect only if <code>executionStatus</code> is specified as <code>CLOSED</code>.</p> <note> <p> <code>closeStatusFilter</code>, <code>executionFilter</code>, <code>typeFilter</code> and <code>tagFilter</code> are mutually exclusive. You can specify at most one of these in a request.</p> </note>"
              }
            ]
          }
        }
      },
      "DomainName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "ExecutionTimeFilter": {
        "type": "object",
        "required": [
          "oldestDate"
        ],
        "properties": {
          "oldestDate": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Specifies the oldest start or close date and time to return."
              }
            ]
          },
          "latestDate": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Specifies the latest start or close date and time to return."
              }
            ]
          }
        },
        "description": "Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix Time format</a>. For example: <code>\"oldestDate\": 1325376070.</code> "
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "WorkflowExecutionFilter": {
        "type": "object",
        "required": [
          "workflowId"
        ],
        "properties": {
          "workflowId": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowId"
              },
              {
                "description": "The workflowId to pass of match the criteria of this filter."
              }
            ]
          }
        },
        "description": "Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>."
      },
      "WorkflowId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "WorkflowTypeFilter": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": " Name of the workflow type."
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionOptional"
              },
              {
                "description": "Version of the workflow type."
              }
            ]
          }
        },
        "description": "Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result."
      },
      "Name": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "VersionOptional": {
        "type": "string",
        "maxLength": 64
      },
      "TagFilter": {
        "type": "object",
        "required": [
          "tag"
        ],
        "properties": {
          "tag": {
            "allOf": [
              {
                "$ref": "#/$defs/Tag"
              },
              {
                "description": "<p> Specifies the tag that must be associated with the execution for it to meet the filter criteria.</p> <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>"
              }
            ]
          }
        },
        "description": "Used to filter the workflow executions in visibility APIs based on a tag."
      },
      "Tag": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "CloseStatusFilter": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/$defs/CloseStatus"
              },
              {
                "description": " The close status that must match the close status of an execution for it to meet the criteria of this filter."
              }
            ]
          }
        },
        "description": "Used to filter the closed workflow executions in visibility APIs by their close status."
      },
      "CloseStatus": {
        "type": "string",
        "enum": [
          "COMPLETED",
          "FAILED",
          "CANCELED",
          "TERMINATED",
          "CONTINUED_AS_NEW",
          "TIMED_OUT"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://swf.us-east-1.amazonaws.com/#X-Amz-Target=SimpleWorkflowService.CountClosedWorkflowExecutions"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Contains the count of workflow executions returned from <a>CountOpenWorkflowExecutions</a> or <a>CountClosedWorkflowExecutions</a> ",
        "**Key properties:**",
        {
          "$ul": [
            "**count**",
            "**truncated**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
