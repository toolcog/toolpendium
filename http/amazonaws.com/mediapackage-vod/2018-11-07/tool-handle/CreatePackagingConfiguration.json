{
  "name": "CreatePackagingConfiguration",
  "description": "Creates a new MediaPackage VOD PackagingConfiguration resource.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "id",
          "packagingGroupId"
        ],
        "properties": {
          "cmafPackage": {
            "description": "A CMAF packaging configuration.",
            "type": "object",
            "properties": {
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CmafEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "HlsManifests": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOfHlsManifest"
                  },
                  {
                    "xml": {
                      "name": "hlsManifests"
                    },
                    "description": "A list of HLS manifest configurations."
                  }
                ]
              },
              "IncludeEncoderConfigurationInSegments": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeEncoderConfigurationInSegments"
                    },
                    "description": "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.\n"
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "Duration (in seconds) of each fragment. Actual fragments will be\nrounded to the nearest multiple of the source fragment duration.\n"
                  }
                ]
              }
            }
          },
          "dashPackage": {
            "description": "A Dynamic Adaptive Streaming over HTTP (DASH) packaging configuration.",
            "type": "object",
            "properties": {
              "DashManifests": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOfDashManifest"
                  },
                  {
                    "xml": {
                      "name": "dashManifests"
                    },
                    "description": "A list of DASH manifest configurations."
                  }
                ]
              },
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DashEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "IncludeEncoderConfigurationInSegments": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeEncoderConfigurationInSegments"
                    },
                    "description": "When includeEncoderConfigurationInSegments is set to true, MediaPackage places your encoder's Sequence Parameter Set (SPS), Picture Parameter Set (PPS), and Video Parameter Set (VPS) metadata in every video segment instead of in the init fragment. This lets you use different SPS/PPS/VPS settings for your assets during content playback.\n"
                  }
                ]
              },
              "IncludeIframeOnlyStream": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeIframeOnlyStream"
                    },
                    "description": "When enabled, an I-Frame only stream will be included in the output."
                  }
                ]
              },
              "PeriodTriggers": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOf__PeriodTriggersElement"
                  },
                  {
                    "xml": {
                      "name": "periodTriggers"
                    },
                    "description": "A list of triggers that controls when the outgoing Dynamic Adaptive Streaming over HTTP (DASH)\nMedia Presentation Description (MPD) will be partitioned into multiple periods. If empty, the content will not\nbe partitioned into more than one period. If the list contains \"ADS\", new periods will be created where\nthe Asset contains SCTE-35 ad markers.\n"
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "Duration (in seconds) of each segment. Actual segments will be\nrounded to the nearest multiple of the source segment duration.\n"
                  }
                ]
              },
              "SegmentTemplateFormat": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SegmentTemplateFormat"
                  },
                  {
                    "xml": {
                      "name": "segmentTemplateFormat"
                    },
                    "description": "Determines the type of SegmentTemplate included in the Media Presentation Description (MPD).  When set to NUMBER_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Number$ media URLs.  When set to TIME_WITH_TIMELINE, a full timeline is presented in each SegmentTemplate, with $Time$ media URLs. When set to NUMBER_WITH_DURATION, only a duration is included in each SegmentTemplate, with $Number$ media URLs."
                  }
                ]
              }
            }
          },
          "hlsPackage": {
            "description": "An HTTP Live Streaming (HLS) packaging configuration.",
            "type": "object",
            "properties": {
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/HlsEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "HlsManifests": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOfHlsManifest"
                  },
                  {
                    "xml": {
                      "name": "hlsManifests"
                    },
                    "description": "A list of HLS manifest configurations."
                  }
                ]
              },
              "IncludeDvbSubtitles": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "includeDvbSubtitles"
                    },
                    "description": "When enabled, MediaPackage passes through digital video broadcasting (DVB) subtitles into the output."
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "Duration (in seconds) of each fragment. Actual fragments will be\nrounded to the nearest multiple of the source fragment duration.\n"
                  }
                ]
              },
              "UseAudioRenditionGroup": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "useAudioRenditionGroup"
                    },
                    "description": "When enabled, audio streams will be placed in rendition groups in the output."
                  }
                ]
              }
            }
          },
          "id": {
            "description": "The ID of the PackagingConfiguration.",
            "type": "string"
          },
          "mssPackage": {
            "description": "A Microsoft Smooth Streaming (MSS) PackagingConfiguration.",
            "type": "object",
            "properties": {
              "Encryption": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MssEncryption"
                  },
                  {
                    "xml": {
                      "name": "encryption"
                    }
                  }
                ]
              },
              "MssManifests": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOfMssManifest"
                  },
                  {
                    "xml": {
                      "name": "mssManifests"
                    },
                    "description": "A list of MSS manifest configurations."
                  }
                ]
              },
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "segmentDurationSeconds"
                    },
                    "description": "The duration (in seconds) of each segment."
                  }
                ]
              }
            }
          },
          "packagingGroupId": {
            "description": "The ID of a PackagingGroup.",
            "type": "string"
          },
          "tags": {
            "description": "A collection of tags associated with a resource",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/__string"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "CmafEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "constantInitializationVector"
                },
                "description": "An optional 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting blocks. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV)."
              }
            ]
          },
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "A CMAF encryption configuration."
      },
      "__string": {
        "type": "string"
      },
      "SpekeKeyProvider": {
        "required": [
          "SystemIds",
          "Url",
          "RoleArn"
        ],
        "type": "object",
        "properties": {
          "EncryptionContractConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionContractConfiguration"
              },
              {
                "xml": {
                  "name": "encryptionContractConfiguration"
                }
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "roleArn"
                },
                "description": "An Amazon Resource Name (ARN) of an IAM role that AWS Elemental\nMediaPackage will assume when accessing the key provider service.\n"
              }
            ]
          },
          "SystemIds": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOf__string"
              },
              {
                "xml": {
                  "name": "systemIds"
                },
                "description": "The system IDs to include in key requests."
              }
            ]
          },
          "Url": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "url"
                },
                "description": "The URL of the external key provider service."
              }
            ]
          }
        },
        "description": "A configuration for accessing an external Secure Packager and Encoder Key Exchange (SPEKE) service that will provide encryption keys."
      },
      "EncryptionContractConfiguration": {
        "required": [
          "PresetSpeke20Audio",
          "PresetSpeke20Video"
        ],
        "type": "object",
        "properties": {
          "PresetSpeke20Audio": {
            "allOf": [
              {
                "$ref": "#/$defs/PresetSpeke20Audio"
              },
              {
                "xml": {
                  "name": "presetSpeke20Audio"
                },
                "description": "A collection of audio encryption presets."
              }
            ]
          },
          "PresetSpeke20Video": {
            "allOf": [
              {
                "$ref": "#/$defs/PresetSpeke20Video"
              },
              {
                "xml": {
                  "name": "presetSpeke20Video"
                },
                "description": "A collection of video encryption presets."
              }
            ]
          }
        },
        "description": "Use encryptionContractConfiguration to configure one or more content encryption keys for your endpoints that use SPEKE 2.0. \nThe encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. \nTo configure the encryption contract, specify which audio and video encryption presets to use.\nNote the following considerations when using encryptionContractConfiguration:\nencryptionContractConfiguration can be used for DASH endpoints that use SPEKE 2.0. SPEKE 2.0 relies on the CPIX 2.3 specification.\nYou must disable key rotation for this endpoint by setting keyRotationIntervalSeconds to 0.\n"
      },
      "PresetSpeke20Audio": {
        "enum": [
          "PRESET-AUDIO-1",
          "PRESET-AUDIO-2",
          "PRESET-AUDIO-3",
          "SHARED",
          "UNENCRYPTED"
        ],
        "type": "string"
      },
      "PresetSpeke20Video": {
        "enum": [
          "PRESET-VIDEO-1",
          "PRESET-VIDEO-2",
          "PRESET-VIDEO-3",
          "PRESET-VIDEO-4",
          "PRESET-VIDEO-5",
          "PRESET-VIDEO-6",
          "PRESET-VIDEO-7",
          "PRESET-VIDEO-8",
          "SHARED",
          "UNENCRYPTED"
        ],
        "type": "string"
      },
      "__listOf__string": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__string"
        }
      },
      "__listOfHlsManifest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HlsManifest"
        }
      },
      "HlsManifest": {
        "type": "object",
        "properties": {
          "AdMarkers": {
            "allOf": [
              {
                "$ref": "#/$defs/AdMarkers"
              },
              {
                "xml": {
                  "name": "adMarkers"
                },
                "description": "This setting controls how ad markers are included in the packaged OriginEndpoint.\n\"NONE\" will omit all SCTE-35 ad markers from the output.\n\"PASSTHROUGH\" causes the manifest to contain a copy of the SCTE-35 ad\nmarkers (comments) taken directly from the input HTTP Live Streaming (HLS) manifest.\n\"SCTE35_ENHANCED\" generates ad markers and blackout tags based on SCTE-35\nmessages in the input source.\n"
              }
            ]
          },
          "IncludeIframeOnlyStream": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "xml": {
                  "name": "includeIframeOnlyStream"
                },
                "description": "When enabled, an I-Frame only stream will be included in the output."
              }
            ]
          },
          "ManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "manifestName"
                },
                "description": "An optional string to include in the name of the manifest."
              }
            ]
          },
          "ProgramDateTimeIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "programDateTimeIntervalSeconds"
                },
                "description": "The interval (in seconds) between each EXT-X-PROGRAM-DATE-TIME tag\ninserted into manifests. Additionally, when an interval is specified\nID3Timed Metadata messages will be generated every 5 seconds using the\ningest time of the content.\nIf the interval is not specified, or set to 0, then\nno EXT-X-PROGRAM-DATE-TIME tags will be inserted into manifests and no\nID3Timed Metadata messages will be generated. Note that irrespective\nof this parameter, if any ID3 Timed Metadata is found in HTTP Live Streaming (HLS) input,\nit will be passed through to HLS output.\n"
              }
            ]
          },
          "RepeatExtXKey": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "xml": {
                  "name": "repeatExtXKey"
                },
                "description": "When enabled, the EXT-X-KEY tag will be repeated in output manifests."
              }
            ]
          },
          "StreamSelection": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamSelection"
              },
              {
                "xml": {
                  "name": "streamSelection"
                }
              }
            ]
          }
        },
        "description": "An HTTP Live Streaming (HLS) manifest configuration."
      },
      "AdMarkers": {
        "enum": [
          "NONE",
          "SCTE35_ENHANCED",
          "PASSTHROUGH"
        ],
        "type": "string"
      },
      "__boolean": {
        "type": "boolean"
      },
      "__integer": {
        "type": "integer"
      },
      "StreamSelection": {
        "type": "object",
        "properties": {
          "MaxVideoBitsPerSecond": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "maxVideoBitsPerSecond"
                },
                "description": "The maximum video bitrate (bps) to include in output."
              }
            ]
          },
          "MinVideoBitsPerSecond": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "minVideoBitsPerSecond"
                },
                "description": "The minimum video bitrate (bps) to include in output."
              }
            ]
          },
          "StreamOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamOrder"
              },
              {
                "xml": {
                  "name": "streamOrder"
                },
                "description": "A directive that determines the order of streams in the output."
              }
            ]
          }
        },
        "description": "A StreamSelection configuration."
      },
      "StreamOrder": {
        "enum": [
          "ORIGINAL",
          "VIDEO_BITRATE_ASCENDING",
          "VIDEO_BITRATE_DESCENDING"
        ],
        "type": "string"
      },
      "__listOfDashManifest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DashManifest"
        }
      },
      "DashManifest": {
        "type": "object",
        "properties": {
          "ManifestLayout": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestLayout"
              },
              {
                "xml": {
                  "name": "manifestLayout"
                },
                "description": "Determines the position of some tags in the Media Presentation Description (MPD).  When set to FULL, elements like SegmentTemplate and ContentProtection are included in each Representation.  When set to COMPACT, duplicate elements are combined and presented at the AdaptationSet level."
              }
            ]
          },
          "ManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "manifestName"
                },
                "description": "An optional string to include in the name of the manifest."
              }
            ]
          },
          "MinBufferTimeSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "minBufferTimeSeconds"
                },
                "description": "Minimum duration (in seconds) that a player will buffer media before starting the presentation."
              }
            ]
          },
          "Profile": {
            "allOf": [
              {
                "$ref": "#/$defs/Profile"
              },
              {
                "xml": {
                  "name": "profile"
                },
                "description": "The Dynamic Adaptive Streaming over HTTP (DASH) profile type.  When set to \"HBBTV_1_5\", HbbTV 1.5 compliant output is enabled."
              }
            ]
          },
          "ScteMarkersSource": {
            "allOf": [
              {
                "$ref": "#/$defs/ScteMarkersSource"
              },
              {
                "xml": {
                  "name": "scteMarkersSource"
                },
                "description": "The source of scte markers used. When set to SEGMENTS, the scte markers are sourced from the segments of the ingested content. When set to MANIFEST, the scte markers are sourced from the manifest of the ingested content."
              }
            ]
          },
          "StreamSelection": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamSelection"
              },
              {
                "xml": {
                  "name": "streamSelection"
                }
              }
            ]
          }
        },
        "description": "A DASH manifest configuration."
      },
      "ManifestLayout": {
        "enum": [
          "FULL",
          "COMPACT"
        ],
        "type": "string"
      },
      "Profile": {
        "enum": [
          "NONE",
          "HBBTV_1_5"
        ],
        "type": "string"
      },
      "ScteMarkersSource": {
        "enum": [
          "SEGMENTS",
          "MANIFEST"
        ],
        "type": "string"
      },
      "DashEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "A Dynamic Adaptive Streaming over HTTP (DASH) encryption configuration."
      },
      "__listOf__PeriodTriggersElement": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__PeriodTriggersElement"
        }
      },
      "__PeriodTriggersElement": {
        "enum": [
          "ADS"
        ],
        "type": "string"
      },
      "SegmentTemplateFormat": {
        "enum": [
          "NUMBER_WITH_TIMELINE",
          "TIME_WITH_TIMELINE",
          "NUMBER_WITH_DURATION"
        ],
        "type": "string"
      },
      "HlsEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "constantInitializationVector"
                },
                "description": "A constant initialization vector for encryption (optional).\nWhen not specified the initialization vector will be periodically rotated.\n"
              }
            ]
          },
          "EncryptionMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionMethod"
              },
              {
                "xml": {
                  "name": "encryptionMethod"
                },
                "description": "The encryption method to use."
              }
            ]
          },
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "An HTTP Live Streaming (HLS) encryption configuration."
      },
      "EncryptionMethod": {
        "enum": [
          "AES_128",
          "SAMPLE_AES"
        ],
        "type": "string"
      },
      "MssEncryption": {
        "required": [
          "SpekeKeyProvider"
        ],
        "type": "object",
        "properties": {
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "xml": {
                  "name": "spekeKeyProvider"
                }
              }
            ]
          }
        },
        "description": "A Microsoft Smooth Streaming (MSS) encryption configuration."
      },
      "__listOfMssManifest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MssManifest"
        }
      },
      "MssManifest": {
        "type": "object",
        "properties": {
          "ManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "manifestName"
                },
                "description": "An optional string to include in the name of the manifest."
              }
            ]
          },
          "StreamSelection": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamSelection"
              },
              {
                "xml": {
                  "name": "streamSelection"
                }
              }
            ]
          }
        },
        "description": "A Microsoft Smooth Streaming (MSS) manifest configuration."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mediapackage-vod.us-east-1.amazonaws.com/packaging_configurations"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**CmafPackage**",
            "**CreatedAt**",
            "**DashPackage**",
            "**HlsPackage**",
            "**Id**",
            "**MssPackage**",
            "**PackagingGroupId**",
            "**Tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
