{
  "name": "ReEncryptData",
  "description": "<p>Re-encrypt ciphertext using DUKPT, Symmetric and Asymmetric Data Encryption Keys. </p> <p>You can either generate an encryption key within Amazon Web Services Payment Cryptography by calling <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html\">CreateKey</a> or import your own encryption key by calling <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html\">ImportKey</a>. The <code>KeyArn</code> for use with this operation must be in a compatible key state with <code>KeyModesOfUse</code> set to <code>Encrypt</code>. In asymmetric encryption, ciphertext is encrypted using public component (imported by calling <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html\">ImportKey</a>) of the asymmetric key pair created outside of Amazon Web Services Payment Cryptography. </p> <p>For symmetric and DUKPT encryption, Amazon Web Services Payment Cryptography supports <code>TDES</code> and <code>AES</code> algorithms. For asymmetric encryption, Amazon Web Services Payment Cryptography supports <code>RSA</code>. To encrypt using DUKPT, a DUKPT key must already exist within your account with <code>KeyModesOfUse</code> set to <code>DeriveKey</code> or a new DUKPT can be generated by calling <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html\">CreateKey</a>.</p> <p>For information about valid keys for this operation, see <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html\">Understanding key attributes</a> and <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html\">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>. </p> <p> <b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p> <p> <b>Related operations:</b> </p> <ul> <li> <p> <a>DecryptData</a> </p> </li> <li> <p> <a>EncryptData</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_GetPublicKeyCertificate.html\">GetPublicCertificate</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html\">ImportKey</a> </p> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "IncomingKeyIdentifier": {
        "type": "string",
        "pattern": "^arn:aws:payment-cryptography:[a-z]{2}-[a-z]{1,16}-[0-9]+:[0-9]{12}:(key/[0-9a-zA-Z]{16,64}|alias/[a-zA-Z0-9/_-]+)$|^alias/[a-zA-Z0-9/_-]+$",
        "minLength": 7,
        "maxLength": 322,
        "description": "The <code>keyARN</code> of the encryption key of incoming ciphertext data."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "CipherText",
          "IncomingEncryptionAttributes",
          "OutgoingEncryptionAttributes",
          "OutgoingKeyIdentifier"
        ],
        "properties": {
          "CipherText": {
            "description": "Ciphertext to be encrypted. The minimum allowed length is 16 bytes and maximum allowed length is 4096 bytes.",
            "type": "string",
            "pattern": "^(?:[0-9a-fA-F][0-9a-fA-F])+$",
            "minLength": 16,
            "maxLength": 4096,
            "format": "password"
          },
          "IncomingEncryptionAttributes": {
            "description": "Parameters that are required to perform reencryption operation.",
            "type": "object",
            "properties": {
              "Dukpt": {
                "$ref": "#/$defs/DukptEncryptionAttributes"
              },
              "Symmetric": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SymmetricEncryptionAttributes"
                  },
                  {
                    "description": "Parameters that are required to encrypt data using symmetric keys."
                  }
                ]
              }
            }
          },
          "OutgoingEncryptionAttributes": {
            "description": "Parameters that are required to perform reencryption operation.",
            "type": "object",
            "properties": {
              "Dukpt": {
                "$ref": "#/$defs/DukptEncryptionAttributes"
              },
              "Symmetric": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SymmetricEncryptionAttributes"
                  },
                  {
                    "description": "Parameters that are required to encrypt data using symmetric keys."
                  }
                ]
              }
            }
          },
          "OutgoingKeyIdentifier": {
            "description": "The <code>keyARN</code> of the encryption key of outgoing ciphertext data after encryption by Amazon Web Services Payment Cryptography.",
            "type": "string",
            "pattern": "^arn:aws:payment-cryptography:[a-z]{2}-[a-z]{1,16}-[0-9]+:[0-9]{12}:(key/[0-9a-zA-Z]{16,64}|alias/[a-zA-Z0-9/_-]+)$|^alias/[a-zA-Z0-9/_-]+$",
            "minLength": 7,
            "maxLength": 322
          }
        }
      }
    },
    "required": [
      "IncomingKeyIdentifier",
      "body"
    ],
    "$defs": {
      "DukptEncryptionAttributes": {
        "type": "object",
        "required": [
          "KeySerialNumber"
        ],
        "properties": {
          "DukptKeyDerivationType": {
            "allOf": [
              {
                "$ref": "#/$defs/DukptDerivationType"
              },
              {
                "description": "The key type encrypted using DUKPT from a Base Derivation Key (BDK) and Key Serial Number (KSN). This must be less than or equal to the strength of the BDK. For example, you can't use <code>AES_128</code> as a derivation type for a BDK of <code>AES_128</code> or <code>TDES_2KEY</code> "
              }
            ]
          },
          "DukptKeyVariant": {
            "allOf": [
              {
                "$ref": "#/$defs/DukptKeyVariant"
              },
              {
                "description": "The type of use of DUKPT, which can be incoming data decryption, outgoing data encryption, or both."
              }
            ]
          },
          "InitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/HexLength16Or32"
              },
              {
                "description": "An input to cryptographic primitive used to provide the intial state. Typically the <code>InitializationVector</code> must have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If you don't provide a value, Amazon Web Services Payment Cryptography generates a random value."
              }
            ]
          },
          "KeySerialNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/HexLengthBetween10And24"
              },
              {
                "description": "The unique identifier known as Key Serial Number (KSN) that comes from an encrypting device using DUKPT encryption method. The KSN is derived from the encrypting device unique identifier and an internal transaction counter."
              }
            ]
          },
          "Mode": {
            "allOf": [
              {
                "$ref": "#/$defs/DukptEncryptionMode"
              },
              {
                "description": "<p>The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size, for example, 128 bits. The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.</p> <p>The default is CBC.</p>"
              }
            ]
          }
        },
        "description": "Parameters that are required to encrypt plaintext data using DUKPT."
      },
      "DukptDerivationType": {
        "type": "string",
        "enum": [
          "TDES_2KEY",
          "TDES_3KEY",
          "AES_128",
          "AES_192",
          "AES_256"
        ]
      },
      "DukptKeyVariant": {
        "type": "string",
        "enum": [
          "BIDIRECTIONAL",
          "REQUEST",
          "RESPONSE"
        ]
      },
      "HexLength16Or32": {
        "type": "string",
        "pattern": "^(?:[0-9a-fA-F]{16}|[0-9a-fA-F]{32})$",
        "minLength": 16,
        "maxLength": 32,
        "format": "password"
      },
      "HexLengthBetween10And24": {
        "type": "string",
        "pattern": "^[0-9a-fA-F]+$",
        "minLength": 10,
        "maxLength": 24
      },
      "DukptEncryptionMode": {
        "type": "string",
        "enum": [
          "ECB",
          "CBC"
        ]
      },
      "SymmetricEncryptionAttributes": {
        "type": "object",
        "required": [
          "Mode"
        ],
        "properties": {
          "InitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/HexLength16Or32"
              },
              {
                "description": "An input to cryptographic primitive used to provide the intial state. The <code>InitializationVector</code> is typically required have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If a value is not provided, Amazon Web Services Payment Cryptography generates a random value."
              }
            ]
          },
          "Mode": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionMode"
              },
              {
                "description": "The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size (for example, 128 bits). The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block."
              }
            ]
          },
          "PaddingType": {
            "allOf": [
              {
                "$ref": "#/$defs/PaddingType"
              },
              {
                "description": "The padding to be included with the data."
              }
            ]
          }
        },
        "description": "Parameters requried to encrypt plaintext data using symmetric keys."
      },
      "EncryptionMode": {
        "type": "string",
        "enum": [
          "ECB",
          "CBC",
          "CFB",
          "CFB1",
          "CFB8",
          "CFB64",
          "CFB128",
          "OFB"
        ]
      },
      "PaddingType": {
        "type": "string",
        "enum": [
          "PKCS1",
          "OAEP_SHA1",
          "OAEP_SHA256",
          "OAEP_SHA512"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dataplane.payment-cryptography.us-east-1.amazonaws.com/keys/{IncomingKeyIdentifier}/reencrypt"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**CipherText**",
            "**KeyArn**",
            "**KeyCheckValue**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
