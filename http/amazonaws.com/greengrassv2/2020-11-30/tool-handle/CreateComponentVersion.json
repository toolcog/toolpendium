{
  "name": "CreateComponentVersion",
  "description": "<p>Creates a component. Components are software that run on Greengrass core devices. After you develop and test a component on your core device, you can use this operation to upload your component to IoT Greengrass. Then, you can deploy the component to other core devices.</p> <p>You can use this operation to do the following:</p> <ul> <li> <p> <b>Create components from recipes</b> </p> <p>Create a component from a recipe, which is a file that defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/component-recipe-reference.html\">IoT Greengrass component recipe reference</a> in the <i>IoT Greengrass V2 Developer Guide</i>.</p> <p>To create a component from a recipe, specify <code>inlineRecipe</code> when you call this operation.</p> </li> <li> <p> <b>Create components from Lambda functions</b> </p> <p>Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe and artifacts from the Lambda function's deployment package. You can use this operation to migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2.</p> <p>This function only accepts Lambda functions that use the following runtimes:</p> <ul> <li> <p>Python 2.7 – <code>python2.7</code> </p> </li> <li> <p>Python 3.7 – <code>python3.7</code> </p> </li> <li> <p>Python 3.8 – <code>python3.8</code> </p> </li> <li> <p>Python 3.9 – <code>python3.9</code> </p> </li> <li> <p>Java 8 – <code>java8</code> </p> </li> <li> <p>Java 11 – <code>java11</code> </p> </li> <li> <p>Node.js 10 – <code>nodejs10.x</code> </p> </li> <li> <p>Node.js 12 – <code>nodejs12.x</code> </p> </li> <li> <p>Node.js 14 – <code>nodejs14.x</code> </p> </li> </ul> <p>To create a component from a Lambda function, specify <code>lambdaFunction</code> when you call this operation.</p> <note> <p>IoT Greengrass currently supports Lambda functions on only Linux core devices.</p> </note> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "inlineRecipe": {
            "description": "<p>The recipe to use to create the component. The recipe defines the component's metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.</p> <p>You must specify either <code>inlineRecipe</code> or <code>lambdaFunction</code>.</p>",
            "type": "string"
          },
          "lambdaFunction": {
            "description": "Contains information about an Lambda function to import to create a component.",
            "type": "object",
            "properties": {
              "lambdaArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/NonEmptyString"
                  },
                  {
                    "description": "The <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">ARN</a> of the Lambda function. The ARN must include the version of the function to import. You can't use version aliases like <code>$LATEST</code>."
                  }
                ]
              },
              "componentName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ComponentNameString"
                  },
                  {
                    "description": "<p>The name of the component.</p> <p>Defaults to the name of the Lambda function.</p>"
                  }
                ]
              },
              "componentVersion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ComponentVersionString"
                  },
                  {
                    "description": "<p>The version of the component.</p> <p>Defaults to the version of the Lambda function as a semantic version. For example, if your function version is <code>3</code>, the component version becomes <code>3.0.0</code>.</p>"
                  }
                ]
              },
              "componentPlatforms": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ComponentPlatformList"
                  },
                  {
                    "description": "The platforms that the component version supports."
                  }
                ]
              },
              "componentDependencies": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ComponentDependencyMap"
                  },
                  {
                    "description": "The component versions on which this Lambda function component depends."
                  }
                ]
              },
              "componentLambdaParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LambdaExecutionParameters"
                  },
                  {
                    "description": "The system and runtime parameters for the Lambda function as it runs on the Greengrass core device."
                  }
                ]
              }
            }
          },
          "tags": {
            "description": "A list of key-value pairs that contain metadata for the resource. For more information, see <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/tag-resources.html\">Tag your resources</a> in the <i>IoT Greengrass V2 Developer Guide</i>.",
            "type": "object",
            "minProperties": 1,
            "maxProperties": 200,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          },
          "clientToken": {
            "description": "A unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.",
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]+$",
            "minLength": 1,
            "maxLength": 64
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "NonEmptyString": {
        "type": "string",
        "minLength": 1
      },
      "ComponentNameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "ComponentVersionString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "ComponentPlatformList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ComponentPlatform"
        }
      },
      "ComponentPlatform": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "<p>The friendly name of the platform. This name helps you identify the platform.</p> <p>If you omit this parameter, IoT Greengrass creates a friendly name from the <code>os</code> and <code>architecture</code> of the platform.</p>"
              }
            ]
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/$defs/PlatformAttributesMap"
              },
              {
                "description": "A dictionary of attributes for the platform. The IoT Greengrass Core software defines the <code>os</code> and <code>architecture</code> by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the <a href=\"https://docs.aws.amazon.com/greengrass/v2/developerguide/greengrass-nucleus-component.html\">Greengrass nucleus component</a> in the <i>IoT Greengrass V2 Developer Guide</i>."
              }
            ]
          }
        },
        "description": "Contains information about a platform that a component supports."
      },
      "PlatformAttributesMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/NonEmptyString"
        }
      },
      "ComponentDependencyMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ComponentDependencyRequirement"
        }
      },
      "ComponentDependencyRequirement": {
        "type": "object",
        "properties": {
          "versionRequirement": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "<p>The component version requirement for the component dependency.</p> <p>IoT Greengrass V2 uses semantic version constraints. For more information, see <a href=\"https://semver.org/\">Semantic Versioning</a>.</p>"
              }
            ]
          },
          "dependencyType": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentDependencyType"
              },
              {
                "description": "<p>The type of this dependency. Choose from the following options:</p> <ul> <li> <p> <code>SOFT</code> – The component doesn't restart if the dependency changes state.</p> </li> <li> <p> <code>HARD</code> – The component restarts if the dependency changes state.</p> </li> </ul> <p>Default: <code>HARD</code> </p>"
              }
            ]
          }
        },
        "description": "Contains information about a component dependency for a Lambda function component."
      },
      "ComponentDependencyType": {
        "type": "string",
        "enum": [
          "HARD",
          "SOFT"
        ]
      },
      "LambdaExecutionParameters": {
        "type": "object",
        "properties": {
          "eventSources": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaEventSourceList"
              },
              {
                "description": "The list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages."
              }
            ]
          },
          "maxQueueSize": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalInteger"
              },
              {
                "description": "The maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message."
              }
            ]
          },
          "maxInstancesCount": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalInteger"
              },
              {
                "description": "The maximum number of instances that a non-pinned Lambda function can run at the same time."
              }
            ]
          },
          "maxIdleTimeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalInteger"
              },
              {
                "description": "The maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process."
              }
            ]
          },
          "timeoutInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalInteger"
              },
              {
                "description": "The maximum amount of time in seconds that the Lambda function can process a work item."
              }
            ]
          },
          "statusTimeoutInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalInteger"
              },
              {
                "description": "The interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component."
              }
            ]
          },
          "pinned": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalBoolean"
              },
              {
                "description": "<p>Whether or not the Lambda function is pinned, or long-lived.</p> <ul> <li> <p>A pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.</p> </li> <li> <p>A non-pinned Lambda function starts only when it receives a work item and exists after it idles for <code>maxIdleTimeInSeconds</code>. If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.</p> </li> </ul> <p>Default: <code>true</code> </p>"
              }
            ]
          },
          "inputPayloadEncodingType": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaInputPayloadEncodingType"
              },
              {
                "description": "<p>The encoding type that the Lambda function supports.</p> <p>Default: <code>json</code> </p>"
              }
            ]
          },
          "execArgs": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaExecArgsList"
              },
              {
                "description": "The list of arguments to pass to the Lambda function when it runs."
              }
            ]
          },
          "environmentVariables": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaEnvironmentVariables"
              },
              {
                "description": "The map of environment variables that are available to the Lambda function when it runs."
              }
            ]
          },
          "linuxProcessParams": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaLinuxProcessParams"
              },
              {
                "description": "The parameters for the Linux process that contains the Lambda function."
              }
            ]
          }
        },
        "description": "Contains parameters for a Lambda function that runs on IoT Greengrass."
      },
      "LambdaEventSourceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LambdaEventSource"
        }
      },
      "LambdaEventSource": {
        "type": "object",
        "required": [
          "topic",
          "type"
        ],
        "properties": {
          "topic": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicString"
              },
              {
                "description": "The topic to which to subscribe to receive event messages."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaEventSourceType"
              },
              {
                "description": "<p>The type of event source. Choose from the following options:</p> <ul> <li> <p> <code>PUB_SUB</code> – Subscribe to local publish/subscribe messages. This event source type doesn't support MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li> <li> <p> <code>IOT_CORE</code> – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (<code>+</code> and <code>#</code>) in the event source topic.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Contains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function."
      },
      "TopicString": {
        "type": "string"
      },
      "LambdaEventSourceType": {
        "type": "string",
        "enum": [
          "PUB_SUB",
          "IOT_CORE"
        ]
      },
      "OptionalInteger": {
        "type": "integer"
      },
      "OptionalBoolean": {
        "type": "boolean"
      },
      "LambdaInputPayloadEncodingType": {
        "type": "string",
        "enum": [
          "json",
          "binary"
        ]
      },
      "LambdaExecArgsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LambdaExecArg"
        }
      },
      "LambdaExecArg": {
        "type": "string"
      },
      "LambdaEnvironmentVariables": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "LambdaLinuxProcessParams": {
        "type": "object",
        "properties": {
          "isolationMode": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaIsolationMode"
              },
              {
                "description": "<p>The isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.</p> <p>Default: <code>GreengrassContainer</code> </p>"
              }
            ]
          },
          "containerParams": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaContainerParams"
              },
              {
                "description": "The parameters for the container in which the Lambda function runs."
              }
            ]
          }
        },
        "description": "Contains parameters for a Linux process that contains an Lambda function."
      },
      "LambdaIsolationMode": {
        "type": "string",
        "enum": [
          "GreengrassContainer",
          "NoContainer"
        ]
      },
      "LambdaContainerParams": {
        "type": "object",
        "properties": {
          "memorySizeInKB": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalInteger"
              },
              {
                "description": "<p>The memory size of the container, expressed in kilobytes.</p> <p>Default: <code>16384</code> (16 MB)</p>"
              }
            ]
          },
          "mountROSysfs": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalBoolean"
              },
              {
                "description": "<p>Whether or not the container can read information from the device's <code>/sys</code> folder.</p> <p>Default: <code>false</code> </p>"
              }
            ]
          },
          "volumes": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaVolumeList"
              },
              {
                "description": "The list of volumes that the container can access."
              }
            ]
          },
          "devices": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaDeviceList"
              },
              {
                "description": "The list of system devices that the container can access."
              }
            ]
          }
        },
        "description": "Contains information about a container in which Lambda functions run on Greengrass core devices."
      },
      "LambdaVolumeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LambdaVolumeMount"
        }
      },
      "LambdaVolumeMount": {
        "type": "object",
        "required": [
          "sourcePath",
          "destinationPath"
        ],
        "properties": {
          "sourcePath": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemPath"
              },
              {
                "description": "The path to the physical volume in the file system."
              }
            ]
          },
          "destinationPath": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemPath"
              },
              {
                "description": "The path to the logical volume in the file system."
              }
            ]
          },
          "permission": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaFilesystemPermission"
              },
              {
                "description": "<p>The permission to access the volume: read/only (<code>ro</code>) or read/write (<code>rw</code>).</p> <p>Default: <code>ro</code> </p>"
              }
            ]
          },
          "addGroupOwner": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalBoolean"
              },
              {
                "description": "<p>Whether or not to add the IoT Greengrass user group as an owner of the volume.</p> <p>Default: <code>false</code> </p>"
              }
            ]
          }
        },
        "description": "Contains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container."
      },
      "FileSystemPath": {
        "type": "string"
      },
      "LambdaFilesystemPermission": {
        "type": "string",
        "enum": [
          "ro",
          "rw"
        ]
      },
      "LambdaDeviceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LambdaDeviceMount"
        }
      },
      "LambdaDeviceMount": {
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemPath"
              },
              {
                "description": "The mount path for the device in the file system."
              }
            ]
          },
          "permission": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaFilesystemPermission"
              },
              {
                "description": "<p>The permission to access the device: read/only (<code>ro</code>) or read/write (<code>rw</code>).</p> <p>Default: <code>ro</code> </p>"
              }
            ]
          },
          "addGroupOwner": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalBoolean"
              },
              {
                "description": "<p>Whether or not to add the component's system user as an owner of the device.</p> <p>Default: <code>false</code> </p>"
              }
            ]
          }
        },
        "description": "Contains information about a device that Linux processes in a container can access."
      },
      "TagValue": {
        "type": "string",
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://greengrass.us-east-1.amazonaws.com/greengrass/v2/createComponentVersion"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**arn**",
            "**componentName**",
            "**componentVersion**",
            "**creationTimestamp**",
            "**status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
