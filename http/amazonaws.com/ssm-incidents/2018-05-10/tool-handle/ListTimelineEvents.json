{
  "name": "ListTimelineEvents",
  "description": "Lists timeline events for the specified incident record.",
  "parameters": {
    "type": "object",
    "properties": {
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "incidentRecordArn"
        ],
        "properties": {
          "filters": {
            "description": "<p>Filters the timeline events based on the provided conditional values. You can filter timeline events with the following keys:</p> <ul> <li> <p> <code>eventTime</code> </p> </li> <li> <p> <code>eventType</code> </p> </li> </ul> <p>Note the following when deciding how to use Filters:</p> <ul> <li> <p>If you don't specify a Filter, the response includes all timeline events.</p> </li> <li> <p>If you specify more than one filter in a single request, the response returns timeline events that match all filters.</p> </li> <li> <p>If you specify a filter with more than one value, the response returns timeline events that match any of the values provided.</p> </li> </ul>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Filter"
            },
            "minItems": 0,
            "maxItems": 5
          },
          "incidentRecordArn": {
            "description": "The Amazon Resource Name (ARN) of the incident that includes the timeline event.",
            "type": "string",
            "pattern": "^arn:aws(-cn|-us-gov)?:[a-z0-9-]*:[a-z0-9-]*:([0-9]{12})?:.+$",
            "minLength": 0,
            "maxLength": 1000
          },
          "maxResults": {
            "description": "The maximum number of results per page.",
            "type": "integer",
            "minimum": 1,
            "maximum": 100
          },
          "nextToken": {
            "description": "The pagination token to continue to the next page of results.",
            "type": "string",
            "minLength": 0,
            "maxLength": 2000
          },
          "sortBy": {
            "description": "Sort timeline events by the specified key value pair.",
            "type": "string",
            "enum": [
              "EVENT_TIME"
            ]
          },
          "sortOrder": {
            "description": "Sorts the order of timeline events by the value specified in the <code>sortBy</code> field.",
            "type": "string",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ]
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "Filter": {
        "type": "object",
        "required": [
          "condition",
          "key"
        ],
        "properties": {
          "condition": {
            "allOf": [
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "description": "The condition accepts before or after a specified time, equal to a string, or equal to an integer."
              }
            ]
          },
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterKeyString"
              },
              {
                "description": "The key that you're filtering on."
              }
            ]
          }
        },
        "description": "Filter the selection by using a condition."
      },
      "Condition": {
        "type": "object",
        "properties": {
          "after": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "After the specified timestamp."
              }
            ]
          },
          "before": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Before the specified timestamp"
              }
            ]
          },
          "equals": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValueList"
              },
              {
                "description": "The value is equal to the provided string or integer. "
              }
            ]
          }
        },
        "description": "A conditional statement with which to compare a value, after a timestamp, before a timestamp, or equal to a string or integer. If multiple conditions are specified, the conditionals become an <code>AND</code>ed statement. If multiple values are specified for a conditional, the values are <code>OR</code>d."
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "AttributeValueList": {
        "type": "object",
        "properties": {
          "integerValues": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerList"
              },
              {
                "description": "The list of integer values that the filter matches."
              }
            ]
          },
          "stringValues": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "The list of string values that the filter matches."
              }
            ]
          }
        },
        "description": "Use the AttributeValueList to filter by string or integer values."
      },
      "IntegerList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Integer"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "Integer": {
        "type": "integer"
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringListMemberString"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "StringListMemberString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 1000
      },
      "FilterKeyString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 50
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ssm-incidents.us-east-1.amazonaws.com/listTimelineEvents{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**eventSummaries**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
