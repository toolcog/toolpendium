{
  "name": "ListSessionMetrics",
  "description": "<p>Retrieves summary metrics for the user sessions with your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsSessionMetric.html\">AnalyticsSessionMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. Currently, you can specify it in either field, but not in both.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The identifier for the bot for which you want to retrieve session metrics."
      },
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "startDateTime",
          "endDateTime",
          "metrics"
        ],
        "properties": {
          "startDateTime": {
            "description": "The date and time that marks the beginning of the range of time for which you want to see session metrics.",
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "description": "The date and time that marks the end of the range of time for which you want to see session metrics.",
            "type": "string",
            "format": "date-time"
          },
          "metrics": {
            "description": "A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsSessionMetric"
            },
            "minItems": 1,
            "maxItems": 7
          },
          "binBy": {
            "description": "A list of objects, each of which contains specifications for organizing the results by time.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsBinBySpecification"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "groupBy": {
            "description": "<p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>ConversationEndState</code> – The final state of the conversation. The possible end states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-conversations\">Key definitions</a> in the user guide.</p> </li> <li> <p> <code>LocaleId</code> – The unique identifier of the bot locale.</p> </li> </ul>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsSessionGroupBySpecification"
            },
            "minItems": 1,
            "maxItems": 2
          },
          "filters": {
            "description": "A list of objects, each of which describes a condition by which you want to filter the results.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsSessionFilter"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "maxResults": {
            "description": "The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          },
          "nextToken": {
            "description": "<p>If the response from the ListSessionMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListSessionMetrics request to return the next page of results. For a complete set of results, call the ListSessionMetrics operation until the nextToken returned in the response is null.</p>",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "botId",
      "body"
    ],
    "$defs": {
      "AnalyticsSessionMetric": {
        "type": "object",
        "required": [
          "name",
          "statistic"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSessionMetricName"
              },
              {
                "description": "<p>The metric for which you want to get session summary statistics.</p> <ul> <li> <p> <code>Count</code> – The number of sessions.</p> </li> <li> <p> <code>Success</code> – The number of sessions that succeeded.</p> </li> <li> <p> <code>Failure</code> – The number of sessions that failed.</p> </li> <li> <p> <code>Dropped</code> – The number of sessions that the user dropped.</p> </li> <li> <p> <code>Duration</code> – The duration of sessions.</p> </li> <li> <p> <code>TurnsPerSession</code> – The number of turns in the sessions.</p> </li> <li> <p> <code>Concurrency</code> – The number of sessions occurring in the same period of time.</p> </li> </ul>"
              }
            ]
          },
          "statistic": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsMetricStatistic"
              },
              {
                "description": "<p>The summary statistic to calculate.</p> <ul> <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li> <li> <p> <code>Average</code> – The total count divided by the number of sessions in the category you provide in <code>name</code>.</p> </li> <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li> </ul>"
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSortOrder"
              },
              {
                "description": "Specifies whether to sort the results in ascending or descending order."
              }
            ]
          }
        },
        "description": "Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the user sessions with the bot."
      },
      "AnalyticsSessionMetricName": {
        "type": "string",
        "enum": [
          "Count",
          "Success",
          "Failure",
          "Dropped",
          "Duration",
          "TurnsPerConversation",
          "Concurrency"
        ]
      },
      "AnalyticsMetricStatistic": {
        "type": "string",
        "enum": [
          "Sum",
          "Avg",
          "Max"
        ]
      },
      "AnalyticsSortOrder": {
        "type": "string",
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "AnalyticsBinBySpecification": {
        "type": "object",
        "required": [
          "name",
          "interval"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsBinByName"
              },
              {
                "description": "Specifies the time metric by which to bin the analytics data."
              }
            ]
          },
          "interval": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsInterval"
              },
              {
                "description": "Specifies the interval of time by which to bin the analytics data."
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSortOrder"
              },
              {
                "description": "Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order."
              }
            ]
          }
        },
        "description": "Contains the time metric, interval, and method by which to bin the analytics data."
      },
      "AnalyticsBinByName": {
        "type": "string",
        "enum": [
          "ConversationStartTime",
          "UtteranceTimestamp"
        ]
      },
      "AnalyticsInterval": {
        "type": "string",
        "enum": [
          "OneHour",
          "OneDay"
        ]
      },
      "AnalyticsSessionGroupBySpecification": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSessionField"
              },
              {
                "description": "Specifies whether to group the session by their end state or their locale."
              }
            ]
          }
        },
        "description": "Contains the category by which to group the sessions."
      },
      "AnalyticsSessionField": {
        "type": "string",
        "enum": [
          "ConversationEndState",
          "LocaleId"
        ]
      },
      "AnalyticsSessionFilter": {
        "type": "object",
        "required": [
          "name",
          "operator",
          "values"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSessionFilterName"
              },
              {
                "description": "<p>The category by which to filter the sessions. The descriptions for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li> <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li> <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li> <li> <p> <code>Duration</code> – The duration of the session.</p> </li> <li> <p> <code>conversationEndState</code> – The final state of the session.</p> </li> <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li> <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li> <li> <p> <code>IntentPath</code> – The order of intents taken in a session.</p> </li> </ul>"
              }
            ]
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsFilterOperator"
              },
              {
                "description": "<p>The operation by which to filter the category. The following operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p> </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code> – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Duration</code> – <code>EQ</code>, <code>GT</code>, <code>LT</code>.</p> </li> <li> <p> <code>conversationEndState</code> – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>IntentPath</code> – <code>EQ</code>.</p> </li> </ul>"
              }
            ]
          },
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsFilterValues"
              },
              {
                "description": "An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>."
              }
            ]
          }
        },
        "description": "<p>Contains fields describing a condition by which to filter the sessions. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ en</code> – The locale is \"en\".</p> </li> <li> <p> <code>Duration GT 200</code> – The duration is greater than 200 seconds.</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Duration</code> – <code>EQ</code>, <code>GT</code>, <code>LT</code>.</p> </li> <li> <p> <code>conversationEndState</code> – <code>EQ</code>, <code>CO</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>IntentPath</code> – <code>EQ</code>.</p> </li> </ul>"
      },
      "AnalyticsSessionFilterName": {
        "type": "string",
        "enum": [
          "BotAliasId",
          "BotVersion",
          "LocaleId",
          "Modality",
          "Channel",
          "Duration",
          "ConversationEndState",
          "SessionId",
          "OriginatingRequestId",
          "IntentPath"
        ]
      },
      "AnalyticsFilterOperator": {
        "type": "string",
        "enum": [
          "EQ",
          "GT",
          "LT"
        ]
      },
      "AnalyticsFilterValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AnalyticsFilterValue"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "AnalyticsFilterValue": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/bots/{botId}/analytics/sessionmetrics{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**botId**",
            "**results**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
