{
  "name": "UpdateIntent",
  "description": "Updates the settings for an intent.",
  "parameters": {
    "type": "object",
    "properties": {
      "intentId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The unique identifier of the intent to update."
      },
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The identifier of the bot that contains the intent."
      },
      "botVersion": {
        "type": "string",
        "pattern": "^DRAFT$",
        "minLength": 5,
        "maxLength": 5,
        "description": "The version of the bot that contains the intent. Must be <code>DRAFT</code>."
      },
      "localeId": {
        "type": "string",
        "description": "The identifier of the language and locale where this intent is used. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "intentName"
        ],
        "properties": {
          "intentName": {
            "description": "The new name for the intent.",
            "type": "string",
            "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "description": "The new description of the intent.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "parentIntentSignature": {
            "description": "The signature of the new built-in intent to use as the parent of this intent.",
            "type": "string"
          },
          "sampleUtterances": {
            "description": "New utterances used to invoke the intent.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SampleUtterance"
            }
          },
          "dialogCodeHook": {
            "description": "Settings that determine the Lambda function that Amazon Lex uses for processing user responses.",
            "type": "object",
            "properties": {
              "enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Enables the dialog code hook so that it processes user requests."
                  }
                ]
              }
            }
          },
          "fulfillmentCodeHook": {
            "description": "Determines if a Lambda function should be invoked for a specific intent.",
            "type": "object",
            "properties": {
              "enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Indicates whether a Lambda function should be invoked to fulfill a specific intent."
                  }
                ]
              },
              "postFulfillmentStatusSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PostFulfillmentStatusSpecification"
                  },
                  {
                    "description": "Provides settings for messages sent to the user for after the Lambda fulfillment function completes. Post-fulfillment messages can be sent for both streaming and non-streaming conversations."
                  }
                ]
              },
              "fulfillmentUpdatesSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FulfillmentUpdatesSpecification"
                  },
                  {
                    "description": "Provides settings for update messages sent to the user for long-running Lambda fulfillment functions. Fulfillment updates can be used only with streaming conversations."
                  }
                ]
              },
              "active": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BoxedBoolean"
                  },
                  {
                    "description": "Determines whether the fulfillment code hook is used. When <code>active</code> is false, the code hook doesn't run."
                  }
                ]
              }
            }
          },
          "slotPriorities": {
            "description": "A new list of slots and their priorities that are contained by the intent.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SlotPriority"
            }
          },
          "intentConfirmationSetting": {
            "description": "Provides a prompt for making sure that the user is ready for the intent to be fulfilled.",
            "type": "object",
            "properties": {
              "promptSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PromptSpecification"
                  },
                  {
                    "description": "<p>Prompts the user to confirm the intent. This question should have a yes or no answer.</p> <p>Amazon Lex uses this prompt to ensure that the user acknowledges that the intent is ready for fulfillment. For example, with the <code>OrderPizza</code> intent, you might want to confirm that the order is correct before placing it. For other intents, such as intents that simply respond to user questions, you might not need to ask the user for confirmation before providing the information. </p>"
                  }
                ]
              },
              "declinationResponse": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseSpecification"
                  },
                  {
                    "description": "When the user answers \"no\" to the question defined in <code>promptSpecification</code>, Amazon Lex responds with this response to acknowledge that the intent was canceled. "
                  }
                ]
              },
              "active": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BoxedBoolean"
                  },
                  {
                    "description": "Specifies whether the intent's confirmation is sent to the user. When this field is false, confirmation and declination responses aren't sent. If the <code>active</code> field isn't specified, the default is true."
                  }
                ]
              },
              "confirmationResponse": {
                "$ref": "#/$defs/ResponseSpecification"
              },
              "confirmationNextStep": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogState"
                  },
                  {
                    "description": "Specifies the next step that the bot executes when the customer confirms the intent."
                  }
                ]
              },
              "confirmationConditional": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ConditionalSpecification"
                  },
                  {
                    "description": "A list of conditional branches to evaluate after the intent is closed."
                  }
                ]
              },
              "declinationNextStep": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogState"
                  },
                  {
                    "description": "Specifies the next step that the bot executes when the customer declines the intent."
                  }
                ]
              },
              "declinationConditional": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ConditionalSpecification"
                  },
                  {
                    "description": "A list of conditional branches to evaluate after the intent is declined."
                  }
                ]
              },
              "failureResponse": {
                "$ref": "#/$defs/ResponseSpecification"
              },
              "failureNextStep": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogState"
                  },
                  {
                    "description": "The next step to take in the conversation if the confirmation step fails."
                  }
                ]
              },
              "failureConditional": {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              "codeHook": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogCodeHookInvocationSetting"
                  },
                  {
                    "description": "The <code>DialogCodeHookInvocationSetting</code> object associated with intent's confirmation step. The dialog code hook is triggered based on these invocation settings when the confirmation next step or declination next step or failure next step is <code>InvokeDialogCodeHook</code>. "
                  }
                ]
              },
              "elicitationCodeHook": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ElicitationCodeHookInvocationSetting"
                  },
                  {
                    "description": "The <code>DialogCodeHookInvocationSetting</code> used when the code hook is invoked during confirmation prompt retries."
                  }
                ]
              }
            }
          },
          "intentClosingSetting": {
            "description": "Provides a statement the Amazon Lex conveys to the user when the intent is successfully fulfilled.",
            "type": "object",
            "properties": {
              "closingResponse": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseSpecification"
                  },
                  {
                    "description": "The response that Amazon Lex sends to the user when the intent is complete."
                  }
                ]
              },
              "active": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BoxedBoolean"
                  },
                  {
                    "description": "Specifies whether an intent's closing response is used. When this field is false, the closing response isn't sent to the user. If the <code>active</code> field isn't specified, the default is true."
                  }
                ]
              },
              "nextStep": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogState"
                  },
                  {
                    "description": "Specifies the next step that the bot executes after playing the intent's closing response."
                  }
                ]
              },
              "conditional": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ConditionalSpecification"
                  },
                  {
                    "description": "A list of conditional branches associated with the intent's closing response. These branches are executed when the <code>nextStep</code> attribute is set to <code>EvalutateConditional</code>."
                  }
                ]
              }
            }
          },
          "inputContexts": {
            "description": "A new list of contexts that must be active in order for Amazon Lex to consider the intent.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/InputContext"
            },
            "minItems": 0,
            "maxItems": 5
          },
          "outputContexts": {
            "description": "A new list of contexts that Amazon Lex activates when the intent is fulfilled.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/OutputContext"
            },
            "minItems": 0,
            "maxItems": 10
          },
          "kendraConfiguration": {
            "description": "Provides configuration information for the <code>AMAZON.KendraSearchIntent</code> intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance.",
            "type": "object",
            "properties": {
              "kendraIndex": {
                "allOf": [
                  {
                    "$ref": "#/$defs/KendraIndexArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the <code>AMAZON.KendraSearchIntent</code> intent to search. The index must be in the same account and Region as the Amazon Lex bot."
                  }
                ]
              },
              "queryFilterStringEnabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Determines whether the <code>AMAZON.KendraSearchIntent</code> intent uses a custom query string to query the Amazon Kendra index."
                  }
                ]
              },
              "queryFilterString": {
                "allOf": [
                  {
                    "$ref": "#/$defs/QueryFilterString"
                  },
                  {
                    "description": "A query filter that Amazon Lex sends to Amazon Kendra to filter the response from a query. The filter is in the format defined by Amazon Kendra. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/filtering.html\">Filtering queries</a>."
                  }
                ]
              }
            }
          },
          "initialResponseSetting": {
            "description": "Configuration setting for a response sent to the user before Amazon Lex starts eliciting slots.",
            "type": "object",
            "properties": {
              "initialResponse": {
                "$ref": "#/$defs/ResponseSpecification"
              },
              "nextStep": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogState"
                  },
                  {
                    "description": "The next step in the conversation."
                  }
                ]
              },
              "conditional": {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              "codeHook": {
                "$ref": "#/$defs/DialogCodeHookInvocationSetting"
              }
            }
          }
        }
      }
    },
    "required": [
      "intentId",
      "botId",
      "botVersion",
      "localeId",
      "body"
    ],
    "$defs": {
      "SampleUtterance": {
        "type": "object",
        "required": [
          "utterance"
        ],
        "properties": {
          "utterance": {
            "allOf": [
              {
                "$ref": "#/$defs/Utterance"
              },
              {
                "description": "The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents."
              }
            ]
          }
        },
        "description": "A sample utterance that invokes an intent or respond to a slot elicitation prompt."
      },
      "Utterance": {
        "type": "string"
      },
      "Boolean": {
        "type": "boolean"
      },
      "PostFulfillmentStatusSpecification": {
        "type": "object",
        "properties": {
          "successResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "failureResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "timeoutResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "successNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step in the conversation that Amazon Lex invokes when the fulfillment code hook completes successfully."
              }
            ]
          },
          "successConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the fulfillment code hook finishes successfully."
              }
            ]
          },
          "failureNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step the bot runs after the fulfillment code hook throws an exception or returns with the <code>State</code> field of the <code>Intent</code> object set to <code>Failed</code>."
              }
            ]
          },
          "failureConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the fulfillment code hook throws an exception or returns with the <code>State</code> field of the <code>Intent</code> object set to <code>Failed</code>."
              }
            ]
          },
          "timeoutNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step that the bot runs when the fulfillment code hook times out."
              }
            ]
          },
          "timeoutConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate if the fulfillment code hook times out."
              }
            ]
          }
        },
        "description": "Provides a setting that determines whether the post-fulfillment response is sent to the user. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete\">https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete</a> "
      },
      "ResponseSpecification": {
        "type": "object",
        "required": [
          "messageGroups"
        ],
        "properties": {
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether the user can interrupt a speech response from Amazon Lex."
              }
            ]
          }
        },
        "description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
      },
      "MessageGroupsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MessageGroup"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "MessageGroup": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "allOf": [
              {
                "$ref": "#/$defs/Message"
              },
              {
                "description": "The primary message that Amazon Lex should send to the user."
              }
            ]
          },
          "variations": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageVariationsList"
              },
              {
                "description": "Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user."
              }
            ]
          }
        },
        "description": "Provides one or more messages that Amazon Lex should send to the user."
      },
      "Message": {
        "type": "object",
        "properties": {
          "plainTextMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/PlainTextMessage"
              },
              {
                "description": "A message in plain text format."
              }
            ]
          },
          "customPayload": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomPayload"
              },
              {
                "description": "A message in a custom format defined by the client application."
              }
            ]
          },
          "ssmlMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/SSMLMessage"
              },
              {
                "description": "A message in Speech Synthesis Markup Language (SSML)."
              }
            ]
          },
          "imageResponseCard": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageResponseCard"
              },
              {
                "description": "A message that defines a response card that the client application can show to the user."
              }
            ]
          }
        },
        "description": "The object that provides message text and its type."
      },
      "PlainTextMessage": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/PlainTextMessageValue"
              },
              {
                "description": "The message to send to the user."
              }
            ]
          }
        },
        "description": "Defines an ASCII text message to send to the user."
      },
      "PlainTextMessageValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "CustomPayload": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomPayloadValue"
              },
              {
                "description": "The string that is sent to your application."
              }
            ]
          }
        },
        "description": "A custom response string that Amazon Lex sends to your application. You define the content and structure the string."
      },
      "CustomPayloadValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "SSMLMessage": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/SSMLMessageValue"
              },
              {
                "description": "The SSML text that defines the prompt."
              }
            ]
          }
        },
        "description": "Defines a Speech Synthesis Markup Language (SSML) prompt."
      },
      "SSMLMessageValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "ImageResponseCard": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "allOf": [
              {
                "$ref": "#/$defs/AttachmentTitle"
              },
              {
                "description": "The title to display on the response card. The format of the title is determined by the platform displaying the response card."
              }
            ]
          },
          "subtitle": {
            "allOf": [
              {
                "$ref": "#/$defs/AttachmentTitle"
              },
              {
                "description": "The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card."
              }
            ]
          },
          "imageUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/AttachmentUrl"
              },
              {
                "description": "The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image."
              }
            ]
          },
          "buttons": {
            "allOf": [
              {
                "$ref": "#/$defs/ButtonsList"
              },
              {
                "description": "A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button."
              }
            ]
          }
        },
        "description": "<p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>"
      },
      "AttachmentTitle": {
        "type": "string",
        "minLength": 1,
        "maxLength": 250
      },
      "AttachmentUrl": {
        "type": "string",
        "minLength": 1,
        "maxLength": 250
      },
      "ButtonsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Button"
        },
        "minItems": 0,
        "maxItems": 5
      },
      "Button": {
        "type": "object",
        "required": [
          "text",
          "value"
        ],
        "properties": {
          "text": {
            "allOf": [
              {
                "$ref": "#/$defs/ButtonText"
              },
              {
                "description": "The text that appears on the button. Use this to tell the user what value is returned when they choose this button."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/ButtonValue"
              },
              {
                "description": "The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot."
              }
            ]
          }
        },
        "description": "Describes a button to use on a response card used to gather slot values from a user."
      },
      "ButtonText": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "ButtonValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "MessageVariationsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Message"
        },
        "minItems": 0,
        "maxItems": 2
      },
      "BoxedBoolean": {
        "type": "boolean"
      },
      "DialogState": {
        "type": "object",
        "properties": {
          "dialogAction": {
            "$ref": "#/$defs/DialogAction"
          },
          "intent": {
            "$ref": "#/$defs/IntentOverride"
          },
          "sessionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/StringMap"
              },
              {
                "description": "Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application."
              }
            ]
          }
        },
        "description": "The current state of the conversation with the user."
      },
      "DialogAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogActionType"
              },
              {
                "description": "The action that the bot should execute. "
              }
            ]
          },
          "slotToElicit": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user."
              }
            ]
          },
          "suppressNextMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "When true the next message for the intent is not used."
              }
            ]
          }
        },
        "description": "Defines the action that the bot executes at runtime when the conversation reaches this step."
      },
      "DialogActionType": {
        "type": "string",
        "enum": [
          "ElicitIntent",
          "StartIntent",
          "ElicitSlot",
          "EvaluateConditional",
          "InvokeDialogCodeHook",
          "ConfirmIntent",
          "FulfillIntent",
          "CloseIntent",
          "EndConversation"
        ]
      },
      "Name": {
        "type": "string",
        "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
        "minLength": 1,
        "maxLength": 100
      },
      "IntentOverride": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the intent. Only required when you're switching intents."
              }
            ]
          },
          "slots": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotValueOverrideMap"
              },
              {
                "description": "A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden."
              }
            ]
          }
        },
        "description": "Override settings to configure the intent state."
      },
      "SlotValueOverrideMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/SlotValueOverride"
        }
      },
      "SlotValueOverride": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotValue"
              },
              {
                "description": "The current value of the slot."
              }
            ]
          },
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotValues"
              },
              {
                "description": "A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\""
              }
            ]
          }
        },
        "description": "The slot values that Amazon Lex uses when it sets slot values in a dialog step."
      },
      "SlotValue": {
        "type": "object",
        "properties": {
          "interpretedValue": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the <code>resolvedValues</code> list."
              }
            ]
          }
        },
        "description": "The value to set in a slot."
      },
      "NonEmptyString": {
        "type": "string",
        "minLength": 1
      },
      "SlotValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SlotValueOverride"
        }
      },
      "StringMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "ConditionalSpecification": {
        "type": "object",
        "required": [
          "active",
          "conditionalBranches",
          "defaultBranch"
        ],
        "properties": {
          "active": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Determines whether a conditional branch is active. When <code>active</code> is false, the conditions are not evaluated."
              }
            ]
          },
          "conditionalBranches": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalBranches"
              },
              {
                "description": "A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true."
              }
            ]
          },
          "defaultBranch": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultConditionalBranch"
              },
              {
                "description": "The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step."
              }
            ]
          }
        },
        "description": "Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition."
      },
      "ConditionalBranches": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ConditionalBranch"
        },
        "minItems": 1,
        "maxItems": 4
      },
      "ConditionalBranch": {
        "type": "object",
        "required": [
          "name",
          "condition",
          "nextStep"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the branch. "
              }
            ]
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "description": "Contains the expression to evaluate. If the condition is true, the branch's actions are taken."
              }
            ]
          },
          "nextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "The next step in the conversation."
              }
            ]
          },
          "response": {
            "$ref": "#/$defs/ResponseSpecification"
          }
        },
        "description": "A set of actions that Amazon Lex should run if the condition is matched."
      },
      "Condition": {
        "type": "object",
        "required": [
          "expressionString"
        ],
        "properties": {
          "expressionString": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionExpression"
              },
              {
                "description": "The expression string that is evaluated. "
              }
            ]
          }
        },
        "description": "Provides an expression that evaluates to true or false. "
      },
      "ConditionExpression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DefaultConditionalBranch": {
        "type": "object",
        "properties": {
          "nextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "The next step in the conversation."
              }
            ]
          },
          "response": {
            "$ref": "#/$defs/ResponseSpecification"
          }
        },
        "description": "A set of actions that Amazon Lex should run if none of the other conditions are met."
      },
      "FulfillmentUpdatesSpecification": {
        "type": "object",
        "required": [
          "active"
        ],
        "properties": {
          "active": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "<p>Determines whether fulfillment updates are sent to the user. When this field is true, updates are sent.</p> <p>If the <code>active</code> field is set to true, the <code>startResponse</code>, <code>updateResponse</code>, and <code>timeoutInSeconds</code> fields are required.</p>"
              }
            ]
          },
          "startResponse": {
            "allOf": [
              {
                "$ref": "#/$defs/FulfillmentStartResponseSpecification"
              },
              {
                "description": "Provides configuration information for the message sent to users when the fulfillment Lambda functions starts running."
              }
            ]
          },
          "updateResponse": {
            "allOf": [
              {
                "$ref": "#/$defs/FulfillmentUpdateResponseSpecification"
              },
              {
                "description": "Provides configuration information for messages sent periodically to the user while the fulfillment Lambda function is running."
              }
            ]
          },
          "timeoutInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/FulfillmentTimeout"
              },
              {
                "description": "The length of time that the fulfillment Lambda function should run before it times out."
              }
            ]
          }
        },
        "description": "Provides information for updating the user on the progress of fulfilling an intent."
      },
      "FulfillmentStartResponseSpecification": {
        "type": "object",
        "required": [
          "delayInSeconds",
          "messageGroups"
        ],
        "properties": {
          "delayInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/FulfillmentStartResponseDelay"
              },
              {
                "description": "The delay between when the Lambda fulfillment function starts running and the start message is played. If the Lambda function returns before the delay is over, the start message isn't played."
              }
            ]
          },
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "1 - 5 message groups that contain start messages. Amazon Lex chooses one of the messages to play to the user."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Determines whether the user can interrupt the start message while it is playing."
              }
            ]
          }
        },
        "description": "Provides settings for a message that is sent to the user when a fulfillment Lambda function starts running."
      },
      "FulfillmentStartResponseDelay": {
        "type": "integer",
        "minimum": 1,
        "maximum": 900
      },
      "FulfillmentUpdateResponseSpecification": {
        "type": "object",
        "required": [
          "frequencyInSeconds",
          "messageGroups"
        ],
        "properties": {
          "frequencyInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/FulfillmentUpdateResponseFrequency"
              },
              {
                "description": "The frequency that a message is sent to the user. When the period ends, Amazon Lex chooses a message from the message groups and plays it to the user. If the fulfillment Lambda returns before the first period ends, an update message is not played to the user."
              }
            ]
          },
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "1 - 5 message groups that contain update messages. Amazon Lex chooses one of the messages to play to the user."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Determines whether the user can interrupt an update message while it is playing."
              }
            ]
          }
        },
        "description": "Provides settings for a message that is sent periodically to the user while a fulfillment Lambda function is running."
      },
      "FulfillmentUpdateResponseFrequency": {
        "type": "integer",
        "minimum": 1,
        "maximum": 900
      },
      "FulfillmentTimeout": {
        "type": "integer",
        "minimum": 1,
        "maximum": 900
      },
      "SlotPriority": {
        "type": "object",
        "required": [
          "priority",
          "slotId"
        ],
        "properties": {
          "priority": {
            "allOf": [
              {
                "$ref": "#/$defs/PriorityValue"
              },
              {
                "description": "The priority that Amazon Lex should apply to the slot."
              }
            ]
          },
          "slotId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The unique identifier of the slot."
              }
            ]
          }
        },
        "description": "Sets the priority that Amazon Lex should use when eliciting slot values from a user."
      },
      "PriorityValue": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100
      },
      "Id": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10
      },
      "PromptSpecification": {
        "type": "object",
        "required": [
          "messageGroups",
          "maxRetries"
        ],
        "properties": {
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime."
              }
            ]
          },
          "maxRetries": {
            "allOf": [
              {
                "$ref": "#/$defs/PromptMaxRetries"
              },
              {
                "description": "The maximum number of times the bot tries to elicit a response from the user using this prompt."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether the user can interrupt a speech prompt from the bot."
              }
            ]
          },
          "messageSelectionStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageSelectionStrategy"
              },
              {
                "description": "Indicates how a message is selected from a message group among retries."
              }
            ]
          },
          "promptAttemptsSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/PromptAttemptsSpecificationMap"
              },
              {
                "description": "Specifies the advanced settings on each attempt of the prompt."
              }
            ]
          }
        },
        "description": "Specifies a list of message groups that Amazon Lex sends to a user to elicit a response."
      },
      "PromptMaxRetries": {
        "type": "integer",
        "minimum": 0,
        "maximum": 5
      },
      "MessageSelectionStrategy": {
        "type": "string",
        "enum": [
          "Random",
          "Ordered"
        ]
      },
      "PromptAttemptsSpecificationMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/PromptAttemptSpecification"
        }
      },
      "PromptAttemptSpecification": {
        "type": "object",
        "required": [
          "allowedInputTypes"
        ],
        "properties": {
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether the user can interrupt a speech prompt attempt from the bot."
              }
            ]
          },
          "allowedInputTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowedInputTypes"
              },
              {
                "description": "Indicates the allowed input types of the prompt attempt."
              }
            ]
          },
          "audioAndDTMFInputSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/AudioAndDTMFInputSpecification"
              },
              {
                "description": "Specifies the settings on audio and DTMF input."
              }
            ]
          },
          "textInputSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/TextInputSpecification"
              },
              {
                "description": "Specifies the settings on text input."
              }
            ]
          }
        },
        "description": "Specifies the settings on a prompt attempt."
      },
      "AllowedInputTypes": {
        "type": "object",
        "required": [
          "allowAudioInput",
          "allowDTMFInput"
        ],
        "properties": {
          "allowAudioInput": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether audio input is allowed."
              }
            ]
          },
          "allowDTMFInput": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether DTMF input is allowed."
              }
            ]
          }
        },
        "description": "Specifies the allowed input types."
      },
      "AudioAndDTMFInputSpecification": {
        "type": "object",
        "required": [
          "startTimeoutMs"
        ],
        "properties": {
          "startTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs."
              }
            ]
          },
          "audioSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/AudioSpecification"
              },
              {
                "description": "Specifies the settings on audio input."
              }
            ]
          },
          "dtmfSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/DTMFSpecification"
              },
              {
                "description": "Specifies the settings on DTMF input."
              }
            ]
          }
        },
        "description": "Specifies the audio and DTMF input specification."
      },
      "TimeInMilliSeconds": {
        "type": "integer",
        "minimum": 1
      },
      "AudioSpecification": {
        "type": "object",
        "required": [
          "maxLengthMs",
          "endTimeoutMs"
        ],
        "properties": {
          "maxLengthMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application."
              }
            ]
          },
          "endTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for which a bot waits after the customer stops speaking to assume the utterance is finished."
              }
            ]
          }
        },
        "description": "Specifies the audio input specifications."
      },
      "DTMFSpecification": {
        "type": "object",
        "required": [
          "maxLength",
          "endTimeoutMs",
          "deletionCharacter",
          "endCharacter"
        ],
        "properties": {
          "maxLength": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxUtteranceDigits"
              },
              {
                "description": "The maximum number of DTMF digits allowed in an utterance."
              }
            ]
          },
          "endTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "How long the bot should wait after the last DTMF character input before assuming that the input has concluded."
              }
            ]
          },
          "deletionCharacter": {
            "allOf": [
              {
                "$ref": "#/$defs/DTMFCharacter"
              },
              {
                "description": "The DTMF character that clears the accumulated DTMF digits and immediately ends the input."
              }
            ]
          },
          "endCharacter": {
            "allOf": [
              {
                "$ref": "#/$defs/DTMFCharacter"
              },
              {
                "description": "The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout."
              }
            ]
          }
        },
        "description": "Specifies the DTMF input specifications."
      },
      "MaxUtteranceDigits": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1024
      },
      "DTMFCharacter": {
        "type": "string",
        "pattern": "^[A-D0-9#*]{1}$"
      },
      "TextInputSpecification": {
        "type": "object",
        "required": [
          "startTimeoutMs"
        ],
        "properties": {
          "startTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for which a bot waits before re-prompting a customer for text input."
              }
            ]
          }
        },
        "description": "Specifies the text input specifications."
      },
      "DialogCodeHookInvocationSetting": {
        "type": "object",
        "required": [
          "enableCodeHookInvocation",
          "active",
          "postCodeHookSpecification"
        ],
        "properties": {
          "enableCodeHookInvocation": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether a Lambda function should be invoked for the dialog."
              }
            ]
          },
          "active": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Determines whether a dialog code hook is used when the intent is activated."
              }
            ]
          },
          "invocationLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "A label that indicates the dialog step from which the dialog code hook is happening."
              }
            ]
          },
          "postCodeHookSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/PostDialogCodeHookInvocationSpecification"
              },
              {
                "description": "Contains the responses and actions that Amazon Lex takes after the Lambda function is complete."
              }
            ]
          }
        },
        "description": "Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. "
      },
      "PostDialogCodeHookInvocationSpecification": {
        "type": "object",
        "properties": {
          "successResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "successNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifics the next step the bot runs after the dialog code hook finishes successfully. "
              }
            ]
          },
          "successConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the dialog code hook finishes successfully."
              }
            ]
          },
          "failureResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "failureNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the <code>State</code> field of the <code>Intent</code> object set to <code>Failed</code>."
              }
            ]
          },
          "failureConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the <code>State</code> field of the <code>Intent</code> object set to <code>Failed</code>."
              }
            ]
          },
          "timeoutResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "timeoutNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step that the bot runs when the code hook times out."
              }
            ]
          },
          "timeoutConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate if the code hook times out."
              }
            ]
          }
        },
        "description": "Specifies next steps to run after the dialog code hook finishes."
      },
      "ElicitationCodeHookInvocationSetting": {
        "type": "object",
        "required": [
          "enableCodeHookInvocation"
        ],
        "properties": {
          "enableCodeHookInvocation": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether a Lambda function should be invoked for the dialog."
              }
            ]
          },
          "invocationLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "A label that indicates the dialog step from which the dialog code hook is happening."
              }
            ]
          }
        },
        "description": "Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values."
      },
      "InputContext": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the context."
              }
            ]
          }
        },
        "description": "A context that must be active for an intent to be selected by Amazon Lex."
      },
      "OutputContext": {
        "type": "object",
        "required": [
          "name",
          "timeToLiveInSeconds",
          "turnsToLive"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the output context."
              }
            ]
          },
          "timeToLiveInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/ContextTimeToLiveInSeconds"
              },
              {
                "description": "The amount of time, in seconds, that the output context should remain active. The time is figured from the first time the context is sent to the user."
              }
            ]
          },
          "turnsToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ContextTurnsToLive"
              },
              {
                "description": "The number of conversation turns that the output context should remain active. The number of turns is counted from the first time that the context is sent to the user."
              }
            ]
          }
        },
        "description": "Describes a session context that is activated when an intent is fulfilled."
      },
      "ContextTimeToLiveInSeconds": {
        "type": "integer",
        "minimum": 5,
        "maximum": 86400
      },
      "ContextTurnsToLive": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "KendraIndexArn": {
        "type": "string",
        "pattern": "^arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\\/[a-zA-Z0-9][a-zA-Z0-9_-]*$",
        "minLength": 32,
        "maxLength": 2048
      },
      "QueryFilterString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 5000
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**intentId**",
            "**intentName**",
            "**description**",
            "**parentIntentSignature**",
            "**sampleUtterances**",
            "**dialogCodeHook**",
            "**fulfillmentCodeHook**",
            "**slotPriorities**",
            "**intentConfirmationSetting**",
            "**intentClosingSetting**",
            "**inputContexts**",
            "**outputContexts**",
            "**kendraConfiguration**",
            "**botId**",
            "**botVersion**",
            "**localeId**",
            "**creationDateTime**",
            "**lastUpdatedDateTime**",
            "**initialResponseSetting**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
