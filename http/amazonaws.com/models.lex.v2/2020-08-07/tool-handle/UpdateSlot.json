{
  "name": "UpdateSlot",
  "description": "Updates the settings for a slot.",
  "parameters": {
    "type": "object",
    "properties": {
      "slotId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The unique identifier for the slot to update."
      },
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The unique identifier of the bot that contains the slot."
      },
      "botVersion": {
        "type": "string",
        "pattern": "^DRAFT$",
        "minLength": 5,
        "maxLength": 5,
        "description": "The version of the bot that contains the slot. Must always be <code>DRAFT</code>."
      },
      "localeId": {
        "type": "string",
        "description": "The identifier of the language and locale that contains the slot. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>."
      },
      "intentId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The identifier of the intent that contains the slot."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "slotName",
          "valueElicitationSetting"
        ],
        "properties": {
          "slotName": {
            "description": "The new name for the slot.",
            "type": "string",
            "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "description": "The new description for the slot.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "slotTypeId": {
            "description": "The unique identifier of the new slot type to associate with this slot. ",
            "type": "string",
            "pattern": "^((AMAZON\\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$",
            "minLength": 1,
            "maxLength": 25
          },
          "valueElicitationSetting": {
            "description": "Specifies the elicitation setting details eliciting a slot.",
            "type": "object",
            "properties": {
              "defaultValueSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SlotDefaultValueSpecification"
                  },
                  {
                    "description": "A list of default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values."
                  }
                ]
              },
              "slotConstraint": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SlotConstraint"
                  },
                  {
                    "description": "Specifies whether the slot is required or optional."
                  }
                ]
              },
              "promptSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PromptSpecification"
                  },
                  {
                    "description": "The prompt that Amazon Lex uses to elicit the slot value from the user."
                  }
                ]
              },
              "sampleUtterances": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SampleUtterancesList"
                  },
                  {
                    "description": "If you know a specific pattern that users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances."
                  }
                ]
              },
              "waitAndContinueSpecification": {
                "$ref": "#/$defs/WaitAndContinueSpecification"
              },
              "slotCaptureSetting": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SlotCaptureSetting"
                  },
                  {
                    "description": "Specifies the settings that Amazon Lex uses when a slot value is successfully entered by a user."
                  }
                ]
              }
            }
          },
          "obfuscationSetting": {
            "description": "Determines whether Amazon Lex obscures slot values in conversation logs. ",
            "type": "object",
            "properties": {
              "obfuscationSettingType": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ObfuscationSettingType"
                  },
                  {
                    "description": "Value that determines whether Amazon Lex obscures slot values in conversation logs. The default is to obscure the values."
                  }
                ]
              }
            }
          },
          "multipleValuesSetting": {
            "description": "Indicates whether a slot can return multiple values.",
            "type": "object",
            "properties": {
              "allowMultipleValues": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "<p>Indicates whether a slot can return multiple values. When <code>true</code>, the slot may return more than one value in a response. When <code>false</code>, the slot returns only a single value.</p> <p>Multi-value slots are only available in the en-US locale. If you set this value to <code>true</code> in any other locale, Amazon Lex throws a <code>ValidationException</code>.</p> <p>If the <code>allowMutlipleValues</code> is not set, the default value is <code>false</code>.</p>"
                  }
                ]
              }
            }
          },
          "subSlotSetting": {
            "description": "Specifications for the constituent sub slots and the expression for the composite slot.",
            "type": "object",
            "properties": {
              "expression": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SubSlotExpression"
                  },
                  {
                    "description": "The expression text for defining the constituent sub slots in the composite slot using logical AND and OR operators."
                  }
                ]
              },
              "slotSpecifications": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SubSlotSpecificationMap"
                  },
                  {
                    "description": "Specifications for the constituent sub slots of a composite slot."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "slotId",
      "botId",
      "botVersion",
      "localeId",
      "intentId",
      "body"
    ],
    "$defs": {
      "SlotDefaultValueSpecification": {
        "type": "object",
        "required": [
          "defaultValueList"
        ],
        "properties": {
          "defaultValueList": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotDefaultValueList"
              },
              {
                "description": "A list of default values. Amazon Lex chooses the default value to use in the order that they are presented in the list."
              }
            ]
          }
        },
        "description": "Defines a list of values that Amazon Lex should use as the default value for a slot."
      },
      "SlotDefaultValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SlotDefaultValue"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "SlotDefaultValue": {
        "type": "object",
        "required": [
          "defaultValue"
        ],
        "properties": {
          "defaultValue": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotDefaultValueString"
              },
              {
                "description": "The default value to use when a user doesn't provide a value for a slot."
              }
            ]
          }
        },
        "description": "Specifies the default value to use when a user doesn't provide a value for a slot."
      },
      "SlotDefaultValueString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 202
      },
      "SlotConstraint": {
        "type": "string",
        "enum": [
          "Required",
          "Optional"
        ]
      },
      "PromptSpecification": {
        "type": "object",
        "required": [
          "messageGroups",
          "maxRetries"
        ],
        "properties": {
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "A collection of messages that Amazon Lex can send to the user. Amazon Lex chooses the actual message to send at runtime."
              }
            ]
          },
          "maxRetries": {
            "allOf": [
              {
                "$ref": "#/$defs/PromptMaxRetries"
              },
              {
                "description": "The maximum number of times the bot tries to elicit a response from the user using this prompt."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether the user can interrupt a speech prompt from the bot."
              }
            ]
          },
          "messageSelectionStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageSelectionStrategy"
              },
              {
                "description": "Indicates how a message is selected from a message group among retries."
              }
            ]
          },
          "promptAttemptsSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/PromptAttemptsSpecificationMap"
              },
              {
                "description": "Specifies the advanced settings on each attempt of the prompt."
              }
            ]
          }
        },
        "description": "Specifies a list of message groups that Amazon Lex sends to a user to elicit a response."
      },
      "MessageGroupsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MessageGroup"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "MessageGroup": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "allOf": [
              {
                "$ref": "#/$defs/Message"
              },
              {
                "description": "The primary message that Amazon Lex should send to the user."
              }
            ]
          },
          "variations": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageVariationsList"
              },
              {
                "description": "Message variations to send to the user. When variations are defined, Amazon Lex chooses the primary message or one of the variations to send to the user."
              }
            ]
          }
        },
        "description": "Provides one or more messages that Amazon Lex should send to the user."
      },
      "Message": {
        "type": "object",
        "properties": {
          "plainTextMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/PlainTextMessage"
              },
              {
                "description": "A message in plain text format."
              }
            ]
          },
          "customPayload": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomPayload"
              },
              {
                "description": "A message in a custom format defined by the client application."
              }
            ]
          },
          "ssmlMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/SSMLMessage"
              },
              {
                "description": "A message in Speech Synthesis Markup Language (SSML)."
              }
            ]
          },
          "imageResponseCard": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageResponseCard"
              },
              {
                "description": "A message that defines a response card that the client application can show to the user."
              }
            ]
          }
        },
        "description": "The object that provides message text and its type."
      },
      "PlainTextMessage": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/PlainTextMessageValue"
              },
              {
                "description": "The message to send to the user."
              }
            ]
          }
        },
        "description": "Defines an ASCII text message to send to the user."
      },
      "PlainTextMessageValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "CustomPayload": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomPayloadValue"
              },
              {
                "description": "The string that is sent to your application."
              }
            ]
          }
        },
        "description": "A custom response string that Amazon Lex sends to your application. You define the content and structure the string."
      },
      "CustomPayloadValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "SSMLMessage": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/SSMLMessageValue"
              },
              {
                "description": "The SSML text that defines the prompt."
              }
            ]
          }
        },
        "description": "Defines a Speech Synthesis Markup Language (SSML) prompt."
      },
      "SSMLMessageValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "ImageResponseCard": {
        "type": "object",
        "required": [
          "title"
        ],
        "properties": {
          "title": {
            "allOf": [
              {
                "$ref": "#/$defs/AttachmentTitle"
              },
              {
                "description": "The title to display on the response card. The format of the title is determined by the platform displaying the response card."
              }
            ]
          },
          "subtitle": {
            "allOf": [
              {
                "$ref": "#/$defs/AttachmentTitle"
              },
              {
                "description": "The subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card."
              }
            ]
          },
          "imageUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/AttachmentUrl"
              },
              {
                "description": "The URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image."
              }
            ]
          },
          "buttons": {
            "allOf": [
              {
                "$ref": "#/$defs/ButtonsList"
              },
              {
                "description": "A list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button."
              }
            ]
          }
        },
        "description": "<p>A card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform. </p> <p>When you use a response card, the response from the user is constrained to the text associated with a button on the card.</p>"
      },
      "AttachmentTitle": {
        "type": "string",
        "minLength": 1,
        "maxLength": 250
      },
      "AttachmentUrl": {
        "type": "string",
        "minLength": 1,
        "maxLength": 250
      },
      "ButtonsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Button"
        },
        "minItems": 0,
        "maxItems": 5
      },
      "Button": {
        "type": "object",
        "required": [
          "text",
          "value"
        ],
        "properties": {
          "text": {
            "allOf": [
              {
                "$ref": "#/$defs/ButtonText"
              },
              {
                "description": "The text that appears on the button. Use this to tell the user what value is returned when they choose this button."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/ButtonValue"
              },
              {
                "description": "The value returned to Amazon Lex when the user chooses this button. This must be one of the slot values configured for the slot."
              }
            ]
          }
        },
        "description": "Describes a button to use on a response card used to gather slot values from a user."
      },
      "ButtonText": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "ButtonValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "MessageVariationsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Message"
        },
        "minItems": 0,
        "maxItems": 2
      },
      "PromptMaxRetries": {
        "type": "integer",
        "minimum": 0,
        "maximum": 5
      },
      "BoxedBoolean": {
        "type": "boolean"
      },
      "MessageSelectionStrategy": {
        "type": "string",
        "enum": [
          "Random",
          "Ordered"
        ]
      },
      "PromptAttemptsSpecificationMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/PromptAttemptSpecification"
        }
      },
      "PromptAttemptSpecification": {
        "type": "object",
        "required": [
          "allowedInputTypes"
        ],
        "properties": {
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether the user can interrupt a speech prompt attempt from the bot."
              }
            ]
          },
          "allowedInputTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowedInputTypes"
              },
              {
                "description": "Indicates the allowed input types of the prompt attempt."
              }
            ]
          },
          "audioAndDTMFInputSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/AudioAndDTMFInputSpecification"
              },
              {
                "description": "Specifies the settings on audio and DTMF input."
              }
            ]
          },
          "textInputSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/TextInputSpecification"
              },
              {
                "description": "Specifies the settings on text input."
              }
            ]
          }
        },
        "description": "Specifies the settings on a prompt attempt."
      },
      "AllowedInputTypes": {
        "type": "object",
        "required": [
          "allowAudioInput",
          "allowDTMFInput"
        ],
        "properties": {
          "allowAudioInput": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether audio input is allowed."
              }
            ]
          },
          "allowDTMFInput": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether DTMF input is allowed."
              }
            ]
          }
        },
        "description": "Specifies the allowed input types."
      },
      "AudioAndDTMFInputSpecification": {
        "type": "object",
        "required": [
          "startTimeoutMs"
        ],
        "properties": {
          "startTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for which a bot waits before assuming that the customer isn't going to speak or press a key. This timeout is shared between Audio and DTMF inputs."
              }
            ]
          },
          "audioSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/AudioSpecification"
              },
              {
                "description": "Specifies the settings on audio input."
              }
            ]
          },
          "dtmfSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/DTMFSpecification"
              },
              {
                "description": "Specifies the settings on DTMF input."
              }
            ]
          }
        },
        "description": "Specifies the audio and DTMF input specification."
      },
      "TimeInMilliSeconds": {
        "type": "integer",
        "minimum": 1
      },
      "AudioSpecification": {
        "type": "object",
        "required": [
          "maxLengthMs",
          "endTimeoutMs"
        ],
        "properties": {
          "maxLengthMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for how long Amazon Lex waits before speech input is truncated and the speech is returned to application."
              }
            ]
          },
          "endTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for which a bot waits after the customer stops speaking to assume the utterance is finished."
              }
            ]
          }
        },
        "description": "Specifies the audio input specifications."
      },
      "DTMFSpecification": {
        "type": "object",
        "required": [
          "maxLength",
          "endTimeoutMs",
          "deletionCharacter",
          "endCharacter"
        ],
        "properties": {
          "maxLength": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxUtteranceDigits"
              },
              {
                "description": "The maximum number of DTMF digits allowed in an utterance."
              }
            ]
          },
          "endTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "How long the bot should wait after the last DTMF character input before assuming that the input has concluded."
              }
            ]
          },
          "deletionCharacter": {
            "allOf": [
              {
                "$ref": "#/$defs/DTMFCharacter"
              },
              {
                "description": "The DTMF character that clears the accumulated DTMF digits and immediately ends the input."
              }
            ]
          },
          "endCharacter": {
            "allOf": [
              {
                "$ref": "#/$defs/DTMFCharacter"
              },
              {
                "description": "The DTMF character that immediately ends input. If the user does not press this character, the input ends after the end timeout."
              }
            ]
          }
        },
        "description": "Specifies the DTMF input specifications."
      },
      "MaxUtteranceDigits": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1024
      },
      "DTMFCharacter": {
        "type": "string",
        "pattern": "^[A-D0-9#*]{1}$"
      },
      "TextInputSpecification": {
        "type": "object",
        "required": [
          "startTimeoutMs"
        ],
        "properties": {
          "startTimeoutMs": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeInMilliSeconds"
              },
              {
                "description": "Time for which a bot waits before re-prompting a customer for text input."
              }
            ]
          }
        },
        "description": "Specifies the text input specifications."
      },
      "SampleUtterancesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SampleUtterance"
        }
      },
      "SampleUtterance": {
        "type": "object",
        "required": [
          "utterance"
        ],
        "properties": {
          "utterance": {
            "allOf": [
              {
                "$ref": "#/$defs/Utterance"
              },
              {
                "description": "The sample utterance that Amazon Lex uses to build its machine-learning model to recognize intents."
              }
            ]
          }
        },
        "description": "A sample utterance that invokes an intent or respond to a slot elicitation prompt."
      },
      "Utterance": {
        "type": "string"
      },
      "WaitAndContinueSpecification": {
        "type": "object",
        "required": [
          "waitingResponse",
          "continueResponse"
        ],
        "properties": {
          "waitingResponse": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseSpecification"
              },
              {
                "description": "The response that Amazon Lex sends to indicate that the bot is waiting for the conversation to continue."
              }
            ]
          },
          "continueResponse": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseSpecification"
              },
              {
                "description": "The response that Amazon Lex sends to indicate that the bot is ready to continue the conversation."
              }
            ]
          },
          "stillWaitingResponse": {
            "allOf": [
              {
                "$ref": "#/$defs/StillWaitingResponseSpecification"
              },
              {
                "description": "A response that Amazon Lex sends periodically to the user to indicate that the bot is still waiting for input from the user."
              }
            ]
          },
          "active": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Specifies whether the bot will wait for a user to respond. When this field is false, wait and continue responses for a slot aren't used. If the <code>active</code> field isn't specified, the default is true."
              }
            ]
          }
        },
        "description": "Specifies the prompts that Amazon Lex uses while a bot is waiting for customer input. "
      },
      "ResponseSpecification": {
        "type": "object",
        "required": [
          "messageGroups"
        ],
        "properties": {
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "A collection of responses that Amazon Lex can send to the user. Amazon Lex chooses the actual response to send at runtime."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether the user can interrupt a speech response from Amazon Lex."
              }
            ]
          }
        },
        "description": "Specifies a list of message groups that Amazon Lex uses to respond the user input."
      },
      "StillWaitingResponseSpecification": {
        "type": "object",
        "required": [
          "messageGroups",
          "frequencyInSeconds",
          "timeoutInSeconds"
        ],
        "properties": {
          "messageGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageGroupsList"
              },
              {
                "description": "One or more message groups, each containing one or more messages, that define the prompts that Amazon Lex sends to the user."
              }
            ]
          },
          "frequencyInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/StillWaitingResponseFrequency"
              },
              {
                "description": "How often a message should be sent to the user. Minimum of 1 second, maximum of 5 minutes."
              }
            ]
          },
          "timeoutInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/StillWaitingResponseTimeout"
              },
              {
                "description": "If Amazon Lex waits longer than this length of time for a response, it will stop sending messages."
              }
            ]
          },
          "allowInterrupt": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates that the user can interrupt the response by speaking while the message is being played."
              }
            ]
          }
        },
        "description": "Defines the messages that Amazon Lex sends to a user to remind them that the bot is waiting for a response."
      },
      "StillWaitingResponseFrequency": {
        "type": "integer",
        "minimum": 1,
        "maximum": 300
      },
      "StillWaitingResponseTimeout": {
        "type": "integer",
        "minimum": 1,
        "maximum": 900
      },
      "SlotCaptureSetting": {
        "type": "object",
        "properties": {
          "captureResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "captureNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step that the bot runs when the slot value is captured before the code hook times out."
              }
            ]
          },
          "captureConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the slot value is captured."
              }
            ]
          },
          "failureResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "failureNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step that the bot runs when the slot value code is not recognized."
              }
            ]
          },
          "failureConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate when the slot value isn't captured."
              }
            ]
          },
          "codeHook": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogCodeHookInvocationSetting"
              },
              {
                "description": "Code hook called after Amazon Lex successfully captures a slot value."
              }
            ]
          },
          "elicitationCodeHook": {
            "allOf": [
              {
                "$ref": "#/$defs/ElicitationCodeHookInvocationSetting"
              },
              {
                "description": "Code hook called when Amazon Lex doesn't capture a slot value."
              }
            ]
          }
        },
        "description": "Settings used when Amazon Lex successfully captures a slot value from a user."
      },
      "DialogState": {
        "type": "object",
        "properties": {
          "dialogAction": {
            "$ref": "#/$defs/DialogAction"
          },
          "intent": {
            "$ref": "#/$defs/IntentOverride"
          },
          "sessionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/StringMap"
              },
              {
                "description": "Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex and a client application."
              }
            ]
          }
        },
        "description": "The current state of the conversation with the user."
      },
      "DialogAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogActionType"
              },
              {
                "description": "The action that the bot should execute. "
              }
            ]
          },
          "slotToElicit": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "If the dialog action is <code>ElicitSlot</code>, defines the slot to elicit from the user."
              }
            ]
          },
          "suppressNextMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "When true the next message for the intent is not used."
              }
            ]
          }
        },
        "description": "Defines the action that the bot executes at runtime when the conversation reaches this step."
      },
      "DialogActionType": {
        "type": "string",
        "enum": [
          "ElicitIntent",
          "StartIntent",
          "ElicitSlot",
          "EvaluateConditional",
          "InvokeDialogCodeHook",
          "ConfirmIntent",
          "FulfillIntent",
          "CloseIntent",
          "EndConversation"
        ]
      },
      "Name": {
        "type": "string",
        "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
        "minLength": 1,
        "maxLength": 100
      },
      "IntentOverride": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the intent. Only required when you're switching intents."
              }
            ]
          },
          "slots": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotValueOverrideMap"
              },
              {
                "description": "A map of all of the slot value overrides for the intent. The name of the slot maps to the value of the slot. Slots that are not included in the map aren't overridden."
              }
            ]
          }
        },
        "description": "Override settings to configure the intent state."
      },
      "SlotValueOverrideMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/SlotValueOverride"
        }
      },
      "SlotValueOverride": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotValue"
              },
              {
                "description": "The current value of the slot."
              }
            ]
          },
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotValues"
              },
              {
                "description": "A list of one or more values that the user provided for the slot. For example, for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\""
              }
            ]
          }
        },
        "description": "The slot values that Amazon Lex uses when it sets slot values in a dialog step."
      },
      "SlotValue": {
        "type": "object",
        "properties": {
          "interpretedValue": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The value that Amazon Lex determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex choose the first value in the <code>resolvedValues</code> list."
              }
            ]
          }
        },
        "description": "The value to set in a slot."
      },
      "NonEmptyString": {
        "type": "string",
        "minLength": 1
      },
      "SlotValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SlotValueOverride"
        }
      },
      "StringMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "ConditionalSpecification": {
        "type": "object",
        "required": [
          "active",
          "conditionalBranches",
          "defaultBranch"
        ],
        "properties": {
          "active": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Determines whether a conditional branch is active. When <code>active</code> is false, the conditions are not evaluated."
              }
            ]
          },
          "conditionalBranches": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalBranches"
              },
              {
                "description": "A list of conditional branches. A conditional branch is made up of a condition, a response and a next step. The response and next step are executed when the condition is true."
              }
            ]
          },
          "defaultBranch": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultConditionalBranch"
              },
              {
                "description": "The conditional branch that should be followed when the conditions for other branches are not satisfied. A conditional branch is made up of a condition, a response and a next step."
              }
            ]
          }
        },
        "description": "Provides a list of conditional branches. Branches are evaluated in the order that they are entered in the list. The first branch with a condition that evaluates to true is executed. The last branch in the list is the default branch. The default branch should not have any condition expression. The default branch is executed if no other branch has a matching condition."
      },
      "ConditionalBranches": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ConditionalBranch"
        },
        "minItems": 1,
        "maxItems": 4
      },
      "ConditionalBranch": {
        "type": "object",
        "required": [
          "name",
          "condition",
          "nextStep"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the branch. "
              }
            ]
          },
          "condition": {
            "allOf": [
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "description": "Contains the expression to evaluate. If the condition is true, the branch's actions are taken."
              }
            ]
          },
          "nextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "The next step in the conversation."
              }
            ]
          },
          "response": {
            "$ref": "#/$defs/ResponseSpecification"
          }
        },
        "description": "A set of actions that Amazon Lex should run if the condition is matched."
      },
      "Condition": {
        "type": "object",
        "required": [
          "expressionString"
        ],
        "properties": {
          "expressionString": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionExpression"
              },
              {
                "description": "The expression string that is evaluated. "
              }
            ]
          }
        },
        "description": "Provides an expression that evaluates to true or false. "
      },
      "ConditionExpression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DefaultConditionalBranch": {
        "type": "object",
        "properties": {
          "nextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "The next step in the conversation."
              }
            ]
          },
          "response": {
            "$ref": "#/$defs/ResponseSpecification"
          }
        },
        "description": "A set of actions that Amazon Lex should run if none of the other conditions are met."
      },
      "DialogCodeHookInvocationSetting": {
        "type": "object",
        "required": [
          "enableCodeHookInvocation",
          "active",
          "postCodeHookSpecification"
        ],
        "properties": {
          "enableCodeHookInvocation": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether a Lambda function should be invoked for the dialog."
              }
            ]
          },
          "active": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Determines whether a dialog code hook is used when the intent is activated."
              }
            ]
          },
          "invocationLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "A label that indicates the dialog step from which the dialog code hook is happening."
              }
            ]
          },
          "postCodeHookSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/PostDialogCodeHookInvocationSpecification"
              },
              {
                "description": "Contains the responses and actions that Amazon Lex takes after the Lambda function is complete."
              }
            ]
          }
        },
        "description": "Settings that specify the dialog code hook that is called by Amazon Lex at a step of the conversation. "
      },
      "PostDialogCodeHookInvocationSpecification": {
        "type": "object",
        "properties": {
          "successResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "successNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifics the next step the bot runs after the dialog code hook finishes successfully. "
              }
            ]
          },
          "successConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the dialog code hook finishes successfully."
              }
            ]
          },
          "failureResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "failureNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step the bot runs after the dialog code hook throws an exception or returns with the <code>State</code> field of the <code>Intent</code> object set to <code>Failed</code>."
              }
            ]
          },
          "failureConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate after the dialog code hook throws an exception or returns with the <code>State</code> field of the <code>Intent</code> object set to <code>Failed</code>."
              }
            ]
          },
          "timeoutResponse": {
            "$ref": "#/$defs/ResponseSpecification"
          },
          "timeoutNextStep": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogState"
              },
              {
                "description": "Specifies the next step that the bot runs when the code hook times out."
              }
            ]
          },
          "timeoutConditional": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionalSpecification"
              },
              {
                "description": "A list of conditional branches to evaluate if the code hook times out."
              }
            ]
          }
        },
        "description": "Specifies next steps to run after the dialog code hook finishes."
      },
      "ElicitationCodeHookInvocationSetting": {
        "type": "object",
        "required": [
          "enableCodeHookInvocation"
        ],
        "properties": {
          "enableCodeHookInvocation": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Indicates whether a Lambda function should be invoked for the dialog."
              }
            ]
          },
          "invocationLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "A label that indicates the dialog step from which the dialog code hook is happening."
              }
            ]
          }
        },
        "description": "Settings that specify the dialog code hook that is called by Amazon Lex between eliciting slot values."
      },
      "ObfuscationSettingType": {
        "type": "string",
        "enum": [
          "None",
          "DefaultObfuscation"
        ]
      },
      "Boolean": {
        "type": "boolean"
      },
      "SubSlotExpression": {
        "type": "string",
        "pattern": "[0-9A-Za-z_\\-\\s\\(\\)]+",
        "minLength": 0,
        "maxLength": 640
      },
      "SubSlotSpecificationMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 6,
        "additionalProperties": {
          "$ref": "#/$defs/Specifications"
        }
      },
      "Specifications": {
        "type": "object",
        "required": [
          "slotTypeId",
          "valueElicitationSetting"
        ],
        "properties": {
          "slotTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/BuiltInOrCustomSlotTypeId"
              },
              {
                "description": "The unique identifier assigned to the slot type."
              }
            ]
          },
          "valueElicitationSetting": {
            "allOf": [
              {
                "$ref": "#/$defs/SubSlotValueElicitationSetting"
              },
              {
                "description": "Specifies the elicitation setting details for constituent sub slots of a composite slot."
              }
            ]
          }
        },
        "description": "Subslot specifications."
      },
      "BuiltInOrCustomSlotTypeId": {
        "type": "string",
        "pattern": "^((AMAZON\\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$",
        "minLength": 1,
        "maxLength": 25
      },
      "SubSlotValueElicitationSetting": {
        "type": "object",
        "required": [
          "promptSpecification"
        ],
        "properties": {
          "defaultValueSpecification": {
            "$ref": "#/$defs/SlotDefaultValueSpecification"
          },
          "promptSpecification": {
            "$ref": "#/$defs/PromptSpecification"
          },
          "sampleUtterances": {
            "allOf": [
              {
                "$ref": "#/$defs/SampleUtterancesList"
              },
              {
                "description": "If you know a specific pattern that users might respond to an Amazon Lex request for a sub slot value, you can provide those utterances to improve accuracy. This is optional. In most cases Amazon Lex is capable of understanding user utterances. This is similar to <code>SampleUtterances</code> for slots."
              }
            ]
          },
          "waitAndContinueSpecification": {
            "$ref": "#/$defs/WaitAndContinueSpecification"
          }
        },
        "description": "<p>Subslot elicitation settings.</p> <p> <code>DefaultValueSpecification</code> is a list of default values for a constituent sub slot in a composite slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values. This is similar to <code>DefaultValueSpecification</code> for slots.</p> <p> <code>PromptSpecification</code> is the prompt that Amazon Lex uses to elicit the sub slot value from the user. This is similar to <code>PromptSpecification</code> for slots.</p>"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/intents/{intentId}/slots/{slotId}/"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**slotId**",
            "**slotName**",
            "**description**",
            "**slotTypeId**",
            "**valueElicitationSetting**",
            "**obfuscationSetting**",
            "**botId**",
            "**botVersion**",
            "**localeId**",
            "**intentId**",
            "**creationDateTime**",
            "**lastUpdatedDateTime**",
            "**multipleValuesSetting**",
            "**subSlotSetting**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
