{
  "name": "ListAggregatedUtterances",
  "description": "<p>Provides a list of utterances that users have sent to the bot.</p> <p>Utterances are aggregated by the text of the utterance. For example, all instances where customers used the phrase \"I want to order pizza\" are aggregated into the same line in the response.</p> <p>You can see both detected utterances and missed utterances. A detected utterance is where the bot properly recognized the utterance and activated the associated intent. A missed utterance was not recognized by the bot and didn't activate an intent.</p> <p>Utterances can be aggregated for a bot alias or for a bot version, but not both at the same time.</p> <p>Utterances statistics are not generated under the following conditions:</p> <ul> <li> <p>The <code>childDirected</code> field was set to true when the bot was created.</p> </li> <li> <p>You are using slot obfuscation with one or more slots.</p> </li> <li> <p>You opted out of participating in improving Amazon Lex.</p> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The unique identifier of the bot associated with this request."
      },
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "localeId",
          "aggregationDuration"
        ],
        "properties": {
          "botAliasId": {
            "description": "The identifier of the bot alias associated with this request. If you specify the bot alias, you can't specify the bot version.",
            "type": "string",
            "pattern": "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$",
            "minLength": 10,
            "maxLength": 10
          },
          "botVersion": {
            "description": "The identifier of the bot version associated with this request. If you specify the bot version, you can't specify the bot alias.",
            "type": "string",
            "pattern": "^(DRAFT|[0-9]+)$",
            "minLength": 1,
            "maxLength": 5
          },
          "localeId": {
            "description": "The identifier of the language and locale where the utterances were collected. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>.",
            "type": "string"
          },
          "aggregationDuration": {
            "description": "Provides parameters for setting the time window and duration for aggregating utterance data.",
            "type": "object",
            "properties": {
              "relativeAggregationDuration": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RelativeAggregationDuration"
                  },
                  {
                    "description": "The desired time window for aggregating utterances. "
                  }
                ]
              }
            }
          },
          "sortBy": {
            "description": "Specifies attributes for sorting a list of utterances.",
            "type": "object",
            "properties": {
              "attribute": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AggregatedUtterancesSortAttribute"
                  },
                  {
                    "description": "The utterance attribute to sort by."
                  }
                ]
              },
              "order": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SortOrder"
                  },
                  {
                    "description": "Specifies whether to sort the aggregated utterances in ascending or descending order."
                  }
                ]
              }
            }
          },
          "filters": {
            "description": "Provides the specification of a filter used to limit the utterances in the response to only those that match the filter specification. You can only specify one filter and one string to filter on.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AggregatedUtterancesFilter"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "maxResults": {
            "description": "The maximum number of utterances to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned. If you don't specify the <code>maxResults</code> parameter, 1,000 results are returned.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          },
          "nextToken": {
            "description": "If the response from the <code>ListAggregatedUtterances</code> operation contains more results that specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "botId",
      "body"
    ],
    "$defs": {
      "RelativeAggregationDuration": {
        "type": "object",
        "required": [
          "timeDimension",
          "timeValue"
        ],
        "properties": {
          "timeDimension": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeDimension"
              },
              {
                "description": "The type of time period that the <code>timeValue</code> field represents. "
              }
            ]
          },
          "timeValue": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeValue"
              },
              {
                "description": "<p>The period of the time window to gather statistics for. The valid value depends on the setting of the <code>timeDimension</code> field.</p> <ul> <li> <p> <code>Hours</code> - 1/3/6/12/24</p> </li> <li> <p> <code>Days</code> - 3</p> </li> <li> <p> <code>Weeks</code> - 1/2</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>Specifies the time window that utterance statistics are returned for. The time window is always relative to the last time that the that utterances were aggregated. For example, if the <code>ListAggregatedUtterances</code> operation is called at 1600, the time window is set to 1 hour, and the last refresh time was 1530, only utterances made between 1430 and 1530 are returned.</p> <p>You can choose the time window that statistics should be returned for.</p> <ul> <li> <p> <b>Hours</b> - You can request utterance statistics for 1, 3, 6, 12, or 24 hour time windows. Statistics are refreshed every half hour for 1 hour time windows, and hourly for the other time windows.</p> </li> <li> <p> <b>Days</b> - You can request utterance statistics for 3 days. Statistics are refreshed every 6 hours.</p> </li> <li> <p> <b>Weeks</b> - You can see statistics for one or two weeks. Statistics are refreshed every 12 hours for one week time windows, and once per day for two week time windows.</p> </li> </ul>"
      },
      "TimeDimension": {
        "type": "string",
        "enum": [
          "Hours",
          "Days",
          "Weeks"
        ]
      },
      "TimeValue": {
        "type": "integer",
        "minimum": 1,
        "maximum": 24
      },
      "AggregatedUtterancesSortAttribute": {
        "type": "string",
        "enum": [
          "HitCount",
          "MissedCount"
        ]
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "AggregatedUtterancesFilter": {
        "type": "object",
        "required": [
          "name",
          "values",
          "operator"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AggregatedUtterancesFilterName"
              },
              {
                "description": "The name of the field to filter the utterance list."
              }
            ]
          },
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterValues"
              },
              {
                "description": "The value to use for filtering the list of bots."
              }
            ]
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/$defs/AggregatedUtterancesFilterOperator"
              },
              {
                "description": "The operator to use for the filter. Specify <code>EQ</code> when the <code>ListAggregatedUtterances</code> operation should return only utterances that equal the specified value. Specify <code>CO</code> when the <code>ListAggregatedUtterances</code> operation should return utterances that contain the specified value."
              }
            ]
          }
        },
        "description": "Filters responses returned by the <code>ListAggregatedUtterances</code> operation."
      },
      "AggregatedUtterancesFilterName": {
        "type": "string",
        "enum": [
          "Utterance"
        ]
      },
      "FilterValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FilterValue"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "FilterValue": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_()\\s-]+$",
        "minLength": 1,
        "maxLength": 100
      },
      "AggregatedUtterancesFilterOperator": {
        "type": "string",
        "enum": [
          "CO",
          "EQ"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/bots/{botId}/aggregatedutterances/{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**botId**",
            "**botAliasId**",
            "**botVersion**",
            "**localeId**",
            "**aggregationDuration**",
            "**aggregationWindowStartTime**",
            "**aggregationWindowEndTime**",
            "**aggregationLastRefreshedDateTime**",
            "**aggregatedUtterancesSummaries**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
