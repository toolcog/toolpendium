{
  "name": "StartTestSetGeneration",
  "description": "The action to start the generation of test set.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "testSetName",
          "storageLocation",
          "generationDataSource",
          "roleArn"
        ],
        "properties": {
          "testSetName": {
            "description": "The test set name for the test set generation request.",
            "type": "string",
            "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "description": "The test set description for the test set generation request.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "storageLocation": {
            "description": "Contains information about the location in which the test set is stored.",
            "type": "object",
            "properties": {
              "s3BucketName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/S3BucketName"
                  },
                  {
                    "description": "The name of the Amazon S3 bucket in which the test set is stored."
                  }
                ]
              },
              "s3Path": {
                "allOf": [
                  {
                    "$ref": "#/$defs/S3ObjectPath"
                  },
                  {
                    "description": "The path inside the Amazon S3 bucket where the test set is stored."
                  }
                ]
              },
              "kmsKeyArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/KmsKeyArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set."
                  }
                ]
              }
            }
          },
          "generationDataSource": {
            "description": "Contains information about the data source from which the test set is generated.",
            "type": "object",
            "properties": {
              "conversationLogsDataSource": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ConversationLogsDataSource"
                  },
                  {
                    "description": "Contains information about the bot from which the conversation logs are sourced."
                  }
                ]
              }
            }
          },
          "roleArn": {
            "description": "The roleARN used for any operation in the test set to access resources in the Amazon Web Services account.",
            "type": "string",
            "pattern": "^arn:aws:iam::[0-9]{12}:role/.*$",
            "minLength": 32,
            "maxLength": 2048
          },
          "testSetTags": {
            "description": "A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 200,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "S3BucketName": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectPath": {
        "type": "string",
        "pattern": "[\\.\\-\\!\\*\\_\\'\\(\\)a-zA-Z0-9][\\.\\-\\!\\*\\_\\'\\(\\)\\/a-zA-Z0-9]*$",
        "minLength": 1,
        "maxLength": 1024
      },
      "KmsKeyArn": {
        "type": "string",
        "pattern": "^arn:[\\w\\-]+:kms:[\\w\\-]+:[\\d]{12}:(?:key\\/[\\w\\-]+|alias\\/[a-zA-Z0-9:\\/_\\-]{1,256})$",
        "minLength": 20,
        "maxLength": 2048
      },
      "ConversationLogsDataSource": {
        "type": "object",
        "required": [
          "botId",
          "botAliasId",
          "localeId",
          "filter"
        ],
        "properties": {
          "botId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The bot Id from the conversation logs."
              }
            ]
          },
          "botAliasId": {
            "allOf": [
              {
                "$ref": "#/$defs/BotAliasId"
              },
              {
                "description": "The bot alias Id from the conversation logs."
              }
            ]
          },
          "localeId": {
            "allOf": [
              {
                "$ref": "#/$defs/LocaleId"
              },
              {
                "description": "The locale Id of the conversation log."
              }
            ]
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/$defs/ConversationLogsDataSourceFilterBy"
              },
              {
                "description": "The filter for the data source of the conversation log."
              }
            ]
          }
        },
        "description": "The data source that uses conversation logs."
      },
      "Id": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10
      },
      "BotAliasId": {
        "type": "string",
        "pattern": "^(\\bTSTALIASID\\b|[0-9a-zA-Z]+)$",
        "minLength": 10,
        "maxLength": 10
      },
      "LocaleId": {
        "type": "string"
      },
      "ConversationLogsDataSourceFilterBy": {
        "type": "object",
        "required": [
          "startTime",
          "endTime",
          "inputMode"
        ],
        "properties": {
          "startTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The start time for the conversation log."
              }
            ]
          },
          "endTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The end time for the conversation log."
              }
            ]
          },
          "inputMode": {
            "allOf": [
              {
                "$ref": "#/$defs/ConversationLogsInputModeFilter"
              },
              {
                "description": "The selection to filter by input mode for the conversation logs. "
              }
            ]
          }
        },
        "description": "The selected data source to filter the conversation log."
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "ConversationLogsInputModeFilter": {
        "type": "string",
        "enum": [
          "Speech",
          "Text"
        ]
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/testsetgenerations"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**testSetGenerationId**",
            "**creationDateTime**",
            "**testSetGenerationStatus**",
            "**testSetName**",
            "**description**",
            "**storageLocation**",
            "**generationDataSource**",
            "**roleArn**",
            "**testSetTags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
