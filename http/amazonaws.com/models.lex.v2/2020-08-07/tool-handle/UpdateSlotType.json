{
  "name": "UpdateSlotType",
  "description": "Updates the configuration of an existing slot type.",
  "parameters": {
    "type": "object",
    "properties": {
      "slotTypeId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The unique identifier of the slot type to update."
      },
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The identifier of the bot that contains the slot type."
      },
      "botVersion": {
        "type": "string",
        "pattern": "^DRAFT$",
        "minLength": 5,
        "maxLength": 5,
        "description": "The version of the bot that contains the slot type. Must be <code>DRAFT</code>."
      },
      "localeId": {
        "type": "string",
        "description": "The identifier of the language and locale that contains the slot type. The string must match one of the supported locales. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "slotTypeName"
        ],
        "properties": {
          "slotTypeName": {
            "description": "The new name of the slot type.",
            "type": "string",
            "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
            "minLength": 1,
            "maxLength": 100
          },
          "description": {
            "description": "The new description of the slot type.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "slotTypeValues": {
            "description": "A new list of values and their optional synonyms that define the values that the slot type can take.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SlotTypeValue"
            },
            "minItems": 1,
            "maxItems": 10000
          },
          "valueSelectionSetting": {
            "description": "Contains settings used by Amazon Lex to select a slot value.",
            "type": "object",
            "properties": {
              "resolutionStrategy": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SlotValueResolutionStrategy"
                  },
                  {
                    "description": "<p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p> <ul> <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li> <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li> </ul> <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>"
                  }
                ]
              },
              "regexFilter": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SlotValueRegexFilter"
                  },
                  {
                    "description": "A regular expression used to validate the value of a slot."
                  }
                ]
              },
              "advancedRecognitionSetting": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AdvancedRecognitionSetting"
                  },
                  {
                    "description": "Provides settings that enable advanced recognition settings for slot values. You can use this to enable using slot values as a custom vocabulary for recognizing user utterances."
                  }
                ]
              }
            }
          },
          "parentSlotTypeSignature": {
            "description": "The new built-in slot type that should be used as the parent of this slot type.",
            "type": "string"
          },
          "externalSourceSetting": {
            "description": "Provides information about the external source of the slot type's definition.",
            "type": "object",
            "properties": {
              "grammarSlotTypeSetting": {
                "allOf": [
                  {
                    "$ref": "#/$defs/GrammarSlotTypeSetting"
                  },
                  {
                    "description": "Settings required for a slot type based on a grammar that you provide."
                  }
                ]
              }
            }
          },
          "compositeSlotTypeSetting": {
            "description": "A composite slot is a combination of two or more slots that capture multiple pieces of information in a single user input.",
            "type": "object",
            "properties": {
              "subSlots": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SubSlotTypeList"
                  },
                  {
                    "description": "Subslots in the composite slot."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "slotTypeId",
      "botId",
      "botVersion",
      "localeId",
      "body"
    ],
    "$defs": {
      "SlotTypeValue": {
        "type": "object",
        "properties": {
          "sampleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/SampleValue"
              },
              {
                "description": "The value of the slot type entry."
              }
            ]
          },
          "synonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/SynonymList"
              },
              {
                "description": "Additional values related to the slot type entry."
              }
            ]
          }
        },
        "description": "Each slot type can have a set of values. Each <code>SlotTypeValue</code> represents a value that the slot type can take."
      },
      "SampleValue": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/Value"
              },
              {
                "description": "The value that can be used for a slot type."
              }
            ]
          }
        },
        "description": "Defines one of the values for a slot type."
      },
      "Value": {
        "type": "string",
        "minLength": 1,
        "maxLength": 140
      },
      "SynonymList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SampleValue"
        },
        "minItems": 1,
        "maxItems": 10000
      },
      "SlotValueResolutionStrategy": {
        "type": "string",
        "enum": [
          "OriginalValue",
          "TopResolution",
          "Concatenation"
        ]
      },
      "SlotValueRegexFilter": {
        "type": "object",
        "required": [
          "pattern"
        ],
        "properties": {
          "pattern": {
            "allOf": [
              {
                "$ref": "#/$defs/RegexPattern"
              },
              {
                "description": "<p>A regular expression used to validate the value of a slot.</p> <p> Use a standard regular expression. Amazon Lex supports the following characters in the regular expression: </p> <ul> <li> <p>A-Z, a-z</p> </li> <li> <p>0-9</p> </li> <li> <p>Unicode characters (\"\\⁠u&lt;Unicode&gt;\")</p> </li> </ul> <p> Represent Unicode characters with four digits, for example \"\\⁠u0041\" or \"\\⁠u005A\". </p> <p> The following regular expression operators are not supported: </p> <ul> <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li> <li> <p>Wild card (.)</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Provides a regular expression used to validate the value of a slot."
      },
      "RegexPattern": {
        "type": "string",
        "minLength": 1,
        "maxLength": 300
      },
      "AdvancedRecognitionSetting": {
        "type": "object",
        "properties": {
          "audioRecognitionStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/AudioRecognitionStrategy"
              },
              {
                "description": "Enables using the slot values as a custom vocabulary for recognizing user utterances."
              }
            ]
          }
        },
        "description": "Provides settings that enable advanced recognition settings for slot values."
      },
      "AudioRecognitionStrategy": {
        "type": "string",
        "enum": [
          "UseSlotValuesAsCustomVocabulary"
        ]
      },
      "GrammarSlotTypeSetting": {
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/$defs/GrammarSlotTypeSource"
              },
              {
                "description": "The source of the grammar used to create the slot type."
              }
            ]
          }
        },
        "description": "Settings requried for a slot type based on a grammar that you provide."
      },
      "GrammarSlotTypeSource": {
        "type": "object",
        "required": [
          "s3BucketName",
          "s3ObjectKey"
        ],
        "properties": {
          "s3BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the Amazon S3 bucket that contains the grammar source."
              }
            ]
          },
          "s3ObjectKey": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectPath"
              },
              {
                "description": "The path to the grammar in the Amazon S3 bucket."
              }
            ]
          },
          "kmsKeyArn": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyArn"
              },
              {
                "description": "The KMS key required to decrypt the contents of the grammar, if any."
              }
            ]
          }
        },
        "description": "Describes the Amazon S3 bucket name and location for the grammar that is the source for the slot type."
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectPath": {
        "type": "string",
        "pattern": "[\\.\\-\\!\\*\\_\\'\\(\\)a-zA-Z0-9][\\.\\-\\!\\*\\_\\'\\(\\)\\/a-zA-Z0-9]*$",
        "minLength": 1,
        "maxLength": 1024
      },
      "KmsKeyArn": {
        "type": "string",
        "pattern": "^arn:[\\w\\-]+:kms:[\\w\\-]+:[\\d]{12}:(?:key\\/[\\w\\-]+|alias\\/[a-zA-Z0-9:\\/_\\-]{1,256})$",
        "minLength": 20,
        "maxLength": 2048
      },
      "SubSlotTypeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SubSlotTypeComposition"
        },
        "minItems": 0,
        "maxItems": 6
      },
      "SubSlotTypeComposition": {
        "type": "object",
        "required": [
          "name",
          "slotTypeId"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "Name of a constituent sub slot inside a composite slot."
              }
            ]
          },
          "slotTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/BuiltInOrCustomSlotTypeId"
              },
              {
                "description": "The unique identifier assigned to a slot type. This refers to either a built-in slot type or the unique slotTypeId of a custom slot type."
              }
            ]
          }
        },
        "description": "Subslot type composition."
      },
      "Name": {
        "type": "string",
        "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
        "minLength": 1,
        "maxLength": 100
      },
      "BuiltInOrCustomSlotTypeId": {
        "type": "string",
        "pattern": "^((AMAZON\\.)[a-zA-Z_]+?|[0-9a-zA-Z]+)$",
        "minLength": 1,
        "maxLength": 25
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/bots/{botId}/botversions/{botVersion}/botlocales/{localeId}/slottypes/{slotTypeId}/"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**slotTypeId**",
            "**slotTypeName**",
            "**description**",
            "**slotTypeValues**",
            "**valueSelectionSetting**",
            "**parentSlotTypeSignature**",
            "**botId**",
            "**botVersion**",
            "**localeId**",
            "**creationDateTime**",
            "**lastUpdatedDateTime**",
            [
              "**externalSourceSetting**: Provides information about the external source of the slot type's definition.",
              {
                "$ul": [
                  "**grammarSlotTypeSetting**"
                ]
              }
            ],
            "**compositeSlotTypeSetting**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
