{
  "name": "StartImport",
  "description": "Starts importing a bot, bot locale, or custom vocabulary from a zip archive that you uploaded to an S3 bucket.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "importId",
          "resourceSpecification",
          "mergeStrategy"
        ],
        "properties": {
          "importId": {
            "description": "The unique identifier for the import. It is included in the response from the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_CreateUploadUrl.html\">CreateUploadUrl</a> operation.",
            "type": "string",
            "pattern": "^[0-9a-zA-Z]+$",
            "minLength": 10,
            "maxLength": 10
          },
          "resourceSpecification": {
            "description": "Provides information about the bot or bot locale that you want to import. You can specify the <code>botImportSpecification</code> or the <code>botLocaleImportSpecification</code>, but not both.",
            "type": "object",
            "properties": {
              "botImportSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BotImportSpecification"
                  },
                  {
                    "description": "Parameters for importing a bot."
                  }
                ]
              },
              "botLocaleImportSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BotLocaleImportSpecification"
                  },
                  {
                    "description": "Parameters for importing a bot locale."
                  }
                ]
              },
              "customVocabularyImportSpecification": {
                "$ref": "#/$defs/CustomVocabularyImportSpecification"
              },
              "testSetImportResourceSpecification": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TestSetImportResourceSpecification"
                  },
                  {
                    "description": "Specifications for the test set that is imported."
                  }
                ]
              }
            }
          },
          "mergeStrategy": {
            "description": "The strategy to use when there is a name conflict between the imported resource and an existing resource. When the merge strategy is <code>FailOnConflict</code> existing resources are not overwritten and the import fails.",
            "type": "string",
            "enum": [
              "Overwrite",
              "FailOnConflict",
              "Append"
            ]
          },
          "filePassword": {
            "description": "The password used to encrypt the zip archive that contains the resource definition. You should always encrypt the zip archive to protect it during transit between your site and Amazon Lex.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "format": "password"
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "BotImportSpecification": {
        "type": "object",
        "required": [
          "botName",
          "roleArn",
          "dataPrivacy"
        ],
        "properties": {
          "botName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name that Amazon Lex should use for the bot."
              }
            ]
          },
          "roleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the IAM role used to build and run the bot."
              }
            ]
          },
          "dataPrivacy": {
            "$ref": "#/$defs/DataPrivacy"
          },
          "idleSessionTTLInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/SessionTTL"
              },
              {
                "description": "<p>The time, in seconds, that Amazon Lex should keep information about a user's conversation with the bot. </p> <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>You can specify between 60 (1 minute) and 86,400 (24 hours) seconds.</p>"
              }
            ]
          },
          "botTags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagMap"
              },
              {
                "description": "A list of tags to add to the bot. You can only add tags when you import a bot. You can't use the <code>UpdateBot</code> operation to update tags. To update tags, use the <code>TagResource</code> operation."
              }
            ]
          },
          "testBotAliasTags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagMap"
              },
              {
                "description": "A list of tags to add to the test alias for a bot. You can only add tags when you import a bot. You can't use the <code>UpdateAlias</code> operation to update tags. To update tags on the test alias, use the <code>TagResource</code> operation."
              }
            ]
          }
        },
        "description": "Provides the bot parameters required for importing a bot."
      },
      "Name": {
        "type": "string",
        "pattern": "^([0-9a-zA-Z][_-]?){1,100}$",
        "minLength": 1,
        "maxLength": 100
      },
      "RoleArn": {
        "type": "string",
        "pattern": "^arn:aws:iam::[0-9]{12}:role/.*$",
        "minLength": 32,
        "maxLength": 2048
      },
      "DataPrivacy": {
        "type": "object",
        "required": [
          "childDirected"
        ],
        "properties": {
          "childDirected": {
            "allOf": [
              {
                "$ref": "#/$defs/ChildDirected"
              },
              {
                "description": "For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href=\"http://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ</a>."
              }
            ]
          }
        },
        "description": "By default, data stored by Amazon Lex is encrypted. The <code>DataPrivacy</code> structure provides settings that determine how Amazon Lex handles special cases of securing the data for your bot. "
      },
      "ChildDirected": {
        "type": "boolean"
      },
      "SessionTTL": {
        "type": "integer",
        "minimum": 60,
        "maximum": 86400
      },
      "TagMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 200,
        "additionalProperties": {
          "$ref": "#/$defs/TagValue"
        }
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "BotLocaleImportSpecification": {
        "type": "object",
        "required": [
          "botId",
          "botVersion",
          "localeId"
        ],
        "properties": {
          "botId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The identifier of the bot to import the locale to."
              }
            ]
          },
          "botVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/DraftBotVersion"
              },
              {
                "description": "The version of the bot to import the locale to. This can only be the <code>DRAFT</code> version of the bot."
              }
            ]
          },
          "localeId": {
            "allOf": [
              {
                "$ref": "#/$defs/LocaleId"
              },
              {
                "description": "The identifier of the language and locale that the bot will be used in. The string must match one of the supported locales. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a>."
              }
            ]
          },
          "nluIntentConfidenceThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfidenceThreshold"
              },
              {
                "description": "<p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot. </p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p> <code>AMAZON.FallbackIntent</code> </p> </li> <li> <p> <code>IntentA</code> </p> </li> <li> <p> <code>IntentB</code> </p> </li> <li> <p> <code>IntentC</code> </p> </li> </ul>"
              }
            ]
          },
          "voiceSettings": {
            "$ref": "#/$defs/VoiceSettings"
          }
        },
        "description": "Provides the bot locale parameters required for importing a bot locale."
      },
      "Id": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10
      },
      "DraftBotVersion": {
        "type": "string",
        "pattern": "^DRAFT$",
        "minLength": 5,
        "maxLength": 5
      },
      "LocaleId": {
        "type": "string"
      },
      "ConfidenceThreshold": {
        "type": "number",
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "VoiceSettings": {
        "type": "object",
        "required": [
          "voiceId"
        ],
        "properties": {
          "voiceId": {
            "allOf": [
              {
                "$ref": "#/$defs/VoiceId"
              },
              {
                "description": "The identifier of the Amazon Polly voice to use."
              }
            ]
          },
          "engine": {
            "allOf": [
              {
                "$ref": "#/$defs/VoiceEngine"
              },
              {
                "description": "<p>Indicates the type of Amazon Polly voice that Amazon Lex should use for voice interaction with the user. For more information, see the <a href=\"https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html#polly-SynthesizeSpeech-request-Engine\"> <code>engine</code> parameter of the <code>SynthesizeSpeech</code> operation</a> in the <i>Amazon Polly developer guide</i>.</p> <p>If you do not specify a value, the default is <code>standard</code>.</p>"
              }
            ]
          }
        },
        "description": "Defines settings for using an Amazon Polly voice to communicate with a user."
      },
      "VoiceId": {
        "type": "string"
      },
      "VoiceEngine": {
        "type": "string",
        "enum": [
          "standard",
          "neural"
        ]
      },
      "CustomVocabularyImportSpecification": {
        "type": "object",
        "required": [
          "botId",
          "botVersion",
          "localeId"
        ],
        "properties": {
          "botId": {
            "allOf": [
              {
                "$ref": "#/$defs/Id"
              },
              {
                "description": "The identifier of the bot to import the custom vocabulary to."
              }
            ]
          },
          "botVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/DraftBotVersion"
              },
              {
                "description": "The version of the bot to import the custom vocabulary to."
              }
            ]
          },
          "localeId": {
            "allOf": [
              {
                "$ref": "#/$defs/LocaleId"
              },
              {
                "description": "The identifier of the local to import the custom vocabulary to. The value must be <code>en_GB</code>."
              }
            ]
          }
        },
        "description": "Provides the parameters required for importing a custom vocabulary."
      },
      "TestSetImportResourceSpecification": {
        "type": "object",
        "required": [
          "testSetName",
          "roleArn",
          "storageLocation",
          "importInputLocation",
          "modality"
        ],
        "properties": {
          "testSetName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the test set."
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "The description of the test set."
              }
            ]
          },
          "roleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an IAM role that has permission to access the test set."
              }
            ]
          },
          "storageLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/TestSetStorageLocation"
              },
              {
                "description": "Contains information about the location that Amazon Lex uses to store the test-set."
              }
            ]
          },
          "importInputLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/TestSetImportInputLocation"
              },
              {
                "description": "Contains information about the input location from where test-set should be imported."
              }
            ]
          },
          "modality": {
            "allOf": [
              {
                "$ref": "#/$defs/TestSetModality"
              },
              {
                "description": "Specifies whether the test-set being imported contains written or spoken data."
              }
            ]
          },
          "testSetTags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagMap"
              },
              {
                "description": "A list of tags to add to the test set. You can only add tags when you import/generate a new test set. You can't use the <code>UpdateTestSet</code> operation to update tags. To update tags, use the <code>TagResource</code> operation."
              }
            ]
          }
        },
        "description": "Contains information about the test set that is imported."
      },
      "Description": {
        "type": "string",
        "minLength": 0,
        "maxLength": 200
      },
      "TestSetStorageLocation": {
        "type": "object",
        "required": [
          "s3BucketName",
          "s3Path"
        ],
        "properties": {
          "s3BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the Amazon S3 bucket in which the test set is stored."
              }
            ]
          },
          "s3Path": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectPath"
              },
              {
                "description": "The path inside the Amazon S3 bucket where the test set is stored."
              }
            ]
          },
          "kmsKeyArn": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an Amazon Web Services Key Management Service (KMS) key for encrypting the test set."
              }
            ]
          }
        },
        "description": "Contains information about the location in which the test set is stored."
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectPath": {
        "type": "string",
        "pattern": "[\\.\\-\\!\\*\\_\\'\\(\\)a-zA-Z0-9][\\.\\-\\!\\*\\_\\'\\(\\)\\/a-zA-Z0-9]*$",
        "minLength": 1,
        "maxLength": 1024
      },
      "KmsKeyArn": {
        "type": "string",
        "pattern": "^arn:[\\w\\-]+:kms:[\\w\\-]+:[\\d]{12}:(?:key\\/[\\w\\-]+|alias\\/[a-zA-Z0-9:\\/_\\-]{1,256})$",
        "minLength": 20,
        "maxLength": 2048
      },
      "TestSetImportInputLocation": {
        "type": "object",
        "required": [
          "s3BucketName",
          "s3Path"
        ],
        "properties": {
          "s3BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the Amazon S3 bucket."
              }
            ]
          },
          "s3Path": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectPath"
              },
              {
                "description": "The path inside the Amazon S3 bucket pointing to the test-set CSV file."
              }
            ]
          }
        },
        "description": "Contains information about the Amazon S3 location from which the test set is imported."
      },
      "TestSetModality": {
        "type": "string",
        "enum": [
          "Text",
          "Audio"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/imports/"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**importId**",
            "**resourceSpecification**",
            "**mergeStrategy**",
            "**importStatus**",
            "**creationDateTime**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
