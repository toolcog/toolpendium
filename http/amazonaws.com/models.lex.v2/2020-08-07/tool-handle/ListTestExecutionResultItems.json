{
  "name": "ListTestExecutionResultItems",
  "description": "Gets a list of test execution result items.",
  "parameters": {
    "type": "object",
    "properties": {
      "testExecutionId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The unique identifier of the test execution to list the result items."
      },
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "resultFilterBy"
        ],
        "properties": {
          "resultFilterBy": {
            "description": "Contains information about the method by which to filter the results of the test execution.",
            "type": "object",
            "properties": {
              "resultTypeFilter": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TestResultTypeFilter"
                  },
                  {
                    "description": "Specifies which results to filter. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/test-results-details-test-set.html\">Test result details\"&gt;Test results details</a> for details about different types of results."
                  }
                ]
              },
              "conversationLevelTestResultsFilterBy": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ConversationLevelTestResultsFilterBy"
                  },
                  {
                    "description": "Contains information about the method for filtering Conversation level test results."
                  }
                ]
              }
            }
          },
          "maxResults": {
            "description": "The maximum number of test execution result items to return in each page. If there are fewer results than the max page size, only the actual number of results are returned.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          },
          "nextToken": {
            "description": "If the response from the <code>ListTestExecutionResultItems</code> operation contains more results than specified in the <code>maxResults</code> parameter, a token is returned in the response. Use that token in the <code>nextToken</code> parameter to return the next page of results.",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "testExecutionId",
      "body"
    ],
    "$defs": {
      "TestResultTypeFilter": {
        "type": "string",
        "enum": [
          "OverallTestResults",
          "ConversationLevelTestResults",
          "IntentClassificationTestResults",
          "SlotResolutionTestResults",
          "UtteranceLevelResults"
        ]
      },
      "ConversationLevelTestResultsFilterBy": {
        "type": "object",
        "properties": {
          "endToEndResult": {
            "allOf": [
              {
                "$ref": "#/$defs/TestResultMatchStatus"
              },
              {
                "description": "The selection of matched or mismatched end-to-end status to filter test set results data at the conversation level."
              }
            ]
          }
        },
        "description": "The selection to filter the test set results data at the conversation level."
      },
      "TestResultMatchStatus": {
        "type": "string",
        "enum": [
          "Matched",
          "Mismatched",
          "ExecutionError"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/testexecutions/{testExecutionId}/results{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**testExecutionResults**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
