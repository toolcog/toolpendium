{
  "name": "ListUtteranceMetrics",
  "description": "<note> <p>To use this API operation, your IAM role must have permissions to perform the <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_ListAggregatedUtterances.html\">ListAggregatedUtterances</a> operation, which provides access to utterance-related analytics. See <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/monitoring-utterances.html\">Viewing utterance statistics</a> for the IAM policy to apply to the IAM role.</p> </note> <p>Retrieves summary metrics for the utterances in your bot. The following fields are required:</p> <ul> <li> <p> <code>metrics</code> – A list of <a href=\"https://docs.aws.amazon.com/lexv2/latest/APIReference/API_AnalyticsUtteranceMetric.html\">AnalyticsUtteranceMetric</a> objects. In each object, use the <code>name</code> field to specify the metric to calculate, the <code>statistic</code> field to specify whether to calculate the <code>Sum</code>, <code>Average</code>, or <code>Max</code> number, and the <code>order</code> field to specify whether to sort the results in <code>Ascending</code> or <code>Descending</code> order.</p> </li> <li> <p> <code>startDateTime</code> and <code>endDateTime</code> – Define a time range for which you want to retrieve results.</p> </li> </ul> <p>Of the optional fields, you can organize the results in the following ways:</p> <ul> <li> <p>Use the <code>filters</code> field to filter the results, the <code>groupBy</code> field to specify categories by which to group the results, and the <code>binBy</code> field to specify time intervals by which to group the results.</p> </li> <li> <p>Use the <code>maxResults</code> field to limit the number of results to return in a single response and the <code>nextToken</code> field to return the next batch of results if the response does not return the full set of results.</p> </li> </ul> <p>Note that an <code>order</code> field exists in both <code>binBy</code> and <code>metrics</code>. Currently, you can specify it in either field, but not in both.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The identifier for the bot for which you want to retrieve utterance metrics."
      },
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "startDateTime",
          "endDateTime",
          "metrics"
        ],
        "properties": {
          "startDateTime": {
            "description": "The date and time that marks the beginning of the range of time for which you want to see utterance metrics.",
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "description": "The date and time that marks the end of the range of time for which you want to see utterance metrics.",
            "type": "string",
            "format": "date-time"
          },
          "metrics": {
            "description": "A list of objects, each of which contains a metric you want to list, the statistic for the metric you want to return, and the method by which to organize the results.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsUtteranceMetric"
            },
            "minItems": 1,
            "maxItems": 4
          },
          "binBy": {
            "description": "A list of objects, each of which contains specifications for organizing the results by time.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsBinBySpecification"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "groupBy": {
            "description": "<p>A list of objects, each of which specifies how to group the results. You can group by the following criteria:</p> <ul> <li> <p> <code>UtteranceText</code> – The transcription of the utterance.</p> </li> <li> <p> <code>UtteranceState</code> – The state of the utterance. The possible states are detailed in <a href=\"https://docs.aws.amazon.com/analytics-key-definitions-utterances\">Key definitions</a> in the user guide.</p> </li> </ul>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsUtteranceGroupBySpecification"
            },
            "minItems": 1,
            "maxItems": 2
          },
          "attributes": {
            "description": "<p>A list containing attributes related to the utterance that you want the response to return. The following attributes are possible:</p> <ul> <li> <p> <code>LastUsedIntent</code> – The last used intent at the time of the utterance.</p> </li> </ul>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsUtteranceAttribute"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "filters": {
            "description": "A list of objects, each of which describes a condition by which you want to filter the results.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AnalyticsUtteranceFilter"
            },
            "minItems": 1,
            "maxItems": 9
          },
          "maxResults": {
            "description": "The maximum number of results to return in each page of results. If there are fewer results than the maximum page size, only the actual number of results are returned.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1000
          },
          "nextToken": {
            "description": "<p>If the response from the ListUtteranceMetrics operation contains more results than specified in the maxResults parameter, a token is returned in the response.</p> <p>Use the returned token in the nextToken parameter of a ListUtteranceMetrics request to return the next page of results. For a complete set of results, call the ListUtteranceMetrics operation until the nextToken returned in the response is null.</p>",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "botId",
      "body"
    ],
    "$defs": {
      "AnalyticsUtteranceMetric": {
        "type": "object",
        "required": [
          "name",
          "statistic"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsUtteranceMetricName"
              },
              {
                "description": "<p>The metric for which you want to get utterance summary statistics.</p> <ul> <li> <p> <code>Count</code> – The number of utterances.</p> </li> <li> <p> <code>Missed</code> – The number of utterances that Amazon Lex failed to recognize.</p> </li> <li> <p> <code>Detected</code> – The number of utterances that Amazon Lex managed to detect.</p> </li> <li> <p> <code>UtteranceTimestamp</code> – The date and time of the utterance.</p> </li> </ul>"
              }
            ]
          },
          "statistic": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsMetricStatistic"
              },
              {
                "description": "<p>The summary statistic to calculate.</p> <ul> <li> <p> <code>Sum</code> – The total count for the category you provide in <code>name</code>.</p> </li> <li> <p> <code>Average</code> – The total count divided by the number of utterances in the category you provide in <code>name</code>.</p> </li> <li> <p> <code>Max</code> – The highest count in the category you provide in <code>name</code>.</p> </li> </ul>"
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSortOrder"
              },
              {
                "description": "Specifies whether to sort the results in ascending or descending order."
              }
            ]
          }
        },
        "description": "Contains the metric and the summary statistic you want to calculate, and the order in which to sort the results, for the utterances across the user sessions with the bot."
      },
      "AnalyticsUtteranceMetricName": {
        "type": "string",
        "enum": [
          "Count",
          "Missed",
          "Detected",
          "UtteranceTimestamp"
        ]
      },
      "AnalyticsMetricStatistic": {
        "type": "string",
        "enum": [
          "Sum",
          "Avg",
          "Max"
        ]
      },
      "AnalyticsSortOrder": {
        "type": "string",
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "AnalyticsBinBySpecification": {
        "type": "object",
        "required": [
          "name",
          "interval"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsBinByName"
              },
              {
                "description": "Specifies the time metric by which to bin the analytics data."
              }
            ]
          },
          "interval": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsInterval"
              },
              {
                "description": "Specifies the interval of time by which to bin the analytics data."
              }
            ]
          },
          "order": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsSortOrder"
              },
              {
                "description": "Specifies whether to bin the analytics data in ascending or descending order. If this field is left blank, the default order is by the key of the bin in descending order."
              }
            ]
          }
        },
        "description": "Contains the time metric, interval, and method by which to bin the analytics data."
      },
      "AnalyticsBinByName": {
        "type": "string",
        "enum": [
          "ConversationStartTime",
          "UtteranceTimestamp"
        ]
      },
      "AnalyticsInterval": {
        "type": "string",
        "enum": [
          "OneHour",
          "OneDay"
        ]
      },
      "AnalyticsUtteranceGroupBySpecification": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsUtteranceField"
              },
              {
                "description": "Specifies whether to group the utterances by their text or their state."
              }
            ]
          }
        },
        "description": "Contains the category by which to group the utterances."
      },
      "AnalyticsUtteranceField": {
        "type": "string",
        "enum": [
          "UtteranceText",
          "UtteranceState"
        ]
      },
      "AnalyticsUtteranceAttribute": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsUtteranceAttributeName"
              },
              {
                "description": "An attribute to return. The only available attribute is the intent that the bot mapped the utterance to."
              }
            ]
          }
        },
        "description": "An object that specifies the last used intent at the time of the utterance as an attribute to return."
      },
      "AnalyticsUtteranceAttributeName": {
        "type": "string",
        "enum": [
          "LastUsedIntent"
        ]
      },
      "AnalyticsUtteranceFilter": {
        "type": "object",
        "required": [
          "name",
          "operator",
          "values"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsUtteranceFilterName"
              },
              {
                "description": "<p>The category by which to filter the utterances. The descriptions for each option are as follows:</p> <ul> <li> <p> <code>BotAlias</code> – The name of the bot alias.</p> </li> <li> <p> <code>BotVersion</code> – The version of the bot.</p> </li> <li> <p> <code>LocaleId</code> – The locale of the bot.</p> </li> <li> <p> <code>Modality</code> – The modality of the session with the bot (audio, DTMF, or text).</p> </li> <li> <p> <code>Channel</code> – The channel that the bot is integrated with.</p> </li> <li> <p> <code>SessionId</code> – The identifier of the session with the bot.</p> </li> <li> <p> <code>OriginatingRequestId</code> – The identifier of the first request in a session.</p> </li> <li> <p> <code>UtteranceState</code> – The state of the utterance.</p> </li> <li> <p> <code>UtteranceText</code> – The text in the utterance.</p> </li> </ul>"
              }
            ]
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsFilterOperator"
              },
              {
                "description": "<p>The operation by which to filter the category. The following operations are possible:</p> <ul> <li> <p> <code>CO</code> – Contains</p> </li> <li> <p> <code>EQ</code> – Equals</p> </li> <li> <p> <code>GT</code> – Greater than</p> </li> <li> <p> <code>LT</code> – Less than</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceState</code> – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceText</code> – <code>EQ</code>, <code>CO</code>.</p> </li> </ul>"
              }
            ]
          },
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/AnalyticsFilterValues"
              },
              {
                "description": "An array containing the values of the category by which to apply the operator to filter the results. You can provide multiple values if the operator is <code>EQ</code> or <code>CO</code>. If you provide multiple values, you filter for results that equal/contain any of the values. For example, if the <code>name</code>, <code>operator</code>, and <code>values</code> fields are <code>Modality</code>, <code>EQ</code>, and <code>[Speech, Text]</code>, the operation filters for results where the modality was either <code>Speech</code> or <code>Text</code>."
              }
            ]
          }
        },
        "description": "<p>Contains fields describing a condition by which to filter the utterances. The expression may be understood as <code>name</code> <code>operator</code> <code>values</code>. For example:</p> <ul> <li> <p> <code>LocaleId EQ Book</code> – The locale is the string \"en\".</p> </li> <li> <p> <code>UtteranceText CO help</code> – The text of the utterance contains the string \"help\".</p> </li> </ul> <p>The operators that each filter supports are listed below:</p> <ul> <li> <p> <code>BotAlias</code> – <code>EQ</code>.</p> </li> <li> <p> <code>BotVersion</code> – <code>EQ</code>.</p> </li> <li> <p> <code>LocaleId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Modality</code> – <code>EQ</code>.</p> </li> <li> <p> <code>Channel</code> – <code>EQ</code>.</p> </li> <li> <p> <code>SessionId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>OriginatingRequestId</code> – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceState</code> – <code>EQ</code>.</p> </li> <li> <p> <code>UtteranceText</code> – <code>EQ</code>, <code>CO</code>.</p> </li> </ul>"
      },
      "AnalyticsUtteranceFilterName": {
        "type": "string",
        "enum": [
          "BotAliasId",
          "BotVersion",
          "LocaleId",
          "Modality",
          "Channel",
          "SessionId",
          "OriginatingRequestId",
          "UtteranceState",
          "UtteranceText"
        ]
      },
      "AnalyticsFilterOperator": {
        "type": "string",
        "enum": [
          "EQ",
          "GT",
          "LT"
        ]
      },
      "AnalyticsFilterValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AnalyticsFilterValue"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "AnalyticsFilterValue": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://models-v2-lex.us-east-1.amazonaws.com/bots/{botId}/analytics/utterancemetrics{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**botId**",
            "**results**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
