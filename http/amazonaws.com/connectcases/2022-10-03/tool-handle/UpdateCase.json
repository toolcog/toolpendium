{
  "name": "UpdateCase",
  "description": "<p>Updates the values of fields on a case. Fields to be updated are received as an array of id/value pairs identical to the <code>CreateCase</code> input .</p> <p>If the action is successful, the service sends back an HTTP 200 response with an empty HTTP body.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "caseId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 500,
        "description": "A unique identifier of the case."
      },
      "domainId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 500,
        "description": "The unique identifier of the Cases domain. "
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "description": "An array of objects with <code>fieldId</code> (matching ListFields/DescribeField) and value union data, structured identical to <code>CreateCase</code>.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/FieldValue"
            },
            "minItems": 0,
            "maxItems": 100
          }
        }
      }
    },
    "required": [
      "caseId",
      "domainId",
      "body"
    ],
    "$defs": {
      "FieldValue": {
        "type": "object",
        "required": [
          "id",
          "value"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldId"
              },
              {
                "description": "Unique identifier of a field."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValueUnion"
              },
              {
                "description": "Union of potential field value types."
              }
            ]
          }
        },
        "description": "Object for case field values."
      },
      "FieldId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 500
      },
      "FieldValueUnion": {
        "type": "object",
        "properties": {
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Can be either null, or have a Boolean value type. Only one value can be provided."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "Can be either null, or have a Double number value type. Only one value can be provided."
              }
            ]
          },
          "emptyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/EmptyFieldValue"
              },
              {
                "description": "An empty value."
              }
            ]
          },
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValueUnionStringValueString"
              },
              {
                "description": "String value type."
              }
            ]
          }
        },
        "description": "Object to store union of Field values."
      },
      "Boolean": {
        "type": "boolean"
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "EmptyFieldValue": {
        "type": "object",
        "properties": {},
        "description": "<p>An empty value. You cannot set <code>EmptyFieldValue</code> on a field that is required on a case template.</p> <p>This structure will never have any data members. It signifies an empty value on a case field.</p>"
      },
      "FieldValueUnionStringValueString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 500
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://cases.us-east-1.amazonaws.com/domains/{domainId}/cases/{caseId}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
