{
  "name": "SearchCases",
  "description": "<p>Searches for cases within their associated Cases domain. Search results are returned as a paginated list of abridged case documents.</p> <note> <p>For <code>customer_id</code> you must provide the full customer profile ARN in this format: <code> arn:aws:profile:your AWS Region:your AWS account ID:domains/profiles domain name/profiles/profile ID</code>. </p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "domainId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 500,
        "description": "The unique identifier of the Cases domain. "
      },
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "fields": {
            "description": "The list of field identifiers to be returned as part of the response.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/FieldIdentifier"
            },
            "minItems": 0,
            "maxItems": 10
          },
          "filter": {
            "description": "A filter for cases. Only one value can be provided.",
            "type": "object",
            "properties": {
              "andAll": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CaseFilterAndAllList"
                  },
                  {
                    "description": "Provides \"and all\" filtering."
                  }
                ]
              },
              "field": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FieldFilter"
                  },
                  {
                    "description": "A list of fields to filter on."
                  }
                ]
              },
              "not": {
                "$ref": "#/$defs/CaseFilter"
              },
              "orAll": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CaseFilterOrAllList"
                  },
                  {
                    "description": "Provides \"or all\" filtering."
                  }
                ]
              }
            }
          },
          "maxResults": {
            "description": "The maximum number of cases to return. The current maximum supported value is 25. This is also the default value when no other value is provided.",
            "type": "integer",
            "minimum": 1,
            "maximum": 25
          },
          "nextToken": {
            "description": "The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.",
            "type": "string",
            "minLength": 0,
            "maxLength": 9000
          },
          "searchTerm": {
            "description": "A word or phrase used to perform a quick search.",
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "sorts": {
            "description": "A list of sorts where each sort specifies a field and their sort order to be applied to the results. ",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Sort"
            },
            "minItems": 0,
            "maxItems": 2
          }
        }
      }
    },
    "required": [
      "domainId",
      "body"
    ],
    "$defs": {
      "FieldIdentifier": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldId"
              },
              {
                "description": "Unique identifier of a field."
              }
            ]
          }
        },
        "description": "Object for unique identifier of a field."
      },
      "FieldId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 500
      },
      "CaseFilterAndAllList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CaseFilter"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "CaseFilter": {
        "type": "object",
        "properties": {
          "andAll": {
            "allOf": [
              {
                "$ref": "#/$defs/CaseFilterAndAllList"
              },
              {
                "description": "Provides \"and all\" filtering."
              }
            ]
          },
          "field": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldFilter"
              },
              {
                "description": "A list of fields to filter on."
              }
            ]
          },
          "not": {
            "$ref": "#/$defs/CaseFilter"
          },
          "orAll": {
            "allOf": [
              {
                "$ref": "#/$defs/CaseFilterOrAllList"
              },
              {
                "description": "Provides \"or all\" filtering."
              }
            ]
          }
        },
        "description": "A filter for cases. Only one value can be provided."
      },
      "FieldFilter": {
        "type": "object",
        "properties": {
          "contains": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValue"
              },
              {
                "description": "Object containing field identifier and value information."
              }
            ]
          },
          "equalTo": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValue"
              },
              {
                "description": "Object containing field identifier and value information."
              }
            ]
          },
          "greaterThan": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValue"
              },
              {
                "description": "Object containing field identifier and value information."
              }
            ]
          },
          "greaterThanOrEqualTo": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValue"
              },
              {
                "description": "Object containing field identifier and value information."
              }
            ]
          },
          "lessThan": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValue"
              },
              {
                "description": "Object containing field identifier and value information."
              }
            ]
          },
          "lessThanOrEqualTo": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValue"
              },
              {
                "description": "Object containing field identifier and value information. "
              }
            ]
          }
        },
        "description": "A filter for fields. Only one value can be provided."
      },
      "FieldValue": {
        "type": "object",
        "required": [
          "id",
          "value"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldId"
              },
              {
                "description": "Unique identifier of a field."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValueUnion"
              },
              {
                "description": "Union of potential field value types."
              }
            ]
          }
        },
        "description": "Object for case field values."
      },
      "FieldValueUnion": {
        "type": "object",
        "properties": {
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Can be either null, or have a Boolean value type. Only one value can be provided."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "Can be either null, or have a Double number value type. Only one value can be provided."
              }
            ]
          },
          "emptyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/EmptyFieldValue"
              },
              {
                "description": "An empty value."
              }
            ]
          },
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldValueUnionStringValueString"
              },
              {
                "description": "String value type."
              }
            ]
          }
        },
        "description": "Object to store union of Field values."
      },
      "Boolean": {
        "type": "boolean"
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "EmptyFieldValue": {
        "type": "object",
        "properties": {},
        "description": "<p>An empty value. You cannot set <code>EmptyFieldValue</code> on a field that is required on a case template.</p> <p>This structure will never have any data members. It signifies an empty value on a case field.</p>"
      },
      "FieldValueUnionStringValueString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 500
      },
      "CaseFilterOrAllList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CaseFilter"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "Sort": {
        "type": "object",
        "required": [
          "fieldId",
          "sortOrder"
        ],
        "properties": {
          "fieldId": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldId"
              },
              {
                "description": "Unique identifier of a field."
              }
            ]
          },
          "sortOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/Order"
              },
              {
                "description": "A structured set of sort terms"
              }
            ]
          }
        },
        "description": "A structured set of sort terms."
      },
      "Order": {
        "type": "string",
        "enum": [
          "Asc",
          "Desc"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://cases.us-east-1.amazonaws.com/domains/{domainId}/cases-search{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**cases**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
