{
  "name": "GET_ConfigureHealthCheck",
  "description": "<p>Specifies the health check settings to use when evaluating the health state of your EC2 instances.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-healthchecks.html\">Configure Health Checks for Your Load Balancer</a> in the <i>Classic Load Balancers Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "LoadBalancerName": {
        "type": "string",
        "description": "The name of the load balancer."
      },
      "HealthCheck": {
        "type": "object",
        "required": [
          "Target",
          "Interval",
          "Timeout",
          "UnhealthyThreshold",
          "HealthyThreshold"
        ],
        "properties": {
          "Target": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckTarget"
              },
              {
                "description": "<p>The instance being checked. The protocol is either TCP, HTTP, HTTPS, or SSL. The range of valid ports is one (1) through 65535.</p> <p>TCP is the default, specified as a TCP: port pair, for example \"TCP:5000\". In this case, a health check simply attempts to open a TCP connection to the instance on the specified port. Failure to connect within the configured timeout is considered unhealthy.</p> <p>SSL is also specified as SSL: port pair, for example, SSL:5000.</p> <p>For HTTP/HTTPS, you must include a ping path in the string. HTTP is specified as a HTTP:port;/;PathToPing; grouping, for example \"HTTP:80/weather/us/wa/seattle\". In this case, a HTTP GET request is issued to the instance on the given port and path. Any answer other than \"200 OK\" within the timeout period is considered unhealthy.</p> <p>The total length of the HTTP ping target must be 1024 16-bit Unicode characters or less.</p>"
              }
            ]
          },
          "Interval": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckInterval"
              },
              {
                "description": "The approximate interval, in seconds, between health checks of an individual instance."
              }
            ]
          },
          "Timeout": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckTimeout"
              },
              {
                "description": "<p>The amount of time, in seconds, during which no response means a failed health check.</p> <p>This value must be less than the <code>Interval</code> value.</p>"
              }
            ]
          },
          "UnhealthyThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/UnhealthyThreshold"
              },
              {
                "description": "The number of consecutive health check failures required before moving the instance to the <code>Unhealthy</code> state."
              }
            ]
          },
          "HealthyThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthyThreshold"
              },
              {
                "description": "The number of consecutive health checks successes required before moving the instance to the <code>Healthy</code> state."
              }
            ]
          }
        },
        "description": "The configuration information."
      },
      "Action": {
        "type": "string",
        "enum": [
          "ConfigureHealthCheck"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2012-06-01"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "LoadBalancerName",
      "HealthCheck",
      "Action",
      "Version"
    ],
    "$defs": {
      "HealthCheckTarget": {
        "type": "string"
      },
      "HealthCheckInterval": {
        "type": "integer",
        "minimum": 5,
        "maximum": 300
      },
      "HealthCheckTimeout": {
        "type": "integer",
        "minimum": 2,
        "maximum": 60
      },
      "UnhealthyThreshold": {
        "type": "integer",
        "minimum": 2,
        "maximum": 10
      },
      "HealthyThreshold": {
        "type": "integer",
        "minimum": 2,
        "maximum": 10
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://elasticloadbalancing.us-east-1.amazonaws.com/#Action=ConfigureHealthCheck{?LoadBalancerName,HealthCheck,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Contains the output of ConfigureHealthCheck.",
        "**Key properties:**",
        {
          "$ul": [
            "**HealthCheck**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
