{
  "name": "CreateFunctionDefinitionVersion",
  "description": "Creates a version of a Lambda function definition that has already been defined.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amzn-Client-Token": {
        "type": "string",
        "description": "A client token used to correlate requests and responses."
      },
      "FunctionDefinitionId": {
        "type": "string",
        "description": "The ID of the Lambda function definition."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "DefaultConfig": {
            "description": "The default configuration that applies to all Lambda functions in the group. Individual Lambda functions can override these settings.",
            "type": "object",
            "properties": {
              "Execution": {
                "$ref": "#/$defs/FunctionDefaultExecutionConfig"
              }
            }
          },
          "Functions": {
            "description": "A list of Lambda functions in this function definition version.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Function"
            }
          }
        }
      }
    },
    "required": [
      "FunctionDefinitionId",
      "body"
    ],
    "$defs": {
      "FunctionDefaultExecutionConfig": {
        "type": "object",
        "properties": {
          "IsolationMode": {
            "$ref": "#/$defs/FunctionIsolationMode"
          },
          "RunAs": {
            "$ref": "#/$defs/FunctionRunAsConfig"
          }
        },
        "description": "Configuration information that specifies how a Lambda function runs. "
      },
      "FunctionIsolationMode": {
        "type": "string",
        "enum": [
          "GreengrassContainer",
          "NoContainer"
        ],
        "description": "Specifies whether the Lambda function runs in a Greengrass container (default) or without containerization. Unless your scenario requires that you run without containerization, we recommend that you run in a Greengrass container. Omit this value to run the Lambda function with the default containerization for the group."
      },
      "FunctionRunAsConfig": {
        "type": "object",
        "properties": {
          "Gid": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "description": "The group ID whose permissions are used to run a Lambda function."
              }
            ]
          },
          "Uid": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "description": "The user ID whose permissions are used to run a Lambda function."
              }
            ]
          }
        },
        "description": "Specifies the user and group whose permissions are used when running the Lambda function. You can specify one or both values to override the default values. We recommend that you avoid running as root unless absolutely necessary to minimize the risk of unintended changes or malicious attacks. To run as root, you must set ''IsolationMode'' to ''NoContainer'' and update config.json in ''greengrass-root/config'' to set ''allowFunctionsToRunAsRoot'' to ''yes''."
      },
      "__integer": {
        "type": "integer"
      },
      "Function": {
        "type": "object",
        "required": [
          "Id"
        ],
        "properties": {
          "FunctionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "description": "The ARN of the Lambda function."
              }
            ]
          },
          "FunctionConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/FunctionConfiguration"
              },
              {
                "description": "The configuration of the Lambda function."
              }
            ]
          },
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "description": "A descriptive or arbitrary ID for the function. This value must be unique within the function definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''."
              }
            ]
          }
        },
        "description": "Information about a Lambda function."
      },
      "__string": {
        "type": "string"
      },
      "FunctionConfiguration": {
        "type": "object",
        "properties": {
          "EncodingType": {
            "allOf": [
              {
                "$ref": "#/$defs/EncodingType"
              },
              {
                "description": "The expected encoding type of the input payload for the function. The default is ''json''."
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/$defs/FunctionConfigurationEnvironment"
              },
              {
                "description": "The environment configuration of the function."
              }
            ]
          },
          "ExecArgs": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "description": "The execution arguments."
              }
            ]
          },
          "Executable": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "description": "The name of the function executable."
              }
            ]
          },
          "MemorySize": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "description": "The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization."
              }
            ]
          },
          "Pinned": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "description": "True if the function is pinned. Pinned means the function is long-lived and starts when the core starts."
              }
            ]
          },
          "Timeout": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "description": "The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request."
              }
            ]
          },
          "FunctionRuntimeOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "description": "The Lambda runtime supported by Greengrass which is to be used instead of the one specified in the Lambda function."
              }
            ]
          }
        },
        "description": "The configuration of the Lambda function."
      },
      "EncodingType": {
        "type": "string",
        "enum": [
          "binary",
          "json"
        ]
      },
      "FunctionConfigurationEnvironment": {
        "type": "object",
        "properties": {
          "AccessSysfs": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "description": "If true, the Lambda function is allowed to access the host's /sys folder. Use this when the Lambda function needs to read device information from /sys. This setting applies only when you run the Lambda function in a Greengrass container."
              }
            ]
          },
          "Execution": {
            "allOf": [
              {
                "$ref": "#/$defs/FunctionExecutionConfig"
              },
              {
                "description": "Configuration related to executing the Lambda function"
              }
            ]
          },
          "ResourceAccessPolicies": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOfResourceAccessPolicy"
              },
              {
                "description": "A list of the resources, with their permissions, to which the Lambda function will be granted access. A Lambda function can have at most 10 resources. ResourceAccessPolicies apply only when you run the Lambda function in a Greengrass container."
              }
            ]
          },
          "Variables": {
            "allOf": [
              {
                "$ref": "#/$defs/__mapOf__string"
              },
              {
                "description": "Environment variables for the Lambda function's configuration."
              }
            ]
          }
        },
        "description": "The environment configuration of the function."
      },
      "__boolean": {
        "type": "boolean"
      },
      "FunctionExecutionConfig": {
        "type": "object",
        "properties": {
          "IsolationMode": {
            "$ref": "#/$defs/FunctionIsolationMode"
          },
          "RunAs": {
            "$ref": "#/$defs/FunctionRunAsConfig"
          }
        },
        "description": "Configuration information that specifies how a Lambda function runs. "
      },
      "__listOfResourceAccessPolicy": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ResourceAccessPolicy"
        }
      },
      "ResourceAccessPolicy": {
        "type": "object",
        "required": [
          "ResourceId"
        ],
        "properties": {
          "Permission": {
            "allOf": [
              {
                "$ref": "#/$defs/Permission"
              },
              {
                "description": "The permissions that the Lambda function has to the resource. Can be one of ''rw'' (read/write) or ''ro'' (read-only)."
              }
            ]
          },
          "ResourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "description": "The ID of the resource. (This ID is assigned to the resource when you create the resource definiton.)"
              }
            ]
          }
        },
        "description": "A policy used by the function to access a resource."
      },
      "Permission": {
        "type": "string",
        "enum": [
          "ro",
          "rw"
        ],
        "description": "The type of permission a function has to access a resource."
      },
      "__mapOf__string": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/__string"
        }
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://greengrass.us-east-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions"
    },
    "headers": {
      "X-Amzn-Client-Token": {
        "$": "X-Amzn-Client-Token"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**CreationTimestamp**",
            "**Id**",
            "**Version**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
