{
  "name": "UpdateFlowMediaStream",
  "description": "Updates an existing media stream.",
  "parameters": {
    "type": "object",
    "properties": {
      "flowArn": {
        "type": "string",
        "description": "The Amazon Resource Name (ARN) of the flow."
      },
      "mediaStreamName": {
        "type": "string",
        "description": "The name of the media stream that you want to update."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes that are related to the media stream.",
            "type": "object",
            "properties": {
              "Fmtp": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FmtpRequest"
                  },
                  {
                    "xml": {
                      "name": "fmtp"
                    },
                    "description": "The settings that you want to use to define the media stream."
                  }
                ]
              },
              "Lang": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "lang"
                    },
                    "description": "The audio language, in a format that is recognized by the receiver."
                  }
                ]
              }
            }
          },
          "clockRate": {
            "description": "The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.",
            "type": "integer"
          },
          "description": {
            "description": "Description",
            "type": "string"
          },
          "mediaStreamType": {
            "description": "The type of media stream.",
            "type": "string",
            "enum": [
              "video",
              "audio",
              "ancillary-data"
            ]
          },
          "videoFormat": {
            "description": "The resolution of the video.",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "flowArn",
      "mediaStreamName",
      "body"
    ],
    "$defs": {
      "FmtpRequest": {
        "type": "object",
        "properties": {
          "ChannelOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "channelOrder"
                },
                "description": "The format of the audio channel."
              }
            ]
          },
          "Colorimetry": {
            "allOf": [
              {
                "$ref": "#/$defs/Colorimetry"
              },
              {
                "xml": {
                  "name": "colorimetry"
                },
                "description": "The format that is used for the representation of color."
              }
            ]
          },
          "ExactFramerate": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "exactFramerate"
                },
                "description": "The frame rate for the video stream, in frames/second. For example: 60000/1001. If you specify a whole number, MediaConnect uses a ratio of N/1. For example, if you specify 60, MediaConnect uses 60/1 as the exactFramerate."
              }
            ]
          },
          "Par": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "par"
                },
                "description": "The pixel aspect ratio (PAR) of the video."
              }
            ]
          },
          "Range": {
            "allOf": [
              {
                "$ref": "#/$defs/Range"
              },
              {
                "xml": {
                  "name": "range"
                },
                "description": "The encoding range of the video."
              }
            ]
          },
          "ScanMode": {
            "allOf": [
              {
                "$ref": "#/$defs/ScanMode"
              },
              {
                "xml": {
                  "name": "scanMode"
                },
                "description": "The type of compression that was used to smooth the videoâ€™s appearance."
              }
            ]
          },
          "Tcs": {
            "allOf": [
              {
                "$ref": "#/$defs/Tcs"
              },
              {
                "xml": {
                  "name": "tcs"
                },
                "description": "The transfer characteristic system (TCS) that is used in the video."
              }
            ]
          }
        },
        "description": "The settings that you want to use to define the media stream."
      },
      "__string": {
        "type": "string"
      },
      "Colorimetry": {
        "type": "string",
        "enum": [
          "BT601",
          "BT709",
          "BT2020",
          "BT2100",
          "ST2065-1",
          "ST2065-3",
          "XYZ"
        ]
      },
      "Range": {
        "type": "string",
        "enum": [
          "NARROW",
          "FULL",
          "FULLPROTECT"
        ]
      },
      "ScanMode": {
        "type": "string",
        "enum": [
          "progressive",
          "interlace",
          "progressive-segmented-frame"
        ]
      },
      "Tcs": {
        "type": "string",
        "enum": [
          "SDR",
          "PQ",
          "HLG",
          "LINEAR",
          "BT2100LINPQ",
          "BT2100LINHLG",
          "ST2065-1",
          "ST428-1",
          "DENSITY"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://mediaconnect.us-east-1.amazonaws.com/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FlowArn**",
            "**MediaStream**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
