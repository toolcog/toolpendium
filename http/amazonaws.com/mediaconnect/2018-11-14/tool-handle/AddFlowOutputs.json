{
  "name": "AddFlowOutputs",
  "description": "Adds outputs to an existing flow. You can create up to 50 outputs per flow.",
  "parameters": {
    "type": "object",
    "properties": {
      "flowArn": {
        "type": "string",
        "description": "The flow that you want to add outputs to."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "outputs"
        ],
        "properties": {
          "outputs": {
            "description": "A list of outputs that you want to add.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AddOutputRequest"
            }
          }
        }
      }
    },
    "required": [
      "flowArn",
      "body"
    ],
    "$defs": {
      "AddOutputRequest": {
        "type": "object",
        "required": [
          "Protocol"
        ],
        "properties": {
          "CidrAllowList": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOf__string"
              },
              {
                "xml": {
                  "name": "cidrAllowList"
                },
                "description": "The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "description"
                },
                "description": "A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user."
              }
            ]
          },
          "Destination": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "destination"
                },
                "description": "The IP address from which video will be sent to output destinations."
              }
            ]
          },
          "Encryption": {
            "allOf": [
              {
                "$ref": "#/$defs/Encryption"
              },
              {
                "xml": {
                  "name": "encryption"
                },
                "description": "The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key). Allowable encryption types: static-key."
              }
            ]
          },
          "MaxLatency": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "maxLatency"
                },
                "description": "The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams."
              }
            ]
          },
          "MediaStreamOutputConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOfMediaStreamOutputConfigurationRequest"
              },
              {
                "xml": {
                  "name": "mediaStreamOutputConfigurations"
                },
                "description": "The media streams that are associated with the output, and the parameters for those associations."
              }
            ]
          },
          "MinLatency": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "minLatency"
                },
                "description": "The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "name"
                },
                "description": "The name of the output. This value must be unique within the current flow."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "port"
                },
                "description": "The port to use when content is distributed to this output."
              }
            ]
          },
          "Protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/Protocol"
              },
              {
                "xml": {
                  "name": "protocol"
                },
                "description": "The protocol to use for the output."
              }
            ]
          },
          "RemoteId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "remoteId"
                },
                "description": "The remote ID for the Zixi-pull output stream."
              }
            ]
          },
          "SenderControlPort": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "senderControlPort"
                },
                "description": "The port that the flow uses to send outbound requests to initiate connection with the sender."
              }
            ]
          },
          "SmoothingLatency": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "smoothingLatency"
                },
                "description": "The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams."
              }
            ]
          },
          "StreamId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "streamId"
                },
                "description": "The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams."
              }
            ]
          },
          "VpcInterfaceAttachment": {
            "allOf": [
              {
                "$ref": "#/$defs/VpcInterfaceAttachment"
              },
              {
                "xml": {
                  "name": "vpcInterfaceAttachment"
                },
                "description": "The name of the VPC interface attachment to use for this output."
              }
            ]
          }
        },
        "description": "The output that you want to add to this flow."
      },
      "__listOf__string": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__string"
        }
      },
      "__string": {
        "type": "string"
      },
      "Encryption": {
        "type": "object",
        "required": [
          "RoleArn"
        ],
        "properties": {
          "Algorithm": {
            "allOf": [
              {
                "$ref": "#/$defs/Algorithm"
              },
              {
                "xml": {
                  "name": "algorithm"
                },
                "description": "The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256)."
              }
            ]
          },
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "constantInitializationVector"
                },
                "description": "A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption."
              }
            ]
          },
          "DeviceId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "deviceId"
                },
                "description": "The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          },
          "KeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyType"
              },
              {
                "xml": {
                  "name": "keyType"
                },
                "description": "The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key)."
              }
            ]
          },
          "Region": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "region"
                },
                "description": "The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          },
          "ResourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "resourceId"
                },
                "description": "An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "roleArn"
                },
                "description": "The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity)."
              }
            ]
          },
          "SecretArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "secretArn"
                },
                "description": "The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption."
              }
            ]
          },
          "Url": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "url"
                },
                "description": "The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          }
        },
        "description": "Information about the encryption of the flow."
      },
      "Algorithm": {
        "type": "string",
        "enum": [
          "aes128",
          "aes192",
          "aes256"
        ]
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "speke",
          "static-key",
          "srt-password"
        ]
      },
      "__integer": {
        "type": "integer"
      },
      "__listOfMediaStreamOutputConfigurationRequest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MediaStreamOutputConfigurationRequest"
        }
      },
      "MediaStreamOutputConfigurationRequest": {
        "type": "object",
        "required": [
          "MediaStreamName",
          "EncodingName"
        ],
        "properties": {
          "DestinationConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOfDestinationConfigurationRequest"
              },
              {
                "xml": {
                  "name": "destinationConfigurations"
                },
                "description": "The transport parameters that you want to associate with the media stream."
              }
            ]
          },
          "EncodingName": {
            "allOf": [
              {
                "$ref": "#/$defs/EncodingName"
              },
              {
                "xml": {
                  "name": "encodingName"
                },
                "description": "The format that will be used to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv."
              }
            ]
          },
          "EncodingParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/EncodingParametersRequest"
              },
              {
                "xml": {
                  "name": "encodingParameters"
                },
                "description": "A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source."
              }
            ]
          },
          "MediaStreamName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "mediaStreamName"
                },
                "description": "The name of the media stream that is associated with the output."
              }
            ]
          }
        },
        "description": "The media stream that you want to associate with the output, and the parameters for that association."
      },
      "__listOfDestinationConfigurationRequest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DestinationConfigurationRequest"
        }
      },
      "DestinationConfigurationRequest": {
        "type": "object",
        "required": [
          "DestinationIp",
          "DestinationPort",
          "Interface"
        ],
        "properties": {
          "DestinationIp": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "destinationIp"
                },
                "description": "The IP address where you want MediaConnect to send contents of the media stream."
              }
            ]
          },
          "DestinationPort": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "destinationPort"
                },
                "description": "The port that you want MediaConnect to use when it distributes the media stream to the output."
              }
            ]
          },
          "Interface": {
            "allOf": [
              {
                "$ref": "#/$defs/InterfaceRequest"
              },
              {
                "xml": {
                  "name": "interface"
                },
                "description": "The VPC interface that you want to use for the media stream associated with the output."
              }
            ]
          }
        },
        "description": "The transport parameters that you want to associate with an outbound media stream."
      },
      "InterfaceRequest": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "name"
                },
                "description": "The name of the VPC interface."
              }
            ]
          }
        },
        "description": "The VPC interface that you want to designate where the media stream is coming from or going to."
      },
      "EncodingName": {
        "type": "string",
        "enum": [
          "jxsv",
          "raw",
          "smpte291",
          "pcm"
        ]
      },
      "EncodingParametersRequest": {
        "type": "object",
        "required": [
          "EncoderProfile",
          "CompressionFactor"
        ],
        "properties": {
          "CompressionFactor": {
            "allOf": [
              {
                "$ref": "#/$defs/__double"
              },
              {
                "xml": {
                  "name": "compressionFactor"
                },
                "description": "A value that is used to calculate compression for an output. The bitrate of the output is calculated as follows: Output bitrate = (1 / compressionFactor) * (source bitrate) This property only applies to outputs that use the ST 2110 JPEG XS protocol, with a flow source that uses the CDI protocol. Valid values are floating point numbers in the range of 3.0 to 10.0, inclusive."
              }
            ]
          },
          "EncoderProfile": {
            "allOf": [
              {
                "$ref": "#/$defs/EncoderProfile"
              },
              {
                "xml": {
                  "name": "encoderProfile"
                },
                "description": "A setting on the encoder that drives compression settings. This property only applies to video media streams associated with outputs that use the ST 2110 JPEG XS protocol, if at least one source on the flow uses the CDI protocol."
              }
            ]
          }
        },
        "description": "A collection of parameters that determine how MediaConnect will convert the content. These fields only apply to outputs on flows that have a CDI source."
      },
      "__double": {
        "type": "number",
        "format": "double"
      },
      "EncoderProfile": {
        "type": "string",
        "enum": [
          "main",
          "high"
        ]
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "zixi-push",
          "rtp-fec",
          "rtp",
          "zixi-pull",
          "rist",
          "st2110-jpegxs",
          "cdi",
          "srt-listener",
          "srt-caller",
          "fujitsu-qos",
          "udp"
        ]
      },
      "VpcInterfaceAttachment": {
        "type": "object",
        "properties": {
          "VpcInterfaceName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "vpcInterfaceName"
                },
                "description": "The name of the VPC interface to use for this resource."
              }
            ]
          }
        },
        "description": "The settings for attaching a VPC interface to an resource."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mediaconnect.us-east-1.amazonaws.com/v1/flows/{flowArn}/outputs"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FlowArn**",
            "**Outputs**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
