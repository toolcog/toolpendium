{
  "name": "AddFlowSources",
  "description": "Adds Sources to flow",
  "parameters": {
    "type": "object",
    "properties": {
      "flowArn": {
        "type": "string",
        "description": "The flow that you want to mutate."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "sources"
        ],
        "properties": {
          "sources": {
            "description": "A list of sources that you want to add.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SetSourceRequest"
            }
          }
        }
      }
    },
    "required": [
      "flowArn",
      "body"
    ],
    "$defs": {
      "SetSourceRequest": {
        "type": "object",
        "properties": {
          "Decryption": {
            "allOf": [
              {
                "$ref": "#/$defs/Encryption"
              },
              {
                "xml": {
                  "name": "decryption"
                },
                "description": "The type of encryption that is used on the content ingested from this source. Allowable encryption types: static-key."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "description"
                },
                "description": "A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account."
              }
            ]
          },
          "EntitlementArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "pattern": "^arn:.+:mediaconnect.+:entitlement:.+$",
                "xml": {
                  "name": "entitlementArn"
                },
                "description": "The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow."
              }
            ]
          },
          "IngestPort": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "ingestPort"
                },
                "description": "The port that the flow will be listening on for incoming content."
              }
            ]
          },
          "MaxBitrate": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "maxBitrate"
                },
                "description": "The smoothing max bitrate (in bps) for RIST, RTP, and RTP-FEC streams."
              }
            ]
          },
          "MaxLatency": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "maxLatency"
                },
                "description": "The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams."
              }
            ]
          },
          "MaxSyncBuffer": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "maxSyncBuffer"
                },
                "description": "The size of the buffer (in milliseconds) to use to sync incoming source data."
              }
            ]
          },
          "MediaStreamSourceConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOfMediaStreamSourceConfigurationRequest"
              },
              {
                "xml": {
                  "name": "mediaStreamSourceConfigurations"
                },
                "description": "The media streams that are associated with the source, and the parameters for those associations."
              }
            ]
          },
          "MinLatency": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "minLatency"
                },
                "description": "The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "name"
                },
                "description": "The name of the source."
              }
            ]
          },
          "Protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/Protocol"
              },
              {
                "xml": {
                  "name": "protocol"
                },
                "description": "The protocol that is used by the source."
              }
            ]
          },
          "SenderControlPort": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "senderControlPort"
                },
                "description": "The port that the flow uses to send outbound requests to initiate connection with the sender."
              }
            ]
          },
          "SenderIpAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "senderIpAddress"
                },
                "description": "The IP address that the flow communicates with to initiate connection with the sender."
              }
            ]
          },
          "SourceListenerAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "sourceListenerAddress"
                },
                "description": "Source IP or domain name for SRT-caller protocol."
              }
            ]
          },
          "SourceListenerPort": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "sourceListenerPort"
                },
                "description": "Source port for SRT-caller protocol."
              }
            ]
          },
          "StreamId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "streamId"
                },
                "description": "The stream ID that you want to use for this transport. This parameter applies only to Zixi and SRT caller-based streams."
              }
            ]
          },
          "VpcInterfaceName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "vpcInterfaceName"
                },
                "description": "The name of the VPC interface to use for this source."
              }
            ]
          },
          "WhitelistCidr": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "whitelistCidr"
                },
                "description": "The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16."
              }
            ]
          },
          "GatewayBridgeSource": {
            "allOf": [
              {
                "$ref": "#/$defs/SetGatewayBridgeSourceRequest"
              },
              {
                "xml": {
                  "name": "gatewayBridgeSource"
                },
                "description": "The source configuration for cloud flows receiving a stream from a bridge."
              }
            ]
          }
        },
        "description": "The settings for the source of the flow."
      },
      "Encryption": {
        "type": "object",
        "required": [
          "RoleArn"
        ],
        "properties": {
          "Algorithm": {
            "allOf": [
              {
                "$ref": "#/$defs/Algorithm"
              },
              {
                "xml": {
                  "name": "algorithm"
                },
                "description": "The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256)."
              }
            ]
          },
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "constantInitializationVector"
                },
                "description": "A 128-bit, 16-byte hex value represented by a 32-character string, to be used with the key for encrypting content. This parameter is not valid for static key encryption."
              }
            ]
          },
          "DeviceId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "deviceId"
                },
                "description": "The value of one of the devices that you configured with your digital rights management (DRM) platform key provider. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          },
          "KeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyType"
              },
              {
                "xml": {
                  "name": "keyType"
                },
                "description": "The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key)."
              }
            ]
          },
          "Region": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "region"
                },
                "description": "The AWS Region that the API Gateway proxy endpoint was created in. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          },
          "ResourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "resourceId"
                },
                "description": "An identifier for the content. The service sends this value to the key server to identify the current endpoint. The resource ID is also known as the content ID. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "roleArn"
                },
                "description": "The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity)."
              }
            ]
          },
          "SecretArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "secretArn"
                },
                "description": "The ARN of the secret that you created in AWS Secrets Manager to store the encryption key. This parameter is required for static key encryption and is not valid for SPEKE encryption."
              }
            ]
          },
          "Url": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "url"
                },
                "description": "The URL from the API Gateway proxy that you set up to talk to your key server. This parameter is required for SPEKE encryption and is not valid for static key encryption."
              }
            ]
          }
        },
        "description": "Information about the encryption of the flow."
      },
      "Algorithm": {
        "type": "string",
        "enum": [
          "aes128",
          "aes192",
          "aes256"
        ]
      },
      "__string": {
        "type": "string"
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "speke",
          "static-key",
          "srt-password"
        ]
      },
      "__integer": {
        "type": "integer"
      },
      "__listOfMediaStreamSourceConfigurationRequest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MediaStreamSourceConfigurationRequest"
        }
      },
      "MediaStreamSourceConfigurationRequest": {
        "type": "object",
        "required": [
          "MediaStreamName",
          "EncodingName"
        ],
        "properties": {
          "EncodingName": {
            "allOf": [
              {
                "$ref": "#/$defs/EncodingName"
              },
              {
                "xml": {
                  "name": "encodingName"
                },
                "description": "The format you want to use to encode the data. For ancillary data streams, set the encoding name to smpte291. For audio streams, set the encoding name to pcm. For video, 2110 streams, set the encoding name to raw. For video, JPEG XS streams, set the encoding name to jxsv."
              }
            ]
          },
          "InputConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOfInputConfigurationRequest"
              },
              {
                "xml": {
                  "name": "inputConfigurations"
                },
                "description": "The transport parameters that you want to associate with the media stream."
              }
            ]
          },
          "MediaStreamName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "mediaStreamName"
                },
                "description": "The name of the media stream."
              }
            ]
          }
        },
        "description": "The definition of a media stream that you want to associate with the source."
      },
      "EncodingName": {
        "type": "string",
        "enum": [
          "jxsv",
          "raw",
          "smpte291",
          "pcm"
        ]
      },
      "__listOfInputConfigurationRequest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InputConfigurationRequest"
        }
      },
      "InputConfigurationRequest": {
        "type": "object",
        "required": [
          "InputPort",
          "Interface"
        ],
        "properties": {
          "InputPort": {
            "allOf": [
              {
                "$ref": "#/$defs/__integer"
              },
              {
                "xml": {
                  "name": "inputPort"
                },
                "description": "The port that you want the flow to listen on for an incoming media stream."
              }
            ]
          },
          "Interface": {
            "allOf": [
              {
                "$ref": "#/$defs/InterfaceRequest"
              },
              {
                "xml": {
                  "name": "interface"
                },
                "description": "The VPC interface that you want to use for the incoming media stream."
              }
            ]
          }
        },
        "description": "The transport parameters that you want to associate with an incoming media stream."
      },
      "InterfaceRequest": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "name"
                },
                "description": "The name of the VPC interface."
              }
            ]
          }
        },
        "description": "The VPC interface that you want to designate where the media stream is coming from or going to."
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "zixi-push",
          "rtp-fec",
          "rtp",
          "zixi-pull",
          "rist",
          "st2110-jpegxs",
          "cdi",
          "srt-listener",
          "srt-caller",
          "fujitsu-qos",
          "udp"
        ]
      },
      "SetGatewayBridgeSourceRequest": {
        "type": "object",
        "required": [
          "BridgeArn"
        ],
        "properties": {
          "BridgeArn": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "pattern": "^arn:.+:mediaconnect.+:bridge:.+$",
                "xml": {
                  "name": "bridgeArn"
                },
                "description": "The ARN of the bridge feeding this flow."
              }
            ]
          },
          "VpcInterfaceAttachment": {
            "allOf": [
              {
                "$ref": "#/$defs/VpcInterfaceAttachment"
              },
              {
                "xml": {
                  "name": "vpcInterfaceAttachment"
                },
                "description": "The name of the VPC interface attachment to use for this bridge source."
              }
            ]
          }
        },
        "description": "The source configuration for cloud flows receiving a stream from a bridge."
      },
      "VpcInterfaceAttachment": {
        "type": "object",
        "properties": {
          "VpcInterfaceName": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "vpcInterfaceName"
                },
                "description": "The name of the VPC interface to use for this resource."
              }
            ]
          }
        },
        "description": "The settings for attaching a VPC interface to an resource."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mediaconnect.us-east-1.amazonaws.com/v1/flows/{flowArn}/source"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FlowArn**",
            "**Sources**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
