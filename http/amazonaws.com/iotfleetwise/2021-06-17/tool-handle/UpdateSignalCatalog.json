{
  "name": "UpdateSignalCatalog",
  "description": " Updates a signal catalog. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "IoTAutobahnControlPlane.UpdateSignalCatalog"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateSignalCatalogRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateSignalCatalogRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "title": "UpdateSignalCatalogRequest",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/resourceName"
              },
              {
                "description": " The name of the signal catalog to update. "
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": " A brief description of the signal catalog to update."
              }
            ]
          },
          "nodesToAdd": {
            "allOf": [
              {
                "$ref": "#/$defs/Nodes"
              },
              {
                "description": " A list of information about nodes to add to the signal catalog. "
              }
            ]
          },
          "nodesToUpdate": {
            "allOf": [
              {
                "$ref": "#/$defs/Nodes"
              },
              {
                "description": " A list of information about nodes to update in the signal catalog. "
              }
            ]
          },
          "nodesToRemove": {
            "allOf": [
              {
                "$ref": "#/$defs/NodePaths"
              },
              {
                "description": " A list of <code>fullyQualifiedName</code> of nodes to remove from the signal catalog. "
              }
            ]
          }
        }
      },
      "resourceName": {
        "type": "string",
        "pattern": "[a-zA-Z\\d\\-_:]+",
        "minLength": 1,
        "maxLength": 100
      },
      "description": {
        "type": "string",
        "pattern": "[^\\u0000-\\u001F\\u007F]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "Nodes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Node"
        },
        "minItems": 0,
        "maxItems": 500
      },
      "Node": {
        "type": "object",
        "properties": {
          "branch": {
            "allOf": [
              {
                "$ref": "#/$defs/Branch"
              },
              {
                "description": "<p>Information about a node specified as a branch.</p> <note> <p>A group of signals that are defined in a hierarchical structure.</p> </note>"
              }
            ]
          },
          "sensor": {
            "$ref": "#/$defs/Sensor"
          },
          "actuator": {
            "allOf": [
              {
                "$ref": "#/$defs/Actuator"
              },
              {
                "description": "<p>Information about a node specified as an actuator.</p> <note> <p>An actuator is a digital representation of a vehicle device.</p> </note>"
              }
            ]
          },
          "attribute": {
            "allOf": [
              {
                "$ref": "#/$defs/Attribute"
              },
              {
                "description": "<p>Information about a node specified as an attribute.</p> <note> <p>An attribute represents static information about a vehicle.</p> </note>"
              }
            ]
          }
        },
        "description": "A general abstraction of a signal. A node can be specified as an actuator, attribute, branch, or sensor."
      },
      "Branch": {
        "type": "object",
        "required": [
          "fullyQualifiedName"
        ],
        "properties": {
          "fullyQualifiedName": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>."
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": "A brief description of the branch."
              }
            ]
          },
          "deprecationMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "The deprecation message for the node or the branch that was moved or deleted."
              }
            ]
          },
          "comment": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "A comment in addition to the description."
              }
            ]
          }
        },
        "description": "A group of signals that are defined in a hierarchical structure."
      },
      "string": {
        "type": "string"
      },
      "message": {
        "type": "string",
        "pattern": "[^\\u0000-\\u001F\\u007F]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "Sensor": {
        "type": "object",
        "required": [
          "fullyQualifiedName",
          "dataType"
        ],
        "properties": {
          "fullyQualifiedName": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The fully qualified name of the sensor. For example, the fully qualified name of a sensor might be <code>Vehicle.Body.Engine.Battery</code>."
              }
            ]
          },
          "dataType": {
            "allOf": [
              {
                "$ref": "#/$defs/NodeDataType"
              },
              {
                "description": "The specified data type of the sensor. "
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": "A brief description of a sensor."
              }
            ]
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The scientific unit of measurement for data collected by the sensor."
              }
            ]
          },
          "allowedValues": {
            "allOf": [
              {
                "$ref": "#/$defs/listOfStrings"
              },
              {
                "description": "A list of possible values a sensor can take."
              }
            ]
          },
          "min": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The specified possible minimum value of the sensor."
              }
            ]
          },
          "max": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The specified possible maximum value of the sensor."
              }
            ]
          },
          "deprecationMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "The deprecation message for the node or the branch that was moved or deleted."
              }
            ]
          },
          "comment": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "A comment in addition to the description."
              }
            ]
          }
        },
        "description": "<p>An input component that reports the environmental condition of a vehicle.</p> <note> <p>You can collect data about fluid levels, temperatures, vibrations, or battery voltage from sensors.</p> </note>"
      },
      "NodeDataType": {
        "type": "string",
        "enum": [
          "INT8",
          "UINT8",
          "INT16",
          "UINT16",
          "INT32",
          "UINT32",
          "INT64",
          "UINT64",
          "BOOLEAN",
          "FLOAT",
          "DOUBLE",
          "STRING",
          "UNIX_TIMESTAMP",
          "INT8_ARRAY",
          "UINT8_ARRAY",
          "INT16_ARRAY",
          "UINT16_ARRAY",
          "INT32_ARRAY",
          "UINT32_ARRAY",
          "INT64_ARRAY",
          "UINT64_ARRAY",
          "BOOLEAN_ARRAY",
          "FLOAT_ARRAY",
          "DOUBLE_ARRAY",
          "STRING_ARRAY",
          "UNIX_TIMESTAMP_ARRAY",
          "UNKNOWN"
        ]
      },
      "listOfStrings": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string"
        }
      },
      "double": {
        "type": "number",
        "format": "double"
      },
      "Actuator": {
        "type": "object",
        "required": [
          "fullyQualifiedName",
          "dataType"
        ],
        "properties": {
          "fullyQualifiedName": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The fully qualified name of the actuator. For example, the fully qualified name of an actuator might be <code>Vehicle.Front.Left.Door.Lock</code>."
              }
            ]
          },
          "dataType": {
            "allOf": [
              {
                "$ref": "#/$defs/NodeDataType"
              },
              {
                "description": "The specified data type of the actuator. "
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": "A brief description of the actuator."
              }
            ]
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The scientific unit for the actuator."
              }
            ]
          },
          "allowedValues": {
            "allOf": [
              {
                "$ref": "#/$defs/listOfStrings"
              },
              {
                "description": "A list of possible values an actuator can take."
              }
            ]
          },
          "min": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The specified possible minimum value of an actuator."
              }
            ]
          },
          "max": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The specified possible maximum value of an actuator."
              }
            ]
          },
          "assignedValue": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "deprecated": true,
                "description": "A specified value for the actuator.assignedValue is no longer in use"
              }
            ]
          },
          "deprecationMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "The deprecation message for the node or the branch that was moved or deleted."
              }
            ]
          },
          "comment": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "A comment in addition to the description."
              }
            ]
          }
        },
        "description": "<p>A signal that represents a vehicle device such as the engine, heater, and door locks. Data from an actuator reports the state of a certain vehicle device.</p> <note> <p> Updating actuator data can change the state of a device. For example, you can turn on or off the heater by updating its actuator data.</p> </note>"
      },
      "Attribute": {
        "type": "object",
        "required": [
          "fullyQualifiedName",
          "dataType"
        ],
        "properties": {
          "fullyQualifiedName": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>."
              }
            ]
          },
          "dataType": {
            "allOf": [
              {
                "$ref": "#/$defs/NodeDataType"
              },
              {
                "description": "The specified data type of the attribute. "
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": "A brief description of the attribute."
              }
            ]
          },
          "unit": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The scientific unit for the attribute."
              }
            ]
          },
          "allowedValues": {
            "allOf": [
              {
                "$ref": "#/$defs/listOfStrings"
              },
              {
                "description": "A list of possible values an attribute can be assigned."
              }
            ]
          },
          "min": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The specified possible minimum value of the attribute."
              }
            ]
          },
          "max": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The specified possible maximum value of the attribute."
              }
            ]
          },
          "assignedValue": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "deprecated": true,
                "description": "A specified value for the attribute.assignedValue is no longer in use"
              }
            ]
          },
          "defaultValue": {
            "allOf": [
              {
                "$ref": "#/$defs/string"
              },
              {
                "description": "The default value of the attribute."
              }
            ]
          },
          "deprecationMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "The deprecation message for the node or the branch that was moved or deleted."
              }
            ]
          },
          "comment": {
            "allOf": [
              {
                "$ref": "#/$defs/message"
              },
              {
                "description": "A comment in addition to the description."
              }
            ]
          }
        },
        "description": "A signal that represents static information about the vehicle, such as engine type or manufacturing date."
      },
      "NodePaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NodePath"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "NodePath": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.]+",
        "minLength": 1,
        "maxLength": 150
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotfleetwise.us-east-1.amazonaws.com/#X-Amz-Target=IoTAutobahnControlPlane.UpdateSignalCatalog"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**name**",
            "**arn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
