{
  "name": "UpdateModelManifest",
  "description": " Updates a vehicle model (model manifest). If created vehicles are associated with a vehicle model, it can't be updated.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "IoTAutobahnControlPlane.UpdateModelManifest"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateModelManifestRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateModelManifestRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "title": "UpdateModelManifestRequest",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/resourceName"
              },
              {
                "description": " The name of the vehicle model to update. "
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": " A brief description of the vehicle model. "
              }
            ]
          },
          "nodesToAdd": {
            "allOf": [
              {
                "$ref": "#/$defs/NodePaths"
              },
              {
                "description": " A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to add to the vehicle model. "
              }
            ]
          },
          "nodesToRemove": {
            "allOf": [
              {
                "$ref": "#/$defs/NodePaths"
              },
              {
                "description": " A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to remove from the vehicle model. "
              }
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestStatus"
              },
              {
                "description": " The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can't be edited. If the status is <code>DRAFT</code>, you can edit the vehicle model. "
              }
            ]
          }
        }
      },
      "resourceName": {
        "type": "string",
        "pattern": "[a-zA-Z\\d\\-_:]+",
        "minLength": 1,
        "maxLength": 100
      },
      "description": {
        "type": "string",
        "pattern": "[^\\u0000-\\u001F\\u007F]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "NodePaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NodePath"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "NodePath": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.]+",
        "minLength": 1,
        "maxLength": 150
      },
      "ManifestStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "DRAFT"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotfleetwise.us-east-1.amazonaws.com/#X-Amz-Target=IoTAutobahnControlPlane.UpdateModelManifest"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**name**",
            "**arn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
