{
  "name": "UpdateDecoderManifest",
  "description": "<p> Updates a decoder manifest.</p> <p>A decoder manifest can only be updated when the status is <code>DRAFT</code>. Only <code>ACTIVE</code> decoder manifests can be associated with vehicles.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "IoTAutobahnControlPlane.UpdateDecoderManifest"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateDecoderManifestRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateDecoderManifestRequest": {
        "type": "object",
        "required": [
          "name"
        ],
        "title": "UpdateDecoderManifestRequest",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/resourceName"
              },
              {
                "description": " The name of the decoder manifest to update."
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": " A brief description of the decoder manifest to update. "
              }
            ]
          },
          "signalDecodersToAdd": {
            "allOf": [
              {
                "$ref": "#/$defs/SignalDecoders"
              },
              {
                "description": " A list of information about decoding additional signals to add to the decoder manifest. "
              }
            ]
          },
          "signalDecodersToUpdate": {
            "allOf": [
              {
                "$ref": "#/$defs/SignalDecoders"
              },
              {
                "description": " A list of updated information about decoding signals to update in the decoder manifest. "
              }
            ]
          },
          "signalDecodersToRemove": {
            "allOf": [
              {
                "$ref": "#/$defs/Fqns"
              },
              {
                "description": " A list of signal decoders to remove from the decoder manifest. "
              }
            ]
          },
          "networkInterfacesToAdd": {
            "allOf": [
              {
                "$ref": "#/$defs/NetworkInterfaces"
              },
              {
                "description": " A list of information about the network interfaces to add to the decoder manifest. "
              }
            ]
          },
          "networkInterfacesToUpdate": {
            "allOf": [
              {
                "$ref": "#/$defs/NetworkInterfaces"
              },
              {
                "description": " A list of information about the network interfaces to update in the decoder manifest. "
              }
            ]
          },
          "networkInterfacesToRemove": {
            "allOf": [
              {
                "$ref": "#/$defs/InterfaceIds"
              },
              {
                "description": " A list of network interfaces to remove from the decoder manifest."
              }
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestStatus"
              },
              {
                "description": " The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can't be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. "
              }
            ]
          }
        }
      },
      "resourceName": {
        "type": "string",
        "pattern": "[a-zA-Z\\d\\-_:]+",
        "minLength": 1,
        "maxLength": 100
      },
      "description": {
        "type": "string",
        "pattern": "[^\\u0000-\\u001F\\u007F]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "SignalDecoders": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SignalDecoder"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "SignalDecoder": {
        "type": "object",
        "required": [
          "fullyQualifiedName",
          "type",
          "interfaceId"
        ],
        "properties": {
          "fullyQualifiedName": {
            "allOf": [
              {
                "$ref": "#/$defs/FullyQualifiedName"
              },
              {
                "description": "The fully qualified name of a signal decoder as defined in a vehicle model."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/SignalDecoderType"
              },
              {
                "description": "The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs."
              }
            ]
          },
          "interfaceId": {
            "allOf": [
              {
                "$ref": "#/$defs/InterfaceId"
              },
              {
                "description": "The ID of a network interface that specifies what network protocol a vehicle follows."
              }
            ]
          },
          "canSignal": {
            "allOf": [
              {
                "$ref": "#/$defs/CanSignal"
              },
              {
                "description": "Information about signal decoder using the Controller Area Network (CAN) protocol."
              }
            ]
          },
          "obdSignal": {
            "allOf": [
              {
                "$ref": "#/$defs/ObdSignal"
              },
              {
                "description": "Information about signal decoder using the On-board diagnostic (OBD) II protocol."
              }
            ]
          }
        },
        "description": "Information about a signal decoder."
      },
      "FullyQualifiedName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 150
      },
      "SignalDecoderType": {
        "type": "string",
        "enum": [
          "CAN_SIGNAL",
          "OBD_SIGNAL"
        ]
      },
      "InterfaceId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "CanSignal": {
        "type": "object",
        "required": [
          "messageId",
          "isBigEndian",
          "isSigned",
          "startBit",
          "offset",
          "factor",
          "length"
        ],
        "properties": {
          "messageId": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The ID of the message."
              }
            ]
          },
          "isBigEndian": {
            "allOf": [
              {
                "$ref": "#/$defs/boolean"
              },
              {
                "description": "Whether the byte ordering of a CAN message is big-endian."
              }
            ]
          },
          "isSigned": {
            "allOf": [
              {
                "$ref": "#/$defs/boolean"
              },
              {
                "description": "Whether the message data is specified as a signed value."
              }
            ]
          },
          "startBit": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "<p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p> <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>"
              }
            ]
          },
          "offset": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>."
              }
            ]
          },
          "factor": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "A multiplier used to decode the CAN message."
              }
            ]
          },
          "length": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "How many bytes of data are in the message."
              }
            ]
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/CanSignalName"
              },
              {
                "description": "The name of the signal."
              }
            ]
          }
        },
        "description": "Information about a single controller area network (CAN) signal and the messages it receives and transmits."
      },
      "nonNegativeInteger": {
        "type": "integer",
        "minimum": 0
      },
      "boolean": {
        "type": "boolean"
      },
      "double": {
        "type": "number",
        "format": "double"
      },
      "CanSignalName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "ObdSignal": {
        "type": "object",
        "required": [
          "pidResponseLength",
          "serviceMode",
          "pid",
          "scaling",
          "offset",
          "startByte",
          "byteLength"
        ],
        "properties": {
          "pidResponseLength": {
            "allOf": [
              {
                "$ref": "#/$defs/positiveInteger"
              },
              {
                "description": "The length of the requested data."
              }
            ]
          },
          "serviceMode": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The mode of operation (diagnostic service) in a message."
              }
            ]
          },
          "pid": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The diagnostic code used to request data from a vehicle for this signal."
              }
            ]
          },
          "scaling": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "A multiplier used to decode the message."
              }
            ]
          },
          "offset": {
            "allOf": [
              {
                "$ref": "#/$defs/double"
              },
              {
                "description": "The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>."
              }
            ]
          },
          "startByte": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "Indicates the beginning of the message."
              }
            ]
          },
          "byteLength": {
            "allOf": [
              {
                "$ref": "#/$defs/ObdByteLength"
              },
              {
                "description": "The length of a message."
              }
            ]
          },
          "bitRightShift": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The number of positions to shift bits in the message."
              }
            ]
          },
          "bitMaskLength": {
            "allOf": [
              {
                "$ref": "#/$defs/ObdBitmaskLength"
              },
              {
                "description": "The number of bits to mask in a message."
              }
            ]
          }
        },
        "description": "Information about signal messages using the on-board diagnostics (OBD) II protocol in a vehicle."
      },
      "positiveInteger": {
        "type": "integer",
        "minimum": 1
      },
      "ObdByteLength": {
        "type": "integer",
        "minimum": 1,
        "maximum": 8
      },
      "ObdBitmaskLength": {
        "type": "integer",
        "minimum": 1,
        "maximum": 8
      },
      "Fqns": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FullyQualifiedName"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "NetworkInterfaces": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NetworkInterface"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "NetworkInterface": {
        "type": "object",
        "required": [
          "interfaceId",
          "type"
        ],
        "properties": {
          "interfaceId": {
            "allOf": [
              {
                "$ref": "#/$defs/InterfaceId"
              },
              {
                "description": "The ID of the network interface."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/NetworkInterfaceType"
              },
              {
                "description": "The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs."
              }
            ]
          },
          "canInterface": {
            "allOf": [
              {
                "$ref": "#/$defs/CanInterface"
              },
              {
                "description": "Information about a network interface specified by the Controller Area Network (CAN) protocol."
              }
            ]
          },
          "obdInterface": {
            "allOf": [
              {
                "$ref": "#/$defs/ObdInterface"
              },
              {
                "description": "Information about a network interface specified by the On-board diagnostic (OBD) II protocol."
              }
            ]
          }
        },
        "description": "<p>Represents a node and its specifications in an in-vehicle communication network. All signal decoders must be associated with a network node. </p> <p> To return this information about all the network interfaces specified in a decoder manifest, use the API operation.</p>"
      },
      "NetworkInterfaceType": {
        "type": "string",
        "enum": [
          "CAN_INTERFACE",
          "OBD_INTERFACE"
        ]
      },
      "CanInterface": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/CanInterfaceName"
              },
              {
                "description": "The unique name of the interface."
              }
            ]
          },
          "protocolName": {
            "allOf": [
              {
                "$ref": "#/$defs/ProtocolName"
              },
              {
                "description": "The name of the communication protocol for the interface."
              }
            ]
          },
          "protocolVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/ProtocolVersion"
              },
              {
                "description": "The version of the communication protocol for the interface."
              }
            ]
          }
        },
        "description": "A single controller area network (CAN) device interface."
      },
      "CanInterfaceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "ProtocolName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "ProtocolVersion": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "ObdInterface": {
        "type": "object",
        "required": [
          "name",
          "requestMessageId"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ObdInterfaceName"
              },
              {
                "description": "The name of the interface."
              }
            ]
          },
          "requestMessageId": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The ID of the message requesting vehicle data."
              }
            ]
          },
          "obdStandard": {
            "allOf": [
              {
                "$ref": "#/$defs/ObdStandard"
              },
              {
                "description": "The standard OBD II PID."
              }
            ]
          },
          "pidRequestIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The maximum number message requests per second."
              }
            ]
          },
          "dtcRequestIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/nonNegativeInteger"
              },
              {
                "description": "The maximum number message requests per diagnostic trouble code per second."
              }
            ]
          },
          "useExtendedIds": {
            "allOf": [
              {
                "$ref": "#/$defs/boolean"
              },
              {
                "description": "Whether to use extended IDs in the message."
              }
            ]
          },
          "hasTransmissionEcu": {
            "allOf": [
              {
                "$ref": "#/$defs/boolean"
              },
              {
                "description": "Whether the vehicle has a transmission control module (TCM)."
              }
            ]
          }
        },
        "description": "A network interface that specifies the On-board diagnostic (OBD) II network protocol."
      },
      "ObdInterfaceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "ObdStandard": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "InterfaceIds": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InterfaceId"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "ManifestStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "DRAFT"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotfleetwise.us-east-1.amazonaws.com/#X-Amz-Target=IoTAutobahnControlPlane.UpdateDecoderManifest"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**name**",
            "**arn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
