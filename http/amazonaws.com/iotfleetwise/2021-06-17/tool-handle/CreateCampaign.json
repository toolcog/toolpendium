{
  "name": "CreateCampaign",
  "description": "<p>Creates an orchestration of data collection rules. The Amazon Web Services IoT FleetWise Edge Agent software running in vehicles uses campaigns to decide how to collect and transfer data to the cloud. You create campaigns in the cloud. After you or your team approve campaigns, Amazon Web Services IoT FleetWise automatically deploys them to vehicles. </p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/campaigns.html\">Collect and transfer data with campaigns</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "IoTAutobahnControlPlane.CreateCampaign"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateCampaignRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateCampaignRequest": {
        "type": "object",
        "required": [
          "name",
          "signalCatalogArn",
          "targetArn",
          "collectionScheme"
        ],
        "title": "CreateCampaignRequest",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/campaignName"
              },
              {
                "description": " The name of the campaign to create. "
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/description"
              },
              {
                "description": "An optional description of the campaign to help identify its purpose."
              }
            ]
          },
          "signalCatalogArn": {
            "allOf": [
              {
                "$ref": "#/$defs/arn"
              },
              {
                "description": "(Optional) The Amazon Resource Name (ARN) of the signal catalog to associate with the campaign. "
              }
            ]
          },
          "targetArn": {
            "allOf": [
              {
                "$ref": "#/$defs/arn"
              },
              {
                "description": " The ARN of the vehicle or fleet to deploy a campaign to. "
              }
            ]
          },
          "startTime": {
            "allOf": [
              {
                "$ref": "#/$defs/timestamp"
              },
              {
                "description": "<p>(Optional) The time, in milliseconds, to deliver a campaign after it was approved. If it's not specified, <code>0</code> is used.</p> <p>Default: <code>0</code> </p>"
              }
            ]
          },
          "expiryTime": {
            "allOf": [
              {
                "$ref": "#/$defs/timestamp"
              },
              {
                "description": "<p> (Optional) The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data isn't collected after the campaign expires. </p> <p>Default: 253402214400 (December 31, 9999, 00:00:00 UTC)</p>"
              }
            ]
          },
          "postTriggerCollectionDuration": {
            "allOf": [
              {
                "$ref": "#/$defs/uint32"
              },
              {
                "description": "<p> (Optional) How long (in milliseconds) to collect raw data after a triggering event initiates the collection. If it's not specified, <code>0</code> is used.</p> <p>Default: <code>0</code> </p>"
              }
            ]
          },
          "diagnosticsMode": {
            "allOf": [
              {
                "$ref": "#/$defs/DiagnosticsMode"
              },
              {
                "description": "<p> (Optional) Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. If you want to send diagnostic trouble codes, use <code>SEND_ACTIVE_DTCS</code>. If it's not specified, <code>OFF</code> is used.</p> <p>Default: <code>OFF</code> </p>"
              }
            ]
          },
          "spoolingMode": {
            "allOf": [
              {
                "$ref": "#/$defs/SpoolingMode"
              },
              {
                "description": "<p>(Optional) Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. If you want to store collected data when a vehicle loses connection with the cloud, use <code>TO_DISK</code>. If it's not specified, <code>OFF</code> is used.</p> <p>Default: <code>OFF</code> </p>"
              }
            ]
          },
          "compression": {
            "allOf": [
              {
                "$ref": "#/$defs/Compression"
              },
              {
                "description": "<p> (Optional) Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If you don't want to compress the signals, use <code>OFF</code>. If it's not specified, <code>SNAPPY</code> is used. </p> <p>Default: <code>SNAPPY</code> </p>"
              }
            ]
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/$defs/priority"
              },
              {
                "description": "<p>(Optional) A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns. If it's not specified, <code>0</code> is used. </p> <p>Default: <code>0</code> </p>"
              }
            ]
          },
          "signalsToCollect": {
            "allOf": [
              {
                "$ref": "#/$defs/SignalInformationList"
              },
              {
                "description": "(Optional) A list of information about signals to collect. "
              }
            ]
          },
          "collectionScheme": {
            "allOf": [
              {
                "$ref": "#/$defs/CollectionScheme"
              },
              {
                "description": " The data collection scheme associated with the campaign. You can specify a scheme that collects data based on time or an event."
              }
            ]
          },
          "dataExtraDimensions": {
            "allOf": [
              {
                "$ref": "#/$defs/DataExtraDimensionNodePathList"
              },
              {
                "description": "<p> (Optional) A list of vehicle attributes to associate with a campaign. </p> <p>Enrich the data with specified vehicle attributes. For example, add <code>make</code> and <code>model</code> to the campaign, and Amazon Web Services IoT FleetWise will associate the data with those attributes as dimensions in Amazon Timestream. You can then query the data against <code>make</code> and <code>model</code>.</p> <p>Default: An empty array</p>"
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "Metadata that can be used to manage the campaign."
              }
            ]
          },
          "dataDestinationConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/DataDestinationConfigs"
              },
              {
                "description": "<p>The destination where the campaign sends data. You can choose to send data to be stored in Amazon S3 or Amazon Timestream.</p> <p>Amazon S3 optimizes the cost of data storage and provides additional mechanisms to use vehicle data, such as data lakes, centralized data storage, data processing pipelines, and analytics. </p> <p>You can use Amazon Timestream to access and analyze time series data, and Timestream to query vehicle data so that you can identify trends and patterns.</p>"
              }
            ]
          }
        }
      },
      "campaignName": {
        "type": "string",
        "pattern": "[a-zA-Z\\d\\-_:]+",
        "minLength": 1,
        "maxLength": 100
      },
      "description": {
        "type": "string",
        "pattern": "[^\\u0000-\\u001F\\u007F]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "arn": {
        "type": "string"
      },
      "timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "uint32": {
        "type": "integer",
        "minimum": 0,
        "maximum": 4294967295
      },
      "DiagnosticsMode": {
        "type": "string",
        "enum": [
          "OFF",
          "SEND_ACTIVE_DTCS"
        ]
      },
      "SpoolingMode": {
        "type": "string",
        "enum": [
          "OFF",
          "TO_DISK"
        ]
      },
      "Compression": {
        "type": "string",
        "enum": [
          "OFF",
          "SNAPPY"
        ]
      },
      "priority": {
        "type": "integer",
        "minimum": 0
      },
      "SignalInformationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SignalInformation"
        },
        "minItems": 0,
        "maxItems": 1000
      },
      "SignalInformation": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/wildcardSignalName"
              },
              {
                "description": "The name of the signal."
              }
            ]
          },
          "maxSampleCount": {
            "allOf": [
              {
                "$ref": "#/$defs/maxSampleCount"
              },
              {
                "description": "The maximum number of samples to collect."
              }
            ]
          },
          "minimumSamplingIntervalMs": {
            "allOf": [
              {
                "$ref": "#/$defs/uint32"
              },
              {
                "description": "<p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p> <note> <p>If a signal changes often, you might want to collect data at a slower rate.</p> </note>"
              }
            ]
          }
        },
        "description": "Information about a signal."
      },
      "wildcardSignalName": {
        "type": "string",
        "pattern": "[\\w|*|-]+(\\.[\\w|*|-]+)*",
        "minLength": 1,
        "maxLength": 150
      },
      "maxSampleCount": {
        "type": "integer",
        "minimum": 1,
        "maximum": 4294967295
      },
      "CollectionScheme": {
        "type": "object",
        "properties": {
          "timeBasedCollectionScheme": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeBasedCollectionScheme"
              },
              {
                "description": "Information about a collection scheme that uses a time period to decide how often to collect data."
              }
            ]
          },
          "conditionBasedCollectionScheme": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionBasedCollectionScheme"
              },
              {
                "description": "Information about a collection scheme that uses a simple logical expression to recognize what data to collect."
              }
            ]
          }
        },
        "description": "Specifies what data to collect and how often or when to collect it."
      },
      "TimeBasedCollectionScheme": {
        "type": "object",
        "required": [
          "periodMs"
        ],
        "properties": {
          "periodMs": {
            "allOf": [
              {
                "$ref": "#/$defs/collectionPeriodMs"
              },
              {
                "description": "The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute."
              }
            ]
          }
        },
        "description": "Information about a collection scheme that uses a time period to decide how often to collect data."
      },
      "collectionPeriodMs": {
        "type": "integer",
        "minimum": 10000,
        "maximum": 60000
      },
      "ConditionBasedCollectionScheme": {
        "type": "object",
        "required": [
          "expression"
        ],
        "properties": {
          "expression": {
            "allOf": [
              {
                "$ref": "#/$defs/eventExpression"
              },
              {
                "description": "The logical expression used to recognize what data to collect. For example, <code>$variable.Vehicle.OutsideAirTemperature &gt;= 105.0</code>."
              }
            ]
          },
          "minimumTriggerIntervalMs": {
            "allOf": [
              {
                "$ref": "#/$defs/uint32"
              },
              {
                "description": "<p>The minimum duration of time between two triggering events to collect data, in milliseconds.</p> <note> <p>If a signal changes often, you might want to collect data at a slower rate.</p> </note>"
              }
            ]
          },
          "triggerMode": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerMode"
              },
              {
                "description": "Whether to collect data for all triggering events (<code>ALWAYS</code>). Specify (<code>RISING_EDGE</code>), or specify only when the condition first evaluates to false. For example, triggering on \"AirbagDeployed\"; Users aren't interested on triggering when the airbag is already exploded; they only care about the change from not deployed =&gt; deployed."
              }
            ]
          },
          "conditionLanguageVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/languageVersion"
              },
              {
                "description": "Specifies the version of the conditional expression language."
              }
            ]
          }
        },
        "description": "Information about a collection scheme that uses a simple logical expression to recognize what data to collect."
      },
      "eventExpression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "TriggerMode": {
        "type": "string",
        "enum": [
          "ALWAYS",
          "RISING_EDGE"
        ]
      },
      "languageVersion": {
        "type": "integer",
        "minimum": 1
      },
      "DataExtraDimensionNodePathList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NodePath"
        },
        "minItems": 0,
        "maxItems": 5
      },
      "NodePath": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.]+",
        "minLength": 1,
        "maxLength": 150
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "A set of key/value pairs that are used to manage the resource."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "DataDestinationConfigs": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataDestinationConfig"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "DataDestinationConfig": {
        "type": "object",
        "properties": {
          "s3Config": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Config"
              },
              {
                "description": "The Amazon S3 bucket where the Amazon Web Services IoT FleetWise campaign sends data."
              }
            ]
          },
          "timestreamConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestreamConfig"
              },
              {
                "description": "The Amazon Timestream table where the campaign sends data."
              }
            ]
          }
        },
        "description": "The destination where the Amazon Web Services IoT FleetWise campaign sends data. You can send data to be stored in Amazon S3 or Amazon Timestream."
      },
      "S3Config": {
        "type": "object",
        "required": [
          "bucketArn"
        ],
        "properties": {
          "bucketArn": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Amazon S3 bucket."
              }
            ]
          },
          "dataFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/DataFormat"
              },
              {
                "description": "<p>Specify the format that files are saved in the Amazon S3 bucket. You can save files in an Apache Parquet or JSON format.</p> <ul> <li> <p>Parquet - Store data in a columnar storage file format. Parquet is optimal for fast data retrieval and can reduce costs. This option is selected by default.</p> </li> <li> <p>JSON - Store data in a standard text-based JSON file format.</p> </li> </ul>"
              }
            ]
          },
          "storageCompressionFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/StorageCompressionFormat"
              },
              {
                "description": "By default, stored data is compressed as a .gzip file. Compressed files have a reduced file size, which can optimize the cost of data storage."
              }
            ]
          },
          "prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/Prefix"
              },
              {
                "description": "<p>(Optional) Enter an S3 bucket prefix. The prefix is the string of characters after the bucket name and before the object name. You can use the prefix to organize data stored in Amazon S3 buckets. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html\">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> <p>By default, Amazon Web Services IoT FleetWise sets the prefix <code>processed-data/year=YY/month=MM/date=DD/hour=HH/</code> (in UTC) to data it delivers to Amazon S3. You can enter a prefix to append it to this default prefix. For example, if you enter the prefix <code>vehicles</code>, the prefix will be <code>vehicles/processed-data/year=YY/month=MM/date=DD/hour=HH/</code>.</p>"
              }
            ]
          }
        },
        "description": "The Amazon S3 bucket where the Amazon Web Services IoT FleetWise campaign sends data. Amazon S3 is an object storage service that stores data as objects within buckets. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html\">Creating, configuring, and working with Amazon S3 buckets</a> in the <i>Amazon Simple Storage Service User Guide</i>."
      },
      "S3BucketArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z0-9-]*):s3:::.+",
        "minLength": 16,
        "maxLength": 100
      },
      "DataFormat": {
        "type": "string",
        "enum": [
          "JSON",
          "PARQUET"
        ]
      },
      "StorageCompressionFormat": {
        "type": "string",
        "enum": [
          "NONE",
          "GZIP"
        ]
      },
      "Prefix": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-_:./!*'()]+",
        "minLength": 1,
        "maxLength": 512
      },
      "TimestreamConfig": {
        "type": "object",
        "required": [
          "timestreamTableArn",
          "executionRoleArn"
        ],
        "properties": {
          "timestreamTableArn": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestreamTableArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Amazon Timestream table."
              }
            ]
          },
          "executionRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/IAMRoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the task execution role that grants Amazon Web Services IoT FleetWise permission to deliver data to the Amazon Timestream table."
              }
            ]
          }
        },
        "description": "The Amazon Timestream table where the Amazon Web Services IoT FleetWise campaign sends data. Timestream stores and organizes data to optimize query processing time and to reduce storage costs. For more information, see <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/data-modeling.html\">Data modeling</a> in the <i>Amazon Timestream Developer Guide</i>."
      },
      "TimestreamTableArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z0-9-]*):timestream:[a-zA-Z0-9-]+:[0-9]{12}:database/[a-zA-Z0-9_.-]+/table/[a-zA-Z0-9_.-]+",
        "minLength": 20,
        "maxLength": 2048
      },
      "IAMRoleArn": {
        "type": "string",
        "pattern": "arn:(aws[a-zA-Z0-9-]*):iam::(\\d{12})?:(role((\\u002F)|(\\u002F[\\u0021-\\u007F]+\\u002F))[\\w+=,.@-]+)",
        "minLength": 20,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotfleetwise.us-east-1.amazonaws.com/#X-Amz-Target=IoTAutobahnControlPlane.CreateCampaign"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**name**",
            "**arn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
