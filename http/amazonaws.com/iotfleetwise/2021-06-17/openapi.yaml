openapi: 3.0.0
info:
  version: '2021-06-17'
  x-release: v4
  title: AWS IoT FleetWise
  description: '<p>Amazon Web Services IoT FleetWise is a fully managed service that you can use to collect, model, and transfer vehicle data to the Amazon Web Services cloud at scale. With Amazon Web Services IoT FleetWise, you can standardize all of your vehicle data models, independent of the in-vehicle communication architecture, and define data collection rules to transfer only high-value data to the cloud. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/">What is Amazon Web Services IoT FleetWise?</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: iotfleetwise
  x-aws-signingName: iotfleetwise
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iotfleetwise-2021-06-17.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/iotfleetwise/'
servers:
  - url: 'http://iotfleetwise.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS IoT FleetWise multi-region endpoint
  - url: 'https://iotfleetwise.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS IoT FleetWise multi-region endpoint
  - url: 'http://iotfleetwise.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT FleetWise endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://iotfleetwise.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT FleetWise endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=IoTAutobahnControlPlane.AssociateVehicleFleet:
    post:
      operationId: AssociateVehicleFleet
      description: ' Adds, or associates, a vehicle with a fleet. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssociateVehicleFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociateVehicleFleetRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.AssociateVehicleFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.BatchCreateVehicle:
    post:
      operationId: BatchCreateVehicle
      description: '<p> Creates a group, or batch, of vehicles. </p> <note> <p> You must specify a decoder manifest and a vehicle model (model manifest) for each vehicle. </p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/create-vehicles-cli.html">Create multiple vehicles (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateVehicleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.BatchCreateVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.BatchUpdateVehicle:
    post:
      operationId: BatchUpdateVehicle
      description: '<p> Updates a group, or batch, of vehicles.</p> <note> <p> You must specify a decoder manifest and a vehicle model (model manifest) for each vehicle. </p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/update-vehicles-cli.html">Update multiple vehicles (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateVehicleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.BatchUpdateVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.CreateCampaign:
    post:
      operationId: CreateCampaign
      description: '<p>Creates an orchestration of data collection rules. The Amazon Web Services IoT FleetWise Edge Agent software running in vehicles uses campaigns to decide how to collect and transfer data to the cloud. You create campaigns in the cloud. After you or your team approve campaigns, Amazon Web Services IoT FleetWise automatically deploys them to vehicles. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/campaigns.html">Collect and transfer data with campaigns</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCampaignResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCampaignRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.CreateCampaign
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.CreateDecoderManifest:
    post:
      operationId: CreateDecoderManifest
      description: '<p>Creates the decoder manifest associated with a model manifest. To create a decoder manifest, the following must be true:</p> <ul> <li> <p>Every signal decoder has a unique name.</p> </li> <li> <p>Each signal decoder is associated with a network interface.</p> </li> <li> <p>Each network interface has a unique ID.</p> </li> <li> <p>The signal decoders are specified in the model manifest.</p> </li> </ul>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDecoderManifestResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: DecoderManifestValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecoderManifestValidationException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '487':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDecoderManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.CreateDecoderManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.CreateFleet:
    post:
      operationId: CreateFleet
      description: '<p> Creates a fleet that represents a group of vehicles. </p> <note> <p>You must create both a signal catalog and vehicles before you can create a fleet. </p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/fleets.html">Fleets</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFleetRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.CreateFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.CreateModelManifest:
    post:
      operationId: CreateModelManifest
      description: '<p> Creates a vehicle model (model manifest) that specifies signals (attributes, branches, sensors, and actuators). </p> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/vehicle-models.html">Vehicle models</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelManifestResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: InvalidSignalsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSignalsException'
        '487':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModelManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.CreateModelManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.CreateSignalCatalog:
    post:
      operationId: CreateSignalCatalog
      description: ' Creates a collection of standardized signals that can be reused to create vehicle models.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSignalCatalogResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: InvalidNodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNodeException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: InvalidSignalsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSignalsException'
        '487':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignalCatalogRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.CreateSignalCatalog
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.CreateVehicle:
    post:
      operationId: CreateVehicle
      description: '<p> Creates a vehicle, which is an instance of a vehicle model (model manifest). Vehicles created from the same vehicle model consist of the same signals inherited from the vehicle model.</p> <note> <p> If you have an existing Amazon Web Services IoT thing, you can use Amazon Web Services IoT FleetWise to create a vehicle and collect data from your thing. </p> </note> <p>For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/create-vehicle-cli.html">Create a vehicle (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVehicleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.CreateVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DeleteCampaign:
    post:
      operationId: DeleteCampaign
      description: ' Deletes a data collection campaign. Deleting a campaign suspends all data collection and removes it from any vehicles. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCampaignResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCampaignRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DeleteCampaign
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DeleteDecoderManifest:
    post:
      operationId: DeleteDecoderManifest
      description: '<p> Deletes a decoder manifest. You can''t delete a decoder manifest if it has vehicles associated with it. </p> <note> <p>If the decoder manifest is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDecoderManifestResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDecoderManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DeleteDecoderManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DeleteFleet:
    post:
      operationId: DeleteFleet
      description: '<p> Deletes a fleet. Before you delete a fleet, all vehicles must be dissociated from the fleet. For more information, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/delete-fleet-cli.html">Delete a fleet (AWS CLI)</a> in the <i>Amazon Web Services IoT FleetWise Developer Guide</i>.</p> <note> <p>If the fleet is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFleetRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DeleteFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DeleteModelManifest:
    post:
      operationId: DeleteModelManifest
      description: '<p> Deletes a vehicle model (model manifest).</p> <note> <p>If the vehicle model is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelManifestResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteModelManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DeleteModelManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DeleteSignalCatalog:
    post:
      operationId: DeleteSignalCatalog
      description: '<p> Deletes a signal catalog. </p> <note> <p>If the signal catalog is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSignalCatalogResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSignalCatalogRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DeleteSignalCatalog
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DeleteVehicle:
    post:
      operationId: DeleteVehicle
      description: '<p> Deletes a vehicle and removes it from any campaigns.</p> <note> <p>If the vehicle is successfully deleted, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteVehicleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DeleteVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.DisassociateVehicleFleet:
    post:
      operationId: DisassociateVehicleFleet
      description: '<p>Removes, or disassociates, a vehicle from a fleet. Disassociating a vehicle from a fleet doesn''t delete the vehicle.</p> <note> <p>If the vehicle is successfully dissociated from a fleet, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisassociateVehicleFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisassociateVehicleFleetRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.DisassociateVehicleFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetCampaign:
    post:
      operationId: GetCampaign
      description: ' Retrieves information about a campaign. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCampaignResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCampaignRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetCampaign
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetDecoderManifest:
    post:
      operationId: GetDecoderManifest
      description: ' Retrieves information about a created decoder manifest. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDecoderManifestResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDecoderManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetDecoderManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetFleet:
    post:
      operationId: GetFleet
      description: ' Retrieves information about a fleet. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFleetRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetLoggingOptions:
    post:
      operationId: GetLoggingOptions
      description: Retrieves the logging options.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLoggingOptionsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLoggingOptionsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetLoggingOptions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetModelManifest:
    post:
      operationId: GetModelManifest
      description: ' Retrieves information about a vehicle model (model manifest). '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelManifestResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetModelManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetModelManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetRegisterAccountStatus:
    post:
      operationId: GetRegisterAccountStatus
      description: '<p> Retrieves information about the status of registering your Amazon Web Services account, IAM, and Amazon Timestream resources so that Amazon Web Services IoT FleetWise can transfer your vehicle data to the Amazon Web Services Cloud. </p> <p>For more information, including step-by-step procedures, see <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/setting-up.html">Setting up Amazon Web Services IoT FleetWise</a>. </p> <note> <p>This API operation doesn''t require input parameters.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRegisterAccountStatusResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRegisterAccountStatusRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetRegisterAccountStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetSignalCatalog:
    post:
      operationId: GetSignalCatalog
      description: ' Retrieves information about a signal catalog. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignalCatalogResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSignalCatalogRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetSignalCatalog
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetVehicle:
    post:
      operationId: GetVehicle
      description: ' Retrieves information about a vehicle. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetVehicleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.GetVehicleStatus:
    post:
      operationId: GetVehicleStatus
      description: ' Retrieves information about the status of a vehicle with any associated campaigns. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVehicleStatusResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetVehicleStatusRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.GetVehicleStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ImportDecoderManifest:
    post:
      operationId: ImportDecoderManifest
      description: ' Creates a decoder manifest using your existing CAN DBC file from your local device. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportDecoderManifestResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: DecoderManifestValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecoderManifestValidationException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: InvalidSignalsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSignalsException'
        '487':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDecoderManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ImportDecoderManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ImportSignalCatalog:
    post:
      operationId: ImportSignalCatalog
      description: ' Creates a signal catalog using your existing VSS formatted content from your local device. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportSignalCatalogResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: InvalidSignalsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSignalsException'
        '487':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportSignalCatalogRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ImportSignalCatalog
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListCampaigns:
    post:
      operationId: ListCampaigns
      description: <p> Lists information about created campaigns. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCampaignsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCampaignsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListCampaigns
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListDecoderManifestNetworkInterfaces:
    post:
      operationId: ListDecoderManifestNetworkInterfaces
      description: <p> Lists the network interfaces specified in a decoder manifest. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDecoderManifestNetworkInterfacesResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDecoderManifestNetworkInterfacesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListDecoderManifestNetworkInterfaces
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListDecoderManifestSignals:
    post:
      operationId: ListDecoderManifestSignals
      description: <p> A list of information about signal decoders specified in a decoder manifest. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDecoderManifestSignalsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDecoderManifestSignalsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListDecoderManifestSignals
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListDecoderManifests:
    post:
      operationId: ListDecoderManifests
      description: <p> Lists decoder manifests. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDecoderManifestsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListDecoderManifestsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListDecoderManifests
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListFleets:
    post:
      operationId: ListFleets
      description: <p> Retrieves information for each created fleet in an Amazon Web Services account. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFleetsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFleetsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListFleets
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListFleetsForVehicle:
    post:
      operationId: ListFleetsForVehicle
      description: <p>Retrieves a list of IDs for all fleets that the vehicle is associated with.</p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFleetsForVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFleetsForVehicleRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListFleetsForVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListModelManifestNodes:
    post:
      operationId: ListModelManifestNodes
      description: <p> Lists information about nodes specified in a vehicle model (model manifest). </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelManifestNodesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListModelManifestNodesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListModelManifestNodes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListModelManifests:
    post:
      operationId: ListModelManifests
      description: <p> Retrieves a list of vehicle models (model manifests). </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelManifestsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListModelManifestsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListModelManifests
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListSignalCatalogNodes:
    post:
      operationId: ListSignalCatalogNodes
      description: <p> Lists of information about the signals (nodes) specified in a signal catalog. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSignalCatalogNodesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSignalCatalogNodesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListSignalCatalogNodes
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListSignalCatalogs:
    post:
      operationId: ListSignalCatalogs
      description: <p> Lists all the created signal catalogs in an Amazon Web Services account. </p> <p>You can use to list information about each signal (node) specified in a signal catalog.</p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSignalCatalogsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSignalCatalogsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListSignalCatalogs
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: Lists the tags (metadata) you have assigned to the resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListVehicles:
    post:
      operationId: ListVehicles
      description: <p> Retrieves a list of summaries of created vehicles. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVehiclesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListVehiclesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListVehicles
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.ListVehiclesInFleet:
    post:
      operationId: ListVehiclesInFleet
      description: <p> Retrieves a list of summaries of all vehicles associated with a fleet. </p> <note> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the request to return more results.</p> </note>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVehiclesInFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListVehiclesInFleetRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.ListVehiclesInFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.PutLoggingOptions:
    post:
      operationId: PutLoggingOptions
      description: Creates or updates the logging option.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLoggingOptionsResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLoggingOptionsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.PutLoggingOptions
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.RegisterAccount:
    post:
      operationId: RegisterAccount
      description: '<important> <p>This API operation contains deprecated parameters. Register your account again without the Timestream resources parameter so that Amazon Web Services IoT FleetWise can remove the Timestream metadata stored. You should then pass the data destination into the <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/APIReference/API_CreateCampaign.html">CreateCampaign</a> API operation.</p> <p>You must delete any existing campaigns that include an empty data destination before you register your account again. For more information, see the <a href="https://docs.aws.amazon.com/iot-fleetwise/latest/APIReference/API_DeleteCampaign.html">DeleteCampaign</a> API operation.</p> <p>If you want to delete the Timestream inline policy from the service-linked role, such as to mitigate an overly permissive policy, you must first delete any existing campaigns. Then delete the service-linked role and register your account again to enable CloudWatch metrics. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_DeleteServiceLinkedRole.html">DeleteServiceLinkedRole</a> in the <i>Identity and Access Management API Reference</i>.</p> </important> <pre><code> &lt;p&gt;Registers your Amazon Web Services account, IAM, and Amazon Timestream resources so Amazon Web Services IoT FleetWise can transfer your vehicle data to the Amazon Web Services Cloud. For more information, including step-by-step procedures, see &lt;a href=&quot;https://docs.aws.amazon.com/iot-fleetwise/latest/developerguide/setting-up.html&quot;&gt;Setting up Amazon Web Services IoT FleetWise&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;An Amazon Web Services account is &lt;b&gt;not&lt;/b&gt; the same thing as a &quot;user.&quot; An &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction_identity-management.html#intro-identity-users&quot;&gt;Amazon Web Services user&lt;/a&gt; is an identity that you create using Identity and Access Management (IAM) and takes the form of either an &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html&quot;&gt;IAM user&lt;/a&gt; or an &lt;a href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html&quot;&gt;IAM role, both with credentials&lt;/a&gt;. A single Amazon Web Services account can, and typically does, contain many users and roles.&lt;/p&gt; &lt;/note&gt; </code></pre>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterAccountResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAccountRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.RegisterAccount
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.TagResource:
    post:
      operationId: TagResource
      description: Adds to or modifies the tags of the given resource. Tags are metadata which can be used to manage a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UntagResource:
    post:
      operationId: UntagResource
      description: Removes the given tags (metadata) from the resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UpdateCampaign:
    post:
      operationId: UpdateCampaign
      description: ' Updates a campaign. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCampaignResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCampaignRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UpdateCampaign
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UpdateDecoderManifest:
    post:
      operationId: UpdateDecoderManifest
      description: <p> Updates a decoder manifest.</p> <p>A decoder manifest can only be updated when the status is <code>DRAFT</code>. Only <code>ACTIVE</code> decoder manifests can be associated with vehicles.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDecoderManifestResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: DecoderManifestValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DecoderManifestValidationException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '487':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDecoderManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UpdateDecoderManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UpdateFleet:
    post:
      operationId: UpdateFleet
      description: '<p> Updates the description of an existing fleet. </p> <note> <p>If the fleet is successfully updated, Amazon Web Services IoT FleetWise sends back an HTTP 200 response with an empty HTTP body.</p> </note>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateFleetResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFleetRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UpdateFleet
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UpdateModelManifest:
    post:
      operationId: UpdateModelManifest
      description: ' Updates a vehicle model (model manifest). If created vehicles are associated with a vehicle model, it can''t be updated.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModelManifestResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: InvalidSignalsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSignalsException'
        '486':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateModelManifestRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UpdateModelManifest
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UpdateSignalCatalog:
    post:
      operationId: UpdateSignalCatalog
      description: ' Updates a signal catalog. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSignalCatalogResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: LimitExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
        '484':
          description: InvalidNodeException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidNodeException'
        '485':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '486':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '487':
          description: InvalidSignalsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSignalsException'
        '488':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSignalCatalogRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UpdateSignalCatalog
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=IoTAutobahnControlPlane.UpdateVehicle:
    post:
      operationId: UpdateVehicle
      description: ' Updates a vehicle. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVehicleResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVehicleRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - IoTAutobahnControlPlane.UpdateVehicle
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AssociateVehicleFleetResponse:
      type: object
      properties: {}
    AssociateVehicleFleetRequest:
      type: object
      required:
        - vehicleName
        - fleetId
      title: AssociateVehicleFleetRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: ' The unique ID of the vehicle to associate with the fleet. '
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of a fleet. '
    InternalServerException: {}
    ResourceNotFoundException: {}
    ThrottlingException: {}
    ValidationException: {}
    AccessDeniedException: {}
    BatchCreateVehicleResponse:
      type: object
      properties:
        vehicles:
          allOf:
            - $ref: '#/components/schemas/createVehicleResponses'
            - description: ' A list of information about a batch of created vehicles. For more information, see the API data type.'
        errors:
          allOf:
            - $ref: '#/components/schemas/createVehicleErrors'
            - description: 'A list of information about creation errors, or an empty list if there aren''t any errors. '
    BatchCreateVehicleRequest:
      type: object
      required:
        - vehicles
      title: BatchCreateVehicleRequest
      properties:
        vehicles:
          allOf:
            - $ref: '#/components/schemas/createVehicleRequestItems'
            - description: ' A list of information about each vehicle to create. For more information, see the API data type.'
    LimitExceededException: {}
    BatchUpdateVehicleResponse:
      type: object
      properties:
        vehicles:
          allOf:
            - $ref: '#/components/schemas/updateVehicleResponseItems'
            - description: <p> A list of information about the batch of updated vehicles. </p> <note> <p>This list contains only unique IDs for the vehicles that were updated.</p> </note>
        errors:
          allOf:
            - $ref: '#/components/schemas/updateVehicleErrors'
            - description: 'A list of information about errors returned while updating a batch of vehicles, or, if there aren''t any errors, an empty list.'
    BatchUpdateVehicleRequest:
      type: object
      required:
        - vehicles
      title: BatchUpdateVehicleRequest
      properties:
        vehicles:
          allOf:
            - $ref: '#/components/schemas/updateVehicleRequestItems'
            - description: ' A list of information about the vehicles to update. For more information, see the API data type.'
    CreateCampaignResponse:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: The name of the created campaign.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the created campaign. '
    CreateCampaignRequest:
      type: object
      required:
        - name
        - signalCatalogArn
        - targetArn
        - collectionScheme
      title: CreateCampaignRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: ' The name of the campaign to create. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: An optional description of the campaign to help identify its purpose.
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: '(Optional) The Amazon Resource Name (ARN) of the signal catalog to associate with the campaign. '
        targetArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the vehicle or fleet to deploy a campaign to. '
        startTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: '<p>(Optional) The time, in milliseconds, to deliver a campaign after it was approved. If it''s not specified, <code>0</code> is used.</p> <p>Default: <code>0</code> </p>'
        expiryTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: '<p> (Optional) The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data isn''t collected after the campaign expires. </p> <p>Default: 253402214400 (December 31, 9999, 00:00:00 UTC)</p>'
        postTriggerCollectionDuration:
          allOf:
            - $ref: '#/components/schemas/uint32'
            - description: '<p> (Optional) How long (in milliseconds) to collect raw data after a triggering event initiates the collection. If it''s not specified, <code>0</code> is used.</p> <p>Default: <code>0</code> </p>'
        diagnosticsMode:
          allOf:
            - $ref: '#/components/schemas/DiagnosticsMode'
            - description: '<p> (Optional) Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. If you want to send diagnostic trouble codes, use <code>SEND_ACTIVE_DTCS</code>. If it''s not specified, <code>OFF</code> is used.</p> <p>Default: <code>OFF</code> </p>'
        spoolingMode:
          allOf:
            - $ref: '#/components/schemas/SpoolingMode'
            - description: '<p>(Optional) Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. If you want to store collected data when a vehicle loses connection with the cloud, use <code>TO_DISK</code>. If it''s not specified, <code>OFF</code> is used.</p> <p>Default: <code>OFF</code> </p>'
        compression:
          allOf:
            - $ref: '#/components/schemas/Compression'
            - description: '<p> (Optional) Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If you don''t want to compress the signals, use <code>OFF</code>. If it''s not specified, <code>SNAPPY</code> is used. </p> <p>Default: <code>SNAPPY</code> </p>'
        priority:
          allOf:
            - $ref: '#/components/schemas/priority'
            - description: '<p>(Optional) A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns. If it''s not specified, <code>0</code> is used. </p> <p>Default: <code>0</code> </p>'
        signalsToCollect:
          allOf:
            - $ref: '#/components/schemas/SignalInformationList'
            - description: '(Optional) A list of information about signals to collect. '
        collectionScheme:
          allOf:
            - $ref: '#/components/schemas/CollectionScheme'
            - description: ' The data collection scheme associated with the campaign. You can specify a scheme that collects data based on time or an event.'
        dataExtraDimensions:
          allOf:
            - $ref: '#/components/schemas/DataExtraDimensionNodePathList'
            - description: '<p> (Optional) A list of vehicle attributes to associate with a campaign. </p> <p>Enrich the data with specified vehicle attributes. For example, add <code>make</code> and <code>model</code> to the campaign, and Amazon Web Services IoT FleetWise will associate the data with those attributes as dimensions in Amazon Timestream. You can then query the data against <code>make</code> and <code>model</code>.</p> <p>Default: An empty array</p>'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the campaign.
        dataDestinationConfigs:
          allOf:
            - $ref: '#/components/schemas/DataDestinationConfigs'
            - description: '<p>The destination where the campaign sends data. You can choose to send data to be stored in Amazon S3 or Amazon Timestream.</p> <p>Amazon S3 optimizes the cost of data storage and provides additional mechanisms to use vehicle data, such as data lakes, centralized data storage, data processing pipelines, and analytics. </p> <p>You can use Amazon Timestream to access and analyze time series data, and Timestream to query vehicle data so that you can identify trends and patterns.</p>'
    ConflictException: {}
    CreateDecoderManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the created decoder manifest. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the created decoder manifest. '
    CreateDecoderManifestRequest:
      type: object
      required:
        - name
        - modelManifestArn
      title: CreateDecoderManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The unique name of the decoder manifest to create.'
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the decoder manifest. '
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the vehicle model (model manifest). '
        signalDecoders:
          allOf:
            - $ref: '#/components/schemas/SignalDecoders'
            - description: ' A list of information about signal decoders. '
        networkInterfaces:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaces'
            - description: ' A list of information about available network interfaces. '
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the decoder manifest.
    DecoderManifestValidationException: {}
    CreateFleetResponse:
      type: object
      required:
        - id
        - arn
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of the created fleet. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the created fleet. '
    CreateFleetRequest:
      type: object
      required:
        - fleetId
        - signalCatalogArn
      title: CreateFleetRequest
      properties:
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The unique ID of the fleet to create. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the fleet to create. '
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of a signal catalog. '
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the fleet.
    CreateModelManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the created vehicle model.'
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the created vehicle model.'
    CreateModelManifestRequest:
      type: object
      required:
        - name
        - nodes
        - signalCatalogArn
      title: CreateModelManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the vehicle model to create.'
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the vehicle model. '
        nodes:
          allOf:
            - $ref: '#/components/schemas/listOfStrings'
            - description: ' A list of nodes, which are a general abstraction of signals. '
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of a signal catalog. '
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the vehicle model.
    InvalidSignalsException: {}
    CreateSignalCatalogResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the created signal catalog. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the created signal catalog. '
    CreateSignalCatalogRequest:
      type: object
      required:
        - name
      title: CreateSignalCatalogRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the signal catalog to create. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the signal catalog.
        nodes:
          allOf:
            - $ref: '#/components/schemas/Nodes'
            - description: ' A list of information about nodes, which are a general abstraction of signals. For more information, see the API data type.'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the signal catalog.
    InvalidNodeException: {}
    CreateVehicleResponse:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the created vehicle.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the created vehicle. '
        thingArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a created or validated Amazon Web Services IoT thing. '
    CreateVehicleRequest:
      type: object
      required:
        - vehicleName
        - modelManifestArn
        - decoderManifestArn
      title: CreateVehicleRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: ' The unique ID of the vehicle to create. '
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name ARN of a vehicle model. '
        decoderManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a decoder manifest. '
        attributes:
          allOf:
            - $ref: '#/components/schemas/attributesMap'
            - description: '<p>Static information about a vehicle in a key-value pair. For example: <code>"engineType"</code> : <code>"1.3 L R2"</code> </p> <p>A campaign must include the keys (attribute names) in <code>dataExtraDimensions</code> for them to display in Amazon Timestream.</p>'
        associationBehavior:
          allOf:
            - $ref: '#/components/schemas/VehicleAssociationBehavior'
            - description: '<p> An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing Amazon Web Services IoT thing as a vehicle. </p> <p>Default: <code/> </p>'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the vehicle.
    DeleteCampaignResponse:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: The name of the deleted campaign.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: <p> The Amazon Resource Name (ARN) of the deleted campaign.</p> <note> <p>The ARN isn’t returned if a campaign doesn’t exist.</p> </note>
    DeleteCampaignRequest:
      type: object
      required:
        - name
      title: DeleteCampaignRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: ' The name of the campaign to delete. '
    DeleteDecoderManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: The name of the deleted decoder manifest.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the deleted decoder manifest.
    DeleteDecoderManifestRequest:
      type: object
      required:
        - name
      title: DeleteDecoderManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the decoder manifest to delete. '
    DeleteFleetResponse:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: The ID of the deleted fleet.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the deleted fleet.
    DeleteFleetRequest:
      type: object
      required:
        - fleetId
      title: DeleteFleetRequest
      properties:
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of the fleet to delete. '
    DeleteModelManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: The name of the deleted model manifest.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the deleted model manifest.
    DeleteModelManifestRequest:
      type: object
      required:
        - name
      title: DeleteModelManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the model manifest to delete. '
    DeleteSignalCatalogResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: The name of the deleted signal catalog.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the deleted signal catalog.
    DeleteSignalCatalogRequest:
      type: object
      required:
        - name
      title: DeleteSignalCatalogRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the signal catalog to delete. '
    DeleteVehicleResponse:
      type: object
      required:
        - vehicleName
        - arn
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The ID of the deleted vehicle.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the deleted vehicle.
    DeleteVehicleRequest:
      type: object
      required:
        - vehicleName
      title: DeleteVehicleRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: 'The ID of the vehicle to delete. '
    DisassociateVehicleFleetResponse:
      type: object
      properties: {}
    DisassociateVehicleFleetRequest:
      type: object
      required:
        - vehicleName
        - fleetId
      title: DisassociateVehicleFleetRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: ' The unique ID of the vehicle to disassociate from the fleet.'
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The unique ID of a fleet. '
    GetCampaignResponse:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: The name of the campaign.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the campaign. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: The description of the campaign.
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a signal catalog. '
        targetArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the vehicle or the fleet targeted by the campaign. '
        status:
          allOf:
            - $ref: '#/components/schemas/CampaignStatus'
            - description: 'The state of the campaign. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, and <code>SUSPENDED</code>. '
        startTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time, in milliseconds, to deliver a campaign after it was approved.'
        expiryTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the campaign expires, in seconds since epoch (January 1, 1970 at midnight UTC time). Vehicle data won''t be collected after the campaign expires.'
        postTriggerCollectionDuration:
          allOf:
            - $ref: '#/components/schemas/uint32'
            - description: ' How long (in seconds) to collect raw data after a triggering event initiates the collection. '
        diagnosticsMode:
          allOf:
            - $ref: '#/components/schemas/DiagnosticsMode'
            - description: ' Option for a vehicle to send diagnostic trouble codes to Amazon Web Services IoT FleetWise. '
        spoolingMode:
          allOf:
            - $ref: '#/components/schemas/SpoolingMode'
            - description: ' Whether to store collected data after a vehicle lost a connection with the cloud. After a connection is re-established, the data is automatically forwarded to Amazon Web Services IoT FleetWise. '
        compression:
          allOf:
            - $ref: '#/components/schemas/Compression'
            - description: ' Whether to compress signals before transmitting data to Amazon Web Services IoT FleetWise. If <code>OFF</code> is specified, the signals aren''t compressed. If it''s not specified, <code>SNAPPY</code> is used. '
        priority:
          allOf:
            - $ref: '#/components/schemas/priority'
            - description: ' A number indicating the priority of one campaign over another campaign for a certain vehicle or fleet. A campaign with the lowest value is deployed to vehicles before any other campaigns.'
        signalsToCollect:
          allOf:
            - $ref: '#/components/schemas/SignalInformationList'
            - description: ' Information about a list of signals to collect data on. '
        collectionScheme:
          allOf:
            - $ref: '#/components/schemas/CollectionScheme'
            - description: ' Information about the data collection scheme associated with the campaign. '
        dataExtraDimensions:
          allOf:
            - $ref: '#/components/schemas/DataExtraDimensionNodePathList'
            - description: ' A list of vehicle attributes associated with the campaign. '
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the campaign was created in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The last time the campaign was modified.
        dataDestinationConfigs:
          allOf:
            - $ref: '#/components/schemas/DataDestinationConfigs'
            - description: '<p>The destination where the campaign sends data. You can choose to send data to be stored in Amazon S3 or Amazon Timestream.</p> <p>Amazon S3 optimizes the cost of data storage and provides additional mechanisms to use vehicle data, such as data lakes, centralized data storage, data processing pipelines, and analytics. </p> <p>You can use Amazon Timestream to access and analyze time series data, and Timestream to query vehicle data so that you can identify trends and patterns.</p>'
    GetCampaignRequest:
      type: object
      required:
        - name
      title: GetCampaignRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: ' The name of the campaign to retrieve information about. '
    GetDecoderManifestResponse:
      type: object
      required:
        - name
        - arn
        - creationTime
        - lastModificationTime
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: ' The name of the decoder manifest. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the decoder manifest. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the decoder manifest.'
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a vehicle model (model manifest) associated with the decoder manifest.'
        status:
          allOf:
            - $ref: '#/components/schemas/ManifestStatus'
            - description: ' The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can''t be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.'
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). '
    GetDecoderManifestRequest:
      type: object
      required:
        - name
      title: GetDecoderManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the decoder manifest to retrieve information about. '
    GetFleetResponse:
      type: object
      required:
        - id
        - arn
        - signalCatalogArn
        - creationTime
        - lastModificationTime
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of the fleet.'
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the fleet. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the fleet. '
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a signal catalog associated with the fleet. '
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the fleet was created in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the fleet was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). '
    GetFleetRequest:
      type: object
      required:
        - fleetId
      title: GetFleetRequest
      properties:
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of the fleet to retrieve information about. '
    GetLoggingOptionsResponse:
      type: object
      required:
        - cloudWatchLogDelivery
      properties:
        cloudWatchLogDelivery:
          allOf:
            - $ref: '#/components/schemas/CloudWatchLogDeliveryOptions'
            - description: Returns information about log delivery to Amazon CloudWatch Logs.
    GetLoggingOptionsRequest:
      type: object
      title: GetLoggingOptionsRequest
      properties: {}
    GetModelManifestResponse:
      type: object
      required:
        - name
        - arn
        - creationTime
        - lastModificationTime
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the vehicle model. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the vehicle model. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the vehicle model. '
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the signal catalog associated with the vehicle model. '
        status:
          allOf:
            - $ref: '#/components/schemas/ManifestStatus'
            - description: ' The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can''t be edited. You can edit the vehicle model if the status is marked <code>DRAFT</code>.'
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the vehicle model was created, in seconds since epoch (January 1, 1970 at midnight UTC time).'
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The last time the vehicle model was modified.
    GetModelManifestRequest:
      type: object
      required:
        - name
      title: GetModelManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the vehicle model to retrieve information about. '
    GetRegisterAccountStatusResponse:
      type: object
      required:
        - customerAccountId
        - accountStatus
        - iamRegistrationResponse
        - creationTime
        - lastModificationTime
      properties:
        customerAccountId:
          allOf:
            - $ref: '#/components/schemas/customerAccountId'
            - description: ' The unique ID of the Amazon Web Services account, provided at account creation. '
        accountStatus:
          allOf:
            - $ref: '#/components/schemas/RegistrationStatus'
            - description: '<p> The status of registering your account and resources. The status can be one of:</p> <ul> <li> <p> <code>REGISTRATION_SUCCESS</code> - The Amazon Web Services resource is successfully registered.</p> </li> <li> <p> <code>REGISTRATION_PENDING</code> - Amazon Web Services IoT FleetWise is processing the registration request. This process takes approximately five minutes to complete.</p> </li> <li> <p> <code>REGISTRATION_FAILURE</code> - Amazon Web Services IoT FleetWise can''t register the AWS resource. Try again later.</p> </li> </ul>'
        timestreamRegistrationResponse:
          allOf:
            - $ref: '#/components/schemas/TimestreamRegistrationResponse'
            - description: ' Information about the registered Amazon Timestream resources or errors, if any.'
        iamRegistrationResponse:
          allOf:
            - $ref: '#/components/schemas/IamRegistrationResponse'
            - description: ' Information about the registered IAM resources or errors, if any. '
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the account was registered, in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time this registration was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). '
    GetRegisterAccountStatusRequest:
      type: object
      title: GetRegisterAccountStatusRequest
      properties: {}
    GetSignalCatalogResponse:
      type: object
      required:
        - name
        - arn
        - creationTime
        - lastModificationTime
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the signal catalog. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the signal catalog. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the signal catalog. '
        nodeCounts:
          allOf:
            - $ref: '#/components/schemas/NodeCounts'
            - description: ' The total number of network nodes specified in a signal catalog. '
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the signal catalog was created in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The last time the signal catalog was modified.
    GetSignalCatalogRequest:
      type: object
      required:
        - name
      title: GetSignalCatalogRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the signal catalog to retrieve information about. '
    GetVehicleResponse:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The ID of the vehicle.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the vehicle to retrieve information about. '
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a vehicle model (model manifest) associated with the vehicle. '
        decoderManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a decoder manifest associated with the vehicle. '
        attributes:
          allOf:
            - $ref: '#/components/schemas/attributesMap'
            - description: '<p>Static information about a vehicle in a key-value pair. For example:</p> <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>'
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the vehicle was created in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the vehicle was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). '
    GetVehicleRequest:
      type: object
      required:
        - vehicleName
      title: GetVehicleRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: ' The ID of the vehicle to retrieve information about. '
    GetVehicleStatusResponse:
      type: object
      properties:
        campaigns:
          allOf:
            - $ref: '#/components/schemas/VehicleStatusList'
            - description: ' Lists information about the state of the vehicle with deployed campaigns. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    GetVehicleStatusRequest:
      type: object
      required:
        - vehicleName
      title: GetVehicleStatusRequest
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: ' The ID of the vehicle to retrieve information about. '
    ImportDecoderManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the imported decoder manifest. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the decoder manifest that was imported. '
    ImportDecoderManifestRequest:
      type: object
      required:
        - name
        - networkFileDefinitions
      title: ImportDecoderManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the decoder manifest to import. '
        networkFileDefinitions:
          allOf:
            - $ref: '#/components/schemas/NetworkFileDefinitions'
            - description: ' The file to load into an Amazon Web Services account. '
    ImportSignalCatalogResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the imported signal catalog. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the imported signal catalog.'
    ImportSignalCatalogRequest:
      type: object
      required:
        - name
      title: ImportSignalCatalogRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: The name of the signal catalog to import.
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the signal catalog. '
        vss:
          allOf:
            - $ref: '#/components/schemas/FormattedVss'
            - description: The contents of the Vehicle Signal Specification (VSS) configuration. VSS is a precise language used to describe and model signals in vehicle networks.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata that can be used to manage the signal catalog.
    ListCampaignsResponse:
      type: object
      properties:
        campaignSummaries:
          allOf:
            - $ref: '#/components/schemas/campaignSummaries'
            - description: ' A summary of information about each campaign. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListCampaignsRequest:
      type: object
      title: ListCampaignsRequest
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
        status:
          allOf:
            - $ref: '#/components/schemas/status'
            - description: 'Optional parameter to filter the results by the status of each created campaign in your account. The status can be one of: <code>CREATING</code>, <code>WAITING_FOR_APPROVAL</code>, <code>RUNNING</code>, or <code>SUSPENDED</code>.'
    ListDecoderManifestNetworkInterfacesResponse:
      type: object
      properties:
        networkInterfaces:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaces'
            - description: ' A list of information about network interfaces. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListDecoderManifestNetworkInterfacesRequest:
      type: object
      required:
        - name
      title: ListDecoderManifestNetworkInterfacesRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the decoder manifest to list information about. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListDecoderManifestSignalsResponse:
      type: object
      properties:
        signalDecoders:
          allOf:
            - $ref: '#/components/schemas/SignalDecoders'
            - description: ' Information about a list of signals to decode. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListDecoderManifestSignalsRequest:
      type: object
      required:
        - name
      title: ListDecoderManifestSignalsRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the decoder manifest to list information about. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListDecoderManifestsResponse:
      type: object
      properties:
        summaries:
          allOf:
            - $ref: '#/components/schemas/decoderManifestSummaries'
            - description: ' A list of information about each decoder manifest. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListDecoderManifestsRequest:
      type: object
      title: ListDecoderManifestsRequest
      properties:
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of a vehicle model (model manifest) associated with the decoder manifest. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListFleetsResponse:
      type: object
      properties:
        fleetSummaries:
          allOf:
            - $ref: '#/components/schemas/fleetSummaries'
            - description: ' A list of information for each fleet. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListFleetsRequest:
      type: object
      title: ListFleetsRequest
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListFleetsForVehicleResponse:
      type: object
      properties:
        fleets:
          allOf:
            - $ref: '#/components/schemas/fleets'
            - description: ' A list of fleet IDs that the vehicle is associated with. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListFleetsForVehicleRequest:
      type: object
      required:
        - vehicleName
      title: ListFleetsForVehicleRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: ' The ID of the vehicle to retrieve information about. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListModelManifestNodesResponse:
      type: object
      properties:
        nodes:
          allOf:
            - $ref: '#/components/schemas/Nodes'
            - description: ' A list of information about nodes. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListModelManifestNodesRequest:
      type: object
      required:
        - name
      title: ListModelManifestNodesRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the vehicle model to list information about. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListModelManifestsResponse:
      type: object
      properties:
        summaries:
          allOf:
            - $ref: '#/components/schemas/modelManifestSummaries'
            - description: ' A list of information about vehicle models.'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListModelManifestsRequest:
      type: object
      title: ListModelManifestsRequest
      properties:
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of a signal catalog. If you specify a signal catalog, only the vehicle models associated with it are returned.'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListSignalCatalogNodesResponse:
      type: object
      properties:
        nodes:
          allOf:
            - $ref: '#/components/schemas/Nodes'
            - description: ' A list of information about nodes. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListSignalCatalogNodesRequest:
      type: object
      required:
        - name
      title: ListSignalCatalogNodesRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the signal catalog to list information about. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListSignalCatalogsResponse:
      type: object
      properties:
        summaries:
          allOf:
            - $ref: '#/components/schemas/signalCatalogSummaries'
            - description: ' A list of information about each signal catalog. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListSignalCatalogsRequest:
      type: object
      title: ListSignalCatalogsRequest
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListTagsForResourceResponse:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: The list of tags assigned to the resource.
    ListTagsForResourceRequest:
      type: object
      required:
        - ResourceARN
      title: ListTagsForResourceRequest
      properties:
        ResourceARN:
          allOf:
            - $ref: '#/components/schemas/AmazonResourceName'
            - description: The ARN of the resource.
    ListVehiclesResponse:
      type: object
      properties:
        vehicleSummaries:
          allOf:
            - $ref: '#/components/schemas/vehicleSummaries'
            - description: ' A list of vehicles and information about them. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListVehiclesRequest:
      type: object
      title: ListVehiclesRequest
      properties:
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of a vehicle model (model manifest). You can use this optional parameter to list only the vehicles created from a certain vehicle model. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/listVehiclesMaxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    ListVehiclesInFleetResponse:
      type: object
      properties:
        vehicles:
          allOf:
            - $ref: '#/components/schemas/vehicles'
            - description: ' A list of vehicles associated with the fleet. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: ' The token to retrieve the next set of results, or <code>null</code> if there are no more results. '
    ListVehiclesInFleetRequest:
      type: object
      required:
        - fleetId
      title: ListVehiclesInFleetRequest
      properties:
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of a fleet. '
        nextToken:
          allOf:
            - $ref: '#/components/schemas/nextToken'
            - description: '<p>A pagination token for the next set of results.</p> <p>If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next set of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value. </p>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/maxResults'
            - description: ' The maximum number of items to return, between 1 and 100, inclusive. '
    PutLoggingOptionsResponse:
      type: object
      properties: {}
    PutLoggingOptionsRequest:
      type: object
      required:
        - cloudWatchLogDelivery
      title: PutLoggingOptionsRequest
      properties:
        cloudWatchLogDelivery:
          allOf:
            - $ref: '#/components/schemas/CloudWatchLogDeliveryOptions'
            - description: Creates or updates the log delivery option to Amazon CloudWatch Logs.
    RegisterAccountResponse:
      type: object
      required:
        - registerAccountStatus
        - iamResources
        - creationTime
        - lastModificationTime
      properties:
        registerAccountStatus:
          allOf:
            - $ref: '#/components/schemas/RegistrationStatus'
            - description: ' The status of registering your Amazon Web Services account, IAM role, and Timestream resources. '
        timestreamResources:
          $ref: '#/components/schemas/TimestreamResources'
        iamResources:
          allOf:
            - $ref: '#/components/schemas/IamResources'
            - description: ' The registered IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream. '
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time the account was registered, in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: ' The time this registration was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time). '
    RegisterAccountRequest:
      type: object
      title: RegisterAccountRequest
      properties:
        timestreamResources:
          allOf:
            - $ref: '#/components/schemas/TimestreamResources'
            - deprecated: true
              description: Amazon Timestream metadata is now passed in the CreateCampaign API.
        iamResources:
          allOf:
            - $ref: '#/components/schemas/IamResources'
            - deprecated: true
              description: The IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream.iamResources is no longer used or needed as input
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - ResourceARN
        - Tags
      title: TagResourceRequest
      properties:
        ResourceARN:
          allOf:
            - $ref: '#/components/schemas/AmazonResourceName'
            - description: The ARN of the resource.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: The new or modified tags for the resource.
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - ResourceARN
        - TagKeys
      title: UntagResourceRequest
      properties:
        ResourceARN:
          allOf:
            - $ref: '#/components/schemas/AmazonResourceName'
            - description: The ARN of the resource.
        TagKeys:
          allOf:
            - $ref: '#/components/schemas/TagKeyList'
            - description: A list of the keys of the tags to be removed from the resource.
    UpdateCampaignResponse:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the campaign. '
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: The name of the updated campaign.
        status:
          allOf:
            - $ref: '#/components/schemas/CampaignStatus'
            - description: '<p>The state of a campaign. The status can be one of:</p> <ul> <li> <p> <code>CREATING</code> - Amazon Web Services IoT FleetWise is processing your request to create the campaign. </p> </li> <li> <p> <code>WAITING_FOR_APPROVAL</code> - After a campaign is created, it enters the <code>WAITING_FOR_APPROVAL</code> state. To allow Amazon Web Services IoT FleetWise to deploy the campaign to the target vehicle or fleet, use the API operation to approve the campaign. </p> </li> <li> <p> <code>RUNNING</code> - The campaign is active. </p> </li> <li> <p> <code>SUSPENDED</code> - The campaign is suspended. To resume the campaign, use the API operation. </p> </li> </ul>'
    UpdateCampaignRequest:
      type: object
      required:
        - name
        - action
      title: UpdateCampaignRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: ' The name of the campaign to update. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: The description of the campaign.
        dataExtraDimensions:
          allOf:
            - $ref: '#/components/schemas/DataExtraDimensionNodePathList'
            - description: '<p> A list of vehicle attributes to associate with a signal. </p> <p>Default: An empty array</p>'
        action:
          allOf:
            - $ref: '#/components/schemas/UpdateCampaignAction'
            - description: '<p> Specifies how to update a campaign. The action can be one of the following:</p> <ul> <li> <p> <code>APPROVE</code> - To approve delivering a data collection scheme to vehicles. </p> </li> <li> <p> <code>SUSPEND</code> - To suspend collecting signal data. The campaign is deleted from vehicles and all vehicles in the suspended campaign will stop sending data.</p> </li> <li> <p> <code>RESUME</code> - To reactivate the <code>SUSPEND</code> campaign. The campaign is redeployed to all vehicles and the vehicles will resume sending data.</p> </li> <li> <p> <code>UPDATE</code> - To update a campaign. </p> </li> </ul>'
    UpdateDecoderManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the updated decoder manifest. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the updated decoder manifest. '
    UpdateDecoderManifestRequest:
      type: object
      required:
        - name
      title: UpdateDecoderManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the decoder manifest to update.'
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the decoder manifest to update. '
        signalDecodersToAdd:
          allOf:
            - $ref: '#/components/schemas/SignalDecoders'
            - description: ' A list of information about decoding additional signals to add to the decoder manifest. '
        signalDecodersToUpdate:
          allOf:
            - $ref: '#/components/schemas/SignalDecoders'
            - description: ' A list of updated information about decoding signals to update in the decoder manifest. '
        signalDecodersToRemove:
          allOf:
            - $ref: '#/components/schemas/Fqns'
            - description: ' A list of signal decoders to remove from the decoder manifest. '
        networkInterfacesToAdd:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaces'
            - description: ' A list of information about the network interfaces to add to the decoder manifest. '
        networkInterfacesToUpdate:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaces'
            - description: ' A list of information about the network interfaces to update in the decoder manifest. '
        networkInterfacesToRemove:
          allOf:
            - $ref: '#/components/schemas/InterfaceIds'
            - description: ' A list of network interfaces to remove from the decoder manifest.'
        status:
          allOf:
            - $ref: '#/components/schemas/ManifestStatus'
            - description: ' The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can''t be edited. If the status is <code>DRAFT</code>, you can edit the decoder manifest. '
    UpdateFleetResponse:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: The ID of the updated fleet.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the updated fleet.
    UpdateFleetRequest:
      type: object
      required:
        - fleetId
      title: UpdateFleetRequest
      properties:
        fleetId:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: ' The ID of the fleet to update. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' An updated description of the fleet. '
    UpdateModelManifestResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the updated vehicle model. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The Amazon Resource Name (ARN) of the updated vehicle model. '
    UpdateModelManifestRequest:
      type: object
      required:
        - name
      title: UpdateModelManifestRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the vehicle model to update. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the vehicle model. '
        nodesToAdd:
          allOf:
            - $ref: '#/components/schemas/NodePaths'
            - description: ' A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to add to the vehicle model. '
        nodesToRemove:
          allOf:
            - $ref: '#/components/schemas/NodePaths'
            - description: ' A list of <code>fullyQualifiedName</code> of nodes, which are a general abstraction of signals, to remove from the vehicle model. '
        status:
          allOf:
            - $ref: '#/components/schemas/ManifestStatus'
            - description: ' The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can''t be edited. If the status is <code>DRAFT</code>, you can edit the vehicle model. '
    UpdateSignalCatalogResponse:
      type: object
      required:
        - name
        - arn
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the updated signal catalog. '
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: ' The ARN of the updated signal catalog. '
    UpdateSignalCatalogRequest:
      type: object
      required:
        - name
      title: UpdateSignalCatalogRequest
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/resourceName'
            - description: ' The name of the signal catalog to update. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: ' A brief description of the signal catalog to update.'
        nodesToAdd:
          allOf:
            - $ref: '#/components/schemas/Nodes'
            - description: ' A list of information about nodes to add to the signal catalog. '
        nodesToUpdate:
          allOf:
            - $ref: '#/components/schemas/Nodes'
            - description: ' A list of information about nodes to update in the signal catalog. '
        nodesToRemove:
          allOf:
            - $ref: '#/components/schemas/NodePaths'
            - description: ' A list of <code>fullyQualifiedName</code> of nodes to remove from the signal catalog. '
    UpdateVehicleResponse:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The ID of the updated vehicle.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the updated vehicle.
    UpdateVehicleRequest:
      type: object
      required:
        - vehicleName
      title: UpdateVehicleRequest
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the vehicle to update.
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of a vehicle model (model manifest) associated with the vehicle.
        decoderManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the decoder manifest associated with this vehicle.
        attributes:
          allOf:
            - $ref: '#/components/schemas/attributesMap'
            - description: '<p>Static information about a vehicle in a key-value pair. For example:</p> <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>'
        attributeUpdateMode:
          allOf:
            - $ref: '#/components/schemas/UpdateMode'
            - description: <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p> <p>This is required if attributes are present in the input.</p>
    string:
      type: string
    NodeDataType:
      type: string
      enum:
        - INT8
        - UINT8
        - INT16
        - UINT16
        - INT32
        - UINT32
        - INT64
        - UINT64
        - BOOLEAN
        - FLOAT
        - DOUBLE
        - STRING
        - UNIX_TIMESTAMP
        - INT8_ARRAY
        - UINT8_ARRAY
        - INT16_ARRAY
        - UINT16_ARRAY
        - INT32_ARRAY
        - UINT32_ARRAY
        - INT64_ARRAY
        - UINT64_ARRAY
        - BOOLEAN_ARRAY
        - FLOAT_ARRAY
        - DOUBLE_ARRAY
        - STRING_ARRAY
        - UNIX_TIMESTAMP_ARRAY
        - UNKNOWN
    description:
      type: string
      pattern: '[^\u0000-\u001F\u007F]+'
      minLength: 1
      maxLength: 2048
    listOfStrings:
      type: array
      items:
        $ref: '#/components/schemas/string'
    double:
      type: number
      format: double
    message:
      type: string
      pattern: '[^\u0000-\u001F\u007F]+'
      minLength: 1
      maxLength: 2048
    Actuator:
      type: object
      required:
        - fullyQualifiedName
        - dataType
      properties:
        fullyQualifiedName:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: 'The fully qualified name of the actuator. For example, the fully qualified name of an actuator might be <code>Vehicle.Front.Left.Door.Lock</code>.'
        dataType:
          allOf:
            - $ref: '#/components/schemas/NodeDataType'
            - description: 'The specified data type of the actuator. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the actuator.
        unit:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The scientific unit for the actuator.
        allowedValues:
          allOf:
            - $ref: '#/components/schemas/listOfStrings'
            - description: A list of possible values an actuator can take.
        min:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: The specified possible minimum value of an actuator.
        max:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: The specified possible maximum value of an actuator.
        assignedValue:
          allOf:
            - $ref: '#/components/schemas/string'
            - deprecated: true
              description: A specified value for the actuator.assignedValue is no longer in use
        deprecationMessage:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: The deprecation message for the node or the branch that was moved or deleted.
        comment:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A comment in addition to the description.
      description: '<p>A signal that represents a vehicle device such as the engine, heater, and door locks. Data from an actuator reports the state of a certain vehicle device.</p> <note> <p> Updating actuator data can change the state of a device. For example, you can turn on or off the heater by updating its actuator data.</p> </note>'
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    vehicleName:
      type: string
      pattern: '[a-zA-Z\d\-_:]+'
      minLength: 1
      maxLength: 100
    fleetId:
      type: string
      pattern: '[a-zA-Z0-9:_-]+'
      minLength: 1
      maxLength: 100
    Attribute:
      type: object
      required:
        - fullyQualifiedName
        - dataType
      properties:
        fullyQualifiedName:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: 'The fully qualified name of the attribute. For example, the fully qualified name of an attribute might be <code>Vehicle.Body.Engine.Type</code>.'
        dataType:
          allOf:
            - $ref: '#/components/schemas/NodeDataType'
            - description: 'The specified data type of the attribute. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the attribute.
        unit:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The scientific unit for the attribute.
        allowedValues:
          allOf:
            - $ref: '#/components/schemas/listOfStrings'
            - description: A list of possible values an attribute can be assigned.
        min:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: The specified possible minimum value of the attribute.
        max:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: The specified possible maximum value of the attribute.
        assignedValue:
          allOf:
            - $ref: '#/components/schemas/string'
            - deprecated: true
              description: A specified value for the attribute.assignedValue is no longer in use
        defaultValue:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The default value of the attribute.
        deprecationMessage:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: The deprecation message for the node or the branch that was moved or deleted.
        comment:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A comment in addition to the description.
      description: 'A signal that represents static information about the vehicle, such as engine type or manufacturing date.'
    createVehicleRequestItems:
      type: array
      items:
        $ref: '#/components/schemas/CreateVehicleRequestItem'
      minItems: 1
    createVehicleResponses:
      type: array
      items:
        $ref: '#/components/schemas/CreateVehicleResponseItem'
    createVehicleErrors:
      type: array
      items:
        $ref: '#/components/schemas/CreateVehicleError'
    updateVehicleRequestItems:
      type: array
      items:
        $ref: '#/components/schemas/UpdateVehicleRequestItem'
      minItems: 1
    updateVehicleResponseItems:
      type: array
      items:
        $ref: '#/components/schemas/UpdateVehicleResponseItem'
    updateVehicleErrors:
      type: array
      items:
        $ref: '#/components/schemas/UpdateVehicleError'
    Branch:
      type: object
      required:
        - fullyQualifiedName
      properties:
        fullyQualifiedName:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: 'The fully qualified name of the branch. For example, the fully qualified name of a branch might be <code>Vehicle.Body.Engine</code>.'
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the branch.
        deprecationMessage:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: The deprecation message for the node or the branch that was moved or deleted.
        comment:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A comment in addition to the description.
      description: A group of signals that are defined in a hierarchical structure.
    CampaignStatus:
      type: string
      enum:
        - CREATING
        - WAITING_FOR_APPROVAL
        - RUNNING
        - SUSPENDED
    arn:
      type: string
    campaignName:
      type: string
      pattern: '[a-zA-Z\d\-_:]+'
      minLength: 1
      maxLength: 100
    timestamp:
      type: string
      format: date-time
    CampaignSummary:
      type: object
      required:
        - creationTime
        - lastModificationTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of a campaign.
        name:
          allOf:
            - $ref: '#/components/schemas/campaignName'
            - description: The name of a campaign.
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: The description of the campaign.
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the signal catalog associated with the campaign.
        targetArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of a vehicle or fleet to which the campaign is deployed.
        status:
          allOf:
            - $ref: '#/components/schemas/CampaignStatus'
            - description: '<p>The state of a campaign. The status can be one of the following:</p> <ul> <li> <p> <code>CREATING</code> - Amazon Web Services IoT FleetWise is processing your request to create the campaign.</p> </li> <li> <p> <code>WAITING_FOR_APPROVAL</code> - After a campaign is created, it enters the <code>WAITING_FOR_APPROVAL</code> state. To allow Amazon Web Services IoT FleetWise to deploy the campaign to the target vehicle or fleet, use the API operation to approve the campaign. </p> </li> <li> <p> <code>RUNNING</code> - The campaign is active. </p> </li> <li> <p> <code>SUSPENDED</code> - The campaign is suspended. To resume the campaign, use the API operation. </p> </li> </ul>'
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The time the campaign was created.
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The last time the campaign was modified.
      description: <p>Information about a campaign. </p> <p>You can use the API operation to return this information about multiple created campaigns.</p>
    InterfaceId:
      type: string
      minLength: 1
      maxLength: 50
    NetworkFilesList:
      type: array
      items:
        $ref: '#/components/schemas/NetworkFileBlob'
      minItems: 1
      maxItems: 5
    ModelSignalsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string'
    CanDbcDefinition:
      type: object
      required:
        - networkInterface
        - canDbcFiles
      properties:
        networkInterface:
          allOf:
            - $ref: '#/components/schemas/InterfaceId'
            - description: Contains information about a network interface.
        canDbcFiles:
          allOf:
            - $ref: '#/components/schemas/NetworkFilesList'
            - description: A list of DBC files. You can upload only one DBC file for each network interface and specify up to five (inclusive) files in the list.
        signalsMap:
          allOf:
            - $ref: '#/components/schemas/ModelSignalsMap'
            - description: Pairs every signal specified in your vehicle model with a signal decoder.
      description: Configurations used to create a decoder manifest.
    CanInterfaceName:
      type: string
      minLength: 1
      maxLength: 100
    ProtocolName:
      type: string
      minLength: 1
      maxLength: 50
    ProtocolVersion:
      type: string
      minLength: 1
      maxLength: 50
    CanInterface:
      type: object
      required:
        - name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/CanInterfaceName'
            - description: The unique name of the interface.
        protocolName:
          allOf:
            - $ref: '#/components/schemas/ProtocolName'
            - description: The name of the communication protocol for the interface.
        protocolVersion:
          allOf:
            - $ref: '#/components/schemas/ProtocolVersion'
            - description: The version of the communication protocol for the interface.
      description: A single controller area network (CAN) device interface.
    nonNegativeInteger:
      type: integer
      minimum: 0
    boolean:
      type: boolean
    CanSignalName:
      type: string
      minLength: 1
      maxLength: 100
    CanSignal:
      type: object
      required:
        - messageId
        - isBigEndian
        - isSigned
        - startBit
        - offset
        - factor
        - length
      properties:
        messageId:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The ID of the message.
        isBigEndian:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: Whether the byte ordering of a CAN message is big-endian.
        isSigned:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: Whether the message data is specified as a signed value.
        startBit:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: '<p>Indicates the beginning of the CAN signal. This should always be the least significant bit (LSB).</p> <p>This value might be different from the value in a DBC file. For little endian signals, <code>startBit</code> is the same value as in the DBC file. For big endian signals in a DBC file, the start bit is the most significant bit (MSB). You will have to calculate the LSB instead and pass it as the <code>startBit</code>.</p>'
        offset:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: 'The offset used to calculate the signal value. Combined with factor, the calculation is <code>value = raw_value * factor + offset</code>.'
        factor:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: A multiplier used to decode the CAN message.
        length:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: How many bytes of data are in the message.
        name:
          allOf:
            - $ref: '#/components/schemas/CanSignalName'
            - description: The name of the signal.
      description: Information about a single controller area network (CAN) signal and the messages it receives and transmits.
    LogType:
      type: string
      enum:
        - 'OFF'
        - ERROR
    CloudWatchLogGroupName:
      type: string
      pattern: '[\.\-_\/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    CloudWatchLogDeliveryOptions:
      type: object
      required:
        - logType
      properties:
        logType:
          allOf:
            - $ref: '#/components/schemas/LogType'
            - description: The type of log to send data to Amazon CloudWatch Logs.
        logGroupName:
          allOf:
            - $ref: '#/components/schemas/CloudWatchLogGroupName'
            - description: The Amazon CloudWatch Logs group the operation sends data to.
      description: The log delivery option to send data to Amazon CloudWatch Logs.
    TimeBasedCollectionScheme:
      type: object
      required:
        - periodMs
      properties:
        periodMs:
          allOf:
            - $ref: '#/components/schemas/collectionPeriodMs'
            - description: 'The time period (in milliseconds) to decide how often to collect data. For example, if the time period is <code>60000</code>, the Edge Agent software collects data once every minute.'
      description: Information about a collection scheme that uses a time period to decide how often to collect data.
    ConditionBasedCollectionScheme:
      type: object
      required:
        - expression
      properties:
        expression:
          allOf:
            - $ref: '#/components/schemas/eventExpression'
            - description: 'The logical expression used to recognize what data to collect. For example, <code>$variable.Vehicle.OutsideAirTemperature &gt;= 105.0</code>.'
        minimumTriggerIntervalMs:
          allOf:
            - $ref: '#/components/schemas/uint32'
            - description: '<p>The minimum duration of time between two triggering events to collect data, in milliseconds.</p> <note> <p>If a signal changes often, you might want to collect data at a slower rate.</p> </note>'
        triggerMode:
          allOf:
            - $ref: '#/components/schemas/TriggerMode'
            - description: 'Whether to collect data for all triggering events (<code>ALWAYS</code>). Specify (<code>RISING_EDGE</code>), or specify only when the condition first evaluates to false. For example, triggering on "AirbagDeployed"; Users aren''t interested on triggering when the airbag is already exploded; they only care about the change from not deployed =&gt; deployed.'
        conditionLanguageVersion:
          allOf:
            - $ref: '#/components/schemas/languageVersion'
            - description: Specifies the version of the conditional expression language.
      description: Information about a collection scheme that uses a simple logical expression to recognize what data to collect.
    CollectionScheme:
      type: object
      properties:
        timeBasedCollectionScheme:
          allOf:
            - $ref: '#/components/schemas/TimeBasedCollectionScheme'
            - description: Information about a collection scheme that uses a time period to decide how often to collect data.
        conditionBasedCollectionScheme:
          allOf:
            - $ref: '#/components/schemas/ConditionBasedCollectionScheme'
            - description: Information about a collection scheme that uses a simple logical expression to recognize what data to collect.
      description: Specifies what data to collect and how often or when to collect it.
    Compression:
      type: string
      enum:
        - 'OFF'
        - SNAPPY
    eventExpression:
      type: string
      minLength: 1
      maxLength: 2048
    uint32:
      type: integer
      minimum: 0
      maximum: 4294967295
    TriggerMode:
      type: string
      enum:
        - ALWAYS
        - RISING_EDGE
    languageVersion:
      type: integer
      minimum: 1
    DiagnosticsMode:
      type: string
      enum:
        - 'OFF'
        - SEND_ACTIVE_DTCS
    SpoolingMode:
      type: string
      enum:
        - 'OFF'
        - TO_DISK
    priority:
      type: integer
      minimum: 0
    SignalInformationList:
      type: array
      items:
        $ref: '#/components/schemas/SignalInformation'
      minItems: 0
      maxItems: 1000
    DataExtraDimensionNodePathList:
      type: array
      items:
        $ref: '#/components/schemas/NodePath'
      minItems: 0
      maxItems: 5
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 0
      maxItems: 50
    DataDestinationConfigs:
      type: array
      items:
        $ref: '#/components/schemas/DataDestinationConfig'
      minItems: 1
      maxItems: 1
    resourceName:
      type: string
      pattern: '[a-zA-Z\d\-_:]+'
      minLength: 1
      maxLength: 100
    SignalDecoders:
      type: array
      items:
        $ref: '#/components/schemas/SignalDecoder'
      minItems: 1
      maxItems: 500
    NetworkInterfaces:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
      minItems: 1
      maxItems: 500
    Nodes:
      type: array
      items:
        $ref: '#/components/schemas/Node'
      minItems: 0
      maxItems: 500
    CreateVehicleError:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The ID of the vehicle with the error.
        code:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: An HTTP error code.
        message:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: A description of the HTTP error.
      description: An HTTP error resulting from creating a vehicle.
    attributesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/attributeValue'
    VehicleAssociationBehavior:
      type: string
      enum:
        - CreateIotThing
        - ValidateIotThingExists
    CreateVehicleRequestItem:
      type: object
      required:
        - vehicleName
        - modelManifestArn
        - decoderManifestArn
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the vehicle to create.
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the vehicle model (model manifest) to create the vehicle from.
        decoderManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: 'The Amazon Resource Name (ARN) of a decoder manifest associated with the vehicle to create. '
        attributes:
          allOf:
            - $ref: '#/components/schemas/attributesMap'
            - description: 'Static information about a vehicle in a key-value pair. For example: <code>"engine Type"</code> : <code>"v6"</code> '
        associationBehavior:
          allOf:
            - $ref: '#/components/schemas/VehicleAssociationBehavior'
            - description: 'An option to create a new Amazon Web Services IoT thing when creating a vehicle, or to validate an existing thing as a vehicle.'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: Metadata which can be used to manage the vehicle.
      description: Information about the vehicle to create.
    CreateVehicleResponseItem:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the vehicle to create.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the created vehicle.
        thingArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of a created or validated Amazon Web Services IoT thing.
      description: Information about a created vehicle.
    S3Config:
      type: object
      required:
        - bucketArn
      properties:
        bucketArn:
          allOf:
            - $ref: '#/components/schemas/S3BucketArn'
            - description: The Amazon Resource Name (ARN) of the Amazon S3 bucket.
        dataFormat:
          allOf:
            - $ref: '#/components/schemas/DataFormat'
            - description: <p>Specify the format that files are saved in the Amazon S3 bucket. You can save files in an Apache Parquet or JSON format.</p> <ul> <li> <p>Parquet - Store data in a columnar storage file format. Parquet is optimal for fast data retrieval and can reduce costs. This option is selected by default.</p> </li> <li> <p>JSON - Store data in a standard text-based JSON file format.</p> </li> </ul>
        storageCompressionFormat:
          allOf:
            - $ref: '#/components/schemas/StorageCompressionFormat'
            - description: 'By default, stored data is compressed as a .gzip file. Compressed files have a reduced file size, which can optimize the cost of data storage.'
        prefix:
          allOf:
            - $ref: '#/components/schemas/Prefix'
            - description: '<p>(Optional) Enter an S3 bucket prefix. The prefix is the string of characters after the bucket name and before the object name. You can use the prefix to organize data stored in Amazon S3 buckets. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html">Organizing objects using prefixes</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p> <p>By default, Amazon Web Services IoT FleetWise sets the prefix <code>processed-data/year=YY/month=MM/date=DD/hour=HH/</code> (in UTC) to data it delivers to Amazon S3. You can enter a prefix to append it to this default prefix. For example, if you enter the prefix <code>vehicles</code>, the prefix will be <code>vehicles/processed-data/year=YY/month=MM/date=DD/hour=HH/</code>.</p>'
      description: 'The Amazon S3 bucket where the Amazon Web Services IoT FleetWise campaign sends data. Amazon S3 is an object storage service that stores data as objects within buckets. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-buckets-s3.html">Creating, configuring, and working with Amazon S3 buckets</a> in the <i>Amazon Simple Storage Service User Guide</i>.'
    TimestreamConfig:
      type: object
      required:
        - timestreamTableArn
        - executionRoleArn
      properties:
        timestreamTableArn:
          allOf:
            - $ref: '#/components/schemas/TimestreamTableArn'
            - description: The Amazon Resource Name (ARN) of the Amazon Timestream table.
        executionRoleArn:
          allOf:
            - $ref: '#/components/schemas/IAMRoleArn'
            - description: The Amazon Resource Name (ARN) of the task execution role that grants Amazon Web Services IoT FleetWise permission to deliver data to the Amazon Timestream table.
      description: 'The Amazon Timestream table where the Amazon Web Services IoT FleetWise campaign sends data. Timestream stores and organizes data to optimize query processing time and to reduce storage costs. For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/data-modeling.html">Data modeling</a> in the <i>Amazon Timestream Developer Guide</i>.'
    DataDestinationConfig:
      type: object
      properties:
        s3Config:
          allOf:
            - $ref: '#/components/schemas/S3Config'
            - description: The Amazon S3 bucket where the Amazon Web Services IoT FleetWise campaign sends data.
        timestreamConfig:
          allOf:
            - $ref: '#/components/schemas/TimestreamConfig'
            - description: The Amazon Timestream table where the campaign sends data.
      description: The destination where the Amazon Web Services IoT FleetWise campaign sends data. You can send data to be stored in Amazon S3 or Amazon Timestream.
    NodePath:
      type: string
      pattern: '[a-zA-Z0-9_.]+'
      minLength: 1
      maxLength: 150
    DataFormat:
      type: string
      enum:
        - JSON
        - PARQUET
    ManifestStatus:
      type: string
      enum:
        - ACTIVE
        - DRAFT
    DecoderManifestSummary:
      type: object
      required:
        - creationTime
        - lastModificationTime
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The name of the decoder manifest.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: 'The ARN of a vehicle model (model manifest) associated with the decoder manifest. '
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of a vehicle model (model manifest) associated with the decoder manifest.
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the decoder manifest.
        status:
          allOf:
            - $ref: '#/components/schemas/ManifestStatus'
            - description: 'The state of the decoder manifest. If the status is <code>ACTIVE</code>, the decoder manifest can''t be edited. If the status is marked <code>DRAFT</code>, you can edit the decoder manifest.'
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the decoder manifest was created in seconds since epoch (January 1, 1970 at midnight UTC time).'
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the decoder manifest was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).'
      description: Information about a created decoder manifest. You can use the API operation to return this information about multiple decoder manifests.
    FleetSummary:
      type: object
      required:
        - id
        - arn
        - signalCatalogArn
        - creationTime
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/fleetId'
            - description: The unique ID of the fleet.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the fleet.
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the fleet.
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the signal catalog associated with the fleet.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the fleet was created, in seconds since epoch (January 1, 1970 at midnight UTC time).'
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the fleet was last updated in seconds since epoch (January 1, 1970 at midnight UTC time).'
      description: <p>Information about a fleet.</p> <p>You can use the API operation to return this information about multiple fleets.</p>
    String:
      type: string
    FormattedVss:
      type: object
      properties:
        vssJson:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: Provides the VSS in JSON format.
      description: ' <a href="https://www.w3.org/auto/wg/wiki/Vehicle_Signal_Specification_(VSS)/Vehicle_Data_Spec">Vehicle Signal Specification (VSS)</a> is a precise language used to describe and model signals in vehicle networks. The JSON file collects signal specificiations in a VSS format.'
    FullyQualifiedName:
      type: string
      minLength: 1
      maxLength: 150
    Fqns:
      type: array
      items:
        $ref: '#/components/schemas/FullyQualifiedName'
      minItems: 1
      maxItems: 500
    customerAccountId:
      type: string
    RegistrationStatus:
      type: string
      enum:
        - REGISTRATION_PENDING
        - REGISTRATION_SUCCESS
        - REGISTRATION_FAILURE
    TimestreamRegistrationResponse:
      type: object
      required:
        - timestreamDatabaseName
        - timestreamTableName
        - registrationStatus
      properties:
        timestreamDatabaseName:
          allOf:
            - $ref: '#/components/schemas/TimestreamDatabaseName'
            - description: The name of the Timestream database.
        timestreamTableName:
          allOf:
            - $ref: '#/components/schemas/TimestreamTableName'
            - description: The name of the Timestream database table.
        timestreamDatabaseArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the Timestream database.
        timestreamTableArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the Timestream database table.
        registrationStatus:
          allOf:
            - $ref: '#/components/schemas/RegistrationStatus'
            - description: 'The status of registering your Amazon Timestream resources. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.'
        errorMessage:
          allOf:
            - $ref: '#/components/schemas/errorMessage'
            - description: A message associated with a registration error.
      description: 'Information about the registered Amazon Timestream resources or errors, if any.'
    IamRegistrationResponse:
      type: object
      required:
        - roleArn
        - registrationStatus
      properties:
        roleArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the IAM role to register.
        registrationStatus:
          allOf:
            - $ref: '#/components/schemas/RegistrationStatus'
            - description: 'The status of registering your IAM resource. The status can be one of <code>REGISTRATION_SUCCESS</code>, <code>REGISTRATION_PENDING</code>, <code>REGISTRATION_FAILURE</code>.'
        errorMessage:
          allOf:
            - $ref: '#/components/schemas/errorMessage'
            - description: A message associated with a registration error.
      description: Information about registering an Identity and Access Management (IAM) resource so Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to Amazon Timestream.
    NodeCounts:
      type: object
      properties:
        totalNodes:
          allOf:
            - $ref: '#/components/schemas/number'
            - description: The total number of nodes in a vehicle network.
        totalBranches:
          allOf:
            - $ref: '#/components/schemas/number'
            - description: The total number of nodes in a vehicle network that represent branches.
        totalSensors:
          allOf:
            - $ref: '#/components/schemas/number'
            - description: The total number of nodes in a vehicle network that represent sensors.
        totalAttributes:
          allOf:
            - $ref: '#/components/schemas/number'
            - description: The total number of nodes in a vehicle network that represent attributes.
        totalActuators:
          allOf:
            - $ref: '#/components/schemas/number'
            - description: The total number of nodes in a vehicle network that represent actuators.
      description: Information about the number of nodes and node types in a vehicle network.
    nextToken:
      type: string
      minLength: 1
      maxLength: 4096
    maxResults:
      type: integer
      minimum: 1
      maximum: 100
    VehicleStatusList:
      type: array
      items:
        $ref: '#/components/schemas/VehicleStatus'
    IAMRoleArn:
      type: string
      pattern: 'arn:(aws[a-zA-Z0-9-]*):iam::(\d{12})?:(role((\u002F)|(\u002F[\u0021-\u007F]+\u002F))[\w+=,.@-]+)'
      minLength: 20
      maxLength: 2048
    errorMessage:
      type: string
    IamResources:
      type: object
      required:
        - roleArn
      properties:
        roleArn:
          allOf:
            - $ref: '#/components/schemas/IAMRoleArn'
            - description: 'The Amazon Resource Name (ARN) of the IAM resource that allows Amazon Web Services IoT FleetWise to send data to Amazon Timestream. For example, <code>arn:aws:iam::123456789012:role/SERVICE-ROLE-ARN</code>. '
      description: '<p>The IAM resource that enables Amazon Web Services IoT FleetWise edge agent software to send data to Amazon Timestream. </p> <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>Identity and Access Management User Guide</i>.</p>'
    NetworkFileDefinitions:
      type: array
      items:
        $ref: '#/components/schemas/NetworkFileDefinition'
    InterfaceIds:
      type: array
      items:
        $ref: '#/components/schemas/InterfaceId'
      minItems: 1
      maxItems: 500
    status:
      type: string
    campaignSummaries:
      type: array
      items:
        $ref: '#/components/schemas/CampaignSummary'
    decoderManifestSummaries:
      type: array
      items:
        $ref: '#/components/schemas/DecoderManifestSummary'
    fleets:
      type: array
      items:
        $ref: '#/components/schemas/fleetId'
    fleetSummaries:
      type: array
      items:
        $ref: '#/components/schemas/FleetSummary'
    modelManifestSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ModelManifestSummary'
    signalCatalogSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SignalCatalogSummary'
    vehicles:
      type: array
      items:
        $ref: '#/components/schemas/vehicleName'
    listVehiclesMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    vehicleSummaries:
      type: array
      items:
        $ref: '#/components/schemas/VehicleSummary'
    ModelManifestSummary:
      type: object
      required:
        - creationTime
        - lastModificationTime
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The name of the vehicle model.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the vehicle model.
        signalCatalogArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the signal catalog associated with the vehicle model.
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of the vehicle model.
        status:
          allOf:
            - $ref: '#/components/schemas/ManifestStatus'
            - description: 'The state of the vehicle model. If the status is <code>ACTIVE</code>, the vehicle model can''t be edited. If the status is <code>DRAFT</code>, you can edit the vehicle model.'
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the vehicle model was created, in seconds since epoch (January 1, 1970 at midnight UTC time).'
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the vehicle model was last updated, in seconds since epoch (January 1, 1970 at midnight UTC time).'
      description: Information about a vehicle model (model manifest). You can use the API operation to return this information about multiple vehicle models.
    NetworkFileBlob:
      type: string
    NetworkFileDefinition:
      type: object
      properties:
        canDbc:
          allOf:
            - $ref: '#/components/schemas/CanDbcDefinition'
            - description: 'Information, including CAN DBC files, about the configurations used to create a decoder manifest.'
      description: Specifications for defining a vehicle network.
    NetworkInterfaceType:
      type: string
      enum:
        - CAN_INTERFACE
        - OBD_INTERFACE
    ObdInterface:
      type: object
      required:
        - name
        - requestMessageId
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/ObdInterfaceName'
            - description: The name of the interface.
        requestMessageId:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The ID of the message requesting vehicle data.
        obdStandard:
          allOf:
            - $ref: '#/components/schemas/ObdStandard'
            - description: The standard OBD II PID.
        pidRequestIntervalSeconds:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The maximum number message requests per second.
        dtcRequestIntervalSeconds:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The maximum number message requests per diagnostic trouble code per second.
        useExtendedIds:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: Whether to use extended IDs in the message.
        hasTransmissionEcu:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: Whether the vehicle has a transmission control module (TCM).
      description: A network interface that specifies the On-board diagnostic (OBD) II network protocol.
    NetworkInterface:
      type: object
      required:
        - interfaceId
        - type
      properties:
        interfaceId:
          allOf:
            - $ref: '#/components/schemas/InterfaceId'
            - description: The ID of the network interface.
        type:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaceType'
            - description: 'The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.'
        canInterface:
          allOf:
            - $ref: '#/components/schemas/CanInterface'
            - description: Information about a network interface specified by the Controller Area Network (CAN) protocol.
        obdInterface:
          allOf:
            - $ref: '#/components/schemas/ObdInterface'
            - description: Information about a network interface specified by the On-board diagnostic (OBD) II protocol.
      description: '<p>Represents a node and its specifications in an in-vehicle communication network. All signal decoders must be associated with a network node. </p> <p> To return this information about all the network interfaces specified in a decoder manifest, use the API operation.</p>'
    Sensor:
      type: object
      required:
        - fullyQualifiedName
        - dataType
      properties:
        fullyQualifiedName:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: 'The fully qualified name of the sensor. For example, the fully qualified name of a sensor might be <code>Vehicle.Body.Engine.Battery</code>.'
        dataType:
          allOf:
            - $ref: '#/components/schemas/NodeDataType'
            - description: 'The specified data type of the sensor. '
        description:
          allOf:
            - $ref: '#/components/schemas/description'
            - description: A brief description of a sensor.
        unit:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The scientific unit of measurement for data collected by the sensor.
        allowedValues:
          allOf:
            - $ref: '#/components/schemas/listOfStrings'
            - description: A list of possible values a sensor can take.
        min:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: The specified possible minimum value of the sensor.
        max:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: The specified possible maximum value of the sensor.
        deprecationMessage:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: The deprecation message for the node or the branch that was moved or deleted.
        comment:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A comment in addition to the description.
      description: '<p>An input component that reports the environmental condition of a vehicle.</p> <note> <p>You can collect data about fluid levels, temperatures, vibrations, or battery voltage from sensors.</p> </note>'
    Node:
      type: object
      properties:
        branch:
          allOf:
            - $ref: '#/components/schemas/Branch'
            - description: <p>Information about a node specified as a branch.</p> <note> <p>A group of signals that are defined in a hierarchical structure.</p> </note>
        sensor:
          $ref: '#/components/schemas/Sensor'
        actuator:
          allOf:
            - $ref: '#/components/schemas/Actuator'
            - description: <p>Information about a node specified as an actuator.</p> <note> <p>An actuator is a digital representation of a vehicle device.</p> </note>
        attribute:
          allOf:
            - $ref: '#/components/schemas/Attribute'
            - description: <p>Information about a node specified as an attribute.</p> <note> <p>An attribute represents static information about a vehicle.</p> </note>
      description: 'A general abstraction of a signal. A node can be specified as an actuator, attribute, branch, or sensor.'
    number:
      type: integer
    NodePaths:
      type: array
      items:
        $ref: '#/components/schemas/NodePath'
      minItems: 1
      maxItems: 500
    ObdBitmaskLength:
      type: integer
      minimum: 1
      maximum: 8
    ObdByteLength:
      type: integer
      minimum: 1
      maximum: 8
    ObdInterfaceName:
      type: string
      minLength: 1
      maxLength: 100
    ObdStandard:
      type: string
      minLength: 1
      maxLength: 50
    positiveInteger:
      type: integer
      minimum: 1
    ObdSignal:
      type: object
      required:
        - pidResponseLength
        - serviceMode
        - pid
        - scaling
        - offset
        - startByte
        - byteLength
      properties:
        pidResponseLength:
          allOf:
            - $ref: '#/components/schemas/positiveInteger'
            - description: The length of the requested data.
        serviceMode:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The mode of operation (diagnostic service) in a message.
        pid:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The diagnostic code used to request data from a vehicle for this signal.
        scaling:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: A multiplier used to decode the message.
        offset:
          allOf:
            - $ref: '#/components/schemas/double'
            - description: 'The offset used to calculate the signal value. Combined with scaling, the calculation is <code>value = raw_value * scaling + offset</code>.'
        startByte:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: Indicates the beginning of the message.
        byteLength:
          allOf:
            - $ref: '#/components/schemas/ObdByteLength'
            - description: The length of a message.
        bitRightShift:
          allOf:
            - $ref: '#/components/schemas/nonNegativeInteger'
            - description: The number of positions to shift bits in the message.
        bitMaskLength:
          allOf:
            - $ref: '#/components/schemas/ObdBitmaskLength'
            - description: The number of bits to mask in a message.
      description: Information about signal messages using the on-board diagnostics (OBD) II protocol in a vehicle.
    Prefix:
      type: string
      pattern: '[a-zA-Z0-9-_:./!*''()]+'
      minLength: 1
      maxLength: 512
    TimestreamResources:
      type: object
      required:
        - timestreamDatabaseName
        - timestreamTableName
      properties:
        timestreamDatabaseName:
          allOf:
            - $ref: '#/components/schemas/TimestreamDatabaseName'
            - description: The name of the registered Amazon Timestream database.
        timestreamTableName:
          allOf:
            - $ref: '#/components/schemas/TimestreamTableName'
            - description: The name of the registered Amazon Timestream database table.
      description: The registered Amazon Timestream resources that Amazon Web Services IoT FleetWise edge agent software can transfer your vehicle data to.
    S3BucketArn:
      type: string
      pattern: 'arn:(aws[a-zA-Z0-9-]*):s3:::.+'
      minLength: 16
      maxLength: 100
    StorageCompressionFormat:
      type: string
      enum:
        - NONE
        - GZIP
    SignalCatalogSummary:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The name of the signal catalog.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the signal catalog.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the signal catalog was created in seconds since epoch (January 1, 1970 at midnight UTC time). '
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the signal catalog was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). '
      description: 'Information about a collection of standardized signals, which can be attributes, branches, sensors, or actuators.'
    SignalDecoderType:
      type: string
      enum:
        - CAN_SIGNAL
        - OBD_SIGNAL
    SignalDecoder:
      type: object
      required:
        - fullyQualifiedName
        - type
        - interfaceId
      properties:
        fullyQualifiedName:
          allOf:
            - $ref: '#/components/schemas/FullyQualifiedName'
            - description: The fully qualified name of a signal decoder as defined in a vehicle model.
        type:
          allOf:
            - $ref: '#/components/schemas/SignalDecoderType'
            - description: 'The network protocol for the vehicle. For example, <code>CAN_SIGNAL</code> specifies a protocol that defines how data is communicated between electronic control units (ECUs). <code>OBD_SIGNAL</code> specifies a protocol that defines how self-diagnostic data is communicated between ECUs.'
        interfaceId:
          allOf:
            - $ref: '#/components/schemas/InterfaceId'
            - description: The ID of a network interface that specifies what network protocol a vehicle follows.
        canSignal:
          allOf:
            - $ref: '#/components/schemas/CanSignal'
            - description: Information about signal decoder using the Controller Area Network (CAN) protocol.
        obdSignal:
          allOf:
            - $ref: '#/components/schemas/ObdSignal'
            - description: Information about signal decoder using the On-board diagnostic (OBD) II protocol.
      description: Information about a signal decoder.
    wildcardSignalName:
      type: string
      pattern: '[\w|*|-]+(\.[\w|*|-]+)*'
      minLength: 1
      maxLength: 150
    maxSampleCount:
      type: integer
      minimum: 1
      maximum: 4294967295
    SignalInformation:
      type: object
      required:
        - name
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/wildcardSignalName'
            - description: The name of the signal.
        maxSampleCount:
          allOf:
            - $ref: '#/components/schemas/maxSampleCount'
            - description: The maximum number of samples to collect.
        minimumSamplingIntervalMs:
          allOf:
            - $ref: '#/components/schemas/uint32'
            - description: '<p>The minimum duration of time (in milliseconds) between two triggering events to collect data.</p> <note> <p>If a signal changes often, you might want to collect data at a slower rate.</p> </note>'
      description: Information about a signal.
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - Key
        - Value
      properties:
        Key:
          allOf:
            - $ref: '#/components/schemas/TagKey'
            - description: The tag's key.
        Value:
          allOf:
            - $ref: '#/components/schemas/TagValue'
            - description: The tag's value.
      description: A set of key/value pairs that are used to manage the resource.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 200
    collectionPeriodMs:
      type: integer
      minimum: 10000
      maximum: 60000
    TimestreamTableArn:
      type: string
      pattern: 'arn:(aws[a-zA-Z0-9-]*):timestream:[a-zA-Z0-9-]+:[0-9]{12}:database/[a-zA-Z0-9_.-]+/table/[a-zA-Z0-9_.-]+'
      minLength: 20
      maxLength: 2048
    TimestreamDatabaseName:
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 3
      maxLength: 255
    TimestreamTableName:
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 3
      maxLength: 255
    UpdateCampaignAction:
      type: string
      enum:
        - APPROVE
        - SUSPEND
        - RESUME
        - UPDATE
    UpdateMode:
      type: string
      enum:
        - Overwrite
        - Merge
    UpdateVehicleError:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The ID of the vehicle with the error.
        code:
          allOf:
            - $ref: '#/components/schemas/number'
            - description: The relevant HTTP error code (400+).
        message:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: A message associated with the error.
      description: An HTTP error resulting from updating the description for a vehicle.
    UpdateVehicleRequestItem:
      type: object
      required:
        - vehicleName
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the vehicle to update.
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the vehicle model (model manifest) associated with the vehicle to update.
        decoderManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of the signal decoder manifest associated with the vehicle to update.
        attributes:
          allOf:
            - $ref: '#/components/schemas/attributesMap'
            - description: '<p>Static information about a vehicle in a key-value pair. For example:</p> <p> <code>"engineType"</code> : <code>"1.3 L R2"</code> </p>'
        attributeUpdateMode:
          allOf:
            - $ref: '#/components/schemas/UpdateMode'
            - description: <p>The method the specified attributes will update the existing attributes on the vehicle. Use<code>Overwite</code> to replace the vehicle attributes with the specified attributes. Or use <code>Merge</code> to combine all attributes.</p> <p>This is required if attributes are present in the input.</p>
      description: Information about the vehicle to update.
    UpdateVehicleResponseItem:
      type: object
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the updated vehicle.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the updated vehicle.
      description: Information about the updated vehicle.
    VehicleState:
      type: string
      enum:
        - CREATED
        - READY
        - HEALTHY
        - SUSPENDED
        - DELETING
    VehicleStatus:
      type: object
      properties:
        campaignName:
          allOf:
            - $ref: '#/components/schemas/string'
            - description: The name of a campaign.
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the vehicle.
        status:
          allOf:
            - $ref: '#/components/schemas/VehicleState'
            - description: '<p>The state of a vehicle, which can be one of the following:</p> <ul> <li> <p> <code>CREATED</code> - Amazon Web Services IoT FleetWise sucessfully created the vehicle. </p> </li> <li> <p> <code>READY</code> - The vehicle is ready to receive a campaign deployment. </p> </li> <li> <p> <code>HEALTHY</code> - A campaign deployment was delivered to the vehicle. </p> </li> <li> <p> <code>SUSPENDED</code> - A campaign associated with the vehicle was suspended and data collection was paused. </p> </li> <li> <p> <code>DELETING</code> - Amazon Web Services IoT FleetWise is removing a campaign from the vehicle. </p> </li> </ul>'
      description: Information about the state of a vehicle and how it relates to the status of a campaign.
    VehicleSummary:
      type: object
      required:
        - vehicleName
        - arn
        - modelManifestArn
        - decoderManifestArn
        - creationTime
        - lastModificationTime
      properties:
        vehicleName:
          allOf:
            - $ref: '#/components/schemas/vehicleName'
            - description: The unique ID of the vehicle.
        arn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The Amazon Resource Name (ARN) of the vehicle.
        modelManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of a vehicle model (model manifest) associated with the vehicle.
        decoderManifestArn:
          allOf:
            - $ref: '#/components/schemas/arn'
            - description: The ARN of a decoder manifest associated with the vehicle.
        creationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the vehicle was created in seconds since epoch (January 1, 1970 at midnight UTC time).'
        lastModificationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: 'The time the vehicle was last updated in seconds since epoch (January 1, 1970 at midnight UTC time). '
      description: '<p>Information about a vehicle.</p> <p>To return this information about vehicles in your account, you can use the API operation.</p>'
    attributeName:
      type: string
      pattern: '[a-zA-Z0-9_.-]+'
      minLength: 1
      maxLength: 150
    attributeValue:
      type: string
security:
  - hmac: []
