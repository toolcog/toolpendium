{
  "name": "UpdateChannelFlow",
  "description": "Updates channel flow attributes. This is a developer API.",
  "parameters": {
    "type": "object",
    "properties": {
      "channelFlowArn": {
        "type": "string",
        "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
        "minLength": 5,
        "maxLength": 1600,
        "description": "The ARN of the channel flow."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "Processors",
          "Name"
        ],
        "properties": {
          "Processors": {
            "description": "Information about the processor Lambda functions ",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Processor"
            },
            "minItems": 1,
            "maxItems": 3
          },
          "Name": {
            "description": "The name of the channel flow.",
            "type": "string",
            "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]*",
            "minLength": 1,
            "maxLength": 256,
            "format": "password"
          }
        }
      }
    },
    "required": [
      "channelFlowArn",
      "body"
    ],
    "$defs": {
      "Processor": {
        "type": "object",
        "required": [
          "Name",
          "Configuration",
          "ExecutionOrder",
          "FallbackAction"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyResourceName"
              },
              {
                "description": "The name of the channel flow."
              }
            ]
          },
          "Configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/ProcessorConfiguration"
              },
              {
                "description": "The information about the type of processor and its identifier."
              }
            ]
          },
          "ExecutionOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/ChannelFlowExecutionOrder"
              },
              {
                "description": "The sequence in which processors run. If you have multiple processors in a channel flow, message processing goes through each processor in the sequence. The value determines the sequence. At this point, we support only 1 processor within a flow."
              }
            ]
          },
          "FallbackAction": {
            "allOf": [
              {
                "$ref": "#/$defs/FallbackAction"
              },
              {
                "description": "Determines whether to continue with message processing or stop it in cases where communication with a processor fails. If a processor has a fallback action of <code>ABORT</code> and communication with it fails, the processor sets the message status to <code>FAILED</code> and does not send the message to any recipients. Note that if the last processor in the channel flow sequence has a fallback action of <code>CONTINUE</code> and communication with the processor fails, then the message is considered processed and sent to recipients of the channel."
              }
            ]
          }
        },
        "description": "The information about a processor in a channel flow."
      },
      "NonEmptyResourceName": {
        "type": "string",
        "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]*",
        "minLength": 1,
        "maxLength": 256,
        "format": "password"
      },
      "ProcessorConfiguration": {
        "type": "object",
        "required": [
          "Lambda"
        ],
        "properties": {
          "Lambda": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaConfiguration"
              },
              {
                "description": "Indicates that the processor is of type Lambda."
              }
            ]
          }
        },
        "description": "A processor's metadata."
      },
      "LambdaConfiguration": {
        "type": "object",
        "required": [
          "ResourceArn",
          "InvocationType"
        ],
        "properties": {
          "ResourceArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaFunctionArn"
              },
              {
                "description": "The ARN of the Lambda message processing function."
              }
            ]
          },
          "InvocationType": {
            "allOf": [
              {
                "$ref": "#/$defs/InvocationType"
              },
              {
                "description": "Controls how the Lambda function is invoked."
              }
            ]
          }
        },
        "description": "Stores metadata about a Lambda processor."
      },
      "LambdaFunctionArn": {
        "type": "string",
        "pattern": "arn:aws:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9\\-_\\.]+(:(\\$LATEST|[a-zA-Z0-9\\-_]+))?",
        "minLength": 15,
        "maxLength": 2048
      },
      "InvocationType": {
        "type": "string",
        "enum": [
          "ASYNC"
        ]
      },
      "ChannelFlowExecutionOrder": {
        "type": "integer",
        "minimum": 1,
        "maximum": 3
      },
      "FallbackAction": {
        "type": "string",
        "enum": [
          "CONTINUE",
          "ABORT"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://messaging-chime.us-east-1.amazonaws.com/channel-flows/{channelFlowArn}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ChannelFlowArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
