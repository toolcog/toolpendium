{
  "name": "CreateScheduledQuery",
  "description": " Create a scheduled query that will be run on your behalf at the configured schedule. Timestream assumes the execution role provided as part of the <code>ScheduledQueryExecutionRoleArn</code> parameter to run the query. You can use the <code>NotificationConfiguration</code> parameter to configure notification for your scheduled query operations.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "Timestream_20181101.CreateScheduledQuery"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateScheduledQueryRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateScheduledQueryRequest": {
        "type": "object",
        "required": [
          "Name",
          "QueryString",
          "ScheduleConfiguration",
          "NotificationConfiguration",
          "ScheduledQueryExecutionRoleArn",
          "ErrorReportConfiguration"
        ],
        "title": "CreateScheduledQueryRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduledQueryName"
              },
              {
                "description": "Name of the scheduled query."
              }
            ]
          },
          "QueryString": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryString"
              },
              {
                "description": "<p>The query string to run. Parameter names can be specified in the query string <code>@</code> character followed by an identifier. The named Parameter <code>@scheduled_runtime</code> is reserved and can be used in the query to get the time at which the query is scheduled to run.</p> <p>The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of <code>@scheduled_runtime</code> paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the <code>@scheduled_runtime</code> parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.</p>"
              }
            ]
          },
          "ScheduleConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleConfiguration"
              },
              {
                "description": "The schedule configuration for the query."
              }
            ]
          },
          "NotificationConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/NotificationConfiguration"
              },
              {
                "description": "Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it. "
              }
            ]
          },
          "TargetConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetConfiguration"
              },
              {
                "description": "Configuration used for writing the result of a query."
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientToken"
              },
              {
                "description": "<p>Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as making a single request. </p> <ul> <li> <p> If CreateScheduledQuery is called without a <code>ClientToken</code>, the Query SDK generates a <code>ClientToken</code> on your behalf.</p> </li> <li> <p> After 8 hours, any request with the same <code>ClientToken</code> is treated as a new request. </p> </li> </ul>"
              }
            ]
          },
          "ScheduledQueryExecutionRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN for the IAM role that Timestream will assume when running the scheduled query. "
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "A list of key-value pairs to label the scheduled query."
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/StringValue2048"
              },
              {
                "description": "<p>The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with <i>alias/</i> </p> <p>If ErrorReportConfiguration uses <code>SSE_KMS</code> as encryption type, the same KmsKeyId is used to encrypt the error report at rest.</p>"
              }
            ]
          },
          "ErrorReportConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ErrorReportConfiguration"
              },
              {
                "description": "Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results. "
              }
            ]
          }
        }
      },
      "ScheduledQueryName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 1,
        "maxLength": 64
      },
      "QueryString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 262144,
        "format": "password"
      },
      "ScheduleConfiguration": {
        "type": "object",
        "required": [
          "ScheduleExpression"
        ],
        "properties": {
          "ScheduleExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleExpression"
              },
              {
                "description": "An expression that denotes when to trigger the scheduled query run. This can be a cron expression or a rate expression. "
              }
            ]
          }
        },
        "description": "Configuration of the schedule of the query."
      },
      "ScheduleExpression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "NotificationConfiguration": {
        "type": "object",
        "required": [
          "SnsConfiguration"
        ],
        "properties": {
          "SnsConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SnsConfiguration"
              },
              {
                "description": "Details on SNS configuration. "
              }
            ]
          }
        },
        "description": "Notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated or when it is deleted. "
      },
      "SnsConfiguration": {
        "type": "object",
        "required": [
          "TopicArn"
        ],
        "properties": {
          "TopicArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "SNS topic ARN that the scheduled query status notifications will be sent to."
              }
            ]
          }
        },
        "description": "Details on SNS that are required to send the notification."
      },
      "AmazonResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "TargetConfiguration": {
        "type": "object",
        "required": [
          "TimestreamConfiguration"
        ],
        "properties": {
          "TimestreamConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestreamConfiguration"
              },
              {
                "description": "Configuration needed to write data into the Timestream database and table."
              }
            ]
          }
        },
        "description": "Configuration used for writing the output of a query."
      },
      "TimestreamConfiguration": {
        "type": "object",
        "required": [
          "DatabaseName",
          "TableName",
          "TimeColumn",
          "DimensionMappings"
        ],
        "properties": {
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "Name of Timestream database to which the query result will be written."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration."
              }
            ]
          },
          "TimeColumn": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP."
              }
            ]
          },
          "DimensionMappings": {
            "allOf": [
              {
                "$ref": "#/$defs/DimensionMappingList"
              },
              {
                "description": " This is to allow mapping column(s) from the query result to the dimension in the destination table. "
              }
            ]
          },
          "MultiMeasureMappings": {
            "allOf": [
              {
                "$ref": "#/$defs/MultiMeasureMappings"
              },
              {
                "description": "Multi-measure mappings."
              }
            ]
          },
          "MixedMeasureMappings": {
            "allOf": [
              {
                "$ref": "#/$defs/MixedMeasureMappingList"
              },
              {
                "description": "Specifies how to map measures to multi-measure records."
              }
            ]
          },
          "MeasureNameColumn": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Name of the measure column."
              }
            ]
          }
        },
        "description": " Configuration to write data into Timestream database and table. This configuration allows the user to map the query result select columns into the destination table columns. "
      },
      "ResourceName": {
        "type": "string"
      },
      "SchemaName": {
        "type": "string"
      },
      "DimensionMappingList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DimensionMapping"
        }
      },
      "DimensionMapping": {
        "type": "object",
        "required": [
          "Name",
          "DimensionValueType"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Column name from query result."
              }
            ]
          },
          "DimensionValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/DimensionValueType"
              },
              {
                "description": "Type for the dimension. "
              }
            ]
          }
        },
        "description": "This type is used to map column(s) from the query result to a dimension in the destination table."
      },
      "DimensionValueType": {
        "type": "string",
        "enum": [
          "VARCHAR"
        ]
      },
      "MultiMeasureMappings": {
        "type": "object",
        "required": [
          "MultiMeasureAttributeMappings"
        ],
        "properties": {
          "TargetMultiMeasureName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name."
              }
            ]
          },
          "MultiMeasureAttributeMappings": {
            "allOf": [
              {
                "$ref": "#/$defs/MultiMeasureAttributeMappingList"
              },
              {
                "description": "Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes."
              }
            ]
          }
        },
        "description": "Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table."
      },
      "MultiMeasureAttributeMappingList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MultiMeasureAttributeMapping"
        },
        "minItems": 1
      },
      "MultiMeasureAttributeMapping": {
        "type": "object",
        "required": [
          "SourceColumn",
          "MeasureValueType"
        ],
        "properties": {
          "SourceColumn": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Source column from where the attribute value is to be read."
              }
            ]
          },
          "TargetMultiMeasureAttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Custom name to be used for attribute name in derived table. If not provided, source column name would be used."
              }
            ]
          },
          "MeasureValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalarMeasureValueType"
              },
              {
                "description": "Type of the attribute to be read from the source column."
              }
            ]
          }
        },
        "description": "Attribute mapping for MULTI value measures."
      },
      "ScalarMeasureValueType": {
        "type": "string",
        "enum": [
          "BIGINT",
          "BOOLEAN",
          "DOUBLE",
          "VARCHAR",
          "TIMESTAMP"
        ]
      },
      "MixedMeasureMappingList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MixedMeasureMapping"
        },
        "minItems": 1
      },
      "MixedMeasureMapping": {
        "type": "object",
        "required": [
          "MeasureValueType"
        ],
        "properties": {
          "MeasureName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Refers to the value of measure_name in a result row. This field is required if MeasureNameColumn is provided."
              }
            ]
          },
          "SourceColumn": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "This field refers to the source column from which measure-value is to be read for result materialization."
              }
            ]
          },
          "TargetMeasureName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Target measure name to be used. If not provided, the target measure name by default would be measure-name if provided, or sourceColumn otherwise. "
              }
            ]
          },
          "MeasureValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/MeasureValueType"
              },
              {
                "description": "Type of the value that is to be read from sourceColumn. If the mapping is for MULTI, use MeasureValueType.MULTI."
              }
            ]
          },
          "MultiMeasureAttributeMappings": {
            "allOf": [
              {
                "$ref": "#/$defs/MultiMeasureAttributeMappingList"
              },
              {
                "description": "Required when measureValueType is MULTI. Attribute mappings for MULTI value measures."
              }
            ]
          }
        },
        "description": "MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table."
      },
      "MeasureValueType": {
        "type": "string",
        "enum": [
          "BIGINT",
          "BOOLEAN",
          "DOUBLE",
          "VARCHAR",
          "MULTI"
        ]
      },
      "ClientToken": {
        "type": "string",
        "minLength": 32,
        "maxLength": 128,
        "format": "password"
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key of the tag. Tag keys are case sensitive. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the tag. Tag values are case sensitive and can be null. "
              }
            ]
          }
        },
        "description": "A tag is a label that you assign to a Timestream database and/or table. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize databases and/or tables, for example, by purpose, owner, or environment. "
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "StringValue2048": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "ErrorReportConfiguration": {
        "type": "object",
        "required": [
          "S3Configuration"
        ],
        "properties": {
          "S3Configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Configuration"
              },
              {
                "description": "The S3 configuration for the error reports."
              }
            ]
          }
        },
        "description": "Configuration required for error reporting."
      },
      "S3Configuration": {
        "type": "object",
        "required": [
          "BucketName"
        ],
        "properties": {
          "BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": " Name of the S3 bucket under which error reports will be created."
              }
            ]
          },
          "ObjectKeyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectKeyPrefix"
              },
              {
                "description": " Prefix for the error report key. Timestream by default adds the following prefix to the error report path. "
              }
            ]
          },
          "EncryptionOption": {
            "allOf": [
              {
                "$ref": "#/$defs/S3EncryptionOption"
              },
              {
                "description": " Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default. "
              }
            ]
          }
        },
        "description": "Details on S3 location for error reports that result from running a query. "
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectKeyPrefix": {
        "type": "string",
        "pattern": "[a-zA-Z0-9|!\\-_*'\\(\\)]([a-zA-Z0-9]|[!\\-_*'\\(\\)\\/.])+",
        "minLength": 1,
        "maxLength": 896
      },
      "S3EncryptionOption": {
        "type": "string",
        "enum": [
          "SSE_S3",
          "SSE_KMS"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://query.timestream.us-east-1.amazonaws.com/#X-Amz-Target=Timestream_20181101.CreateScheduledQuery"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
