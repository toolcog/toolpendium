{
  "name": "GetNetworkRoutes",
  "description": "Gets the network routes of the specified global network.",
  "parameters": {
    "type": "object",
    "properties": {
      "globalNetworkId": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 0,
        "maxLength": 50,
        "description": "The ID of the global network."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "RouteTableIdentifier"
        ],
        "properties": {
          "RouteTableIdentifier": {
            "description": "Describes a route table.",
            "type": "object",
            "properties": {
              "TransitGatewayRouteTableArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TransitGatewayRouteTableArn"
                  },
                  {
                    "description": "The ARN of the transit gateway route table."
                  }
                ]
              },
              "CoreNetworkSegmentEdge": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CoreNetworkSegmentEdgeIdentifier"
                  },
                  {
                    "description": "The segment edge in a core network."
                  }
                ]
              }
            }
          },
          "ExactCidrMatches": {
            "description": "An exact CIDR block.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConstrainedString"
            }
          },
          "LongestPrefixMatches": {
            "description": "The most specific route that matches the traffic (longest prefix match).",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConstrainedString"
            }
          },
          "SubnetOfMatches": {
            "description": "The routes with a subnet that match the specified CIDR filter.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConstrainedString"
            }
          },
          "SupernetOfMatches": {
            "description": "The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConstrainedString"
            }
          },
          "PrefixListIds": {
            "description": "The IDs of the prefix lists.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ConstrainedString"
            }
          },
          "States": {
            "description": "The route states.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/RouteState"
            }
          },
          "Types": {
            "description": "The route types.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/RouteType"
            }
          },
          "DestinationFilters": {
            "description": "Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/FilterValues"
            }
          }
        }
      }
    },
    "required": [
      "globalNetworkId",
      "body"
    ],
    "$defs": {
      "TransitGatewayRouteTableArn": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 0,
        "maxLength": 500
      },
      "CoreNetworkSegmentEdgeIdentifier": {
        "type": "object",
        "properties": {
          "CoreNetworkId": {
            "allOf": [
              {
                "$ref": "#/$defs/CoreNetworkId"
              },
              {
                "description": "The ID of a core network."
              }
            ]
          },
          "SegmentName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConstrainedString"
              },
              {
                "description": "The name of the segment edge."
              }
            ]
          },
          "EdgeLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/ExternalRegionCode"
              },
              {
                "description": "The Region where the segment edge is located."
              }
            ]
          }
        },
        "description": "Returns details about a core network edge."
      },
      "CoreNetworkId": {
        "type": "string",
        "pattern": "^core-network-([0-9a-f]{8,17})$",
        "minLength": 0,
        "maxLength": 50
      },
      "ConstrainedString": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 0,
        "maxLength": 256
      },
      "ExternalRegionCode": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 1,
        "maxLength": 63
      },
      "RouteState": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "BLACKHOLE"
        ]
      },
      "RouteType": {
        "type": "string",
        "enum": [
          "PROPAGATED",
          "STATIC"
        ]
      },
      "FilterValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FilterValue"
        }
      },
      "FilterValue": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z\\*\\.\\\\/\\?-]*$",
        "maxLength": 255
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://networkmanager.us-east-1.amazonaws.com/global-networks/{globalNetworkId}/network-routes"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**RouteTableArn**",
            "**CoreNetworkSegmentEdge**",
            "**RouteTableType**",
            "**RouteTableTimestamp**",
            "**NetworkRoutes**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
