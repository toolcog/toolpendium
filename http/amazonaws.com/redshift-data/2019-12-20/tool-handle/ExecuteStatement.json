{
  "name": "ExecuteStatement",
  "description": "<p>Runs an SQL statement, which can be data manipulation language (DML) or data definition language (DDL). This statement must be a single SQL statement. Depending on the authorization method, use one of the following combinations of request parameters: </p> <ul> <li> <p>Secrets Manager - when connecting to a cluster, provide the <code>secret-arn</code> of a secret stored in Secrets Manager which has <code>username</code> and <code>password</code>. The specified secret contains credentials to connect to the <code>database</code> you specify. When you are connecting to a cluster, you also supply the database name, If you provide a cluster identifier (<code>dbClusterIdentifier</code>), it must match the cluster identifier stored in the secret. When you are connecting to a serverless workgroup, you also supply the database name.</p> </li> <li> <p>Temporary credentials - when connecting to your data warehouse, choose one of the following options:</p> <ul> <li> <p>When connecting to a serverless workgroup, specify the workgroup name and database name. The database user name is derived from the IAM identity. For example, <code>arn:iam::123456789012:user:foo</code> has the database user name <code>IAM:foo</code>. Also, permission to call the <code>redshift-serverless:GetCredentials</code> operation is required.</p> </li> <li> <p>When connecting to a cluster as an IAM identity, specify the cluster identifier and the database name. The database user name is derived from the IAM identity. For example, <code>arn:iam::123456789012:user:foo</code> has the database user name <code>IAM:foo</code>. Also, permission to call the <code>redshift:GetClusterCredentialsWithIAM</code> operation is required.</p> </li> <li> <p>When connecting to a cluster as a database user, specify the cluster identifier, the database name, and the database user name. Also, permission to call the <code>redshift:GetClusterCredentials</code> operation is required.</p> </li> </ul> </li> </ul> <p>For more information about the Amazon Redshift Data API and CLI usage examples, see <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/data-api.html\">Using the Amazon Redshift Data API</a> in the <i>Amazon Redshift Management Guide</i>. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "RedshiftData.ExecuteStatement"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ExecuteStatementInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ExecuteStatementInput": {
        "type": "object",
        "required": [
          "Database",
          "Sql"
        ],
        "title": "ExecuteStatementInput",
        "properties": {
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientToken"
              },
              {
                "description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request."
              }
            ]
          },
          "ClusterIdentifier": {
            "allOf": [
              {
                "$ref": "#/$defs/Location"
              },
              {
                "description": "The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. "
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. "
              }
            ]
          },
          "DbUser": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. "
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SqlParametersList"
              },
              {
                "description": "The parameters for the SQL statement."
              }
            ]
          },
          "SecretArn": {
            "allOf": [
              {
                "$ref": "#/$defs/SecretArn"
              },
              {
                "description": "The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. "
              }
            ]
          },
          "Sql": {
            "allOf": [
              {
                "$ref": "#/$defs/StatementString"
              },
              {
                "description": "The SQL statement text to run. "
              }
            ]
          },
          "StatementName": {
            "allOf": [
              {
                "$ref": "#/$defs/StatementNameString"
              },
              {
                "description": "The name of the SQL statement. You can name the SQL statement when you create it to identify the query. "
              }
            ]
          },
          "WithEvent": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. "
              }
            ]
          },
          "WorkgroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkgroupNameString"
              },
              {
                "description": "The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials."
              }
            ]
          }
        }
      },
      "ClientToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "Location": {
        "type": "string"
      },
      "String": {
        "type": "string"
      },
      "SqlParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SqlParameter"
        },
        "minItems": 1
      },
      "SqlParameter": {
        "type": "object",
        "required": [
          "name",
          "value"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterName"
              },
              {
                "description": "The name of the parameter."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValue"
              },
              {
                "description": "The value of the parameter. Amazon Redshift implicitly converts to the proper data type. For more information, see <a href=\"https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html\">Data types</a> in the <i>Amazon Redshift Database Developer Guide</i>. "
              }
            ]
          }
        },
        "description": "A parameter used in a SQL statement."
      },
      "ParameterName": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_]+$"
      },
      "ParameterValue": {
        "type": "string",
        "minLength": 1
      },
      "SecretArn": {
        "type": "string"
      },
      "StatementString": {
        "type": "string"
      },
      "StatementNameString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 500
      },
      "Boolean": {
        "type": "boolean"
      },
      "WorkgroupNameString": {
        "type": "string",
        "pattern": "^(([a-z0-9-]+)|(arn:(aws(-[a-z]+)*):redshift-serverless:[a-z]{2}(-gov)?-[a-z]+-\\d{1}:\\d{12}:workgroup/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}))$",
        "minLength": 3,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://redshift-data.us-east-1.amazonaws.com/#X-Amz-Target=RedshiftData.ExecuteStatement"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ClusterIdentifier**",
            "**CreatedAt**",
            "**Database**",
            "**DbUser**",
            "**Id**",
            "**SecretArn**",
            "**WorkgroupName**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
