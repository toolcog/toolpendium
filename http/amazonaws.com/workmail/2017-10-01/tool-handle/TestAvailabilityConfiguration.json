{
  "name": "TestAvailabilityConfiguration",
  "description": "<p>Performs a test on an availability provider to ensure that access is allowed. For EWS, it verifies the provided credentials can be used to successfully log in. For Lambda, it verifies that the Lambda function can be invoked and that the resource access policy was configured to deny anonymous access. An anonymous invocation is one done without providing either a <code>SourceArn</code> or <code>SourceAccount</code> header.</p> <note> <p>The request must contain either one provider definition (<code>EwsProvider</code> or <code>LambdaProvider</code>) or the <code>DomainName</code> parameter. If the <code>DomainName</code> parameter is provided, the configuration stored under the <code>DomainName</code> will be tested.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "WorkMailService.TestAvailabilityConfiguration"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/TestAvailabilityConfigurationRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "TestAvailabilityConfigurationRequest": {
        "type": "object",
        "required": [
          "OrganizationId"
        ],
        "title": "TestAvailabilityConfigurationRequest",
        "properties": {
          "OrganizationId": {
            "allOf": [
              {
                "$ref": "#/$defs/OrganizationId"
              },
              {
                "description": "The WorkMail organization where the availability provider will be tested."
              }
            ]
          },
          "DomainName": {
            "allOf": [
              {
                "$ref": "#/$defs/DomainName"
              },
              {
                "description": "The domain to which the provider applies. If this field is provided, a stored availability provider associated to this domain name will be tested."
              }
            ]
          },
          "EwsProvider": {
            "$ref": "#/$defs/EwsAvailabilityProvider"
          },
          "LambdaProvider": {
            "$ref": "#/$defs/LambdaAvailabilityProvider"
          }
        }
      },
      "OrganizationId": {
        "type": "string",
        "pattern": "^m-[0-9a-f]{32}$",
        "minLength": 34,
        "maxLength": 34
      },
      "DomainName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9.-]+\\.[a-zA-Z-]{2,}",
        "minLength": 3,
        "maxLength": 255
      },
      "EwsAvailabilityProvider": {
        "type": "object",
        "required": [
          "EwsEndpoint",
          "EwsUsername",
          "EwsPassword"
        ],
        "properties": {
          "EwsEndpoint": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "The endpoint of the remote EWS server."
              }
            ]
          },
          "EwsUsername": {
            "allOf": [
              {
                "$ref": "#/$defs/ExternalUserName"
              },
              {
                "description": "The username used to authenticate the remote EWS server."
              }
            ]
          },
          "EwsPassword": {
            "allOf": [
              {
                "$ref": "#/$defs/Password"
              },
              {
                "description": "The password used to authenticate the remote EWS server."
              }
            ]
          }
        },
        "description": "Describes an EWS based availability provider. This is only used as input to the service."
      },
      "Url": {
        "type": "string",
        "pattern": "https?://[A-Za-z0-9.-]+(:[0-9]+)?/.*",
        "maxLength": 256
      },
      "ExternalUserName": {
        "type": "string",
        "pattern": "[\\u0020-\\u00FF]+",
        "maxLength": 256
      },
      "Password": {
        "type": "string",
        "pattern": "[\\u0020-\\u00FF]+",
        "maxLength": 256,
        "format": "password"
      },
      "LambdaAvailabilityProvider": {
        "type": "object",
        "required": [
          "LambdaArn"
        ],
        "properties": {
          "LambdaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Lambda that acts as the availability provider."
              }
            ]
          }
        },
        "description": "Describes a Lambda based availability provider."
      },
      "LambdaArn": {
        "type": "string",
        "pattern": "arn:aws:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9\\-_\\.]+(:(\\$LATEST|[a-zA-Z0-9\\-_]+))?",
        "minLength": 49,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://workmail.us-east-1.amazonaws.com/#X-Amz-Target=WorkMailService.TestAvailabilityConfiguration"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**TestPassed**",
            "**FailureReason**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
