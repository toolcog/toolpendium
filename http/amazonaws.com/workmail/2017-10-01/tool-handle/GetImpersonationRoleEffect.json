{
  "name": "GetImpersonationRoleEffect",
  "description": "Tests whether the given impersonation role can impersonate a target user.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "WorkMailService.GetImpersonationRoleEffect"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/GetImpersonationRoleEffectRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "GetImpersonationRoleEffectRequest": {
        "type": "object",
        "required": [
          "OrganizationId",
          "ImpersonationRoleId",
          "TargetUser"
        ],
        "title": "GetImpersonationRoleEffectRequest",
        "properties": {
          "OrganizationId": {
            "allOf": [
              {
                "$ref": "#/$defs/OrganizationId"
              },
              {
                "description": "The WorkMail organization where the impersonation role is defined."
              }
            ]
          },
          "ImpersonationRoleId": {
            "allOf": [
              {
                "$ref": "#/$defs/ImpersonationRoleId"
              },
              {
                "description": "The impersonation role ID to test."
              }
            ]
          },
          "TargetUser": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityIdentifier"
              },
              {
                "description": "<p>The WorkMail organization user chosen to test the impersonation role. The following identity formats are available:</p> <ul> <li> <p>User ID: <code>12345678-1234-1234-1234-123456789012</code> or <code>S-1-1-12-1234567890-123456789-123456789-1234</code> </p> </li> <li> <p>Email address: <code>user@domain.tld</code> </p> </li> <li> <p>User name: <code>user</code> </p> </li> </ul>"
              }
            ]
          }
        }
      },
      "OrganizationId": {
        "type": "string",
        "pattern": "^m-[0-9a-f]{32}$",
        "minLength": 34,
        "maxLength": 34
      },
      "ImpersonationRoleId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_-]+",
        "minLength": 1,
        "maxLength": 64
      },
      "EntityIdentifier": {
        "type": "string",
        "pattern": "[a-zA-Z0-9._%+@-]+",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://workmail.us-east-1.amazonaws.com/#X-Amz-Target=WorkMailService.GetImpersonationRoleEffect"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Type**",
            "**Effect**",
            "**MatchedRules**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
