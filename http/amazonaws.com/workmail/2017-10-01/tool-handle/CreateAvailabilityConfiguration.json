{
  "name": "CreateAvailabilityConfiguration",
  "description": "Creates an <code>AvailabilityConfiguration</code> for the given WorkMail organization and domain.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "WorkMailService.CreateAvailabilityConfiguration"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateAvailabilityConfigurationRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateAvailabilityConfigurationRequest": {
        "type": "object",
        "required": [
          "OrganizationId",
          "DomainName"
        ],
        "title": "CreateAvailabilityConfigurationRequest",
        "properties": {
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyClientToken"
              },
              {
                "description": "An idempotent token that ensures that an API request is executed only once."
              }
            ]
          },
          "OrganizationId": {
            "allOf": [
              {
                "$ref": "#/$defs/OrganizationId"
              },
              {
                "description": "The WorkMail organization for which the <code>AvailabilityConfiguration</code> will be created."
              }
            ]
          },
          "DomainName": {
            "allOf": [
              {
                "$ref": "#/$defs/DomainName"
              },
              {
                "description": "The domain to which the provider applies."
              }
            ]
          },
          "EwsProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/EwsAvailabilityProvider"
              },
              {
                "description": "Exchange Web Services (EWS) availability provider definition. The request must contain exactly one provider definition, either <code>EwsProvider</code> or <code>LambdaProvider</code>."
              }
            ]
          },
          "LambdaProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaAvailabilityProvider"
              },
              {
                "description": "Lambda availability provider definition. The request must contain exactly one provider definition, either <code>EwsProvider</code> or <code>LambdaProvider</code>."
              }
            ]
          }
        }
      },
      "IdempotencyClientToken": {
        "type": "string",
        "pattern": "[\\x21-\\x7e]+",
        "minLength": 1,
        "maxLength": 128
      },
      "OrganizationId": {
        "type": "string",
        "pattern": "^m-[0-9a-f]{32}$",
        "minLength": 34,
        "maxLength": 34
      },
      "DomainName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9.-]+\\.[a-zA-Z-]{2,}",
        "minLength": 3,
        "maxLength": 255
      },
      "EwsAvailabilityProvider": {
        "type": "object",
        "required": [
          "EwsEndpoint",
          "EwsUsername",
          "EwsPassword"
        ],
        "properties": {
          "EwsEndpoint": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "The endpoint of the remote EWS server."
              }
            ]
          },
          "EwsUsername": {
            "allOf": [
              {
                "$ref": "#/$defs/ExternalUserName"
              },
              {
                "description": "The username used to authenticate the remote EWS server."
              }
            ]
          },
          "EwsPassword": {
            "allOf": [
              {
                "$ref": "#/$defs/Password"
              },
              {
                "description": "The password used to authenticate the remote EWS server."
              }
            ]
          }
        },
        "description": "Describes an EWS based availability provider. This is only used as input to the service."
      },
      "Url": {
        "type": "string",
        "pattern": "https?://[A-Za-z0-9.-]+(:[0-9]+)?/.*",
        "maxLength": 256
      },
      "ExternalUserName": {
        "type": "string",
        "pattern": "[\\u0020-\\u00FF]+",
        "maxLength": 256
      },
      "Password": {
        "type": "string",
        "pattern": "[\\u0020-\\u00FF]+",
        "maxLength": 256,
        "format": "password"
      },
      "LambdaAvailabilityProvider": {
        "type": "object",
        "required": [
          "LambdaArn"
        ],
        "properties": {
          "LambdaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Lambda that acts as the availability provider."
              }
            ]
          }
        },
        "description": "Describes a Lambda based availability provider."
      },
      "LambdaArn": {
        "type": "string",
        "pattern": "arn:aws:lambda:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:function:[a-zA-Z0-9\\-_\\.]+(:(\\$LATEST|[a-zA-Z0-9\\-_]+))?",
        "minLength": 49,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://workmail.us-east-1.amazonaws.com/#X-Amz-Target=WorkMailService.CreateAvailabilityConfiguration"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
