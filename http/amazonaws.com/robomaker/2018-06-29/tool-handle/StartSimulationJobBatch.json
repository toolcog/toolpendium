{
  "name": "StartSimulationJobBatch",
  "description": "Starts a new simulation job batch. The batch is defined using one or more <code>SimulationJobRequest</code> objects. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "createSimulationJobRequests"
        ],
        "properties": {
          "clientRequestToken": {
            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.",
            "type": "string",
            "pattern": "[a-zA-Z0-9_\\-=]*",
            "minLength": 1,
            "maxLength": 64
          },
          "batchPolicy": {
            "description": "Information about the batch policy.",
            "type": "object",
            "properties": {
              "timeoutInSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BatchTimeoutInSeconds"
                  },
                  {
                    "description": "<p>The amount of time, in seconds, to wait for the batch to complete. </p> <p>If a batch times out, and there are pending requests that were failing due to an internal failure (like <code>InternalServiceError</code>), they will be moved to the failed list and the batch status will be <code>Failed</code>. If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be <code>TimedOut</code>. </p>"
                  }
                ]
              },
              "maxConcurrency": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MaxConcurrency"
                  },
                  {
                    "description": "<p>The number of active simulation jobs create as part of the batch that can be in an active state at the same time. </p> <p>Active states include: <code>Pending</code>,<code>Preparing</code>, <code>Running</code>, <code>Restarting</code>, <code>RunningFailed</code> and <code>Terminating</code>. All other states are terminal states. </p>"
                  }
                ]
              }
            }
          },
          "createSimulationJobRequests": {
            "description": "A list of simulation job requests to create in the batch.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SimulationJobRequest"
            },
            "minItems": 1,
            "maxItems": 1000
          },
          "tags": {
            "description": "A map that contains tag keys and tag values that are attached to the deployment job batch.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 50,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "BatchTimeoutInSeconds": {
        "type": "integer"
      },
      "MaxConcurrency": {
        "type": "integer"
      },
      "SimulationJobRequest": {
        "type": "object",
        "required": [
          "maxJobDurationInSeconds"
        ],
        "properties": {
          "outputLocation": {
            "$ref": "#/$defs/OutputLocation"
          },
          "loggingConfig": {
            "$ref": "#/$defs/LoggingConfig"
          },
          "maxJobDurationInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/JobDuration"
              },
              {
                "description": "The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less."
              }
            ]
          },
          "iamRole": {
            "allOf": [
              {
                "$ref": "#/$defs/IamRole"
              },
              {
                "description": "The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. "
              }
            ]
          },
          "failureBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/FailureBehavior"
              },
              {
                "description": "<p>The failure behavior the simulation job.</p> <dl> <dt>Continue</dt> <dd> <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p> </dd> <dt>Fail</dt> <dd> <p>Stop the simulation job and terminate the instance.</p> </dd> </dl>"
              }
            ]
          },
          "useDefaultApplications": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. "
              }
            ]
          },
          "robotApplications": {
            "allOf": [
              {
                "$ref": "#/$defs/RobotApplicationConfigs"
              },
              {
                "description": "The robot applications to use in the simulation job."
              }
            ]
          },
          "simulationApplications": {
            "allOf": [
              {
                "$ref": "#/$defs/SimulationApplicationConfigs"
              },
              {
                "description": "The simulation applications to use in the simulation job."
              }
            ]
          },
          "dataSources": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceConfigs"
              },
              {
                "description": "<p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note> <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p> </note>"
              }
            ]
          },
          "vpcConfig": {
            "$ref": "#/$defs/VPCConfig"
          },
          "compute": {
            "allOf": [
              {
                "$ref": "#/$defs/Compute"
              },
              {
                "description": "Compute information for the simulation job"
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagMap"
              },
              {
                "description": "A map that contains tag keys and tag values that are attached to the simulation job request."
              }
            ]
          }
        },
        "description": "Information about a simulation job request."
      },
      "OutputLocation": {
        "type": "object",
        "properties": {
          "s3Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The S3 bucket for output."
              }
            ]
          },
          "s3Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Key"
              },
              {
                "description": "The S3 folder in the <code>s3Bucket</code> where output files will be placed."
              }
            ]
          }
        },
        "description": "The output location."
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "[a-z0-9][a-z0-9.\\-]*[a-z0-9]",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Key": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 1024
      },
      "LoggingConfig": {
        "type": "object",
        "properties": {
          "recordAllRosTopics": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "deprecated": true,
                "description": "<p>A boolean indicating whether to record all ROS topics.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
              }
            ]
          }
        },
        "description": "The logging configuration."
      },
      "BoxedBoolean": {
        "type": "boolean"
      },
      "JobDuration": {
        "type": "integer"
      },
      "IamRole": {
        "type": "string",
        "pattern": "arn:aws:iam::\\w+:role/.*",
        "minLength": 1,
        "maxLength": 255
      },
      "FailureBehavior": {
        "type": "string",
        "enum": [
          "Fail",
          "Continue"
        ]
      },
      "RobotApplicationConfigs": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RobotApplicationConfig"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "RobotApplicationConfig": {
        "type": "object",
        "required": [
          "application",
          "launchConfig"
        ],
        "properties": {
          "application": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The application information for the robot application."
              }
            ]
          },
          "applicationVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "The version of the robot application."
              }
            ]
          },
          "launchConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/LaunchConfig"
              },
              {
                "description": "The launch configuration for the robot application."
              }
            ]
          },
          "uploadConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/UploadConfigurations"
              },
              {
                "description": "The upload configurations for the robot application."
              }
            ]
          },
          "useDefaultUploadConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "deprecated": true,
                "description": "<p>A Boolean indicating whether to use default upload configurations. By default, <code>.ros</code> and <code>.gazebo</code> files are uploaded when the application terminates and all ROS topics will be recorded.</p> <p>If you set this value, you must specify an <code>outputLocation</code>.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
              }
            ]
          },
          "tools": {
            "allOf": [
              {
                "$ref": "#/$defs/Tools"
              },
              {
                "description": "Information about tools configured for the robot application."
              }
            ]
          },
          "useDefaultTools": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "deprecated": true,
                "description": "<p>A Boolean indicating whether to use default robot application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is <code>False</code>.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
              }
            ]
          }
        },
        "description": "Application configuration information for a robot."
      },
      "Arn": {
        "type": "string",
        "pattern": "arn:.*",
        "minLength": 1,
        "maxLength": 1224
      },
      "Version": {
        "type": "string",
        "pattern": "(\\$LATEST)|[0-9]*",
        "minLength": 1,
        "maxLength": 255
      },
      "LaunchConfig": {
        "type": "object",
        "properties": {
          "packageName": {
            "allOf": [
              {
                "$ref": "#/$defs/Command"
              },
              {
                "description": "The package name."
              }
            ]
          },
          "launchFile": {
            "allOf": [
              {
                "$ref": "#/$defs/Command"
              },
              {
                "description": "The launch file name."
              }
            ]
          },
          "environmentVariables": {
            "allOf": [
              {
                "$ref": "#/$defs/EnvironmentVariableMap"
              },
              {
                "description": "The environment variables for the application launch."
              }
            ]
          },
          "portForwardingConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/PortForwardingConfig"
              },
              {
                "description": "The port forwarding configuration."
              }
            ]
          },
          "streamUI": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Boolean indicating whether a streaming session will be configured for the application. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. "
              }
            ]
          },
          "command": {
            "allOf": [
              {
                "$ref": "#/$defs/CommandList"
              },
              {
                "description": "<p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p> <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>"
              }
            ]
          }
        },
        "description": "Information about a launch configuration."
      },
      "Command": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.\\-]*",
        "minLength": 1,
        "maxLength": 1024
      },
      "EnvironmentVariableMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 20,
        "additionalProperties": {
          "$ref": "#/$defs/EnvironmentVariableValue"
        }
      },
      "EnvironmentVariableValue": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 1024
      },
      "PortForwardingConfig": {
        "type": "object",
        "properties": {
          "portMappings": {
            "allOf": [
              {
                "$ref": "#/$defs/PortMappingList"
              },
              {
                "description": "The port mappings for the configuration."
              }
            ]
          }
        },
        "description": "Configuration information for port forwarding."
      },
      "PortMappingList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PortMapping"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "PortMapping": {
        "type": "object",
        "required": [
          "jobPort",
          "applicationPort"
        ],
        "properties": {
          "jobPort": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port number on the simulation job instance to use as a remote connection point. "
              }
            ]
          },
          "applicationPort": {
            "allOf": [
              {
                "$ref": "#/$defs/NonSystemPort"
              },
              {
                "description": "The port number on the application."
              }
            ]
          },
          "enableOnPublicIp": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean indicating whether to enable this port mapping on public IP."
              }
            ]
          }
        },
        "description": "An object representing a port mapping."
      },
      "Port": {
        "type": "integer",
        "minimum": 1,
        "maximum": 65535
      },
      "NonSystemPort": {
        "type": "integer",
        "minimum": 1024,
        "maximum": 65535
      },
      "Boolean": {
        "type": "boolean"
      },
      "CommandList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonEmptyString"
        }
      },
      "NonEmptyString": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255
      },
      "UploadConfigurations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/UploadConfiguration"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "UploadConfiguration": {
        "type": "object",
        "required": [
          "name",
          "path",
          "uploadBehavior"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "<p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. </p> <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your upload configuration name is <code>robot-test</code>, your files will be uploaded to <code>s3://my-bucket/&lt;simid&gt;/&lt;runid&gt;/robot-test</code>. </p>"
              }
            ]
          },
          "path": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": " Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of <code>**</code> as a <i>super asterisk</i>. For example, specifying <code>/var/log/**.log</code> causes all .log files in the <code>/var/log</code> directory tree to be collected. For more examples, see <a href=\"https://github.com/gobwas/glob\">Glob Library</a>. "
              }
            ]
          },
          "uploadBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/UploadBehavior"
              },
              {
                "description": "<p>Specifies when to upload the files:</p> <dl> <dt>UPLOAD_ON_TERMINATE</dt> <dd> <p>Matching files are uploaded once the simulation enters the <code>TERMINATING</code> state. Matching files are not uploaded until all of your code (including tools) have stopped. </p> <p>If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.</p> </dd> <dt>UPLOAD_ROLLING_AUTO_REMOVE</dt> <dd> <p>Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. </p> </dd> </dl>"
              }
            ]
          }
        },
        "description": "Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. "
      },
      "Name": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_\\-]*",
        "minLength": 1,
        "maxLength": 255
      },
      "Path": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 1024
      },
      "UploadBehavior": {
        "type": "string",
        "enum": [
          "UPLOAD_ON_TERMINATE",
          "UPLOAD_ROLLING_AUTO_REMOVE"
        ]
      },
      "Tools": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tool"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "Tool": {
        "type": "object",
        "required": [
          "name",
          "command"
        ],
        "properties": {
          "streamUI": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Boolean indicating whether a streaming session will be configured for the tool. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with the tool as it is running in the simulation. It must have a graphical user interface. The default is <code>False</code>. "
              }
            ]
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the tool."
              }
            ]
          },
          "command": {
            "allOf": [
              {
                "$ref": "#/$defs/UnrestrictedCommand"
              },
              {
                "description": "Command-line arguments for the tool. It must include the tool executable name."
              }
            ]
          },
          "streamOutputToCloudWatch": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "description": "Boolean indicating whether logs will be recorded in CloudWatch for the tool. The default is <code>False</code>. "
              }
            ]
          },
          "exitBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/ExitBehavior"
              },
              {
                "description": "Exit behavior determines what happens when your tool quits running. <code>RESTART</code> will cause your tool to be restarted. <code>FAIL</code> will cause your job to exit. The default is <code>RESTART</code>. "
              }
            ]
          }
        },
        "description": "Information about a tool. Tools are used in a simulation job."
      },
      "UnrestrictedCommand": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 1024
      },
      "ExitBehavior": {
        "type": "string",
        "enum": [
          "FAIL",
          "RESTART"
        ]
      },
      "SimulationApplicationConfigs": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SimulationApplicationConfig"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "SimulationApplicationConfig": {
        "type": "object",
        "required": [
          "application",
          "launchConfig"
        ],
        "properties": {
          "application": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The application information for the simulation application."
              }
            ]
          },
          "applicationVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "The version of the simulation application."
              }
            ]
          },
          "launchConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/LaunchConfig"
              },
              {
                "description": "The launch configuration for the simulation application."
              }
            ]
          },
          "uploadConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/UploadConfigurations"
              },
              {
                "description": "Information about upload configurations for the simulation application."
              }
            ]
          },
          "worldConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/WorldConfigs"
              },
              {
                "description": "A list of world configurations."
              }
            ]
          },
          "useDefaultUploadConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "deprecated": true,
                "description": "<p>A Boolean indicating whether to use default upload configurations. By default, <code>.ros</code> and <code>.gazebo</code> files are uploaded when the application terminates and all ROS topics will be recorded.</p> <p>If you set this value, you must specify an <code>outputLocation</code>.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
              }
            ]
          },
          "tools": {
            "allOf": [
              {
                "$ref": "#/$defs/Tools"
              },
              {
                "description": "Information about tools configured for the simulation application."
              }
            ]
          },
          "useDefaultTools": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedBoolean"
              },
              {
                "deprecated": true,
                "description": "<p>A Boolean indicating whether to use default simulation application tools. The default tools are rviz, rqt, terminal and rosbag record. The default is <code>False</code>.</p> <important> <p>This API is no longer supported and will throw an error if used.</p> </important>AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
              }
            ]
          }
        },
        "description": "Information about a simulation application configuration."
      },
      "WorldConfigs": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/WorldConfig"
        },
        "minItems": 0,
        "maxItems": 1
      },
      "WorldConfig": {
        "type": "object",
        "properties": {
          "world": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The world generated by Simulation WorldForge."
              }
            ]
          }
        },
        "description": "Configuration information for a world."
      },
      "DataSourceConfigs": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataSourceConfig"
        },
        "minItems": 1,
        "maxItems": 6
      },
      "DataSourceConfig": {
        "type": "object",
        "required": [
          "name",
          "s3Bucket",
          "s3Keys"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the data source."
              }
            ]
          },
          "s3Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The S3 bucket where the data files are located."
              }
            ]
          },
          "s3Keys": {
            "allOf": [
              {
                "$ref": "#/$defs/S3KeysOrPrefixes"
              },
              {
                "description": "The list of S3 keys identifying the data source files."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceType"
              },
              {
                "description": "<p>The data type for the data source that you're using for your container image or simulation job. You can use this field to specify whether your data source is an Archive, an Amazon S3 prefix, or a file.</p> <p>If you don't specify a field, the default value is <code>File</code>.</p>"
              }
            ]
          },
          "destination": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "<p>The location where your files are mounted in the container image.</p> <p>If you've specified the <code>type</code> of the data source as an <code>Archive</code>, you must provide an Amazon S3 object key to your archive. The object key must point to either a <code>.zip</code> or <code>.tar.gz</code> file.</p> <p>If you've specified the <code>type</code> of the data source as a <code>Prefix</code>, you provide the Amazon S3 prefix that points to the files that you are using for your data source.</p> <p>If you've specified the <code>type</code> of the data source as a <code>File</code>, you provide the Amazon S3 path to the file that you're using as your data source.</p>"
              }
            ]
          }
        },
        "description": "Information about a data source."
      },
      "S3KeysOrPrefixes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/S3KeyOrPrefix"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "S3KeyOrPrefix": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 1024
      },
      "DataSourceType": {
        "type": "string",
        "enum": [
          "Prefix",
          "Archive",
          "File"
        ]
      },
      "VPCConfig": {
        "type": "object",
        "required": [
          "subnets"
        ],
        "properties": {
          "subnets": {
            "allOf": [
              {
                "$ref": "#/$defs/Subnets"
              },
              {
                "description": "A list of one or more subnet IDs in your VPC."
              }
            ]
          },
          "securityGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroups"
              },
              {
                "description": "A list of one or more security groups IDs in your VPC."
              }
            ]
          },
          "assignPublicIp": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A boolean indicating whether to assign a public IP address."
              }
            ]
          }
        },
        "description": "If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs."
      },
      "Subnets": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonEmptyString"
        },
        "minItems": 1,
        "maxItems": 16
      },
      "SecurityGroups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonEmptyString"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "Compute": {
        "type": "object",
        "properties": {
          "simulationUnitLimit": {
            "allOf": [
              {
                "$ref": "#/$defs/SimulationUnit"
              },
              {
                "description": "The simulation unit limit. Your simulation is allocated CPU and memory proportional to the supplied simulation unit limit. A simulation unit is 1 vcpu and 2GB of memory. You are only billed for the SU utilization you consume up to the maximum value provided. The default is 15. "
              }
            ]
          },
          "computeType": {
            "allOf": [
              {
                "$ref": "#/$defs/ComputeType"
              },
              {
                "description": "Compute type information for the simulation job."
              }
            ]
          },
          "gpuUnitLimit": {
            "allOf": [
              {
                "$ref": "#/$defs/GPUUnit"
              },
              {
                "description": "Compute GPU unit limit for the simulation job. It is the same as the number of GPUs allocated to the SimulationJob."
              }
            ]
          }
        },
        "description": "Compute information for the simulation job."
      },
      "SimulationUnit": {
        "type": "integer",
        "minimum": 1,
        "maximum": 15
      },
      "ComputeType": {
        "type": "string",
        "enum": [
          "CPU",
          "GPU_AND_CPU"
        ]
      },
      "GPUUnit": {
        "type": "integer",
        "minimum": 0,
        "maximum": 1
      },
      "TagMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/TagValue"
        }
      },
      "TagValue": {
        "type": "string",
        "pattern": "[a-zA-Z0-9 _.\\-\\/+=:]*",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://robomaker.us-east-1.amazonaws.com/startSimulationJobBatch"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**arn**",
            "**status**",
            "**createdAt**",
            "**clientRequestToken**",
            "**batchPolicy**",
            "**failureCode**",
            "**failureReason**",
            "**failedRequests**",
            "**pendingRequests**",
            "**createdRequests**",
            "**tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
