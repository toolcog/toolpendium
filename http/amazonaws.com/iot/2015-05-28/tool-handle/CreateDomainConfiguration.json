{
  "name": "CreateDomainConfiguration",
  "description": "<p>Creates a domain configuration.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">CreateDomainConfiguration</a> action.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "domainConfigurationName": {
        "type": "string",
        "pattern": "[\\w.-]+",
        "minLength": 1,
        "maxLength": 128,
        "description": "The name of the domain configuration. This value must be unique to a region."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "domainName": {
            "description": "The name of the domain.",
            "type": "string",
            "pattern": "[\\s\\S]*",
            "minLength": 1,
            "maxLength": 253
          },
          "serverCertificateArns": {
            "description": "The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AcmCertificateArn"
            },
            "minItems": 0,
            "maxItems": 1
          },
          "validationCertificateArn": {
            "description": "The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.",
            "type": "string",
            "pattern": "arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\\d{1}:\\d{12}:certificate/[a-zA-Z0-9/-]+",
            "minLength": 1,
            "maxLength": 2048
          },
          "authorizerConfig": {
            "description": "An object that specifies the authorization service for a domain.",
            "type": "object",
            "properties": {
              "defaultAuthorizerName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AuthorizerName"
                  },
                  {
                    "description": "The name of the authorization service for a domain configuration."
                  }
                ]
              },
              "allowAuthorizerOverride": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AllowAuthorizerOverride"
                  },
                  {
                    "description": "A Boolean that specifies whether the domain configuration's authorization service can be overridden."
                  }
                ]
              }
            }
          },
          "serviceType": {
            "description": "<p>The type of service delivered by the endpoint.</p> <note> <p>Amazon Web Services IoT Core currently supports only the <code>DATA</code> service type.</p> </note>",
            "type": "string",
            "enum": [
              "DATA",
              "CREDENTIAL_PROVIDER",
              "JOBS"
            ]
          },
          "tags": {
            "description": "<p>Metadata which can be used to manage the domain configuration.</p> <note> <p>For URI Request parameters use format: ...key1=value1&amp;key2=value2...</p> <p>For the CLI command-line parameter use format: &amp;&amp;tags \"key1=value1&amp;key2=value2...\"</p> <p>For the cli-input-json file use format: \"tags\": \"key1=value1&amp;key2=value2...\"</p> </note>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            }
          },
          "tlsConfig": {
            "description": "An object that specifies the TLS configuration for a domain.",
            "type": "object",
            "properties": {
              "securityPolicy": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SecurityPolicy"
                  },
                  {
                    "description": "The security policy for a domain configuration. For more information, see <a href=\"https://docs.aws.amazon.com/iot/latest/developerguide/transport-security.html#tls-policy-table\">Security policies </a> in the <i>Amazon Web Services IoT Core developer guide</i>."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "domainConfigurationName",
      "body"
    ],
    "$defs": {
      "AcmCertificateArn": {
        "type": "string",
        "pattern": "arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\\d{1}:\\d{12}:certificate/[a-zA-Z0-9/-]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "AuthorizerName": {
        "type": "string",
        "pattern": "[\\w=,@-]+",
        "minLength": 1,
        "maxLength": 128
      },
      "AllowAuthorizerOverride": {
        "type": "boolean"
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "A set of key/value pairs that are used to manage the resource."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "SecurityPolicy": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iot.us-east-1.amazonaws.com/domainConfigurations/{domainConfigurationName}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**domainConfigurationName**",
            "**domainConfigurationArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
