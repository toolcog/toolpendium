{
  "name": "TestAuthorization",
  "description": "<p>Tests if a specified principal is authorized to perform an IoT action on a specified resource. Use this to test and debug the authorization behavior of devices that connect to the IoT device gateway.</p> <p>Requires permission to access the <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions\">TestAuthorization</a> action.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "clientId": {
        "type": "string",
        "description": "The MQTT client ID."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "authInfos"
        ],
        "properties": {
          "principal": {
            "description": "The principal. Valid principals are CertificateArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:cert/<i>certificateId</i>), thingGroupArn (arn:aws:iot:<i>region</i>:<i>accountId</i>:thinggroup/<i>groupName</i>) and CognitoId (<i>region</i>:<i>id</i>).",
            "type": "string"
          },
          "cognitoIdentityPoolId": {
            "description": "The Cognito identity pool ID.",
            "type": "string"
          },
          "authInfos": {
            "description": "A list of authorization info objects. Simulating authorization will create a response for each <code>authInfo</code> object in the list.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AuthInfo"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "policyNamesToAdd": {
            "description": "When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/PolicyName"
            }
          },
          "policyNamesToSkip": {
            "description": "When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/PolicyName"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "AuthInfo": {
        "type": "object",
        "required": [
          "resources"
        ],
        "properties": {
          "actionType": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionType"
              },
              {
                "description": "The type of action for which the principal is being authorized."
              }
            ]
          },
          "resources": {
            "allOf": [
              {
                "$ref": "#/$defs/Resources"
              },
              {
                "description": "The resources for which the principal is being authorized to perform the specified action."
              }
            ]
          }
        },
        "description": "A collection of authorization information."
      },
      "ActionType": {
        "type": "string",
        "enum": [
          "PUBLISH",
          "SUBSCRIBE",
          "RECEIVE",
          "CONNECT"
        ]
      },
      "Resources": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Resource"
        }
      },
      "Resource": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "maxLength": 2048
      },
      "PolicyName": {
        "type": "string",
        "pattern": "[\\w+=,.@-]+",
        "minLength": 1,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iot.us-east-1.amazonaws.com/test-authorization{?clientId}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**authResults**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
