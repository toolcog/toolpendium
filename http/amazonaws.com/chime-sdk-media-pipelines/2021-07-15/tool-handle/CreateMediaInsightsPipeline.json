{
  "name": "CreateMediaInsightsPipeline",
  "description": "Creates a media insights pipeline.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "MediaInsightsPipelineConfigurationArn"
        ],
        "properties": {
          "MediaInsightsPipelineConfigurationArn": {
            "description": "The ARN of the pipeline's configuration.",
            "type": "string",
            "pattern": "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$",
            "minLength": 1,
            "maxLength": 1024,
            "format": "password"
          },
          "KinesisVideoStreamSourceRuntimeConfiguration": {
            "description": "The runtime configuration settings for the Kinesis video stream source.",
            "type": "object",
            "properties": {
              "Streams": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Streams"
                  },
                  {
                    "description": "The streams in the source runtime configuration of a Kinesis video stream."
                  }
                ]
              },
              "MediaEncoding": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MediaEncoding"
                  },
                  {
                    "description": "<p>Specifies the encoding of your input audio. Supported format: PCM (only signed 16-bit little-endian audio formats, which does not include WAV)</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio\">Media formats</a> in the <i>Amazon Transcribe Developer Guide</i>.</p>"
                  }
                ]
              },
              "MediaSampleRate": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MediaSampleRateHertz"
                  },
                  {
                    "description": "<p>The sample rate of the input audio (in hertz). Low-quality audio, such as telephone audio, is typically around 8,000 Hz. High-quality audio typically ranges from 16,000 Hz to 48,000 Hz. Note that the sample rate you specify must match that of your audio.</p> <p>Valid Range: Minimum value of 8000. Maximum value of 48000.</p>"
                  }
                ]
              }
            }
          },
          "MediaInsightsRuntimeMetadata": {
            "description": "The runtime metadata for the media insights pipeline. Consists of a key-value map of strings.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          },
          "KinesisVideoStreamRecordingSourceRuntimeConfiguration": {
            "description": "A structure that contains the runtime settings for recording a Kinesis video stream.",
            "type": "object",
            "properties": {
              "Streams": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RecordingStreamList"
                  },
                  {
                    "description": "The stream or streams to be recorded."
                  }
                ]
              },
              "FragmentSelector": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FragmentSelector"
                  },
                  {
                    "description": "Describes the timestamp range and timestamp origin of a range of fragments in the Kinesis video stream."
                  }
                ]
              }
            }
          },
          "S3RecordingSinkRuntimeConfiguration": {
            "description": "A structure that holds the settings for transmitting media files to the Amazon S3 bucket. If specified, the settings in this structure override any settings in <code>S3RecordingSinkConfiguration</code>.",
            "type": "object",
            "properties": {
              "Destination": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The URI of the S3 bucket used as the sink."
                  }
                ]
              },
              "RecordingFileFormat": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RecordingFileFormat"
                  },
                  {
                    "description": "The file format for the media files sent to the Amazon S3 bucket."
                  }
                ]
              }
            }
          },
          "Tags": {
            "description": "The tags assigned to the media insights pipeline.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 1,
            "maxItems": 200
          },
          "ClientRequestToken": {
            "description": "The unique identifier for the media insights pipeline request.",
            "type": "string",
            "pattern": "[-_a-zA-Z0-9]*",
            "minLength": 2,
            "maxLength": 64,
            "format": "password"
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "Streams": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StreamConfiguration"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "StreamConfiguration": {
        "type": "object",
        "required": [
          "StreamArn",
          "StreamChannelDefinition"
        ],
        "properties": {
          "StreamArn": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisVideoStreamArn"
              },
              {
                "description": "The ARN of the stream."
              }
            ]
          },
          "FragmentNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/FragmentNumberString"
              },
              {
                "description": "The unique identifier of the fragment to begin processing."
              }
            ]
          },
          "StreamChannelDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamChannelDefinition"
              },
              {
                "description": "The streaming channel definition in the stream configuration."
              }
            ]
          }
        },
        "description": "The configuration settings for a stream."
      },
      "KinesisVideoStreamArn": {
        "type": "string",
        "pattern": "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+",
        "minLength": 1,
        "maxLength": 1024
      },
      "FragmentNumberString": {
        "type": "string",
        "pattern": "^[0-9]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "StreamChannelDefinition": {
        "type": "object",
        "required": [
          "NumberOfChannels"
        ],
        "properties": {
          "NumberOfChannels": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberOfChannels"
              },
              {
                "description": "The number of channels in a streaming channel."
              }
            ]
          },
          "ChannelDefinitions": {
            "allOf": [
              {
                "$ref": "#/$defs/ChannelDefinitions"
              },
              {
                "description": "The definitions of the channels in a streaming channel."
              }
            ]
          }
        },
        "description": "Defines a streaming channel."
      },
      "NumberOfChannels": {
        "type": "integer",
        "minimum": 1,
        "maximum": 2
      },
      "ChannelDefinitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ChannelDefinition"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "ChannelDefinition": {
        "type": "object",
        "required": [
          "ChannelId"
        ],
        "properties": {
          "ChannelId": {
            "allOf": [
              {
                "$ref": "#/$defs/ChannelId"
              },
              {
                "description": "The channel ID."
              }
            ]
          },
          "ParticipantRole": {
            "allOf": [
              {
                "$ref": "#/$defs/ParticipantRole"
              },
              {
                "description": "Specifies whether the audio in a channel belongs to the <code>AGENT</code> or <code>CUSTOMER</code>."
              }
            ]
          }
        },
        "description": "Defines an audio channel in a Kinesis video stream."
      },
      "ChannelId": {
        "type": "integer",
        "minimum": 0,
        "maximum": 1
      },
      "ParticipantRole": {
        "type": "string",
        "enum": [
          "AGENT",
          "CUSTOMER"
        ]
      },
      "MediaEncoding": {
        "type": "string",
        "enum": [
          "pcm"
        ]
      },
      "MediaSampleRateHertz": {
        "type": "integer",
        "minimum": 8000,
        "maximum": 48000
      },
      "String": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 4096
      },
      "RecordingStreamList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RecordingStreamConfiguration"
        },
        "minItems": 2,
        "maxItems": 2
      },
      "RecordingStreamConfiguration": {
        "type": "object",
        "properties": {
          "StreamArn": {
            "allOf": [
              {
                "$ref": "#/$defs/KinesisVideoStreamArn"
              },
              {
                "description": "The ARN of the recording stream."
              }
            ]
          }
        },
        "description": "A structure that holds the settings for recording media."
      },
      "FragmentSelector": {
        "type": "object",
        "required": [
          "FragmentSelectorType",
          "TimestampRange"
        ],
        "properties": {
          "FragmentSelectorType": {
            "allOf": [
              {
                "$ref": "#/$defs/FragmentSelectorType"
              },
              {
                "description": "The origin of the timestamps to use, <code>Server</code> or <code>Producer</code>. For more information, see <a href=\"kinesisvideostreams/latest/dg/API_dataplane_StartSelector.html#KinesisVideo-Type-dataplane_StartSelector-StartSelectorType\">StartSelectorType</a> in the <i>Amazon Kinesis Video Streams Developer Guide</i>."
              }
            ]
          },
          "TimestampRange": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestampRange"
              },
              {
                "description": "The range of timestamps to return."
              }
            ]
          }
        },
        "description": "<p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, say a stream contains fragments with the following start timestamps:</p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p>A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04.</p>"
      },
      "FragmentSelectorType": {
        "type": "string",
        "enum": [
          "ProducerTimestamp",
          "ServerTimestamp"
        ]
      },
      "TimestampRange": {
        "type": "object",
        "required": [
          "StartTimestamp",
          "EndTimestamp"
        ],
        "properties": {
          "StartTimestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The starting timestamp for the specified range."
              }
            ]
          },
          "EndTimestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The ending timestamp for the specified range."
              }
            ]
          }
        },
        "description": "The range of timestamps to return."
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "Arn": {
        "type": "string",
        "pattern": "^arn[\\/\\:\\-\\_\\.a-zA-Z0-9]+$",
        "minLength": 1,
        "maxLength": 1024,
        "format": "password"
      },
      "RecordingFileFormat": {
        "type": "string",
        "enum": [
          "Wav",
          "Opus"
        ]
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key half of a tag."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value half of a tag."
              }
            ]
          }
        },
        "description": "A key/value pair that grants users access to meeting resources."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://media-pipelines-chime.us-east-1.amazonaws.com/media-insights-pipelines"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**MediaInsightsPipeline**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
