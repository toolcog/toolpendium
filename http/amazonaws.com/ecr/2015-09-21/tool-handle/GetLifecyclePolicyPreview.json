{
  "name": "GetLifecyclePolicyPreview",
  "description": "Retrieves the results of the lifecycle policy preview request for the specified repository.",
  "parameters": {
    "type": "object",
    "properties": {
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/GetLifecyclePolicyPreviewRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "GetLifecyclePolicyPreviewRequest": {
        "type": "object",
        "required": [
          "repositoryName"
        ],
        "title": "GetLifecyclePolicyPreviewRequest",
        "properties": {
          "registryId": {
            "allOf": [
              {
                "$ref": "#/$defs/RegistryId"
              },
              {
                "description": "The Amazon Web Services account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed."
              }
            ]
          },
          "repositoryName": {
            "allOf": [
              {
                "$ref": "#/$defs/RepositoryName"
              },
              {
                "description": "The name of the repository."
              }
            ]
          },
          "imageIds": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageIdentifierList"
              },
              {
                "description": "The list of imageIDs to be included."
              }
            ]
          },
          "nextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/NextToken"
              },
              {
                "description": "The <code>nextToken</code> value returned from a previous paginated&#x2028; <code>GetLifecyclePolicyPreviewRequest</code> request where <code>maxResults</code> was used and the&#x2028; results exceeded the value of that parameter. Pagination continues from the end of the&#x2028; previous results that returned the <code>nextToken</code> value. This value is&#x2028; <code>null</code> when there are no more results to return. This option cannot be used when you specify images with <code>imageIds</code>."
              }
            ]
          },
          "maxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/LifecyclePreviewMaxResults"
              },
              {
                "description": "The maximum number of repository results returned by <code>GetLifecyclePolicyPreviewRequest</code> in&#x2028; paginated output. When this parameter is used, <code>GetLifecyclePolicyPreviewRequest</code> only returns&#x2028; <code>maxResults</code> results in a single page along with a <code>nextToken</code>&#x2028; response element. The remaining results of the initial request can be seen by sending&#x2028; another <code>GetLifecyclePolicyPreviewRequest</code> request with the returned <code>nextToken</code>&#x2028; value. This value can be between 1 and 1000. If this&#x2028; parameter is not used, then <code>GetLifecyclePolicyPreviewRequest</code> returns up to&#x2028; 100 results and a <code>nextToken</code> value, if&#x2028; applicable. This option cannot be used when you specify images with <code>imageIds</code>."
              }
            ]
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/$defs/LifecyclePolicyPreviewFilter"
              },
              {
                "description": "An optional parameter that filters results based on image tag status and all tags, if tagged."
              }
            ]
          }
        }
      },
      "RegistryId": {
        "type": "string",
        "pattern": "[0-9]{12}"
      },
      "RepositoryName": {
        "type": "string",
        "pattern": "(?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*",
        "minLength": 2,
        "maxLength": 256
      },
      "ImageIdentifierList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ImageIdentifier"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "ImageIdentifier": {
        "type": "object",
        "properties": {
          "imageDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageDigest"
              },
              {
                "description": "The <code>sha256</code> digest of the image manifest."
              }
            ]
          },
          "imageTag": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageTag"
              },
              {
                "description": "The tag used for the image."
              }
            ]
          }
        },
        "description": "An object with identifying information for an image in an Amazon ECR repository."
      },
      "ImageDigest": {
        "type": "string"
      },
      "ImageTag": {
        "type": "string",
        "minLength": 1,
        "maxLength": 300
      },
      "NextToken": {
        "type": "string"
      },
      "LifecyclePreviewMaxResults": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100
      },
      "LifecyclePolicyPreviewFilter": {
        "type": "object",
        "properties": {
          "tagStatus": {
            "allOf": [
              {
                "$ref": "#/$defs/TagStatus"
              },
              {
                "description": "The tag status of the image."
              }
            ]
          }
        },
        "description": "The filter for the lifecycle policy preview."
      },
      "TagStatus": {
        "type": "string",
        "enum": [
          "TAGGED",
          "UNTAGGED",
          "ANY"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.ecr.us-east-1.amazonaws.com/#X-Amz-Target=AmazonEC2ContainerRegistry_V20150921.GetLifecyclePolicyPreview{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**registryId**",
            "**repositoryName**",
            "**lifecyclePolicyText**",
            "**status**",
            "**nextToken**",
            "**previewResults**",
            "**summary**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
