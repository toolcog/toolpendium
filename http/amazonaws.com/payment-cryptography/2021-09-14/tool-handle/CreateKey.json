{
  "name": "CreateKey",
  "description": "<p>Creates an Amazon Web Services Payment Cryptography key, a logical representation of a cryptographic key, that is unique in your account and Amazon Web Services Region. You use keys for cryptographic functions such as encryption and decryption. </p> <p>In addition to the key material used in cryptographic operations, an Amazon Web Services Payment Cryptography key includes metadata such as the key ARN, key usage, key origin, creation date, description, and key state.</p> <p>When you create a key, you specify both immutable and mutable data about the key. The immutable data contains key attributes that defines the scope and cryptographic operations that you can perform using the key, for example key class (example: <code>SYMMETRIC_KEY</code>), key algorithm (example: <code>TDES_2KEY</code>), key usage (example: <code>TR31_P0_PIN_ENCRYPTION_KEY</code>) and key modes of use (example: <code>Encrypt</code>). For information about valid combinations of key attributes, see <a href=\"https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html\">Understanding key attributes</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>. The mutable data contained within a key includes usage timestamp and key deletion timestamp and can be modified after creation.</p> <p>Amazon Web Services Payment Cryptography binds key attributes to keys using key blocks when you store or export them. Amazon Web Services Payment Cryptography stores the key contents wrapped and never stores or transmits them in the clear. </p> <p> <b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p> <p> <b>Related operations:</b> </p> <ul> <li> <p> <a>DeleteKey</a> </p> </li> <li> <p> <a>GetKey</a> </p> </li> <li> <p> <a>ListKeys</a> </p> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "PaymentCryptographyControlPlane.CreateKey"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateKeyInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateKeyInput": {
        "type": "object",
        "required": [
          "Exportable",
          "KeyAttributes"
        ],
        "title": "CreateKeyInput",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether to enable the key. If the key is enabled, it is activated for use within the service. If the key not enabled, then it is created but not activated. The default value is enabled."
              }
            ]
          },
          "Exportable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the key is exportable from the service."
              }
            ]
          },
          "KeyAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyAttributes"
              },
              {
                "description": "The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created."
              }
            ]
          },
          "KeyCheckValueAlgorithm": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyCheckValueAlgorithm"
              },
              {
                "description": "<p>The algorithm that Amazon Web Services Payment Cryptography uses to calculate the key check value (KCV) for DES and AES keys.</p> <p>For DES key, the KCV is computed by encrypting 8 bytes, each with value '00', with the key to be checked and retaining the 3 highest order bytes of the encrypted result. For AES key, the KCV is computed by encrypting 8 bytes, each with value '01', with the key to be checked and retaining the 3 highest order bytes of the encrypted result.</p>"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/Tags"
              },
              {
                "description": "<p>The tags to attach to the key. Each tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You can't have more than one tag on an Amazon Web Services Payment Cryptography key with the same tag key. </p> <p>To use this parameter, you must have <code>TagResource</code> permission.</p> <important> <p>Don't include confidential or sensitive information in this field. This field may be displayed in plaintext in CloudTrail logs and other output.</p> </important> <note> <p>Tagging or untagging an Amazon Web Services Payment Cryptography key can allow or deny permission to the key.</p> </note>"
              }
            ]
          }
        }
      },
      "Boolean": {
        "type": "boolean"
      },
      "KeyAttributes": {
        "type": "object",
        "required": [
          "KeyAlgorithm",
          "KeyClass",
          "KeyModesOfUse",
          "KeyUsage"
        ],
        "properties": {
          "KeyAlgorithm": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyAlgorithm"
              },
              {
                "description": "<p>The key algorithm to be use during creation of an Amazon Web Services Payment Cryptography key.</p> <p>For symmetric keys, Amazon Web Services Payment Cryptography supports <code>AES</code> and <code>TDES</code> algorithms. For asymmetric keys, Amazon Web Services Payment Cryptography supports <code>RSA</code> and <code>ECC_NIST</code> algorithms.</p>"
              }
            ]
          },
          "KeyClass": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyClass"
              },
              {
                "description": "The type of Amazon Web Services Payment Cryptography key to create, which determines the classiﬁcation of the cryptographic method and whether Amazon Web Services Payment Cryptography key contains a symmetric key or an asymmetric key pair."
              }
            ]
          },
          "KeyModesOfUse": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyModesOfUse"
              },
              {
                "description": "The list of cryptographic operations that you can perform using the key."
              }
            ]
          },
          "KeyUsage": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyUsage"
              },
              {
                "description": "The cryptographic usage of an Amazon Web Services Payment Cryptography key as deﬁned in section A.5.2 of the TR-31 spec."
              }
            ]
          }
        },
        "description": "The role of the key, the algorithm it supports, and the cryptographic operations allowed with the key. This data is immutable after the key is created."
      },
      "KeyAlgorithm": {
        "type": "string",
        "enum": [
          "TDES_2KEY",
          "TDES_3KEY",
          "AES_128",
          "AES_192",
          "AES_256",
          "RSA_2048",
          "RSA_3072",
          "RSA_4096"
        ]
      },
      "KeyClass": {
        "type": "string",
        "enum": [
          "SYMMETRIC_KEY",
          "ASYMMETRIC_KEY_PAIR",
          "PRIVATE_KEY",
          "PUBLIC_KEY"
        ]
      },
      "KeyModesOfUse": {
        "type": "object",
        "properties": {
          "Decrypt": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to decrypt data."
              }
            ]
          },
          "DeriveKey": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to derive new keys."
              }
            ]
          },
          "Encrypt": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to encrypt data."
              }
            ]
          },
          "Generate": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to generate and verify other card and PIN verification keys."
              }
            ]
          },
          "NoRestrictions": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key has no special restrictions other than the restrictions implied by <code>KeyUsage</code>."
              }
            ]
          },
          "Sign": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used for signing."
              }
            ]
          },
          "Unwrap": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to unwrap other keys."
              }
            ]
          },
          "Verify": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to verify signatures."
              }
            ]
          },
          "Wrap": {
            "allOf": [
              {
                "$ref": "#/$defs/PrimitiveBoolean"
              },
              {
                "description": "Speciﬁes whether an Amazon Web Services Payment Cryptography key can be used to wrap other keys."
              }
            ]
          }
        },
        "description": "The list of cryptographic operations that you can perform using the key. The modes of use are deﬁned in section A.5.3 of the TR-31 spec."
      },
      "PrimitiveBoolean": {
        "type": "boolean"
      },
      "KeyUsage": {
        "type": "string",
        "enum": [
          "TR31_B0_BASE_DERIVATION_KEY",
          "TR31_C0_CARD_VERIFICATION_KEY",
          "TR31_D0_SYMMETRIC_DATA_ENCRYPTION_KEY",
          "TR31_D1_ASYMMETRIC_KEY_FOR_DATA_ENCRYPTION",
          "TR31_E0_EMV_MKEY_APP_CRYPTOGRAMS",
          "TR31_E1_EMV_MKEY_CONFIDENTIALITY",
          "TR31_E2_EMV_MKEY_INTEGRITY",
          "TR31_E4_EMV_MKEY_DYNAMIC_NUMBERS",
          "TR31_E5_EMV_MKEY_CARD_PERSONALIZATION",
          "TR31_E6_EMV_MKEY_OTHER",
          "TR31_K0_KEY_ENCRYPTION_KEY",
          "TR31_K1_KEY_BLOCK_PROTECTION_KEY",
          "TR31_K3_ASYMMETRIC_KEY_FOR_KEY_AGREEMENT",
          "TR31_M3_ISO_9797_3_MAC_KEY",
          "TR31_M6_ISO_9797_5_CMAC_KEY",
          "TR31_M7_HMAC_KEY",
          "TR31_P0_PIN_ENCRYPTION_KEY",
          "TR31_P1_PIN_GENERATION_KEY",
          "TR31_S0_ASYMMETRIC_KEY_FOR_DIGITAL_SIGNATURE",
          "TR31_V1_IBM3624_PIN_VERIFICATION_KEY",
          "TR31_V2_VISA_PIN_VERIFICATION_KEY",
          "TR31_K2_TR34_ASYMMETRIC_KEY"
        ]
      },
      "KeyCheckValueAlgorithm": {
        "type": "string",
        "enum": [
          "CMAC",
          "ANSI_X9_24"
        ]
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key of the tag."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the tag."
              }
            ]
          }
        },
        "description": "A structure that contains information about a tag."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://controlplane.payment-cryptography.us-east-1.amazonaws.com/#X-Amz-Target=PaymentCryptographyControlPlane.CreateKey"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Key**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
