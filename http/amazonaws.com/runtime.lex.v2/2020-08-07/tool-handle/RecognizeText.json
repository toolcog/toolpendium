{
  "name": "RecognizeText",
  "description": "<p>Sends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot.</p> <p>In response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display.</p> <p>If the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/API_PostFulfillmentStatusSpecification.html\">PostFulfillmentStatusSpecification</a>.</p> <ul> <li> <p> <b>Success message</b> - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.</p> </li> <li> <p> <b>Failed message</b> - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.</p> </li> <li> <p> <b>Timeout message</b> - If you don't configure a timeout message and a timeout, and the Lambda function doesn't return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out. </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/streaming-progress.html#progress-complete.html\">Completion message</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "botId": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z]+$",
        "minLength": 10,
        "maxLength": 10,
        "description": "The identifier of the bot that processes the request."
      },
      "botAliasId": {
        "type": "string",
        "description": "The alias identifier in use for the bot that processes the request."
      },
      "localeId": {
        "type": "string",
        "minLength": 1,
        "description": "The locale where the session is in use."
      },
      "sessionId": {
        "type": "string",
        "pattern": "[0-9a-zA-Z._:-]+",
        "minLength": 2,
        "maxLength": 100,
        "description": "The identifier of the user session that is having the conversation."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "description": "The text that the user entered. Amazon Lex V2 interprets this text.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024,
            "format": "password"
          },
          "sessionState": {
            "description": "The state of the user's session with Amazon Lex V2.",
            "type": "object",
            "properties": {
              "dialogAction": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DialogAction"
                  },
                  {
                    "description": "The next step that Amazon Lex V2 should take in the conversation with a user."
                  }
                ]
              },
              "intent": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Intent"
                  },
                  {
                    "description": "The active intent that Amazon Lex V2 is processing."
                  }
                ]
              },
              "activeContexts": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ActiveContextsList"
                  },
                  {
                    "description": "One or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session."
                  }
                ]
              },
              "sessionAttributes": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StringMap"
                  },
                  {
                    "description": "Map of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application."
                  }
                ]
              },
              "originatingRequestId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/NonEmptyString"
                  },
                  {
                    "description": "A unique identifier for a specific request."
                  }
                ]
              },
              "runtimeHints": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RuntimeHints"
                  },
                  {
                    "description": "Hints for phrases that a customer is likely to use for a slot. Amazon Lex V2 uses the hints to help determine the correct value of a slot."
                  }
                ]
              }
            }
          },
          "requestAttributes": {
            "description": "<p>Request-specific information passed between the client application and Amazon Lex V2 </p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          }
        }
      }
    },
    "required": [
      "botId",
      "botAliasId",
      "localeId",
      "sessionId",
      "body"
    ],
    "$defs": {
      "DialogAction": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/DialogActionType"
              },
              {
                "description": "<p>The next action that the bot should take in its interaction with the user. The possible values are:</p> <ul> <li> <p> <code>Close</code> - Indicates that there will not be a response from the user. For example, the statement \"Your order has been placed\" does not require a response.</p> </li> <li> <p> <code>ConfirmIntent</code> - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as \"Place the order?\"</p> </li> <li> <p> <code>Delegate</code> - The next action is determined by Amazon Lex V2.</p> </li> <li> <p> <code>ElicitIntent</code> - The next action is to elicit an intent from the user.</p> </li> <li> <p> <code>ElicitSlot</code> - The next action is to elicit a slot value from the user.</p> </li> </ul>"
              }
            ]
          },
          "slotToElicit": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The name of the slot that should be elicited from the user."
              }
            ]
          },
          "slotElicitationStyle": {
            "allOf": [
              {
                "$ref": "#/$defs/StyleType"
              },
              {
                "description": "<p>Configures the slot to use spell-by-letter or spell-by-word style. When you use a style on a slot, users can spell out their input to make it clear to your bot.</p> <ul> <li> <p>Spell by letter - \"b\" \"o\" \"b\"</p> </li> <li> <p>Spell by word - \"b as in boy\" \"o as in oscar\" \"b as in boy\"</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/using-spelling.html\"> Using spelling to enter slot values </a>.</p>"
              }
            ]
          },
          "subSlotToElicit": {
            "allOf": [
              {
                "$ref": "#/$defs/ElicitSubSlot"
              },
              {
                "description": "The name of the constituent sub slot of the composite slot specified in slotToElicit that should be elicited from the user."
              }
            ]
          }
        },
        "description": "The next action that Amazon Lex V2 should take."
      },
      "DialogActionType": {
        "type": "string",
        "enum": [
          "Close",
          "ConfirmIntent",
          "Delegate",
          "ElicitIntent",
          "ElicitSlot",
          "None"
        ]
      },
      "NonEmptyString": {
        "type": "string",
        "minLength": 1
      },
      "StyleType": {
        "type": "string",
        "enum": [
          "Default",
          "SpellByLetter",
          "SpellByWord"
        ]
      },
      "ElicitSubSlot": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The name of the slot that should be elicited from the user."
              }
            ]
          },
          "subSlotToElicit": {
            "allOf": [
              {
                "$ref": "#/$defs/ElicitSubSlot"
              },
              {
                "description": "The field is not supported."
              }
            ]
          }
        },
        "description": "The specific constituent sub slot of the composite slot to elicit in dialog action."
      },
      "Intent": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The name of the intent."
              }
            ]
          },
          "slots": {
            "allOf": [
              {
                "$ref": "#/$defs/Slots"
              },
              {
                "description": "A map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null."
              }
            ]
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/$defs/IntentState"
              },
              {
                "description": "Contains fulfillment information for the intent. "
              }
            ]
          },
          "confirmationState": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfirmationState"
              },
              {
                "description": "Contains information about whether fulfillment of the intent has been confirmed."
              }
            ]
          }
        },
        "description": "The current intent that Amazon Lex V2 is attempting to fulfill."
      },
      "Slots": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Slot"
        }
      },
      "Slot": {
        "type": "object",
        "properties": {
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/Value"
              },
              {
                "description": "The current value of the slot."
              }
            ]
          },
          "values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "A list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be \"pepperoni\" and \"pineapple.\" "
              }
            ]
          },
          "subSlots": {
            "allOf": [
              {
                "$ref": "#/$defs/Slots"
              },
              {
                "description": "The constituent sub slots of a composite slot."
              }
            ]
          }
        },
        "description": "A value that Amazon Lex V2 uses to fulfill an intent. "
      },
      "Value": {
        "type": "object",
        "required": [
          "interpretedValue"
        ],
        "properties": {
          "originalValue": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The text of the utterance from the user that was entered for the slot."
              }
            ]
          },
          "interpretedValue": {
            "allOf": [
              {
                "$ref": "#/$defs/NonEmptyString"
              },
              {
                "description": "The value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the <code>resolvedValues</code> list."
              }
            ]
          },
          "resolvedValues": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "A list of additional values that have been recognized for the slot."
              }
            ]
          }
        },
        "description": "The value of a slot."
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonEmptyString"
        }
      },
      "Values": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Slot"
        }
      },
      "IntentState": {
        "type": "string",
        "enum": [
          "Failed",
          "Fulfilled",
          "InProgress",
          "ReadyForFulfillment",
          "Waiting",
          "FulfillmentInProgress"
        ]
      },
      "ConfirmationState": {
        "type": "string",
        "enum": [
          "Confirmed",
          "Denied",
          "None"
        ]
      },
      "ActiveContextsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ActiveContext"
        },
        "minItems": 0,
        "maxItems": 20
      },
      "ActiveContext": {
        "type": "object",
        "required": [
          "name",
          "timeToLive",
          "contextAttributes"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextName"
              },
              {
                "description": "The name of the context."
              }
            ]
          },
          "timeToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTimeToLive"
              },
              {
                "description": "Indicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response."
              }
            ]
          },
          "contextAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextParametersMap"
              },
              {
                "description": "<p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.</p> <p>If you don't specify a list of contexts, Amazon Lex V2 will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared. </p>"
              }
            ]
          }
        },
        "description": "<p>Contains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.</p> <p>Use a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is <code>order-fulfilled</code>, only intents that have <code>order-fulfilled</code> configured as a trigger are considered for follow up.</p>"
      },
      "ActiveContextName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "ActiveContextTimeToLive": {
        "type": "object",
        "required": [
          "timeToLiveInSeconds",
          "turnsToLive"
        ],
        "properties": {
          "timeToLiveInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTimeToLiveInSeconds"
              },
              {
                "description": "The number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours)."
              }
            ]
          },
          "turnsToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ActiveContextTurnsToLive"
              },
              {
                "description": "The number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn."
              }
            ]
          }
        },
        "description": "The time that a context is active. You can specify the time to live in seconds or in conversation turns."
      },
      "ActiveContextTimeToLiveInSeconds": {
        "type": "integer",
        "minimum": 5,
        "maximum": 86400
      },
      "ActiveContextTurnsToLive": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "ActiveContextParametersMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 10,
        "additionalProperties": {
          "$ref": "#/$defs/Text"
        }
      },
      "Text": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "format": "password"
      },
      "StringMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "RuntimeHints": {
        "type": "object",
        "properties": {
          "slotHints": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotHintsIntentMap"
              },
              {
                "description": "<p>A list of the slots in the intent that should have runtime hints added, and the phrases that should be added for each slot.</p> <p>The first level of the <code>slotHints</code> map is the name of the intent. The second level is the name of the slot within the intent. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html\">Using hints to improve accuracy</a>.</p> <p>The intent name and slot name must exist.</p>"
              }
            ]
          }
        },
        "description": "<p>You can provide Amazon Lex V2 with hints to the phrases that a customer is likely to use for a slot. When a slot with hints is resolved, the phrases in the runtime hints are preferred in the resolution. You can provide hints for a maximum of 100 intents. You can provide a maximum of 100 slots.</p> <p>Before you can use runtime hints with an existing bot, you must first rebuild the bot.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/using-hints.html\">Using runtime hints to improve recognition of slot values</a>.</p>"
      },
      "SlotHintsIntentMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/SlotHintsSlotMap"
        }
      },
      "SlotHintsSlotMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/RuntimeHintDetails"
        }
      },
      "RuntimeHintDetails": {
        "type": "object",
        "properties": {
          "runtimeHintValues": {
            "allOf": [
              {
                "$ref": "#/$defs/RuntimeHintValuesList"
              },
              {
                "description": "One or more strings that Amazon Lex V2 should look for in the input to the bot. Each phrase is given preference when deciding on slot values."
              }
            ]
          },
          "subSlotHints": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotHintsSlotMap"
              },
              {
                "description": "A map of constituent sub slot names inside a composite slot in the intent and the phrases that should be added for each sub slot. Inside each composite slot hints, this structure provides a mechanism to add granular sub slot phrases. Only sub slot hints are supported for composite slots. The intent name, composite slot name and the constituent sub slot names must exist."
              }
            ]
          }
        },
        "description": "Provides an array of phrases that should be given preference when resolving values for a slot."
      },
      "RuntimeHintValuesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RuntimeHintValue"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "RuntimeHintValue": {
        "type": "object",
        "required": [
          "phrase"
        ],
        "properties": {
          "phrase": {
            "allOf": [
              {
                "$ref": "#/$defs/RuntimeHintPhrase"
              },
              {
                "description": "The phrase that Amazon Lex V2 should look for in the user's input to the bot."
              }
            ]
          }
        },
        "description": "Provides the phrase that Amazon Lex V2 should look for in the user's input to the bot."
      },
      "RuntimeHintPhrase": {
        "type": "string",
        "minLength": 1,
        "maxLength": 140
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://runtime-v2-lex.us-east-1.amazonaws.com/bots/{botId}/botAliases/{botAliasId}/botLocales/{localeId}/sessions/{sessionId}/text"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**messages**",
            "**sessionState**",
            "**interpretations**",
            "**requestAttributes**",
            "**sessionId**",
            "**recognizedBotMember**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
