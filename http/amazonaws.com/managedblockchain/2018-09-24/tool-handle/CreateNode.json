{
  "name": "CreateNode",
  "description": "<p>Creates a node on the specified blockchain network.</p> <p>Applies to Hyperledger Fabric and Ethereum.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "networkId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 32,
        "description": "<p>The unique identifier of the network for the node.</p> <p>Ethereum public networks have the following <code>NetworkId</code>s:</p> <ul> <li> <p> <code>n-ethereum-mainnet</code> </p> </li> <li> <p> <code>n-ethereum-goerli</code> </p> </li> <li> <p> <code>n-ethereum-rinkeby</code> </p> </li> </ul>"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "ClientRequestToken",
          "NodeConfiguration"
        ],
        "properties": {
          "ClientRequestToken": {
            "description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time. This identifier is required only if you make a service request directly using an HTTP client. It is generated automatically if you use an Amazon Web Services SDK or the CLI.",
            "type": "string",
            "minLength": 1,
            "maxLength": 64
          },
          "MemberId": {
            "description": "<p>The unique identifier of the member that owns this node.</p> <p>Applies only to Hyperledger Fabric.</p>",
            "type": "string",
            "minLength": 1,
            "maxLength": 32
          },
          "NodeConfiguration": {
            "description": "Configuration properties of a node.",
            "type": "object",
            "properties": {
              "InstanceType": {
                "allOf": [
                  {
                    "$ref": "#/$defs/InstanceTypeString"
                  },
                  {
                    "description": "The Amazon Managed Blockchain instance type for the node."
                  }
                ]
              },
              "AvailabilityZone": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AvailabilityZoneString"
                  },
                  {
                    "description": "The Availability Zone in which the node exists. Required for Ethereum nodes. "
                  }
                ]
              },
              "LogPublishingConfiguration": {
                "allOf": [
                  {
                    "$ref": "#/$defs/NodeLogPublishingConfiguration"
                  },
                  {
                    "description": "Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain. "
                  }
                ]
              },
              "StateDB": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StateDBType"
                  },
                  {
                    "description": "<p>The state database that the node uses. Values are <code>LevelDB</code> or <code>CouchDB</code>. When using an Amazon Managed Blockchain network with Hyperledger Fabric version 1.4 or later, the default is <code>CouchDB</code>.</p> <p>Applies only to Hyperledger Fabric.</p>"
                  }
                ]
              }
            }
          },
          "Tags": {
            "description": "<p>Tags to assign to the node.</p> <p> Each tag consists of a key and an optional value. You can specify multiple key-value pairs in a single request with an overall maximum of 50 tags allowed per resource.</p> <p>For more information about tags, see <a href=\"https://docs.aws.amazon.com/managed-blockchain/latest/ethereum-dev/tagging-resources.html\">Tagging Resources</a> in the <i>Amazon Managed Blockchain Ethereum Developer Guide</i>, or <a href=\"https://docs.aws.amazon.com/managed-blockchain/latest/hyperledger-fabric-dev/tagging-resources.html\">Tagging Resources</a> in the <i>Amazon Managed Blockchain Hyperledger Fabric Developer Guide</i>.</p>",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 50,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "networkId",
      "body"
    ],
    "$defs": {
      "InstanceTypeString": {
        "type": "string"
      },
      "AvailabilityZoneString": {
        "type": "string"
      },
      "NodeLogPublishingConfiguration": {
        "type": "object",
        "properties": {
          "Fabric": {
            "allOf": [
              {
                "$ref": "#/$defs/NodeFabricLogPublishingConfiguration"
              },
              {
                "description": "Configuration properties for logging events associated with a node that is owned by a member of a Managed Blockchain network using the Hyperledger Fabric framework."
              }
            ]
          }
        },
        "description": "Configuration properties for logging events associated with a peer node on a Hyperledger Fabric network on Managed Blockchain."
      },
      "NodeFabricLogPublishingConfiguration": {
        "type": "object",
        "properties": {
          "ChaincodeLogs": {
            "allOf": [
              {
                "$ref": "#/$defs/LogConfigurations"
              },
              {
                "description": "Configuration properties for logging events associated with chaincode execution on a peer node. Chaincode logs contain the results of instantiating, invoking, and querying the chaincode. A peer can run multiple instances of chaincode. When enabled, a log stream is created for all chaincodes, with an individual log stream for each chaincode."
              }
            ]
          },
          "PeerLogs": {
            "allOf": [
              {
                "$ref": "#/$defs/LogConfigurations"
              },
              {
                "description": "Configuration properties for a peer node log. Peer node logs contain messages generated when your client submits transaction proposals to peer nodes, requests to join channels, enrolls an admin peer, and lists the chaincode instances on a peer node. "
              }
            ]
          }
        },
        "description": "Configuration properties for logging events associated with a peer node owned by a member in a Managed Blockchain network."
      },
      "LogConfigurations": {
        "type": "object",
        "properties": {
          "Cloudwatch": {
            "allOf": [
              {
                "$ref": "#/$defs/LogConfiguration"
              },
              {
                "description": "Parameters for publishing logs to Amazon CloudWatch Logs."
              }
            ]
          }
        },
        "description": "A collection of log configurations."
      },
      "LogConfiguration": {
        "type": "object",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Enabled"
              },
              {
                "description": "Indicates whether logging is enabled."
              }
            ]
          }
        },
        "description": "A configuration for logging events."
      },
      "Enabled": {
        "type": "boolean"
      },
      "StateDBType": {
        "type": "string",
        "enum": [
          "LevelDB",
          "CouchDB"
        ]
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://managedblockchain.us-east-1.amazonaws.com/networks/{networkId}/nodes"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**NodeId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
