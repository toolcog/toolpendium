{
  "name": "RunJobFlow",
  "description": "<p>RunJobFlow creates and starts running a new cluster (job flow). The cluster runs the steps specified. After the steps complete, the cluster stops and the HDFS partition is lost. To prevent loss of data, configure the last step of the job flow to store results in Amazon S3. If the <a>JobFlowInstancesConfig</a> <code>KeepJobFlowAliveWhenNoSteps</code> parameter is set to <code>TRUE</code>, the cluster transitions to the WAITING state rather than shutting down after the steps have completed. </p> <p>For additional protection, you can set the <a>JobFlowInstancesConfig</a> <code>TerminationProtected</code> parameter to <code>TRUE</code> to lock the cluster and prevent it from being terminated by API call, user intervention, or in the event of a job flow error.</p> <p>A maximum of 256 steps are allowed in each job flow.</p> <p>If your cluster is long-running (such as a Hive data warehouse) or complex, you may require more than 256 steps to process your data. You can bypass the 256-step limitation in various ways, including using the SSH shell to connect to the master node and submitting queries directly to the software running on the master node, such as Hive and Hadoop.</p> <p>For long-running clusters, we recommend that you periodically store your results.</p> <note> <p>The instance fleets configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. The RunJobFlow request can contain InstanceFleets parameters or InstanceGroups parameters, but not both.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "ElasticMapReduce.RunJobFlow"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/RunJobFlowInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "RunJobFlowInput": {
        "type": "object",
        "required": [
          "Name",
          "Instances"
        ],
        "title": "RunJobFlowInput",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The name of the job flow."
              }
            ]
          },
          "LogUri": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The location in Amazon S3 to write the log files of the job flow. If a value is not provided, logs are not created."
              }
            ]
          },
          "LogEncryptionKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The KMS key used for encrypting log files. If a value is not provided, the logs remain encrypted by AES-256. This attribute is only available with Amazon EMR releases 5.30.0 and later, excluding Amazon EMR 6.0.0."
              }
            ]
          },
          "AdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "A JSON string for selecting additional features."
              }
            ]
          },
          "AmiVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Applies only to Amazon EMR AMI versions 3.x and 2.x. For Amazon EMR releases 4.0 and later, <code>ReleaseLabel</code> is used. To specify a custom AMI, use <code>CustomAmiID</code>."
              }
            ]
          },
          "ReleaseLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The Amazon EMR release label, which determines the version of open-source application packages installed on the cluster. Release labels are in the form <code>emr-x.x.x</code>, where x.x.x is an Amazon EMR release version such as <code>emr-5.14.0</code>. For more information about Amazon EMR release versions and included application versions and features, see <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/\">https://docs.aws.amazon.com/emr/latest/ReleaseGuide/</a>. The release label applies only to Amazon EMR releases version 4.0 and later. Earlier versions use <code>AmiVersion</code>."
              }
            ]
          },
          "Instances": {
            "allOf": [
              {
                "$ref": "#/$defs/JobFlowInstancesConfig"
              },
              {
                "description": "A specification of the number and type of Amazon EC2 instances."
              }
            ]
          },
          "Steps": {
            "allOf": [
              {
                "$ref": "#/$defs/StepConfigList"
              },
              {
                "description": "A list of steps to run."
              }
            ]
          },
          "BootstrapActions": {
            "allOf": [
              {
                "$ref": "#/$defs/BootstrapActionConfigList"
              },
              {
                "description": "A list of bootstrap actions to run before Hadoop starts on the cluster nodes."
              }
            ]
          },
          "SupportedProducts": {
            "allOf": [
              {
                "$ref": "#/$defs/SupportedProductsList"
              },
              {
                "description": "<note> <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.</p> </note> <p>A list of strings that indicates third-party software to use. For more information, see the <a href=\"https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf\">Amazon EMR Developer Guide</a>. Currently supported values are:</p> <ul> <li> <p>\"mapr-m3\" - launch the job flow using MapR M3 Edition.</p> </li> <li> <p>\"mapr-m5\" - launch the job flow using MapR M5 Edition.</p> </li> </ul>"
              }
            ]
          },
          "NewSupportedProducts": {
            "allOf": [
              {
                "$ref": "#/$defs/NewSupportedProductsList"
              },
              {
                "description": "<note> <p>For Amazon EMR releases 3.x and 2.x. For Amazon EMR releases 4.x and later, use Applications.</p> </note> <p>A list of strings that indicates third-party software to use with the job flow that accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action arguments. For more information, see \"Launch a Job Flow on the MapR Distribution for Hadoop\" in the <a href=\"https://docs.aws.amazon.com/emr/latest/DeveloperGuide/emr-dg.pdf\">Amazon EMR Developer Guide</a>. Supported values are:</p> <ul> <li> <p>\"mapr-m3\" - launch the cluster using MapR M3 Edition.</p> </li> <li> <p>\"mapr-m5\" - launch the cluster using MapR M5 Edition.</p> </li> <li> <p>\"mapr\" with the user arguments specifying \"--edition,m3\" or \"--edition,m5\" - launch the job flow using MapR M3 or M5 Edition respectively.</p> </li> <li> <p>\"mapr-m7\" - launch the cluster using MapR M7 Edition.</p> </li> <li> <p>\"hunk\" - launch the cluster with the Hunk Big Data Analytics Platform.</p> </li> <li> <p>\"hue\"- launch the cluster with Hue installed.</p> </li> <li> <p>\"spark\" - launch the cluster with Apache Spark installed.</p> </li> <li> <p>\"ganglia\" - launch the cluster with the Ganglia Monitoring System installed.</p> </li> </ul>"
              }
            ]
          },
          "Applications": {
            "allOf": [
              {
                "$ref": "#/$defs/ApplicationList"
              },
              {
                "description": "Applies to Amazon EMR releases 4.0 and later. A case-insensitive list of applications for Amazon EMR to install and configure when launching the cluster. For a list of applications available for each Amazon EMR release version, see the <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/\">Amazon EMRRelease Guide</a>."
              }
            ]
          },
          "Configurations": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationList"
              },
              {
                "description": "For Amazon EMR releases 4.0 and later. The list of configurations supplied for the Amazon EMR cluster that you are creating."
              }
            ]
          },
          "VisibleToAllUsers": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<important> <p>The VisibleToAllUsers parameter is no longer supported. By default, the value is set to <code>true</code>. Setting it to <code>false</code> now has no effect.</p> </important> <p>Set this value to <code>true</code> so that IAM principals in the Amazon Web Services account associated with the cluster can perform Amazon EMR actions on the cluster that their IAM policies allow. This value defaults to <code>true</code> for clusters created using the Amazon EMR API or the CLI <a href=\"https://docs.aws.amazon.com/cli/latest/reference/emr/create-cluster.html\">create-cluster</a> command.</p> <p>When set to <code>false</code>, only the IAM principal that created the cluster and the Amazon Web Services account root user can perform Amazon EMR actions for the cluster, regardless of the IAM permissions policies attached to other IAM principals. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/security_IAM_emr-with-IAM.html#security_set_visible_to_all_users\">Understanding the Amazon EMR cluster VisibleToAllUsers setting</a> in the <i>Amazon EMR Management Guide</i>.</p>"
              }
            ]
          },
          "JobFlowRole": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "Also called instance profile and Amazon EC2 role. An IAM role for an Amazon EMR cluster. The Amazon EC2 instances of the cluster assume this role. The default role is <code>EMR_EC2_DefaultRole</code>. In order to use the default role, you must have already created it using the CLI or console."
              }
            ]
          },
          "ServiceRole": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The IAM role that Amazon EMR assumes in order to access Amazon Web Services resources on your behalf. If you've created a custom service role path, you must specify it for the service role when you launch your cluster."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "A list of tags to associate with a cluster and propagate to Amazon EC2 instances."
              }
            ]
          },
          "SecurityConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The name of a security configuration to apply to the cluster."
              }
            ]
          },
          "AutoScalingRole": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "An IAM role for automatic scaling policies. The default role is <code>EMR_AutoScaling_DefaultRole</code>. The IAM role provides permissions that the automatic scaling feature requires to launch and terminate Amazon EC2 instances in an instance group."
              }
            ]
          },
          "ScaleDownBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/ScaleDownBehavior"
              },
              {
                "description": "Specifies the way that individual Amazon EC2 instances terminate when an automatic scale-in activity occurs or an instance group is resized. <code>TERMINATE_AT_INSTANCE_HOUR</code> indicates that Amazon EMR terminates nodes at the instance-hour boundary, regardless of when the request to terminate the instance was submitted. This option is only available with Amazon EMR 5.1.0 and later and is the default for clusters created using that version. <code>TERMINATE_AT_TASK_COMPLETION</code> indicates that Amazon EMR adds nodes to a deny list and drains tasks from nodes before terminating the Amazon EC2 instances, regardless of the instance-hour boundary. With either behavior, Amazon EMR removes the least active nodes first and blocks instance termination if it could lead to HDFS corruption. <code>TERMINATE_AT_TASK_COMPLETION</code> available only in Amazon EMR releases 4.1.0 and later, and is the default for releases of Amazon EMR earlier than 5.1.0."
              }
            ]
          },
          "CustomAmiId": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "<p>Available only in Amazon EMR releases 5.7.0 and later. The ID of a custom Amazon EBS-backed Linux AMI. If specified, Amazon EMR uses this AMI when it launches cluster Amazon EC2 instances. For more information about custom AMIs in Amazon EMR, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-custom-ami.html\">Using a Custom AMI</a> in the <i>Amazon EMR Management Guide</i>. If omitted, the cluster uses the base Linux AMI for the <code>ReleaseLabel</code> specified. For Amazon EMR releases 2.x and 3.x, use <code>AmiVersion</code> instead.</p> <p>For information about creating a custom AMI, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html\">Creating an Amazon EBS-Backed Linux AMI</a> in the <i>Amazon Elastic Compute Cloud User Guide for Linux Instances</i>. For information about finding an AMI ID, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html\">Finding a Linux AMI</a>. </p>"
              }
            ]
          },
          "EbsRootVolumeSize": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The size, in GiB, of the Amazon EBS root device volume of the Linux AMI that is used for each Amazon EC2 instance. Available in Amazon EMR releases 4.x and later."
              }
            ]
          },
          "RepoUpgradeOnBoot": {
            "allOf": [
              {
                "$ref": "#/$defs/RepoUpgradeOnBoot"
              },
              {
                "description": "Applies only when <code>CustomAmiID</code> is used. Specifies which updates from the Amazon Linux AMI package repositories to apply automatically when the instance boots using the AMI. If omitted, the default is <code>SECURITY</code>, which indicates that only security updates are applied. If <code>NONE</code> is specified, no updates are applied, and all updates must be applied manually."
              }
            ]
          },
          "KerberosAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/KerberosAttributes"
              },
              {
                "description": "Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html\">Use Kerberos Authentication</a> in the <i>Amazon EMR Management Guide</i>."
              }
            ]
          },
          "StepConcurrencyLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Specifies the number of steps that can be executed concurrently. The default value is <code>1</code>. The maximum value is <code>256</code>."
              }
            ]
          },
          "ManagedScalingPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ManagedScalingPolicy"
              },
              {
                "description": " The specified managed scaling policy for an Amazon EMR cluster. "
              }
            ]
          },
          "PlacementGroupConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/PlacementGroupConfigList"
              },
              {
                "description": "The specified placement group configuration for an Amazon EMR cluster."
              }
            ]
          },
          "AutoTerminationPolicy": {
            "$ref": "#/$defs/AutoTerminationPolicy"
          },
          "OSReleaseLabel": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Specifies a particular Amazon Linux release for all nodes in a cluster launch RunJobFlow request. If a release is not specified, Amazon EMR uses the latest validated Amazon Linux release for cluster launch."
              }
            ]
          }
        },
        "description": " Input to the <a>RunJobFlow</a> operation. "
      },
      "XmlStringMaxLen256": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "XmlString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 10280,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "JobFlowInstancesConfig": {
        "type": "object",
        "properties": {
          "MasterInstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceType"
              },
              {
                "description": "The Amazon EC2 instance type of the master node."
              }
            ]
          },
          "SlaveInstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceType"
              },
              {
                "description": "The Amazon EC2 instance type of the core and task nodes."
              }
            ]
          },
          "InstanceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The number of Amazon EC2 instances in the cluster."
              }
            ]
          },
          "InstanceGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceGroupConfigList"
              },
              {
                "description": "Configuration for the instance groups in a cluster."
              }
            ]
          },
          "InstanceFleets": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceFleetConfigList"
              },
              {
                "description": "<note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.</p> </note> <p>Describes the Amazon EC2 instances and instance configurations for clusters that use the instance fleet configuration.</p>"
              }
            ]
          },
          "Ec2KeyName": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The name of the Amazon EC2 key pair that can be used to connect to the master node using SSH as the user called \"hadoop.\""
              }
            ]
          },
          "Placement": {
            "allOf": [
              {
                "$ref": "#/$defs/PlacementType"
              },
              {
                "description": "The Availability Zone in which the cluster runs."
              }
            ]
          },
          "KeepJobFlowAliveWhenNoSteps": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether the cluster should remain available after completing all steps. Defaults to <code>true</code>. For more information about configuring cluster termination, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html\">Control Cluster Termination</a> in the <i>EMR Management Guide</i>."
              }
            ]
          },
          "TerminationProtected": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether to lock the cluster to prevent the Amazon EC2 instances from being terminated by API call, user intervention, or in the event of a job-flow error."
              }
            ]
          },
          "HadoopVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Applies only to Amazon EMR release versions earlier than 4.0. The Hadoop version for the cluster. Valid inputs are \"0.18\" (no longer maintained), \"0.20\" (no longer maintained), \"0.20.205\" (no longer maintained), \"1.0.3\", \"2.2.0\", or \"2.4.0\". If you do not set this value, the default of 0.18 is used, unless the <code>AmiVersion</code> parameter is set in the RunJobFlow call, in which case the default version of Hadoop for that AMI version is used."
              }
            ]
          },
          "Ec2SubnetId": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Applies to clusters that use the uniform instance group configuration. To launch the cluster in Amazon Virtual Private Cloud (Amazon VPC), set this parameter to the identifier of the Amazon VPC subnet where you want the cluster to launch. If you do not specify this value and your account supports EC2-Classic, the cluster launches in EC2-Classic."
              }
            ]
          },
          "Ec2SubnetIds": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256List"
              },
              {
                "description": "<p>Applies to clusters that use the instance fleet configuration. When multiple Amazon EC2 subnet IDs are specified, Amazon EMR evaluates them and launches instances in the optimal subnet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.</p> </note>"
              }
            ]
          },
          "EmrManagedMasterSecurityGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The identifier of the Amazon EC2 security group for the master node. If you specify <code>EmrManagedMasterSecurityGroup</code>, you must also specify <code>EmrManagedSlaveSecurityGroup</code>."
              }
            ]
          },
          "EmrManagedSlaveSecurityGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The identifier of the Amazon EC2 security group for the core and task nodes. If you specify <code>EmrManagedSlaveSecurityGroup</code>, you must also specify <code>EmrManagedMasterSecurityGroup</code>."
              }
            ]
          },
          "ServiceAccessSecurityGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The identifier of the Amazon EC2 security group for the Amazon EMR service to access clusters in VPC private subnets."
              }
            ]
          },
          "AdditionalMasterSecurityGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroupsList"
              },
              {
                "description": "A list of additional Amazon EC2 security group IDs for the master node."
              }
            ]
          },
          "AdditionalSlaveSecurityGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroupsList"
              },
              {
                "description": "A list of additional Amazon EC2 security group IDs for the core and task nodes."
              }
            ]
          }
        },
        "description": "A description of the Amazon EC2 instance on which the cluster (job flow) runs. A valid JobFlowInstancesConfig must contain either InstanceGroups or InstanceFleets. They cannot be used together. You may also have MasterInstanceType, SlaveInstanceType, and InstanceCount (all three must be present), but we don't recommend this configuration."
      },
      "InstanceType": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "Integer": {
        "type": "integer"
      },
      "InstanceGroupConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InstanceGroupConfig"
        }
      },
      "InstanceGroupConfig": {
        "type": "object",
        "required": [
          "InstanceRole",
          "InstanceType",
          "InstanceCount"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Friendly name given to the instance group."
              }
            ]
          },
          "Market": {
            "allOf": [
              {
                "$ref": "#/$defs/MarketType"
              },
              {
                "description": "Market type of the Amazon EC2 instances used to create a cluster node."
              }
            ]
          },
          "InstanceRole": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceRoleType"
              },
              {
                "description": "The role of the instance group in the cluster."
              }
            ]
          },
          "BidPrice": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "If specified, indicates that the instance group uses Spot Instances. This is the maximum price you are willing to pay for Spot Instances. Specify <code>OnDemandPrice</code> to set the amount equal to the On-Demand price, or specify an amount in USD."
              }
            ]
          },
          "InstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceType"
              },
              {
                "description": "The Amazon EC2 instance type for all instances in the instance group."
              }
            ]
          },
          "InstanceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Target number of instances for the instance group."
              }
            ]
          },
          "Configurations": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationList"
              },
              {
                "description": "<note> <p>Amazon EMR releases 4.x or later.</p> </note> <p>The list of configurations supplied for an Amazon EMR cluster instance group. You can specify a separate configuration for each instance group (master, core, and task).</p>"
              }
            ]
          },
          "EbsConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EbsConfiguration"
              },
              {
                "description": "EBS configurations that will be attached to each Amazon EC2 instance in the instance group."
              }
            ]
          },
          "AutoScalingPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoScalingPolicy"
              },
              {
                "description": "An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>."
              }
            ]
          },
          "CustomAmiId": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The custom AMI ID to use for the provisioned instance group."
              }
            ]
          }
        },
        "description": "Configuration defining a new instance group."
      },
      "MarketType": {
        "type": "string",
        "enum": [
          "ON_DEMAND",
          "SPOT"
        ]
      },
      "InstanceRoleType": {
        "type": "string",
        "enum": [
          "MASTER",
          "CORE",
          "TASK"
        ]
      },
      "ConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Configuration"
        }
      },
      "Configuration": {
        "type": "object",
        "properties": {
          "Classification": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The classification within a configuration."
              }
            ]
          },
          "Configurations": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationList"
              },
              {
                "description": "A list of additional configurations to apply within a configuration object."
              }
            ]
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/$defs/StringMap"
              },
              {
                "description": "A set of properties specified within a configuration classification."
              }
            ]
          }
        },
        "description": "<note> <p>Amazon EMR releases 4.x or later.</p> </note> <p>An optional configuration specification to be used when provisioning cluster instances, which can include configurations for applications and software bundled with Amazon EMR. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html\">Configuring Applications</a>.</p>"
      },
      "String": {
        "type": "string"
      },
      "StringMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "EbsConfiguration": {
        "type": "object",
        "properties": {
          "EbsBlockDeviceConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/EbsBlockDeviceConfigList"
              },
              {
                "description": "An array of Amazon EBS volume specifications attached to a cluster instance."
              }
            ]
          },
          "EbsOptimized": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanObject"
              },
              {
                "description": "Indicates whether an Amazon EBS volume is EBS-optimized."
              }
            ]
          }
        },
        "description": "The Amazon EBS configuration of a cluster instance."
      },
      "EbsBlockDeviceConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EbsBlockDeviceConfig"
        }
      },
      "EbsBlockDeviceConfig": {
        "type": "object",
        "required": [
          "VolumeSpecification"
        ],
        "properties": {
          "VolumeSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/VolumeSpecification"
              },
              {
                "description": "EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster."
              }
            ]
          },
          "VolumesPerInstance": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Number of EBS volumes with a specific volume configuration that are associated with every instance in the instance group"
              }
            ]
          }
        },
        "description": "Configuration of requested EBS block device associated with the instance group with count of volumes that are associated to every instance."
      },
      "VolumeSpecification": {
        "type": "object",
        "required": [
          "VolumeType",
          "SizeInGB"
        ],
        "properties": {
          "VolumeType": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The volume type. Volume types supported are gp3, gp2, io1, st1, sc1, and standard."
              }
            ]
          },
          "Iops": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The number of I/O operations per second (IOPS) that the volume supports."
              }
            ]
          },
          "SizeInGB": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10."
              }
            ]
          },
          "Throughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ThroughputVal"
              },
              {
                "description": "The throughput, in mebibyte per second (MiB/s). This optional parameter can be a number from 125 - 1000 and is valid only for gp3 volumes."
              }
            ]
          }
        },
        "description": "EBS volume specifications such as volume type, IOPS, size (GiB) and throughput (MiB/s) that are requested for the EBS volume attached to an Amazon EC2 instance in the cluster."
      },
      "ThroughputVal": {
        "type": "integer",
        "minimum": 0
      },
      "BooleanObject": {
        "type": "boolean"
      },
      "AutoScalingPolicy": {
        "type": "object",
        "required": [
          "Constraints",
          "Rules"
        ],
        "properties": {
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingConstraints"
              },
              {
                "description": "The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits."
              }
            ]
          },
          "Rules": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingRuleList"
              },
              {
                "description": "The scale-in and scale-out rules that comprise the automatic scaling policy."
              }
            ]
          }
        },
        "description": "An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>."
      },
      "ScalingConstraints": {
        "type": "object",
        "required": [
          "MinCapacity",
          "MaxCapacity"
        ],
        "properties": {
          "MinCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary."
              }
            ]
          },
          "MaxCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary."
              }
            ]
          }
        },
        "description": "The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits."
      },
      "ScalingRuleList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ScalingRule"
        }
      },
      "ScalingRule": {
        "type": "object",
        "required": [
          "Name",
          "Action",
          "Trigger"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A friendly, more verbose description of the automatic scaling rule."
              }
            ]
          },
          "Action": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingAction"
              },
              {
                "description": "The conditions that trigger an automatic scaling activity."
              }
            ]
          },
          "Trigger": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingTrigger"
              },
              {
                "description": "The CloudWatch alarm definition that determines when automatic scaling activity is triggered."
              }
            ]
          }
        },
        "description": "A scale-in or scale-out rule that defines scaling activity, including the CloudWatch metric alarm that triggers activity, how Amazon EC2 instances are added or removed, and the periodicity of adjustments. The automatic scaling policy for an instance group can comprise one or more automatic scaling rules."
      },
      "ScalingAction": {
        "type": "object",
        "required": [
          "SimpleScalingPolicyConfiguration"
        ],
        "properties": {
          "Market": {
            "allOf": [
              {
                "$ref": "#/$defs/MarketType"
              },
              {
                "description": "Not available for instance groups. Instance groups use the market type specified for the group."
              }
            ]
          },
          "SimpleScalingPolicyConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SimpleScalingPolicyConfiguration"
              },
              {
                "description": "The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment."
              }
            ]
          }
        },
        "description": "The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment."
      },
      "SimpleScalingPolicyConfiguration": {
        "type": "object",
        "required": [
          "ScalingAdjustment"
        ],
        "properties": {
          "AdjustmentType": {
            "allOf": [
              {
                "$ref": "#/$defs/AdjustmentType"
              },
              {
                "description": "The way in which Amazon EC2 instances are added (if <code>ScalingAdjustment</code> is a positive number) or terminated (if <code>ScalingAdjustment</code> is a negative number) each time the scaling activity is triggered. <code>CHANGE_IN_CAPACITY</code> is the default. <code>CHANGE_IN_CAPACITY</code> indicates that the Amazon EC2 instance count increments or decrements by <code>ScalingAdjustment</code>, which should be expressed as an integer. <code>PERCENT_CHANGE_IN_CAPACITY</code> indicates the instance count increments or decrements by the percentage specified by <code>ScalingAdjustment</code>, which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. <code>EXACT_CAPACITY</code> indicates the scaling activity results in an instance group with the number of Amazon EC2 instances specified by <code>ScalingAdjustment</code>, which should be expressed as a positive integer."
              }
            ]
          },
          "ScalingAdjustment": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The amount by which to scale in or scale out, based on the specified <code>AdjustmentType</code>. A positive value adds to the instance group's Amazon EC2 instance count while a negative number removes instances. If <code>AdjustmentType</code> is set to <code>EXACT_CAPACITY</code>, the number should only be a positive integer. If <code>AdjustmentType</code> is set to <code>PERCENT_CHANGE_IN_CAPACITY</code>, the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity."
              }
            ]
          },
          "CoolDown": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0."
              }
            ]
          }
        },
        "description": "An automatic scaling configuration, which describes how the policy adds or removes instances, the cooldown period, and the number of Amazon EC2 instances that will be added each time the CloudWatch metric alarm condition is satisfied."
      },
      "AdjustmentType": {
        "type": "string",
        "enum": [
          "CHANGE_IN_CAPACITY",
          "PERCENT_CHANGE_IN_CAPACITY",
          "EXACT_CAPACITY"
        ]
      },
      "ScalingTrigger": {
        "type": "object",
        "required": [
          "CloudWatchAlarmDefinition"
        ],
        "properties": {
          "CloudWatchAlarmDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/CloudWatchAlarmDefinition"
              },
              {
                "description": "The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins."
              }
            ]
          }
        },
        "description": "The conditions that trigger an automatic scaling activity."
      },
      "CloudWatchAlarmDefinition": {
        "type": "object",
        "required": [
          "ComparisonOperator",
          "MetricName",
          "Period",
          "Threshold"
        ],
        "properties": {
          "ComparisonOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparisonOperator"
              },
              {
                "description": "Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>."
              }
            ]
          },
          "EvaluationPeriods": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>."
              }
            ]
          },
          "MetricName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the CloudWatch metric that is watched to determine an alarm condition."
              }
            ]
          },
          "Namespace": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>."
              }
            ]
          },
          "Period": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The period, in seconds, over which the statistic is applied. CloudWatch metrics for Amazon EMR are emitted every five minutes (300 seconds), so if you specify a CloudWatch metric, specify <code>300</code>."
              }
            ]
          },
          "Statistic": {
            "allOf": [
              {
                "$ref": "#/$defs/Statistic"
              },
              {
                "description": "The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>."
              }
            ]
          },
          "Threshold": {
            "allOf": [
              {
                "$ref": "#/$defs/NonNegativeDouble"
              },
              {
                "description": "The value against which the specified statistic is compared."
              }
            ]
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/$defs/Unit"
              },
              {
                "description": "The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric."
              }
            ]
          },
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricDimensionList"
              },
              {
                "description": "A CloudWatch metric dimension."
              }
            ]
          }
        },
        "description": "The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins."
      },
      "ComparisonOperator": {
        "type": "string",
        "enum": [
          "GREATER_THAN_OR_EQUAL",
          "GREATER_THAN",
          "LESS_THAN",
          "LESS_THAN_OR_EQUAL"
        ]
      },
      "Statistic": {
        "type": "string",
        "enum": [
          "SAMPLE_COUNT",
          "AVERAGE",
          "SUM",
          "MINIMUM",
          "MAXIMUM"
        ]
      },
      "NonNegativeDouble": {
        "type": "number",
        "format": "double",
        "minimum": 0
      },
      "Unit": {
        "type": "string",
        "enum": [
          "NONE",
          "SECONDS",
          "MICRO_SECONDS",
          "MILLI_SECONDS",
          "BYTES",
          "KILO_BYTES",
          "MEGA_BYTES",
          "GIGA_BYTES",
          "TERA_BYTES",
          "BITS",
          "KILO_BITS",
          "MEGA_BITS",
          "GIGA_BITS",
          "TERA_BITS",
          "PERCENT",
          "COUNT",
          "BYTES_PER_SECOND",
          "KILO_BYTES_PER_SECOND",
          "MEGA_BYTES_PER_SECOND",
          "GIGA_BYTES_PER_SECOND",
          "TERA_BYTES_PER_SECOND",
          "BITS_PER_SECOND",
          "KILO_BITS_PER_SECOND",
          "MEGA_BITS_PER_SECOND",
          "GIGA_BITS_PER_SECOND",
          "TERA_BITS_PER_SECOND",
          "COUNT_PER_SECOND"
        ]
      },
      "MetricDimensionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MetricDimension"
        }
      },
      "MetricDimension": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The dimension name."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The dimension value."
              }
            ]
          }
        },
        "description": "A CloudWatch dimension, which is specified using a <code>Key</code> (known as a <code>Name</code> in CloudWatch), <code>Value</code> pair. By default, Amazon EMR uses one dimension whose <code>Key</code> is <code>JobFlowID</code> and <code>Value</code> is a variable representing the cluster ID, which is <code>${emr.clusterId}</code>. This enables the rule to bootstrap when the cluster ID becomes available."
      },
      "InstanceFleetConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InstanceFleetConfig"
        }
      },
      "InstanceFleetConfig": {
        "type": "object",
        "required": [
          "InstanceFleetType"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The friendly name of the instance fleet."
              }
            ]
          },
          "InstanceFleetType": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceFleetType"
              },
              {
                "description": "The node type that the instance fleet hosts. Valid values are MASTER, CORE, and TASK."
              }
            ]
          },
          "TargetOnDemandCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "<p>The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand Instances to provision. When the instance fleet launches, Amazon EMR tries to provision On-Demand Instances as specified by <a>InstanceTypeConfig</a>. Each instance configuration has a specified <code>WeightedCapacity</code>. When an On-Demand Instance is provisioned, the <code>WeightedCapacity</code> units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.</p> <note> <p>If not specified or set to 0, only Spot Instances are provisioned for the instance fleet using <code>TargetSpotCapacity</code>. At least one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p> </note>"
              }
            ]
          },
          "TargetSpotCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "<p>The target capacity of Spot units for the instance fleet, which determines how many Spot Instances to provision. When the instance fleet launches, Amazon EMR tries to provision Spot Instances as specified by <a>InstanceTypeConfig</a>. Each instance configuration has a specified <code>WeightedCapacity</code>. When a Spot Instance is provisioned, the <code>WeightedCapacity</code> units count toward the target capacity. Amazon EMR provisions instances until the target capacity is totally fulfilled, even if this results in an overage. For example, if there are 2 units remaining to fulfill capacity, and Amazon EMR can only provision an instance with a <code>WeightedCapacity</code> of 5 units, the instance is provisioned, and the target capacity is exceeded by 3 units.</p> <note> <p>If not specified or set to 0, only On-Demand Instances are provisioned for the instance fleet. At least one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> should be greater than 0. For a master instance fleet, only one of <code>TargetSpotCapacity</code> and <code>TargetOnDemandCapacity</code> can be specified, and its value must be 1.</p> </note>"
              }
            ]
          },
          "InstanceTypeConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceTypeConfigList"
              },
              {
                "description": "The instance type configurations that define the Amazon EC2 instances in the instance fleet."
              }
            ]
          },
          "LaunchSpecifications": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceFleetProvisioningSpecifications"
              },
              {
                "description": "The launch specification for the instance fleet."
              }
            ]
          },
          "ResizeSpecifications": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceFleetResizingSpecifications"
              },
              {
                "description": "The resize specification for the instance fleet."
              }
            ]
          }
        },
        "description": "<p>The configuration that defines an instance fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.</p> </note>"
      },
      "InstanceFleetType": {
        "type": "string",
        "enum": [
          "MASTER",
          "CORE",
          "TASK"
        ]
      },
      "WholeNumber": {
        "type": "integer",
        "minimum": 0
      },
      "InstanceTypeConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InstanceTypeConfig"
        }
      },
      "InstanceTypeConfig": {
        "type": "object",
        "required": [
          "InstanceType"
        ],
        "properties": {
          "InstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceType"
              },
              {
                "description": "An Amazon EC2 instance type, such as <code>m3.xlarge</code>. "
              }
            ]
          },
          "WeightedCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in <a>InstanceFleetConfig</a>. This value is 1 for a master instance fleet, and must be 1 or greater for core and task instance fleets. Defaults to 1 if not specified. "
              }
            ]
          },
          "BidPrice": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The bid price for each Amazon EC2 Spot Instance type as defined by <code>InstanceType</code>. Expressed in USD. If neither <code>BidPrice</code> nor <code>BidPriceAsPercentageOfOnDemandPrice</code> is provided, <code>BidPriceAsPercentageOfOnDemandPrice</code> defaults to 100%. "
              }
            ]
          },
          "BidPriceAsPercentageOfOnDemandPrice": {
            "allOf": [
              {
                "$ref": "#/$defs/NonNegativeDouble"
              },
              {
                "description": "The bid price, as a percentage of On-Demand price, for each Amazon EC2 Spot Instance as defined by <code>InstanceType</code>. Expressed as a number (for example, 20 specifies 20%). If neither <code>BidPrice</code> nor <code>BidPriceAsPercentageOfOnDemandPrice</code> is provided, <code>BidPriceAsPercentageOfOnDemandPrice</code> defaults to 100%."
              }
            ]
          },
          "EbsConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EbsConfiguration"
              },
              {
                "description": "The configuration of Amazon Elastic Block Store (Amazon EBS) attached to each instance as defined by <code>InstanceType</code>. "
              }
            ]
          },
          "Configurations": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationList"
              },
              {
                "description": "A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster."
              }
            ]
          },
          "CustomAmiId": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The custom AMI ID to use for the instance type."
              }
            ]
          }
        },
        "description": "<p>An instance type configuration for each instance type in an instance fleet, which determines the Amazon EC2 instances Amazon EMR attempts to provision to fulfill On-Demand and Spot target capacities. When you use an allocation strategy, you can include a maximum of 30 instance type configurations for a fleet. For more information about how to use an allocation strategy, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-instance-fleet.html\">Configure Instance Fleets</a>. Without an allocation strategy, you may specify a maximum of five instance type configurations for a fleet.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.</p> </note>"
      },
      "InstanceFleetProvisioningSpecifications": {
        "type": "object",
        "properties": {
          "SpotSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/SpotProvisioningSpecification"
              },
              {
                "description": "The launch specification for Spot instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy."
              }
            ]
          },
          "OnDemandSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/OnDemandProvisioningSpecification"
              },
              {
                "description": "<p> The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. </p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and later.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>The launch specification for Spot Instances in the fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand and Spot instance allocation strategies are available in Amazon EMR releases 5.12.1 and later.</p> </note>"
      },
      "SpotProvisioningSpecification": {
        "type": "object",
        "required": [
          "TimeoutDurationMinutes",
          "TimeoutAction"
        ],
        "properties": {
          "TimeoutDurationMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "The Spot provisioning timeout period in minutes. If Spot Instances are not provisioned within this time period, the <code>TimeOutAction</code> is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created."
              }
            ]
          },
          "TimeoutAction": {
            "allOf": [
              {
                "$ref": "#/$defs/SpotProvisioningTimeoutAction"
              },
              {
                "description": "The action to take when <code>TargetSpotCapacity</code> has not been fulfilled when the <code>TimeoutDurationMinutes</code> has expired; that is, when all Spot Instances could not be provisioned within the Spot provisioning timeout. Valid values are <code>TERMINATE_CLUSTER</code> and <code>SWITCH_TO_ON_DEMAND</code>. SWITCH_TO_ON_DEMAND specifies that if no Spot Instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity."
              }
            ]
          },
          "BlockDurationMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "<p>The defined duration for Spot Instances (also known as Spot blocks) in minutes. When specified, the Spot Instance does not terminate before the defined duration expires, and defined duration pricing for Spot Instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot Instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates. </p> <note> <p>Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022. </p> </note>"
              }
            ]
          },
          "AllocationStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/SpotProvisioningAllocationStrategy"
              },
              {
                "description": " Specifies the strategy to use in launching Spot Instance fleets. Currently, the only option is capacity-optimized (the default), which launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching. "
              }
            ]
          }
        },
        "description": "<p>The launch specification for Spot Instances in the instance fleet, which determines the defined duration, provisioning timeout behavior, and allocation strategy.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. Spot Instance allocation strategy is available in Amazon EMR releases 5.12.1 and later.</p> </note> <note> <p>Spot Instances with a defined duration (also known as Spot blocks) are no longer available to new customers from July 1, 2021. For customers who have previously used the feature, we will continue to support Spot Instances with a defined duration until December 31, 2022. </p> </note>"
      },
      "SpotProvisioningTimeoutAction": {
        "type": "string",
        "enum": [
          "SWITCH_TO_ON_DEMAND",
          "TERMINATE_CLUSTER"
        ]
      },
      "SpotProvisioningAllocationStrategy": {
        "type": "string",
        "enum": [
          "capacity-optimized",
          "price-capacity-optimized",
          "lowest-price",
          "diversified"
        ]
      },
      "OnDemandProvisioningSpecification": {
        "type": "object",
        "required": [
          "AllocationStrategy"
        ],
        "properties": {
          "AllocationStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/OnDemandProvisioningAllocationStrategy"
              },
              {
                "description": "Specifies the strategy to use in launching On-Demand instance fleets. Currently, the only option is <code>lowest-price</code> (the default), which launches the lowest price first."
              }
            ]
          },
          "CapacityReservationOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/OnDemandCapacityReservationOptions"
              },
              {
                "description": "The launch specification for On-Demand instances in the instance fleet, which determines the allocation strategy."
              }
            ]
          }
        },
        "description": "<p> The launch specification for On-Demand Instances in the instance fleet, which determines the allocation strategy. </p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions. On-Demand Instances allocation strategy is available in Amazon EMR releases 5.12.1 and later.</p> </note>"
      },
      "OnDemandProvisioningAllocationStrategy": {
        "type": "string",
        "enum": [
          "lowest-price"
        ]
      },
      "OnDemandCapacityReservationOptions": {
        "type": "object",
        "properties": {
          "UsageStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/OnDemandCapacityReservationUsageStrategy"
              },
              {
                "description": "<p>Indicates whether to use unused Capacity Reservations for fulfilling On-Demand capacity.</p> <p>If you specify <code>use-capacity-reservations-first</code>, the fleet uses unused Capacity Reservations to fulfill On-Demand capacity up to the target On-Demand capacity. If multiple instance pools have unused Capacity Reservations, the On-Demand allocation strategy (<code>lowest-price</code>) is applied. If the number of unused Capacity Reservations is less than the On-Demand target capacity, the remaining On-Demand target capacity is launched according to the On-Demand allocation strategy (<code>lowest-price</code>).</p> <p>If you do not specify a value, the fleet fulfills the On-Demand capacity according to the chosen On-Demand allocation strategy.</p>"
              }
            ]
          },
          "CapacityReservationPreference": {
            "allOf": [
              {
                "$ref": "#/$defs/OnDemandCapacityReservationPreference"
              },
              {
                "description": "<p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li> </ul>"
              }
            ]
          },
          "CapacityReservationResourceGroupArn": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The ARN of the Capacity Reservation resource group in which to run the instance."
              }
            ]
          }
        },
        "description": "Describes the strategy for using unused Capacity Reservations for fulfilling On-Demand capacity."
      },
      "OnDemandCapacityReservationUsageStrategy": {
        "type": "string",
        "enum": [
          "use-capacity-reservations-first"
        ]
      },
      "OnDemandCapacityReservationPreference": {
        "type": "string",
        "enum": [
          "open",
          "none"
        ]
      },
      "InstanceFleetResizingSpecifications": {
        "type": "object",
        "properties": {
          "SpotResizeSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/SpotResizingSpecification"
              },
              {
                "description": "The resize specification for Spot Instances in the instance fleet, which contains the resize timeout period. "
              }
            ]
          },
          "OnDemandResizeSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/OnDemandResizingSpecification"
              },
              {
                "description": "The resize specification for On-Demand Instances in the instance fleet, which contains the resize timeout period. "
              }
            ]
          }
        },
        "description": "The resize specification for On-Demand and Spot Instances in the fleet."
      },
      "SpotResizingSpecification": {
        "type": "object",
        "required": [
          "TimeoutDurationMinutes"
        ],
        "properties": {
          "TimeoutDurationMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "Spot resize timeout in minutes. If Spot Instances are not provisioned within this time, the resize workflow will stop provisioning of Spot instances. Minimum value is 5 minutes and maximum value is 10,080 minutes (7 days). The timeout applies to all resize workflows on the Instance Fleet. The resize could be triggered by Amazon EMR Managed Scaling or by the customer (via Amazon EMR Console, Amazon EMR CLI modify-instance-fleet or Amazon EMR SDK ModifyInstanceFleet API) or by Amazon EMR due to Amazon EC2 Spot Reclamation."
              }
            ]
          }
        },
        "description": "The resize specification for Spot Instances in the instance fleet, which contains the resize timeout period. "
      },
      "OnDemandResizingSpecification": {
        "type": "object",
        "required": [
          "TimeoutDurationMinutes"
        ],
        "properties": {
          "TimeoutDurationMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/WholeNumber"
              },
              {
                "description": "On-Demand resize timeout in minutes. If On-Demand Instances are not provisioned within this time, the resize workflow stops. The minimum value is 5 minutes, and the maximum value is 10,080 minutes (7 days). The timeout applies to all resize workflows on the Instance Fleet. The resize could be triggered by Amazon EMR Managed Scaling or by the customer (via Amazon EMR Console, Amazon EMR CLI modify-instance-fleet or Amazon EMR SDK ModifyInstanceFleet API) or by Amazon EMR due to Amazon EC2 Spot Reclamation."
              }
            ]
          }
        },
        "description": "The resize specification for On-Demand Instances in the instance fleet, which contains the resize timeout period. "
      },
      "PlacementType": {
        "type": "object",
        "properties": {
          "AvailabilityZone": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The Amazon EC2 Availability Zone for the cluster. <code>AvailabilityZone</code> is used for uniform instance groups, while <code>AvailabilityZones</code> (plural) is used for instance fleets."
              }
            ]
          },
          "AvailabilityZones": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256List"
              },
              {
                "description": "<p>When multiple Availability Zones are specified, Amazon EMR evaluates them and launches instances in the optimal Availability Zone. <code>AvailabilityZones</code> is used for instance fleets, while <code>AvailabilityZone</code> (singular) is used for uniform instance groups.</p> <note> <p>The instance fleet configuration is available only in Amazon EMR releases 4.8.0 and later, excluding 5.0.x versions.</p> </note>"
              }
            ]
          }
        },
        "description": "The Amazon EC2 Availability Zone configuration of the cluster (job flow)."
      },
      "XmlStringMaxLen256List": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/XmlStringMaxLen256"
        }
      },
      "Boolean": {
        "type": "boolean"
      },
      "SecurityGroupsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/XmlStringMaxLen256"
        }
      },
      "StepConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StepConfig"
        }
      },
      "StepConfig": {
        "type": "object",
        "required": [
          "Name",
          "HadoopJarStep"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The name of the step."
              }
            ]
          },
          "ActionOnFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionOnFailure"
              },
              {
                "description": "<p>The action to take when the step fails. Use one of the following values:</p> <ul> <li> <p> <code>TERMINATE_CLUSTER</code> - Shuts down the cluster.</p> </li> <li> <p> <code>CANCEL_AND_WAIT</code> - Cancels any pending steps and returns the cluster to the <code>WAITING</code> state.</p> </li> <li> <p> <code>CONTINUE</code> - Continues to the next step in the queue.</p> </li> <li> <p> <code>TERMINATE_JOB_FLOW</code> - Shuts down the cluster. <code>TERMINATE_JOB_FLOW</code> is provided for backward compatibility. We recommend using <code>TERMINATE_CLUSTER</code> instead.</p> </li> </ul> <p>If a cluster's <code>StepConcurrencyLevel</code> is greater than <code>1</code>, do not use <code>AddJobFlowSteps</code> to submit a step with this parameter set to <code>CANCEL_AND_WAIT</code> or <code>TERMINATE_CLUSTER</code>. The step is not submitted and the action fails with a message that the <code>ActionOnFailure</code> setting is not valid.</p> <p>If you change a cluster's <code>StepConcurrencyLevel</code> to be greater than 1 while a step is running, the <code>ActionOnFailure</code> parameter may not behave as you expect. In this case, for a step that fails with this parameter set to <code>CANCEL_AND_WAIT</code>, pending steps and the running step are not canceled; for a step that fails with this parameter set to <code>TERMINATE_CLUSTER</code>, the cluster does not terminate.</p>"
              }
            ]
          },
          "HadoopJarStep": {
            "allOf": [
              {
                "$ref": "#/$defs/HadoopJarStepConfig"
              },
              {
                "description": "The JAR file used for the step."
              }
            ]
          }
        },
        "description": "Specification for a cluster (job flow) step."
      },
      "ActionOnFailure": {
        "type": "string",
        "enum": [
          "TERMINATE_JOB_FLOW",
          "TERMINATE_CLUSTER",
          "CANCEL_AND_WAIT",
          "CONTINUE"
        ]
      },
      "HadoopJarStepConfig": {
        "type": "object",
        "required": [
          "Jar"
        ],
        "properties": {
          "Properties": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyValueList"
              },
              {
                "description": "A list of Java properties that are set when the step runs. You can use these properties to pass key-value pairs to your main function."
              }
            ]
          },
          "Jar": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "A path to a JAR file run during the step."
              }
            ]
          },
          "MainClass": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file."
              }
            ]
          },
          "Args": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringList"
              },
              {
                "description": "A list of command line arguments passed to the JAR file's main function when executed."
              }
            ]
          }
        },
        "description": "A job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for Hadoop to execute and waits for the job to finish or fail."
      },
      "KeyValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/KeyValue"
        }
      },
      "KeyValue": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The unique identifier of a key-value pair."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "The value part of the identified key."
              }
            ]
          }
        },
        "description": "A key-value pair."
      },
      "XmlStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/XmlString"
        }
      },
      "BootstrapActionConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BootstrapActionConfig"
        }
      },
      "BootstrapActionConfig": {
        "type": "object",
        "required": [
          "Name",
          "ScriptBootstrapAction"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The name of the bootstrap action."
              }
            ]
          },
          "ScriptBootstrapAction": {
            "allOf": [
              {
                "$ref": "#/$defs/ScriptBootstrapActionConfig"
              },
              {
                "description": "The script run by the bootstrap action."
              }
            ]
          }
        },
        "description": "Configuration of a bootstrap action."
      },
      "ScriptBootstrapActionConfig": {
        "type": "object",
        "required": [
          "Path"
        ],
        "properties": {
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlString"
              },
              {
                "description": "Location in Amazon S3 of the script to run during a bootstrap action."
              }
            ]
          },
          "Args": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringList"
              },
              {
                "description": "A list of command line arguments to pass to the bootstrap action script."
              }
            ]
          }
        },
        "description": "Configuration of the script to run during a bootstrap action."
      },
      "SupportedProductsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/XmlStringMaxLen256"
        }
      },
      "NewSupportedProductsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SupportedProductConfig"
        }
      },
      "SupportedProductConfig": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The name of the product configuration."
              }
            ]
          },
          "Args": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringList"
              },
              {
                "description": "The list of user-supplied arguments."
              }
            ]
          }
        },
        "description": "The list of supported product configurations that allow user-supplied arguments. Amazon EMR accepts these arguments and forwards them to the corresponding installation script as bootstrap action arguments."
      },
      "ApplicationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Application"
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the application."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The version of the application."
              }
            ]
          },
          "Args": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "Arguments for Amazon EMR to pass to the application."
              }
            ]
          },
          "AdditionalInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/StringMap"
              },
              {
                "description": "This option is for advanced users only. This is meta information about third-party applications that third-party vendors use for testing purposes."
              }
            ]
          }
        },
        "description": "<p>With Amazon EMR release version 4.0 and later, the only accepted parameter is the application name. To pass arguments to applications, you use configuration classifications specified using configuration JSON objects. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/ReleaseGuide/emr-configure-apps.html\">Configuring Applications</a>.</p> <p>With earlier Amazon EMR releases, the application is any Amazon or third-party software that you can add to the cluster. This structure contains a list of strings that indicates the software to use with the cluster and accepts a user argument list. Amazon EMR accepts and forwards the argument list to the corresponding installation script as bootstrap action argument.</p>"
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A user-defined key, which is the minimum required information for a valid tag. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html\">Tag</a>. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A user-defined value, which is optional in a tag. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html\">Tag Clusters</a>. "
              }
            ]
          }
        },
        "description": "A key-value pair containing user-defined metadata that you can associate with an Amazon EMR resource. Tags make it easier to associate clusters in various ways, such as grouping clusters to track your Amazon EMR resource allocation costs. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-tags.html\">Tag Clusters</a>. "
      },
      "ScaleDownBehavior": {
        "type": "string",
        "enum": [
          "TERMINATE_AT_INSTANCE_HOUR",
          "TERMINATE_AT_TASK_COMPLETION"
        ]
      },
      "RepoUpgradeOnBoot": {
        "type": "string",
        "enum": [
          "SECURITY",
          "NONE"
        ]
      },
      "KerberosAttributes": {
        "type": "object",
        "required": [
          "Realm",
          "KdcAdminPassword"
        ],
        "properties": {
          "Realm": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The name of the Kerberos realm to which all nodes in a cluster belong. For example, <code>EC2.INTERNAL</code>. "
              }
            ]
          },
          "KdcAdminPassword": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster."
              }
            ]
          },
          "CrossRealmTrustPrincipalPassword": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms."
              }
            ]
          },
          "ADDomainJoinUser": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain."
              }
            ]
          },
          "ADDomainJoinPassword": {
            "allOf": [
              {
                "$ref": "#/$defs/XmlStringMaxLen256"
              },
              {
                "description": "The Active Directory password for <code>ADDomainJoinUser</code>."
              }
            ]
          }
        },
        "description": "Attributes for Kerberos configuration when Kerberos authentication is enabled using a security configuration. For more information see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-kerberos.html\">Use Kerberos Authentication</a> in the <i>Amazon EMR Management Guide</i>."
      },
      "ManagedScalingPolicy": {
        "type": "object",
        "properties": {
          "ComputeLimits": {
            "allOf": [
              {
                "$ref": "#/$defs/ComputeLimits"
              },
              {
                "description": "The Amazon EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster is not allowed to go above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration."
              }
            ]
          }
        },
        "description": " Managed scaling policy for an Amazon EMR cluster. The policy specifies the limits for resources that can be added or terminated from a cluster. The policy only applies to the core and task nodes. The master node cannot be scaled after initial configuration. "
      },
      "ComputeLimits": {
        "type": "object",
        "required": [
          "UnitType",
          "MinimumCapacityUnits",
          "MaximumCapacityUnits"
        ],
        "properties": {
          "UnitType": {
            "allOf": [
              {
                "$ref": "#/$defs/ComputeLimitsUnitType"
              },
              {
                "description": " The unit type used for specifying a managed scaling policy. "
              }
            ]
          },
          "MinimumCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": " The lower boundary of Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. "
              }
            ]
          },
          "MaximumCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": " The upper boundary of Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. "
              }
            ]
          },
          "MaximumOnDemandCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": " The upper boundary of On-Demand Amazon EC2 units. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot Instances. "
              }
            ]
          },
          "MaximumCoreCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": " The upper boundary of Amazon EC2 units for core node type in a cluster. It is measured through vCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes. "
              }
            ]
          }
        },
        "description": " The Amazon EC2 unit limits for a managed scaling policy. The managed scaling activity of a cluster can not be above or below these limits. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration. "
      },
      "ComputeLimitsUnitType": {
        "type": "string",
        "enum": [
          "InstanceFleetUnits",
          "Instances",
          "VCPU"
        ]
      },
      "PlacementGroupConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PlacementGroupConfig"
        }
      },
      "PlacementGroupConfig": {
        "type": "object",
        "required": [
          "InstanceRole"
        ],
        "properties": {
          "InstanceRole": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceRoleType"
              },
              {
                "description": "<p>Role of the instance in the cluster.</p> <p>Starting with Amazon EMR release 5.23.0, the only supported instance role is <code>MASTER</code>.</p>"
              }
            ]
          },
          "PlacementStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/PlacementGroupStrategy"
              },
              {
                "description": "<p>Amazon EC2 Placement Group strategy associated with instance role.</p> <p>Starting with Amazon EMR release 5.23.0, the only supported placement strategy is <code>SPREAD</code> for the <code>MASTER</code> instance role.</p>"
              }
            ]
          }
        },
        "description": "<p>Placement group configuration for an Amazon EMR cluster. The configuration specifies the placement strategy that can be applied to instance roles during cluster creation.</p> <p>To use this configuration, consider attaching managed policy AmazonElasticMapReducePlacementGroupPolicy to the Amazon EMR role.</p>"
      },
      "PlacementGroupStrategy": {
        "type": "string",
        "enum": [
          "SPREAD",
          "PARTITION",
          "CLUSTER",
          "NONE"
        ]
      },
      "AutoTerminationPolicy": {
        "type": "object",
        "properties": {
          "IdleTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of 60 seconds and a maximum of 604800 seconds (seven days)."
              }
            ]
          }
        },
        "description": "An auto-termination policy for an Amazon EMR cluster. An auto-termination policy defines the amount of idle time in seconds after which a cluster automatically terminates. For alternative cluster termination options, see <a href=\"https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-termination.html\">Control cluster termination</a>."
      },
      "Long": {
        "type": "integer"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://elasticmapreduce.us-east-1.amazonaws.com/#X-Amz-Target=ElasticMapReduce.RunJobFlow"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        " The result of the <a>RunJobFlow</a> operation. ",
        "**Key properties:**",
        {
          "$ul": [
            "**JobFlowId**",
            "**ClusterArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
