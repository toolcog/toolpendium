{
  "name": "PutAutoScalingPolicy",
  "description": "Creates or updates an automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. The automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "ElasticMapReduce.PutAutoScalingPolicy"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutAutoScalingPolicyInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutAutoScalingPolicyInput": {
        "type": "object",
        "required": [
          "ClusterId",
          "InstanceGroupId",
          "AutoScalingPolicy"
        ],
        "title": "PutAutoScalingPolicyInput",
        "properties": {
          "ClusterId": {
            "allOf": [
              {
                "$ref": "#/$defs/ClusterId"
              },
              {
                "description": "Specifies the ID of a cluster. The instance group to which the automatic scaling policy is applied is within this cluster."
              }
            ]
          },
          "InstanceGroupId": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceGroupId"
              },
              {
                "description": "Specifies the ID of the instance group to which the automatic scaling policy is applied."
              }
            ]
          },
          "AutoScalingPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoScalingPolicy"
              },
              {
                "description": "Specifies the definition of the automatic scaling policy."
              }
            ]
          }
        }
      },
      "ClusterId": {
        "type": "string"
      },
      "InstanceGroupId": {
        "type": "string"
      },
      "AutoScalingPolicy": {
        "type": "object",
        "required": [
          "Constraints",
          "Rules"
        ],
        "properties": {
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingConstraints"
              },
              {
                "description": "The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activity will not cause an instance group to grow above or below these limits."
              }
            ]
          },
          "Rules": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingRuleList"
              },
              {
                "description": "The scale-in and scale-out rules that comprise the automatic scaling policy."
              }
            ]
          }
        },
        "description": "An automatic scaling policy for a core instance group or task instance group in an Amazon EMR cluster. An automatic scaling policy defines how an instance group dynamically adds and terminates Amazon EC2 instances in response to the value of a CloudWatch metric. See <a>PutAutoScalingPolicy</a>."
      },
      "ScalingConstraints": {
        "type": "object",
        "required": [
          "MinCapacity",
          "MaxCapacity"
        ],
        "properties": {
          "MinCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The lower boundary of Amazon EC2 instances in an instance group below which scaling activities are not allowed to shrink. Scale-in activities will not terminate instances below this boundary."
              }
            ]
          },
          "MaxCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The upper boundary of Amazon EC2 instances in an instance group beyond which scaling activities are not allowed to grow. Scale-out activities will not add instances beyond this boundary."
              }
            ]
          }
        },
        "description": "The upper and lower Amazon EC2 instance limits for an automatic scaling policy. Automatic scaling activities triggered by automatic scaling rules will not cause an instance group to grow above or below these limits."
      },
      "Integer": {
        "type": "integer"
      },
      "ScalingRuleList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ScalingRule"
        }
      },
      "ScalingRule": {
        "type": "object",
        "required": [
          "Name",
          "Action",
          "Trigger"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name used to identify an automatic scaling rule. Rule names must be unique within a scaling policy."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A friendly, more verbose description of the automatic scaling rule."
              }
            ]
          },
          "Action": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingAction"
              },
              {
                "description": "The conditions that trigger an automatic scaling activity."
              }
            ]
          },
          "Trigger": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalingTrigger"
              },
              {
                "description": "The CloudWatch alarm definition that determines when automatic scaling activity is triggered."
              }
            ]
          }
        },
        "description": "A scale-in or scale-out rule that defines scaling activity, including the CloudWatch metric alarm that triggers activity, how Amazon EC2 instances are added or removed, and the periodicity of adjustments. The automatic scaling policy for an instance group can comprise one or more automatic scaling rules."
      },
      "String": {
        "type": "string"
      },
      "ScalingAction": {
        "type": "object",
        "required": [
          "SimpleScalingPolicyConfiguration"
        ],
        "properties": {
          "Market": {
            "allOf": [
              {
                "$ref": "#/$defs/MarketType"
              },
              {
                "description": "Not available for instance groups. Instance groups use the market type specified for the group."
              }
            ]
          },
          "SimpleScalingPolicyConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SimpleScalingPolicyConfiguration"
              },
              {
                "description": "The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment."
              }
            ]
          }
        },
        "description": "The type of adjustment the automatic scaling activity makes when triggered, and the periodicity of the adjustment."
      },
      "MarketType": {
        "type": "string",
        "enum": [
          "ON_DEMAND",
          "SPOT"
        ]
      },
      "SimpleScalingPolicyConfiguration": {
        "type": "object",
        "required": [
          "ScalingAdjustment"
        ],
        "properties": {
          "AdjustmentType": {
            "allOf": [
              {
                "$ref": "#/$defs/AdjustmentType"
              },
              {
                "description": "The way in which Amazon EC2 instances are added (if <code>ScalingAdjustment</code> is a positive number) or terminated (if <code>ScalingAdjustment</code> is a negative number) each time the scaling activity is triggered. <code>CHANGE_IN_CAPACITY</code> is the default. <code>CHANGE_IN_CAPACITY</code> indicates that the Amazon EC2 instance count increments or decrements by <code>ScalingAdjustment</code>, which should be expressed as an integer. <code>PERCENT_CHANGE_IN_CAPACITY</code> indicates the instance count increments or decrements by the percentage specified by <code>ScalingAdjustment</code>, which should be expressed as an integer. For example, 20 indicates an increase in 20% increments of cluster capacity. <code>EXACT_CAPACITY</code> indicates the scaling activity results in an instance group with the number of Amazon EC2 instances specified by <code>ScalingAdjustment</code>, which should be expressed as a positive integer."
              }
            ]
          },
          "ScalingAdjustment": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The amount by which to scale in or scale out, based on the specified <code>AdjustmentType</code>. A positive value adds to the instance group's Amazon EC2 instance count while a negative number removes instances. If <code>AdjustmentType</code> is set to <code>EXACT_CAPACITY</code>, the number should only be a positive integer. If <code>AdjustmentType</code> is set to <code>PERCENT_CHANGE_IN_CAPACITY</code>, the value should express the percentage as an integer. For example, -20 indicates a decrease in 20% increments of cluster capacity."
              }
            ]
          },
          "CoolDown": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The amount of time, in seconds, after a scaling activity completes before any further trigger-related scaling activities can start. The default value is 0."
              }
            ]
          }
        },
        "description": "An automatic scaling configuration, which describes how the policy adds or removes instances, the cooldown period, and the number of Amazon EC2 instances that will be added each time the CloudWatch metric alarm condition is satisfied."
      },
      "AdjustmentType": {
        "type": "string",
        "enum": [
          "CHANGE_IN_CAPACITY",
          "PERCENT_CHANGE_IN_CAPACITY",
          "EXACT_CAPACITY"
        ]
      },
      "ScalingTrigger": {
        "type": "object",
        "required": [
          "CloudWatchAlarmDefinition"
        ],
        "properties": {
          "CloudWatchAlarmDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/CloudWatchAlarmDefinition"
              },
              {
                "description": "The definition of a CloudWatch metric alarm. When the defined alarm conditions are met along with other trigger parameters, scaling activity begins."
              }
            ]
          }
        },
        "description": "The conditions that trigger an automatic scaling activity."
      },
      "CloudWatchAlarmDefinition": {
        "type": "object",
        "required": [
          "ComparisonOperator",
          "MetricName",
          "Period",
          "Threshold"
        ],
        "properties": {
          "ComparisonOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparisonOperator"
              },
              {
                "description": "Determines how the metric specified by <code>MetricName</code> is compared to the value specified by <code>Threshold</code>."
              }
            ]
          },
          "EvaluationPeriods": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The number of periods, in five-minute increments, during which the alarm condition must exist before the alarm triggers automatic scaling activity. The default value is <code>1</code>."
              }
            ]
          },
          "MetricName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the CloudWatch metric that is watched to determine an alarm condition."
              }
            ]
          },
          "Namespace": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The namespace for the CloudWatch metric. The default is <code>AWS/ElasticMapReduce</code>."
              }
            ]
          },
          "Period": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The period, in seconds, over which the statistic is applied. CloudWatch metrics for Amazon EMR are emitted every five minutes (300 seconds), so if you specify a CloudWatch metric, specify <code>300</code>."
              }
            ]
          },
          "Statistic": {
            "allOf": [
              {
                "$ref": "#/$defs/Statistic"
              },
              {
                "description": "The statistic to apply to the metric associated with the alarm. The default is <code>AVERAGE</code>."
              }
            ]
          },
          "Threshold": {
            "allOf": [
              {
                "$ref": "#/$defs/NonNegativeDouble"
              },
              {
                "description": "The value against which the specified statistic is compared."
              }
            ]
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/$defs/Unit"
              },
              {
                "description": "The unit of measure associated with the CloudWatch metric being watched. The value specified for <code>Unit</code> must correspond to the units specified in the CloudWatch metric."
              }
            ]
          },
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricDimensionList"
              },
              {
                "description": "A CloudWatch metric dimension."
              }
            ]
          }
        },
        "description": "The definition of a CloudWatch metric alarm, which determines when an automatic scaling activity is triggered. When the defined alarm conditions are satisfied, scaling activity begins."
      },
      "ComparisonOperator": {
        "type": "string",
        "enum": [
          "GREATER_THAN_OR_EQUAL",
          "GREATER_THAN",
          "LESS_THAN",
          "LESS_THAN_OR_EQUAL"
        ]
      },
      "Statistic": {
        "type": "string",
        "enum": [
          "SAMPLE_COUNT",
          "AVERAGE",
          "SUM",
          "MINIMUM",
          "MAXIMUM"
        ]
      },
      "NonNegativeDouble": {
        "type": "number",
        "format": "double",
        "minimum": 0
      },
      "Unit": {
        "type": "string",
        "enum": [
          "NONE",
          "SECONDS",
          "MICRO_SECONDS",
          "MILLI_SECONDS",
          "BYTES",
          "KILO_BYTES",
          "MEGA_BYTES",
          "GIGA_BYTES",
          "TERA_BYTES",
          "BITS",
          "KILO_BITS",
          "MEGA_BITS",
          "GIGA_BITS",
          "TERA_BITS",
          "PERCENT",
          "COUNT",
          "BYTES_PER_SECOND",
          "KILO_BYTES_PER_SECOND",
          "MEGA_BYTES_PER_SECOND",
          "GIGA_BYTES_PER_SECOND",
          "TERA_BYTES_PER_SECOND",
          "BITS_PER_SECOND",
          "KILO_BITS_PER_SECOND",
          "MEGA_BITS_PER_SECOND",
          "GIGA_BITS_PER_SECOND",
          "TERA_BITS_PER_SECOND",
          "COUNT_PER_SECOND"
        ]
      },
      "MetricDimensionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MetricDimension"
        }
      },
      "MetricDimension": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The dimension name."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The dimension value."
              }
            ]
          }
        },
        "description": "A CloudWatch dimension, which is specified using a <code>Key</code> (known as a <code>Name</code> in CloudWatch), <code>Value</code> pair. By default, Amazon EMR uses one dimension whose <code>Key</code> is <code>JobFlowID</code> and <code>Value</code> is a variable representing the cluster ID, which is <code>${emr.clusterId}</code>. This enables the rule to bootstrap when the cluster ID becomes available."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://elasticmapreduce.us-east-1.amazonaws.com/#X-Amz-Target=ElasticMapReduce.PutAutoScalingPolicy"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ClusterId**",
            "**InstanceGroupId**",
            "**AutoScalingPolicy**",
            "**ClusterArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
