{
  "name": "WriteRecords",
  "description": "<p>Enables you to write your time-series data into Timestream. You can specify a single data point or a batch of data points to be inserted into the system. Timestream offers you a flexible schema that auto detects the column names and data types for your Timestream tables based on the dimension names and data types of the data points you specify when invoking writes into the database. </p> <p>Timestream supports eventual consistency read semantics. This means that when you query data immediately after writing a batch of data into Timestream, the query results might not reflect the results of a recently completed write operation. The results may also include some stale data. If you repeat the query request after a short time, the results should return the latest data. <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html\">Service quotas apply</a>. </p> <p>See <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/code-samples.write.html\">code sample</a> for details.</p> <p> <b>Upserts</b> </p> <p>You can use the <code>Version</code> parameter in a <code>WriteRecords</code> request to update data points. Timestream tracks a version number with each record. <code>Version</code> defaults to <code>1</code> when it's not specified for the record in the request. Timestream updates an existing record’s measure value along with its <code>Version</code> when it receives a write request with a higher <code>Version</code> number for that record. When it receives an update request where the measure value is the same as that of the existing record, Timestream still updates <code>Version</code>, if it is greater than the existing value of <code>Version</code>. You can update a data point as many times as desired, as long as the value of <code>Version</code> continuously increases. </p> <p> For example, suppose you write a new record without indicating <code>Version</code> in the request. Timestream stores this record, and set <code>Version</code> to <code>1</code>. Now, suppose you try to update this record with a <code>WriteRecords</code> request of the same record with a different measure value but, like before, do not provide <code>Version</code>. In this case, Timestream will reject this update with a <code>RejectedRecordsException</code> since the updated record’s version is not greater than the existing value of Version. </p> <p>However, if you were to resend the update request with <code>Version</code> set to <code>2</code>, Timestream would then succeed in updating the record’s value, and the <code>Version</code> would be set to <code>2</code>. Next, suppose you sent a <code>WriteRecords</code> request with this same record and an identical measure value, but with <code>Version</code> set to <code>3</code>. In this case, Timestream would only update <code>Version</code> to <code>3</code>. Any further updates would need to send a version number greater than <code>3</code>, or the update requests would receive a <code>RejectedRecordsException</code>. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "Timestream_20181101.WriteRecords"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/WriteRecordsRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "WriteRecordsRequest": {
        "type": "object",
        "required": [
          "DatabaseName",
          "TableName",
          "Records"
        ],
        "title": "WriteRecordsRequest",
        "properties": {
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "The name of the Timestream database."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "The name of the Timestream table."
              }
            ]
          },
          "CommonAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/Record"
              },
              {
                "description": "A record that contains the common measure, dimension, time, and version attributes shared across all the records in the request. The measure and dimension attributes specified will be merged with the measure and dimension attributes in the records object when the data is written into Timestream. Dimensions may not overlap, or a <code>ValidationException</code> will be thrown. In other words, a record must contain dimensions with unique names. "
              }
            ]
          },
          "Records": {
            "allOf": [
              {
                "$ref": "#/$defs/Records"
              },
              {
                "description": "An array of records that contain the unique measure, dimension, time, and version attributes for each time-series data point. "
              }
            ]
          }
        }
      },
      "ResourceName": {
        "type": "string"
      },
      "Record": {
        "type": "object",
        "properties": {
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/$defs/Dimensions"
              },
              {
                "description": "Contains the list of dimensions for time-series data points."
              }
            ]
          },
          "MeasureName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "Measure represents the data attribute of the time series. For example, the CPU utilization of an EC2 instance or the RPM of a wind turbine are measures. "
              }
            ]
          },
          "MeasureValue": {
            "allOf": [
              {
                "$ref": "#/$defs/StringValue2048"
              },
              {
                "description": " Contains the measure value for the time-series data point. "
              }
            ]
          },
          "MeasureValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/MeasureValueType"
              },
              {
                "description": " Contains the data type of the measure value for the time-series data point. Default type is <code>DOUBLE</code>. For more information, see <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types\">Data types</a>."
              }
            ]
          },
          "Time": {
            "allOf": [
              {
                "$ref": "#/$defs/StringValue256"
              },
              {
                "description": " Contains the time at which the measure value for the data point was collected. The time value plus the unit provides the time elapsed since the epoch. For example, if the time value is <code>12345</code> and the unit is <code>ms</code>, then <code>12345 ms</code> have elapsed since the epoch. "
              }
            ]
          },
          "TimeUnit": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeUnit"
              },
              {
                "description": " The granularity of the timestamp unit. It indicates if the time value is in seconds, milliseconds, nanoseconds, or other supported values. Default is <code>MILLISECONDS</code>. "
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/$defs/RecordVersion"
              },
              {
                "description": "<p>64-bit attribute used for record updates. Write requests for duplicate data with a higher version number will update the existing measure value and version. In cases where the measure value is the same, <code>Version</code> will still be updated. Default value is <code>1</code>.</p> <note> <p> <code>Version</code> must be <code>1</code> or greater, or you will receive a <code>ValidationException</code> error.</p> </note>"
              }
            ]
          },
          "MeasureValues": {
            "allOf": [
              {
                "$ref": "#/$defs/MeasureValues"
              },
              {
                "description": "<p> Contains the list of MeasureValue for time-series data points. </p> <p> This is only allowed for type <code>MULTI</code>. For scalar values, use <code>MeasureValue</code> attribute of the record directly. </p>"
              }
            ]
          }
        },
        "description": "<p>Represents a time-series data point being written into Timestream. Each record contains an array of dimensions. Dimensions represent the metadata attributes of a time-series data point, such as the instance name or Availability Zone of an EC2 instance. A record also contains the measure name, which is the name of the measure being collected (for example, the CPU utilization of an EC2 instance). Additionally, a record contains the measure value and the value type, which is the data type of the measure value. Also, the record contains the timestamp of when the measure was collected and the timestamp unit, which represents the granularity of the timestamp. </p> <p> Records have a <code>Version</code> field, which is a 64-bit <code>long</code> that you can use for updating data points. Writes of a duplicate record with the same dimension, timestamp, and measure name but different measure value will only succeed if the <code>Version</code> attribute of the record in the write request is higher than that of the existing record. Timestream defaults to a <code>Version</code> of <code>1</code> for records without the <code>Version</code> field. </p>"
      },
      "Dimensions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Dimension"
        },
        "maxItems": 128
      },
      "Dimension": {
        "type": "object",
        "required": [
          "Name",
          "Value"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "<p> Dimension represents the metadata attributes of the time series. For example, the name and Availability Zone of an EC2 instance or the name of the manufacturer of a wind turbine are dimensions. </p> <p>For constraints on dimension names, see <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming\">Naming Constraints</a>.</p>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaValue"
              },
              {
                "description": "The value of the dimension."
              }
            ]
          },
          "DimensionValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/DimensionValueType"
              },
              {
                "description": "The data type of the dimension for the time-series data point."
              }
            ]
          }
        },
        "description": "Represents the metadata attributes of the time series. For example, the name and Availability Zone of an EC2 instance or the name of the manufacturer of a wind turbine are dimensions. "
      },
      "SchemaName": {
        "type": "string",
        "minLength": 1
      },
      "SchemaValue": {
        "type": "string"
      },
      "DimensionValueType": {
        "type": "string",
        "enum": [
          "VARCHAR"
        ]
      },
      "StringValue2048": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "MeasureValueType": {
        "type": "string",
        "enum": [
          "DOUBLE",
          "BIGINT",
          "VARCHAR",
          "BOOLEAN",
          "TIMESTAMP",
          "MULTI"
        ]
      },
      "StringValue256": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "TimeUnit": {
        "type": "string",
        "enum": [
          "MILLISECONDS",
          "SECONDS",
          "MICROSECONDS",
          "NANOSECONDS"
        ]
      },
      "RecordVersion": {
        "type": "integer"
      },
      "MeasureValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MeasureValue"
        }
      },
      "MeasureValue": {
        "type": "object",
        "required": [
          "Name",
          "Value",
          "Type"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": "<p> The name of the MeasureValue. </p> <p> For constraints on MeasureValue names, see <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming\"> Naming Constraints</a> in the Amazon Timestream Developer Guide.</p>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/StringValue2048"
              },
              {
                "description": " The value for the MeasureValue. For information, see <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types\">Data types</a>."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/MeasureValueType"
              },
              {
                "description": "Contains the data type of the MeasureValue for the time-series data point."
              }
            ]
          }
        },
        "description": "<p> Represents the data attribute of the time series. For example, the CPU utilization of an EC2 instance or the RPM of a wind turbine are measures. MeasureValue has both name and value. </p> <p> MeasureValue is only allowed for type <code>MULTI</code>. Using <code>MULTI</code> type, you can pass multiple data attributes associated with the same time series in a single record </p>"
      },
      "Records": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Record"
        },
        "minItems": 1,
        "maxItems": 100
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ingest.timestream.us-east-1.amazonaws.com/#X-Amz-Target=Timestream_20181101.WriteRecords"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**RecordsIngested**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
