{
  "name": "CreateTable",
  "description": "Adds a new table to an existing database in your account. In an Amazon Web Services account, table names must be at least unique within each Region if they are in the same database. You might have identical table names in the same Region if the tables are in separate databases. While creating the table, you must specify the table name, database name, and the retention properties. <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html\">Service quotas apply</a>. See <a href=\"https://docs.aws.amazon.com/timestream/latest/developerguide/code-samples.create-table.html\">code sample</a> for details. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "Timestream_20181101.CreateTable"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateTableRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateTableRequest": {
        "type": "object",
        "required": [
          "DatabaseName",
          "TableName"
        ],
        "title": "CreateTableRequest",
        "properties": {
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceCreateAPIName"
              },
              {
                "description": "The name of the Timestream database."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceCreateAPIName"
              },
              {
                "description": "The name of the Timestream table."
              }
            ]
          },
          "RetentionProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/RetentionProperties"
              },
              {
                "description": "The duration for which your time-series data must be stored in the memory store and the magnetic store."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": " A list of key-value pairs to label the table. "
              }
            ]
          },
          "MagneticStoreWriteProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/MagneticStoreWriteProperties"
              },
              {
                "description": "Contains properties to set on the table when enabling magnetic store writes."
              }
            ]
          },
          "Schema": {
            "allOf": [
              {
                "$ref": "#/$defs/Schema"
              },
              {
                "description": " The schema of the table. "
              }
            ]
          }
        }
      },
      "ResourceCreateAPIName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+"
      },
      "RetentionProperties": {
        "type": "object",
        "required": [
          "MemoryStoreRetentionPeriodInHours",
          "MagneticStoreRetentionPeriodInDays"
        ],
        "properties": {
          "MemoryStoreRetentionPeriodInHours": {
            "allOf": [
              {
                "$ref": "#/$defs/MemoryStoreRetentionPeriodInHours"
              },
              {
                "description": "The duration for which data must be stored in the memory store. "
              }
            ]
          },
          "MagneticStoreRetentionPeriodInDays": {
            "allOf": [
              {
                "$ref": "#/$defs/MagneticStoreRetentionPeriodInDays"
              },
              {
                "description": "The duration for which data must be stored in the magnetic store. "
              }
            ]
          }
        },
        "description": "Retention properties contain the duration for which your time-series data must be stored in the magnetic store and the memory store. "
      },
      "MemoryStoreRetentionPeriodInHours": {
        "type": "integer",
        "minimum": 1,
        "maximum": 8766
      },
      "MagneticStoreRetentionPeriodInDays": {
        "type": "integer",
        "minimum": 1,
        "maximum": 73000
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": " The key of the tag. Tag keys are case sensitive. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": " The value of the tag. Tag values are case-sensitive and can be null. "
              }
            ]
          }
        },
        "description": " A tag is a label that you assign to a Timestream database and/or table. Each tag consists of a key and an optional value, both of which you define. With tags, you can categorize databases and/or tables, for example, by purpose, owner, or environment. "
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "MagneticStoreWriteProperties": {
        "type": "object",
        "required": [
          "EnableMagneticStoreWrites"
        ],
        "properties": {
          "EnableMagneticStoreWrites": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A flag to enable magnetic store writes."
              }
            ]
          },
          "MagneticStoreRejectedDataLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/MagneticStoreRejectedDataLocation"
              },
              {
                "description": "The location to write error reports for records rejected asynchronously during magnetic store writes."
              }
            ]
          }
        },
        "description": "The set of properties on a table for configuring magnetic store writes."
      },
      "Boolean": {
        "type": "boolean"
      },
      "MagneticStoreRejectedDataLocation": {
        "type": "object",
        "properties": {
          "S3Configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Configuration"
              },
              {
                "description": "Configuration of an S3 location to write error reports for records rejected, asynchronously, during magnetic store writes."
              }
            ]
          }
        },
        "description": "The location to write error reports for records rejected, asynchronously, during magnetic store writes."
      },
      "S3Configuration": {
        "type": "object",
        "properties": {
          "BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The bucket name of the customer S3 bucket."
              }
            ]
          },
          "ObjectKeyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectKeyPrefix"
              },
              {
                "description": "The object key preview for the customer S3 location."
              }
            ]
          },
          "EncryptionOption": {
            "allOf": [
              {
                "$ref": "#/$defs/S3EncryptionOption"
              },
              {
                "description": "The encryption option for the customer S3 location. Options are S3 server-side encryption with an S3 managed key or Amazon Web Services managed key."
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/StringValue2048"
              },
              {
                "description": "The KMS key ID for the customer S3 location when encrypting with an Amazon Web Services managed key."
              }
            ]
          }
        },
        "description": "The configuration that specifies an S3 location."
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectKeyPrefix": {
        "type": "string",
        "pattern": "[a-zA-Z0-9|!\\-_*'\\(\\)]([a-zA-Z0-9]|[!\\-_*'\\(\\)\\/.])+",
        "minLength": 1,
        "maxLength": 928
      },
      "S3EncryptionOption": {
        "type": "string",
        "enum": [
          "SSE_S3",
          "SSE_KMS"
        ]
      },
      "StringValue2048": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Schema": {
        "type": "object",
        "properties": {
          "CompositePartitionKey": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionKeyList"
              },
              {
                "description": "A non-empty list of partition keys defining the attributes used to partition the table data. The order of the list determines the partition hierarchy. The name and type of each partition key as well as the partition key order cannot be changed after the table is created. However, the enforcement level of each partition key can be changed. "
              }
            ]
          }
        },
        "description": " A Schema specifies the expected data model of the table. "
      },
      "PartitionKeyList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PartitionKey"
        },
        "minItems": 1
      },
      "PartitionKey": {
        "type": "object",
        "required": [
          "Type"
        ],
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionKeyType"
              },
              {
                "description": " The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key). "
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaName"
              },
              {
                "description": " The name of the attribute used for a dimension key. "
              }
            ]
          },
          "EnforcementInRecord": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionKeyEnforcementLevel"
              },
              {
                "description": " The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified). "
              }
            ]
          }
        },
        "description": " An attribute used in partitioning data in a table. A dimension key partitions data using the values of the dimension specified by the dimension-name as partition key, while a measure key partitions data using measure names (values of the 'measure_name' column). "
      },
      "PartitionKeyType": {
        "type": "string",
        "enum": [
          "DIMENSION",
          "MEASURE"
        ]
      },
      "SchemaName": {
        "type": "string",
        "minLength": 1
      },
      "PartitionKeyEnforcementLevel": {
        "type": "string",
        "enum": [
          "REQUIRED",
          "OPTIONAL"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ingest.timestream.us-east-1.amazonaws.com/#X-Amz-Target=Timestream_20181101.CreateTable"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Table**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
