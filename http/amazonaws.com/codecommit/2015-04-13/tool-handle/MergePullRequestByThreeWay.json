{
  "name": "MergePullRequestByThreeWay",
  "description": "Attempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodeCommit_20150413.MergePullRequestByThreeWay"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/MergePullRequestByThreeWayInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "MergePullRequestByThreeWayInput": {
        "type": "object",
        "required": [
          "pullRequestId",
          "repositoryName"
        ],
        "title": "MergePullRequestByThreeWayInput",
        "properties": {
          "pullRequestId": {
            "allOf": [
              {
                "$ref": "#/$defs/PullRequestId"
              },
              {
                "description": "The system-generated ID of the pull request. To get this ID, use <a>ListPullRequests</a>."
              }
            ]
          },
          "repositoryName": {
            "allOf": [
              {
                "$ref": "#/$defs/RepositoryName"
              },
              {
                "description": "The name of the repository where the pull request was created."
              }
            ]
          },
          "sourceCommitId": {
            "allOf": [
              {
                "$ref": "#/$defs/ObjectId"
              },
              {
                "description": "The full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID."
              }
            ]
          },
          "conflictDetailLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictDetailLevelTypeEnum"
              },
              {
                "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
              }
            ]
          },
          "conflictResolutionStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictResolutionStrategyTypeEnum"
              },
              {
                "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
              }
            ]
          },
          "commitMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/Message"
              },
              {
                "description": "The commit message to include in the commit information for the merge."
              }
            ]
          },
          "authorName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the author who created the commit. This information is used as both the author and committer for the commit."
              }
            ]
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/$defs/Email"
              },
              {
                "description": "The email address of the person merging the branches. This information is used in the commit information for the merge."
              }
            ]
          },
          "keepEmptyFolders": {
            "allOf": [
              {
                "$ref": "#/$defs/KeepEmptyFolders"
              },
              {
                "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false."
              }
            ]
          },
          "conflictResolution": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictResolution"
              },
              {
                "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
              }
            ]
          }
        }
      },
      "PullRequestId": {
        "type": "string"
      },
      "RepositoryName": {
        "type": "string",
        "pattern": "[\\w\\.-]+",
        "minLength": 1,
        "maxLength": 100
      },
      "ObjectId": {
        "type": "string"
      },
      "ConflictDetailLevelTypeEnum": {
        "type": "string",
        "enum": [
          "FILE_LEVEL",
          "LINE_LEVEL"
        ]
      },
      "ConflictResolutionStrategyTypeEnum": {
        "type": "string",
        "enum": [
          "NONE",
          "ACCEPT_SOURCE",
          "ACCEPT_DESTINATION",
          "AUTOMERGE"
        ]
      },
      "Message": {
        "type": "string"
      },
      "Name": {
        "type": "string"
      },
      "Email": {
        "type": "string"
      },
      "KeepEmptyFolders": {
        "type": "boolean"
      },
      "ConflictResolution": {
        "type": "object",
        "properties": {
          "replaceContents": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplaceContentEntries"
              },
              {
                "description": "Files to have content replaced as part of the merge conflict resolution."
              }
            ]
          },
          "deleteFiles": {
            "allOf": [
              {
                "$ref": "#/$defs/DeleteFileEntries"
              },
              {
                "description": "Files to be deleted as part of the merge conflict resolution."
              }
            ]
          },
          "setFileModes": {
            "allOf": [
              {
                "$ref": "#/$defs/SetFileModeEntries"
              },
              {
                "description": "File modes that are set as part of the merge conflict resolution."
              }
            ]
          }
        },
        "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
      },
      "ReplaceContentEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ReplaceContentEntry"
        }
      },
      "ReplaceContentEntry": {
        "type": "object",
        "required": [
          "filePath",
          "replacementType"
        ],
        "properties": {
          "filePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The path of the conflicting file."
              }
            ]
          },
          "replacementType": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplacementTypeEnum"
              },
              {
                "description": "The replacement type to use when determining how to resolve the conflict."
              }
            ]
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/FileContent"
              },
              {
                "description": "The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT."
              }
            ]
          },
          "fileMode": {
            "allOf": [
              {
                "$ref": "#/$defs/FileModeTypeEnum"
              },
              {
                "description": "The file mode to apply during conflict resoltion."
              }
            ]
          }
        },
        "description": "Information about a replacement content entry in the conflict of a merge or pull request operation."
      },
      "Path": {
        "type": "string"
      },
      "ReplacementTypeEnum": {
        "type": "string",
        "enum": [
          "KEEP_BASE",
          "KEEP_SOURCE",
          "KEEP_DESTINATION",
          "USE_NEW_CONTENT"
        ]
      },
      "FileContent": {
        "type": "string",
        "maxLength": 6291456
      },
      "FileModeTypeEnum": {
        "type": "string",
        "enum": [
          "EXECUTABLE",
          "NORMAL",
          "SYMLINK"
        ]
      },
      "DeleteFileEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DeleteFileEntry"
        }
      },
      "DeleteFileEntry": {
        "type": "object",
        "required": [
          "filePath"
        ],
        "properties": {
          "filePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The full path of the file to be deleted, including the name of the file."
              }
            ]
          }
        },
        "description": "A file that is deleted as part of a commit."
      },
      "SetFileModeEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SetFileModeEntry"
        }
      },
      "SetFileModeEntry": {
        "type": "object",
        "required": [
          "filePath",
          "fileMode"
        ],
        "properties": {
          "filePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The full path to the file, including the name of the file."
              }
            ]
          },
          "fileMode": {
            "allOf": [
              {
                "$ref": "#/$defs/FileModeTypeEnum"
              },
              {
                "description": "The file mode for the file."
              }
            ]
          }
        },
        "description": "Information about the file mode changes."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codecommit.us-east-1.amazonaws.com/#X-Amz-Target=CodeCommit_20150413.MergePullRequestByThreeWay"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**pullRequest**: Returns information about a pull request.",
              {
                "$ul": [
                  "**pullRequestId**",
                  "**title**",
                  "**description**",
                  "**lastActivityDate**",
                  "**creationDate**",
                  "**pullRequestStatus**",
                  "**authorArn**",
                  "**pullRequestTargets**",
                  "**clientRequestToken**",
                  "**revisionId**",
                  "**approvalRules**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "491": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "492": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "493": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "494": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "495": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "496": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "497": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "498": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "499": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "500": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "501": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "502": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "503": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "504": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "505": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "506": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "507": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "508": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "509": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "510": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "511": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "512": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "513": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "514": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "515": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "516": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "517": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
