{
  "name": "CreateUnreferencedMergeCommit",
  "description": "<p>Creates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.</p> <note> <p>This unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodeCommit_20150413.CreateUnreferencedMergeCommit"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateUnreferencedMergeCommitInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateUnreferencedMergeCommitInput": {
        "type": "object",
        "required": [
          "repositoryName",
          "sourceCommitSpecifier",
          "destinationCommitSpecifier",
          "mergeOption"
        ],
        "title": "CreateUnreferencedMergeCommitInput",
        "properties": {
          "repositoryName": {
            "allOf": [
              {
                "$ref": "#/$defs/RepositoryName"
              },
              {
                "description": "The name of the repository where you want to create the unreferenced merge commit."
              }
            ]
          },
          "sourceCommitSpecifier": {
            "allOf": [
              {
                "$ref": "#/$defs/CommitName"
              },
              {
                "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
              }
            ]
          },
          "destinationCommitSpecifier": {
            "allOf": [
              {
                "$ref": "#/$defs/CommitName"
              },
              {
                "description": "The branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID)."
              }
            ]
          },
          "mergeOption": {
            "allOf": [
              {
                "$ref": "#/$defs/MergeOptionTypeEnum"
              },
              {
                "description": "The merge option or strategy you want to use to merge the code."
              }
            ]
          },
          "conflictDetailLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictDetailLevelTypeEnum"
              },
              {
                "description": "The level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line."
              }
            ]
          },
          "conflictResolutionStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictResolutionStrategyTypeEnum"
              },
              {
                "description": "Specifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful."
              }
            ]
          },
          "authorName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit."
              }
            ]
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/$defs/Email"
              },
              {
                "description": "The email address for the person who created the unreferenced commit."
              }
            ]
          },
          "commitMessage": {
            "allOf": [
              {
                "$ref": "#/$defs/Message"
              },
              {
                "description": "The commit message for the unreferenced commit."
              }
            ]
          },
          "keepEmptyFolders": {
            "allOf": [
              {
                "$ref": "#/$defs/KeepEmptyFolders"
              },
              {
                "description": "If the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false."
              }
            ]
          },
          "conflictResolution": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictResolution"
              },
              {
                "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
              }
            ]
          }
        }
      },
      "RepositoryName": {
        "type": "string",
        "pattern": "[\\w\\.-]+",
        "minLength": 1,
        "maxLength": 100
      },
      "CommitName": {
        "type": "string"
      },
      "MergeOptionTypeEnum": {
        "type": "string",
        "enum": [
          "FAST_FORWARD_MERGE",
          "SQUASH_MERGE",
          "THREE_WAY_MERGE"
        ]
      },
      "ConflictDetailLevelTypeEnum": {
        "type": "string",
        "enum": [
          "FILE_LEVEL",
          "LINE_LEVEL"
        ]
      },
      "ConflictResolutionStrategyTypeEnum": {
        "type": "string",
        "enum": [
          "NONE",
          "ACCEPT_SOURCE",
          "ACCEPT_DESTINATION",
          "AUTOMERGE"
        ]
      },
      "Name": {
        "type": "string"
      },
      "Email": {
        "type": "string"
      },
      "Message": {
        "type": "string"
      },
      "KeepEmptyFolders": {
        "type": "boolean"
      },
      "ConflictResolution": {
        "type": "object",
        "properties": {
          "replaceContents": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplaceContentEntries"
              },
              {
                "description": "Files to have content replaced as part of the merge conflict resolution."
              }
            ]
          },
          "deleteFiles": {
            "allOf": [
              {
                "$ref": "#/$defs/DeleteFileEntries"
              },
              {
                "description": "Files to be deleted as part of the merge conflict resolution."
              }
            ]
          },
          "setFileModes": {
            "allOf": [
              {
                "$ref": "#/$defs/SetFileModeEntries"
              },
              {
                "description": "File modes that are set as part of the merge conflict resolution."
              }
            ]
          }
        },
        "description": "If AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge."
      },
      "ReplaceContentEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ReplaceContentEntry"
        }
      },
      "ReplaceContentEntry": {
        "type": "object",
        "required": [
          "filePath",
          "replacementType"
        ],
        "properties": {
          "filePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The path of the conflicting file."
              }
            ]
          },
          "replacementType": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplacementTypeEnum"
              },
              {
                "description": "The replacement type to use when determining how to resolve the conflict."
              }
            ]
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/FileContent"
              },
              {
                "description": "The base-64 encoded content to use when the replacement type is USE_NEW_CONTENT."
              }
            ]
          },
          "fileMode": {
            "allOf": [
              {
                "$ref": "#/$defs/FileModeTypeEnum"
              },
              {
                "description": "The file mode to apply during conflict resoltion."
              }
            ]
          }
        },
        "description": "Information about a replacement content entry in the conflict of a merge or pull request operation."
      },
      "Path": {
        "type": "string"
      },
      "ReplacementTypeEnum": {
        "type": "string",
        "enum": [
          "KEEP_BASE",
          "KEEP_SOURCE",
          "KEEP_DESTINATION",
          "USE_NEW_CONTENT"
        ]
      },
      "FileContent": {
        "type": "string",
        "maxLength": 6291456
      },
      "FileModeTypeEnum": {
        "type": "string",
        "enum": [
          "EXECUTABLE",
          "NORMAL",
          "SYMLINK"
        ]
      },
      "DeleteFileEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DeleteFileEntry"
        }
      },
      "DeleteFileEntry": {
        "type": "object",
        "required": [
          "filePath"
        ],
        "properties": {
          "filePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The full path of the file to be deleted, including the name of the file."
              }
            ]
          }
        },
        "description": "A file that is deleted as part of a commit."
      },
      "SetFileModeEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SetFileModeEntry"
        }
      },
      "SetFileModeEntry": {
        "type": "object",
        "required": [
          "filePath",
          "fileMode"
        ],
        "properties": {
          "filePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The full path to the file, including the name of the file."
              }
            ]
          },
          "fileMode": {
            "allOf": [
              {
                "$ref": "#/$defs/FileModeTypeEnum"
              },
              {
                "description": "The file mode for the file."
              }
            ]
          }
        },
        "description": "Information about the file mode changes."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codecommit.us-east-1.amazonaws.com/#X-Amz-Target=CodeCommit_20150413.CreateUnreferencedMergeCommit"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**commitId**",
            "**treeId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "491": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "492": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "493": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "494": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "495": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "496": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "497": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "498": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "499": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "500": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "501": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "502": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "503": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "504": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "505": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "506": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "507": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "508": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "509": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "510": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "511": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "512": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "513": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "514": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "515": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
