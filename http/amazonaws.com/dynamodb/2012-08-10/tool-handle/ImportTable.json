{
  "name": "ImportTable",
  "description": " Imports table data from an S3 bucket. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20120810.ImportTable"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ImportTableInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ImportTableInput": {
        "type": "object",
        "required": [
          "S3BucketSource",
          "InputFormat",
          "TableCreationParameters"
        ],
        "title": "ImportTableInput",
        "properties": {
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientToken"
              },
              {
                "description": "<p>Providing a <code>ClientToken</code> makes the call to <code>ImportTableInput</code> idempotent, meaning that multiple identical calls have the same effect as one single call.</p> <p>A client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.</p> <p>If you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an <code>IdempotentParameterMismatch</code> exception.</p>"
              }
            ]
          },
          "S3BucketSource": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketSource"
              },
              {
                "description": " The S3 bucket that provides the source for the import. "
              }
            ]
          },
          "InputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/InputFormat"
              },
              {
                "description": " The format of the source data. Valid values for <code>ImportFormat</code> are <code>CSV</code>, <code>DYNAMODB_JSON</code> or <code>ION</code>. "
              }
            ]
          },
          "InputFormatOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/InputFormatOptions"
              },
              {
                "description": " Additional properties that specify how the input is formatted, "
              }
            ]
          },
          "InputCompressionType": {
            "allOf": [
              {
                "$ref": "#/$defs/InputCompressionType"
              },
              {
                "description": " Type of compression to be used on the input coming from the imported table. "
              }
            ]
          },
          "TableCreationParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TableCreationParameters"
              },
              {
                "description": "Parameters for the table to import the data into. "
              }
            ]
          }
        }
      },
      "ClientToken": {
        "type": "string",
        "pattern": "^[^\\$]+$"
      },
      "S3BucketSource": {
        "type": "object",
        "required": [
          "S3Bucket"
        ],
        "properties": {
          "S3BucketOwner": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketOwner"
              },
              {
                "description": " The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional. "
              }
            ]
          },
          "S3Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": " The S3 bucket that is being imported from. "
              }
            ]
          },
          "S3KeyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Prefix"
              },
              {
                "description": " The key prefix shared by all S3 Objects that are being imported. "
              }
            ]
          }
        },
        "description": " The S3 bucket that is being imported from. "
      },
      "S3BucketOwner": {
        "type": "string",
        "pattern": "[0-9]{12}"
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[a-z0-9A-Z]+[\\.\\-\\w]*[a-z0-9A-Z]+$",
        "maxLength": 255
      },
      "S3Prefix": {
        "type": "string",
        "maxLength": 1024
      },
      "InputFormat": {
        "type": "string",
        "enum": [
          "DYNAMODB_JSON",
          "ION",
          "CSV"
        ]
      },
      "InputFormatOptions": {
        "type": "object",
        "properties": {
          "Csv": {
            "allOf": [
              {
                "$ref": "#/$defs/CsvOptions"
              },
              {
                "description": " The options for imported source files in CSV format. The values are Delimiter and HeaderList. "
              }
            ]
          }
        },
        "description": " The format options for the data that was imported into the target table. There is one value, CsvOption."
      },
      "CsvOptions": {
        "type": "object",
        "properties": {
          "Delimiter": {
            "allOf": [
              {
                "$ref": "#/$defs/CsvDelimiter"
              },
              {
                "description": " The delimiter used for separating items in the CSV file being imported. "
              }
            ]
          },
          "HeaderList": {
            "allOf": [
              {
                "$ref": "#/$defs/CsvHeaderList"
              },
              {
                "description": " List of the headers used to specify a common header for all source CSV files being imported. If this field is specified then the first line of each CSV file is treated as data instead of the header. If this field is not specified the the first line of each CSV file is treated as the header. "
              }
            ]
          }
        },
        "description": " Processing options for the CSV file being imported. "
      },
      "CsvDelimiter": {
        "type": "string",
        "pattern": "[,;:|\\t ]",
        "minLength": 1,
        "maxLength": 1
      },
      "CsvHeaderList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CsvHeader"
        },
        "minItems": 1,
        "maxItems": 255
      },
      "CsvHeader": {
        "type": "string",
        "pattern": "[\\x20-\\x21\\x23-\\x2B\\x2D-\\x7E]*",
        "minLength": 1,
        "maxLength": 65536
      },
      "InputCompressionType": {
        "type": "string",
        "enum": [
          "GZIP",
          "ZSTD",
          "NONE"
        ]
      },
      "TableCreationParameters": {
        "type": "object",
        "required": [
          "TableName",
          "AttributeDefinitions",
          "KeySchema"
        ],
        "properties": {
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": " The name of the table created as part of the import operation. "
              }
            ]
          },
          "AttributeDefinitions": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeDefinitions"
              },
              {
                "description": " The attributes of the table created as part of the import operation. "
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": " The primary key and option sort key of the table created as part of the import operation. "
              }
            ]
          },
          "BillingMode": {
            "allOf": [
              {
                "$ref": "#/$defs/BillingMode"
              },
              {
                "description": " The billing mode for provisioning the table created as part of the import operation. "
              }
            ]
          },
          "ProvisionedThroughput": {
            "$ref": "#/$defs/ProvisionedThroughput"
          },
          "SSESpecification": {
            "$ref": "#/$defs/SSESpecification"
          },
          "GlobalSecondaryIndexes": {
            "allOf": [
              {
                "$ref": "#/$defs/GlobalSecondaryIndexList"
              },
              {
                "description": " The Global Secondary Indexes (GSI) of the table to be created as part of the import operation. "
              }
            ]
          }
        },
        "description": " The parameters for the table created as part of the import operation. "
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "AttributeDefinitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeDefinition"
        }
      },
      "AttributeDefinition": {
        "type": "object",
        "required": [
          "AttributeName",
          "AttributeType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "A name for the attribute."
              }
            ]
          },
          "AttributeType": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalarAttributeType"
              },
              {
                "description": "<p>The data type for the attribute, where:</p> <ul> <li> <p> <code>S</code> - the attribute is of type String</p> </li> <li> <p> <code>N</code> - the attribute is of type Number</p> </li> <li> <p> <code>B</code> - the attribute is of type Binary</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Represents an attribute for describing the key schema for the table and indexes."
      },
      "KeySchemaAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ScalarAttributeType": {
        "type": "string",
        "enum": [
          "S",
          "N",
          "B"
        ]
      },
      "KeySchema": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/KeySchemaElement"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "KeySchemaElement": {
        "type": "object",
        "required": [
          "AttributeName",
          "KeyType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "The name of a key attribute."
              }
            ]
          },
          "KeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyType"
              },
              {
                "description": "<p>The role that this key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>"
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "HASH",
          "RANGE"
        ]
      },
      "BillingMode": {
        "type": "string",
        "enum": [
          "PROVISIONED",
          "PAY_PER_REQUEST"
        ]
      },
      "ProvisionedThroughput": {
        "type": "object",
        "required": [
          "ReadCapacityUnits",
          "WriteCapacityUnits"
        ],
        "properties": {
          "ReadCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          },
          "WriteCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          }
        },
        "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "PositiveLongObject": {
        "type": "integer",
        "minimum": 1
      },
      "SSESpecification": {
        "type": "object",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEEnabled"
              },
              {
                "description": "Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to <code>KMS</code> and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key."
              }
            ]
          },
          "SSEType": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEType"
              },
              {
                "description": "<p>Server-side encryption type. The only supported value is:</p> <ul> <li> <p> <code>KMS</code> - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).</p> </li> </ul>"
              }
            ]
          },
          "KMSMasterKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KMSMasterKeyId"
              },
              {
                "description": "The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key <code>alias/aws/dynamodb</code>."
              }
            ]
          }
        },
        "description": "Represents the settings used to enable server-side encryption."
      },
      "SSEEnabled": {
        "type": "boolean"
      },
      "SSEType": {
        "type": "string",
        "enum": [
          "AES256",
          "KMS"
        ]
      },
      "KMSMasterKeyId": {
        "type": "string"
      },
      "GlobalSecondaryIndexList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GlobalSecondaryIndex"
        }
      },
      "GlobalSecondaryIndex": {
        "type": "object",
        "required": [
          "IndexName",
          "KeySchema",
          "Projection"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index. The name must be unique among all other indexes on this table."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "<p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          },
          "Projection": {
            "allOf": [
              {
                "$ref": "#/$defs/Projection"
              },
              {
                "description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Represents the properties of a global secondary index."
      },
      "IndexName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "Projection": {
        "type": "object",
        "properties": {
          "ProjectionType": {
            "allOf": [
              {
                "$ref": "#/$defs/ProjectionType"
              },
              {
                "description": "<p>The set of attributes that are projected into the index:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul>"
              }
            ]
          },
          "NonKeyAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/NonKeyAttributeNameList"
              },
              {
                "description": "<p>Represents the non-key attribute names which will be projected into the index.</p> <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>"
              }
            ]
          }
        },
        "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected."
      },
      "ProjectionType": {
        "type": "string",
        "enum": [
          "ALL",
          "KEYS_ONLY",
          "INCLUDE"
        ]
      },
      "NonKeyAttributeNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonKeyAttributeName"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "NonKeyAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20120810.ImportTable"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ImportTableDescription**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
