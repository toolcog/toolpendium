{
  "name": "CreateTable",
  "description": "<p>The <code>CreateTable</code> operation adds a new table to your account. In an Amazon Web Services account, table names must be unique within each Region. That is, you can have two tables with same name if you create the tables in different Regions.</p> <p> <code>CreateTable</code> is an asynchronous operation. Upon receiving a <code>CreateTable</code> request, DynamoDB immediately returns a response with a <code>TableStatus</code> of <code>CREATING</code>. After the table is created, DynamoDB sets the <code>TableStatus</code> to <code>ACTIVE</code>. You can perform read and write operations only on an <code>ACTIVE</code> table. </p> <p>You can optionally define secondary indexes on the new table, as part of the <code>CreateTable</code> operation. If you want to create multiple tables with secondary indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the <code>CREATING</code> state at any given time.</p> <p>You can use the <code>DescribeTable</code> action to check the table status.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20120810.CreateTable"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateTableInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateTableInput": {
        "type": "object",
        "required": [
          "AttributeDefinitions",
          "TableName",
          "KeySchema"
        ],
        "title": "CreateTableInput",
        "properties": {
          "AttributeDefinitions": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeDefinitions"
              },
              {
                "description": "An array of attributes that describe the key schema for the table and indexes."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "The name of the table to create."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "<p>Specifies the attributes that make up the primary key for a table or an index. The attributes in <code>KeySchema</code> must also be defined in the <code>AttributeDefinitions</code> array. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html\">Data Model</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>Each <code>KeySchemaElement</code> in the array is composed of:</p> <ul> <li> <p> <code>AttributeName</code> - The name of this key attribute.</p> </li> <li> <p> <code>KeyType</code> - The role that the key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note> <p>For a simple primary key (partition key), you must provide exactly one element with a <code>KeyType</code> of <code>HASH</code>.</p> <p>For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a <code>KeyType</code> of <code>HASH</code>, and the second element must have a <code>KeyType</code> of <code>RANGE</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key\">Working with Tables</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          },
          "LocalSecondaryIndexes": {
            "allOf": [
              {
                "$ref": "#/$defs/LocalSecondaryIndexList"
              },
              {
                "description": "<p>One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.</p> <p>Each local secondary index in the array includes the following:</p> <ul> <li> <p> <code>IndexName</code> - The name of the local secondary index. Must be unique only for this table.</p> <p/> </li> <li> <p> <code>KeySchema</code> - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.</p> </li> <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p> <ul> <li> <p> <code>ProjectionType</code> - One of the following:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes is in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul> </li> <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li> </ul> </li> </ul>"
              }
            ]
          },
          "GlobalSecondaryIndexes": {
            "allOf": [
              {
                "$ref": "#/$defs/GlobalSecondaryIndexList"
              },
              {
                "description": "<p>One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:</p> <ul> <li> <p> <code>IndexName</code> - The name of the global secondary index. Must be unique only for this table.</p> <p/> </li> <li> <p> <code>KeySchema</code> - Specifies the key schema for the global secondary index.</p> </li> <li> <p> <code>Projection</code> - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:</p> <ul> <li> <p> <code>ProjectionType</code> - One of the following:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - Only the specified table attributes are projected into the index. The list of projected attributes is in <code>NonKeyAttributes</code>.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul> </li> <li> <p> <code>NonKeyAttributes</code> - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in <code>NonKeyAttributes</code>, summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p> </li> </ul> </li> <li> <p> <code>ProvisionedThroughput</code> - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.</p> </li> </ul>"
              }
            ]
          },
          "BillingMode": {
            "allOf": [
              {
                "$ref": "#/$defs/BillingMode"
              },
              {
                "description": "<p>Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.</p> <ul> <li> <p> <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual\">Provisioned Mode</a>.</p> </li> <li> <p> <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand\">On-Demand Mode</a>. </p> </li> </ul>"
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p> If you set BillingMode as <code>PROVISIONED</code>, you must specify this property. If you set BillingMode as <code>PAY_PER_REQUEST</code>, you cannot specify this property.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          },
          "StreamSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamSpecification"
              },
              {
                "description": "<p>The settings for DynamoDB Streams on the table. These settings consist of:</p> <ul> <li> <p> <code>StreamEnabled</code> - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).</p> </li> <li> <p> <code>StreamViewType</code> - When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the table's stream. Valid values for <code>StreamViewType</code> are:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li> <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li> <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li> <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li> </ul> </li> </ul>"
              }
            ]
          },
          "SSESpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/SSESpecification"
              },
              {
                "description": "Represents the settings used to enable server-side encryption."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "A list of key-value pairs to label the table. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\">Tagging for DynamoDB</a>."
              }
            ]
          },
          "TableClass": {
            "allOf": [
              {
                "$ref": "#/$defs/TableClass"
              },
              {
                "description": "The table class of the new table. Valid values are <code>STANDARD</code> and <code>STANDARD_INFREQUENT_ACCESS</code>."
              }
            ]
          },
          "DeletionProtectionEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/DeletionProtectionEnabled"
              },
              {
                "description": "Indicates whether deletion protection is to be enabled (true) or disabled (false) on the table."
              }
            ]
          }
        },
        "description": "Represents the input of a <code>CreateTable</code> operation."
      },
      "AttributeDefinitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeDefinition"
        }
      },
      "AttributeDefinition": {
        "type": "object",
        "required": [
          "AttributeName",
          "AttributeType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "A name for the attribute."
              }
            ]
          },
          "AttributeType": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalarAttributeType"
              },
              {
                "description": "<p>The data type for the attribute, where:</p> <ul> <li> <p> <code>S</code> - the attribute is of type String</p> </li> <li> <p> <code>N</code> - the attribute is of type Number</p> </li> <li> <p> <code>B</code> - the attribute is of type Binary</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Represents an attribute for describing the key schema for the table and indexes."
      },
      "KeySchemaAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ScalarAttributeType": {
        "type": "string",
        "enum": [
          "S",
          "N",
          "B"
        ]
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "KeySchema": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/KeySchemaElement"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "KeySchemaElement": {
        "type": "object",
        "required": [
          "AttributeName",
          "KeyType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "The name of a key attribute."
              }
            ]
          },
          "KeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyType"
              },
              {
                "description": "<p>The role that this key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>"
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "HASH",
          "RANGE"
        ]
      },
      "LocalSecondaryIndexList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LocalSecondaryIndex"
        }
      },
      "LocalSecondaryIndex": {
        "type": "object",
        "required": [
          "IndexName",
          "KeySchema",
          "Projection"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the local secondary index. The name must be unique among all other indexes on this table."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "<p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          },
          "Projection": {
            "allOf": [
              {
                "$ref": "#/$defs/Projection"
              },
              {
                "description": "Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
              }
            ]
          }
        },
        "description": "Represents the properties of a local secondary index."
      },
      "IndexName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "Projection": {
        "type": "object",
        "properties": {
          "ProjectionType": {
            "allOf": [
              {
                "$ref": "#/$defs/ProjectionType"
              },
              {
                "description": "<p>The set of attributes that are projected into the index:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul>"
              }
            ]
          },
          "NonKeyAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/NonKeyAttributeNameList"
              },
              {
                "description": "<p>Represents the non-key attribute names which will be projected into the index.</p> <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>"
              }
            ]
          }
        },
        "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected."
      },
      "ProjectionType": {
        "type": "string",
        "enum": [
          "ALL",
          "KEYS_ONLY",
          "INCLUDE"
        ]
      },
      "NonKeyAttributeNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonKeyAttributeName"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "NonKeyAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "GlobalSecondaryIndexList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GlobalSecondaryIndex"
        }
      },
      "GlobalSecondaryIndex": {
        "type": "object",
        "required": [
          "IndexName",
          "KeySchema",
          "Projection"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index. The name must be unique among all other indexes on this table."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "<p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          },
          "Projection": {
            "allOf": [
              {
                "$ref": "#/$defs/Projection"
              },
              {
                "description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Represents the properties of a global secondary index."
      },
      "ProvisionedThroughput": {
        "type": "object",
        "required": [
          "ReadCapacityUnits",
          "WriteCapacityUnits"
        ],
        "properties": {
          "ReadCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          },
          "WriteCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          }
        },
        "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "PositiveLongObject": {
        "type": "integer",
        "minimum": 1
      },
      "BillingMode": {
        "type": "string",
        "enum": [
          "PROVISIONED",
          "PAY_PER_REQUEST"
        ]
      },
      "StreamSpecification": {
        "type": "object",
        "required": [
          "StreamEnabled"
        ],
        "properties": {
          "StreamEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamEnabled"
              },
              {
                "description": "Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table."
              }
            ]
          },
          "StreamViewType": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamViewType"
              },
              {
                "description": "<p> When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the stream for this table. Valid values for <code>StreamViewType</code> are:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li> <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li> <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li> <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Represents the DynamoDB Streams configuration for a table in DynamoDB."
      },
      "StreamEnabled": {
        "type": "boolean"
      },
      "StreamViewType": {
        "type": "string",
        "enum": [
          "NEW_IMAGE",
          "OLD_IMAGE",
          "NEW_AND_OLD_IMAGES",
          "KEYS_ONLY"
        ]
      },
      "SSESpecification": {
        "type": "object",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEEnabled"
              },
              {
                "description": "Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to <code>KMS</code> and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key."
              }
            ]
          },
          "SSEType": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEType"
              },
              {
                "description": "<p>Server-side encryption type. The only supported value is:</p> <ul> <li> <p> <code>KMS</code> - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).</p> </li> </ul>"
              }
            ]
          },
          "KMSMasterKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KMSMasterKeyId"
              },
              {
                "description": "The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key <code>alias/aws/dynamodb</code>."
              }
            ]
          }
        },
        "description": "Represents the settings used to enable server-side encryption."
      },
      "SSEEnabled": {
        "type": "boolean"
      },
      "SSEType": {
        "type": "string",
        "enum": [
          "AES256",
          "KMS"
        ]
      },
      "KMSMasterKeyId": {
        "type": "string"
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKeyString"
              },
              {
                "description": "The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValueString"
              },
              {
                "description": "The value of the tag. Tag values are case-sensitive and can be null."
              }
            ]
          }
        },
        "description": "<p>Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. </p> <p>Amazon Web Services-assigned tag names and values are automatically assigned the <code>aws:</code> prefix, which the user cannot assign. Amazon Web Services-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix <code>user:</code> in the Cost Allocation Report. You cannot backdate the application of a tag.</p> <p>For an overview on tagging DynamoDB resources, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html\">Tagging for DynamoDB</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "TagKeyString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValueString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "TableClass": {
        "type": "string",
        "enum": [
          "STANDARD",
          "STANDARD_INFREQUENT_ACCESS"
        ]
      },
      "DeletionProtectionEnabled": {
        "type": "boolean"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20120810.CreateTable"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents the output of a <code>CreateTable</code> operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**TableDescription**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
