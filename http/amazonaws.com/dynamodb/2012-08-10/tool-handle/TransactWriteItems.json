{
  "name": "TransactWriteItems",
  "description": "<p> <code>TransactWriteItems</code> is a synchronous write operation that groups up to 100 action requests. These actions can target items in different tables, but not in different Amazon Web Services accounts or Regions, and no two actions can target the same item. For example, you cannot both <code>ConditionCheck</code> and <code>Update</code> the same item. The aggregate size of the items in the transaction cannot exceed 4 MB.</p> <p>The actions are completed atomically so that either all of them succeed, or all of them fail. They are defined by the following objects:</p> <ul> <li> <p> <code>Put</code>  —   Initiates a <code>PutItem</code> operation to write a new item. This structure specifies the primary key of the item to be written, the name of the table to write it in, an optional condition expression that must be satisfied for the write to succeed, a list of the item's attributes, and a field indicating whether to retrieve the item's attributes if the condition is not met.</p> </li> <li> <p> <code>Update</code>  —   Initiates an <code>UpdateItem</code> operation to update an existing item. This structure specifies the primary key of the item to be updated, the name of the table where it resides, an optional condition expression that must be satisfied for the update to succeed, an expression that defines one or more attributes to be updated, and a field indicating whether to retrieve the item's attributes if the condition is not met.</p> </li> <li> <p> <code>Delete</code>  —   Initiates a <code>DeleteItem</code> operation to delete an existing item. This structure specifies the primary key of the item to be deleted, the name of the table where it resides, an optional condition expression that must be satisfied for the deletion to succeed, and a field indicating whether to retrieve the item's attributes if the condition is not met.</p> </li> <li> <p> <code>ConditionCheck</code>  —   Applies a condition to an item that is not being modified by the transaction. This structure specifies the primary key of the item to be checked, the name of the table where it resides, a condition expression that must be satisfied for the transaction to succeed, and a field indicating whether to retrieve the item's attributes if the condition is not met.</p> </li> </ul> <p>DynamoDB rejects the entire <code>TransactWriteItems</code> request if any of the following is true:</p> <ul> <li> <p>A condition in one of the condition expressions is not met.</p> </li> <li> <p>An ongoing operation is in the process of updating the same item.</p> </li> <li> <p>There is insufficient provisioned capacity for the transaction to be completed.</p> </li> <li> <p>An item size becomes too large (bigger than 400 KB), a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.</p> </li> <li> <p>The aggregate size of the items in the transaction exceeds 4 MB.</p> </li> <li> <p>There is a user error, such as an invalid data format.</p> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20120810.TransactWriteItems"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/TransactWriteItemsInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "TransactWriteItemsInput": {
        "type": "object",
        "required": [
          "TransactItems"
        ],
        "title": "TransactWriteItemsInput",
        "properties": {
          "TransactItems": {
            "allOf": [
              {
                "$ref": "#/$defs/TransactWriteItemList"
              },
              {
                "description": "An ordered array of up to 100 <code>TransactWriteItem</code> objects, each of which contains a <code>ConditionCheck</code>, <code>Put</code>, <code>Update</code>, or <code>Delete</code> object. These can operate on items in different tables, but the tables must reside in the same Amazon Web Services account and Region, and no two of them can operate on the same item. "
              }
            ]
          },
          "ReturnConsumedCapacity": {
            "$ref": "#/$defs/ReturnConsumedCapacity"
          },
          "ReturnItemCollectionMetrics": {
            "allOf": [
              {
                "$ref": "#/$defs/ReturnItemCollectionMetrics"
              },
              {
                "description": "Determines whether item collection metrics are returned. If set to <code>SIZE</code>, the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to <code>NONE</code> (the default), no statistics are returned. "
              }
            ]
          },
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientRequestToken"
              },
              {
                "description": "<p>Providing a <code>ClientRequestToken</code> makes the call to <code>TransactWriteItems</code> idempotent, meaning that multiple identical calls have the same effect as one single call.</p> <p>Although multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the <code>ReturnConsumedCapacity</code> parameter is set, then the initial <code>TransactWriteItems</code> call returns the amount of write capacity units consumed in making the changes. Subsequent <code>TransactWriteItems</code> calls with the same client token return the number of read capacity units consumed in reading the item.</p> <p>A client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent.</p> <p>If you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an <code>IdempotentParameterMismatch</code> exception.</p>"
              }
            ]
          }
        }
      },
      "TransactWriteItemList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TransactWriteItem"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "TransactWriteItem": {
        "type": "object",
        "properties": {
          "ConditionCheck": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionCheck"
              },
              {
                "description": "A request to perform a check item operation."
              }
            ]
          },
          "Put": {
            "allOf": [
              {
                "$ref": "#/$defs/Put"
              },
              {
                "description": "A request to perform a <code>PutItem</code> operation."
              }
            ]
          },
          "Delete": {
            "allOf": [
              {
                "$ref": "#/$defs/Delete"
              },
              {
                "description": "A request to perform a <code>DeleteItem</code> operation."
              }
            ]
          },
          "Update": {
            "allOf": [
              {
                "$ref": "#/$defs/Update"
              },
              {
                "description": "A request to perform an <code>UpdateItem</code> operation."
              }
            ]
          }
        },
        "description": "A list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically."
      },
      "ConditionCheck": {
        "type": "object",
        "required": [
          "Key",
          "TableName",
          "ConditionExpression"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The primary key of the item to be checked. Each element consists of an attribute name and a value for that attribute."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "Name of the table for the check item request."
              }
            ]
          },
          "ConditionExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionExpression"
              },
              {
                "description": "A condition that must be satisfied in order for a conditional update to succeed. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html\">Condition expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>."
              }
            ]
          },
          "ExpressionAttributeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeNameMap"
              },
              {
                "description": "One or more substitution tokens for attribute names in an expression. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ExpressionAttributeNames.html\">Expression attribute names</a> in the <i>Amazon DynamoDB Developer Guide</i>."
              }
            ]
          },
          "ExpressionAttributeValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeValueMap"
              },
              {
                "description": "One or more values that can be substituted in an expression. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html\">Condition expressions</a> in the <i>Amazon DynamoDB Developer Guide</i>."
              }
            ]
          },
          "ReturnValuesOnConditionCheckFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/ReturnValuesOnConditionCheckFailure"
              },
              {
                "description": "Use <code>ReturnValuesOnConditionCheckFailure</code> to get the item attributes if the <code>ConditionCheck</code> condition fails. For <code>ReturnValuesOnConditionCheckFailure</code>, the valid values are: NONE and ALL_OLD."
              }
            ]
          }
        },
        "description": "Represents a request to perform a check that an item exists or to check the condition of specific attributes of the item."
      },
      "Key": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "S": {
            "allOf": [
              {
                "$ref": "#/$defs/StringAttributeValue"
              },
              {
                "description": "<p>An attribute of type String. For example:</p> <p> <code>\"S\": \"Hello\"</code> </p>"
              }
            ]
          },
          "N": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberAttributeValue"
              },
              {
                "description": "<p>An attribute of type Number. For example:</p> <p> <code>\"N\": \"123.45\"</code> </p> <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>"
              }
            ]
          },
          "B": {
            "allOf": [
              {
                "$ref": "#/$defs/BinaryAttributeValue"
              },
              {
                "description": "<p>An attribute of type Binary. For example:</p> <p> <code>\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"</code> </p>"
              }
            ]
          },
          "SS": {
            "allOf": [
              {
                "$ref": "#/$defs/StringSetAttributeValue"
              },
              {
                "description": "<p>An attribute of type String Set. For example:</p> <p> <code>\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]</code> </p>"
              }
            ]
          },
          "NS": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberSetAttributeValue"
              },
              {
                "description": "<p>An attribute of type Number Set. For example:</p> <p> <code>\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]</code> </p> <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>"
              }
            ]
          },
          "BS": {
            "allOf": [
              {
                "$ref": "#/$defs/BinarySetAttributeValue"
              },
              {
                "description": "<p>An attribute of type Binary Set. For example:</p> <p> <code>\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]</code> </p>"
              }
            ]
          },
          "M": {
            "allOf": [
              {
                "$ref": "#/$defs/MapAttributeValue"
              },
              {
                "description": "<p>An attribute of type Map. For example:</p> <p> <code>\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}</code> </p>"
              }
            ]
          },
          "L": {
            "allOf": [
              {
                "$ref": "#/$defs/ListAttributeValue"
              },
              {
                "description": "<p>An attribute of type List. For example:</p> <p> <code>\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\": \"3.14159\"}]</code> </p>"
              }
            ]
          },
          "NULL": {
            "allOf": [
              {
                "$ref": "#/$defs/NullAttributeValue"
              },
              {
                "description": "<p>An attribute of type Null. For example:</p> <p> <code>\"NULL\": true</code> </p>"
              }
            ]
          },
          "BOOL": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanAttributeValue"
              },
              {
                "description": "<p>An attribute of type Boolean. For example:</p> <p> <code>\"BOOL\": true</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "StringAttributeValue": {
        "type": "string"
      },
      "NumberAttributeValue": {
        "type": "string"
      },
      "BinaryAttributeValue": {
        "type": "string"
      },
      "StringSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringAttributeValue"
        }
      },
      "NumberSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NumberAttributeValue"
        }
      },
      "BinarySetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BinaryAttributeValue"
        }
      },
      "MapAttributeValue": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "ListAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "NullAttributeValue": {
        "type": "boolean"
      },
      "BooleanAttributeValue": {
        "type": "boolean"
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "ConditionExpression": {
        "type": "string"
      },
      "ExpressionAttributeNameMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeName"
        }
      },
      "AttributeName": {
        "type": "string",
        "maxLength": 65535
      },
      "ExpressionAttributeValueMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "ReturnValuesOnConditionCheckFailure": {
        "type": "string",
        "enum": [
          "ALL_OLD",
          "NONE"
        ]
      },
      "Put": {
        "type": "object",
        "required": [
          "Item",
          "TableName"
        ],
        "properties": {
          "Item": {
            "allOf": [
              {
                "$ref": "#/$defs/PutItemInputAttributeMap"
              },
              {
                "description": "A map of attribute name to attribute values, representing the primary key of the item to be written by <code>PutItem</code>. All of the table's primary key attributes must be specified, and their data types must match those of the table's key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema. "
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "Name of the table in which to write the item."
              }
            ]
          },
          "ConditionExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionExpression"
              },
              {
                "description": "A condition that must be satisfied in order for a conditional update to succeed."
              }
            ]
          },
          "ExpressionAttributeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeNameMap"
              },
              {
                "description": "One or more substitution tokens for attribute names in an expression."
              }
            ]
          },
          "ExpressionAttributeValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeValueMap"
              },
              {
                "description": "One or more values that can be substituted in an expression."
              }
            ]
          },
          "ReturnValuesOnConditionCheckFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/ReturnValuesOnConditionCheckFailure"
              },
              {
                "description": "Use <code>ReturnValuesOnConditionCheckFailure</code> to get the item attributes if the <code>Put</code> condition fails. For <code>ReturnValuesOnConditionCheckFailure</code>, the valid values are: NONE and ALL_OLD."
              }
            ]
          }
        },
        "description": "Represents a request to perform a <code>PutItem</code> operation."
      },
      "PutItemInputAttributeMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "Delete": {
        "type": "object",
        "required": [
          "Key",
          "TableName"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The primary key of the item to be deleted. Each element consists of an attribute name and a value for that attribute."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "Name of the table in which the item to be deleted resides."
              }
            ]
          },
          "ConditionExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionExpression"
              },
              {
                "description": "A condition that must be satisfied in order for a conditional delete to succeed."
              }
            ]
          },
          "ExpressionAttributeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeNameMap"
              },
              {
                "description": "One or more substitution tokens for attribute names in an expression."
              }
            ]
          },
          "ExpressionAttributeValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeValueMap"
              },
              {
                "description": "One or more values that can be substituted in an expression."
              }
            ]
          },
          "ReturnValuesOnConditionCheckFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/ReturnValuesOnConditionCheckFailure"
              },
              {
                "description": "Use <code>ReturnValuesOnConditionCheckFailure</code> to get the item attributes if the <code>Delete</code> condition fails. For <code>ReturnValuesOnConditionCheckFailure</code>, the valid values are: NONE and ALL_OLD."
              }
            ]
          }
        },
        "description": "Represents a request to perform a <code>DeleteItem</code> operation."
      },
      "Update": {
        "type": "object",
        "required": [
          "Key",
          "UpdateExpression",
          "TableName"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute."
              }
            ]
          },
          "UpdateExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/UpdateExpression"
              },
              {
                "description": "An expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "Name of the table for the <code>UpdateItem</code> request."
              }
            ]
          },
          "ConditionExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionExpression"
              },
              {
                "description": "A condition that must be satisfied in order for a conditional update to succeed."
              }
            ]
          },
          "ExpressionAttributeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeNameMap"
              },
              {
                "description": "One or more substitution tokens for attribute names in an expression."
              }
            ]
          },
          "ExpressionAttributeValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ExpressionAttributeValueMap"
              },
              {
                "description": "One or more values that can be substituted in an expression."
              }
            ]
          },
          "ReturnValuesOnConditionCheckFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/ReturnValuesOnConditionCheckFailure"
              },
              {
                "description": "Use <code>ReturnValuesOnConditionCheckFailure</code> to get the item attributes if the <code>Update</code> condition fails. For <code>ReturnValuesOnConditionCheckFailure</code>, the valid values are: NONE and ALL_OLD."
              }
            ]
          }
        },
        "description": "Represents a request to perform an <code>UpdateItem</code> operation."
      },
      "UpdateExpression": {
        "type": "string"
      },
      "ReturnConsumedCapacity": {
        "type": "string",
        "enum": [
          "INDEXES",
          "TOTAL",
          "NONE"
        ],
        "description": "<p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p> <ul> <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li> <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li> <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li> </ul>"
      },
      "ReturnItemCollectionMetrics": {
        "type": "string",
        "enum": [
          "SIZE",
          "NONE"
        ]
      },
      "ClientRequestToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 36
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20120810.TransactWriteItems"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ConsumedCapacity**",
            "**ItemCollectionMetrics**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
