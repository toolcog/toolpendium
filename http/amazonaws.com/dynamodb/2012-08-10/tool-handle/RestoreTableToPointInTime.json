{
  "name": "RestoreTableToPointInTime",
  "description": "<p>Restores the specified table to the specified point in time within <code>EarliestRestorableDateTime</code> and <code>LatestRestorableDateTime</code>. You can restore your table to any point in time during the last 35 days. Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account. </p> <p> When you restore using point in time recovery, DynamoDB restores your table data to the state based on the selected date and time (day:hour:minute:second) to a new table. </p> <p> Along with data, the following are also included on the new restored table using point in time recovery: </p> <ul> <li> <p>Global secondary indexes (GSIs)</p> </li> <li> <p>Local secondary indexes (LSIs)</p> </li> <li> <p>Provisioned read and write capacity</p> </li> <li> <p>Encryption settings</p> <important> <p> All these settings come from the current settings of the source table at the time of restore. </p> </important> </li> </ul> <p>You must manually set up the following on the restored table:</p> <ul> <li> <p>Auto scaling policies</p> </li> <li> <p>IAM policies</p> </li> <li> <p>Amazon CloudWatch metrics and alarms</p> </li> <li> <p>Tags</p> </li> <li> <p>Stream settings</p> </li> <li> <p>Time to Live (TTL) settings</p> </li> <li> <p>Point in time recovery settings</p> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20120810.RestoreTableToPointInTime"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/RestoreTableToPointInTimeInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "RestoreTableToPointInTimeInput": {
        "type": "object",
        "required": [
          "TargetTableName"
        ],
        "title": "RestoreTableToPointInTimeInput",
        "properties": {
          "SourceTableArn": {
            "allOf": [
              {
                "$ref": "#/$defs/TableArn"
              },
              {
                "description": "The DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN)."
              }
            ]
          },
          "SourceTableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "Name of the source table that is being restored."
              }
            ]
          },
          "TargetTableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "The name of the new table to which it must be restored to."
              }
            ]
          },
          "UseLatestRestorableTime": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanObject"
              },
              {
                "description": "Restore the table to the latest possible time. <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time. "
              }
            ]
          },
          "RestoreDateTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Date"
              },
              {
                "description": "Time in the past to restore the table to."
              }
            ]
          },
          "BillingModeOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/BillingMode"
              },
              {
                "description": "The billing mode of the restored table."
              }
            ]
          },
          "GlobalSecondaryIndexOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/GlobalSecondaryIndexList"
              },
              {
                "description": "List of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore."
              }
            ]
          },
          "LocalSecondaryIndexOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/LocalSecondaryIndexList"
              },
              {
                "description": "List of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore."
              }
            ]
          },
          "ProvisionedThroughputOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "Provisioned throughput settings for the restored table."
              }
            ]
          },
          "SSESpecificationOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/SSESpecification"
              },
              {
                "description": "The new server-side encryption settings for the restored table."
              }
            ]
          }
        }
      },
      "TableArn": {
        "type": "string"
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "BooleanObject": {
        "type": "boolean"
      },
      "Date": {
        "type": "string",
        "format": "date-time"
      },
      "BillingMode": {
        "type": "string",
        "enum": [
          "PROVISIONED",
          "PAY_PER_REQUEST"
        ]
      },
      "GlobalSecondaryIndexList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GlobalSecondaryIndex"
        }
      },
      "GlobalSecondaryIndex": {
        "type": "object",
        "required": [
          "IndexName",
          "KeySchema",
          "Projection"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index. The name must be unique among all other indexes on this table."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "<p>The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          },
          "Projection": {
            "allOf": [
              {
                "$ref": "#/$defs/Projection"
              },
              {
                "description": "Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Represents the properties of a global secondary index."
      },
      "IndexName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "KeySchema": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/KeySchemaElement"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "KeySchemaElement": {
        "type": "object",
        "required": [
          "AttributeName",
          "KeyType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "The name of a key attribute."
              }
            ]
          },
          "KeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyType"
              },
              {
                "description": "<p>The role that this key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>"
      },
      "KeySchemaAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "HASH",
          "RANGE"
        ]
      },
      "Projection": {
        "type": "object",
        "properties": {
          "ProjectionType": {
            "allOf": [
              {
                "$ref": "#/$defs/ProjectionType"
              },
              {
                "description": "<p>The set of attributes that are projected into the index:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul>"
              }
            ]
          },
          "NonKeyAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/NonKeyAttributeNameList"
              },
              {
                "description": "<p>Represents the non-key attribute names which will be projected into the index.</p> <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>"
              }
            ]
          }
        },
        "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected."
      },
      "ProjectionType": {
        "type": "string",
        "enum": [
          "ALL",
          "KEYS_ONLY",
          "INCLUDE"
        ]
      },
      "NonKeyAttributeNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonKeyAttributeName"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "NonKeyAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ProvisionedThroughput": {
        "type": "object",
        "required": [
          "ReadCapacityUnits",
          "WriteCapacityUnits"
        ],
        "properties": {
          "ReadCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          },
          "WriteCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          }
        },
        "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "PositiveLongObject": {
        "type": "integer",
        "minimum": 1
      },
      "LocalSecondaryIndexList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LocalSecondaryIndex"
        }
      },
      "LocalSecondaryIndex": {
        "type": "object",
        "required": [
          "IndexName",
          "KeySchema",
          "Projection"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the local secondary index. The name must be unique among all other indexes on this table."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "<p>The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          },
          "Projection": {
            "allOf": [
              {
                "$ref": "#/$defs/Projection"
              },
              {
                "description": "Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. "
              }
            ]
          }
        },
        "description": "Represents the properties of a local secondary index."
      },
      "SSESpecification": {
        "type": "object",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEEnabled"
              },
              {
                "description": "Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to <code>KMS</code> and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key."
              }
            ]
          },
          "SSEType": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEType"
              },
              {
                "description": "<p>Server-side encryption type. The only supported value is:</p> <ul> <li> <p> <code>KMS</code> - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).</p> </li> </ul>"
              }
            ]
          },
          "KMSMasterKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KMSMasterKeyId"
              },
              {
                "description": "The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key <code>alias/aws/dynamodb</code>."
              }
            ]
          }
        },
        "description": "Represents the settings used to enable server-side encryption."
      },
      "SSEEnabled": {
        "type": "boolean"
      },
      "SSEType": {
        "type": "string",
        "enum": [
          "AES256",
          "KMS"
        ]
      },
      "KMSMasterKeyId": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20120810.RestoreTableToPointInTime"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**TableDescription**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
