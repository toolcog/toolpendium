{
  "name": "BatchExecuteStatement",
  "description": "<p>This operation allows you to perform batch reads or writes on data stored in DynamoDB, using PartiQL. Each read statement in a <code>BatchExecuteStatement</code> must specify an equality condition on all key attributes. This enforces that each <code>SELECT</code> statement in a batch returns at most a single item.</p> <note> <p>The entire batch must consist of either read statements or write statements, you cannot mix both in one batch.</p> </note> <important> <p>A HTTP 200 response does not mean that all statements in the BatchExecuteStatement succeeded. Error details for individual statements can be found under the <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchStatementResponse.html#DDB-Type-BatchStatementResponse-Error\">Error</a> field of the <code>BatchStatementResponse</code> for each statement.</p> </important>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20120810.BatchExecuteStatement"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/BatchExecuteStatementInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "BatchExecuteStatementInput": {
        "type": "object",
        "required": [
          "Statements"
        ],
        "title": "BatchExecuteStatementInput",
        "properties": {
          "Statements": {
            "allOf": [
              {
                "$ref": "#/$defs/PartiQLBatchRequest"
              },
              {
                "description": "The list of PartiQL statements representing the batch to run."
              }
            ]
          },
          "ReturnConsumedCapacity": {
            "$ref": "#/$defs/ReturnConsumedCapacity"
          }
        }
      },
      "PartiQLBatchRequest": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BatchStatementRequest"
        },
        "minItems": 1,
        "maxItems": 25
      },
      "BatchStatementRequest": {
        "type": "object",
        "required": [
          "Statement"
        ],
        "properties": {
          "Statement": {
            "allOf": [
              {
                "$ref": "#/$defs/PartiQLStatement"
              },
              {
                "description": " A valid PartiQL statement. "
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PreparedStatementParameters"
              },
              {
                "description": " The parameters associated with a PartiQL statement in the batch request. "
              }
            ]
          },
          "ConsistentRead": {
            "allOf": [
              {
                "$ref": "#/$defs/ConsistentRead"
              },
              {
                "description": " The read consistency of the PartiQL batch request. "
              }
            ]
          },
          "ReturnValuesOnConditionCheckFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/ReturnValuesOnConditionCheckFailure"
              },
              {
                "description": "<p>An optional parameter that returns the item attributes for a PartiQL batch request operation that failed a condition check.</p> <p>There is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.</p>"
              }
            ]
          }
        },
        "description": " A PartiQL batch statement request. "
      },
      "PartiQLStatement": {
        "type": "string",
        "minLength": 1,
        "maxLength": 8192
      },
      "PreparedStatementParameters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeValue"
        },
        "minItems": 1
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "S": {
            "allOf": [
              {
                "$ref": "#/$defs/StringAttributeValue"
              },
              {
                "description": "<p>An attribute of type String. For example:</p> <p> <code>\"S\": \"Hello\"</code> </p>"
              }
            ]
          },
          "N": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberAttributeValue"
              },
              {
                "description": "<p>An attribute of type Number. For example:</p> <p> <code>\"N\": \"123.45\"</code> </p> <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>"
              }
            ]
          },
          "B": {
            "allOf": [
              {
                "$ref": "#/$defs/BinaryAttributeValue"
              },
              {
                "description": "<p>An attribute of type Binary. For example:</p> <p> <code>\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"</code> </p>"
              }
            ]
          },
          "SS": {
            "allOf": [
              {
                "$ref": "#/$defs/StringSetAttributeValue"
              },
              {
                "description": "<p>An attribute of type String Set. For example:</p> <p> <code>\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]</code> </p>"
              }
            ]
          },
          "NS": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberSetAttributeValue"
              },
              {
                "description": "<p>An attribute of type Number Set. For example:</p> <p> <code>\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]</code> </p> <p>Numbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.</p>"
              }
            ]
          },
          "BS": {
            "allOf": [
              {
                "$ref": "#/$defs/BinarySetAttributeValue"
              },
              {
                "description": "<p>An attribute of type Binary Set. For example:</p> <p> <code>\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]</code> </p>"
              }
            ]
          },
          "M": {
            "allOf": [
              {
                "$ref": "#/$defs/MapAttributeValue"
              },
              {
                "description": "<p>An attribute of type Map. For example:</p> <p> <code>\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}</code> </p>"
              }
            ]
          },
          "L": {
            "allOf": [
              {
                "$ref": "#/$defs/ListAttributeValue"
              },
              {
                "description": "<p>An attribute of type List. For example:</p> <p> <code>\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\": \"3.14159\"}]</code> </p>"
              }
            ]
          },
          "NULL": {
            "allOf": [
              {
                "$ref": "#/$defs/NullAttributeValue"
              },
              {
                "description": "<p>An attribute of type Null. For example:</p> <p> <code>\"NULL\": true</code> </p>"
              }
            ]
          },
          "BOOL": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanAttributeValue"
              },
              {
                "description": "<p>An attribute of type Boolean. For example:</p> <p> <code>\"BOOL\": true</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Represents the data for an attribute.</p> <p>Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\">Data Types</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "StringAttributeValue": {
        "type": "string"
      },
      "NumberAttributeValue": {
        "type": "string"
      },
      "BinaryAttributeValue": {
        "type": "string"
      },
      "StringSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringAttributeValue"
        }
      },
      "NumberSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NumberAttributeValue"
        }
      },
      "BinarySetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BinaryAttributeValue"
        }
      },
      "MapAttributeValue": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "ListAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "NullAttributeValue": {
        "type": "boolean"
      },
      "BooleanAttributeValue": {
        "type": "boolean"
      },
      "ConsistentRead": {
        "type": "boolean"
      },
      "ReturnValuesOnConditionCheckFailure": {
        "type": "string",
        "enum": [
          "ALL_OLD",
          "NONE"
        ]
      },
      "ReturnConsumedCapacity": {
        "type": "string",
        "enum": [
          "INDEXES",
          "TOTAL",
          "NONE"
        ],
        "description": "<p>Determines the level of detail about either provisioned or on-demand throughput consumption that is returned in the response:</p> <ul> <li> <p> <code>INDEXES</code> - The response includes the aggregate <code>ConsumedCapacity</code> for the operation, together with <code>ConsumedCapacity</code> for each table and secondary index that was accessed.</p> <p>Note that some operations, such as <code>GetItem</code> and <code>BatchGetItem</code>, do not access any indexes at all. In these cases, specifying <code>INDEXES</code> will only return <code>ConsumedCapacity</code> information for table(s).</p> </li> <li> <p> <code>TOTAL</code> - The response includes only the aggregate <code>ConsumedCapacity</code> for the operation.</p> </li> <li> <p> <code>NONE</code> - No <code>ConsumedCapacity</code> details are included in the response.</p> </li> </ul>"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20120810.BatchExecuteStatement"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Responses**",
            "**ConsumedCapacity**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
