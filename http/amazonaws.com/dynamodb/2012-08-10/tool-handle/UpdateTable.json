{
  "name": "UpdateTable",
  "description": "<p>Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB Streams settings for a given table.</p> <important> <p>This operation only applies to <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\">Version 2019.11.21 (Current)</a> of global tables. </p> </important> <p>You can only perform one of the following operations at once:</p> <ul> <li> <p>Modify the provisioned throughput settings of the table.</p> </li> <li> <p>Remove a global secondary index from the table.</p> </li> <li> <p>Create a new global secondary index on the table. After the index begins backfilling, you can use <code>UpdateTable</code> to perform other operations.</p> </li> </ul> <p> <code>UpdateTable</code> is an asynchronous operation; while it is executing, the table status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request. When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code> operation is complete.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20120810.UpdateTable"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateTableInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateTableInput": {
        "type": "object",
        "required": [
          "TableName"
        ],
        "title": "UpdateTableInput",
        "properties": {
          "AttributeDefinitions": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeDefinitions"
              },
              {
                "description": "An array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, <code>AttributeDefinitions</code> must include the key element(s) of the new index."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "The name of the table to be updated."
              }
            ]
          },
          "BillingMode": {
            "allOf": [
              {
                "$ref": "#/$defs/BillingMode"
              },
              {
                "description": "<p>Controls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.</p> <ul> <li> <p> <code>PROVISIONED</code> - We recommend using <code>PROVISIONED</code> for predictable workloads. <code>PROVISIONED</code> sets the billing mode to <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual\">Provisioned Mode</a>.</p> </li> <li> <p> <code>PAY_PER_REQUEST</code> - We recommend using <code>PAY_PER_REQUEST</code> for unpredictable workloads. <code>PAY_PER_REQUEST</code> sets the billing mode to <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand\">On-Demand Mode</a>. </p> </li> </ul>"
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "The new provisioned throughput settings for the specified table or index."
              }
            ]
          },
          "GlobalSecondaryIndexUpdates": {
            "allOf": [
              {
                "$ref": "#/$defs/GlobalSecondaryIndexUpdateList"
              },
              {
                "description": "<p>An array of one or more global secondary indexes for the table. For each index in the array, you can request one action:</p> <ul> <li> <p> <code>Create</code> - add a new global secondary index to the table.</p> </li> <li> <p> <code>Update</code> - modify the provisioned throughput settings of an existing global secondary index.</p> </li> <li> <p> <code>Delete</code> - remove a global secondary index from the table.</p> </li> </ul> <p>You can create or delete only one global secondary index per <code>UpdateTable</code> operation.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GSI.OnlineOps.html\">Managing Global Secondary Indexes</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>"
              }
            ]
          },
          "StreamSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamSpecification"
              },
              {
                "description": "<p>Represents the DynamoDB Streams configuration for the table.</p> <note> <p>You receive a <code>ResourceInUseException</code> if you try to enable a stream on a table that already has a stream, or if you try to disable a stream on a table that doesn't have a stream.</p> </note>"
              }
            ]
          },
          "SSESpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/SSESpecification"
              },
              {
                "description": "The new server-side encryption settings for the specified table."
              }
            ]
          },
          "ReplicaUpdates": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplicationGroupUpdateList"
              },
              {
                "description": "<p>A list of replica update actions (create, delete, or update) for the table.</p> <note> <p>This property only applies to <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html\">Version 2019.11.21 (Current)</a> of global tables. </p> </note>"
              }
            ]
          },
          "TableClass": {
            "allOf": [
              {
                "$ref": "#/$defs/TableClass"
              },
              {
                "description": "The table class of the table to be updated. Valid values are <code>STANDARD</code> and <code>STANDARD_INFREQUENT_ACCESS</code>."
              }
            ]
          },
          "DeletionProtectionEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/DeletionProtectionEnabled"
              },
              {
                "description": "Indicates whether deletion protection is to be enabled (true) or disabled (false) on the table."
              }
            ]
          }
        },
        "description": "Represents the input of an <code>UpdateTable</code> operation."
      },
      "AttributeDefinitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeDefinition"
        }
      },
      "AttributeDefinition": {
        "type": "object",
        "required": [
          "AttributeName",
          "AttributeType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "A name for the attribute."
              }
            ]
          },
          "AttributeType": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalarAttributeType"
              },
              {
                "description": "<p>The data type for the attribute, where:</p> <ul> <li> <p> <code>S</code> - the attribute is of type String</p> </li> <li> <p> <code>N</code> - the attribute is of type Number</p> </li> <li> <p> <code>B</code> - the attribute is of type Binary</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Represents an attribute for describing the key schema for the table and indexes."
      },
      "KeySchemaAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ScalarAttributeType": {
        "type": "string",
        "enum": [
          "S",
          "N",
          "B"
        ]
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "BillingMode": {
        "type": "string",
        "enum": [
          "PROVISIONED",
          "PAY_PER_REQUEST"
        ]
      },
      "ProvisionedThroughput": {
        "type": "object",
        "required": [
          "ReadCapacityUnits",
          "WriteCapacityUnits"
        ],
        "properties": {
          "ReadCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of strongly consistent reads consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          },
          "WriteCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<p>The maximum number of writes consumed per second before DynamoDB returns a <code>ThrottlingException</code>. For more information, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html\">Specifying Read and Write Requirements</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p> <p>If read/write capacity mode is <code>PAY_PER_REQUEST</code> the value is set to 0.</p>"
              }
            ]
          }
        },
        "description": "<p>Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the <code>UpdateTable</code> operation.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
      },
      "PositiveLongObject": {
        "type": "integer",
        "minimum": 1
      },
      "GlobalSecondaryIndexUpdateList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GlobalSecondaryIndexUpdate"
        }
      },
      "GlobalSecondaryIndexUpdate": {
        "type": "object",
        "properties": {
          "Update": {
            "allOf": [
              {
                "$ref": "#/$defs/UpdateGlobalSecondaryIndexAction"
              },
              {
                "description": "The name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index."
              }
            ]
          },
          "Create": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateGlobalSecondaryIndexAction"
              },
              {
                "description": "<p>The parameters required for creating a global secondary index on an existing table:</p> <ul> <li> <p> <code>IndexName </code> </p> </li> <li> <p> <code>KeySchema </code> </p> </li> <li> <p> <code>AttributeDefinitions </code> </p> </li> <li> <p> <code>Projection </code> </p> </li> <li> <p> <code>ProvisionedThroughput </code> </p> </li> </ul>"
              }
            ]
          },
          "Delete": {
            "allOf": [
              {
                "$ref": "#/$defs/DeleteGlobalSecondaryIndexAction"
              },
              {
                "description": "The name of an existing global secondary index to be removed."
              }
            ]
          }
        },
        "description": "<p>Represents one of the following:</p> <ul> <li> <p>A new global secondary index to be added to an existing table.</p> </li> <li> <p>New provisioned throughput parameters for an existing global secondary index.</p> </li> <li> <p>An existing global secondary index to be removed from an existing table.</p> </li> </ul>"
      },
      "UpdateGlobalSecondaryIndexAction": {
        "type": "object",
        "required": [
          "IndexName",
          "ProvisionedThroughput"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index to be updated."
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Represents the new provisioned throughput settings to be applied to a global secondary index."
      },
      "IndexName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "CreateGlobalSecondaryIndexAction": {
        "type": "object",
        "required": [
          "IndexName",
          "KeySchema",
          "Projection"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index to be created."
              }
            ]
          },
          "KeySchema": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchema"
              },
              {
                "description": "The key schema for the global secondary index."
              }
            ]
          },
          "Projection": {
            "allOf": [
              {
                "$ref": "#/$defs/Projection"
              },
              {
                "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected."
              }
            ]
          },
          "ProvisionedThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughput"
              },
              {
                "description": "<p>Represents the provisioned throughput settings for the specified global secondary index.</p> <p>For current minimum and maximum provisioned throughput values, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html\">Service, Account, and Table Quotas</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Represents a new global secondary index to be added to an existing table."
      },
      "KeySchema": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/KeySchemaElement"
        },
        "minItems": 1,
        "maxItems": 2
      },
      "KeySchemaElement": {
        "type": "object",
        "required": [
          "AttributeName",
          "KeyType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "The name of a key attribute."
              }
            ]
          },
          "KeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyType"
              },
              {
                "description": "<p>The role that this key attribute will assume:</p> <ul> <li> <p> <code>HASH</code> - partition key</p> </li> <li> <p> <code>RANGE</code> - sort key</p> </li> </ul> <note> <p>The partition key of an item is also known as its <i>hash attribute</i>. The term \"hash attribute\" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.</p> <p>The sort key of an item is also known as its <i>range attribute</i>. The term \"range attribute\" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>Represents <i>a single element</i> of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.</p> <p>A <code>KeySchemaElement</code> represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one <code>KeySchemaElement</code> (for the partition key). A composite primary key would require one <code>KeySchemaElement</code> for the partition key, and another <code>KeySchemaElement</code> for the sort key.</p> <p>A <code>KeySchemaElement</code> must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.</p>"
      },
      "KeyType": {
        "type": "string",
        "enum": [
          "HASH",
          "RANGE"
        ]
      },
      "Projection": {
        "type": "object",
        "properties": {
          "ProjectionType": {
            "allOf": [
              {
                "$ref": "#/$defs/ProjectionType"
              },
              {
                "description": "<p>The set of attributes that are projected into the index:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the index and primary keys are projected into the index.</p> </li> <li> <p> <code>INCLUDE</code> - In addition to the attributes described in <code>KEYS_ONLY</code>, the secondary index will include other non-key attributes that you specify.</p> </li> <li> <p> <code>ALL</code> - All of the table attributes are projected into the index.</p> </li> </ul>"
              }
            ]
          },
          "NonKeyAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/NonKeyAttributeNameList"
              },
              {
                "description": "<p>Represents the non-key attribute names which will be projected into the index.</p> <p>For local secondary indexes, the total count of <code>NonKeyAttributes</code> summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.</p>"
              }
            ]
          }
        },
        "description": "Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected."
      },
      "ProjectionType": {
        "type": "string",
        "enum": [
          "ALL",
          "KEYS_ONLY",
          "INCLUDE"
        ]
      },
      "NonKeyAttributeNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NonKeyAttributeName"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "NonKeyAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "DeleteGlobalSecondaryIndexAction": {
        "type": "object",
        "required": [
          "IndexName"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index to be deleted."
              }
            ]
          }
        },
        "description": "Represents a global secondary index to be deleted from an existing table."
      },
      "StreamSpecification": {
        "type": "object",
        "required": [
          "StreamEnabled"
        ],
        "properties": {
          "StreamEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamEnabled"
              },
              {
                "description": "Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table."
              }
            ]
          },
          "StreamViewType": {
            "allOf": [
              {
                "$ref": "#/$defs/StreamViewType"
              },
              {
                "description": "<p> When an item in the table is modified, <code>StreamViewType</code> determines what information is written to the stream for this table. Valid values for <code>StreamViewType</code> are:</p> <ul> <li> <p> <code>KEYS_ONLY</code> - Only the key attributes of the modified item are written to the stream.</p> </li> <li> <p> <code>NEW_IMAGE</code> - The entire item, as it appears after it was modified, is written to the stream.</p> </li> <li> <p> <code>OLD_IMAGE</code> - The entire item, as it appeared before it was modified, is written to the stream.</p> </li> <li> <p> <code>NEW_AND_OLD_IMAGES</code> - Both the new and the old item images of the item are written to the stream.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Represents the DynamoDB Streams configuration for a table in DynamoDB."
      },
      "StreamEnabled": {
        "type": "boolean"
      },
      "StreamViewType": {
        "type": "string",
        "enum": [
          "NEW_IMAGE",
          "OLD_IMAGE",
          "NEW_AND_OLD_IMAGES",
          "KEYS_ONLY"
        ]
      },
      "SSESpecification": {
        "type": "object",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEEnabled"
              },
              {
                "description": "Indicates whether server-side encryption is done using an Amazon Web Services managed key or an Amazon Web Services owned key. If enabled (true), server-side encryption type is set to <code>KMS</code> and an Amazon Web Services managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to Amazon Web Services owned key."
              }
            ]
          },
          "SSEType": {
            "allOf": [
              {
                "$ref": "#/$defs/SSEType"
              },
              {
                "description": "<p>Server-side encryption type. The only supported value is:</p> <ul> <li> <p> <code>KMS</code> - Server-side encryption that uses Key Management Service. The key is stored in your account and is managed by KMS (KMS charges apply).</p> </li> </ul>"
              }
            ]
          },
          "KMSMasterKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KMSMasterKeyId"
              },
              {
                "description": "The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key <code>alias/aws/dynamodb</code>."
              }
            ]
          }
        },
        "description": "Represents the settings used to enable server-side encryption."
      },
      "SSEEnabled": {
        "type": "boolean"
      },
      "SSEType": {
        "type": "string",
        "enum": [
          "AES256",
          "KMS"
        ]
      },
      "KMSMasterKeyId": {
        "type": "string"
      },
      "ReplicationGroupUpdateList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ReplicationGroupUpdate"
        },
        "minItems": 1
      },
      "ReplicationGroupUpdate": {
        "type": "object",
        "properties": {
          "Create": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateReplicationGroupMemberAction"
              },
              {
                "description": "The parameters required for creating a replica for the table."
              }
            ]
          },
          "Update": {
            "allOf": [
              {
                "$ref": "#/$defs/UpdateReplicationGroupMemberAction"
              },
              {
                "description": "The parameters required for updating a replica for the table."
              }
            ]
          },
          "Delete": {
            "allOf": [
              {
                "$ref": "#/$defs/DeleteReplicationGroupMemberAction"
              },
              {
                "description": "The parameters required for deleting a replica for the table."
              }
            ]
          }
        },
        "description": "<p>Represents one of the following:</p> <ul> <li> <p>A new replica to be added to an existing regional table or global table. This request invokes the <code>CreateTableReplica</code> action in the destination Region.</p> </li> <li> <p>New parameters for an existing replica. This request invokes the <code>UpdateTable</code> action in the destination Region.</p> </li> <li> <p>An existing replica to be deleted. The request invokes the <code>DeleteTableReplica</code> action in the destination Region, deleting the replica and all if its items in the destination Region.</p> </li> </ul> <note> <p>When you manually remove a table or global table replica, you do not automatically remove any associated scalable targets, scaling policies, or CloudWatch alarms.</p> </note>"
      },
      "CreateReplicationGroupMemberAction": {
        "type": "object",
        "required": [
          "RegionName"
        ],
        "properties": {
          "RegionName": {
            "allOf": [
              {
                "$ref": "#/$defs/RegionName"
              },
              {
                "description": "The Region where the new replica will be created."
              }
            ]
          },
          "KMSMasterKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KMSMasterKeyId"
              },
              {
                "description": "The KMS key that should be used for KMS encryption in the new replica. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS key <code>alias/aws/dynamodb</code>."
              }
            ]
          },
          "ProvisionedThroughputOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughputOverride"
              },
              {
                "description": "Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings."
              }
            ]
          },
          "GlobalSecondaryIndexes": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplicaGlobalSecondaryIndexList"
              },
              {
                "description": "Replica-specific global secondary index settings."
              }
            ]
          },
          "TableClassOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/TableClass"
              },
              {
                "description": "Replica-specific table class. If not specified, uses the source table's table class."
              }
            ]
          }
        },
        "description": "Represents a replica to be created."
      },
      "RegionName": {
        "type": "string"
      },
      "ProvisionedThroughputOverride": {
        "type": "object",
        "properties": {
          "ReadCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "Replica-specific read capacity units. If not specified, uses the source table's read capacity settings."
              }
            ]
          }
        },
        "description": "Replica-specific provisioned throughput settings. If not specified, uses the source table's provisioned throughput settings."
      },
      "ReplicaGlobalSecondaryIndexList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ReplicaGlobalSecondaryIndex"
        },
        "minItems": 1
      },
      "ReplicaGlobalSecondaryIndex": {
        "type": "object",
        "required": [
          "IndexName"
        ],
        "properties": {
          "IndexName": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the global secondary index."
              }
            ]
          },
          "ProvisionedThroughputOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughputOverride"
              },
              {
                "description": "Replica table GSI-specific provisioned throughput. If not specified, uses the source table GSI's read capacity settings."
              }
            ]
          }
        },
        "description": "Represents the properties of a replica global secondary index."
      },
      "TableClass": {
        "type": "string",
        "enum": [
          "STANDARD",
          "STANDARD_INFREQUENT_ACCESS"
        ]
      },
      "UpdateReplicationGroupMemberAction": {
        "type": "object",
        "required": [
          "RegionName"
        ],
        "properties": {
          "RegionName": {
            "allOf": [
              {
                "$ref": "#/$defs/RegionName"
              },
              {
                "description": "The Region where the replica exists."
              }
            ]
          },
          "KMSMasterKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KMSMasterKeyId"
              },
              {
                "description": "The KMS key of the replica that should be used for KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS key <code>alias/aws/dynamodb</code>."
              }
            ]
          },
          "ProvisionedThroughputOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/ProvisionedThroughputOverride"
              },
              {
                "description": "Replica-specific provisioned throughput. If not specified, uses the source table's provisioned throughput settings."
              }
            ]
          },
          "GlobalSecondaryIndexes": {
            "allOf": [
              {
                "$ref": "#/$defs/ReplicaGlobalSecondaryIndexList"
              },
              {
                "description": "Replica-specific global secondary index settings."
              }
            ]
          },
          "TableClassOverride": {
            "allOf": [
              {
                "$ref": "#/$defs/TableClass"
              },
              {
                "description": "Replica-specific table class. If not specified, uses the source table's table class."
              }
            ]
          }
        },
        "description": "Represents a replica to be modified."
      },
      "DeleteReplicationGroupMemberAction": {
        "type": "object",
        "required": [
          "RegionName"
        ],
        "properties": {
          "RegionName": {
            "allOf": [
              {
                "$ref": "#/$defs/RegionName"
              },
              {
                "description": "The Region where the replica exists."
              }
            ]
          }
        },
        "description": "Represents a replica to be deleted."
      },
      "DeletionProtectionEnabled": {
        "type": "boolean"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20120810.UpdateTable"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents the output of an <code>UpdateTable</code> operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**TableDescription**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
