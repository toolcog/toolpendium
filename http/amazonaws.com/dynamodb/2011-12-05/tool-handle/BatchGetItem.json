{
  "name": "BatchGetItem",
  "description": "<p>Retrieves the attributes for multiple items from multiple tables using their primary keys.</p> <p>The maximum number of item attributes that can be retrieved for a single operation is 100. Also, the number of items retrieved is constrained by a 1 MB the size limit. If the response size limit is exceeded or a partial result is returned due to an internal processing failure, Amazon DynamoDB returns an <code>UnprocessedKeys</code> value so you can retry the operation starting with the next item to get.</p> <p>Amazon DynamoDB automatically adjusts the number of items returned per page to enforce this limit. For example, even if you ask to retrieve 100 items, but each individual item is 50k in size, the system returns 20 items and an appropriate <code>UnprocessedKeys</code> value so you can get the next page of results. If necessary, your application needs its own logic to assemble the pages of results into one set.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "RequestItems": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20111205.BatchGetItem"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/BatchGetItemInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "BatchGetItemInput": {
        "type": "object",
        "required": [
          "RequestItems"
        ],
        "title": "BatchGetItemInput",
        "properties": {
          "RequestItems": {
            "$ref": "#/$defs/BatchGetRequestMap"
          }
        }
      },
      "BatchGetRequestMap": {
        "type": "object",
        "description": "A map of the table name and corresponding items to get by primary key. While requesting items, each table name can be invoked only once per operation.",
        "minProperties": 1,
        "maxProperties": 100,
        "additionalProperties": {
          "$ref": "#/$defs/KeysAndAttributes"
        }
      },
      "KeysAndAttributes": {
        "type": "object",
        "required": [
          "Keys"
        ],
        "properties": {
          "Keys": {
            "$ref": "#/$defs/KeyList"
          },
          "AttributesToGet": {
            "$ref": "#/$defs/AttributeNameList"
          },
          "ConsistentRead": {
            "$ref": "#/$defs/ConsistentRead"
          }
        }
      },
      "KeyList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Key"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "Key": {
        "type": "object",
        "required": [
          "HashKeyElement"
        ],
        "properties": {
          "HashKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "A hash key element is treated as the primary key, and can be a string or a number. Single attribute primary keys have one index value. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          },
          "RangeKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "A range key element is treated as a secondary key (used in conjunction with the primary key), and can be a string or a number, and is only used for hash-and-range primary keys. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          }
        },
        "description": "The primary key that uniquely identifies each item in a table. A primary key can be a one attribute (hash) primary key or a two attribute (hash-and-range) primary key."
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "S": {
            "allOf": [
              {
                "$ref": "#/$defs/StringAttributeValue"
              },
              {
                "description": "Strings are Unicode with UTF-8 binary encoding. The maximum size is limited by the size of the primary key (1024 bytes as a range part of a key or 2048 bytes as a single part hash key) or the item size (64k)."
              }
            ]
          },
          "N": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberAttributeValue"
              },
              {
                "description": "Numbers are positive or negative exact-value decimals and integers. A number can have up to 38 digits precision and can be between 10^-128 to 10^+126."
              }
            ]
          },
          "B": {
            "allOf": [
              {
                "$ref": "#/$defs/BinaryAttributeValue"
              },
              {
                "description": "Binary attributes are sequences of unsigned bytes."
              }
            ]
          },
          "SS": {
            "allOf": [
              {
                "$ref": "#/$defs/StringSetAttributeValue"
              },
              {
                "description": "A set of strings."
              }
            ]
          },
          "NS": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberSetAttributeValue"
              },
              {
                "description": "A set of numbers."
              }
            ]
          },
          "BS": {
            "allOf": [
              {
                "$ref": "#/$defs/BinarySetAttributeValue"
              },
              {
                "description": "A set of binary attributes."
              }
            ]
          }
        },
        "description": "AttributeValue can be <code>String</code>, <code>Number</code>, <code>Binary</code>, <code>StringSet</code>, <code>NumberSet</code>, <code>BinarySet</code>."
      },
      "StringAttributeValue": {
        "type": "string"
      },
      "NumberAttributeValue": {
        "type": "string"
      },
      "BinaryAttributeValue": {
        "type": "string"
      },
      "StringSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringAttributeValue"
        }
      },
      "NumberSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NumberAttributeValue"
        }
      },
      "BinarySetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BinaryAttributeValue"
        }
      },
      "AttributeNameList": {
        "type": "array",
        "description": "List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.",
        "items": {
          "$ref": "#/$defs/AttributeName"
        },
        "minItems": 1
      },
      "AttributeName": {
        "type": "string",
        "maxLength": 65535
      },
      "ConsistentRead": {
        "type": "boolean",
        "description": "If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20111205.BatchGetItem{?RequestItems}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Responses**: Table names and the respective item attributes from the tables.",
            "**UnprocessedKeys**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
