{
  "name": "CreateTable",
  "description": "<p>Adds a new table to your account.</p> <p>The table name must be unique among those associated with the AWS Account issuing the request, and the AWS Region that receives the request (e.g. <code>us-east-1</code>).</p> <p>The <code>CreateTable</code> operation triggers an asynchronous workflow to begin creating the table. Amazon DynamoDB immediately returns the state of the table (<code>CREATING</code>) until the table is in the <code>ACTIVE</code> state. Once the table is in the <code>ACTIVE</code> state, you can perform data plane operations.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20111205.CreateTable"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateTableInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateTableInput": {
        "type": "object",
        "required": [
          "TableName",
          "KeySchema",
          "ProvisionedThroughput"
        ],
        "title": "CreateTableInput",
        "properties": {
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "The name of the table you want to create. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period)."
              }
            ]
          },
          "KeySchema": {
            "$ref": "#/$defs/KeySchema"
          },
          "ProvisionedThroughput": {
            "$ref": "#/$defs/ProvisionedThroughput"
          }
        }
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "KeySchema": {
        "type": "object",
        "required": [
          "HashKeyElement"
        ],
        "properties": {
          "HashKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaElement"
              },
              {
                "description": "A hash key element is treated as the primary key, and can be a string or a number. Single attribute primary keys have one index value. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          },
          "RangeKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaElement"
              },
              {
                "description": "A range key element is treated as a secondary key (used in conjunction with the primary key), and can be a string or a number, and is only used for hash-and-range primary keys. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          }
        },
        "description": "The KeySchema identifies the primary key as a one attribute primary key (hash) or a composite two attribute (hash-and-range) primary key. Single attribute primary keys have one index value: a <code>HashKeyElement</code>. A composite hash-and-range primary key contains two attribute values: a <code>HashKeyElement</code> and a <code>RangeKeyElement</code>."
      },
      "KeySchemaElement": {
        "type": "object",
        "required": [
          "AttributeName",
          "AttributeType"
        ],
        "properties": {
          "AttributeName": {
            "allOf": [
              {
                "$ref": "#/$defs/KeySchemaAttributeName"
              },
              {
                "description": "The <code>AttributeName</code> of the <code>KeySchemaElement</code>."
              }
            ]
          },
          "AttributeType": {
            "allOf": [
              {
                "$ref": "#/$defs/ScalarAttributeType"
              },
              {
                "description": "The <code>AttributeType</code> of the <code>KeySchemaElement</code> which can be a <code>String</code> or a <code>Number</code>."
              }
            ]
          }
        },
        "description": "<code>KeySchemaElement</code> is the primary key (hash or hash-and-range) structure for the table."
      },
      "KeySchemaAttributeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ScalarAttributeType": {
        "type": "string",
        "enum": [
          "S",
          "N",
          "B"
        ]
      },
      "ProvisionedThroughput": {
        "type": "object",
        "required": [
          "ReadCapacityUnits",
          "WriteCapacityUnits"
        ],
        "properties": {
          "ReadCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<code>ReadCapacityUnits</code> are in terms of strictly consistent reads, assuming items of 1k. 2k items require twice the <code>ReadCapacityUnits</code>. Eventually-consistent reads only require half the <code>ReadCapacityUnits</code> of stirctly consistent reads."
              }
            ]
          },
          "WriteCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveLongObject"
              },
              {
                "description": "<code>WriteCapacityUnits</code> are in terms of strictly consistent reads, assuming items of 1k. 2k items require twice the <code>WriteCapacityUnits</code>."
              }
            ]
          }
        },
        "description": "Provisioned throughput reserves the required read and write resources for your table in terms of <code>ReadCapacityUnits</code> and <code>WriteCapacityUnits</code>. Values for provisioned throughput depend upon your expected read/write rates, item size, and consistency. Provide the expected number of read and write operations, assuming an item size of 1k and strictly consistent reads. For 2k item size, double the value. For 3k, triple the value, etc. Eventually-consistent reads consume half the resources of strictly consistent reads."
      },
      "PositiveLongObject": {
        "type": "integer",
        "minimum": 1
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20111205.CreateTable"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**TableDescription**",
              {
                "$ul": [
                  "**TableName**",
                  [
                    "**KeySchema**: The KeySchema identifies the primary key as a one attribute primary key (hash) or a composite two attribute (hash-and-range) primary key. Single attribute primary keys have one index value: a <code>HashKeyElement</code>. A composite hash-and-range primary key contains two attribute values: a <code>HashKeyElement</code> and a <code>RangeKeyElement</code>.",
                    {
                      "$ul": [
                        "**HashKeyElement**",
                        "**RangeKeyElement**"
                      ]
                    }
                  ],
                  "**TableStatus**",
                  "**CreationDateTime**",
                  [
                    "**ProvisionedThroughput**",
                    {
                      "$ul": [
                        "**LastIncreaseDateTime**",
                        "**LastDecreaseDateTime**",
                        "**NumberOfDecreasesToday**",
                        "**ReadCapacityUnits**",
                        "**WriteCapacityUnits**"
                      ]
                    }
                  ],
                  "**TableSizeBytes**",
                  "**ItemCount**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
