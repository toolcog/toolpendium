{
  "name": "BatchWriteItem",
  "description": "<p>Allows to execute a batch of Put and/or Delete Requests for many tables in a single call. A total of 25 requests are allowed.</p> <p>There are no transaction guarantees provided by this API. It does not allow conditional puts nor does it support return values.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20111205.BatchWriteItem"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/BatchWriteItemInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "BatchWriteItemInput": {
        "type": "object",
        "required": [
          "RequestItems"
        ],
        "title": "BatchWriteItemInput",
        "properties": {
          "RequestItems": {
            "allOf": [
              {
                "$ref": "#/$defs/BatchWriteItemRequestMap"
              },
              {
                "description": "A map of table name to list-of-write-requests. Used as input to the <code>BatchWriteItem</code> API call"
              }
            ]
          }
        }
      },
      "BatchWriteItemRequestMap": {
        "type": "object",
        "description": "<p>A map of table name to list-of-write-requests.</p> <p>Key: The table name corresponding to the list of requests</p> <p>Value: Essentially a list of request items. Each request item could contain either a <code>PutRequest</code> or <code>DeleteRequest</code>. Never both.</p>",
        "minProperties": 1,
        "maxProperties": 25,
        "additionalProperties": {
          "$ref": "#/$defs/WriteRequests"
        }
      },
      "WriteRequests": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/WriteRequest"
        },
        "minItems": 1,
        "maxItems": 25
      },
      "WriteRequest": {
        "type": "object",
        "properties": {
          "PutRequest": {
            "$ref": "#/$defs/PutRequest"
          },
          "DeleteRequest": {
            "$ref": "#/$defs/DeleteRequest"
          }
        },
        "description": "This structure is a Union of PutRequest and DeleteRequest. It can contain exactly one of <code>PutRequest</code> or <code>DeleteRequest</code>. Never Both. This is enforced in the code."
      },
      "PutRequest": {
        "type": "object",
        "required": [
          "Item"
        ],
        "properties": {
          "Item": {
            "allOf": [
              {
                "$ref": "#/$defs/PutItemInputAttributeMap"
              },
              {
                "description": "The item to put"
              }
            ]
          }
        },
        "description": "A container for a Put BatchWrite request"
      },
      "PutItemInputAttributeMap": {
        "type": "object",
        "description": "A map of the attributes for the item, and must include the primary key values that define the item. Other attribute name-value pairs can be provided for the item.",
        "additionalProperties": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "S": {
            "allOf": [
              {
                "$ref": "#/$defs/StringAttributeValue"
              },
              {
                "description": "Strings are Unicode with UTF-8 binary encoding. The maximum size is limited by the size of the primary key (1024 bytes as a range part of a key or 2048 bytes as a single part hash key) or the item size (64k)."
              }
            ]
          },
          "N": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberAttributeValue"
              },
              {
                "description": "Numbers are positive or negative exact-value decimals and integers. A number can have up to 38 digits precision and can be between 10^-128 to 10^+126."
              }
            ]
          },
          "B": {
            "allOf": [
              {
                "$ref": "#/$defs/BinaryAttributeValue"
              },
              {
                "description": "Binary attributes are sequences of unsigned bytes."
              }
            ]
          },
          "SS": {
            "allOf": [
              {
                "$ref": "#/$defs/StringSetAttributeValue"
              },
              {
                "description": "A set of strings."
              }
            ]
          },
          "NS": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberSetAttributeValue"
              },
              {
                "description": "A set of numbers."
              }
            ]
          },
          "BS": {
            "allOf": [
              {
                "$ref": "#/$defs/BinarySetAttributeValue"
              },
              {
                "description": "A set of binary attributes."
              }
            ]
          }
        },
        "description": "AttributeValue can be <code>String</code>, <code>Number</code>, <code>Binary</code>, <code>StringSet</code>, <code>NumberSet</code>, <code>BinarySet</code>."
      },
      "StringAttributeValue": {
        "type": "string"
      },
      "NumberAttributeValue": {
        "type": "string"
      },
      "BinaryAttributeValue": {
        "type": "string"
      },
      "StringSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringAttributeValue"
        }
      },
      "NumberSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NumberAttributeValue"
        }
      },
      "BinarySetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BinaryAttributeValue"
        }
      },
      "DeleteRequest": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The item's key to be delete"
              }
            ]
          }
        },
        "description": "A container for a Delete BatchWrite request"
      },
      "Key": {
        "type": "object",
        "required": [
          "HashKeyElement"
        ],
        "properties": {
          "HashKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "A hash key element is treated as the primary key, and can be a string or a number. Single attribute primary keys have one index value. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          },
          "RangeKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "A range key element is treated as a secondary key (used in conjunction with the primary key), and can be a string or a number, and is only used for hash-and-range primary keys. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          }
        },
        "description": "The primary key that uniquely identifies each item in a table. A primary key can be a one attribute (hash) primary key or a two attribute (hash-and-range) primary key."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20111205.BatchWriteItem"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A container for <code>BatchWriteItem</code> response",
        "**Key properties:**",
        {
          "$ul": [
            "**Responses**",
            "**UnprocessedItems**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
