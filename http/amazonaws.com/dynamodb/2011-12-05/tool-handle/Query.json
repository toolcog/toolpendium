{
  "name": "Query",
  "description": "<p>Gets the values of one or more items and its attributes by primary key (composite primary key, only).</p> <p>Narrow the scope of the query using comparison operators on the <code>RangeKeyValue</code> of the composite key. Use the <code>ScanIndexForward</code> parameter to get results in forward or reverse order by range key.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "Limit": {
        "type": "string",
        "description": "Pagination limit"
      },
      "ExclusiveStartKey": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DynamoDB_20111205.Query"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/QueryInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "QueryInput": {
        "type": "object",
        "required": [
          "TableName",
          "HashKeyValue"
        ],
        "title": "QueryInput",
        "properties": {
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/TableName"
              },
              {
                "description": "The name of the table in which you want to query. Allowed characters are <code>a-z</code>, <code>A-Z</code>, <code>0-9</code>, <code>_</code> (underscore), <code>-</code> (hyphen) and <code>.</code> (period)."
              }
            ]
          },
          "AttributesToGet": {
            "$ref": "#/$defs/AttributeNameList"
          },
          "Limit": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveIntegerObject"
              },
              {
                "description": "The maximum number of items to return. If Amazon DynamoDB hits this limit while querying the table, it stops the query and returns the matching values up to the limit, and a <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the query. Also, if the result set size exceeds 1MB before Amazon DynamoDB hits this limit, it stops the query and returns the matching values, and a <code>LastEvaluatedKey</code> to apply in a subsequent operation to continue the query."
              }
            ]
          },
          "ConsistentRead": {
            "$ref": "#/$defs/ConsistentRead"
          },
          "Count": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanObject"
              },
              {
                "description": "If set to <code>true</code>, Amazon DynamoDB returns a total number of items that match the query parameters, instead of a list of the matching items and their attributes. Do not set <code>Count</code> to <code>true</code> while providing a list of <code>AttributesToGet</code>, otherwise Amazon DynamoDB returns a validation error."
              }
            ]
          },
          "HashKeyValue": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "Attribute value of the hash component of the composite primary key."
              }
            ]
          },
          "RangeKeyCondition": {
            "allOf": [
              {
                "$ref": "#/$defs/Condition"
              },
              {
                "description": "A container for the attribute values and comparison operators to use for the query."
              }
            ]
          },
          "ScanIndexForward": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanObject"
              },
              {
                "description": "Specifies forward or backward traversal of the index. Amazon DynamoDB returns results reflecting the requested order, determined by the range key. The default value is <code>true</code> (forward)."
              }
            ]
          },
          "ExclusiveStartKey": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "Primary key of the item from which to continue an earlier query. An earlier query might provide this value as the <code>LastEvaluatedKey</code> if that query operation was interrupted before completing the query; either because of the result set size or the <code>Limit</code> parameter. The <code>LastEvaluatedKey</code> can be passed back in a new query request to continue the operation from that point."
              }
            ]
          }
        }
      },
      "TableName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_.-]+",
        "minLength": 3,
        "maxLength": 255
      },
      "AttributeNameList": {
        "type": "array",
        "description": "List of <code>Attribute</code> names. If attribute names are not specified then all attributes will be returned. If some attributes are not found, they will not appear in the result.",
        "items": {
          "$ref": "#/$defs/AttributeName"
        },
        "minItems": 1
      },
      "AttributeName": {
        "type": "string",
        "maxLength": 65535
      },
      "PositiveIntegerObject": {
        "type": "integer",
        "minimum": 1
      },
      "ConsistentRead": {
        "type": "boolean",
        "description": "If set to <code>true</code>, then a consistent read is issued. Otherwise eventually-consistent is used."
      },
      "BooleanObject": {
        "type": "boolean"
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "S": {
            "allOf": [
              {
                "$ref": "#/$defs/StringAttributeValue"
              },
              {
                "description": "Strings are Unicode with UTF-8 binary encoding. The maximum size is limited by the size of the primary key (1024 bytes as a range part of a key or 2048 bytes as a single part hash key) or the item size (64k)."
              }
            ]
          },
          "N": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberAttributeValue"
              },
              {
                "description": "Numbers are positive or negative exact-value decimals and integers. A number can have up to 38 digits precision and can be between 10^-128 to 10^+126."
              }
            ]
          },
          "B": {
            "allOf": [
              {
                "$ref": "#/$defs/BinaryAttributeValue"
              },
              {
                "description": "Binary attributes are sequences of unsigned bytes."
              }
            ]
          },
          "SS": {
            "allOf": [
              {
                "$ref": "#/$defs/StringSetAttributeValue"
              },
              {
                "description": "A set of strings."
              }
            ]
          },
          "NS": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberSetAttributeValue"
              },
              {
                "description": "A set of numbers."
              }
            ]
          },
          "BS": {
            "allOf": [
              {
                "$ref": "#/$defs/BinarySetAttributeValue"
              },
              {
                "description": "A set of binary attributes."
              }
            ]
          }
        },
        "description": "AttributeValue can be <code>String</code>, <code>Number</code>, <code>Binary</code>, <code>StringSet</code>, <code>NumberSet</code>, <code>BinarySet</code>."
      },
      "StringAttributeValue": {
        "type": "string"
      },
      "NumberAttributeValue": {
        "type": "string"
      },
      "BinaryAttributeValue": {
        "type": "string"
      },
      "StringSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringAttributeValue"
        }
      },
      "NumberSetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NumberAttributeValue"
        }
      },
      "BinarySetAttributeValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BinaryAttributeValue"
        }
      },
      "Condition": {
        "type": "object",
        "required": [
          "ComparisonOperator"
        ],
        "properties": {
          "AttributeValueList": {
            "$ref": "#/$defs/AttributeValueList"
          },
          "ComparisonOperator": {
            "$ref": "#/$defs/ComparisonOperator"
          }
        }
      },
      "AttributeValueList": {
        "type": "array",
        "description": "A list of attribute values to be used with a comparison operator for a scan or query operation. For comparisons that require more than one value, such as a <code>BETWEEN</code> comparison, the AttributeValueList contains two attribute values and the comparison operator.",
        "items": {
          "$ref": "#/$defs/AttributeValue"
        }
      },
      "ComparisonOperator": {
        "type": "string",
        "enum": [
          "EQ",
          "NE",
          "IN",
          "LE",
          "LT",
          "GE",
          "GT",
          "BETWEEN",
          "NOT_NULL",
          "NULL",
          "CONTAINS",
          "NOT_CONTAINS",
          "BEGINS_WITH"
        ],
        "description": "<p>A comparison operator is an enumeration of several operations:</p> <ul> <li><code>EQ</code> for <em>equal</em>.</li> <li><code>NE</code> for <em>not equal</em>.</li> <li><code>IN</code> checks for exact matches.</li> <li><code>LE</code> for <em>less than or equal to</em>.</li> <li><code>LT</code> for <em>less than</em>.</li> <li><code>GE</code> for <em>greater than or equal to</em>.</li> <li><code>GT</code> for <em>greater than</em>.</li> <li><code>BETWEEN</code> for <em>between</em>.</li> <li><code>NOT_NULL</code> for <em>exists</em>.</li> <li><code>NULL</code> for <em>not exists</em>.</li> <li><code>CONTAINS</code> for substring or value in a set.</li> <li><code>NOT_CONTAINS</code> for absence of a substring or absence of a value in a set.</li> <li><code>BEGINS_WITH</code> for a substring prefix.</li> </ul> <p>Scan operations support all available comparison operators.</p> <p>Query operations support a subset of the available comparison operators: EQ, LE, LT, GE, GT, BETWEEN, and BEGINS_WITH.</p>"
      },
      "Key": {
        "type": "object",
        "required": [
          "HashKeyElement"
        ],
        "properties": {
          "HashKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "A hash key element is treated as the primary key, and can be a string or a number. Single attribute primary keys have one index value. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          },
          "RangeKeyElement": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "A range key element is treated as a secondary key (used in conjunction with the primary key), and can be a string or a number, and is only used for hash-and-range primary keys. The value can be <code>String</code>, <code>Number</code>, <code>StringSet</code>, <code>NumberSet</code>."
              }
            ]
          }
        },
        "description": "The primary key that uniquely identifies each item in a table. A primary key can be a one attribute (hash) primary key or a two attribute (hash-and-range) primary key."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://dynamodb.us-east-1.amazonaws.com/#X-Amz-Target=DynamoDB_20111205.Query{?Limit,ExclusiveStartKey}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Items**",
            "**Count**",
            "**LastEvaluatedKey**",
            "**ConsumedCapacityUnits**: The number of Capacity Units of the provisioned throughput of the table consumed during the operation. <code>GetItem</code>, <code>BatchGetItem</code>, <code>BatchWriteItem</code>, <code>Query</code>, and <code>Scan</code> operations consume <code>ReadCapacityUnits</code>, while <code>PutItem</code>, <code>UpdateItem</code>, and <code>DeleteItem</code> operations consume <code>WriteCapacityUnits</code>."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
