openapi: 3.0.0
info:
  version: '2021-04-21'
  x-release: v4
  title: Redshift Serverless
  description: '<p>This is an interface reference for Amazon Redshift Serverless. It contains documentation for one of the programming or command line interfaces you can use to manage Amazon Redshift Serverless. </p> <p>Amazon Redshift Serverless automatically provisions data warehouse capacity and intelligently scales the underlying resources based on workload demands. Amazon Redshift Serverless adjusts capacity in seconds to deliver consistently high performance and simplified operations for even the most demanding and volatile workloads. Amazon Redshift Serverless lets you focus on using your data to acquire new insights for your business and customers. </p> <p> To learn more about Amazon Redshift Serverless, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-whatis.html">What is Amazon Redshift Serverless</a>. </p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: redshift-serverless
  x-aws-signingName: redshift-serverless
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/redshift-serverless-2021-04-21.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/redshift-serverless/'
servers:
  - url: 'http://redshift-serverless.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Redshift Serverless multi-region endpoint
  - url: 'https://redshift-serverless.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Redshift Serverless multi-region endpoint
  - url: 'http://redshift-serverless.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Redshift Serverless endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://redshift-serverless.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Redshift Serverless endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /#X-Amz-Target=RedshiftServerless.ConvertRecoveryPointToSnapshot:
    post:
      operationId: ConvertRecoveryPointToSnapshot
      description: 'Converts a recovery point to a snapshot. For more information about recovery points and snapshots, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-snapshots-recovery.html">Working with snapshots and recovery points</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConvertRecoveryPointToSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertRecoveryPointToSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ConvertRecoveryPointToSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.CreateEndpointAccess:
    post:
      operationId: CreateEndpointAccess
      description: Creates an Amazon Redshift Serverless managed VPC endpoint.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEndpointAccessResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEndpointAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.CreateEndpointAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.CreateNamespace:
    post:
      operationId: CreateNamespace
      description: Creates a namespace in Amazon Redshift Serverless.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateNamespaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNamespaceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.CreateNamespace
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.CreateSnapshot:
    post:
      operationId: CreateSnapshot
      description: 'Creates a snapshot of all databases in a namespace. For more information about snapshots, see <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-snapshots-recovery.html"> Working with snapshots and recovery points</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.CreateSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.CreateUsageLimit:
    post:
      operationId: CreateUsageLimit
      description: 'Creates a usage limit for a specified Amazon Redshift Serverless usage type. The usage limit is identified by the returned usage limit identifier. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUsageLimitResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsageLimitRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.CreateUsageLimit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.CreateWorkgroup:
    post:
      operationId: CreateWorkgroup
      description: Creates an workgroup in Amazon Redshift Serverless.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkgroupResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: InsufficientCapacityException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCapacityException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkgroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.CreateWorkgroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.DeleteEndpointAccess:
    post:
      operationId: DeleteEndpointAccess
      description: Deletes an Amazon Redshift Serverless managed VPC endpoint.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEndpointAccessResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteEndpointAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.DeleteEndpointAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.DeleteNamespace:
    post:
      operationId: DeleteNamespace
      description: 'Deletes a namespace from Amazon Redshift Serverless. Before you delete the namespace, you can create a final snapshot that has all of the data within the namespace.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteNamespaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteNamespaceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.DeleteNamespace
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.DeleteResourcePolicy:
    post:
      operationId: DeleteResourcePolicy
      description: Deletes the specified resource policy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResourcePolicyResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteResourcePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.DeleteResourcePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.DeleteSnapshot:
    post:
      operationId: DeleteSnapshot
      description: Deletes a snapshot from Amazon Redshift Serverless.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.DeleteSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.DeleteUsageLimit:
    post:
      operationId: DeleteUsageLimit
      description: Deletes a usage limit from Amazon Redshift Serverless.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUsageLimitResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUsageLimitRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.DeleteUsageLimit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.DeleteWorkgroup:
    post:
      operationId: DeleteWorkgroup
      description: Deletes a workgroup.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkgroupResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWorkgroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.DeleteWorkgroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetCredentials:
    post:
      operationId: GetCredentials
      description: '<p>Returns a database user name and temporary password with temporary authorization to log in to Amazon Redshift Serverless.</p> <p>By default, the temporary credentials expire in 900 seconds. You can optionally specify a duration between 900 seconds (15 minutes) and 3600 seconds (60 minutes).</p> <pre><code> &lt;p&gt;The Identity and Access Management (IAM) user or role that runs GetCredentials must have an IAM policy attached that allows access to all necessary actions and resources.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;DbName&lt;/code&gt; parameter is specified, the IAM policy must allow access to the resource dbname for the specified database name.&lt;/p&gt; </code></pre>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCredentialsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCredentialsRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetCredentials
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetEndpointAccess:
    post:
      operationId: GetEndpointAccess
      description: 'Returns information, such as the name, about a VPC endpoint.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEndpointAccessResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetEndpointAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetEndpointAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetNamespace:
    post:
      operationId: GetNamespace
      description: Returns information about a namespace in Amazon Redshift Serverless.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNamespaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetNamespaceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetNamespace
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetRecoveryPoint:
    post:
      operationId: GetRecoveryPoint
      description: Returns information about a recovery point.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecoveryPointResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetRecoveryPointRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetRecoveryPoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetResourcePolicy:
    post:
      operationId: GetResourcePolicy
      description: Returns a resource policy.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourcePolicyResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetResourcePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetResourcePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetSnapshot:
    post:
      operationId: GetSnapshot
      description: Returns information about a specific snapshot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetTableRestoreStatus:
    post:
      operationId: GetTableRestoreStatus
      description: Returns information about a <code>TableRestoreStatus</code> object.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTableRestoreStatusResponse'
        '480':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetTableRestoreStatusRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetTableRestoreStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetUsageLimit:
    post:
      operationId: GetUsageLimit
      description: Returns information about a usage limit.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsageLimitResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUsageLimitRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetUsageLimit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.GetWorkgroup:
    post:
      operationId: GetWorkgroup
      description: Returns information about a specific workgroup.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkgroupResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetWorkgroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.GetWorkgroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListEndpointAccess:
    post:
      operationId: ListEndpointAccess
      description: Returns an array of <code>EndpointAccess</code> objects and relevant information.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEndpointAccessResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListEndpointAccessRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListEndpointAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListNamespaces:
    post:
      operationId: ListNamespaces
      description: Returns information about a list of specified namespaces.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNamespacesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListNamespacesRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListNamespaces
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListRecoveryPoints:
    post:
      operationId: ListRecoveryPoints
      description: Returns an array of recovery points.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRecoveryPointsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRecoveryPointsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListRecoveryPoints
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListSnapshots:
    post:
      operationId: ListSnapshots
      description: Returns a list of snapshots.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSnapshotsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSnapshotsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListSnapshots
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListTableRestoreStatus:
    post:
      operationId: ListTableRestoreStatus
      description: Returns information about an array of <code>TableRestoreStatus</code> objects.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTableRestoreStatusResponse'
        '480':
          description: InvalidPaginationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPaginationException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTableRestoreStatusRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListTableRestoreStatus
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListTagsForResource:
    post:
      operationId: ListTagsForResource
      description: Lists the tags assigned to a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListTagsForResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListUsageLimits:
    post:
      operationId: ListUsageLimits
      description: Lists all usage limits within Amazon Redshift Serverless.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsageLimitsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: InvalidPaginationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidPaginationException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsageLimitsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListUsageLimits
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.ListWorkgroups:
    post:
      operationId: ListWorkgroups
      description: Returns information about a list of specified workgroups.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkgroupsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListWorkgroupsRequest'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.ListWorkgroups
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.PutResourcePolicy:
    post:
      operationId: PutResourcePolicy
      description: 'Creates or updates a resource policy. Currently, you can use policies to share snapshots across Amazon Web Services accounts.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutResourcePolicyResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutResourcePolicyRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.PutResourcePolicy
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.RestoreFromRecoveryPoint:
    post:
      operationId: RestoreFromRecoveryPoint
      description: Restore the data from a recovery point.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreFromRecoveryPointResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreFromRecoveryPointRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.RestoreFromRecoveryPoint
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.RestoreFromSnapshot:
    post:
      operationId: RestoreFromSnapshot
      description: Restores a namespace from a snapshot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreFromSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreFromSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.RestoreFromSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.RestoreTableFromSnapshot:
    post:
      operationId: RestoreTableFromSnapshot
      description: 'Restores a table from a snapshot to your Amazon Redshift Serverless instance. You can''t use this operation to restore tables with <a href="https://docs.aws.amazon.com/redshift/latest/dg/t_Sorting_data.html#t_Sorting_data-interleaved">interleaved sort keys</a>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreTableFromSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreTableFromSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.RestoreTableFromSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.TagResource:
    post:
      operationId: TagResource
      description: Assigns one or more tags to a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.TagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.UntagResource:
    post:
      operationId: UntagResource
      description: Removes a tag or set of tags from a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.UntagResource
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.UpdateEndpointAccess:
    post:
      operationId: UpdateEndpointAccess
      description: Updates an Amazon Redshift Serverless managed endpoint.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEndpointAccessResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEndpointAccessRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.UpdateEndpointAccess
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.UpdateNamespace:
    post:
      operationId: UpdateNamespace
      description: 'Updates a namespace with the specified settings. Unless required, you can''t update multiple parameters in one request. For example, you must specify both <code>adminUsername</code> and <code>adminUserPassword</code> to update either field, but you can''t update both <code>kmsKeyId</code> and <code>logExports</code> in a single request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNamespaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNamespaceRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.UpdateNamespace
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.UpdateSnapshot:
    post:
      operationId: UpdateSnapshot
      description: Updates a snapshot.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSnapshotResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSnapshotRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.UpdateSnapshot
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.UpdateUsageLimit:
    post:
      operationId: UpdateUsageLimit
      description: Update a usage limit in Amazon Redshift Serverless. You can't update the usage type or period of a usage limit.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUsageLimitResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsageLimitRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.UpdateUsageLimit
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /#X-Amz-Target=RedshiftServerless.UpdateWorkgroup:
    post:
      operationId: UpdateWorkgroup
      description: 'Updates a workgroup with the specified configuration settings. You can''t update multiple parameters in one request. For example, you can update <code>baseCapacity</code> or <code>port</code> in a single request, but you can''t update both in the same request.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateWorkgroupResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: InsufficientCapacityException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InsufficientCapacityException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkgroupRequest'
      parameters:
        - name: X-Amz-Target
          in: header
          required: true
          schema:
            type: string
            enum:
              - RedshiftServerless.UpdateWorkgroup
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    ConvertRecoveryPointToSnapshotResponse:
      type: object
      properties:
        snapshot:
          allOf:
            - $ref: '#/components/schemas/Snapshot'
            - description: The snapshot converted from the recovery point.
    ConvertRecoveryPointToSnapshotRequest:
      type: object
      required:
        - recoveryPointId
        - snapshotName
      title: ConvertRecoveryPointToSnapshotRequest
      properties:
        recoveryPointId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the recovery point.
        retentionPeriod:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: How long to retain the snapshot.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: 'An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the created snapshot.'
    InternalServerException: {}
    ResourceNotFoundException: {}
    ConflictException: {}
    ValidationException: {}
    TooManyTagsException: {}
    ServiceQuotaExceededException: {}
    CreateEndpointAccessResponse:
      type: object
      properties:
        endpoint:
          allOf:
            - $ref: '#/components/schemas/EndpointAccess'
            - description: The created VPC endpoint.
    CreateEndpointAccessRequest:
      type: object
      required:
        - endpointName
        - subnetIds
        - workgroupName
      title: CreateEndpointAccessRequest
      properties:
        endpointName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'The name of the VPC endpoint. An endpoint name must contain 1-30 characters. Valid characters are A-Z, a-z, 0-9, and hyphen(-). The first character must be a letter. The name can''t contain two consecutive hyphens or end with a hyphen.'
        subnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - description: The unique identifers of subnets from which Amazon Redshift Serverless chooses one to deploy a VPC endpoint.
        vpcSecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/VpcSecurityGroupIdList'
            - description: 'The unique identifiers of the security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.'
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the workgroup to associate with the VPC endpoint.
    AccessDeniedException: {}
    CreateNamespaceResponse:
      type: object
      properties:
        namespace:
          allOf:
            - $ref: '#/components/schemas/Namespace'
            - description: The created namespace object.
    CreateNamespaceRequest:
      type: object
      required:
        - namespaceName
      title: CreateNamespaceRequest
      properties:
        adminUserPassword:
          allOf:
            - $ref: '#/components/schemas/DbPassword'
            - description: The password of the administrator for the first database created in the namespace.
        adminUsername:
          allOf:
            - $ref: '#/components/schemas/DbUser'
            - description: The username of the administrator for the first database created in the namespace.
        dbName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the first database created in the namespace.
        defaultIamRoleArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.
        iamRoles:
          allOf:
            - $ref: '#/components/schemas/IamRoleArnList'
            - description: A list of IAM roles to associate with the namespace.
        kmsKeyId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the Amazon Web Services Key Management Service key used to encrypt your data.
        logExports:
          allOf:
            - $ref: '#/components/schemas/LogExportList'
            - description: 'The types of logs the namespace can export. Available export types are <code>userlog</code>, <code>connectionlog</code>, and <code>useractivitylog</code>.'
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: A list of tag instances.
    CreateSnapshotResponse:
      type: object
      properties:
        snapshot:
          allOf:
            - $ref: '#/components/schemas/Snapshot'
            - description: The created snapshot object.
    CreateSnapshotRequest:
      type: object
      required:
        - namespaceName
        - snapshotName
      title: CreateSnapshotRequest
      properties:
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace to create a snapshot for.
        retentionPeriod:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: How long to retain the created snapshot.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: 'An array of <a href="https://docs.aws.amazon.com/redshift-serverless/latest/APIReference/API_Tag.html">Tag objects</a> to associate with the snapshot.'
    CreateUsageLimitResponse:
      type: object
      properties:
        usageLimit:
          allOf:
            - $ref: '#/components/schemas/UsageLimit'
            - description: The returned usage limit object.
    CreateUsageLimitRequest:
      type: object
      required:
        - amount
        - resourceArn
        - usageType
      title: CreateUsageLimitRequest
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: 'The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.'
        breachAction:
          allOf:
            - $ref: '#/components/schemas/UsageLimitBreachAction'
            - description: The action that Amazon Redshift Serverless takes when the limit is reached. The default is log.
        period:
          allOf:
            - $ref: '#/components/schemas/UsageLimitPeriod'
            - description: The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
        usageType:
          allOf:
            - $ref: '#/components/schemas/UsageLimitUsageType'
            - description: The type of Amazon Redshift Serverless usage to create a usage limit for.
    CreateWorkgroupResponse:
      type: object
      properties:
        workgroup:
          allOf:
            - $ref: '#/components/schemas/Workgroup'
            - description: The created workgroup object.
    CreateWorkgroupRequest:
      type: object
      required:
        - namespaceName
        - workgroupName
      title: CreateWorkgroupRequest
      properties:
        baseCapacity:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
        configParameters:
          allOf:
            - $ref: '#/components/schemas/ConfigParameterList'
            - description: 'An array of parameters to set for advanced control over a database. The options are <code>auto_mv</code>, <code>datestyle</code>, <code>enable_case_sensitivity_identifier</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless"> Query monitoring metrics for Amazon Redshift Serverless</a>.'
        enhancedVpcRouting:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: 'The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.'
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to associate with the workgroup.
        port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
        publiclyAccessible:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A value that specifies whether the workgroup can be accessed from a public network.
        securityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - description: An array of security group IDs to associate with the workgroup.
        subnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - description: An array of VPC subnet IDs to associate with the workgroup.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: A array of tag instances.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the created workgroup.
    InsufficientCapacityException: {}
    DeleteEndpointAccessResponse:
      type: object
      properties:
        endpoint:
          allOf:
            - $ref: '#/components/schemas/EndpointAccess'
            - description: The deleted VPC endpoint.
    DeleteEndpointAccessRequest:
      type: object
      required:
        - endpointName
      title: DeleteEndpointAccessRequest
      properties:
        endpointName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the VPC endpoint to delete.
    DeleteNamespaceResponse:
      type: object
      required:
        - namespace
      properties:
        namespace:
          allOf:
            - $ref: '#/components/schemas/Namespace'
            - description: The deleted namespace object.
    DeleteNamespaceRequest:
      type: object
      required:
        - namespaceName
      title: DeleteNamespaceRequest
      properties:
        finalSnapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot to be created before the namespace is deleted.
        finalSnapshotRetentionPeriod:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: How long to retain the final snapshot.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to delete.
    DeleteResourcePolicyResponse:
      type: object
      properties: {}
    DeleteResourcePolicyRequest:
      type: object
      required:
        - resourceArn
      title: DeleteResourcePolicyRequest
      properties:
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the policy to delete.
    DeleteSnapshotResponse:
      type: object
      properties:
        snapshot:
          allOf:
            - $ref: '#/components/schemas/Snapshot'
            - description: The deleted snapshot object.
    DeleteSnapshotRequest:
      type: object
      required:
        - snapshotName
      title: DeleteSnapshotRequest
      properties:
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot to be deleted.
    DeleteUsageLimitResponse:
      type: object
      properties:
        usageLimit:
          allOf:
            - $ref: '#/components/schemas/UsageLimit'
            - description: The deleted usage limit object.
    DeleteUsageLimitRequest:
      type: object
      required:
        - usageLimitId
      title: DeleteUsageLimitRequest
      properties:
        usageLimitId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the usage limit to delete.
    DeleteWorkgroupResponse:
      type: object
      required:
        - workgroup
      properties:
        workgroup:
          allOf:
            - $ref: '#/components/schemas/Workgroup'
            - description: The deleted workgroup object.
    DeleteWorkgroupRequest:
      type: object
      required:
        - workgroupName
      title: DeleteWorkgroupRequest
      properties:
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup to be deleted.
    GetCredentialsResponse:
      type: object
      properties:
        dbPassword:
          allOf:
            - $ref: '#/components/schemas/DbPassword'
            - description: A temporary password that authorizes the user name returned by <code>DbUser</code> to log on to the database <code>DbName</code>.
        dbUser:
          allOf:
            - $ref: '#/components/schemas/DbUser'
            - description: 'A database user name that is authorized to log on to the database <code>DbName</code> using the password <code>DbPassword</code>. If the specified <code>DbUser</code> exists in the database, the new user name has the same database privileges as the the user named in <code>DbUser</code>. By default, the user is added to PUBLIC.'
        expiration:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time the password in <code>DbPassword</code> expires.
        nextRefreshTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time of when the <code>DbUser</code> and <code>DbPassword</code> authorization refreshes.
    GetCredentialsRequest:
      type: object
      required:
        - workgroupName
      title: GetCredentialsRequest
      properties:
        dbName:
          allOf:
            - $ref: '#/components/schemas/DbName'
            - description: '<p>The name of the database to get temporary authorization to log on to.</p> <p>Constraints:</p> <ul> <li> <p>Must be 1 to 64 alphanumeric characters or hyphens.</p> </li> <li> <p>Must contain only uppercase or lowercase letters, numbers, underscore, plus sign, period (dot), at symbol (@), or hyphen.</p> </li> <li> <p>The first character must be a letter.</p> </li> <li> <p>Must not contain a colon ( : ) or slash ( / ).</p> </li> <li> <p>Cannot be a reserved word. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words </a> in the Amazon Redshift Database Developer Guide</p> </li> </ul>'
        durationSeconds:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: 'The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.'
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup associated with the database.
    GetEndpointAccessResponse:
      type: object
      properties:
        endpoint:
          allOf:
            - $ref: '#/components/schemas/EndpointAccess'
            - description: The returned VPC endpoint.
    GetEndpointAccessRequest:
      type: object
      required:
        - endpointName
      title: GetEndpointAccessRequest
      properties:
        endpointName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the VPC endpoint to return information for.
    GetNamespaceResponse:
      type: object
      required:
        - namespace
      properties:
        namespace:
          allOf:
            - $ref: '#/components/schemas/Namespace'
            - description: The returned namespace object.
    GetNamespaceRequest:
      type: object
      required:
        - namespaceName
      title: GetNamespaceRequest
      properties:
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to retrieve information for.
    GetRecoveryPointResponse:
      type: object
      properties:
        recoveryPoint:
          allOf:
            - $ref: '#/components/schemas/RecoveryPoint'
            - description: The returned recovery point object.
    GetRecoveryPointRequest:
      type: object
      required:
        - recoveryPointId
      title: GetRecoveryPointRequest
      properties:
        recoveryPointId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the recovery point to return information for.
    GetResourcePolicyResponse:
      type: object
      properties:
        resourcePolicy:
          allOf:
            - $ref: '#/components/schemas/ResourcePolicy'
            - description: The returned resource policy.
    GetResourcePolicyRequest:
      type: object
      required:
        - resourceArn
      title: GetResourcePolicyRequest
      properties:
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the resource to return.
    GetSnapshotResponse:
      type: object
      properties:
        snapshot:
          allOf:
            - $ref: '#/components/schemas/Snapshot'
            - description: The returned snapshot object.
    GetSnapshotRequest:
      type: object
      title: GetSnapshotRequest
      properties:
        ownerAccount:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The owner Amazon Web Services account of a snapshot shared with another user.
        snapshotArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the snapshot to return.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot to return.
    GetTableRestoreStatusResponse:
      type: object
      properties:
        tableRestoreStatus:
          allOf:
            - $ref: '#/components/schemas/TableRestoreStatus'
            - description: The returned <code>TableRestoreStatus</code> object that contains information about the status of your <code>RestoreTableFromSnapshot</code> request.
    GetTableRestoreStatusRequest:
      type: object
      required:
        - tableRestoreRequestId
      title: GetTableRestoreStatusRequest
      properties:
        tableRestoreRequestId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the <code>RestoreTableFromSnapshot</code> request to return status for.
    GetUsageLimitResponse:
      type: object
      properties:
        usageLimit:
          allOf:
            - $ref: '#/components/schemas/UsageLimit'
            - description: The returned usage limit object.
    GetUsageLimitRequest:
      type: object
      required:
        - usageLimitId
      title: GetUsageLimitRequest
      properties:
        usageLimitId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the usage limit to return information for.
    GetWorkgroupResponse:
      type: object
      required:
        - workgroup
      properties:
        workgroup:
          allOf:
            - $ref: '#/components/schemas/Workgroup'
            - description: The returned workgroup object.
    GetWorkgroupRequest:
      type: object
      required:
        - workgroupName
      title: GetWorkgroupRequest
      properties:
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup to return information for.
    ListEndpointAccessResponse:
      type: object
      required:
        - endpoints
      properties:
        endpoints:
          allOf:
            - $ref: '#/components/schemas/EndpointAccessList'
            - description: The returned VPC endpoints.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.'
    ListEndpointAccessRequest:
      type: object
      title: ListEndpointAccessRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListEndpointAccessRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If your initial <code>ListEndpointAccess</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListEndpointAccess</code> operations, which returns results in the next page.'
        vpcId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the virtual private cloud with access to Amazon Redshift Serverless.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the workgroup associated with the VPC endpoint to return.
    ListNamespacesResponse:
      type: object
      required:
        - namespaces
      properties:
        namespaces:
          allOf:
            - $ref: '#/components/schemas/NamespaceList'
            - description: The list of returned namespaces.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.'
    ListNamespacesRequest:
      type: object
      title: ListNamespacesRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListNamespacesRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If your initial <code>ListNamespaces</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListNamespaces</code> operations, which returns results in the next page.'
    ListRecoveryPointsResponse:
      type: object
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.'
        recoveryPoints:
          allOf:
            - $ref: '#/components/schemas/RecoveryPointList'
            - description: The returned recovery point objects.
    ListRecoveryPointsRequest:
      type: object
      title: ListRecoveryPointsRequest
      properties:
        endTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The time when creation of the recovery point finished.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListRecoveryPointsRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.
        namespaceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the namespace from which to list recovery points.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to list recovery points for.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If your initial <code>ListRecoveryPoints</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListRecoveryPoints</code> operations, which returns results in the next page.'
        startTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The time when the recovery point's creation was initiated.
    ListSnapshotsResponse:
      type: object
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.'
        snapshots:
          allOf:
            - $ref: '#/components/schemas/SnapshotList'
            - description: All of the returned snapshot objects.
    ListSnapshotsRequest:
      type: object
      title: ListSnapshotsRequest
      properties:
        endTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The timestamp showing when the snapshot creation finished.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListSnapshotsRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.
        namespaceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the namespace from which to list all snapshots.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace from which to list all snapshots.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.'
        ownerAccount:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The owner Amazon Web Services account of the snapshot.
        startTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The time when the creation of the snapshot was initiated.
    ListTableRestoreStatusResponse:
      type: object
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/PaginationToken'
            - description: 'If your initial <code>ListTableRestoreStatus</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListTableRestoreStatus</code> operations. This will returns results on the next page.'
        tableRestoreStatuses:
          allOf:
            - $ref: '#/components/schemas/TableRestoreStatusList'
            - description: The array of returned <code>TableRestoreStatus</code> objects.
    ListTableRestoreStatusRequest:
      type: object
      title: ListTableRestoreStatusRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListTableRestoreStatusRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use nextToken to display the next page of results.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace from which to list all of the statuses of <code>RestoreTableFromSnapshot</code> operations .
        nextToken:
          allOf:
            - $ref: '#/components/schemas/PaginationToken'
            - description: 'If your initial <code>ListTableRestoreStatus</code> operation returns a nextToken, you can include the returned <code>nextToken</code> in following <code>ListTableRestoreStatus</code> operations. This will return results on the next page.'
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The workgroup from which to list all of the statuses of <code>RestoreTableFromSnapshot</code> operations.
    InvalidPaginationException: {}
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: A map of the key-value pairs assigned to the resource.
    ListTagsForResourceRequest:
      type: object
      required:
        - resourceArn
      title: ListTagsForResourceRequest
      properties:
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/AmazonResourceName'
            - description: The Amazon Resource Name (ARN) of the resource to list tags for.
    ThrottlingException: {}
    ListUsageLimitsResponse:
      type: object
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/PaginationToken'
            - description: 'When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.'
        usageLimits:
          allOf:
            - $ref: '#/components/schemas/UsageLimits'
            - description: An array of returned usage limit objects.
    ListUsageLimitsRequest:
      type: object
      title: ListUsageLimitsRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListUsageLimitsRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results. The default is 100.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/PaginationToken'
            - description: 'If your initial <code>ListUsageLimits</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following <code>ListUsageLimits</code> operations, which returns results in the next page. '
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) associated with the resource whose usage limits you want to list.
        usageType:
          allOf:
            - $ref: '#/components/schemas/UsageLimitUsageType'
            - description: The Amazon Redshift Serverless feature whose limits you want to see.
    ListWorkgroupsResponse:
      type: object
      required:
        - workgroups
      properties:
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: ' If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. To retrieve the next page, make the call again using the returned token.'
        workgroups:
          allOf:
            - $ref: '#/components/schemas/WorkgroupList'
            - description: The returned array of workgroups.
    ListWorkgroupsRequest:
      type: object
      title: ListWorkgroupsRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/ListWorkgroupsRequestMaxResultsInteger'
            - description: An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to display the next page of results.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'If your initial ListWorkgroups operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in following ListNamespaces operations, which returns results in the next page.'
    PutResourcePolicyResponse:
      type: object
      properties:
        resourcePolicy:
          allOf:
            - $ref: '#/components/schemas/ResourcePolicy'
            - description: The policy that was created or updated.
    PutResourcePolicyRequest:
      type: object
      required:
        - policy
        - resourceArn
      title: PutResourcePolicyRequest
      properties:
        policy:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: '<p>The policy to create or update. For example, the following policy grants a user authorization to restore a snapshot.</p> <p> <code>"{\"Version\": \"2012-10-17\", \"Statement\" : [{ \"Sid\": \"AllowUserRestoreFromSnapshot\", \"Principal\":{\"AWS\": [\"739247239426\"]}, \"Action\": [\"redshift-serverless:RestoreFromSnapshot\"] , \"Effect\": \"Allow\" }]}"</code> </p>'
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the account to create or update a resource policy for.
    RestoreFromRecoveryPointResponse:
      type: object
      properties:
        namespace:
          allOf:
            - $ref: '#/components/schemas/Namespace'
            - description: The namespace that data was restored into.
        recoveryPointId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the recovery point used for the restore.
    RestoreFromRecoveryPointRequest:
      type: object
      required:
        - namespaceName
        - recoveryPointId
        - workgroupName
      title: RestoreFromRecoveryPointRequest
      properties:
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to restore data into.
        recoveryPointId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the recovery point to restore from.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup used to restore data.
    RestoreFromSnapshotResponse:
      type: object
      properties:
        namespace:
          $ref: '#/components/schemas/Namespace'
        ownerAccount:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The owner Amazon Web Services; account of the snapshot that was restored.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot used to restore the namespace.
    RestoreFromSnapshotRequest:
      type: object
      required:
        - namespaceName
        - workgroupName
      title: RestoreFromSnapshotRequest
      properties:
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to restore the snapshot to.
        ownerAccount:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Web Services account that owns the snapshot.
        snapshotArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: '<p>The Amazon Resource Name (ARN) of the snapshot to restore from. Required if restoring from Amazon Redshift Serverless to a provisioned cluster. Must not be specified at the same time as <code>snapshotName</code>.</p> <p>The format of the ARN is arn:aws:redshift:&lt;region&gt;:&lt;account_id&gt;:snapshot:&lt;cluster_identifier&gt;/&lt;snapshot_identifier&gt;.</p>'
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot to restore from. Must not be specified at the same time as <code>snapshotArn</code>.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup used to restore the snapshot.
    RestoreTableFromSnapshotResponse:
      type: object
      properties:
        tableRestoreStatus:
          allOf:
            - $ref: '#/components/schemas/TableRestoreStatus'
            - description: The TableRestoreStatus object that contains the status of the restore operation.
    RestoreTableFromSnapshotRequest:
      type: object
      required:
        - namespaceName
        - newTableName
        - snapshotName
        - sourceDatabaseName
        - sourceTableName
        - workgroupName
      title: RestoreTableFromSnapshotRequest
      properties:
        activateCaseSensitiveIdentifier:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: 'Indicates whether name identifiers for database, schema, and table are case sensitive. If true, the names are case sensitive. If false, the names are not case sensitive. The default is false.'
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace of the snapshot to restore from.
        newTableName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the table to create from the restore operation.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot to restore the table from.
        sourceDatabaseName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the source database that contains the table being restored.
        sourceSchemaName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the source schema that contains the table being restored.
        sourceTableName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the source table being restored.
        targetDatabaseName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the database to restore the table to.
        targetSchemaName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the schema to restore the table to.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The workgroup to restore the table to.
    TagResourceResponse:
      type: object
      properties: {}
    TagResourceRequest:
      type: object
      required:
        - resourceArn
        - tags
      title: TagResourceRequest
      properties:
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/AmazonResourceName'
            - description: The Amazon Resource Name (ARN) of the resource to tag.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagList'
            - description: The map of the key-value pairs used to tag the resource.
    UntagResourceResponse:
      type: object
      properties: {}
    UntagResourceRequest:
      type: object
      required:
        - resourceArn
        - tagKeys
      title: UntagResourceRequest
      properties:
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/AmazonResourceName'
            - description: The Amazon Resource Name (ARN) of the resource to remove tags from.
        tagKeys:
          allOf:
            - $ref: '#/components/schemas/TagKeyList'
            - description: The tag or set of tags to remove from the resource.
    UpdateEndpointAccessResponse:
      type: object
      properties:
        endpoint:
          allOf:
            - $ref: '#/components/schemas/EndpointAccess'
            - description: The updated VPC endpoint.
    UpdateEndpointAccessRequest:
      type: object
      required:
        - endpointName
      title: UpdateEndpointAccessRequest
      properties:
        endpointName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the VPC endpoint to update.
        vpcSecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/VpcSecurityGroupIdList'
            - description: The list of VPC security groups associated with the endpoint after the endpoint is modified.
    UpdateNamespaceResponse:
      type: object
      required:
        - namespace
      properties:
        namespace:
          allOf:
            - $ref: '#/components/schemas/Namespace'
            - description: A list of tag instances.
    UpdateNamespaceRequest:
      type: object
      required:
        - namespaceName
      title: UpdateNamespaceRequest
      properties:
        adminUserPassword:
          allOf:
            - $ref: '#/components/schemas/DbPassword'
            - description: The password of the administrator for the first database created in the namespace. This parameter must be updated together with <code>adminUsername</code>.
        adminUsername:
          allOf:
            - $ref: '#/components/schemas/DbUser'
            - description: The username of the administrator for the first database created in the namespace. This parameter must be updated together with <code>adminUserPassword</code>.
        defaultIamRoleArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. This parameter must be updated together with <code>iamRoles</code>.
        iamRoles:
          allOf:
            - $ref: '#/components/schemas/IamRoleArnList'
            - description: A list of IAM roles to associate with the namespace. This parameter must be updated together with <code>defaultIamRoleArn</code>.
        kmsKeyId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the Amazon Web Services Key Management Service key used to encrypt your data.
        logExports:
          allOf:
            - $ref: '#/components/schemas/LogExportList'
            - description: 'The types of logs the namespace can export. The export types are <code>userlog</code>, <code>connectionlog</code>, and <code>useractivitylog</code>.'
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace to update. You can't update the name of a namespace once it is created.
    UpdateSnapshotResponse:
      type: object
      properties:
        snapshot:
          allOf:
            - $ref: '#/components/schemas/Snapshot'
            - description: The updated snapshot object.
    UpdateSnapshotRequest:
      type: object
      required:
        - snapshotName
      title: UpdateSnapshotRequest
      properties:
        retentionPeriod:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The new retention period of the snapshot.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot.
    UpdateUsageLimitResponse:
      type: object
      properties:
        usageLimit:
          allOf:
            - $ref: '#/components/schemas/UsageLimit'
            - description: The updated usage limit object.
    UpdateUsageLimitRequest:
      type: object
      required:
        - usageLimitId
      title: UpdateUsageLimitRequest
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: 'The new limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.'
        breachAction:
          allOf:
            - $ref: '#/components/schemas/UsageLimitBreachAction'
            - description: The new action that Amazon Redshift Serverless takes when the limit is reached.
        usageLimitId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The identifier of the usage limit to update.
    UpdateWorkgroupResponse:
      type: object
      required:
        - workgroup
      properties:
        workgroup:
          allOf:
            - $ref: '#/components/schemas/Workgroup'
            - description: The updated workgroup object.
    UpdateWorkgroupRequest:
      type: object
      required:
        - workgroupName
      title: UpdateWorkgroupRequest
      properties:
        baseCapacity:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The new base data warehouse capacity in Redshift Processing Units (RPUs).
        configParameters:
          allOf:
            - $ref: '#/components/schemas/ConfigParameterList'
            - description: 'An array of parameters to set for advanced control over a database. The options are <code>auto_mv</code>, <code>datestyle</code>, <code>enable_case_sensitivity_identifier</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless"> Query monitoring metrics for Amazon Redshift Serverless</a>.'
        enhancedVpcRouting:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: 'The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.'
        port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
        publiclyAccessible:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A value that specifies whether the workgroup can be accessible from a public network.
        securityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - description: An array of security group IDs to associate with the workgroup.
        subnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - description: An array of VPC subnet IDs to associate with the workgroup.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup to update. You can't update the name of a workgroup once it is created.
    String:
      type: string
    AccountIdList:
      type: array
      items:
        $ref: '#/components/schemas/String'
    AmazonResourceName:
      type: string
      minLength: 1
      maxLength: 1011
    Boolean:
      type: boolean
    ParameterKey:
      type: string
    ParameterValue:
      type: string
    ConfigParameter:
      type: object
      properties:
        parameterKey:
          allOf:
            - $ref: '#/components/schemas/ParameterKey'
            - description: 'The key of the parameter. The options are <code>auto_mv</code>, <code>datestyle</code>, <code>enable_case_sensitivity_identifier</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, <code>search_path</code>, and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless">Query monitoring metrics for Amazon Redshift Serverless</a>.'
        parameterValue:
          allOf:
            - $ref: '#/components/schemas/ParameterValue'
            - description: The value of the parameter to set.
      description: An array of key-value pairs to set for advanced control over Amazon Redshift Serverless.
    ConfigParameterList:
      type: array
      items:
        $ref: '#/components/schemas/ConfigParameter'
    Integer:
      type: integer
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      minItems: 0
      maxItems: 200
    Snapshot:
      type: object
      properties:
        accountsWithProvisionedRestoreAccess:
          allOf:
            - $ref: '#/components/schemas/AccountIdList'
            - description: All of the Amazon Web Services accounts that have access to restore a snapshot to a provisioned cluster.
        accountsWithRestoreAccess:
          allOf:
            - $ref: '#/components/schemas/AccountIdList'
            - description: All of the Amazon Web Services accounts that have access to restore a snapshot to a namespace.
        actualIncrementalBackupSizeInMegaBytes:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: The size of the incremental backup in megabytes.
        adminUsername:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The username of the database within a snapshot.
        backupProgressInMegaBytes:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: The size in megabytes of the data that has been backed up to a snapshot.
        currentBackupRateInMegaBytesPerSecond:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: The rate at which data is backed up into a snapshot in megabytes per second.
        elapsedTimeInSeconds:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The amount of time it took to back up data into a snapshot.
        estimatedSecondsToCompletion:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The estimated amount of seconds until the snapshot completes backup.
        kmsKeyId:
          allOf:
            - $ref: '#/components/schemas/KmsKeyId'
            - description: The unique identifier of the KMS key used to encrypt the snapshot.
        namespaceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the namespace the snapshot was created from.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the namepsace.
        ownerAccount:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The owner Amazon Web Services; account of the snapshot.
        snapshotArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the snapshot.
        snapshotCreateTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The timestamp of when the snapshot was created.
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot.
        snapshotRemainingDays:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The amount of days until the snapshot is deleted.
        snapshotRetentionPeriod:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: 'The period of time, in days, of how long the snapshot is retained.'
        snapshotRetentionStartTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The timestamp of when data within the snapshot started getting retained.
        status:
          allOf:
            - $ref: '#/components/schemas/SnapshotStatus'
            - description: The status of the snapshot.
        totalBackupSizeInMegaBytes:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: 'The total size, in megabytes, of how big the snapshot is.'
      description: A snapshot object that contains databases.
    SubnetIdList:
      type: array
      items:
        $ref: '#/components/schemas/SubnetId'
    VpcSecurityGroupIdList:
      type: array
      items:
        $ref: '#/components/schemas/VpcSecurityGroupId'
    EndpointAccess:
      type: object
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The DNS address of the endpoint.
        endpointArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the VPC endpoint.
        endpointCreateTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The time that the endpoint was created.
        endpointName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the VPC endpoint.
        endpointStatus:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The status of the VPC endpoint.
        port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The port number on which Amazon Redshift Serverless accepts incoming connections.
        subnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - description: The unique identifier of subnets where Amazon Redshift Serverless choose to deploy the VPC endpoint.
        vpcEndpoint:
          allOf:
            - $ref: '#/components/schemas/VpcEndpoint'
            - description: The connection endpoint for connecting to Amazon Redshift Serverless.
        vpcSecurityGroups:
          allOf:
            - $ref: '#/components/schemas/VpcSecurityGroupMembershipList'
            - description: The security groups associated with the endpoint.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the workgroup associated with the endpoint.
      description: Information about an Amazon Redshift Serverless VPC endpoint.
    DbPassword:
      type: string
      format: password
    DbUser:
      type: string
      format: password
    IamRoleArnList:
      type: array
      items:
        $ref: '#/components/schemas/IamRoleArn'
    LogExportList:
      type: array
      items:
        $ref: '#/components/schemas/LogExport'
      minItems: 0
      maxItems: 16
    NamespaceName:
      type: string
      pattern: '^[a-z0-9-]+$'
      minLength: 3
      maxLength: 64
    Namespace:
      type: object
      properties:
        adminUsername:
          allOf:
            - $ref: '#/components/schemas/DbUser'
            - description: The username of the administrator for the first database created in the namespace.
        creationDate:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The date of when the namespace was created.
        dbName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the first database created in the namespace.
        defaultIamRoleArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace.
        iamRoles:
          allOf:
            - $ref: '#/components/schemas/IamRoleArnList'
            - description: A list of IAM roles to associate with the namespace.
        kmsKeyId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the Amazon Web Services Key Management Service key used to encrypt your data.
        logExports:
          allOf:
            - $ref: '#/components/schemas/LogExportList'
            - description: 'The types of logs the namespace can export. Available export types are User log, Connection log, and User activity log.'
        namespaceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) associated with a namespace.
        namespaceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of a namespace.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: 'The name of the namespace. Must be between 3-64 alphanumeric characters in lowercase, and it cannot be a reserved word. A list of reserved words can be found in <a href="https://docs.aws.amazon.com/redshift/latest/dg/r_pg_keywords.html">Reserved Words</a> in the Amazon Redshift Database Developer Guide.'
        status:
          allOf:
            - $ref: '#/components/schemas/NamespaceStatus'
            - description: The status of the namespace.
      description: A collection of database objects and users.
    Long:
      type: integer
    UsageLimitBreachAction:
      type: string
      enum:
        - log
        - emit-metric
        - deactivate
    UsageLimitPeriod:
      type: string
      enum:
        - daily
        - weekly
        - monthly
    UsageLimitUsageType:
      type: string
      enum:
        - serverless-compute
        - cross-region-datasharing
    UsageLimit:
      type: object
      properties:
        amount:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: 'The limit amount. If time-based, this amount is in RPUs consumed per hour. If data-based, this amount is in terabytes (TB). The value must be a positive number.'
        breachAction:
          allOf:
            - $ref: '#/components/schemas/UsageLimitBreachAction'
            - description: The action that Amazon Redshift Serverless takes when the limit is reached.
        period:
          allOf:
            - $ref: '#/components/schemas/UsageLimitPeriod'
            - description: The time period that the amount applies to. A weekly period begins on Sunday. The default is monthly.
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) that identifies the Amazon Redshift Serverless resource.
        usageLimitArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the resource associated with the usage limit.
        usageLimitId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The identifier of the usage limit.
        usageType:
          allOf:
            - $ref: '#/components/schemas/UsageLimitUsageType'
            - description: The Amazon Redshift Serverless feature to limit.
      description: The usage limit object.
    SecurityGroupIdList:
      type: array
      items:
        $ref: '#/components/schemas/SecurityGroupId'
    WorkgroupName:
      type: string
      pattern: '^[a-z0-9-]+$'
      minLength: 3
      maxLength: 64
    Workgroup:
      type: object
      properties:
        baseCapacity:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The base data warehouse capacity of the workgroup in Redshift Processing Units (RPUs).
        configParameters:
          allOf:
            - $ref: '#/components/schemas/ConfigParameterList'
            - description: 'An array of parameters to set for advanced control over a database. The options are <code>auto_mv</code>, <code>datestyle</code>, <code>enable_case_sensitivity_identifier</code>, <code>enable_user_activity_logging</code>, <code>query_group</code>, , <code>search_path</code>, and query monitoring metrics that let you define performance boundaries. For more information about query monitoring rules and available metrics, see <a href="https://docs.aws.amazon.com/redshift/latest/dg/cm-c-wlm-query-monitoring-rules.html#cm-c-wlm-query-monitoring-metrics-serverless"> Query monitoring metrics for Amazon Redshift Serverless</a>.'
        creationDate:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The creation date of the workgroup.
        endpoint:
          allOf:
            - $ref: '#/components/schemas/Endpoint'
            - description: The endpoint that is created from the workgroup.
        enhancedVpcRouting:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: 'The value that specifies whether to enable enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC.'
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace the workgroup is associated with.
        port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The custom port to use when connecting to a workgroup. Valid port ranges are 5431-5455 and 8191-8215. The default is 5439.
        publiclyAccessible:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A value that specifies whether the workgroup can be accessible from a public network
        securityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - description: An array of security group IDs to associate with the workgroup.
        status:
          allOf:
            - $ref: '#/components/schemas/WorkgroupStatus'
            - description: The status of the workgroup.
        subnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - description: An array of subnet IDs the workgroup is associated with.
        workgroupArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) that links to the workgroup.
        workgroupId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the workgroup.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup.
      description: The collection of computing resources from which an endpoint is created.
    DbName:
      type: string
    Double:
      type: number
      format: double
    VpcEndpointList:
      type: array
      items:
        $ref: '#/components/schemas/VpcEndpoint'
    Endpoint:
      type: object
      properties:
        address:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The DNS address of the VPC endpoint.
        port:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: The port that Amazon Redshift Serverless listens on.
        vpcEndpoints:
          allOf:
            - $ref: '#/components/schemas/VpcEndpointList'
            - description: An array of <code>VpcEndpoint</code> objects.
      description: The VPC endpoint object.
    SyntheticTimestamp_date_time:
      type: string
      format: date-time
    VpcEndpoint:
      type: object
      properties:
        networkInterfaces:
          allOf:
            - $ref: '#/components/schemas/NetworkInterfaceList'
            - description: One or more network interfaces of the endpoint. Also known as an interface endpoint.
        vpcEndpointId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The connection endpoint ID for connecting to Amazon Redshift Serverless.
        vpcId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The VPC identifier that the endpoint is associated with.
      description: The connection endpoint for connecting to Amazon Redshift Serverless through the proxy.
    VpcSecurityGroupMembershipList:
      type: array
      items:
        $ref: '#/components/schemas/VpcSecurityGroupMembership'
    EndpointAccessList:
      type: array
      items:
        $ref: '#/components/schemas/EndpointAccess'
    Timestamp:
      type: string
      format: date-time
    RecoveryPoint:
      type: object
      properties:
        namespaceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the namespace the recovery point is associated with.
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/NamespaceName'
            - description: The name of the namespace the recovery point is associated with.
        recoveryPointCreateTime:
          allOf:
            - $ref: '#/components/schemas/SyntheticTimestamp_date_time'
            - description: The time the recovery point is created.
        recoveryPointId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the recovery point.
        totalSizeInMegaBytes:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: The total size of the data in the recovery point in megabytes.
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/WorkgroupName'
            - description: The name of the workgroup the recovery point is associated with.
      description: The automatically created recovery point of a namespace. Recovery points are created every 30 minutes and kept for 24 hours.
    ResourcePolicy:
      type: object
      properties:
        policy:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The resource policy.
        resourceArn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The Amazon Resource Name (ARN) of the policy.
      description: 'The resource policy object. Currently, you can use policies to share snapshots across Amazon Web Services accounts.'
    TableRestoreStatus:
      type: object
      properties:
        message:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'A description of the status of the table restore request. Status values include <code>SUCCEEDED</code>, <code>FAILED</code>, <code>CANCELED</code>, <code>PENDING</code>, <code>IN_PROGRESS</code>.'
        namespaceName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace of the table being restored from.
        newTableName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the table to create from the restore operation.
        progressInMegaBytes:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: 'The amount of data restored to the new table so far, in megabytes (MB).'
        requestTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: 'The time that the table restore request was made, in Universal Coordinated Time (UTC).'
        snapshotName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the snapshot being restored from.
        sourceDatabaseName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the source database being restored from.
        sourceSchemaName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the source schema being restored from.
        sourceTableName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the source table being restored from.
        status:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: 'A value that describes the current state of the table restore request. Possible values include <code>SUCCEEDED</code>, <code>FAILED</code>, <code>CANCELED</code>, <code>PENDING</code>, <code>IN_PROGRESS</code>.'
        tableRestoreRequestId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The ID of the RestoreTableFromSnapshot request.
        targetDatabaseName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the database to restore to.
        targetSchemaName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the schema to restore to.
        totalDataInMegaBytes:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: 'The total amount of data to restore to the new table, in megabytes (MB).'
        workgroupName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the workgroup being restored from.
      description: Contains information about a table restore request.
    IamRoleArn:
      type: string
    KmsKeyId:
      type: string
    ListEndpointAccessRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    ListNamespacesRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    NamespaceList:
      type: array
      items:
        $ref: '#/components/schemas/Namespace'
    ListRecoveryPointsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    RecoveryPointList:
      type: array
      items:
        $ref: '#/components/schemas/RecoveryPoint'
    ListSnapshotsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    SnapshotList:
      type: array
      items:
        $ref: '#/components/schemas/Snapshot'
    ListTableRestoreStatusRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    PaginationToken:
      type: string
      minLength: 8
      maxLength: 1024
    TableRestoreStatusList:
      type: array
      items:
        $ref: '#/components/schemas/TableRestoreStatus'
    ListUsageLimitsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    UsageLimits:
      type: array
      items:
        $ref: '#/components/schemas/UsageLimit'
      minItems: 1
      maxItems: 100
    ListWorkgroupsRequestMaxResultsInteger:
      type: integer
      minimum: 1
      maximum: 100
    WorkgroupList:
      type: array
      items:
        $ref: '#/components/schemas/Workgroup'
    LogExport:
      type: string
      enum:
        - useractivitylog
        - userlog
        - connectionlog
    NamespaceStatus:
      type: string
      enum:
        - AVAILABLE
        - MODIFYING
        - DELETING
    NetworkInterface:
      type: object
      properties:
        availabilityZone:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The availability Zone.
        networkInterfaceId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the network interface.
        privateIpAddress:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The IPv4 address of the network interface within the subnet.
        subnetId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unique identifier of the subnet.
      description: 'Contains information about a network interface in an Amazon Redshift Serverless managed VPC endpoint. '
    NetworkInterfaceList:
      type: array
      items:
        $ref: '#/components/schemas/NetworkInterface'
    SecurityGroupId:
      type: string
    SnapshotStatus:
      type: string
      enum:
        - AVAILABLE
        - CREATING
        - DELETED
        - CANCELLED
        - FAILED
        - COPYING
    SubnetId:
      type: string
    TagKey:
      type: string
      minLength: 1
      maxLength: 128
    TagValue:
      type: string
      minLength: 0
      maxLength: 256
    Tag:
      type: object
      required:
        - key
        - value
      properties:
        key:
          allOf:
            - $ref: '#/components/schemas/TagKey'
            - description: The key to use in the tag.
        value:
          allOf:
            - $ref: '#/components/schemas/TagValue'
            - description: The value of the tag.
      description: A map of key-value pairs.
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 200
    VpcSecurityGroupId:
      type: string
    VpcSecurityGroupMembership:
      type: object
      properties:
        status:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The status of the VPC security group.
        vpcSecurityGroupId:
          allOf:
            - $ref: '#/components/schemas/VpcSecurityGroupId'
            - description: The unique identifier of the VPC security group.
      description: Describes the members of a VPC security group.
    WorkgroupStatus:
      type: string
      enum:
        - CREATING
        - AVAILABLE
        - MODIFYING
        - DELETING
security:
  - hmac: []
