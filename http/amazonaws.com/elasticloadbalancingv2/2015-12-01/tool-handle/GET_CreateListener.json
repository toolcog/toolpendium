{
  "name": "GET_CreateListener",
  "description": "<p>Creates a listener for the specified Application Load Balancer, Network Load Balancer, or Gateway Load Balancer.</p> <p>For more information, see the following:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-listeners.html\">Listeners for your Application Load Balancers</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-listeners.html\">Listeners for your Network Load Balancers</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/gateway/gateway-listeners.html\">Listeners for your Gateway Load Balancers</a> </p> </li> </ul> <p>This operation is idempotent, which means that it completes at most one time. If you attempt to create multiple listeners with the same settings, each call succeeds.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "LoadBalancerArn": {
        "type": "string",
        "description": "The Amazon Resource Name (ARN) of the load balancer."
      },
      "Protocol": {
        "type": "string",
        "enum": [
          "HTTP",
          "HTTPS",
          "TCP",
          "TLS",
          "UDP",
          "TCP_UDP",
          "GENEVE"
        ],
        "description": "The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You canâ€™t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer."
      },
      "Port": {
        "type": "integer",
        "minimum": 1,
        "maximum": 65535,
        "description": "The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer."
      },
      "SslPolicy": {
        "type": "string",
        "description": "<p>[HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies\">Security policies</a> in the <i>Application Load Balancers Guide</i> and <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies\">Security policies</a> in the <i>Network Load Balancers Guide</i>.</p>"
      },
      "Certificates": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Certificate"
        },
        "description": "[HTTPS and TLS listeners] The default certificate for the listener. You must provide exactly one certificate. Set <code>CertificateArn</code> to the certificate ARN but do not set <code>IsDefault</code>."
      },
      "DefaultActions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Action"
        },
        "description": "The actions for the default rule."
      },
      "AlpnPolicy": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AlpnPolicyValue"
        },
        "description": "<p>[TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN) policy. You can specify one policy name. The following are the possible values:</p> <ul> <li> <p> <code>HTTP1Only</code> </p> </li> <li> <p> <code>HTTP2Only</code> </p> </li> <li> <p> <code>HTTP2Optional</code> </p> </li> <li> <p> <code>HTTP2Preferred</code> </p> </li> <li> <p> <code>None</code> </p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies\">ALPN policies</a> in the <i>Network Load Balancers Guide</i>.</p>"
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1,
        "description": "The tags to assign to the listener."
      },
      "Action": {
        "type": "string",
        "enum": [
          "CreateListener"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2015-12-01"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "LoadBalancerArn",
      "DefaultActions",
      "Action",
      "Version"
    ],
    "$defs": {
      "Certificate": {
        "type": "object",
        "properties": {
          "CertificateArn": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the certificate."
              }
            ]
          },
          "IsDefault": {
            "allOf": [
              {
                "$ref": "#/$defs/Default"
              },
              {
                "description": "Indicates whether the certificate is the default certificate. Do not set this value when specifying a certificate as an input. This value is not included in the output when describing a listener, but is included when describing listener certificates."
              }
            ]
          }
        },
        "description": "Information about an SSL server certificate."
      },
      "CertificateArn": {
        "type": "string"
      },
      "Default": {
        "type": "boolean"
      },
      "Action": {
        "type": "object",
        "required": [
          "Type"
        ],
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeEnum"
              },
              {
                "description": "The type of action."
              }
            ]
          },
          "TargetGroupArn": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the target group. Specify only when <code>Type</code> is <code>forward</code> and you want to route to a single target group. To route to one or more target groups, use <code>ForwardConfig</code> instead."
              }
            ]
          },
          "AuthenticateOidcConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionConfig"
              },
              {
                "description": "[HTTPS listeners] Information about an identity provider that is compliant with OpenID Connect (OIDC). Specify only when <code>Type</code> is <code>authenticate-oidc</code>."
              }
            ]
          },
          "AuthenticateCognitoConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionConfig"
              },
              {
                "description": "[HTTPS listeners] Information for using Amazon Cognito to authenticate users. Specify only when <code>Type</code> is <code>authenticate-cognito</code>."
              }
            ]
          },
          "Order": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionOrder"
              },
              {
                "description": "The order for the action. This value is required for rules with multiple actions. The action with the lowest value for order is performed first."
              }
            ]
          },
          "RedirectConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionConfig"
              },
              {
                "description": "[Application Load Balancer] Information for creating a redirect action. Specify only when <code>Type</code> is <code>redirect</code>."
              }
            ]
          },
          "FixedResponseConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/FixedResponseActionConfig"
              },
              {
                "description": "[Application Load Balancer] Information for creating an action that returns a custom HTTP response. Specify only when <code>Type</code> is <code>fixed-response</code>."
              }
            ]
          },
          "ForwardConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/ForwardActionConfig"
              },
              {
                "description": "Information for creating an action that distributes requests among one or more target groups. For Network Load Balancers, you can specify a single target group. Specify only when <code>Type</code> is <code>forward</code>. If you specify both <code>ForwardConfig</code> and <code>TargetGroupArn</code>, you can specify only one target group using <code>ForwardConfig</code> and it must be the same target group specified in <code>TargetGroupArn</code>."
              }
            ]
          }
        },
        "description": "<p>Information about an action.</p> <p>Each rule must include exactly one of the following types of actions: <code>forward</code>, <code>fixed-response</code>, or <code>redirect</code>, and it must be the last action to be performed.</p>"
      },
      "ActionTypeEnum": {
        "type": "string",
        "enum": [
          "forward",
          "authenticate-oidc",
          "authenticate-cognito",
          "redirect",
          "fixed-response"
        ]
      },
      "TargetGroupArn": {
        "type": "string"
      },
      "AuthenticateOidcActionConfig": {
        "type": "object",
        "required": [
          "Issuer",
          "AuthorizationEndpoint",
          "TokenEndpoint",
          "UserInfoEndpoint",
          "ClientId"
        ],
        "properties": {
          "Issuer": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionIssuer"
              },
              {
                "description": "The OIDC issuer identifier of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path."
              }
            ]
          },
          "AuthorizationEndpoint": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionAuthorizationEndpoint"
              },
              {
                "description": "The authorization endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path."
              }
            ]
          },
          "TokenEndpoint": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionTokenEndpoint"
              },
              {
                "description": "The token endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path."
              }
            ]
          },
          "UserInfoEndpoint": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionUserInfoEndpoint"
              },
              {
                "description": "The user info endpoint of the IdP. This must be a full URL, including the HTTPS protocol, the domain, and the path."
              }
            ]
          },
          "ClientId": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionClientId"
              },
              {
                "description": "The OAuth 2.0 client identifier."
              }
            ]
          },
          "ClientSecret": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionClientSecret"
              },
              {
                "description": "The OAuth 2.0 client secret. This parameter is required if you are creating a rule. If you are modifying a rule, you can omit this parameter if you set <code>UseExistingClientSecret</code> to true."
              }
            ]
          },
          "SessionCookieName": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionSessionCookieName"
              },
              {
                "description": "The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie."
              }
            ]
          },
          "Scope": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionScope"
              },
              {
                "description": "<p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p> <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>"
              }
            ]
          },
          "SessionTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionSessionTimeout"
              },
              {
                "description": "The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days)."
              }
            ]
          },
          "AuthenticationRequestExtraParams": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionAuthenticationRequestExtraParams"
              },
              {
                "description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint."
              }
            ]
          },
          "OnUnauthenticatedRequest": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionConditionalBehaviorEnum"
              },
              {
                "description": "<p>The behavior if the user is not authenticated. The following are possible values:</p> <ul> <li> <p>deny<code/> - Return an HTTP 401 Unauthorized error.</p> </li> <li> <p>allow<code/> - Allow the request to be forwarded to the target.</p> </li> <li> <p>authenticate<code/> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li> </ul>"
              }
            ]
          },
          "UseExistingClientSecret": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateOidcActionUseExistingClientSecret"
              },
              {
                "description": "Indicates whether to use the existing client secret when modifying a rule. If you are creating a rule, you can omit this parameter or set it to false."
              }
            ]
          }
        },
        "description": "Request parameters when using an identity provider (IdP) that is compliant with OpenID Connect (OIDC) to authenticate users."
      },
      "AuthenticateOidcActionIssuer": {
        "type": "string"
      },
      "AuthenticateOidcActionAuthorizationEndpoint": {
        "type": "string"
      },
      "AuthenticateOidcActionTokenEndpoint": {
        "type": "string"
      },
      "AuthenticateOidcActionUserInfoEndpoint": {
        "type": "string"
      },
      "AuthenticateOidcActionClientId": {
        "type": "string"
      },
      "AuthenticateOidcActionClientSecret": {
        "type": "string"
      },
      "AuthenticateOidcActionSessionCookieName": {
        "type": "string"
      },
      "AuthenticateOidcActionScope": {
        "type": "string"
      },
      "AuthenticateOidcActionSessionTimeout": {
        "type": "integer"
      },
      "AuthenticateOidcActionAuthenticationRequestExtraParams": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AuthenticateOidcActionAuthenticationRequestParamValue"
        }
      },
      "AuthenticateOidcActionAuthenticationRequestParamValue": {
        "type": "string"
      },
      "AuthenticateOidcActionConditionalBehaviorEnum": {
        "type": "string",
        "enum": [
          "deny",
          "allow",
          "authenticate"
        ]
      },
      "AuthenticateOidcActionUseExistingClientSecret": {
        "type": "boolean"
      },
      "AuthenticateCognitoActionConfig": {
        "type": "object",
        "required": [
          "UserPoolArn",
          "UserPoolClientId",
          "UserPoolDomain"
        ],
        "properties": {
          "UserPoolArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionUserPoolArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Amazon Cognito user pool."
              }
            ]
          },
          "UserPoolClientId": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionUserPoolClientId"
              },
              {
                "description": "The ID of the Amazon Cognito user pool client."
              }
            ]
          },
          "UserPoolDomain": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionUserPoolDomain"
              },
              {
                "description": "The domain prefix or fully-qualified domain name of the Amazon Cognito user pool."
              }
            ]
          },
          "SessionCookieName": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionSessionCookieName"
              },
              {
                "description": "The name of the cookie used to maintain session information. The default is AWSELBAuthSessionCookie."
              }
            ]
          },
          "Scope": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionScope"
              },
              {
                "description": "<p>The set of user claims to be requested from the IdP. The default is <code>openid</code>.</p> <p>To verify which scope values your IdP supports and how to separate multiple values, see the documentation for your IdP.</p>"
              }
            ]
          },
          "SessionTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionSessionTimeout"
              },
              {
                "description": "The maximum duration of the authentication session, in seconds. The default is 604800 seconds (7 days)."
              }
            ]
          },
          "AuthenticationRequestExtraParams": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionAuthenticationRequestExtraParams"
              },
              {
                "description": "The query parameters (up to 10) to include in the redirect request to the authorization endpoint."
              }
            ]
          },
          "OnUnauthenticatedRequest": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticateCognitoActionConditionalBehaviorEnum"
              },
              {
                "description": "<p>The behavior if the user is not authenticated. The following are possible values:</p> <ul> <li> <p>deny<code/> - Return an HTTP 401 Unauthorized error.</p> </li> <li> <p>allow<code/> - Allow the request to be forwarded to the target.</p> </li> <li> <p>authenticate<code/> - Redirect the request to the IdP authorization endpoint. This is the default value.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Request parameters to use when integrating with Amazon Cognito to authenticate users."
      },
      "AuthenticateCognitoActionUserPoolArn": {
        "type": "string"
      },
      "AuthenticateCognitoActionUserPoolClientId": {
        "type": "string"
      },
      "AuthenticateCognitoActionUserPoolDomain": {
        "type": "string"
      },
      "AuthenticateCognitoActionSessionCookieName": {
        "type": "string"
      },
      "AuthenticateCognitoActionScope": {
        "type": "string"
      },
      "AuthenticateCognitoActionSessionTimeout": {
        "type": "integer"
      },
      "AuthenticateCognitoActionAuthenticationRequestExtraParams": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/AuthenticateCognitoActionAuthenticationRequestParamValue"
        }
      },
      "AuthenticateCognitoActionAuthenticationRequestParamValue": {
        "type": "string"
      },
      "AuthenticateCognitoActionConditionalBehaviorEnum": {
        "type": "string",
        "enum": [
          "deny",
          "allow",
          "authenticate"
        ]
      },
      "ActionOrder": {
        "type": "integer",
        "minimum": 1,
        "maximum": 50000
      },
      "RedirectActionConfig": {
        "type": "object",
        "required": [
          "StatusCode"
        ],
        "properties": {
          "Protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionProtocol"
              },
              {
                "description": "The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to HTTP."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionPort"
              },
              {
                "description": "The port. You can specify a value from 1 to 65535 or #{port}."
              }
            ]
          },
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionHost"
              },
              {
                "description": "The hostname. This component is not percent-encoded. The hostname can contain #{host}."
              }
            ]
          },
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionPath"
              },
              {
                "description": "The absolute path, starting with the leading \"/\". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}."
              }
            ]
          },
          "Query": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionQuery"
              },
              {
                "description": "The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading \"?\", as it is automatically added. You can specify any of the reserved keywords."
              }
            ]
          },
          "StatusCode": {
            "allOf": [
              {
                "$ref": "#/$defs/RedirectActionStatusCodeEnum"
              },
              {
                "description": "The HTTP redirect code. The redirect is either permanent (HTTP 301) or temporary (HTTP 302)."
              }
            ]
          }
        },
        "description": "<p>Information about a redirect action.</p> <p>A URI consists of the following components: protocol://hostname:port/path?query. You must modify at least one of the following components to avoid a redirect loop: protocol, hostname, port, or path. Any components that you do not modify retain their original values.</p> <p>You can reuse URI components using the following reserved keywords:</p> <ul> <li> <p>#{protocol}</p> </li> <li> <p>#{host}</p> </li> <li> <p>#{port}</p> </li> <li> <p>#{path} (the leading \"/\" is removed)</p> </li> <li> <p>#{query}</p> </li> </ul> <p>For example, you can change the path to \"/new/#{path}\", the hostname to \"example.#{host}\", or the query to \"#{query}&amp;value=xyz\".</p>"
      },
      "RedirectActionProtocol": {
        "type": "string",
        "pattern": "^(HTTPS?|#\\{protocol\\})$"
      },
      "RedirectActionPort": {
        "type": "string"
      },
      "RedirectActionHost": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "RedirectActionPath": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "RedirectActionQuery": {
        "type": "string",
        "minLength": 0,
        "maxLength": 128
      },
      "RedirectActionStatusCodeEnum": {
        "type": "string",
        "enum": [
          "HTTP_301",
          "HTTP_302"
        ]
      },
      "FixedResponseActionConfig": {
        "type": "object",
        "required": [
          "StatusCode"
        ],
        "properties": {
          "MessageBody": {
            "allOf": [
              {
                "$ref": "#/$defs/FixedResponseActionMessage"
              },
              {
                "description": "The message."
              }
            ]
          },
          "StatusCode": {
            "allOf": [
              {
                "$ref": "#/$defs/FixedResponseActionStatusCode"
              },
              {
                "description": "The HTTP response code (2XX, 4XX, or 5XX)."
              }
            ]
          },
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/FixedResponseActionContentType"
              },
              {
                "description": "<p>The content type.</p> <p>Valid Values: text/plain | text/css | text/html | application/javascript | application/json</p>"
              }
            ]
          }
        },
        "description": "Information about an action that returns a custom HTTP response."
      },
      "FixedResponseActionMessage": {
        "type": "string",
        "minLength": 0,
        "maxLength": 1024
      },
      "FixedResponseActionStatusCode": {
        "type": "string",
        "pattern": "^(2|4|5)\\d\\d$"
      },
      "FixedResponseActionContentType": {
        "type": "string",
        "minLength": 0,
        "maxLength": 32
      },
      "ForwardActionConfig": {
        "type": "object",
        "properties": {
          "TargetGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupList"
              },
              {
                "description": "The target groups. For Network Load Balancers, you can specify a single target group."
              }
            ]
          },
          "TargetGroupStickinessConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupStickinessConfig"
              },
              {
                "description": "The target group stickiness for the rule."
              }
            ]
          }
        },
        "description": "Information about a forward action."
      },
      "TargetGroupList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetGroupTuple"
        }
      },
      "TargetGroupTuple": {
        "type": "object",
        "properties": {
          "TargetGroupArn": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the target group."
              }
            ]
          },
          "Weight": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupWeight"
              },
              {
                "description": "The weight. The range is 0 to 999."
              }
            ]
          }
        },
        "description": "Information about how traffic will be distributed between multiple target groups in a forward rule."
      },
      "TargetGroupWeight": {
        "type": "integer"
      },
      "TargetGroupStickinessConfig": {
        "type": "object",
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupStickinessEnabled"
              },
              {
                "description": "Indicates whether target group stickiness is enabled."
              }
            ]
          },
          "DurationSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupStickinessDurationSeconds"
              },
              {
                "description": "The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days)."
              }
            ]
          }
        },
        "description": "Information about the target group stickiness for a rule."
      },
      "TargetGroupStickinessEnabled": {
        "type": "boolean"
      },
      "TargetGroupStickinessDurationSeconds": {
        "type": "integer"
      },
      "AlpnPolicyValue": {
        "type": "string"
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key of the tag."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the tag."
              }
            ]
          }
        },
        "description": "Information about a tag."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://elasticloadbalancing.us-east-1.amazonaws.com/#Action=CreateListener{?LoadBalancerArn,Protocol,Port,SslPolicy,Certificates,DefaultActions,AlpnPolicy,Tags,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Listeners**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "491": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "492": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "493": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "494": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "495": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "496": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "497": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
