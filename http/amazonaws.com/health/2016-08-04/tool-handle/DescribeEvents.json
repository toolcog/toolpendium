{
  "name": "DescribeEvents",
  "description": "<p> Returns information about events that meet the specified filter criteria. Events are returned in a summary form and do not include the detailed description, any additional metadata that depends on the event type, or any affected resources. To retrieve that information, use the <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventDetails.html\">DescribeEventDetails</a> and <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeAffectedEntities.html\">DescribeAffectedEntities</a> operations.</p> <p>If no filter criteria are specified, all events are returned. Results are sorted by <code>lastModifiedTime</code>, starting with the most recent event.</p> <note> <ul> <li> <p>When you call the <code>DescribeEvents</code> operation and specify an entity for the <code>entityValues</code> parameter, Health might return public events that aren't specific to that resource. For example, if you call <code>DescribeEvents</code> and specify an ID for an Amazon Elastic Compute Cloud (Amazon EC2) instance, Health might return events that aren't specific to that resource or service. To get events that are specific to a service, use the <code>services</code> parameter in the <code>filter</code> object. For more information, see <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_Event.html\">Event</a>.</p> </li> <li> <p>This API operation uses pagination. Specify the <code>nextToken</code> parameter in the next request to return more results.</p> </li> </ul> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSHealth_20160804.DescribeEvents"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/DescribeEventsRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "DescribeEventsRequest": {
        "type": "object",
        "title": "DescribeEventsRequest",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/$defs/EventFilter"
              },
              {
                "description": "Values to narrow the results returned."
              }
            ]
          },
          "nextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/nextToken"
              },
              {
                "description": "If the results of a search are large, only a portion of the results are returned, and a <code>nextToken</code> pagination token is returned in the response. To retrieve the next batch of results, reissue the search request and include the returned token. When all results have been returned, the response does not contain a pagination token value."
              }
            ]
          },
          "maxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/maxResults"
              },
              {
                "description": "The maximum number of items to return in one batch, between 10 and 100, inclusive."
              }
            ]
          },
          "locale": {
            "allOf": [
              {
                "$ref": "#/$defs/locale"
              },
              {
                "description": "The locale (language) to return information in. English (en) is the default and the only supported value at this time."
              }
            ]
          }
        }
      },
      "EventFilter": {
        "type": "object",
        "properties": {
          "eventArns": {
            "allOf": [
              {
                "$ref": "#/$defs/eventArnList"
              },
              {
                "description": "A list of event ARNs (unique identifiers). For example: <code>\"arn:aws:health:us-east-1::event/EC2/EC2_INSTANCE_RETIREMENT_SCHEDULED/EC2_INSTANCE_RETIREMENT_SCHEDULED_ABC123-CDE456\", \"arn:aws:health:us-west-1::event/EBS/AWS_EBS_LOST_VOLUME/AWS_EBS_LOST_VOLUME_CHI789_JKL101\"</code> "
              }
            ]
          },
          "eventTypeCodes": {
            "allOf": [
              {
                "$ref": "#/$defs/eventTypeList"
              },
              {
                "description": "A list of unique identifiers for event types. For example, <code>\"AWS_EC2_SYSTEM_MAINTENANCE_EVENT\",\"AWS_RDS_MAINTENANCE_SCHEDULED\".</code> "
              }
            ]
          },
          "services": {
            "allOf": [
              {
                "$ref": "#/$defs/serviceList"
              },
              {
                "description": "The Amazon Web Services associated with the event. For example, <code>EC2</code>, <code>RDS</code>."
              }
            ]
          },
          "regions": {
            "allOf": [
              {
                "$ref": "#/$defs/regionList"
              },
              {
                "description": "A list of Amazon Web Services Regions."
              }
            ]
          },
          "availabilityZones": {
            "allOf": [
              {
                "$ref": "#/$defs/availabilityZones"
              },
              {
                "description": "A list of Amazon Web Services Availability Zones."
              }
            ]
          },
          "startTimes": {
            "allOf": [
              {
                "$ref": "#/$defs/dateTimeRangeList"
              },
              {
                "description": "A list of dates and times that the event began."
              }
            ]
          },
          "endTimes": {
            "allOf": [
              {
                "$ref": "#/$defs/dateTimeRangeList"
              },
              {
                "description": "A list of dates and times that the event ended."
              }
            ]
          },
          "lastUpdatedTimes": {
            "allOf": [
              {
                "$ref": "#/$defs/dateTimeRangeList"
              },
              {
                "description": "A list of dates and times that the event was last updated."
              }
            ]
          },
          "entityArns": {
            "allOf": [
              {
                "$ref": "#/$defs/entityArnList"
              },
              {
                "description": "A list of entity ARNs (unique identifiers)."
              }
            ]
          },
          "entityValues": {
            "allOf": [
              {
                "$ref": "#/$defs/entityValueList"
              },
              {
                "description": "A list of entity identifiers, such as EC2 instance IDs (<code>i-34ab692e</code>) or EBS volumes (<code>vol-426ab23e</code>)."
              }
            ]
          },
          "eventTypeCategories": {
            "allOf": [
              {
                "$ref": "#/$defs/eventTypeCategoryList"
              },
              {
                "description": "A list of event type category codes. Possible values are <code>issue</code>, <code>accountNotification</code>, or <code>scheduledChange</code>. Currently, the <code>investigation</code> value isn't supported at this time."
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/tagFilter"
              },
              {
                "description": "<p>A map of entity tags attached to the affected entity.</p> <note> <p>Currently, the <code>tags</code> property isn't supported.</p> </note>"
              }
            ]
          },
          "eventStatusCodes": {
            "allOf": [
              {
                "$ref": "#/$defs/eventStatusCodeList"
              },
              {
                "description": "A list of event status codes."
              }
            ]
          }
        },
        "description": "The values to use to filter results from the <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEvents.html\">DescribeEvents</a> and <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_DescribeEventAggregates.html\">DescribeEventAggregates</a> operations."
      },
      "eventArnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/eventArn"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "eventArn": {
        "type": "string",
        "pattern": "arn:aws(-[a-z]+(-[a-z]+)?)?:health:[^:]*:[^:]*:event(?:/[\\w-]+){3}",
        "maxLength": 1600
      },
      "eventTypeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/eventType"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "eventType": {
        "type": "string",
        "pattern": "[^:/]{3,100}",
        "minLength": 3,
        "maxLength": 100
      },
      "serviceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/service"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "service": {
        "type": "string",
        "pattern": "[^:/]{2,30}",
        "minLength": 2,
        "maxLength": 30
      },
      "regionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/region"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "region": {
        "type": "string",
        "pattern": "[^:/]{2,25}",
        "minLength": 2,
        "maxLength": 25
      },
      "availabilityZones": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/availabilityZone"
        }
      },
      "availabilityZone": {
        "type": "string",
        "pattern": "[a-z]{2}\\-[0-9a-z\\-]{4,16}",
        "minLength": 6,
        "maxLength": 18
      },
      "dateTimeRangeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DateTimeRange"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "DateTimeRange": {
        "type": "object",
        "properties": {
          "from": {
            "allOf": [
              {
                "$ref": "#/$defs/timestamp"
              },
              {
                "description": "The starting date and time of a time range."
              }
            ]
          },
          "to": {
            "allOf": [
              {
                "$ref": "#/$defs/timestamp"
              },
              {
                "description": "The ending date and time of a time range."
              }
            ]
          }
        },
        "description": "A range of dates and times that is used by the <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_EventFilter.html\">EventFilter</a> and <a href=\"https://docs.aws.amazon.com/health/latest/APIReference/API_EntityFilter.html\">EntityFilter</a> objects. If <code>from</code> is set and <code>to</code> is set: match items where the timestamp (<code>startTime</code>, <code>endTime</code>, or <code>lastUpdatedTime</code>) is between <code>from</code> and <code>to</code> inclusive. If <code>from</code> is set and <code>to</code> is not set: match items where the timestamp value is equal to or after <code>from</code>. If <code>from</code> is not set and <code>to</code> is set: match items where the timestamp value is equal to or before <code>to</code>."
      },
      "timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "entityArnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/entityArn"
        },
        "minItems": 1,
        "maxItems": 99
      },
      "entityArn": {
        "type": "string",
        "pattern": ".{0,1600}",
        "maxLength": 1600
      },
      "entityValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/entityValue"
        },
        "minItems": 1,
        "maxItems": 99
      },
      "entityValue": {
        "type": "string",
        "pattern": ".{0,1224}",
        "maxLength": 1224
      },
      "eventTypeCategoryList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/eventTypeCategory"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "eventTypeCategory": {
        "type": "string",
        "enum": [
          "issue",
          "accountNotification",
          "scheduledChange",
          "investigation"
        ],
        "minLength": 3,
        "maxLength": 255
      },
      "tagFilter": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/tagSet"
        },
        "maxItems": 50
      },
      "tagSet": {
        "type": "object",
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/tagValue"
        }
      },
      "tagValue": {
        "type": "string",
        "pattern": ".{0,255}",
        "maxLength": 255
      },
      "eventStatusCodeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/eventStatusCode"
        },
        "minItems": 1,
        "maxItems": 6
      },
      "eventStatusCode": {
        "type": "string",
        "enum": [
          "open",
          "closed",
          "upcoming"
        ]
      },
      "nextToken": {
        "type": "string",
        "pattern": "[a-zA-Z0-9=/+_.-]{4,10000}",
        "minLength": 4,
        "maxLength": 10000
      },
      "maxResults": {
        "type": "integer",
        "minimum": 10,
        "maximum": 100
      },
      "locale": {
        "type": "string",
        "pattern": ".{2,256}",
        "minLength": 2,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://health.us-east-1.amazonaws.com/#X-Amz-Target=AWSHealth_20160804.DescribeEvents{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**events**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
