{
  "name": "ListFindings",
  "description": "Lists findings that are generated by the assessment runs that are specified by the ARNs of the assessment runs.",
  "parameters": {
    "type": "object",
    "properties": {
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "InspectorService.ListFindings"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ListFindingsRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ListFindingsRequest": {
        "type": "object",
        "title": "ListFindingsRequest",
        "properties": {
          "assessmentRunArns": {
            "allOf": [
              {
                "$ref": "#/$defs/ListParentArnList"
              },
              {
                "description": "The ARNs of the assessment runs that generate the findings that you want to list."
              }
            ]
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/$defs/FindingFilter"
              },
              {
                "description": "<p>You can use this parameter to specify a subset of data to be included in the action's response.</p> <p>For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.</p>"
              }
            ]
          },
          "nextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/PaginationToken"
              },
              {
                "description": "You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the <b>ListFindings</b> action. Subsequent calls to the action fill <b>nextToken</b> in the request with the value of <b>NextToken</b> from the previous response to continue listing data."
              }
            ]
          },
          "maxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/ListMaxResults"
              },
              {
                "description": "You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500."
              }
            ]
          }
        }
      },
      "ListParentArnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Arn"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Arn": {
        "type": "string",
        "minLength": 1,
        "maxLength": 300
      },
      "FindingFilter": {
        "type": "object",
        "properties": {
          "agentIds": {
            "allOf": [
              {
                "$ref": "#/$defs/AgentIdList"
              },
              {
                "description": "For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>agentId</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "autoScalingGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoScalingGroupList"
              },
              {
                "description": "For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>autoScalingGroup</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "ruleNames": {
            "allOf": [
              {
                "$ref": "#/$defs/RuleNameList"
              },
              {
                "description": "For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>ruleName</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "severities": {
            "allOf": [
              {
                "$ref": "#/$defs/SeverityList"
              },
              {
                "description": "For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>severity</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "rulesPackageArns": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterRulesPackageArnList"
              },
              {
                "description": "For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the <b>rulesPackageArn</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeList"
              },
              {
                "description": "For a record to match a filter, the list of values that are specified for this data type property must be contained in the list of values of the <b>attributes</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "userAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeList"
              },
              {
                "description": "For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the <b>userAttributes</b> property of the <a>Finding</a> data type."
              }
            ]
          },
          "creationTimeRange": {
            "allOf": [
              {
                "$ref": "#/$defs/TimestampRange"
              },
              {
                "description": "The time range during which the finding is generated."
              }
            ]
          }
        },
        "description": "This data type is used as a request parameter in the <a>ListFindings</a> action."
      },
      "AgentIdList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AgentId"
        },
        "minItems": 0,
        "maxItems": 99
      },
      "AgentId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "AutoScalingGroupList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AutoScalingGroup"
        },
        "minItems": 0,
        "maxItems": 20
      },
      "AutoScalingGroup": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "RuleNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RuleName"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "RuleName": {
        "type": "string",
        "maxLength": 1000
      },
      "SeverityList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Severity"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Severity": {
        "type": "string",
        "enum": [
          "Low",
          "Medium",
          "High",
          "Informational",
          "Undefined"
        ]
      },
      "FilterRulesPackageArnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Arn"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "AttributeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Attribute"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Attribute": {
        "type": "object",
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeKey"
              },
              {
                "description": "The attribute key."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeValue"
              },
              {
                "description": "The value assigned to the attribute key."
              }
            ]
          }
        },
        "description": "This data type is used as a request parameter in the <a>AddAttributesToFindings</a> and <a>CreateAssessmentTemplate</a> actions."
      },
      "AttributeKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "AttributeValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "TimestampRange": {
        "type": "object",
        "properties": {
          "beginDate": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The minimum value of the timestamp range."
              }
            ]
          },
          "endDate": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The maximum value of the timestamp range."
              }
            ]
          }
        },
        "description": "This data type is used in the <a>AssessmentRunFilter</a> data type."
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "PaginationToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 300
      },
      "ListMaxResults": {
        "type": "integer"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://inspector.us-east-1.amazonaws.com/#X-Amz-Target=InspectorService.ListFindings{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**findingArns**",
            "**nextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
