{
  "name": "UpdateGraphqlApi",
  "description": "Updates a <code>GraphqlApi</code> object.",
  "parameters": {
    "type": "object",
    "properties": {
      "apiId": {
        "type": "string",
        "description": "The API ID."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "description": "The new name for the <code>GraphqlApi</code> object.",
            "type": "string"
          },
          "logConfig": {
            "description": "The Amazon CloudWatch Logs configuration.",
            "type": "object",
            "properties": {
              "fieldLogLevel": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FieldLogLevel"
                  },
                  {
                    "description": "<p>The field logging level. Values can be NONE, ERROR, or ALL.</p> <ul> <li> <p> <b>NONE</b>: No field-level logs are captured.</p> </li> <li> <p> <b>ERROR</b>: Logs the following information only for the fields that are in error:</p> <ul> <li> <p>The error section in the server response.</p> </li> <li> <p>Field-level errors.</p> </li> <li> <p>The generated request/response functions that got resolved for error fields.</p> </li> </ul> </li> <li> <p> <b>ALL</b>: The following information is logged for all fields in the query:</p> <ul> <li> <p>Field-level tracing information.</p> </li> <li> <p>The generated request/response functions that got resolved for each field.</p> </li> </ul> </li> </ul>"
                  }
                ]
              },
              "cloudWatchLogsRoleArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The service role that AppSync assumes to publish to CloudWatch logs in your account."
                  }
                ]
              },
              "excludeVerboseContent": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging level."
                  }
                ]
              }
            }
          },
          "authenticationType": {
            "description": "The new authentication type for the <code>GraphqlApi</code> object.",
            "type": "string",
            "enum": [
              "API_KEY",
              "AWS_IAM",
              "AMAZON_COGNITO_USER_POOLS",
              "OPENID_CONNECT",
              "AWS_LAMBDA"
            ]
          },
          "userPoolConfig": {
            "description": "Describes an Amazon Cognito user pool configuration.",
            "type": "object",
            "properties": {
              "userPoolId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The user pool ID."
                  }
                ]
              },
              "awsRegion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The Amazon Web Services Region in which the user pool was created."
                  }
                ]
              },
              "defaultAction": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DefaultAction"
                  },
                  {
                    "description": "The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool configuration."
                  }
                ]
              },
              "appIdClientRegex": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied."
                  }
                ]
              }
            }
          },
          "openIDConnectConfig": {
            "description": "Describes an OpenID Connect (OIDC) configuration.",
            "type": "object",
            "properties": {
              "issuer": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token."
                  }
                ]
              },
              "clientId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time."
                  }
                ]
              },
              "iatTTL": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Long"
                  },
                  {
                    "description": "The number of milliseconds that a token is valid after it's issued to a user."
                  }
                ]
              },
              "authTTL": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Long"
                  },
                  {
                    "description": "The number of milliseconds that a token is valid after being authenticated."
                  }
                ]
              }
            }
          },
          "additionalAuthenticationProviders": {
            "description": "A list of additional authentication providers for the <code>GraphqlApi</code> API.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/AdditionalAuthenticationProvider"
            }
          },
          "xrayEnabled": {
            "description": "A flag indicating whether to use X-Ray tracing for the <code>GraphqlApi</code>.",
            "type": "boolean"
          },
          "lambdaAuthorizerConfig": {
            "description": "A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time.",
            "type": "object",
            "properties": {
              "authorizerResultTtlInSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TTL"
                  },
                  {
                    "description": "The number of seconds a response should be cached for. The default is 0 seconds, which disables caching. If you don't specify a value for <code>authorizerResultTtlInSeconds</code>, the default value is used. The maximum value is one hour (3600 seconds). The Lambda function can override this by returning a <code>ttlOverride</code> key in its response."
                  }
                ]
              },
              "authorizerUri": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "<p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda add-permission --function-name \"arn:aws:lambda:us-east-2:111122223333:function:my-function\" --statement-id \"appsync\" --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>"
                  }
                ]
              },
              "identityValidationExpression": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "A regular expression for validation of tokens before the Lambda function is called."
                  }
                ]
              }
            }
          },
          "mergedApiExecutionRoleArn": {
            "description": "The Identity and Access Management service role ARN for a merged API. The AppSync service assumes this role on behalf of the Merged API to validate access to source APIs at runtime and to prompt the <code>AUTO_MERGE</code> to update the merged API endpoint with the source API changes automatically.",
            "type": "string"
          },
          "ownerContact": {
            "description": "<p>The owner contact information for an API resource.</p> <p>This field accepts any string input with a length of 0 - 256 characters.</p>",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "apiId",
      "body"
    ],
    "$defs": {
      "FieldLogLevel": {
        "type": "string",
        "enum": [
          "NONE",
          "ERROR",
          "ALL"
        ]
      },
      "String": {
        "type": "string"
      },
      "Boolean": {
        "type": "boolean"
      },
      "DefaultAction": {
        "type": "string",
        "enum": [
          "ALLOW",
          "DENY"
        ]
      },
      "Long": {
        "type": "integer"
      },
      "AdditionalAuthenticationProvider": {
        "type": "object",
        "properties": {
          "authenticationType": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticationType"
              },
              {
                "description": "The authentication type: API key, Identity and Access Management (IAM), OpenID Connect (OIDC), Amazon Cognito user pools, or Lambda."
              }
            ]
          },
          "openIDConnectConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/OpenIDConnectConfig"
              },
              {
                "description": "The OIDC configuration."
              }
            ]
          },
          "userPoolConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/CognitoUserPoolConfig"
              },
              {
                "description": "The Amazon Cognito user pool configuration."
              }
            ]
          },
          "lambdaAuthorizerConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaAuthorizerConfig"
              },
              {
                "description": "Configuration for Lambda function authorization."
              }
            ]
          }
        },
        "description": "Describes an additional authentication provider."
      },
      "AuthenticationType": {
        "type": "string",
        "enum": [
          "API_KEY",
          "AWS_IAM",
          "AMAZON_COGNITO_USER_POOLS",
          "OPENID_CONNECT",
          "AWS_LAMBDA"
        ]
      },
      "OpenIDConnectConfig": {
        "type": "object",
        "required": [
          "issuer"
        ],
        "properties": {
          "issuer": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The issuer for the OIDC configuration. The issuer returned by discovery must exactly match the value of <code>iss</code> in the ID token."
              }
            ]
          },
          "clientId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The client identifier of the relying party at the OpenID identity provider. This identifier is typically obtained when the relying party is registered with the OpenID identity provider. You can specify a regular expression so that AppSync can validate against multiple client identifiers at a time."
              }
            ]
          },
          "iatTTL": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "The number of milliseconds that a token is valid after it's issued to a user."
              }
            ]
          },
          "authTTL": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "The number of milliseconds that a token is valid after being authenticated."
              }
            ]
          }
        },
        "description": "Describes an OpenID Connect (OIDC) configuration."
      },
      "CognitoUserPoolConfig": {
        "type": "object",
        "required": [
          "userPoolId",
          "awsRegion"
        ],
        "properties": {
          "userPoolId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The user pool ID."
              }
            ]
          },
          "awsRegion": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The Amazon Web Services Region in which the user pool was created."
              }
            ]
          },
          "appIdClientRegex": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A regular expression for validating the incoming Amazon Cognito user pool app client ID. If this value isn't set, no filtering is applied."
              }
            ]
          }
        },
        "description": "Describes an Amazon Cognito user pool configuration."
      },
      "LambdaAuthorizerConfig": {
        "type": "object",
        "required": [
          "authorizerUri"
        ],
        "properties": {
          "authorizerResultTtlInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/TTL"
              },
              {
                "description": "The number of seconds a response should be cached for. The default is 0 seconds, which disables caching. If you don't specify a value for <code>authorizerResultTtlInSeconds</code>, the default value is used. The maximum value is one hour (3600 seconds). The Lambda function can override this by returning a <code>ttlOverride</code> key in its response."
              }
            ]
          },
          "authorizerUri": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The Amazon Resource Name (ARN) of the Lambda function to be called for authorization. This can be a standard Lambda ARN, a version ARN (<code>.../v3</code>), or an alias ARN. </p> <p> <b>Note</b>: This Lambda function must have the following resource-based policy assigned to it. When configuring Lambda authorizers in the console, this is done for you. To use the Command Line Interface (CLI), run the following:</p> <p> <code>aws lambda add-permission --function-name \"arn:aws:lambda:us-east-2:111122223333:function:my-function\" --statement-id \"appsync\" --principal appsync.amazonaws.com --action lambda:InvokeFunction</code> </p>"
              }
            ]
          },
          "identityValidationExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A regular expression for validation of tokens before the Lambda function is called."
              }
            ]
          }
        },
        "description": "A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a time."
      },
      "TTL": {
        "type": "integer",
        "minimum": 0,
        "maximum": 3600
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://appsync.us-east-1.amazonaws.com/v1/apis/{apiId}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**graphqlApi**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
