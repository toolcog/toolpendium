{
  "name": "RegisterContainerInstance",
  "description": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Registers an EC2 instance into the specified cluster. This instance becomes available to place containers on.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonEC2ContainerServiceV20141113.RegisterContainerInstance"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/RegisterContainerInstanceRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "RegisterContainerInstanceRequest": {
        "type": "object",
        "title": "RegisterContainerInstanceRequest",
        "properties": {
          "cluster": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The short name or full Amazon Resource Name (ARN) of the cluster to register your container instance with. If you do not specify a cluster, the default cluster is assumed."
              }
            ]
          },
          "instanceIdentityDocument": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The instance identity document for the EC2 instance to register. This document can be found by running the following command from the instance: <code>curl http://169.254.169.254/latest/dynamic/instance-identity/document/</code> "
              }
            ]
          },
          "instanceIdentityDocumentSignature": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The instance identity document signature for the EC2 instance to register. This signature can be found by running the following command from the instance: <code>curl http://169.254.169.254/latest/dynamic/instance-identity/signature/</code> "
              }
            ]
          },
          "totalResources": {
            "allOf": [
              {
                "$ref": "#/$defs/Resources"
              },
              {
                "description": "The resources available on the instance."
              }
            ]
          },
          "versionInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionInfo"
              },
              {
                "description": "The version information for the Amazon ECS container agent and Docker daemon that runs on the container instance."
              }
            ]
          },
          "containerInstanceArn": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The ARN of the container instance (if it was previously registered)."
              }
            ]
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/$defs/Attributes"
              },
              {
                "description": "The container instance attributes that this container instance supports."
              }
            ]
          },
          "platformDevices": {
            "allOf": [
              {
                "$ref": "#/$defs/PlatformDevices"
              },
              {
                "description": "The devices that are available on the container instance. The only supported device type is a GPU."
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/Tags"
              },
              {
                "description": "<p>The metadata that you apply to the container instance to help you categorize and organize them. Each tag consists of a key and an optional value. You define both.</p> <p>The following basic restrictions apply to tags:</p> <ul> <li> <p>Maximum number of tags per resource - 50</p> </li> <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li> <li> <p>Maximum key length - 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length - 256 Unicode characters in UTF-8</p> </li> <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li> <li> <p>Tag keys and values are case-sensitive.</p> </li> <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.</p> </li> </ul>"
              }
            ]
          }
        }
      },
      "String": {
        "type": "string"
      },
      "Resources": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Resource"
        }
      },
      "Resource": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the resource, such as <code>CPU</code>, <code>MEMORY</code>, <code>PORTS</code>, <code>PORTS_UDP</code>, or a user-defined resource."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The type of the resource. Valid values: <code>INTEGER</code>, <code>DOUBLE</code>, <code>LONG</code>, or <code>STRINGSET</code>."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "When the <code>doubleValue</code> type is set, the value of the resource must be a double precision floating-point type."
              }
            ]
          },
          "longValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "When the <code>longValue</code> type is set, the value of the resource must be an extended precision floating-point type."
              }
            ]
          },
          "integerValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "When the <code>integerValue</code> type is set, the value of the resource must be an integer."
              }
            ]
          },
          "stringSetValue": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "When the <code>stringSetValue</code> type is set, the value of the resource must be a string type."
              }
            ]
          }
        },
        "description": "Describes the resources available for a container instance."
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "Long": {
        "type": "integer"
      },
      "Integer": {
        "type": "integer"
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "VersionInfo": {
        "type": "object",
        "properties": {
          "agentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The version number of the Amazon ECS container agent."
              }
            ]
          },
          "agentHash": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The Git commit hash for the Amazon ECS container agent build on the <a href=\"https://github.com/aws/amazon-ecs-agent/commits/master\">amazon-ecs-agent </a> GitHub repository."
              }
            ]
          },
          "dockerVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The Docker version that's running on the container instance."
              }
            ]
          }
        },
        "description": "The Docker and Amazon ECS container agent version information about a container instance."
      },
      "Attributes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Attribute"
        }
      },
      "Attribute": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the attribute. The <code>name</code> must contain between 1 and 128 characters. The name may contain letters (uppercase and lowercase), numbers, hyphens (-), underscores (_), forward slashes (/), back slashes (\\), or periods (.)."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value of the attribute. The <code>value</code> must contain between 1 and 128 characters. It can contain letters (uppercase and lowercase), numbers, hyphens (-), underscores (_), periods (.), at signs (@), forward slashes (/), back slashes (\\), colons (:), or spaces. The value can't start or end with a space."
              }
            ]
          },
          "targetType": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetType"
              },
              {
                "description": "The type of the target to attach the attribute with. This parameter is required if you use the short form ID for a resource instead of the full ARN."
              }
            ]
          },
          "targetId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The ID of the target. You can specify the short form ID for a resource or the full Amazon Resource Name (ARN)."
              }
            ]
          }
        },
        "description": "An attribute is a name-value pair that's associated with an Amazon ECS object. Use attributes to extend the Amazon ECS data model by adding custom metadata to your resources. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-placement-constraints.html#attributes\">Attributes</a> in the <i>Amazon Elastic Container Service Developer Guide</i>."
      },
      "TargetType": {
        "type": "string",
        "enum": [
          "container-instance"
        ]
      },
      "PlatformDevices": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PlatformDevice"
        }
      },
      "PlatformDevice": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The ID for the GPUs on the container instance. The available GPU IDs can also be obtained on the container instance in the <code>/var/lib/ecs/gpu/nvidia_gpu_info.json</code> file."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/PlatformDeviceType"
              },
              {
                "description": "The type of device that's available on the container instance. The only supported value is <code>GPU</code>."
              }
            ]
          }
        },
        "description": "The devices that are available on the container instance. The only supported device type is a GPU."
      },
      "PlatformDeviceType": {
        "type": "string",
        "enum": [
          "GPU"
        ]
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key)."
              }
            ]
          }
        },
        "description": "<p>The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value. You define them.</p> <p>The following basic restrictions apply to tags:</p> <ul> <li> <p>Maximum number of tags per resource - 50</p> </li> <li> <p>For each resource, each tag key must be unique, and each tag key can have only one value.</p> </li> <li> <p>Maximum key length - 128 Unicode characters in UTF-8</p> </li> <li> <p>Maximum value length - 256 Unicode characters in UTF-8</p> </li> <li> <p>If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - = . _ : / @.</p> </li> <li> <p>Tag keys and values are case-sensitive.</p> </li> <li> <p>Do not use <code>aws:</code>, <code>AWS:</code>, or any upper or lowercase combination of such as a prefix for either keys or values as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys or values with this prefix. Tags with this prefix do not count against your tags per resource limit.</p> </li> </ul>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ecs.us-east-1.amazonaws.com/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.RegisterContainerInstance"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**containerInstance**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
