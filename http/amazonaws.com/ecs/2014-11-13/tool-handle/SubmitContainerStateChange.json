{
  "name": "SubmitContainerStateChange",
  "description": "<note> <p>This action is only used by the Amazon ECS agent, and it is not intended for use outside of the agent.</p> </note> <p>Sent to acknowledge that a container changed states.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/SubmitContainerStateChangeRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "SubmitContainerStateChangeRequest": {
        "type": "object",
        "title": "SubmitContainerStateChangeRequest",
        "properties": {
          "cluster": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The short name or full ARN of the cluster that hosts the container."
              }
            ]
          },
          "task": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The task ID or full Amazon Resource Name (ARN) of the task that hosts the container."
              }
            ]
          },
          "containerName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the container."
              }
            ]
          },
          "runtimeId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The ID of the Docker container."
              }
            ]
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The status of the state change request."
              }
            ]
          },
          "exitCode": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedInteger"
              },
              {
                "description": "The exit code that's returned for the state change request."
              }
            ]
          },
          "reason": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The reason for the state change request."
              }
            ]
          },
          "networkBindings": {
            "allOf": [
              {
                "$ref": "#/$defs/NetworkBindings"
              },
              {
                "description": "The network bindings of the container."
              }
            ]
          }
        }
      },
      "String": {
        "type": "string"
      },
      "BoxedInteger": {
        "type": "integer"
      },
      "NetworkBindings": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NetworkBinding"
        }
      },
      "NetworkBinding": {
        "type": "object",
        "properties": {
          "bindIP": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The IP address that the container is bound to on the container instance."
              }
            ]
          },
          "containerPort": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedInteger"
              },
              {
                "description": "The port number on the container that's used with the network binding."
              }
            ]
          },
          "hostPort": {
            "allOf": [
              {
                "$ref": "#/$defs/BoxedInteger"
              },
              {
                "description": "The port number on the host that's used with the network binding."
              }
            ]
          },
          "protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/TransportProtocol"
              },
              {
                "description": "The protocol used for the network binding."
              }
            ]
          },
          "containerPortRange": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The port number range on the container that's bound to the dynamically mapped host port range.</p> <p>The following rules apply when you specify a <code>containerPortRange</code>:</p> <ul> <li> <p>You must use either the <code>bridge</code> network mode or the <code>awsvpc</code> network mode.</p> </li> <li> <p>This parameter is available for both the EC2 and Fargate launch types.</p> </li> <li> <p>This parameter is available for both the Linux and Windows operating systems.</p> </li> <li> <p>The container instance must have at least version 1.67.0 of the container agent and at least version 1.67.0-1 of the <code>ecs-init</code> package </p> </li> <li> <p>You can specify a maximum of 100 port ranges per container.</p> </li> <li> <p>You do not specify a <code>hostPortRange</code>. The value of the <code>hostPortRange</code> is set as follows:</p> <ul> <li> <p>For containers in a task with the <code>awsvpc</code> network mode, the <code>hostPort</code> is set to the same value as the <code>containerPort</code>. This is a static mapping strategy.</p> </li> <li> <p>For containers in a task with the <code>bridge</code> network mode, the Amazon ECS agent finds open host ports from the default ephemeral range and passes it to docker to bind them to the container ports.</p> </li> </ul> </li> <li> <p>The <code>containerPortRange</code> valid values are between 1 and 65535.</p> </li> <li> <p>A port can only be included in one port mapping per container.</p> </li> <li> <p>You cannot specify overlapping port ranges.</p> </li> <li> <p>The first port in the range must be less than last port in the range.</p> </li> <li> <p>Docker recommends that you turn off the docker-proxy in the Docker daemon config file when you have a large number of ports.</p> <p>For more information, see <a href=\"https://github.com/moby/moby/issues/11185\"> Issue #11185</a> on the Github website.</p> <p>For information about how to turn off the docker-proxy in the Docker daemon config file, see <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon\">Docker daemon</a> in the <i>Amazon ECS Developer Guide</i>.</p> </li> </ul> <p>You can call <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html\"> <code>DescribeTasks</code> </a> to view the <code>hostPortRange</code> which are the host ports that are bound to the container ports.</p>"
              }
            ]
          },
          "hostPortRange": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The port number range on the host that's used with the network binding. This is assigned is assigned by Docker and delivered by the Amazon ECS agent."
              }
            ]
          }
        },
        "description": "Details on the network bindings between a container and its host container instance. After a task reaches the <code>RUNNING</code> status, manual and automatic host and container port assignments are visible in the <code>networkBindings</code> section of <a>DescribeTasks</a> API responses."
      },
      "TransportProtocol": {
        "type": "string",
        "enum": [
          "tcp",
          "udp"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ecs.us-east-1.amazonaws.com/#X-Amz-Target=AmazonEC2ContainerServiceV20141113.SubmitContainerStateChange"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**acknowledgment**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
