{
  "name": "CreateDirectoryConfig",
  "description": "Creates a Directory Config object in AppStream 2.0. This object includes the configuration information required to join fleets and image builders to Microsoft Active Directory domains.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "PhotonAdminProxyService.CreateDirectoryConfig"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateDirectoryConfigRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateDirectoryConfigRequest": {
        "type": "object",
        "required": [
          "DirectoryName",
          "OrganizationalUnitDistinguishedNames"
        ],
        "title": "CreateDirectoryConfigRequest",
        "properties": {
          "DirectoryName": {
            "allOf": [
              {
                "$ref": "#/$defs/DirectoryName"
              },
              {
                "description": "The fully qualified name of the directory (for example, corp.example.com)."
              }
            ]
          },
          "OrganizationalUnitDistinguishedNames": {
            "allOf": [
              {
                "$ref": "#/$defs/OrganizationalUnitDistinguishedNamesList"
              },
              {
                "description": "The distinguished names of the organizational units for computer accounts."
              }
            ]
          },
          "ServiceAccountCredentials": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceAccountCredentials"
              },
              {
                "description": "The credentials for the service account used by the fleet or image builder to connect to the directory."
              }
            ]
          },
          "CertificateBasedAuthProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateBasedAuthProperties"
              },
              {
                "description": "The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates."
              }
            ]
          }
        }
      },
      "DirectoryName": {
        "type": "string"
      },
      "OrganizationalUnitDistinguishedNamesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/OrganizationalUnitDistinguishedName"
        }
      },
      "OrganizationalUnitDistinguishedName": {
        "type": "string",
        "maxLength": 2000
      },
      "ServiceAccountCredentials": {
        "type": "object",
        "required": [
          "AccountName",
          "AccountPassword"
        ],
        "properties": {
          "AccountName": {
            "allOf": [
              {
                "$ref": "#/$defs/AccountName"
              },
              {
                "description": "The user name of the account. This account must have the following privileges: create computer objects, join computers to the domain, and change/reset the password on descendant computer objects for the organizational units specified."
              }
            ]
          },
          "AccountPassword": {
            "allOf": [
              {
                "$ref": "#/$defs/AccountPassword"
              },
              {
                "description": "The password for the account."
              }
            ]
          }
        },
        "description": "Describes the credentials for the service account used by the fleet or image builder to connect to the directory."
      },
      "AccountName": {
        "type": "string",
        "minLength": 1,
        "format": "password"
      },
      "AccountPassword": {
        "type": "string",
        "minLength": 1,
        "maxLength": 127,
        "format": "password"
      },
      "CertificateBasedAuthProperties": {
        "type": "object",
        "properties": {
          "Status": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateBasedAuthStatus"
              },
              {
                "description": "The status of the certificate-based authentication properties."
              }
            ]
          },
          "CertificateAuthorityArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The ARN of the AWS Certificate Manager Private CA resource."
              }
            ]
          }
        },
        "description": "The certificate-based authentication properties used to authenticate SAML 2.0 Identity Provider (IdP) user identities to Active Directory domain-joined streaming instances. Fallback is turned on by default when certificate-based authentication is <b>Enabled</b> . Fallback allows users to log in using their AD domain password if certificate-based authentication is unsuccessful, or to unlock a desktop lock screen. <b>Enabled_no_directory_login_fallback</b> enables certificate-based authentication, but does not allow users to log in using their AD domain password. Users will be disconnected to re-authenticate using certificates."
      },
      "CertificateBasedAuthStatus": {
        "type": "string",
        "enum": [
          "DISABLED",
          "ENABLED",
          "ENABLED_NO_DIRECTORY_LOGIN_FALLBACK"
        ]
      },
      "Arn": {
        "type": "string",
        "pattern": "^arn:aws(?:\\-cn|\\-iso\\-b|\\-iso|\\-us\\-gov)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.\\\\-]{0,1023}$"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://appstream2.us-east-1.amazonaws.com/#X-Amz-Target=PhotonAdminProxyService.CreateDirectoryConfig"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**DirectoryConfig**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
