{
  "name": "CreateHIT",
  "description": "<p>The <code>CreateHIT</code> operation creates a new Human Intelligence Task (HIT). The new HIT is made available for Workers to find and accept on the Amazon Mechanical Turk website. </p> <p> This operation allows you to specify a new HIT by passing in values for the properties of the HIT, such as its title, reward amount and number of assignments. When you pass these values to <code>CreateHIT</code>, a new HIT is created for you, with a new <code>HITTypeID</code>. The HITTypeID can be used to create additional HITs in the future without needing to specify common parameters such as the title, description and reward amount each time.</p> <p> An alternative way to create HITs is to first generate a HITTypeID using the <code>CreateHITType</code> operation and then call the <code>CreateHITWithHITType</code> operation. This is the recommended best practice for Requesters who are creating large numbers of HITs. </p> <p>CreateHIT also supports several ways to provide question data: by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT, or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>. </p> <note> <p> If a HIT is created with 10 or more maximum assignments, there is an additional fee. For more information, see <a href=\"https://requester.mturk.com/pricing\">Amazon Mechanical Turk Pricing</a>.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "MTurkRequesterServiceV20170117.CreateHIT"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateHITRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateHITRequest": {
        "type": "object",
        "required": [
          "LifetimeInSeconds",
          "AssignmentDurationInSeconds",
          "Reward",
          "Title",
          "Description"
        ],
        "title": "CreateHITRequest",
        "properties": {
          "MaxAssignments": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": " The number of times the HIT can be accepted and completed before the HIT becomes unavailable. "
              }
            ]
          },
          "AutoApprovalDelayInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": " The number of seconds after an assignment for the HIT has been submitted, after which the assignment is considered Approved automatically unless the Requester explicitly rejects it. "
              }
            ]
          },
          "LifetimeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": " An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. "
              }
            ]
          },
          "AssignmentDurationInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": " The amount of time, in seconds, that a Worker has to complete the HIT after accepting it. If a Worker does not complete the assignment within the specified duration, the assignment is considered abandoned. If the HIT is still active (that is, its lifetime has not elapsed), the assignment becomes available for other users to find and accept. "
              }
            ]
          },
          "Reward": {
            "allOf": [
              {
                "$ref": "#/$defs/CurrencyAmount"
              },
              {
                "description": " The amount of money the Requester will pay a Worker for successfully completing the HIT. "
              }
            ]
          },
          "Title": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT title appears in search results, and everywhere the HIT is mentioned. "
              }
            ]
          },
          "Keywords": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " One or more words or phrases that describe the HIT, separated by commas. These words are used in searches to find HITs. "
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " A general description of the HIT. A description includes detailed information about the kind of task the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded view of search results, and in the HIT and assignment screens. A good description gives the user enough information to evaluate the HIT before accepting it. "
              }
            ]
          },
          "Question": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p> The data the person completing the HIT uses to produce the results. </p> <p> Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. </p> <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>"
              }
            ]
          },
          "RequesterAnnotation": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p> An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. </p> <p> The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. </p> <p> The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. </p>"
              }
            ]
          },
          "QualificationRequirements": {
            "allOf": [
              {
                "$ref": "#/$defs/QualificationRequirementList"
              },
              {
                "description": " Conditions that a Worker's Qualifications must meet in order to accept the HIT. A HIT can have between zero and ten Qualification requirements. All requirements must be met in order for a Worker to accept the HIT. Additionally, other actions can be restricted using the <code>ActionsGuarded</code> field on each <code>QualificationRequirement</code> structure. "
              }
            ]
          },
          "UniqueRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyToken"
              },
              {
                "description": "<p> A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. </p> <note> <p> Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs. </p> </note>"
              }
            ]
          },
          "AssignmentReviewPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ReviewPolicy"
              },
              {
                "description": " The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. "
              }
            ]
          },
          "HITReviewPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ReviewPolicy"
              },
              {
                "description": " The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. "
              }
            ]
          },
          "HITLayoutId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "<p> The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. </p> <p> Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. </p>"
              }
            ]
          },
          "HITLayoutParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/HITLayoutParameterList"
              },
              {
                "description": " If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. "
              }
            ]
          }
        }
      },
      "Integer": {
        "type": "integer"
      },
      "Long": {
        "type": "integer"
      },
      "CurrencyAmount": {
        "type": "string",
        "pattern": "^[0-9]+(\\.)?[0-9]{0,2}$",
        "description": "A string representing a currency amount."
      },
      "String": {
        "type": "string"
      },
      "QualificationRequirementList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/QualificationRequirement"
        }
      },
      "QualificationRequirement": {
        "type": "object",
        "required": [
          "QualificationTypeId",
          "Comparator"
        ],
        "properties": {
          "QualificationTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " The ID of the Qualification type for the requirement."
              }
            ]
          },
          "Comparator": {
            "allOf": [
              {
                "$ref": "#/$defs/Comparator"
              },
              {
                "description": "The kind of comparison to make against a Qualification's value. You can compare a Qualification's value to an IntegerValue to see if it is LessThan, LessThanOrEqualTo, GreaterThan, GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue. You can compare it to a LocaleValue to see if it is EqualTo, or NotEqualTo the LocaleValue. You can check to see if the value is In or NotIn a set of IntegerValue or LocaleValue values. Lastly, a Qualification requirement can also test if a Qualification Exists or DoesNotExist in the user's profile, regardless of its value. "
              }
            ]
          },
          "IntegerValues": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerList"
              },
              {
                "description": " The integer value to compare against the Qualification's value. IntegerValue must not be present if Comparator is Exists or DoesNotExist. IntegerValue can only be used if the Qualification type has an integer value; it cannot be used with the Worker_Locale QualificationType ID. When performing a set comparison by using the In or the NotIn comparator, you can use up to 15 IntegerValue elements in a QualificationRequirement data structure. "
              }
            ]
          },
          "LocaleValues": {
            "allOf": [
              {
                "$ref": "#/$defs/LocaleList"
              },
              {
                "description": " The locale value to compare against the Qualification's value. The local value must be a valid ISO 3166 country code or supports ISO 3166-2 subdivisions. LocaleValue can only be used with a Worker_Locale QualificationType ID. LocaleValue can only be used with the EqualTo, NotEqualTo, In, and NotIn comparators. You must only use a single LocaleValue element when using the EqualTo or NotEqualTo comparators. When performing a set comparison by using the In or the NotIn comparator, you can use up to 30 LocaleValue elements in a QualificationRequirement data structure. "
              }
            ]
          },
          "RequiredToPreview": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "deprecated": true,
                "description": " DEPRECATED: Use the <code>ActionsGuarded</code> field instead. If RequiredToPreview is true, the question data for the HIT will not be shown when a Worker whose Qualifications do not meet this requirement tries to preview the HIT. That is, a Worker's Qualifications must meet all of the requirements for which RequiredToPreview is true in order to preview the HIT. If a Worker meets all of the requirements where RequiredToPreview is true (or if there are no such requirements), but does not meet all of the requirements for the HIT, the Worker will be allowed to preview the HIT's question data, but will not be allowed to accept and complete the HIT. The default is false. This should not be used in combination with the <code>ActionsGuarded</code> field. "
              }
            ]
          },
          "ActionsGuarded": {
            "allOf": [
              {
                "$ref": "#/$defs/HITAccessActions"
              },
              {
                "description": " Setting this attribute prevents Workers whose Qualifications do not meet this QualificationRequirement from taking the specified action. Valid arguments include \"Accept\" (Worker cannot accept the HIT, but can preview the HIT and see it in their search results), \"PreviewAndAccept\" (Worker cannot accept or preview the HIT, but can see the HIT in their search results), and \"DiscoverPreviewAndAccept\" (Worker cannot accept, preview, or see the HIT in their search results). It's possible for you to create a HIT with multiple QualificationRequirements (which can have different values for the ActionGuarded attribute). In this case, the Worker is only permitted to perform an action when they have met all QualificationRequirements guarding the action. The actions in the order of least restrictive to most restrictive are Discover, Preview and Accept. For example, if a Worker meets all QualificationRequirements that are set to DiscoverPreviewAndAccept, but do not meet all requirements that are set with PreviewAndAccept, then the Worker will be able to Discover, i.e. see the HIT in their search result, but will not be able to Preview or Accept the HIT. ActionsGuarded should not be used in combination with the <code>RequiredToPreview</code> field. "
              }
            ]
          }
        },
        "description": " The QualificationRequirement data structure describes a Qualification that a Worker must have before the Worker is allowed to accept a HIT. A requirement may optionally state that a Worker must have the Qualification in order to preview the HIT, or see the HIT in search results. "
      },
      "Comparator": {
        "type": "string",
        "enum": [
          "LessThan",
          "LessThanOrEqualTo",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "EqualTo",
          "NotEqualTo",
          "Exists",
          "DoesNotExist",
          "In",
          "NotIn"
        ]
      },
      "IntegerList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Integer"
        }
      },
      "LocaleList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Locale"
        }
      },
      "Locale": {
        "type": "object",
        "required": [
          "Country"
        ],
        "properties": {
          "Country": {
            "allOf": [
              {
                "$ref": "#/$defs/CountryParameters"
              },
              {
                "description": " The country of the locale. Must be a valid ISO 3166 country code. For example, the code US refers to the United States of America. "
              }
            ]
          },
          "Subdivision": {
            "allOf": [
              {
                "$ref": "#/$defs/CountryParameters"
              },
              {
                "description": "The state or subdivision of the locale. A valid ISO 3166-2 subdivision code. For example, the code WA refers to the state of Washington."
              }
            ]
          }
        },
        "description": "The Locale data structure represents a geographical region or location."
      },
      "CountryParameters": {
        "type": "string",
        "minLength": 2,
        "maxLength": 2
      },
      "Boolean": {
        "type": "boolean"
      },
      "HITAccessActions": {
        "type": "string",
        "enum": [
          "Accept",
          "PreviewAndAccept",
          "DiscoverPreviewAndAccept"
        ]
      },
      "IdempotencyToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "ReviewPolicy": {
        "type": "object",
        "required": [
          "PolicyName"
        ],
        "properties": {
          "PolicyName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 "
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyParameterList"
              },
              {
                "description": "Name of the parameter from the Review policy."
              }
            ]
          }
        },
        "description": " HIT Review Policy data structures represent HIT review policies, which you specify when you create a HIT. "
      },
      "PolicyParameterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PolicyParameter"
        }
      },
      "PolicyParameter": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " Name of the parameter from the list of Review Polices. "
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": " The list of values of the Parameter"
              }
            ]
          },
          "MapEntries": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterMapEntryList"
              },
              {
                "description": " List of ParameterMapEntry objects. "
              }
            ]
          }
        },
        "description": " Name of the parameter from the Review policy. "
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "ParameterMapEntryList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ParameterMapEntry"
        }
      },
      "ParameterMapEntry": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " The QuestionID from the HIT that is used to identify which question requires Mechanical Turk to score as part of the ScoreMyKnownAnswers/2011-09-01 Review Policy. "
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": " The list of answers to the question specified in the MapEntry Key element. The Worker must match all values in order for the answer to be scored correctly. "
              }
            ]
          }
        },
        "description": " This data structure is the data type for the AnswerKey parameter of the ScoreMyKnownAnswers/2011-09-01 Review Policy. "
      },
      "EntityId": {
        "type": "string",
        "pattern": "^[A-Z0-9]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "HITLayoutParameterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HITLayoutParameter"
        }
      },
      "HITLayoutParameter": {
        "type": "object",
        "required": [
          "Name",
          "Value"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " The name of the parameter in the HITLayout. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value substituted for the parameter referenced in the HITLayout. "
              }
            ]
          }
        },
        "description": " The HITLayoutParameter data structure defines parameter values used with a HITLayout. A HITLayout is a reusable Amazon Mechanical Turk project template used to provide Human Intelligence Task (HIT) question data for CreateHIT. "
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mturk-requester.us-east-1.amazonaws.com/#X-Amz-Target=MTurkRequesterServiceV20170117.CreateHIT"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**HIT**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
