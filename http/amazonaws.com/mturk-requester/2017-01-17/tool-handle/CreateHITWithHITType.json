{
  "name": "CreateHITWithHITType",
  "description": "<p> The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence Task (HIT) using an existing HITTypeID generated by the <code>CreateHITType</code> operation. </p> <p> This is an alternative way to create HITs from the <code>CreateHIT</code> operation. This is the recommended best practice for Requesters who are creating large numbers of HITs. </p> <p>CreateHITWithHITType also supports several ways to provide question data: by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT, or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>. </p> <note> <p> If a HIT is created with 10 or more maximum assignments, there is an additional fee. For more information, see <a href=\"https://requester.mturk.com/pricing\">Amazon Mechanical Turk Pricing</a>. </p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "MTurkRequesterServiceV20170117.CreateHITWithHITType"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateHITWithHITTypeRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateHITWithHITTypeRequest": {
        "type": "object",
        "required": [
          "HITTypeId",
          "LifetimeInSeconds"
        ],
        "title": "CreateHITWithHITTypeRequest",
        "properties": {
          "HITTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "The HIT type ID you want to create this HIT with."
              }
            ]
          },
          "MaxAssignments": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": " The number of times the HIT can be accepted and completed before the HIT becomes unavailable. "
              }
            ]
          },
          "LifetimeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": " An amount of time, in seconds, after which the HIT is no longer available for users to accept. After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches, even if not all of the assignments for the HIT have been accepted. "
              }
            ]
          },
          "Question": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p> The data the person completing the HIT uses to produce the results. </p> <p> Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure, or an HTMLQuestion data structure. The XML question data must not be larger than 64 kilobytes (65,535 bytes) in size, including whitespace. </p> <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>"
              }
            ]
          },
          "RequesterAnnotation": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p> An arbitrary data field. The RequesterAnnotation parameter lets your application attach arbitrary data to the HIT for tracking purposes. For example, this parameter could be an identifier internal to the Requester's application that corresponds with the HIT. </p> <p> The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT. It is not shown to the Worker, or any other Requester. </p> <p> The RequesterAnnotation parameter may be different for each HIT you submit. It does not affect how your HITs are grouped. </p>"
              }
            ]
          },
          "UniqueRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyToken"
              },
              {
                "description": "<p> A unique identifier for this request which allows you to retry the call on error without creating duplicate HITs. This is useful in cases such as network timeouts where it is unclear whether or not the call succeeded on the server. If the HIT already exists in the system from a previous call using the same UniqueRequestToken, subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error with a message containing the HITId. </p> <note> <p> Note: It is your responsibility to ensure uniqueness of the token. The unique token expires after 24 hours. Subsequent calls using the same UniqueRequestToken made after the 24 hour limit could create duplicate HITs. </p> </note>"
              }
            ]
          },
          "AssignmentReviewPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ReviewPolicy"
              },
              {
                "description": " The Assignment-level Review Policy applies to the assignments under the HIT. You can specify for Mechanical Turk to take various actions based on the policy. "
              }
            ]
          },
          "HITReviewPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ReviewPolicy"
              },
              {
                "description": " The HIT-level Review Policy applies to the HIT. You can specify for Mechanical Turk to take various actions based on the policy. "
              }
            ]
          },
          "HITLayoutId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "<p> The HITLayoutId allows you to use a pre-existing HIT design with placeholder values and create an additional HIT by providing those values as HITLayoutParameters. </p> <p> Constraints: Either a Question parameter or a HITLayoutId parameter must be provided. </p>"
              }
            ]
          },
          "HITLayoutParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/HITLayoutParameterList"
              },
              {
                "description": " If the HITLayoutId is provided, any placeholder values must be filled in with values using the HITLayoutParameter structure. For more information, see HITLayout. "
              }
            ]
          }
        }
      },
      "EntityId": {
        "type": "string",
        "pattern": "^[A-Z0-9]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "Integer": {
        "type": "integer"
      },
      "Long": {
        "type": "integer"
      },
      "String": {
        "type": "string"
      },
      "IdempotencyToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "ReviewPolicy": {
        "type": "object",
        "required": [
          "PolicyName"
        ],
        "properties": {
          "PolicyName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " Name of a Review Policy: SimplePlurality/2011-09-01 or ScoreMyKnownAnswers/2011-09-01 "
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyParameterList"
              },
              {
                "description": "Name of the parameter from the Review policy."
              }
            ]
          }
        },
        "description": " HIT Review Policy data structures represent HIT review policies, which you specify when you create a HIT. "
      },
      "PolicyParameterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PolicyParameter"
        }
      },
      "PolicyParameter": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " Name of the parameter from the list of Review Polices. "
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": " The list of values of the Parameter"
              }
            ]
          },
          "MapEntries": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterMapEntryList"
              },
              {
                "description": " List of ParameterMapEntry objects. "
              }
            ]
          }
        },
        "description": " Name of the parameter from the Review policy. "
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "ParameterMapEntryList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ParameterMapEntry"
        }
      },
      "ParameterMapEntry": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " The QuestionID from the HIT that is used to identify which question requires Mechanical Turk to score as part of the ScoreMyKnownAnswers/2011-09-01 Review Policy. "
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": " The list of answers to the question specified in the MapEntry Key element. The Worker must match all values in order for the answer to be scored correctly. "
              }
            ]
          }
        },
        "description": " This data structure is the data type for the AnswerKey parameter of the ScoreMyKnownAnswers/2011-09-01 Review Policy. "
      },
      "HITLayoutParameterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HITLayoutParameter"
        }
      },
      "HITLayoutParameter": {
        "type": "object",
        "required": [
          "Name",
          "Value"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": " The name of the parameter in the HITLayout. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value substituted for the parameter referenced in the HITLayout. "
              }
            ]
          }
        },
        "description": " The HITLayoutParameter data structure defines parameter values used with a HITLayout. A HITLayout is a reusable Amazon Mechanical Turk project template used to provide Human Intelligence Task (HIT) question data for CreateHIT. "
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mturk-requester.us-east-1.amazonaws.com/#X-Amz-Target=MTurkRequesterServiceV20170117.CreateHITWithHITType"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**HIT**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
