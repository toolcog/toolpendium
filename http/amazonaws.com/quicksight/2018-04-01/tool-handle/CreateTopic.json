{
  "name": "CreateTopic",
  "description": "Creates a new Q topic.",
  "parameters": {
    "type": "object",
    "properties": {
      "AwsAccountId": {
        "type": "string",
        "pattern": "^[0-9]{12}$",
        "minLength": 12,
        "maxLength": 12,
        "description": "The ID of the Amazon Web Services account that you want to create a topic in."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "TopicId",
          "Topic"
        ],
        "properties": {
          "TopicId": {
            "description": "The ID for the topic that you want to create. This ID is unique per Amazon Web Services Region for each Amazon Web Services account.",
            "type": "string",
            "pattern": "^[A-Za-z0-9-_.\\\\+]*$",
            "maxLength": 256
          },
          "Topic": {
            "description": "A structure that describes the details of a topic, such as its name, description, and associated data sets.",
            "type": "object",
            "properties": {
              "Name": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResourceName"
                  },
                  {
                    "description": "The name of the topic."
                  }
                ]
              },
              "Description": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LimitedString"
                  },
                  {
                    "description": "The description of the topic."
                  }
                ]
              },
              "DataSets": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Datasets"
                  },
                  {
                    "description": "The data sets that the topic is associated with."
                  }
                ]
              }
            }
          },
          "Tags": {
            "description": "Contains a map of the key-value pairs for the resource tag or tags that are assigned to the dataset.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 1,
            "maxItems": 200
          }
        }
      }
    },
    "required": [
      "AwsAccountId",
      "body"
    ],
    "$defs": {
      "ResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "LimitedString": {
        "type": "string",
        "maxLength": 256
      },
      "Datasets": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DatasetMetadata"
        }
      },
      "DatasetMetadata": {
        "type": "object",
        "required": [
          "DatasetArn"
        ],
        "properties": {
          "DatasetArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the dataset."
              }
            ]
          },
          "DatasetName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The name of the dataset."
              }
            ]
          },
          "DatasetDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The description of the dataset."
              }
            ]
          },
          "DataAggregation": {
            "allOf": [
              {
                "$ref": "#/$defs/DataAggregation"
              },
              {
                "description": "The definition of a data aggregation."
              }
            ]
          },
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicFilters"
              },
              {
                "description": "The list of filter definitions."
              }
            ]
          },
          "Columns": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicColumns"
              },
              {
                "description": "The list of column definitions."
              }
            ]
          },
          "CalculatedFields": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicCalculatedFields"
              },
              {
                "description": "The list of calculated field definitions."
              }
            ]
          },
          "NamedEntities": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicNamedEntities"
              },
              {
                "description": "The list of named entities definitions."
              }
            ]
          }
        },
        "description": "A structure that represents a dataset."
      },
      "Arn": {
        "type": "string"
      },
      "DataAggregation": {
        "type": "object",
        "properties": {
          "DatasetRowDateGranularity": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicTimeGranularity"
              },
              {
                "description": "The level of time precision that is used to aggregate <code>DateTime</code> values."
              }
            ]
          },
          "DefaultDateColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The column name for the default date."
              }
            ]
          }
        },
        "description": "A structure that represents a data aggregation."
      },
      "TopicTimeGranularity": {
        "type": "string",
        "enum": [
          "SECOND",
          "MINUTE",
          "HOUR",
          "DAY",
          "WEEK",
          "MONTH",
          "QUARTER",
          "YEAR"
        ]
      },
      "TopicFilters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TopicFilter"
        }
      },
      "TopicFilter": {
        "type": "object",
        "required": [
          "FilterName",
          "OperandFieldName"
        ],
        "properties": {
          "FilterDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "A description of the filter used to select items for a topic."
              }
            ]
          },
          "FilterClass": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterClass"
              },
              {
                "description": "The class of the filter. Valid values for this structure are <code>ENFORCED_VALUE_FILTER</code>, <code>CONDITIONAL_VALUE_FILTER</code>, and <code>NAMED_VALUE_FILTER</code>."
              }
            ]
          },
          "FilterName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The name of the filter."
              }
            ]
          },
          "FilterSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/Synonyms"
              },
              {
                "description": "The other names or aliases for the filter."
              }
            ]
          },
          "OperandFieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The name of the field that the filter operates on."
              }
            ]
          },
          "FilterType": {
            "allOf": [
              {
                "$ref": "#/$defs/NamedFilterType"
              },
              {
                "description": "The type of the filter. Valid values for this structure are <code>CATEGORY_FILTER</code>, <code>NUMERIC_EQUALITY_FILTER</code>, <code>NUMERIC_RANGE_FILTER</code>, <code>DATE_RANGE_FILTER</code>, and <code>RELATIVE_DATE_FILTER</code>."
              }
            ]
          },
          "CategoryFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicCategoryFilter"
              },
              {
                "description": "The category filter that is associated with this filter."
              }
            ]
          },
          "NumericEqualityFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicNumericEqualityFilter"
              },
              {
                "description": "The numeric equality filter."
              }
            ]
          },
          "NumericRangeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicNumericRangeFilter"
              },
              {
                "description": "The numeric range filter."
              }
            ]
          },
          "DateRangeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicDateRangeFilter"
              },
              {
                "description": "The date range filter."
              }
            ]
          },
          "RelativeDateFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicRelativeDateFilter"
              },
              {
                "description": "The relative date filter."
              }
            ]
          }
        },
        "description": "A structure that represents a filter used to select items for a topic."
      },
      "FilterClass": {
        "type": "string",
        "enum": [
          "ENFORCED_VALUE_FILTER",
          "CONDITIONAL_VALUE_FILTER",
          "NAMED_VALUE_FILTER"
        ]
      },
      "Synonyms": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LimitedString"
        }
      },
      "NamedFilterType": {
        "type": "string",
        "enum": [
          "CATEGORY_FILTER",
          "NUMERIC_EQUALITY_FILTER",
          "NUMERIC_RANGE_FILTER",
          "DATE_RANGE_FILTER",
          "RELATIVE_DATE_FILTER"
        ]
      },
      "TopicCategoryFilter": {
        "type": "object",
        "properties": {
          "CategoryFilterFunction": {
            "allOf": [
              {
                "$ref": "#/$defs/CategoryFilterFunction"
              },
              {
                "description": "The category filter function. Valid values for this structure are <code>EXACT</code> and <code>CONTAINS</code>."
              }
            ]
          },
          "CategoryFilterType": {
            "allOf": [
              {
                "$ref": "#/$defs/CategoryFilterType"
              },
              {
                "description": "The category filter type. This element is used to specify whether a filter is a simple category filter or an inverse category filter."
              }
            ]
          },
          "Constant": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicCategoryFilterConstant"
              },
              {
                "description": "The constant used in a category filter."
              }
            ]
          },
          "Inverse": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates if the filter is inverse."
              }
            ]
          }
        },
        "description": "A structure that represents a category filter."
      },
      "CategoryFilterFunction": {
        "type": "string",
        "enum": [
          "EXACT",
          "CONTAINS"
        ]
      },
      "CategoryFilterType": {
        "type": "string",
        "enum": [
          "CUSTOM_FILTER",
          "CUSTOM_FILTER_LIST",
          "FILTER_LIST"
        ]
      },
      "TopicCategoryFilterConstant": {
        "type": "object",
        "properties": {
          "ConstantType": {
            "allOf": [
              {
                "$ref": "#/$defs/ConstantType"
              },
              {
                "description": "The type of category filter constant. This element is used to specify whether a constant is a singular or collective. Valid values are <code>SINGULAR</code> and <code>COLLECTIVE</code>."
              }
            ]
          },
          "SingularConstant": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "A singular constant used in a category filter. This element is used to specify a single value for the constant."
              }
            ]
          },
          "CollectiveConstant": {
            "allOf": [
              {
                "$ref": "#/$defs/CollectiveConstant"
              },
              {
                "description": "A collective constant used in a category filter. This element is used to specify a list of values for the constant."
              }
            ]
          }
        },
        "description": "A constant used in a category filter."
      },
      "ConstantType": {
        "type": "string",
        "enum": [
          "SINGULAR",
          "RANGE",
          "COLLECTIVE"
        ]
      },
      "CollectiveConstant": {
        "type": "object",
        "properties": {
          "ValueList": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "A list of values for the collective constant."
              }
            ]
          }
        },
        "description": "A structure that represents a collective constant."
      },
      "StringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "Boolean": {
        "type": "boolean"
      },
      "TopicNumericEqualityFilter": {
        "type": "object",
        "properties": {
          "Constant": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicSingularFilterConstant"
              },
              {
                "description": "The constant used in a numeric equality filter."
              }
            ]
          },
          "Aggregation": {
            "allOf": [
              {
                "$ref": "#/$defs/NamedFilterAggType"
              },
              {
                "description": "An aggregation function that specifies how to calculate the value of a numeric field for a topic. Valid values for this structure are <code>NO_AGGREGATION</code>, <code>SUM</code>, <code>AVERAGE</code>, <code>COUNT</code>, <code>DISTINCT_COUNT</code>, <code>MAX</code>, <code>MEDIAN</code>, <code>MIN</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, and <code>VARP</code>."
              }
            ]
          }
        },
        "description": "A filter that filters topics based on the value of a numeric field. The filter includes only topics whose numeric field value matches the specified value."
      },
      "TopicSingularFilterConstant": {
        "type": "object",
        "properties": {
          "ConstantType": {
            "allOf": [
              {
                "$ref": "#/$defs/ConstantType"
              },
              {
                "description": "The type of the singular filter constant. Valid values for this structure are <code>SINGULAR</code>."
              }
            ]
          },
          "SingularConstant": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The value of the singular filter constant."
              }
            ]
          }
        },
        "description": "A structure that represents a singular filter constant, used in filters to specify a single value to match against."
      },
      "NamedFilterAggType": {
        "type": "string",
        "enum": [
          "NO_AGGREGATION",
          "SUM",
          "AVERAGE",
          "COUNT",
          "DISTINCT_COUNT",
          "MAX",
          "MEDIAN",
          "MIN",
          "STDEV",
          "STDEVP",
          "VAR",
          "VARP"
        ]
      },
      "TopicNumericRangeFilter": {
        "type": "object",
        "properties": {
          "Inclusive": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether the endpoints of the numeric range are included in the filter. If set to true, topics whose numeric field value is equal to the endpoint values will be included in the filter. If set to false, topics whose numeric field value is equal to the endpoint values will be excluded from the filter."
              }
            ]
          },
          "Constant": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicRangeFilterConstant"
              },
              {
                "description": "The constant used in a numeric range filter."
              }
            ]
          },
          "Aggregation": {
            "allOf": [
              {
                "$ref": "#/$defs/NamedFilterAggType"
              },
              {
                "description": "An aggregation function that specifies how to calculate the value of a numeric field for a topic, Valid values for this structure are <code>NO_AGGREGATION</code>, <code>SUM</code>, <code>AVERAGE</code>, <code>COUNT</code>, <code>DISTINCT_COUNT</code>, <code>MAX</code>, <code>MEDIAN</code>, <code>MIN</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, and <code>VARP</code>."
              }
            ]
          }
        },
        "description": "A filter that filters topics based on the value of a numeric field. The filter includes only topics whose numeric field value falls within the specified range."
      },
      "TopicRangeFilterConstant": {
        "type": "object",
        "properties": {
          "ConstantType": {
            "allOf": [
              {
                "$ref": "#/$defs/ConstantType"
              },
              {
                "description": "The data type of the constant value that is used in a range filter. Valid values for this structure are <code>RANGE</code>."
              }
            ]
          },
          "RangeConstant": {
            "allOf": [
              {
                "$ref": "#/$defs/RangeConstant"
              },
              {
                "description": "The value of the constant that is used to specify the endpoints of a range filter."
              }
            ]
          }
        },
        "description": "A constant value that is used in a range filter to specify the endpoints of the range."
      },
      "RangeConstant": {
        "type": "object",
        "properties": {
          "Minimum": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The minimum value for a range constant."
              }
            ]
          },
          "Maximum": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The maximum value for a range constant."
              }
            ]
          }
        },
        "description": "A structure that represents a range constant."
      },
      "TopicDateRangeFilter": {
        "type": "object",
        "properties": {
          "Inclusive": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether the date range filter should include the boundary values. If set to true, the filter includes the start and end dates. If set to false, the filter excludes them."
              }
            ]
          },
          "Constant": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicRangeFilterConstant"
              },
              {
                "description": "The constant used in a date range filter."
              }
            ]
          }
        },
        "description": "A filter used to restrict data based on a range of dates or times."
      },
      "TopicRelativeDateFilter": {
        "type": "object",
        "properties": {
          "TimeGranularity": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicTimeGranularity"
              },
              {
                "description": "The level of time precision that is used to aggregate <code>DateTime</code> values."
              }
            ]
          },
          "RelativeDateFilterFunction": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicRelativeDateFilterFunction"
              },
              {
                "description": "The function to be used in a relative date filter to determine the range of dates to include in the results. Valid values for this structure are <code>BEFORE</code>, <code>AFTER</code>, and <code>BETWEEN</code>."
              }
            ]
          },
          "Constant": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicSingularFilterConstant"
              },
              {
                "description": "The constant used in a relative date filter."
              }
            ]
          }
        },
        "description": "A structure that represents a relative date filter."
      },
      "TopicRelativeDateFilterFunction": {
        "type": "string",
        "enum": [
          "PREVIOUS",
          "THIS",
          "LAST",
          "NEXT",
          "NOW"
        ]
      },
      "TopicColumns": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TopicColumn"
        }
      },
      "TopicColumn": {
        "type": "object",
        "required": [
          "ColumnName"
        ],
        "properties": {
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The name of the column."
              }
            ]
          },
          "ColumnFriendlyName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "A user-friendly name for the column."
              }
            ]
          },
          "ColumnDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "A description of the column and its contents."
              }
            ]
          },
          "ColumnSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/Synonyms"
              },
              {
                "description": "The other names or aliases for the column."
              }
            ]
          },
          "ColumnDataRole": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnDataRole"
              },
              {
                "description": "The role of the column in the data. Valid values are <code>DIMENSION</code> and <code>MEASURE</code>."
              }
            ]
          },
          "Aggregation": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultAggregation"
              },
              {
                "description": "The type of aggregation that is performed on the column data when it's queried. Valid values for this structure are <code>SUM</code>, <code>MAX</code>, <code>MIN</code>, <code>COUNT</code>, <code>DISTINCT_COUNT</code>, and <code>AVERAGE</code>."
              }
            ]
          },
          "IsIncludedInTopic": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether the column is included in the query results."
              }
            ]
          },
          "DisableIndexing": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "A Boolean value that indicates whether the column shows in the autocomplete functionality."
              }
            ]
          },
          "ComparativeOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparativeOrder"
              },
              {
                "description": "The order in which data is displayed for the column when it's used in a comparative context."
              }
            ]
          },
          "SemanticType": {
            "allOf": [
              {
                "$ref": "#/$defs/SemanticType"
              },
              {
                "description": "The semantic type of data contained in the column."
              }
            ]
          },
          "TimeGranularity": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicTimeGranularity"
              },
              {
                "description": "The level of time precision that is used to aggregate <code>DateTime</code> values."
              }
            ]
          },
          "AllowedAggregations": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthorSpecifiedAggregations"
              },
              {
                "description": "The list of aggregation types that are allowed for the column. Valid values for this structure are <code>COUNT</code>, <code>DISTINCT_COUNT</code>, <code>MIN</code>, <code>MAX</code>, <code>MEDIAN</code>, <code>SUM</code>, <code>AVERAGE</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, and <code>PERCENTILE</code>."
              }
            ]
          },
          "NotAllowedAggregations": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthorSpecifiedAggregations"
              },
              {
                "description": "The list of aggregation types that are not allowed for the column. Valid values for this structure are <code>COUNT</code>, <code>DISTINCT_COUNT</code>, <code>MIN</code>, <code>MAX</code>, <code>MEDIAN</code>, <code>SUM</code>, <code>AVERAGE</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, and <code>PERCENTILE</code>."
              }
            ]
          },
          "DefaultFormatting": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultFormatting"
              },
              {
                "description": "The default formatting used for values in the column."
              }
            ]
          },
          "NeverAggregateInFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether to aggregate the column data when it's used in a filter context."
              }
            ]
          },
          "CellValueSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/CellValueSynonyms"
              },
              {
                "description": "The other names or aliases for the column cell value."
              }
            ]
          }
        },
        "description": "Represents a column in a dataset."
      },
      "ColumnDataRole": {
        "type": "string",
        "enum": [
          "DIMENSION",
          "MEASURE"
        ]
      },
      "DefaultAggregation": {
        "type": "string",
        "enum": [
          "SUM",
          "MAX",
          "MIN",
          "COUNT",
          "DISTINCT_COUNT",
          "AVERAGE"
        ]
      },
      "NullableBoolean": {
        "type": "boolean"
      },
      "ComparativeOrder": {
        "type": "object",
        "properties": {
          "UseOrdering": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnOrderingType"
              },
              {
                "description": "The ordering type for a column. Valid values for this structure are <code>GREATER_IS_BETTER</code>, <code>LESSER_IS_BETTER</code> and <code>SPECIFIED</code>."
              }
            ]
          },
          "SpecifedOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "The list of columns to be used in the ordering."
              }
            ]
          },
          "TreatUndefinedSpecifiedValues": {
            "allOf": [
              {
                "$ref": "#/$defs/UndefinedSpecifiedValueType"
              },
              {
                "description": "The treat of undefined specified values. Valid values for this structure are <code>LEAST</code> and <code>MOST</code>."
              }
            ]
          }
        },
        "description": "A structure that represents a comparative order."
      },
      "ColumnOrderingType": {
        "type": "string",
        "enum": [
          "GREATER_IS_BETTER",
          "LESSER_IS_BETTER",
          "SPECIFIED"
        ]
      },
      "UndefinedSpecifiedValueType": {
        "type": "string",
        "enum": [
          "LEAST",
          "MOST"
        ]
      },
      "SemanticType": {
        "type": "object",
        "properties": {
          "TypeName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The semantic type name."
              }
            ]
          },
          "SubTypeName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The semantic type sub type name."
              }
            ]
          },
          "TypeParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TypeParameters"
              },
              {
                "description": "The semantic type parameters."
              }
            ]
          },
          "TruthyCellValue": {
            "allOf": [
              {
                "$ref": "#/$defs/SensitiveString"
              },
              {
                "description": "The semantic type truthy cell value."
              }
            ]
          },
          "TruthyCellValueSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/SensitiveStringList"
              },
              {
                "description": "The other names or aliases for the true cell value."
              }
            ]
          },
          "FalseyCellValue": {
            "allOf": [
              {
                "$ref": "#/$defs/SensitiveString"
              },
              {
                "description": "The semantic type falsey cell value."
              }
            ]
          },
          "FalseyCellValueSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/SensitiveStringList"
              },
              {
                "description": "The other names or aliases for the false cell value."
              }
            ]
          }
        },
        "description": "A structure that represents a semantic type."
      },
      "TypeParameters": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/LimitedString"
        }
      },
      "SensitiveString": {
        "type": "string",
        "format": "password"
      },
      "SensitiveStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SensitiveString"
        }
      },
      "AuthorSpecifiedAggregations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AuthorSpecifiedAggregation"
        }
      },
      "AuthorSpecifiedAggregation": {
        "type": "string",
        "enum": [
          "COUNT",
          "DISTINCT_COUNT",
          "MIN",
          "MAX",
          "MEDIAN",
          "SUM",
          "AVERAGE",
          "STDEV",
          "STDEVP",
          "VAR",
          "VARP",
          "PERCENTILE"
        ]
      },
      "DefaultFormatting": {
        "type": "object",
        "properties": {
          "DisplayFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/DisplayFormat"
              },
              {
                "description": "The display format. Valid values for this structure are <code>AUTO</code>, <code>PERCENT</code>, <code>CURRENCY</code>, <code>NUMBER</code>, <code>DATE</code>, and <code>STRING</code>."
              }
            ]
          },
          "DisplayFormatOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/DisplayFormatOptions"
              },
              {
                "description": "The additional options for display formatting."
              }
            ]
          }
        },
        "description": "A structure that represents a default formatting definition."
      },
      "DisplayFormat": {
        "type": "string",
        "enum": [
          "AUTO",
          "PERCENT",
          "CURRENCY",
          "NUMBER",
          "DATE",
          "STRING"
        ]
      },
      "DisplayFormatOptions": {
        "type": "object",
        "properties": {
          "UseBlankCellFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether to use blank cell format."
              }
            ]
          },
          "BlankCellFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "Determines the blank cell format."
              }
            ]
          },
          "DateFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "Determines the <code>DateTime</code> format."
              }
            ]
          },
          "DecimalSeparator": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicNumericSeparatorSymbol"
              },
              {
                "description": "Determines the decimal separator."
              }
            ]
          },
          "GroupingSeparator": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "Determines the grouping separator."
              }
            ]
          },
          "UseGrouping": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether to use grouping."
              }
            ]
          },
          "FractionDigits": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Determines the number of fraction digits."
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The prefix value for a display format."
              }
            ]
          },
          "Suffix": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The suffix value for a display format."
              }
            ]
          },
          "UnitScaler": {
            "allOf": [
              {
                "$ref": "#/$defs/NumberScale"
              },
              {
                "description": "The unit scaler. Valid values for this structure are: <code>NONE</code>, <code>AUTO</code>, <code>THOUSANDS</code>, <code>MILLIONS</code>, <code>BILLIONS</code>, and <code>TRILLIONS</code>."
              }
            ]
          },
          "NegativeFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/NegativeFormat"
              },
              {
                "description": "The negative format."
              }
            ]
          },
          "CurrencySymbol": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The currency symbol, such as <code>USD</code>."
              }
            ]
          }
        },
        "description": "A structure that represents additional options for display formatting."
      },
      "TopicNumericSeparatorSymbol": {
        "type": "string",
        "enum": [
          "COMMA",
          "DOT"
        ]
      },
      "Integer": {
        "type": "integer"
      },
      "NumberScale": {
        "type": "string",
        "enum": [
          "NONE",
          "AUTO",
          "THOUSANDS",
          "MILLIONS",
          "BILLIONS",
          "TRILLIONS"
        ]
      },
      "NegativeFormat": {
        "type": "object",
        "properties": {
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The prefix for a negative format."
              }
            ]
          },
          "Suffix": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The suffix for a negative format."
              }
            ]
          }
        },
        "description": "A structure that represents a negative format."
      },
      "CellValueSynonyms": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CellValueSynonym"
        }
      },
      "CellValueSynonym": {
        "type": "object",
        "properties": {
          "CellValue": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The cell value."
              }
            ]
          },
          "Synonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/StringList"
              },
              {
                "description": "Other names or aliases for the cell value."
              }
            ]
          }
        },
        "description": "A structure that represents the cell value synonym."
      },
      "TopicCalculatedFields": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TopicCalculatedField"
        }
      },
      "TopicCalculatedField": {
        "type": "object",
        "required": [
          "CalculatedFieldName",
          "Expression"
        ],
        "properties": {
          "CalculatedFieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The calculated field name."
              }
            ]
          },
          "CalculatedFieldDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The calculated field description."
              }
            ]
          },
          "Expression": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "The calculated field expression."
              }
            ]
          },
          "CalculatedFieldSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/Synonyms"
              },
              {
                "description": "The other names or aliases for the calculated field."
              }
            ]
          },
          "IsIncludedInTopic": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A boolean value that indicates if a calculated field is included in the topic."
              }
            ]
          },
          "DisableIndexing": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "A Boolean value that indicates if a calculated field is visible in the autocomplete."
              }
            ]
          },
          "ColumnDataRole": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnDataRole"
              },
              {
                "description": "The column data role for a calculated field. Valid values for this structure are <code>DIMENSION</code> and <code>MEASURE</code>."
              }
            ]
          },
          "TimeGranularity": {
            "allOf": [
              {
                "$ref": "#/$defs/TopicTimeGranularity"
              },
              {
                "description": "The level of time precision that is used to aggregate <code>DateTime</code> values."
              }
            ]
          },
          "DefaultFormatting": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultFormatting"
              },
              {
                "description": "The default formatting definition."
              }
            ]
          },
          "Aggregation": {
            "allOf": [
              {
                "$ref": "#/$defs/DefaultAggregation"
              },
              {
                "description": "The default aggregation. Valid values for this structure are <code>SUM</code>, <code>MAX</code>, <code>MIN</code>, <code>COUNT</code>, <code>DISTINCT_COUNT</code>, and <code>AVERAGE</code>."
              }
            ]
          },
          "ComparativeOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparativeOrder"
              },
              {
                "description": "The order in which data is displayed for the calculated field when it's used in a comparative context."
              }
            ]
          },
          "SemanticType": {
            "allOf": [
              {
                "$ref": "#/$defs/SemanticType"
              },
              {
                "description": "The semantic type."
              }
            ]
          },
          "AllowedAggregations": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthorSpecifiedAggregations"
              },
              {
                "description": "The list of aggregation types that are allowed for the calculated field. Valid values for this structure are <code>COUNT</code>, <code>DISTINCT_COUNT</code>, <code>MIN</code>, <code>MAX</code>, <code>MEDIAN</code>, <code>SUM</code>, <code>AVERAGE</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, and <code>PERCENTILE</code>."
              }
            ]
          },
          "NotAllowedAggregations": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthorSpecifiedAggregations"
              },
              {
                "description": "The list of aggregation types that are not allowed for the calculated field. Valid values for this structure are <code>COUNT</code>, <code>DISTINCT_COUNT</code>, <code>MIN</code>, <code>MAX</code>, <code>MEDIAN</code>, <code>SUM</code>, <code>AVERAGE</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, and <code>PERCENTILE</code>."
              }
            ]
          },
          "NeverAggregateInFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that indicates whether to never aggregate calculated field in filters."
              }
            ]
          },
          "CellValueSynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/CellValueSynonyms"
              },
              {
                "description": "The other names or aliases for the calculated field cell value."
              }
            ]
          }
        },
        "description": "A structure that represents a calculated field."
      },
      "Expression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 4096,
        "format": "password"
      },
      "TopicNamedEntities": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TopicNamedEntity"
        }
      },
      "TopicNamedEntity": {
        "type": "object",
        "required": [
          "EntityName"
        ],
        "properties": {
          "EntityName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The name of the named entity."
              }
            ]
          },
          "EntityDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The description of the named entity."
              }
            ]
          },
          "EntitySynonyms": {
            "allOf": [
              {
                "$ref": "#/$defs/Synonyms"
              },
              {
                "description": "The other names or aliases for the named entity."
              }
            ]
          },
          "SemanticEntityType": {
            "allOf": [
              {
                "$ref": "#/$defs/SemanticEntityType"
              },
              {
                "description": "The type of named entity that a topic represents."
              }
            ]
          },
          "Definition": {
            "allOf": [
              {
                "$ref": "#/$defs/NamedEntityDefinitions"
              },
              {
                "description": "The definition of a named entity."
              }
            ]
          }
        },
        "description": "A structure that represents a named entity."
      },
      "SemanticEntityType": {
        "type": "object",
        "properties": {
          "TypeName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The semantic entity type name."
              }
            ]
          },
          "SubTypeName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The semantic entity sub type name."
              }
            ]
          },
          "TypeParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TypeParameters"
              },
              {
                "description": "The semantic entity type parameters."
              }
            ]
          }
        },
        "description": "A structure that represents a semantic entity type."
      },
      "NamedEntityDefinitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NamedEntityDefinition"
        }
      },
      "NamedEntityDefinition": {
        "type": "object",
        "properties": {
          "FieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The name of the entity."
              }
            ]
          },
          "PropertyName": {
            "allOf": [
              {
                "$ref": "#/$defs/LimitedString"
              },
              {
                "description": "The property name to be used for the named entity."
              }
            ]
          },
          "PropertyRole": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyRole"
              },
              {
                "description": "The property role. Valid values for this structure are <code>PRIMARY</code> and <code>ID</code>."
              }
            ]
          },
          "PropertyUsage": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyUsage"
              },
              {
                "description": "The property usage. Valid values for this structure are <code>INHERIT</code>, <code>DIMENSION</code>, and <code>MEASURE</code>."
              }
            ]
          },
          "Metric": {
            "allOf": [
              {
                "$ref": "#/$defs/NamedEntityDefinitionMetric"
              },
              {
                "description": "The definition of a metric."
              }
            ]
          }
        },
        "description": "A structure that represents a named entity."
      },
      "PropertyRole": {
        "type": "string",
        "enum": [
          "PRIMARY",
          "ID"
        ]
      },
      "PropertyUsage": {
        "type": "string",
        "enum": [
          "INHERIT",
          "DIMENSION",
          "MEASURE"
        ]
      },
      "NamedEntityDefinitionMetric": {
        "type": "object",
        "properties": {
          "Aggregation": {
            "allOf": [
              {
                "$ref": "#/$defs/NamedEntityAggType"
              },
              {
                "description": "The aggregation of a named entity. Valid values for this structure are <code>SUM</code>, <code>MIN</code>, <code>MAX</code>, <code>COUNT</code>, <code>AVERAGE</code>, <code>DISTINCT_COUNT</code>, <code>STDEV</code>, <code>STDEVP</code>, <code>VAR</code>, <code>VARP</code>, <code>PERCENTILE</code>, <code>MEDIAN</code>, and <code>CUSTOM</code>."
              }
            ]
          },
          "AggregationFunctionParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AggregationFunctionParameters"
              },
              {
                "description": "The additional parameters for an aggregation function."
              }
            ]
          }
        },
        "description": "A structure that represents a metric."
      },
      "NamedEntityAggType": {
        "type": "string",
        "enum": [
          "SUM",
          "MIN",
          "MAX",
          "COUNT",
          "AVERAGE",
          "DISTINCT_COUNT",
          "STDEV",
          "STDEVP",
          "VAR",
          "VARP",
          "PERCENTILE",
          "MEDIAN",
          "CUSTOM"
        ]
      },
      "AggregationFunctionParameters": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/LimitedString"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "Tag key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "Tag value."
              }
            ]
          }
        },
        "description": "The key or keys of the key-value pairs for the resource tag or tags assigned to the resource."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://quicksight.us-east-1.amazonaws.com/accounts/{AwsAccountId}/topics"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**TopicId**",
            "**RefreshArn**",
            "**RequestId**",
            "**Status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
