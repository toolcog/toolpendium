{
  "name": "UpdateDataSet",
  "description": "Updates a dataset. This operation doesn't support datasets that include uploaded files as a source. Partial updates are not supported by this operation.",
  "parameters": {
    "type": "object",
    "properties": {
      "AwsAccountId": {
        "type": "string",
        "pattern": "^[0-9]{12}$",
        "minLength": 12,
        "maxLength": 12,
        "description": "The Amazon Web Services account ID."
      },
      "DataSetId": {
        "type": "string",
        "description": "The ID for the dataset that you want to update. This ID is unique per Amazon Web Services Region for each Amazon Web Services account."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "Name",
          "PhysicalTableMap",
          "ImportMode"
        ],
        "properties": {
          "Name": {
            "description": "The display name for the dataset.",
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "PhysicalTableMap": {
            "description": "Declares the physical tables that are available in the underlying data sources.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 32,
            "additionalProperties": {
              "$ref": "#/$defs/PhysicalTable"
            }
          },
          "LogicalTableMap": {
            "description": "Configures the combination and transformation of the data from the physical tables.",
            "type": "object",
            "minProperties": 1,
            "maxProperties": 64,
            "additionalProperties": {
              "$ref": "#/$defs/LogicalTable"
            }
          },
          "ImportMode": {
            "description": "Indicates whether you want to import the data into SPICE.",
            "type": "string",
            "enum": [
              "SPICE",
              "DIRECT_QUERY"
            ]
          },
          "ColumnGroups": {
            "description": "Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ColumnGroup"
            },
            "minItems": 1,
            "maxItems": 8
          },
          "FieldFolders": {
            "description": "The folder that contains fields and nested subfolders for your dataset.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/FieldFolder"
            }
          },
          "RowLevelPermissionDataSet": {
            "description": "<p>Information about a dataset that contains permissions for row-level security (RLS). The permissions dataset maps fields to users or groups. For more information, see <a href=\"https://docs.aws.amazon.com/quicksight/latest/user/restrict-access-to-a-data-set-using-row-level-security.html\">Using Row-Level Security (RLS) to Restrict Access to a Dataset</a> in the <i>Amazon QuickSight User Guide</i>.</p> <p>The option to deny permissions by setting <code>PermissionPolicy</code> to <code>DENY_ACCESS</code> is not supported for new RLS datasets.</p>",
            "type": "object",
            "properties": {
              "Namespace": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Namespace"
                  },
                  {
                    "description": "The namespace associated with the dataset that contains permissions for RLS."
                  }
                ]
              },
              "Arn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of the dataset that contains permissions for RLS."
                  }
                ]
              },
              "PermissionPolicy": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RowLevelPermissionPolicy"
                  },
                  {
                    "description": "The type of permissions to use when interpreting the permissions for RLS. <code>DENY_ACCESS</code> is included for backward compatibility only."
                  }
                ]
              },
              "FormatVersion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RowLevelPermissionFormatVersion"
                  },
                  {
                    "description": "<p>The user or group rules associated with the dataset that contains permissions for RLS.</p> <p>By default, <code>FormatVersion</code> is <code>VERSION_1</code>. When <code>FormatVersion</code> is <code>VERSION_1</code>, <code>UserName</code> and <code>GroupName</code> are required. When <code>FormatVersion</code> is <code>VERSION_2</code>, <code>UserARN</code> and <code>GroupARN</code> are required, and <code>Namespace</code> must not exist.</p>"
                  }
                ]
              },
              "Status": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Status"
                  },
                  {
                    "description": "The status of the row-level security permission dataset. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>."
                  }
                ]
              }
            }
          },
          "RowLevelPermissionTagConfiguration": {
            "description": "The configuration of tags on a dataset to set row-level security. ",
            "type": "object",
            "properties": {
              "Status": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Status"
                  },
                  {
                    "description": "The status of row-level security tags. If enabled, the status is <code>ENABLED</code>. If disabled, the status is <code>DISABLED</code>."
                  }
                ]
              },
              "TagRules": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RowLevelPermissionTagRuleList"
                  },
                  {
                    "description": "A set of rules associated with row-level security, such as the tag names and columns that they are assigned to."
                  }
                ]
              },
              "TagRuleConfigurations": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RowLevelPermissionTagRuleConfigurationList"
                  },
                  {
                    "description": "A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset."
                  }
                ]
              }
            }
          },
          "ColumnLevelPermissionRules": {
            "description": "A set of one or more definitions of a <code> <a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html\">ColumnLevelPermissionRule</a> </code>.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ColumnLevelPermissionRule"
            },
            "minItems": 1
          },
          "DataSetUsageConfiguration": {
            "description": "The usage configuration to apply to child datasets that reference this dataset as a source.",
            "type": "object",
            "properties": {
              "DisableUseAsDirectQuerySource": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "An option that controls whether a child dataset of a direct query can use this dataset as a source."
                  }
                ]
              },
              "DisableUseAsImportedSource": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "An option that controls whether a child dataset that's stored in QuickSight can use this dataset as a source."
                  }
                ]
              }
            }
          },
          "DatasetParameters": {
            "description": "The parameter declarations of the dataset.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/DatasetParameter"
            },
            "minItems": 1,
            "maxItems": 32
          }
        }
      }
    },
    "required": [
      "AwsAccountId",
      "DataSetId",
      "body"
    ],
    "$defs": {
      "PhysicalTable": {
        "type": "object",
        "properties": {
          "RelationalTable": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationalTable"
              },
              {
                "description": "A physical table type for relational data sources."
              }
            ]
          },
          "CustomSql": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomSql"
              },
              {
                "description": "A physical table type built from the results of the custom SQL query."
              }
            ]
          },
          "S3Source": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Source"
              },
              {
                "description": "A physical table type for as S3 data source."
              }
            ]
          }
        },
        "description": "A view of a data source that contains information about the shape of the data in the underlying source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "RelationalTable": {
        "type": "object",
        "required": [
          "DataSourceArn",
          "Name",
          "InputColumns"
        ],
        "properties": {
          "DataSourceArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) for the data source."
              }
            ]
          },
          "Catalog": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationalTableCatalog"
              },
              {
                "description": "The catalog associated with a table."
              }
            ]
          },
          "Schema": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationalTableSchema"
              },
              {
                "description": "The schema name. This name applies to certain relational database engines."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationalTableName"
              },
              {
                "description": "The name of the relational table."
              }
            ]
          },
          "InputColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/InputColumnList"
              },
              {
                "description": "The column schema of the table."
              }
            ]
          }
        },
        "description": "A physical table type for relational data sources."
      },
      "Arn": {
        "type": "string"
      },
      "RelationalTableCatalog": {
        "type": "string",
        "maxLength": 256
      },
      "RelationalTableSchema": {
        "type": "string",
        "maxLength": 64
      },
      "RelationalTableName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "InputColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InputColumn"
        },
        "minItems": 1,
        "maxItems": 2048
      },
      "InputColumn": {
        "type": "object",
        "required": [
          "Name",
          "Type"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "The name of this column in the underlying data source."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/InputColumnDataType"
              },
              {
                "description": "The data type of the column."
              }
            ]
          }
        },
        "description": "Metadata for a column that is used as the input of a transform operation."
      },
      "ColumnName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "InputColumnDataType": {
        "type": "string",
        "enum": [
          "STRING",
          "INTEGER",
          "DECIMAL",
          "DATETIME",
          "BIT",
          "BOOLEAN",
          "JSON"
        ]
      },
      "CustomSql": {
        "type": "object",
        "required": [
          "DataSourceArn",
          "Name",
          "SqlQuery"
        ],
        "properties": {
          "DataSourceArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the data source."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomSqlName"
              },
              {
                "description": "A display name for the SQL query result."
              }
            ]
          },
          "SqlQuery": {
            "allOf": [
              {
                "$ref": "#/$defs/SqlQuery"
              },
              {
                "description": "The SQL query."
              }
            ]
          },
          "Columns": {
            "allOf": [
              {
                "$ref": "#/$defs/InputColumnList"
              },
              {
                "description": "The column schema from the SQL query result set."
              }
            ]
          }
        },
        "description": "A physical table type built from the results of the custom SQL query."
      },
      "CustomSqlName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "SqlQuery": {
        "type": "string",
        "minLength": 1,
        "maxLength": 65536
      },
      "S3Source": {
        "type": "object",
        "required": [
          "DataSourceArn",
          "InputColumns"
        ],
        "properties": {
          "DataSourceArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) for the data source."
              }
            ]
          },
          "UploadSettings": {
            "allOf": [
              {
                "$ref": "#/$defs/UploadSettings"
              },
              {
                "description": "Information about the format for the S3 source file or files."
              }
            ]
          },
          "InputColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/InputColumnList"
              },
              {
                "description": "<p>A physical table type for an S3 data source.</p> <note> <p>For files that aren't JSON, only <code>STRING</code> data types are supported in input columns.</p> </note>"
              }
            ]
          }
        },
        "description": "A physical table type for an S3 data source."
      },
      "UploadSettings": {
        "type": "object",
        "properties": {
          "Format": {
            "allOf": [
              {
                "$ref": "#/$defs/FileFormat"
              },
              {
                "description": "File format."
              }
            ]
          },
          "StartFromRow": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveInteger"
              },
              {
                "description": "A row number to start reading data from."
              }
            ]
          },
          "ContainsHeader": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Whether the file has a header row, or the files each have a header row."
              }
            ]
          },
          "TextQualifier": {
            "allOf": [
              {
                "$ref": "#/$defs/TextQualifier"
              },
              {
                "description": "Text qualifier."
              }
            ]
          },
          "Delimiter": {
            "allOf": [
              {
                "$ref": "#/$defs/Delimiter"
              },
              {
                "description": "The delimiter between values in the file."
              }
            ]
          }
        },
        "description": "Information about the format for a source file or files."
      },
      "FileFormat": {
        "type": "string",
        "enum": [
          "CSV",
          "TSV",
          "CLF",
          "ELF",
          "XLSX",
          "JSON"
        ]
      },
      "PositiveInteger": {
        "type": "integer",
        "minimum": 1
      },
      "Boolean": {
        "type": "boolean"
      },
      "TextQualifier": {
        "type": "string",
        "enum": [
          "DOUBLE_QUOTE",
          "SINGLE_QUOTE"
        ]
      },
      "Delimiter": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1
      },
      "LogicalTable": {
        "type": "object",
        "required": [
          "Alias",
          "Source"
        ],
        "properties": {
          "Alias": {
            "allOf": [
              {
                "$ref": "#/$defs/LogicalTableAlias"
              },
              {
                "description": "A display name for the logical table."
              }
            ]
          },
          "DataTransforms": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformOperationList"
              },
              {
                "description": "Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. "
              }
            ]
          },
          "Source": {
            "allOf": [
              {
                "$ref": "#/$defs/LogicalTableSource"
              },
              {
                "description": "Source of this logical table."
              }
            ]
          }
        },
        "description": "A <i>logical table</i> is a unit that joins and that data transformations operate on. A logical table has a source, which can be either a physical table or result of a join. When a logical table points to a physical table, the logical table acts as a mutable copy of that physical table through transform operations."
      },
      "LogicalTableAlias": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "TransformOperationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TransformOperation"
        },
        "minItems": 1,
        "maxItems": 2048
      },
      "TransformOperation": {
        "type": "object",
        "properties": {
          "ProjectOperation": {
            "allOf": [
              {
                "$ref": "#/$defs/ProjectOperation"
              },
              {
                "description": "An operation that projects columns. Operations that come after a projection can only refer to projected columns."
              }
            ]
          },
          "FilterOperation": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterOperation"
              },
              {
                "description": "An operation that filters rows based on some condition."
              }
            ]
          },
          "CreateColumnsOperation": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateColumnsOperation"
              },
              {
                "description": "An operation that creates calculated columns. Columns created in one such operation form a lexical closure."
              }
            ]
          },
          "RenameColumnOperation": {
            "allOf": [
              {
                "$ref": "#/$defs/RenameColumnOperation"
              },
              {
                "description": "An operation that renames a column."
              }
            ]
          },
          "CastColumnTypeOperation": {
            "allOf": [
              {
                "$ref": "#/$defs/CastColumnTypeOperation"
              },
              {
                "description": "A transform operation that casts a column to a different type."
              }
            ]
          },
          "TagColumnOperation": {
            "allOf": [
              {
                "$ref": "#/$defs/TagColumnOperation"
              },
              {
                "description": "An operation that tags a column with additional information."
              }
            ]
          },
          "UntagColumnOperation": {
            "$ref": "#/$defs/UntagColumnOperation"
          },
          "OverrideDatasetParameterOperation": {
            "$ref": "#/$defs/OverrideDatasetParameterOperation"
          }
        },
        "description": "A data transformation on a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "ProjectOperation": {
        "type": "object",
        "required": [
          "ProjectedColumns"
        ],
        "properties": {
          "ProjectedColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/ProjectedColumnList"
              },
              {
                "description": "Projected columns."
              }
            ]
          }
        },
        "description": "A transform operation that projects columns. Operations that come after a projection can only refer to projected columns."
      },
      "ProjectedColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 1,
        "maxItems": 2000
      },
      "String": {
        "type": "string"
      },
      "FilterOperation": {
        "type": "object",
        "required": [
          "ConditionExpression"
        ],
        "properties": {
          "ConditionExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset."
              }
            ]
          }
        },
        "description": "A transform operation that filters rows based on a condition."
      },
      "Expression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 4096,
        "format": "password"
      },
      "CreateColumnsOperation": {
        "type": "object",
        "required": [
          "Columns"
        ],
        "properties": {
          "Columns": {
            "allOf": [
              {
                "$ref": "#/$defs/CalculatedColumnList"
              },
              {
                "description": "Calculated columns to create."
              }
            ]
          }
        },
        "description": "A transform operation that creates calculated columns. Columns created in one such operation form a lexical closure."
      },
      "CalculatedColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CalculatedColumn"
        },
        "minItems": 1,
        "maxItems": 128
      },
      "CalculatedColumn": {
        "type": "object",
        "required": [
          "ColumnName",
          "ColumnId",
          "Expression"
        ],
        "properties": {
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "Column name."
              }
            ]
          },
          "ColumnId": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnId"
              },
              {
                "description": "A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column."
              }
            ]
          },
          "Expression": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "An expression that defines the calculated column."
              }
            ]
          }
        },
        "description": "A calculated column for a dataset."
      },
      "ColumnId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "RenameColumnOperation": {
        "type": "object",
        "required": [
          "ColumnName",
          "NewColumnName"
        ],
        "properties": {
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "The name of the column to be renamed."
              }
            ]
          },
          "NewColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "The new name for the column."
              }
            ]
          }
        },
        "description": "A transform operation that renames a column."
      },
      "CastColumnTypeOperation": {
        "type": "object",
        "required": [
          "ColumnName",
          "NewColumnType"
        ],
        "properties": {
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "Column name."
              }
            ]
          },
          "NewColumnType": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnDataType"
              },
              {
                "description": "New column data type."
              }
            ]
          },
          "Format": {
            "allOf": [
              {
                "$ref": "#/$defs/TypeCastFormat"
              },
              {
                "description": "When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format."
              }
            ]
          }
        },
        "description": "A transform operation that casts a column to a different type."
      },
      "ColumnDataType": {
        "type": "string",
        "enum": [
          "STRING",
          "INTEGER",
          "DECIMAL",
          "DATETIME"
        ]
      },
      "TypeCastFormat": {
        "type": "string",
        "maxLength": 32
      },
      "TagColumnOperation": {
        "type": "object",
        "required": [
          "ColumnName",
          "Tags"
        ],
        "properties": {
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "The column that this operation acts on."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnTagList"
              },
              {
                "description": "<p>The dataset column tag, currently only used for geospatial type tagging.</p> <note> <p>This is not tags for the Amazon Web Services tagging feature.</p> </note>"
              }
            ]
          }
        },
        "description": "A transform operation that tags a column with additional information."
      },
      "ColumnTagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ColumnTag"
        },
        "minItems": 1,
        "maxItems": 16
      },
      "ColumnTag": {
        "type": "object",
        "properties": {
          "ColumnGeographicRole": {
            "allOf": [
              {
                "$ref": "#/$defs/GeoSpatialDataRole"
              },
              {
                "description": "A geospatial role for a column."
              }
            ]
          },
          "ColumnDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnDescription"
              },
              {
                "description": "A description for a column."
              }
            ]
          }
        },
        "description": "A tag for a column in a <code> <a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_TagColumnOperation.html\">TagColumnOperation</a> </code> structure. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "GeoSpatialDataRole": {
        "type": "string",
        "enum": [
          "COUNTRY",
          "STATE",
          "COUNTY",
          "CITY",
          "POSTCODE",
          "LONGITUDE",
          "LATITUDE"
        ]
      },
      "ColumnDescription": {
        "type": "object",
        "properties": {
          "Text": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnDescriptiveText"
              },
              {
                "description": "The text of a description for a column."
              }
            ]
          }
        },
        "description": "Metadata that contains a description for a column."
      },
      "ColumnDescriptiveText": {
        "type": "string",
        "minLength": 0,
        "maxLength": 500
      },
      "UntagColumnOperation": {
        "type": "object",
        "required": [
          "ColumnName",
          "TagNames"
        ],
        "properties": {
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnName"
              },
              {
                "description": "The column that this operation acts on."
              }
            ]
          },
          "TagNames": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnTagNames"
              },
              {
                "description": "The column tags to remove from this column."
              }
            ]
          }
        },
        "description": "A transform operation that removes tags associated with a column."
      },
      "ColumnTagNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ColumnTagName"
        }
      },
      "ColumnTagName": {
        "type": "string",
        "enum": [
          "COLUMN_GEOGRAPHIC_ROLE",
          "COLUMN_DESCRIPTION"
        ]
      },
      "OverrideDatasetParameterOperation": {
        "type": "object",
        "required": [
          "ParameterName"
        ],
        "properties": {
          "ParameterName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterName"
              },
              {
                "description": "The name of the parameter to be overridden with different values."
              }
            ]
          },
          "NewParameterName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterName"
              },
              {
                "description": "The new name for the parameter."
              }
            ]
          },
          "NewDefaultValues": {
            "allOf": [
              {
                "$ref": "#/$defs/NewDefaultValues"
              },
              {
                "description": "The new default values for the parameter."
              }
            ]
          }
        },
        "description": "A transform operation that overrides the dataset parameter values that are defined in another dataset."
      },
      "DatasetParameterName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9]+$",
        "minLength": 1,
        "maxLength": 2048
      },
      "NewDefaultValues": {
        "type": "object",
        "properties": {
          "StringStaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/StringDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given string parameter."
              }
            ]
          },
          "DecimalStaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DecimalDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given decimal parameter."
              }
            ]
          },
          "DateTimeStaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DateTimeDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given date time parameter."
              }
            ]
          },
          "IntegerStaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given integer parameter."
              }
            ]
          }
        },
        "description": "The configuration that overrides the existing default values for a dataset parameter that is inherited from another dataset."
      },
      "StringDatasetParameterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringDatasetParameterDefaultValue"
        },
        "minItems": 1,
        "maxItems": 32
      },
      "StringDatasetParameterDefaultValue": {
        "type": "string",
        "description": "The default value for the string parameter.",
        "minLength": 0,
        "maxLength": 512
      },
      "DecimalDatasetParameterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DecimalDatasetParameterDefaultValue"
        },
        "minItems": 1,
        "maxItems": 32
      },
      "DecimalDatasetParameterDefaultValue": {
        "type": "number",
        "description": "The default value for the decimal parameter.",
        "format": "double"
      },
      "DateTimeDatasetParameterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DateTimeDatasetParameterDefaultValue"
        },
        "minItems": 1,
        "maxItems": 32
      },
      "DateTimeDatasetParameterDefaultValue": {
        "type": "string",
        "description": "The default value for the date time parameter.",
        "format": "date-time"
      },
      "IntegerDatasetParameterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/IntegerDatasetParameterDefaultValue"
        },
        "minItems": 1,
        "maxItems": 32
      },
      "IntegerDatasetParameterDefaultValue": {
        "type": "integer",
        "description": "The default value for the integer parameter."
      },
      "LogicalTableSource": {
        "type": "object",
        "properties": {
          "JoinInstruction": {
            "allOf": [
              {
                "$ref": "#/$defs/JoinInstruction"
              },
              {
                "description": "Specifies the result of a join of two logical tables."
              }
            ]
          },
          "PhysicalTableId": {
            "allOf": [
              {
                "$ref": "#/$defs/PhysicalTableId"
              },
              {
                "description": "Physical table ID."
              }
            ]
          },
          "DataSetArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Number (ARN) of the parent dataset."
              }
            ]
          }
        },
        "description": "Information about the source of a logical table. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "JoinInstruction": {
        "type": "object",
        "required": [
          "LeftOperand",
          "RightOperand",
          "Type",
          "OnClause"
        ],
        "properties": {
          "LeftOperand": {
            "allOf": [
              {
                "$ref": "#/$defs/LogicalTableId"
              },
              {
                "description": "The operand on the left side of a join."
              }
            ]
          },
          "RightOperand": {
            "allOf": [
              {
                "$ref": "#/$defs/LogicalTableId"
              },
              {
                "description": "The operand on the right side of a join."
              }
            ]
          },
          "LeftJoinKeyProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/JoinKeyProperties"
              },
              {
                "description": "Join key properties of the left operand."
              }
            ]
          },
          "RightJoinKeyProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/JoinKeyProperties"
              },
              {
                "description": "Join key properties of the right operand."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/JoinType"
              },
              {
                "description": "The type of join that it is."
              }
            ]
          },
          "OnClause": {
            "allOf": [
              {
                "$ref": "#/$defs/OnClause"
              },
              {
                "description": "The join instructions provided in the <code>ON</code> clause of a join."
              }
            ]
          }
        },
        "description": "The instructions associated with a join. "
      },
      "LogicalTableId": {
        "type": "string",
        "pattern": "[0-9a-zA-Z-]*",
        "description": "An identifier for the logical table that is defined in the dataset",
        "minLength": 1,
        "maxLength": 64
      },
      "JoinKeyProperties": {
        "type": "object",
        "properties": {
          "UniqueKey": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance."
              }
            ]
          }
        },
        "description": "Properties associated with the columns participating in a join."
      },
      "JoinType": {
        "type": "string",
        "enum": [
          "INNER",
          "OUTER",
          "LEFT",
          "RIGHT"
        ]
      },
      "OnClause": {
        "type": "string",
        "minLength": 1,
        "maxLength": 512
      },
      "PhysicalTableId": {
        "type": "string",
        "pattern": "[0-9a-zA-Z-]*",
        "minLength": 1,
        "maxLength": 64
      },
      "ColumnGroup": {
        "type": "object",
        "properties": {
          "GeoSpatialColumnGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/GeoSpatialColumnGroup"
              },
              {
                "description": "Geospatial column group that denotes a hierarchy."
              }
            ]
          }
        },
        "description": "Groupings of columns that work together in certain Amazon QuickSight features. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "GeoSpatialColumnGroup": {
        "type": "object",
        "required": [
          "Name",
          "Columns"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnGroupName"
              },
              {
                "description": "A display name for the hierarchy."
              }
            ]
          },
          "CountryCode": {
            "allOf": [
              {
                "$ref": "#/$defs/GeoSpatialCountryCode"
              },
              {
                "description": "Country code."
              }
            ]
          },
          "Columns": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnList"
              },
              {
                "description": "Columns in this hierarchy."
              }
            ]
          }
        },
        "description": "Geospatial column group that denotes a hierarchy."
      },
      "ColumnGroupName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "GeoSpatialCountryCode": {
        "type": "string",
        "enum": [
          "US"
        ]
      },
      "ColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ColumnName"
        },
        "minItems": 1,
        "maxItems": 16
      },
      "FieldFolder": {
        "type": "object",
        "properties": {
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldFolderDescription"
              },
              {
                "description": "The description for a field folder."
              }
            ]
          },
          "columns": {
            "allOf": [
              {
                "$ref": "#/$defs/FolderColumnList"
              },
              {
                "description": "A folder has a list of columns. A column can only be in one folder."
              }
            ]
          }
        },
        "description": "A FieldFolder element is a folder that contains fields and nested subfolders."
      },
      "FieldFolderDescription": {
        "type": "string",
        "maxLength": 500
      },
      "FolderColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "maxItems": 5000
      },
      "Namespace": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9._-]*$",
        "maxLength": 64
      },
      "RowLevelPermissionPolicy": {
        "type": "string",
        "enum": [
          "GRANT_ACCESS",
          "DENY_ACCESS"
        ]
      },
      "RowLevelPermissionFormatVersion": {
        "type": "string",
        "enum": [
          "VERSION_1",
          "VERSION_2"
        ]
      },
      "Status": {
        "type": "string",
        "enum": [
          "ENABLED",
          "DISABLED"
        ]
      },
      "RowLevelPermissionTagRuleList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RowLevelPermissionTagRule"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "RowLevelPermissionTagRule": {
        "type": "object",
        "required": [
          "TagKey",
          "ColumnName"
        ],
        "properties": {
          "TagKey": {
            "allOf": [
              {
                "$ref": "#/$defs/SessionTagKey"
              },
              {
                "description": "The unique key for a tag."
              }
            ]
          },
          "ColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The column name that a tag key is assigned to."
              }
            ]
          },
          "TagMultiValueDelimiter": {
            "allOf": [
              {
                "$ref": "#/$defs/RowLevelPermissionTagDelimiter"
              },
              {
                "description": "A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma."
              }
            ]
          },
          "MatchAllValue": {
            "allOf": [
              {
                "$ref": "#/$defs/SessionTagValue"
              },
              {
                "description": "A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value."
              }
            ]
          }
        },
        "description": "A set of rules associated with a tag."
      },
      "SessionTagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "RowLevelPermissionTagDelimiter": {
        "type": "string",
        "maxLength": 10
      },
      "SessionTagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256,
        "format": "password"
      },
      "RowLevelPermissionTagRuleConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RowLevelPermissionTagRuleConfiguration"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "RowLevelPermissionTagRuleConfiguration": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SessionTagKey"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "ColumnLevelPermissionRule": {
        "type": "object",
        "properties": {
          "Principals": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalList"
              },
              {
                "description": "An array of Amazon Resource Names (ARNs) for Amazon QuickSight users or groups."
              }
            ]
          },
          "ColumnNames": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnNameList"
              },
              {
                "description": "An array of column names."
              }
            ]
          }
        },
        "description": "A rule defined to grant access on one or more restricted columns. Each dataset can have multiple rules. To create a restricted column, you add it to one or more rules. Each rule must contain at least one column and at least one user or group. To be able to see a restricted column, a user or group needs to be added to a rule for that column."
      },
      "PrincipalList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "ColumnNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 1
      },
      "DatasetParameter": {
        "type": "object",
        "properties": {
          "StringDatasetParameter": {
            "allOf": [
              {
                "$ref": "#/$defs/StringDatasetParameter"
              },
              {
                "description": "A string parameter that is created in the dataset."
              }
            ]
          },
          "DecimalDatasetParameter": {
            "allOf": [
              {
                "$ref": "#/$defs/DecimalDatasetParameter"
              },
              {
                "description": "A decimal parameter that is created in the dataset."
              }
            ]
          },
          "IntegerDatasetParameter": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerDatasetParameter"
              },
              {
                "description": "An integer parameter that is created in the dataset."
              }
            ]
          },
          "DateTimeDatasetParameter": {
            "allOf": [
              {
                "$ref": "#/$defs/DateTimeDatasetParameter"
              },
              {
                "description": "A date time parameter that is created in the dataset."
              }
            ]
          }
        },
        "description": "A dataset parameter."
      },
      "StringDatasetParameter": {
        "type": "object",
        "required": [
          "Id",
          "Name",
          "ValueType"
        ],
        "properties": {
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterId"
              },
              {
                "description": "An identifier for the string parameter that is created in the dataset."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterName"
              },
              {
                "description": "The name of the string parameter that is created in the dataset."
              }
            ]
          },
          "ValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterValueType"
              },
              {
                "description": "The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>."
              }
            ]
          },
          "DefaultValues": {
            "allOf": [
              {
                "$ref": "#/$defs/StringDatasetParameterDefaultValues"
              },
              {
                "description": "A list of default values for a given string dataset parameter type. This structure only accepts static values."
              }
            ]
          }
        },
        "description": "A string parameter for a dataset."
      },
      "DatasetParameterId": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "DatasetParameterValueType": {
        "type": "string",
        "enum": [
          "MULTI_VALUED",
          "SINGLE_VALUED"
        ]
      },
      "StringDatasetParameterDefaultValues": {
        "type": "object",
        "properties": {
          "StaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/StringDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given string parameter."
              }
            ]
          }
        },
        "description": "The default values of a string parameter."
      },
      "DecimalDatasetParameter": {
        "type": "object",
        "required": [
          "Id",
          "Name",
          "ValueType"
        ],
        "properties": {
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterId"
              },
              {
                "description": "An identifier for the decimal parameter created in the dataset."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterName"
              },
              {
                "description": "The name of the decimal parameter that is created in the dataset."
              }
            ]
          },
          "ValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterValueType"
              },
              {
                "description": "The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>."
              }
            ]
          },
          "DefaultValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DecimalDatasetParameterDefaultValues"
              },
              {
                "description": "A list of default values for a given decimal parameter. This structure only accepts static values."
              }
            ]
          }
        },
        "description": "A decimal parameter for a dataset."
      },
      "DecimalDatasetParameterDefaultValues": {
        "type": "object",
        "properties": {
          "StaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DecimalDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given decimal parameter."
              }
            ]
          }
        },
        "description": "The default values of a decimal parameter."
      },
      "IntegerDatasetParameter": {
        "type": "object",
        "required": [
          "Id",
          "Name",
          "ValueType"
        ],
        "properties": {
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterId"
              },
              {
                "description": "An identifier for the integer parameter created in the dataset."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterName"
              },
              {
                "description": "The name of the integer parameter that is created in the dataset."
              }
            ]
          },
          "ValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterValueType"
              },
              {
                "description": "The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>."
              }
            ]
          },
          "DefaultValues": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerDatasetParameterDefaultValues"
              },
              {
                "description": "A list of default values for a given integer parameter. This structure only accepts static values."
              }
            ]
          }
        },
        "description": "An integer parameter for a dataset."
      },
      "IntegerDatasetParameterDefaultValues": {
        "type": "object",
        "properties": {
          "StaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given integer parameter."
              }
            ]
          }
        },
        "description": "The default values of an integer parameter."
      },
      "DateTimeDatasetParameter": {
        "type": "object",
        "required": [
          "Id",
          "Name",
          "ValueType"
        ],
        "properties": {
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterId"
              },
              {
                "description": "An identifier for the parameter that is created in the dataset."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterName"
              },
              {
                "description": "The name of the date time parameter that is created in the dataset."
              }
            ]
          },
          "ValueType": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetParameterValueType"
              },
              {
                "description": "The value type of the dataset parameter. Valid values are <code>single value</code> or <code>multi value</code>."
              }
            ]
          },
          "TimeGranularity": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeGranularity"
              },
              {
                "description": "The time granularity of the date time parameter."
              }
            ]
          },
          "DefaultValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DateTimeDatasetParameterDefaultValues"
              },
              {
                "description": "A list of default values for a given date time parameter. This structure only accepts static values."
              }
            ]
          }
        },
        "description": "A date time parameter for a dataset."
      },
      "TimeGranularity": {
        "type": "string",
        "enum": [
          "YEAR",
          "QUARTER",
          "MONTH",
          "WEEK",
          "DAY",
          "HOUR",
          "MINUTE",
          "SECOND",
          "MILLISECOND"
        ]
      },
      "DateTimeDatasetParameterDefaultValues": {
        "type": "object",
        "properties": {
          "StaticValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DateTimeDatasetParameterValueList"
              },
              {
                "description": "A list of static default values for a given date time parameter."
              }
            ]
          }
        },
        "description": "The default values of a date time parameter."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://quicksight.us-east-1.amazonaws.com/accounts/{AwsAccountId}/data-sets/{DataSetId}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**DataSetId**",
            "**IngestionArn**",
            "**IngestionId**",
            "**RequestId**",
            "**Status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
