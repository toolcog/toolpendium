{
  "name": "StartAssetBundleImportJob",
  "description": "<p>Starts an Asset Bundle import job.</p> <p>An Asset Bundle import job imports specified Amazon QuickSight assets into an Amazon QuickSight account. You can also choose to import a naming prefix and specified configuration overrides. The assets that are contained in the bundle file that you provide are used to create or update a new or existing asset in your Amazon QuickSight account. Each Amazon QuickSight account can run up to 5 import jobs concurrently.</p> <p>The API caller must have the necessary <code>\"create\"</code>, <code>\"describe\"</code>, and <code>\"update\"</code> permissions in their IAM role to access each resource type that is contained in the bundle file before the resources can be imported.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "AwsAccountId": {
        "type": "string",
        "pattern": "^[0-9]{12}$",
        "minLength": 12,
        "maxLength": 12,
        "description": "The ID of the Amazon Web Services account to import assets into. "
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "AssetBundleImportJobId",
          "AssetBundleImportSource"
        ],
        "properties": {
          "AssetBundleImportJobId": {
            "description": "The ID of the job. This ID is unique while the job is running. After the job is completed, you can reuse this ID for another job.",
            "type": "string",
            "pattern": "[\\w\\-]+",
            "minLength": 1,
            "maxLength": 512
          },
          "AssetBundleImportSource": {
            "description": "The source of the asset bundle zip file that contains the data that you want to import. The file must be in <code>QUICKSIGHT_JSON</code> format.",
            "type": "object",
            "properties": {
              "Body": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportBodyBlob"
                  },
                  {
                    "description": "<p>The bytes of the base64 encoded asset bundle import zip file. This file can't exceed 20 MB.</p> <p>If you are calling the API operations from the Amazon Web Services SDK for Java, JavaScript, Python, or PHP, the SDK encodes base64 automatically to allow the direct setting of the zip file's bytes. If you are using an SDK for a different language or receiving related errors, try to base64 encode your data.</p>"
                  }
                ]
              },
              "S3Uri": {
                "allOf": [
                  {
                    "$ref": "#/$defs/S3Uri"
                  },
                  {
                    "description": "The Amazon S3 URI for an asset bundle import file that exists in an Amazon S3 bucket that the caller has read access to. The file must be a zip format file and can't exceed 20 MB."
                  }
                ]
              }
            }
          },
          "OverrideParameters": {
            "description": "A list of overrides that modify the asset bundle resource configuration before the resource is imported.",
            "type": "object",
            "properties": {
              "ResourceIdOverrideConfiguration": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobResourceIdOverrideConfiguration"
                  },
                  {
                    "description": "An optional structure that configures resource ID overrides to be applied within the import job."
                  }
                ]
              },
              "VPCConnections": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobVPCConnectionOverrideParametersList"
                  },
                  {
                    "description": "A list of overrides for any <code>VPCConnection</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              },
              "RefreshSchedules": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobRefreshScheduleOverrideParametersList"
                  },
                  {
                    "description": "A list of overrides for any <code>RefreshSchedule</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              },
              "DataSources": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobDataSourceOverrideParametersList"
                  },
                  {
                    "description": " A list of overrides for any <code>DataSource</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              },
              "DataSets": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobDataSetOverrideParametersList"
                  },
                  {
                    "description": "A list of overrides for any <code>DataSet</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              },
              "Themes": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobThemeOverrideParametersList"
                  },
                  {
                    "description": "A list of overrides for any <code>Theme</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              },
              "Analyses": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobAnalysisOverrideParametersList"
                  },
                  {
                    "description": "A list of overrides for any <code>Analysis</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              },
              "Dashboards": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AssetBundleImportJobDashboardOverrideParametersList"
                  },
                  {
                    "description": "A list of overrides for any <code>Dashboard</code> resources that are present in the asset bundle that is imported."
                  }
                ]
              }
            }
          },
          "FailureAction": {
            "description": "<p>The failure action for the import job.</p> <p>If you choose <code>ROLLBACK</code>, failed import jobs will attempt to undo any asset changes caused by the failed job.</p> <p>If you choose <code>DO_NOTHING</code>, failed import jobs will not attempt to roll back any asset changes caused by the failed job, possibly keeping the Amazon QuickSight account in an inconsistent state.</p>",
            "type": "string",
            "enum": [
              "DO_NOTHING",
              "ROLLBACK"
            ]
          }
        }
      }
    },
    "required": [
      "AwsAccountId",
      "body"
    ],
    "$defs": {
      "AssetBundleImportBodyBlob": {
        "type": "string",
        "minLength": 0,
        "maxLength": 20971520,
        "format": "password"
      },
      "S3Uri": {
        "type": "string",
        "pattern": "^(https|s3)://([^/]+)/?(.*)$"
      },
      "AssetBundleImportJobResourceIdOverrideConfiguration": {
        "type": "object",
        "properties": {
          "PrefixForAllResources": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "An option to request a CloudFormation variable for a prefix to be prepended to each resource's ID before import. The prefix is only added to the asset IDs and does not change the name of the asset."
              }
            ]
          }
        },
        "description": "An optional structure that configures resource ID overrides for the import job."
      },
      "String": {
        "type": "string"
      },
      "AssetBundleImportJobVPCConnectionOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobVPCConnectionOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobVPCConnectionOverrideParameters": {
        "type": "object",
        "required": [
          "VPCConnectionId"
        ],
        "properties": {
          "VPCConnectionId": {
            "allOf": [
              {
                "$ref": "#/$defs/VPCConnectionResourceIdUnrestricted"
              },
              {
                "description": "The ID of the VPC Connection to apply overrides to."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "A new name for the VPC connection."
              }
            ]
          },
          "SubnetIds": {
            "allOf": [
              {
                "$ref": "#/$defs/SubnetIdList"
              },
              {
                "description": "A list of new subnet IDs for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region."
              }
            ]
          },
          "SecurityGroupIds": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroupIdList"
              },
              {
                "description": "A new security group ID for the VPC connection you are importing. This field is required if you are importing the VPC connection from another Amazon Web Services account or Region."
              }
            ]
          },
          "DnsResolvers": {
            "allOf": [
              {
                "$ref": "#/$defs/DnsResolverList"
              },
              {
                "description": "An optional override of DNS resolvers to be used by the VPC connection."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "An optional override of the role ARN to be used by the VPC connection."
              }
            ]
          }
        },
        "description": "The override parameters for a single VPC connection that is imported."
      },
      "VPCConnectionResourceIdUnrestricted": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "ResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "SubnetIdList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SubnetId"
        },
        "minItems": 2,
        "maxItems": 15
      },
      "SubnetId": {
        "type": "string",
        "pattern": "^subnet-[0-9a-z]*$",
        "minLength": 1,
        "maxLength": 255
      },
      "SecurityGroupIdList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SecurityGroupId"
        },
        "minItems": 1,
        "maxItems": 16
      },
      "SecurityGroupId": {
        "type": "string",
        "pattern": "^sg-[0-9a-z]*$",
        "minLength": 1,
        "maxLength": 255
      },
      "DnsResolverList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/IPv4Address"
        },
        "maxItems": 15
      },
      "IPv4Address": {
        "type": "string",
        "minLength": 7,
        "maxLength": 15
      },
      "RoleArn": {
        "type": "string",
        "minLength": 20,
        "maxLength": 2048
      },
      "AssetBundleImportJobRefreshScheduleOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobRefreshScheduleOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobRefreshScheduleOverrideParameters": {
        "type": "object",
        "required": [
          "DataSetId",
          "ScheduleId"
        ],
        "properties": {
          "DataSetId": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceId"
              },
              {
                "description": "A partial identifier for the specific <code>RefreshSchedule</code> resource that is being overridden. This structure is used together with the <code>ScheduleID</code> structure."
              }
            ]
          },
          "ScheduleId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A partial identifier for the specific <code>RefreshSchedule</code> resource being overridden. This structure is used together with the <code>DataSetId</code> structure."
              }
            ]
          },
          "StartAfterDateTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "An override for the <code>StartAfterDateTime</code> of a <code>RefreshSchedule</code>. Make sure that the <code>StartAfterDateTime</code> is set to a time that takes place in the future."
              }
            ]
          }
        },
        "description": "A list of overrides for a specific <code>RefreshsSchedule</code> resource that is present in the asset bundle that is imported."
      },
      "ResourceId": {
        "type": "string"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "AssetBundleImportJobDataSourceOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobDataSourceOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobDataSourceOverrideParameters": {
        "type": "object",
        "required": [
          "DataSourceId"
        ],
        "properties": {
          "DataSourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceId"
              },
              {
                "description": "The ID of the data source to apply overrides to."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "A new name for the data source."
              }
            ]
          },
          "DataSourceParameters": {
            "$ref": "#/$defs/DataSourceParameters"
          },
          "VpcConnectionProperties": {
            "$ref": "#/$defs/VpcConnectionProperties"
          },
          "SslProperties": {
            "$ref": "#/$defs/SslProperties"
          },
          "Credentials": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetBundleImportJobDataSourceCredentials"
              },
              {
                "description": "An optional structure that provides the credentials to be used to create the imported data source."
              }
            ]
          }
        },
        "description": "The override parameters for a single data source that is being imported."
      },
      "DataSourceParameters": {
        "type": "object",
        "properties": {
          "AmazonElasticsearchParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonElasticsearchParameters"
              },
              {
                "description": "The parameters for OpenSearch."
              }
            ]
          },
          "AthenaParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AthenaParameters"
              },
              {
                "description": "The parameters for Amazon Athena."
              }
            ]
          },
          "AuroraParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AuroraParameters"
              },
              {
                "description": "The parameters for Amazon Aurora MySQL."
              }
            ]
          },
          "AuroraPostgreSqlParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AuroraPostgreSqlParameters"
              },
              {
                "description": "The parameters for Amazon Aurora."
              }
            ]
          },
          "AwsIotAnalyticsParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsIotAnalyticsParameters"
              },
              {
                "description": "The parameters for IoT Analytics."
              }
            ]
          },
          "JiraParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/JiraParameters"
              },
              {
                "description": "The parameters for Jira."
              }
            ]
          },
          "MariaDbParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/MariaDbParameters"
              },
              {
                "description": "The parameters for MariaDB."
              }
            ]
          },
          "MySqlParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/MySqlParameters"
              },
              {
                "description": "The parameters for MySQL."
              }
            ]
          },
          "OracleParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/OracleParameters"
              },
              {
                "description": "The parameters for Oracle."
              }
            ]
          },
          "PostgreSqlParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PostgreSqlParameters"
              },
              {
                "description": "The parameters for PostgreSQL."
              }
            ]
          },
          "PrestoParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PrestoParameters"
              },
              {
                "description": "The parameters for Presto."
              }
            ]
          },
          "RdsParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/RdsParameters"
              },
              {
                "description": "The parameters for Amazon RDS."
              }
            ]
          },
          "RedshiftParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/RedshiftParameters"
              },
              {
                "description": "The parameters for Amazon Redshift."
              }
            ]
          },
          "S3Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Parameters"
              },
              {
                "description": "The parameters for S3."
              }
            ]
          },
          "ServiceNowParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceNowParameters"
              },
              {
                "description": "The parameters for ServiceNow."
              }
            ]
          },
          "SnowflakeParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SnowflakeParameters"
              },
              {
                "description": "The parameters for Snowflake."
              }
            ]
          },
          "SparkParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SparkParameters"
              },
              {
                "description": "The parameters for Spark."
              }
            ]
          },
          "SqlServerParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SqlServerParameters"
              },
              {
                "description": "The parameters for SQL Server."
              }
            ]
          },
          "TeradataParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TeradataParameters"
              },
              {
                "description": "The parameters for Teradata."
              }
            ]
          },
          "TwitterParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TwitterParameters"
              },
              {
                "description": "The parameters for Twitter."
              }
            ]
          },
          "AmazonOpenSearchParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonOpenSearchParameters"
              },
              {
                "description": "The parameters for OpenSearch."
              }
            ]
          },
          "ExasolParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ExasolParameters"
              },
              {
                "description": "The parameters for Exasol."
              }
            ]
          },
          "DatabricksParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/DatabricksParameters"
              },
              {
                "description": "The required parameters that are needed to connect to a Databricks data source."
              }
            ]
          }
        },
        "description": "The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "AmazonElasticsearchParameters": {
        "type": "object",
        "required": [
          "Domain"
        ],
        "properties": {
          "Domain": {
            "allOf": [
              {
                "$ref": "#/$defs/Domain"
              },
              {
                "description": "The OpenSearch domain."
              }
            ]
          }
        },
        "description": "The parameters for OpenSearch."
      },
      "Domain": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "AthenaParameters": {
        "type": "object",
        "properties": {
          "WorkGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkGroup"
              },
              {
                "description": "The workgroup that Amazon Athena uses."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active."
              }
            ]
          }
        },
        "description": "Parameters for Amazon Athena."
      },
      "WorkGroup": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "AuroraParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "Parameters for Amazon Aurora."
      },
      "Host": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Port": {
        "type": "integer",
        "minimum": 1,
        "maximum": 65535
      },
      "Database": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "AuroraPostgreSqlParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "The Amazon Aurora PostgreSQL-Compatible host to connect to."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port that Amazon Aurora PostgreSQL is listening on."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "The Amazon Aurora PostgreSQL database to connect to."
              }
            ]
          }
        },
        "description": "Parameters for Amazon Aurora PostgreSQL-Compatible Edition."
      },
      "AwsIotAnalyticsParameters": {
        "type": "object",
        "required": [
          "DataSetName"
        ],
        "properties": {
          "DataSetName": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSetName"
              },
              {
                "description": "Dataset name."
              }
            ]
          }
        },
        "description": "The parameters for IoT Analytics."
      },
      "DataSetName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "JiraParameters": {
        "type": "object",
        "required": [
          "SiteBaseUrl"
        ],
        "properties": {
          "SiteBaseUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/SiteBaseUrl"
              },
              {
                "description": "The base URL of the Jira site."
              }
            ]
          }
        },
        "description": "The parameters for Jira."
      },
      "SiteBaseUrl": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "MariaDbParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for MariaDB."
      },
      "MySqlParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for MySQL."
      },
      "OracleParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "An Oracle host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "The database."
              }
            ]
          }
        },
        "description": "The parameters for Oracle."
      },
      "PostgreSqlParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for PostgreSQL."
      },
      "PrestoParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Catalog"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Catalog": {
            "allOf": [
              {
                "$ref": "#/$defs/Catalog"
              },
              {
                "description": "Catalog."
              }
            ]
          }
        },
        "description": "The parameters for Presto."
      },
      "Catalog": {
        "type": "string",
        "maxLength": 128
      },
      "RdsParameters": {
        "type": "object",
        "required": [
          "InstanceId",
          "Database"
        ],
        "properties": {
          "InstanceId": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceId"
              },
              {
                "description": "Instance ID."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for Amazon RDS."
      },
      "InstanceId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "RedshiftParameters": {
        "type": "object",
        "required": [
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host. This field can be blank if <code>ClusterId</code> is provided."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalPort"
              },
              {
                "description": "Port. This field can be blank if the <code>ClusterId</code> is provided."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          },
          "ClusterId": {
            "allOf": [
              {
                "$ref": "#/$defs/ClusterId"
              },
              {
                "description": "Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided."
              }
            ]
          }
        },
        "description": "The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set."
      },
      "OptionalPort": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "ClusterId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "S3Parameters": {
        "type": "object",
        "required": [
          "ManifestFileLocation"
        ],
        "properties": {
          "ManifestFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestFileLocation"
              },
              {
                "description": "Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active."
              }
            ]
          }
        },
        "description": "The parameters for S3."
      },
      "ManifestFileLocation": {
        "type": "object",
        "required": [
          "Bucket",
          "Key"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "Amazon S3 bucket."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Key"
              },
              {
                "description": "Amazon S3 key that identifies an object."
              }
            ]
          }
        },
        "description": "Amazon S3 manifest file location."
      },
      "S3Bucket": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "S3Key": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ServiceNowParameters": {
        "type": "object",
        "required": [
          "SiteBaseUrl"
        ],
        "properties": {
          "SiteBaseUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/SiteBaseUrl"
              },
              {
                "description": "URL of the base site."
              }
            ]
          }
        },
        "description": "The parameters for ServiceNow."
      },
      "SnowflakeParameters": {
        "type": "object",
        "required": [
          "Host",
          "Database",
          "Warehouse"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          },
          "Warehouse": {
            "allOf": [
              {
                "$ref": "#/$defs/Warehouse"
              },
              {
                "description": "Warehouse."
              }
            ]
          }
        },
        "description": "The parameters for Snowflake."
      },
      "Warehouse": {
        "type": "string",
        "maxLength": 128
      },
      "SparkParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          }
        },
        "description": "The parameters for Spark."
      },
      "SqlServerParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for SQL Server."
      },
      "TeradataParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for Teradata."
      },
      "TwitterParameters": {
        "type": "object",
        "required": [
          "Query",
          "MaxRows"
        ],
        "properties": {
          "Query": {
            "allOf": [
              {
                "$ref": "#/$defs/Query"
              },
              {
                "description": "Twitter query string."
              }
            ]
          },
          "MaxRows": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveInteger"
              },
              {
                "description": "Maximum number of rows to query Twitter."
              }
            ]
          }
        },
        "description": "The parameters for Twitter."
      },
      "Query": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "PositiveInteger": {
        "type": "integer",
        "minimum": 1
      },
      "AmazonOpenSearchParameters": {
        "type": "object",
        "required": [
          "Domain"
        ],
        "properties": {
          "Domain": {
            "allOf": [
              {
                "$ref": "#/$defs/Domain"
              },
              {
                "description": "The OpenSearch domain."
              }
            ]
          }
        },
        "description": "The parameters for OpenSearch."
      },
      "ExasolParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "The hostname or IP address of the Exasol data source."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port for the Exasol data source."
              }
            ]
          }
        },
        "description": "The required parameters for connecting to an Exasol data source."
      },
      "DatabricksParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "SqlEndpointPath"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "The host name of the Databricks data source."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port for the Databricks data source."
              }
            ]
          },
          "SqlEndpointPath": {
            "allOf": [
              {
                "$ref": "#/$defs/SqlEndpointPath"
              },
              {
                "description": "The HTTP path of the Databricks data source."
              }
            ]
          }
        },
        "description": "The required parameters that are needed to connect to a Databricks data source."
      },
      "SqlEndpointPath": {
        "type": "string",
        "minLength": 1,
        "maxLength": 4096
      },
      "VpcConnectionProperties": {
        "type": "object",
        "required": [
          "VpcConnectionArn"
        ],
        "properties": {
          "VpcConnectionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) for the VPC connection."
              }
            ]
          }
        },
        "description": "VPC connection properties."
      },
      "Arn": {
        "type": "string"
      },
      "SslProperties": {
        "type": "object",
        "properties": {
          "DisableSsl": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean option to control whether SSL should be disabled."
              }
            ]
          }
        },
        "description": "Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source."
      },
      "Boolean": {
        "type": "boolean"
      },
      "AssetBundleImportJobDataSourceCredentials": {
        "type": "object",
        "properties": {
          "CredentialPair": {
            "allOf": [
              {
                "$ref": "#/$defs/AssetBundleImportJobDataSourceCredentialPair"
              },
              {
                "description": "A username and password credential pair to be used to create the imported data source. Keep this field blank if you are using a Secrets Manager secret to provide credentials."
              }
            ]
          },
          "SecretArn": {
            "allOf": [
              {
                "$ref": "#/$defs/SecretArn"
              },
              {
                "description": "The ARN of the Secrets Manager secret that's used to create the imported data source. Keep this field blank, unless you are using a secret in place of a credential pair."
              }
            ]
          }
        },
        "description": "The login credentials to use to import a data source resource."
      },
      "AssetBundleImportJobDataSourceCredentialPair": {
        "type": "object",
        "required": [
          "Username",
          "Password"
        ],
        "properties": {
          "Username": {
            "allOf": [
              {
                "$ref": "#/$defs/DbUsername"
              },
              {
                "description": "The username for the data source connection."
              }
            ]
          },
          "Password": {
            "allOf": [
              {
                "$ref": "#/$defs/Password"
              },
              {
                "description": "The password for the data source connection."
              }
            ]
          }
        },
        "description": "A username and password credential pair to use to import a data source resource."
      },
      "DbUsername": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "Password": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "SecretArn": {
        "type": "string",
        "pattern": "^arn:[-a-z0-9]*:secretsmanager:[-a-z0-9]*:[0-9]{12}:secret:.+",
        "minLength": 1,
        "maxLength": 2048
      },
      "AssetBundleImportJobDataSetOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobDataSetOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobDataSetOverrideParameters": {
        "type": "object",
        "required": [
          "DataSetId"
        ],
        "properties": {
          "DataSetId": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceId"
              },
              {
                "description": "The ID of the dataset to apply overrides to."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "A new name for the dataset."
              }
            ]
          }
        },
        "description": "The override parameters for a single dataset that is being imported."
      },
      "AssetBundleImportJobThemeOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobThemeOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobThemeOverrideParameters": {
        "type": "object",
        "required": [
          "ThemeId"
        ],
        "properties": {
          "ThemeId": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceId"
              },
              {
                "description": "The ID of the theme to apply overrides to."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "A new name for the theme."
              }
            ]
          }
        },
        "description": "The override parameters for a single theme that is imported."
      },
      "AssetBundleImportJobAnalysisOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobAnalysisOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobAnalysisOverrideParameters": {
        "type": "object",
        "required": [
          "AnalysisId"
        ],
        "properties": {
          "AnalysisId": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceId"
              },
              {
                "description": "The ID of the analysis that you ant to apply overrides to."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "A new name for the analysis."
              }
            ]
          }
        },
        "description": "The override parameters for a single analysis that is being imported."
      },
      "AssetBundleImportJobDashboardOverrideParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssetBundleImportJobDashboardOverrideParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "AssetBundleImportJobDashboardOverrideParameters": {
        "type": "object",
        "required": [
          "DashboardId"
        ],
        "properties": {
          "DashboardId": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceId"
              },
              {
                "description": "The ID of the dashboard that you want to apply overrides to."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "A new name for the dashboard."
              }
            ]
          }
        },
        "description": "The override parameters for a single dashboard that is being imported."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://quicksight.us-east-1.amazonaws.com/accounts/{AwsAccountId}/asset-bundle-import-jobs/import"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**AssetBundleImportJobId**",
            "**RequestId**",
            "**Status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
