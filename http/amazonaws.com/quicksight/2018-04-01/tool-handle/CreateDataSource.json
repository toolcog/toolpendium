{
  "name": "CreateDataSource",
  "description": "Creates a data source.",
  "parameters": {
    "type": "object",
    "properties": {
      "AwsAccountId": {
        "type": "string",
        "pattern": "^[0-9]{12}$",
        "minLength": 12,
        "maxLength": 12,
        "description": "The Amazon Web Services account ID."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "DataSourceId",
          "Name",
          "Type"
        ],
        "properties": {
          "DataSourceId": {
            "description": "An ID for the data source. This ID is unique per Amazon Web Services Region for each Amazon Web Services account. ",
            "type": "string"
          },
          "Name": {
            "description": "A display name for the data source.",
            "type": "string",
            "minLength": 1,
            "maxLength": 128
          },
          "Type": {
            "description": "<p>The type of the data source. To return a list of all data sources, use <code>ListDataSources</code>.</p> <p>Use <code>AMAZON_ELASTICSEARCH</code> for Amazon OpenSearch Service.</p>",
            "type": "string",
            "enum": [
              "ADOBE_ANALYTICS",
              "AMAZON_ELASTICSEARCH",
              "ATHENA",
              "AURORA",
              "AURORA_POSTGRESQL",
              "AWS_IOT_ANALYTICS",
              "GITHUB",
              "JIRA",
              "MARIADB",
              "MYSQL",
              "ORACLE",
              "POSTGRESQL",
              "PRESTO",
              "REDSHIFT",
              "S3",
              "SALESFORCE",
              "SERVICENOW",
              "SNOWFLAKE",
              "SPARK",
              "SQLSERVER",
              "TERADATA",
              "TWITTER",
              "TIMESTREAM",
              "AMAZON_OPENSEARCH",
              "EXASOL",
              "DATABRICKS"
            ]
          },
          "DataSourceParameters": {
            "description": "The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
            "type": "object",
            "properties": {
              "AmazonElasticsearchParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AmazonElasticsearchParameters"
                  },
                  {
                    "description": "The parameters for OpenSearch."
                  }
                ]
              },
              "AthenaParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AthenaParameters"
                  },
                  {
                    "description": "The parameters for Amazon Athena."
                  }
                ]
              },
              "AuroraParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AuroraParameters"
                  },
                  {
                    "description": "The parameters for Amazon Aurora MySQL."
                  }
                ]
              },
              "AuroraPostgreSqlParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AuroraPostgreSqlParameters"
                  },
                  {
                    "description": "The parameters for Amazon Aurora."
                  }
                ]
              },
              "AwsIotAnalyticsParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AwsIotAnalyticsParameters"
                  },
                  {
                    "description": "The parameters for IoT Analytics."
                  }
                ]
              },
              "JiraParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/JiraParameters"
                  },
                  {
                    "description": "The parameters for Jira."
                  }
                ]
              },
              "MariaDbParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MariaDbParameters"
                  },
                  {
                    "description": "The parameters for MariaDB."
                  }
                ]
              },
              "MySqlParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MySqlParameters"
                  },
                  {
                    "description": "The parameters for MySQL."
                  }
                ]
              },
              "OracleParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/OracleParameters"
                  },
                  {
                    "description": "The parameters for Oracle."
                  }
                ]
              },
              "PostgreSqlParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PostgreSqlParameters"
                  },
                  {
                    "description": "The parameters for PostgreSQL."
                  }
                ]
              },
              "PrestoParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PrestoParameters"
                  },
                  {
                    "description": "The parameters for Presto."
                  }
                ]
              },
              "RdsParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RdsParameters"
                  },
                  {
                    "description": "The parameters for Amazon RDS."
                  }
                ]
              },
              "RedshiftParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RedshiftParameters"
                  },
                  {
                    "description": "The parameters for Amazon Redshift."
                  }
                ]
              },
              "S3Parameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/S3Parameters"
                  },
                  {
                    "description": "The parameters for S3."
                  }
                ]
              },
              "ServiceNowParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ServiceNowParameters"
                  },
                  {
                    "description": "The parameters for ServiceNow."
                  }
                ]
              },
              "SnowflakeParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SnowflakeParameters"
                  },
                  {
                    "description": "The parameters for Snowflake."
                  }
                ]
              },
              "SparkParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SparkParameters"
                  },
                  {
                    "description": "The parameters for Spark."
                  }
                ]
              },
              "SqlServerParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SqlServerParameters"
                  },
                  {
                    "description": "The parameters for SQL Server."
                  }
                ]
              },
              "TeradataParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TeradataParameters"
                  },
                  {
                    "description": "The parameters for Teradata."
                  }
                ]
              },
              "TwitterParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TwitterParameters"
                  },
                  {
                    "description": "The parameters for Twitter."
                  }
                ]
              },
              "AmazonOpenSearchParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AmazonOpenSearchParameters"
                  },
                  {
                    "description": "The parameters for OpenSearch."
                  }
                ]
              },
              "ExasolParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ExasolParameters"
                  },
                  {
                    "description": "The parameters for Exasol."
                  }
                ]
              },
              "DatabricksParameters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DatabricksParameters"
                  },
                  {
                    "description": "The required parameters that are needed to connect to a Databricks data source."
                  }
                ]
              }
            }
          },
          "Credentials": {
            "description": "Data source credentials. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null.",
            "type": "object",
            "properties": {
              "CredentialPair": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CredentialPair"
                  },
                  {
                    "description": "Credential pair. For more information, see <code> <a href=\"https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CredentialPair.html\">CredentialPair</a> </code>."
                  }
                ]
              },
              "CopySourceArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CopySourceArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use. When <code>CopySourceArn</code> is not null, the credential pair from the data source in the ARN is used as the credentials for the <code>DataSourceCredentials</code> structure."
                  }
                ]
              },
              "SecretArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SecretArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager."
                  }
                ]
              }
            }
          },
          "Permissions": {
            "description": "A list of resource permissions on the data source.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/ResourcePermission"
            },
            "minItems": 1,
            "maxItems": 64
          },
          "VpcConnectionProperties": {
            "description": "VPC connection properties.",
            "type": "object",
            "properties": {
              "VpcConnectionArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) for the VPC connection."
                  }
                ]
              }
            }
          },
          "SslProperties": {
            "description": "Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying data source.",
            "type": "object",
            "properties": {
              "DisableSsl": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "A Boolean option to control whether SSL should be disabled."
                  }
                ]
              }
            }
          },
          "Tags": {
            "description": "Contains a map of the key-value pairs for the resource tag or tags assigned to the data source.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 1,
            "maxItems": 200
          }
        }
      }
    },
    "required": [
      "AwsAccountId",
      "body"
    ],
    "$defs": {
      "AmazonElasticsearchParameters": {
        "type": "object",
        "required": [
          "Domain"
        ],
        "properties": {
          "Domain": {
            "allOf": [
              {
                "$ref": "#/$defs/Domain"
              },
              {
                "description": "The OpenSearch domain."
              }
            ]
          }
        },
        "description": "The parameters for OpenSearch."
      },
      "Domain": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "AthenaParameters": {
        "type": "object",
        "properties": {
          "WorkGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkGroup"
              },
              {
                "description": "The workgroup that Amazon Athena uses."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active."
              }
            ]
          }
        },
        "description": "Parameters for Amazon Athena."
      },
      "WorkGroup": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "RoleArn": {
        "type": "string",
        "minLength": 20,
        "maxLength": 2048
      },
      "AuroraParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "Parameters for Amazon Aurora."
      },
      "Host": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Port": {
        "type": "integer",
        "minimum": 1,
        "maximum": 65535
      },
      "Database": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "AuroraPostgreSqlParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "The Amazon Aurora PostgreSQL-Compatible host to connect to."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port that Amazon Aurora PostgreSQL is listening on."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "The Amazon Aurora PostgreSQL database to connect to."
              }
            ]
          }
        },
        "description": "Parameters for Amazon Aurora PostgreSQL-Compatible Edition."
      },
      "AwsIotAnalyticsParameters": {
        "type": "object",
        "required": [
          "DataSetName"
        ],
        "properties": {
          "DataSetName": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSetName"
              },
              {
                "description": "Dataset name."
              }
            ]
          }
        },
        "description": "The parameters for IoT Analytics."
      },
      "DataSetName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "JiraParameters": {
        "type": "object",
        "required": [
          "SiteBaseUrl"
        ],
        "properties": {
          "SiteBaseUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/SiteBaseUrl"
              },
              {
                "description": "The base URL of the Jira site."
              }
            ]
          }
        },
        "description": "The parameters for Jira."
      },
      "SiteBaseUrl": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "MariaDbParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for MariaDB."
      },
      "MySqlParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for MySQL."
      },
      "OracleParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "An Oracle host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "The database."
              }
            ]
          }
        },
        "description": "The parameters for Oracle."
      },
      "PostgreSqlParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for PostgreSQL."
      },
      "PrestoParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Catalog"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Catalog": {
            "allOf": [
              {
                "$ref": "#/$defs/Catalog"
              },
              {
                "description": "Catalog."
              }
            ]
          }
        },
        "description": "The parameters for Presto."
      },
      "Catalog": {
        "type": "string",
        "maxLength": 128
      },
      "RdsParameters": {
        "type": "object",
        "required": [
          "InstanceId",
          "Database"
        ],
        "properties": {
          "InstanceId": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceId"
              },
              {
                "description": "Instance ID."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for Amazon RDS."
      },
      "InstanceId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "RedshiftParameters": {
        "type": "object",
        "required": [
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host. This field can be blank if <code>ClusterId</code> is provided."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/OptionalPort"
              },
              {
                "description": "Port. This field can be blank if the <code>ClusterId</code> is provided."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          },
          "ClusterId": {
            "allOf": [
              {
                "$ref": "#/$defs/ClusterId"
              },
              {
                "description": "Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are provided."
              }
            ]
          }
        },
        "description": "The parameters for Amazon Redshift. The <code>ClusterId</code> field can be blank if <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set."
      },
      "OptionalPort": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "ClusterId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "S3Parameters": {
        "type": "object",
        "required": [
          "ManifestFileLocation"
        ],
        "properties": {
          "ManifestFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestFileLocation"
              },
              {
                "description": "Location of the Amazon S3 manifest file. This is NULL if the manifest file was uploaded into Amazon QuickSight."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active."
              }
            ]
          }
        },
        "description": "The parameters for S3."
      },
      "ManifestFileLocation": {
        "type": "object",
        "required": [
          "Bucket",
          "Key"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "Amazon S3 bucket."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Key"
              },
              {
                "description": "Amazon S3 key that identifies an object."
              }
            ]
          }
        },
        "description": "Amazon S3 manifest file location."
      },
      "S3Bucket": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "S3Key": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ServiceNowParameters": {
        "type": "object",
        "required": [
          "SiteBaseUrl"
        ],
        "properties": {
          "SiteBaseUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/SiteBaseUrl"
              },
              {
                "description": "URL of the base site."
              }
            ]
          }
        },
        "description": "The parameters for ServiceNow."
      },
      "SnowflakeParameters": {
        "type": "object",
        "required": [
          "Host",
          "Database",
          "Warehouse"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          },
          "Warehouse": {
            "allOf": [
              {
                "$ref": "#/$defs/Warehouse"
              },
              {
                "description": "Warehouse."
              }
            ]
          }
        },
        "description": "The parameters for Snowflake."
      },
      "Warehouse": {
        "type": "string",
        "maxLength": 128
      },
      "SparkParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          }
        },
        "description": "The parameters for Spark."
      },
      "SqlServerParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for SQL Server."
      },
      "TeradataParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "Database"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "Host."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "Port."
              }
            ]
          },
          "Database": {
            "allOf": [
              {
                "$ref": "#/$defs/Database"
              },
              {
                "description": "Database."
              }
            ]
          }
        },
        "description": "The parameters for Teradata."
      },
      "TwitterParameters": {
        "type": "object",
        "required": [
          "Query",
          "MaxRows"
        ],
        "properties": {
          "Query": {
            "allOf": [
              {
                "$ref": "#/$defs/Query"
              },
              {
                "description": "Twitter query string."
              }
            ]
          },
          "MaxRows": {
            "allOf": [
              {
                "$ref": "#/$defs/PositiveInteger"
              },
              {
                "description": "Maximum number of rows to query Twitter."
              }
            ]
          }
        },
        "description": "The parameters for Twitter."
      },
      "Query": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "PositiveInteger": {
        "type": "integer",
        "minimum": 1
      },
      "AmazonOpenSearchParameters": {
        "type": "object",
        "required": [
          "Domain"
        ],
        "properties": {
          "Domain": {
            "allOf": [
              {
                "$ref": "#/$defs/Domain"
              },
              {
                "description": "The OpenSearch domain."
              }
            ]
          }
        },
        "description": "The parameters for OpenSearch."
      },
      "ExasolParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "The hostname or IP address of the Exasol data source."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port for the Exasol data source."
              }
            ]
          }
        },
        "description": "The required parameters for connecting to an Exasol data source."
      },
      "DatabricksParameters": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "SqlEndpointPath"
        ],
        "properties": {
          "Host": {
            "allOf": [
              {
                "$ref": "#/$defs/Host"
              },
              {
                "description": "The host name of the Databricks data source."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/Port"
              },
              {
                "description": "The port for the Databricks data source."
              }
            ]
          },
          "SqlEndpointPath": {
            "allOf": [
              {
                "$ref": "#/$defs/SqlEndpointPath"
              },
              {
                "description": "The HTTP path of the Databricks data source."
              }
            ]
          }
        },
        "description": "The required parameters that are needed to connect to a Databricks data source."
      },
      "SqlEndpointPath": {
        "type": "string",
        "minLength": 1,
        "maxLength": 4096
      },
      "CredentialPair": {
        "type": "object",
        "required": [
          "Username",
          "Password"
        ],
        "properties": {
          "Username": {
            "allOf": [
              {
                "$ref": "#/$defs/DbUsername"
              },
              {
                "description": "User name."
              }
            ]
          },
          "Password": {
            "allOf": [
              {
                "$ref": "#/$defs/Password"
              },
              {
                "description": "Password."
              }
            ]
          },
          "AlternateDataSourceParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceParametersList"
              },
              {
                "description": "A set of alternate data source parameters that you want to share for these credentials. The credentials are applied in tandem with the data source parameters when you copy a data source by using a create or update request. The API operation compares the <code>DataSourceParameters</code> structure that's in the request with the structures in the <code>AlternateDataSourceParameters</code> allow list. If the structures are an exact match, the request is allowed to use the new data source with the existing credentials. If the <code>AlternateDataSourceParameters</code> list is null, the <code>DataSourceParameters</code> originally used with these <code>Credentials</code> is automatically allowed."
              }
            ]
          }
        },
        "description": "The combination of user name and password that are used as credentials."
      },
      "DbUsername": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "Password": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DataSourceParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataSourceParameters"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "DataSourceParameters": {
        "type": "object",
        "properties": {
          "AmazonElasticsearchParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonElasticsearchParameters"
              },
              {
                "description": "The parameters for OpenSearch."
              }
            ]
          },
          "AthenaParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AthenaParameters"
              },
              {
                "description": "The parameters for Amazon Athena."
              }
            ]
          },
          "AuroraParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AuroraParameters"
              },
              {
                "description": "The parameters for Amazon Aurora MySQL."
              }
            ]
          },
          "AuroraPostgreSqlParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AuroraPostgreSqlParameters"
              },
              {
                "description": "The parameters for Amazon Aurora."
              }
            ]
          },
          "AwsIotAnalyticsParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsIotAnalyticsParameters"
              },
              {
                "description": "The parameters for IoT Analytics."
              }
            ]
          },
          "JiraParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/JiraParameters"
              },
              {
                "description": "The parameters for Jira."
              }
            ]
          },
          "MariaDbParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/MariaDbParameters"
              },
              {
                "description": "The parameters for MariaDB."
              }
            ]
          },
          "MySqlParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/MySqlParameters"
              },
              {
                "description": "The parameters for MySQL."
              }
            ]
          },
          "OracleParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/OracleParameters"
              },
              {
                "description": "The parameters for Oracle."
              }
            ]
          },
          "PostgreSqlParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PostgreSqlParameters"
              },
              {
                "description": "The parameters for PostgreSQL."
              }
            ]
          },
          "PrestoParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/PrestoParameters"
              },
              {
                "description": "The parameters for Presto."
              }
            ]
          },
          "RdsParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/RdsParameters"
              },
              {
                "description": "The parameters for Amazon RDS."
              }
            ]
          },
          "RedshiftParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/RedshiftParameters"
              },
              {
                "description": "The parameters for Amazon Redshift."
              }
            ]
          },
          "S3Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Parameters"
              },
              {
                "description": "The parameters for S3."
              }
            ]
          },
          "ServiceNowParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceNowParameters"
              },
              {
                "description": "The parameters for ServiceNow."
              }
            ]
          },
          "SnowflakeParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SnowflakeParameters"
              },
              {
                "description": "The parameters for Snowflake."
              }
            ]
          },
          "SparkParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SparkParameters"
              },
              {
                "description": "The parameters for Spark."
              }
            ]
          },
          "SqlServerParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/SqlServerParameters"
              },
              {
                "description": "The parameters for SQL Server."
              }
            ]
          },
          "TeradataParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TeradataParameters"
              },
              {
                "description": "The parameters for Teradata."
              }
            ]
          },
          "TwitterParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TwitterParameters"
              },
              {
                "description": "The parameters for Twitter."
              }
            ]
          },
          "AmazonOpenSearchParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonOpenSearchParameters"
              },
              {
                "description": "The parameters for OpenSearch."
              }
            ]
          },
          "ExasolParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ExasolParameters"
              },
              {
                "description": "The parameters for Exasol."
              }
            ]
          },
          "DatabricksParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/DatabricksParameters"
              },
              {
                "description": "The required parameters that are needed to connect to a Databricks data source."
              }
            ]
          }
        },
        "description": "The parameters that Amazon QuickSight uses to connect to your underlying data source. This is a variant type structure. For this structure to be valid, only one of the attributes can be non-null."
      },
      "CopySourceArn": {
        "type": "string",
        "pattern": "^arn:[-a-z0-9]*:quicksight:[-a-z0-9]*:[0-9]{12}:datasource/.+"
      },
      "SecretArn": {
        "type": "string",
        "pattern": "^arn:[-a-z0-9]*:secretsmanager:[-a-z0-9]*:[0-9]{12}:secret:.+",
        "minLength": 1,
        "maxLength": 2048
      },
      "ResourcePermission": {
        "type": "object",
        "required": [
          "Principal",
          "Actions"
        ],
        "properties": {
          "Principal": {
            "allOf": [
              {
                "$ref": "#/$defs/Principal"
              },
              {
                "description": "<p>The Amazon Resource Name (ARN) of the principal. This can be one of the following:</p> <ul> <li> <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p> </li> <li> <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p> </li> <li> <p>The ARN of an Amazon Web Services account root: This is an IAM ARN rather than a QuickSight ARN. Use this option only to share resources (templates) across Amazon Web Services accounts. (This is less common.) </p> </li> </ul>"
              }
            ]
          },
          "Actions": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionList"
              },
              {
                "description": "The IAM action to grant or revoke permissions on."
              }
            ]
          }
        },
        "description": "Permission for the resource."
      },
      "Principal": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "ActionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 1,
        "maxItems": 16
      },
      "String": {
        "type": "string"
      },
      "Arn": {
        "type": "string"
      },
      "Boolean": {
        "type": "boolean"
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "Tag key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "Tag value."
              }
            ]
          }
        },
        "description": "The key or keys of the key-value pairs for the resource tag or tags assigned to the resource."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://quicksight.us-east-1.amazonaws.com/accounts/{AwsAccountId}/data-sources"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**DataSourceId**",
            "**CreationStatus**",
            "**RequestId**",
            "**Status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
