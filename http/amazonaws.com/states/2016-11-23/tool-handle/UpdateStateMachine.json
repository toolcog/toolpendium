{
  "name": "UpdateStateMachine",
  "description": "<p>Updates an existing state machine by modifying its <code>definition</code>, <code>roleArn</code>, or <code>loggingConfiguration</code>. Running executions will continue to use the previous <code>definition</code> and <code>roleArn</code>. You must include at least one of <code>definition</code> or <code>roleArn</code> or you will receive a <code>MissingRequiredParameter</code> error.</p> <p>A qualified state machine ARN refers to a <i>Distributed Map state</i> defined within a state machine. For example, the qualified state machine ARN <code>arn:partition:states:region:account-id:stateMachine:stateMachineName/mapStateLabel</code> refers to a <i>Distributed Map state</i> with a label <code>mapStateLabel</code> in the state machine named <code>stateMachineName</code>.</p> <p>A qualified state machine ARN can either refer to a <i>Distributed Map state</i> defined within a state machine, a version ARN, or an alias ARN.</p> <p>The following are some examples of qualified and unqualified state machine ARNs:</p> <ul> <li> <p>The following qualified state machine ARN refers to a <i>Distributed Map state</i> with a label <code>mapStateLabel</code> in a state machine named <code>myStateMachine</code>.</p> <p> <code>arn:partition:states:region:account-id:stateMachine:myStateMachine/mapStateLabel</code> </p> <note> <p>If you provide a qualified state machine ARN that refers to a <i>Distributed Map state</i>, the request fails with <code>ValidationException</code>.</p> </note> </li> <li> <p>The following qualified state machine ARN refers to an alias named <code>PROD</code>.</p> <p> <code>arn:&lt;partition&gt;:states:&lt;region&gt;:&lt;account-id&gt;:stateMachine:&lt;myStateMachine:PROD&gt;</code> </p> <note> <p>If you provide a qualified state machine ARN that refers to a version ARN or an alias ARN, the request starts execution for that version or alias.</p> </note> </li> <li> <p>The following unqualified state machine ARN refers to a state machine named <code>myStateMachine</code>.</p> <p> <code>arn:&lt;partition&gt;:states:&lt;region&gt;:&lt;account-id&gt;:stateMachine:&lt;myStateMachine&gt;</code> </p> </li> </ul> <p>After you update your state machine, you can set the <code>publish</code> parameter to <code>true</code> in the same action to publish a new <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/concepts-state-machine-version.html\">version</a>. This way, you can opt-in to strict versioning of your state machine.</p> <note> <p>Step Functions assigns monotonically increasing integers for state machine versions, starting at version number 1.</p> </note> <note> <p>All <code>StartExecution</code> calls within a few seconds use the updated <code>definition</code> and <code>roleArn</code>. Executions started immediately after you call <code>UpdateStateMachine</code> may use the previous state machine <code>definition</code> and <code>roleArn</code>. </p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSStepFunctions.UpdateStateMachine"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateStateMachineInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateStateMachineInput": {
        "type": "object",
        "required": [
          "stateMachineArn"
        ],
        "title": "UpdateStateMachineInput",
        "properties": {
          "stateMachineArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the state machine."
              }
            ]
          },
          "definition": {
            "allOf": [
              {
                "$ref": "#/$defs/Definition"
              },
              {
                "description": "The Amazon States Language definition of the state machine. See <a href=\"https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\">Amazon States Language</a>."
              }
            ]
          },
          "roleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the IAM role of the state machine."
              }
            ]
          },
          "loggingConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/LoggingConfiguration"
              },
              {
                "description": "Use the <code>LoggingConfiguration</code> data type to set CloudWatch Logs options."
              }
            ]
          },
          "tracingConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/TracingConfiguration"
              },
              {
                "description": "Selects whether X-Ray tracing is enabled."
              }
            ]
          },
          "publish": {
            "allOf": [
              {
                "$ref": "#/$defs/Publish"
              },
              {
                "description": "Specifies whether the state machine version is published. The default is <code>false</code>. To publish a version after updating the state machine, set <code>publish</code> to <code>true</code>."
              }
            ]
          },
          "versionDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionDescription"
              },
              {
                "description": "<p>An optional description of the state machine version to publish.</p> <p>You can only specify the <code>versionDescription</code> parameter if you've set <code>publish</code> to <code>true</code>.</p>"
              }
            ]
          }
        }
      },
      "Arn": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "Definition": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1048576,
        "format": "password"
      },
      "LoggingConfiguration": {
        "type": "object",
        "properties": {
          "level": {
            "allOf": [
              {
                "$ref": "#/$defs/LogLevel"
              },
              {
                "description": "Defines which category of execution history events are logged."
              }
            ]
          },
          "includeExecutionData": {
            "allOf": [
              {
                "$ref": "#/$defs/IncludeExecutionData"
              },
              {
                "description": "Determines whether execution data is included in your log. When set to <code>false</code>, data is excluded."
              }
            ]
          },
          "destinations": {
            "allOf": [
              {
                "$ref": "#/$defs/LogDestinationList"
              },
              {
                "description": "An array of objects that describes where your execution history events will be logged. Limited to size 1. Required, if your log level is not set to <code>OFF</code>."
              }
            ]
          }
        },
        "description": "The <code>LoggingConfiguration</code> data type is used to set CloudWatch Logs options."
      },
      "LogLevel": {
        "type": "string",
        "enum": [
          "ALL",
          "ERROR",
          "FATAL",
          "OFF"
        ]
      },
      "IncludeExecutionData": {
        "type": "boolean"
      },
      "LogDestinationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LogDestination"
        }
      },
      "LogDestination": {
        "type": "object",
        "properties": {
          "cloudWatchLogsLogGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/CloudWatchLogsLogGroup"
              },
              {
                "description": "An object describing a CloudWatch log group. For more information, see <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html\">AWS::Logs::LogGroup</a> in the CloudFormation User Guide."
              }
            ]
          }
        },
        "description": "<p/>"
      },
      "CloudWatchLogsLogGroup": {
        "type": "object",
        "properties": {
          "logGroupArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The ARN of the the CloudWatch log group to which you want your logs emitted to. The ARN must end with <code>:*</code> "
              }
            ]
          }
        },
        "description": "<p/>"
      },
      "TracingConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Enabled"
              },
              {
                "description": "When set to <code>true</code>, X-Ray tracing is enabled."
              }
            ]
          }
        },
        "description": "Selects whether or not the state machine's X-Ray tracing is enabled. Default is <code>false</code> "
      },
      "Enabled": {
        "type": "boolean"
      },
      "Publish": {
        "type": "boolean"
      },
      "VersionDescription": {
        "type": "string",
        "maxLength": 256,
        "format": "password"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://states.us-east-1.amazonaws.com/#X-Amz-Target=AWSStepFunctions.UpdateStateMachine"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**updateDate**",
            "**revisionId**",
            "**stateMachineVersionArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
