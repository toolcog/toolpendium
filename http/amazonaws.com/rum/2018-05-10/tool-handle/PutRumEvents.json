{
  "name": "PutRumEvents",
  "description": "<p>Sends telemetry events about your application performance and user behavior to CloudWatch RUM. The code snippet that RUM generates for you to add to your application includes <code>PutRumEvents</code> operations to send this data to RUM.</p> <p>Each <code>PutRumEvents</code> operation can send a batch of events from one user session.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "Id": {
        "type": "string",
        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        "minLength": 36,
        "maxLength": 36,
        "description": "The ID of the app monitor that is sending this data."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "AppMonitorDetails",
          "BatchId",
          "RumEvents",
          "UserDetails"
        ],
        "properties": {
          "AppMonitorDetails": {
            "description": "A structure that contains information about the RUM app monitor.",
            "type": "object",
            "properties": {
              "id": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The unique ID of the app monitor."
                  }
                ]
              },
              "name": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The name of the app monitor."
                  }
                ]
              },
              "version": {
                "allOf": [
                  {
                    "$ref": "#/$defs/String"
                  },
                  {
                    "description": "The version of the app monitor."
                  }
                ]
              }
            }
          },
          "BatchId": {
            "description": "A unique identifier for this batch of RUM event data.",
            "type": "string",
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "minLength": 36,
            "maxLength": 36
          },
          "RumEvents": {
            "description": "An array of structures that contain the telemetry event data.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/RumEvent"
            }
          },
          "UserDetails": {
            "description": "A structure that contains information about the user session that this batch of events was collected from.",
            "type": "object",
            "properties": {
              "sessionId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/UserDetailsSessionIdString"
                  },
                  {
                    "description": "The session ID that the performance events are from."
                  }
                ]
              },
              "userId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/UserDetailsUserIdString"
                  },
                  {
                    "description": "The ID of the user for this user session. This ID is generated by RUM and does not include any personally identifiable information about the user."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "Id",
      "body"
    ],
    "$defs": {
      "String": {
        "type": "string"
      },
      "RumEvent": {
        "type": "object",
        "required": [
          "details",
          "id",
          "timestamp",
          "type"
        ],
        "properties": {
          "details": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonValue"
              },
              {
                "description": "A string containing details about the event."
              }
            ]
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/RumEventIdString"
              },
              {
                "description": "A unique ID for this event."
              }
            ]
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonValue"
              },
              {
                "description": "Metadata about this event, which contains a JSON serialization of the identity of the user for this session. The user information comes from information such as the HTTP user-agent request header and document interface."
              }
            ]
          },
          "timestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The exact time that this event occurred."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The JSON schema that denotes the type of event this is, such as a page load or a new session."
              }
            ]
          }
        },
        "description": "A structure that contains the information for one performance event that RUM collects from a user session with your application."
      },
      "JsonValue": {
        "type": "string"
      },
      "RumEventIdString": {
        "type": "string",
        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        "minLength": 36,
        "maxLength": 36
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "UserDetailsSessionIdString": {
        "type": "string",
        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        "minLength": 36,
        "maxLength": 36
      },
      "UserDetailsUserIdString": {
        "type": "string",
        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
        "minLength": 36,
        "maxLength": 36
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rum.us-east-1.amazonaws.com/appmonitors/{Id}/"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
