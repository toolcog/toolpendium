{
  "name": "CreateAppMonitor",
  "description": "<p>Creates a Amazon CloudWatch RUM app monitor, which collects telemetry data from your application and sends that data to RUM. The data includes performance and reliability information such as page load time, client-side errors, and user behavior.</p> <p>You use this operation only to create a new app monitor. To update an existing app monitor, use <a href=\"https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_UpdateAppMonitor.html\">UpdateAppMonitor</a> instead.</p> <p>After you create an app monitor, sign in to the CloudWatch RUM console to get the JavaScript code snippet to add to your web application. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-find-code-snippet.html\">How do I find a code snippet that I've already generated?</a> </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "Domain",
          "Name"
        ],
        "properties": {
          "AppMonitorConfiguration": {
            "description": "This structure contains much of the configuration data for the app monitor.",
            "type": "object",
            "properties": {
              "AllowCookies": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "If you set this to <code>true</code>, the RUM web client sets two cookies, a session cookie and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page."
                  }
                ]
              },
              "EnableXRay": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "If you set this to <code>true</code>, RUM enables X-Ray tracing for the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests. You can see traces and segments from these user sessions in the X-Ray console and the CloudWatch ServiceLens console. For more information, see <a href=\"https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html\">What is X-Ray?</a> "
                  }
                ]
              },
              "ExcludedPages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Pages"
                  },
                  {
                    "description": "<p>A list of URLs in your website or application to exclude from RUM data collection.</p> <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>"
                  }
                ]
              },
              "FavoritePages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FavoritePages"
                  },
                  {
                    "description": "A list of pages in your application that are to be displayed with a \"favorite\" icon in the CloudWatch RUM console."
                  }
                ]
              },
              "GuestRoleArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Arn"
                  },
                  {
                    "description": "The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM."
                  }
                ]
              },
              "IdentityPoolId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/IdentityPoolId"
                  },
                  {
                    "description": "The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM."
                  }
                ]
              },
              "IncludedPages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Pages"
                  },
                  {
                    "description": "<p>If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. </p> <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>"
                  }
                ]
              },
              "SessionSampleRate": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SessionSampleRate"
                  },
                  {
                    "description": "<p>Specifies the portion of user sessions to use for RUM data collection. Choosing a higher portion gives you more data but also incurs more costs.</p> <p>The range for this value is 0 to 1 inclusive. Setting this to 1 means that 100% of user sessions are sampled, and setting it to 0.1 means that 10% of user sessions are sampled.</p> <p>If you omit this parameter, the default of 0.1 is used, and 10% of sessions will be sampled.</p>"
                  }
                ]
              },
              "Telemetries": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Telemetries"
                  },
                  {
                    "description": "<p>An array that lists the types of telemetry data that this app monitor is to collect.</p> <ul> <li> <p> <code>errors</code> indicates that RUM collects data about unhandled JavaScript errors raised by your application.</p> </li> <li> <p> <code>performance</code> indicates that RUM collects performance data about how your application and its resources are loaded and rendered. This includes Core Web Vitals.</p> </li> <li> <p> <code>http</code> indicates that RUM collects data about HTTP errors thrown by your application.</p> </li> </ul>"
                  }
                ]
              }
            }
          },
          "CustomEvents": {
            "description": "A structure that contains information about custom events for this app monitor.",
            "type": "object",
            "properties": {
              "Status": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CustomEventsStatus"
                  },
                  {
                    "description": "Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be <code>DISABLED</code>."
                  }
                ]
              }
            }
          },
          "CwLogEnabled": {
            "description": "<p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges.</p> <p>If you omit this parameter, the default is <code>false</code>.</p>",
            "type": "boolean"
          },
          "Domain": {
            "description": "The top-level internet domain name for which your application has administrative authority.",
            "type": "string",
            "pattern": "^(localhost)|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(?![-.])([A-Za-z0-9-\\.\\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))|^(\\*\\.)(?![-.])([A-Za-z0-9-\\.\\-]{0,63})((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))\\.(?![-])[A-Za-z-0-9]{1,63}((?![-])([a-zA-Z0-9]{1}|^[a-zA-Z0-9]{0,1}))",
            "minLength": 1,
            "maxLength": 253
          },
          "Name": {
            "description": "A name for the app monitor.",
            "type": "string",
            "pattern": "^(?!\\.)[\\.\\-_#A-Za-z0-9]+$",
            "minLength": 1,
            "maxLength": 255
          },
          "Tags": {
            "description": "<p>Assigns one or more tags (key-value pairs) to the app monitor.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an app monitor.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "Boolean": {
        "type": "boolean"
      },
      "Pages": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Url"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Url": {
        "type": "string",
        "pattern": "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&*//=]*)",
        "minLength": 1,
        "maxLength": 1260
      },
      "FavoritePages": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "String": {
        "type": "string"
      },
      "Arn": {
        "type": "string",
        "pattern": "arn:[^:]*:[^:]*:[^:]*:[^:]*:.*"
      },
      "IdentityPoolId": {
        "type": "string",
        "pattern": "[\\w-]+:[0-9a-f-]+",
        "minLength": 1,
        "maxLength": 55
      },
      "SessionSampleRate": {
        "type": "number",
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "Telemetries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Telemetry"
        }
      },
      "Telemetry": {
        "type": "string",
        "enum": [
          "errors",
          "performance",
          "http"
        ]
      },
      "CustomEventsStatus": {
        "type": "string",
        "enum": [
          "ENABLED",
          "DISABLED"
        ]
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rum.us-east-1.amazonaws.com/appmonitor"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Id**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
