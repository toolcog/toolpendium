{
  "name": "GetAppMonitorData",
  "description": "Retrieves the raw performance events that RUM has collected from your web application, so that you can do your own processing or analysis of this data.",
  "parameters": {
    "type": "object",
    "properties": {
      "Name": {
        "type": "string",
        "pattern": "^(?!\\.)[\\.\\-_#A-Za-z0-9]+$",
        "minLength": 1,
        "maxLength": 255,
        "description": "The name of the app monitor that collected the data that you want to retrieve."
      },
      "MaxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "NextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "TimeRange"
        ],
        "properties": {
          "Filters": {
            "description": "An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/QueryFilter"
            }
          },
          "MaxResults": {
            "description": "The maximum number of results to return in one operation. ",
            "type": "integer",
            "minimum": 0,
            "maximum": 100
          },
          "NextToken": {
            "description": "Use the token returned by the previous operation to request the next page of results.",
            "type": "string"
          },
          "TimeRange": {
            "description": "A structure that defines the time range that you want to retrieve results from.",
            "type": "object",
            "properties": {
              "After": {
                "allOf": [
                  {
                    "$ref": "#/$defs/QueryTimestamp"
                  },
                  {
                    "description": "The beginning of the time range to retrieve performance events from."
                  }
                ]
              },
              "Before": {
                "allOf": [
                  {
                    "$ref": "#/$defs/QueryTimestamp"
                  },
                  {
                    "description": "The end of the time range to retrieve performance events from. If you omit this, the time range extends to the time that this operation is performed."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "Name",
      "body"
    ],
    "$defs": {
      "QueryFilter": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryFilterKey"
              },
              {
                "description": "<p>The name of a key to search for. The filter returns only the events that match the <code>Name</code> and <code>Values</code> that you specify. </p> <p>Valid values for <code>Name</code> are <code>Browser</code> | <code>Device</code> | <code>Country</code> | <code>Page</code> | <code>OS</code> | <code>EventType</code> | <code>Invert</code> </p>"
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryFilterValueList"
              },
              {
                "description": "The values of the <code>Name</code> that are to be be included in the returned results."
              }
            ]
          }
        },
        "description": "<p>A structure that defines a key and values that you can use to filter the results. The only performance events that are returned are those that have values matching the ones that you specify in one of your <code>QueryFilter</code> structures.</p> <p>For example, you could specify <code>Browser</code> as the <code>Name</code> and specify <code>Chrome,Firefox</code> as the <code>Values</code> to return events generated only from those browsers.</p> <p>Specifying <code>Invert</code> as the <code>Name</code> works as a \"not equal to\" filter. For example, specify <code>Invert</code> as the <code>Name</code> and specify <code>Chrome</code> as the value to return all events except events from user sessions with the Chrome browser.</p>"
      },
      "QueryFilterKey": {
        "type": "string"
      },
      "QueryFilterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/QueryFilterValue"
        }
      },
      "QueryFilterValue": {
        "type": "string"
      },
      "QueryTimestamp": {
        "type": "integer"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://rum.us-east-1.amazonaws.com/appmonitor/{Name}/data{?MaxResults,NextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Events**",
            "**NextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
