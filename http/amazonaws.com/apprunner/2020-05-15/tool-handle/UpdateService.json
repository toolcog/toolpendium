{
  "name": "UpdateService",
  "description": "<p>Update an App Runner service. You can update the source configuration and instance configuration of the service. You can also update the ARN of the auto scaling configuration resource that's associated with the service. However, you can't change the name or the encryption configuration of the service. These can be set only when you create the service.</p> <p>To update the tags applied to your service, use the separate actions <a>TagResource</a> and <a>UntagResource</a>.</p> <p>This is an asynchronous operation. On a successful call, you can use the returned <code>OperationId</code> and the <a>ListOperations</a> call to track the operation's progress.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AppRunner.UpdateService"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateServiceRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateServiceRequest": {
        "type": "object",
        "required": [
          "ServiceArn"
        ],
        "title": "UpdateServiceRequest",
        "properties": {
          "ServiceArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AppRunnerResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the App Runner service that you want to update."
              }
            ]
          },
          "SourceConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceConfiguration"
              },
              {
                "description": "<p>The source configuration to apply to the App Runner service.</p> <p>You can change the configuration of the code or image repository that the service uses. However, you can't switch from code to image or the other way around. This means that you must provide the same structure member of <code>SourceConfiguration</code> that you originally included when you created the service. Specifically, you can include either <code>CodeRepository</code> or <code>ImageRepository</code>. To update the source configuration, set the values to members of the structure that you include.</p>"
              }
            ]
          },
          "InstanceConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceConfiguration"
              },
              {
                "description": "The runtime configuration to apply to instances (scaling units) of your service."
              }
            ]
          },
          "AutoScalingConfigurationArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AppRunnerResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an App Runner automatic scaling configuration resource that you want to associate with the App Runner service."
              }
            ]
          },
          "HealthCheckConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckConfiguration"
              },
              {
                "description": "The settings for the health check that App Runner performs to monitor the health of the App Runner service."
              }
            ]
          },
          "NetworkConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/NetworkConfiguration"
              },
              {
                "description": "Configuration settings related to network traffic of the web application that the App Runner service runs."
              }
            ]
          },
          "ObservabilityConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceObservabilityConfiguration"
              },
              {
                "description": "The observability configuration of your service."
              }
            ]
          }
        }
      },
      "AppRunnerResourceArn": {
        "type": "string",
        "pattern": "arn:aws(-[\\w]+)*:[a-z0-9-\\\\.]{0,63}:[a-z0-9-\\\\.]{0,63}:[0-9]{12}:(\\w|\\/|-){1,1011}",
        "minLength": 1,
        "maxLength": 1011
      },
      "SourceConfiguration": {
        "type": "object",
        "properties": {
          "CodeRepository": {
            "allOf": [
              {
                "$ref": "#/$defs/CodeRepository"
              },
              {
                "description": "<p>The description of a source code repository.</p> <p>You must provide either this member or <code>ImageRepository</code> (but not both).</p>"
              }
            ]
          },
          "ImageRepository": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageRepository"
              },
              {
                "description": "<p>The description of a source image repository.</p> <p>You must provide either this member or <code>CodeRepository</code> (but not both).</p>"
              }
            ]
          },
          "AutoDeploymentsEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>If <code>true</code>, continuous integration from the source repository is enabled for the App Runner service. Each repository change (including any source code commit or new image version) starts a deployment.</p> <p>Default: App Runner sets to <code>false</code> for a source image that uses an ECR Public repository or an ECR repository that's in an Amazon Web Services account other than the one that the service is in. App Runner sets to <code>true</code> in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).</p>"
              }
            ]
          },
          "AuthenticationConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/AuthenticationConfiguration"
              },
              {
                "description": "Describes the resources that are needed to authenticate access to some source repositories."
              }
            ]
          }
        },
        "description": "Describes the source deployed to an App Runner service. It can be a code or an image repository."
      },
      "CodeRepository": {
        "type": "object",
        "required": [
          "RepositoryUrl",
          "SourceCodeVersion"
        ],
        "properties": {
          "RepositoryUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The location of the repository that contains the source code."
              }
            ]
          },
          "SourceCodeVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceCodeVersion"
              },
              {
                "description": "The version that should be used within the source code repository."
              }
            ]
          },
          "CodeConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/CodeConfiguration"
              },
              {
                "description": "<p>Configuration for building and running the service from a source code repository.</p> <note> <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p> </note>"
              }
            ]
          }
        },
        "description": "Describes a source code repository."
      },
      "String": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 51200
      },
      "SourceCodeVersion": {
        "type": "object",
        "required": [
          "Type",
          "Value"
        ],
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceCodeVersionType"
              },
              {
                "description": "<p>The type of version identifier.</p> <p>For a git-based repository, branches represent versions.</p>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>A source code version.</p> <p>For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.</p>"
              }
            ]
          }
        },
        "description": "Identifies a version of code that App Runner refers to within a source code repository."
      },
      "SourceCodeVersionType": {
        "type": "string",
        "enum": [
          "BRANCH"
        ]
      },
      "CodeConfiguration": {
        "type": "object",
        "required": [
          "ConfigurationSource"
        ],
        "properties": {
          "ConfigurationSource": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationSource"
              },
              {
                "description": "<p>The source of the App Runner configuration. Values are interpreted as follows:</p> <ul> <li> <p> <code>REPOSITORY</code> â€“ App Runner reads configuration values from the <code>apprunner.yaml</code> file in the source code repository and ignores <code>CodeConfigurationValues</code>.</p> </li> <li> <p> <code>API</code> â€“ App Runner uses configuration values provided in <code>CodeConfigurationValues</code> and ignores the <code>apprunner.yaml</code> file in the source code repository.</p> </li> </ul>"
              }
            ]
          },
          "CodeConfigurationValues": {
            "allOf": [
              {
                "$ref": "#/$defs/CodeConfigurationValues"
              },
              {
                "description": "The basic configuration for building and running the App Runner service. Use it to quickly launch an App Runner service without providing a <code>apprunner.yaml</code> file in the source code repository (or ignoring the file if it exists)."
              }
            ]
          }
        },
        "description": "Describes the configuration that App Runner uses to build and run an App Runner service from a source code repository."
      },
      "ConfigurationSource": {
        "type": "string",
        "enum": [
          "REPOSITORY",
          "API"
        ]
      },
      "CodeConfigurationValues": {
        "type": "object",
        "required": [
          "Runtime"
        ],
        "properties": {
          "Runtime": {
            "allOf": [
              {
                "$ref": "#/$defs/Runtime"
              },
              {
                "description": "A runtime environment type for building and running an App Runner service. It represents a programming language runtime."
              }
            ]
          },
          "BuildCommand": {
            "allOf": [
              {
                "$ref": "#/$defs/BuildCommand"
              },
              {
                "description": "The command App Runner runs to build your application."
              }
            ]
          },
          "StartCommand": {
            "allOf": [
              {
                "$ref": "#/$defs/StartCommand"
              },
              {
                "description": "The command App Runner runs to start your application."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The port that your application listens to in the container.</p> <p>Default: <code>8080</code> </p>"
              }
            ]
          },
          "RuntimeEnvironmentVariables": {
            "allOf": [
              {
                "$ref": "#/$defs/RuntimeEnvironmentVariables"
              },
              {
                "description": "The environment variables that are available to your running App Runner service. An array of key-value pairs."
              }
            ]
          },
          "RuntimeEnvironmentSecrets": {
            "allOf": [
              {
                "$ref": "#/$defs/RuntimeEnvironmentSecrets"
              },
              {
                "description": "<p>An array of key-value pairs representing the secrets and parameters that get referenced to your service as an environment variable. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.</p> <note> <ul> <li> <p> If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Amazon Web Services Region as the service that you're launching, you can use either the full ARN or name of the secret. If the parameter exists in a different Region, then the full ARN must be specified. </p> </li> <li> <p> Currently, cross account referencing of Amazon Web Services Systems Manager Parameter Store parameter is not supported. </p> </li> </ul> </note>"
              }
            ]
          }
        },
        "description": "Describes the basic configuration needed for building and running an App Runner service. This type doesn't support the full set of possible configuration options. Fur full configuration capabilities, use a <code>apprunner.yaml</code> file in the source code repository."
      },
      "Runtime": {
        "type": "string",
        "enum": [
          "PYTHON_3",
          "NODEJS_12",
          "NODEJS_14",
          "CORRETTO_8",
          "CORRETTO_11",
          "NODEJS_16",
          "GO_1",
          "DOTNET_6",
          "PHP_81",
          "RUBY_31"
        ]
      },
      "BuildCommand": {
        "type": "string",
        "pattern": "[^\\x0a\\x0d]+",
        "format": "password"
      },
      "StartCommand": {
        "type": "string",
        "pattern": "[^\\x0a\\x0d]+",
        "format": "password"
      },
      "RuntimeEnvironmentVariables": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/RuntimeEnvironmentVariablesValue"
        }
      },
      "RuntimeEnvironmentVariablesValue": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 51200,
        "format": "password"
      },
      "RuntimeEnvironmentSecrets": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/RuntimeEnvironmentSecretsValue"
        }
      },
      "RuntimeEnvironmentSecretsValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048,
        "format": "password"
      },
      "ImageRepository": {
        "type": "object",
        "required": [
          "ImageIdentifier",
          "ImageRepositoryType"
        ],
        "properties": {
          "ImageIdentifier": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageIdentifier"
              },
              {
                "description": "<p>The identifier of an image.</p> <p>For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the image name format, see <a href=\"https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html\">Pulling an image</a> in the <i>Amazon ECR User Guide</i>.</p>"
              }
            ]
          },
          "ImageConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageConfiguration"
              },
              {
                "description": "Configuration for running the identified image."
              }
            ]
          },
          "ImageRepositoryType": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageRepositoryType"
              },
              {
                "description": "The type of the image repository. This reflects the repository provider and whether the repository is private or public."
              }
            ]
          }
        },
        "description": "Describes a source image repository."
      },
      "ImageIdentifier": {
        "type": "string",
        "pattern": "([0-9]{12}.dkr.ecr.[a-z\\-]+-[0-9]{1}.amazonaws.com\\/((?:[a-z0-9]+(?:[._-][a-z0-9]+)*\\/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)(:([\\w\\d+\\-=._:\\/@])+|@([\\w\\d\\:]+))?)|(^public\\.ecr\\.aws\\/.+\\/((?:[a-z0-9]+(?:[._-][a-z0-9]+)*\\/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)(:([\\w\\d+\\-=._:\\/@])+|@([\\w\\d\\:]+))?)",
        "minLength": 1,
        "maxLength": 1024
      },
      "ImageConfiguration": {
        "type": "object",
        "properties": {
          "RuntimeEnvironmentVariables": {
            "allOf": [
              {
                "$ref": "#/$defs/RuntimeEnvironmentVariables"
              },
              {
                "description": "Environment variables that are available to your running App Runner service. An array of key-value pairs."
              }
            ]
          },
          "StartCommand": {
            "allOf": [
              {
                "$ref": "#/$defs/StartCommand"
              },
              {
                "description": "An optional command that App Runner runs to start the application in the source image. If specified, this command overrides the Docker imageâ€™s default start command."
              }
            ]
          },
          "Port": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The port that your application listens to in the container.</p> <p>Default: <code>8080</code> </p>"
              }
            ]
          },
          "RuntimeEnvironmentSecrets": {
            "allOf": [
              {
                "$ref": "#/$defs/RuntimeEnvironmentSecrets"
              },
              {
                "description": "<p>An array of key-value pairs representing the secrets and parameters that get referenced to your service as an environment variable. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.</p> <note> <ul> <li> <p> If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Amazon Web Services Region as the service that you're launching, you can use either the full ARN or name of the secret. If the parameter exists in a different Region, then the full ARN must be specified. </p> </li> <li> <p> Currently, cross account referencing of Amazon Web Services Systems Manager Parameter Store parameter is not supported. </p> </li> </ul> </note>"
              }
            ]
          }
        },
        "description": "Describes the configuration that App Runner uses to run an App Runner service using an image pulled from a source image repository."
      },
      "ImageRepositoryType": {
        "type": "string",
        "enum": [
          "ECR",
          "ECR_PUBLIC"
        ]
      },
      "NullableBoolean": {
        "type": "boolean"
      },
      "AuthenticationConfiguration": {
        "type": "object",
        "properties": {
          "ConnectionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AppRunnerResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the App Runner connection that enables the App Runner service to connect to a source repository. It's required for GitHub code repositories."
              }
            ]
          },
          "AccessRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the IAM role that grants the App Runner service access to a source repository. It's required for ECR image repositories (but not for ECR Public repositories)."
              }
            ]
          }
        },
        "description": "Describes resources needed to authenticate access to some source repositories. The specific resource depends on the repository provider."
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:(aws|aws-us-gov|aws-cn|aws-iso|aws-iso-b):iam::[0-9]{12}:(role|role\\/service-role)\\/[\\w+=,.@\\-/]{1,1000}",
        "minLength": 29,
        "maxLength": 1024
      },
      "InstanceConfiguration": {
        "type": "object",
        "properties": {
          "Cpu": {
            "allOf": [
              {
                "$ref": "#/$defs/Cpu"
              },
              {
                "description": "<p>The number of CPU units reserved for each instance of your App Runner service.</p> <p>Default: <code>1 vCPU</code> </p>"
              }
            ]
          },
          "Memory": {
            "allOf": [
              {
                "$ref": "#/$defs/Memory"
              },
              {
                "description": "<p>The amount of memory, in MB or GB, reserved for each instance of your App Runner service.</p> <p>Default: <code>2 GB</code> </p>"
              }
            ]
          },
          "InstanceRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any Amazon Web Services APIs."
              }
            ]
          }
        },
        "description": "Describes the runtime configuration of an App Runner service instance (scaling unit)."
      },
      "Cpu": {
        "type": "string",
        "pattern": "256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU",
        "minLength": 3,
        "maxLength": 9
      },
      "Memory": {
        "type": "string",
        "pattern": "512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB",
        "minLength": 3,
        "maxLength": 6
      },
      "HealthCheckConfiguration": {
        "type": "object",
        "properties": {
          "Protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckProtocol"
              },
              {
                "description": "<p>The IP protocol that App Runner uses to perform health checks for your service.</p> <p>If you set <code>Protocol</code> to <code>HTTP</code>, App Runner sends health check requests to the HTTP path specified by <code>Path</code>.</p> <p>Default: <code>TCP</code> </p>"
              }
            ]
          },
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckPath"
              },
              {
                "description": "<p>The URL that health check requests are sent to.</p> <p> <code>Path</code> is only applicable when you set <code>Protocol</code> to <code>HTTP</code>.</p> <p>Default: <code>\"/\"</code> </p>"
              }
            ]
          },
          "Interval": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckInterval"
              },
              {
                "description": "<p>The time interval, in seconds, between health checks.</p> <p>Default: <code>5</code> </p>"
              }
            ]
          },
          "Timeout": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckTimeout"
              },
              {
                "description": "<p>The time, in seconds, to wait for a health check response before deciding it failed.</p> <p>Default: <code>2</code> </p>"
              }
            ]
          },
          "HealthyThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckHealthyThreshold"
              },
              {
                "description": "<p>The number of consecutive checks that must succeed before App Runner decides that the service is healthy.</p> <p>Default: <code>1</code> </p>"
              }
            ]
          },
          "UnhealthyThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckUnhealthyThreshold"
              },
              {
                "description": "<p>The number of consecutive checks that must fail before App Runner decides that the service is unhealthy.</p> <p>Default: <code>5</code> </p>"
              }
            ]
          }
        },
        "description": "Describes the settings for the health check that App Runner performs to monitor the health of a service."
      },
      "HealthCheckProtocol": {
        "type": "string",
        "enum": [
          "TCP",
          "HTTP"
        ]
      },
      "HealthCheckPath": {
        "type": "string",
        "minLength": 1
      },
      "HealthCheckInterval": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "HealthCheckTimeout": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "HealthCheckHealthyThreshold": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "HealthCheckUnhealthyThreshold": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "NetworkConfiguration": {
        "type": "object",
        "properties": {
          "EgressConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EgressConfiguration"
              },
              {
                "description": "Network configuration settings for outbound message traffic."
              }
            ]
          },
          "IngressConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/IngressConfiguration"
              },
              {
                "description": "Network configuration settings for inbound message traffic."
              }
            ]
          }
        },
        "description": "Describes configuration settings related to network traffic of an App Runner service. Consists of embedded objects for each configurable network feature."
      },
      "EgressConfiguration": {
        "type": "object",
        "properties": {
          "EgressType": {
            "allOf": [
              {
                "$ref": "#/$defs/EgressType"
              },
              {
                "description": "<p>The type of egress configuration.</p> <p>Set to <code>DEFAULT</code> for access to resources hosted on public networks.</p> <p>Set to <code>VPC</code> to associate your service to a custom VPC specified by <code>VpcConnectorArn</code>.</p>"
              }
            ]
          },
          "VpcConnectorArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AppRunnerResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when <code>EgressType = VPC</code>."
              }
            ]
          }
        },
        "description": "Describes configuration settings related to outbound network traffic of an App Runner service."
      },
      "EgressType": {
        "type": "string",
        "enum": [
          "DEFAULT",
          "VPC"
        ]
      },
      "IngressConfiguration": {
        "type": "object",
        "properties": {
          "IsPubliclyAccessible": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to <code>True</code>. To make the service privately accessible, from only within an Amazon VPC set it to <code>False</code>. "
              }
            ]
          }
        },
        "description": "Network configuration settings for inbound network traffic."
      },
      "Boolean": {
        "type": "boolean"
      },
      "ServiceObservabilityConfiguration": {
        "type": "object",
        "required": [
          "ObservabilityEnabled"
        ],
        "properties": {
          "ObservabilityEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "When <code>true</code>, an observability configuration resource is associated with the service, and an <code>ObservabilityConfigurationArn</code> is specified."
              }
            ]
          },
          "ObservabilityConfigurationArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AppRunnerResourceArn"
              },
              {
                "description": "<p>The Amazon Resource Name (ARN) of the observability configuration that is associated with the service. Specified only when <code>ObservabilityEnabled</code> is <code>true</code>.</p> <p>Specify an ARN with a name and a revision number to associate that revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3</code> </p> <p>Specify just the name to associate the latest revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing</code> </p>"
              }
            ]
          }
        },
        "description": "Describes the observability configuration of an App Runner service. These are additional observability features, like tracing, that you choose to enable. They're configured in a separate resource that you associate with your service."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://apprunner.us-east-1.amazonaws.com/#X-Amz-Target=AppRunner.UpdateService"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Service**",
            "**OperationId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
