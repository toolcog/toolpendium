{
  "name": "CreateWorkflow",
  "description": " Allows you to create a workflow with specified steps and step details the workflow invokes after file transfer completes. After creating a workflow, you can associate the workflow created with any transfer servers by specifying the <code>workflow-details</code> field in <code>CreateServer</code> and <code>UpdateServer</code> operations. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "TransferService.CreateWorkflow"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateWorkflowRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateWorkflowRequest": {
        "type": "object",
        "required": [
          "Steps"
        ],
        "title": "CreateWorkflowRequest",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowDescription"
              },
              {
                "description": "A textual description for the workflow."
              }
            ]
          },
          "Steps": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowSteps"
              },
              {
                "description": "<p>Specifies the details for the steps that are in the specified workflow.</p> <p> The <code>TYPE</code> specifies which of the following actions is being taken for this step. </p> <ul> <li> <p> <b> <code>COPY</code> </b> - Copy the file to another location.</p> </li> <li> <p> <b> <code>CUSTOM</code> </b> - Perform a custom step with an Lambda function target.</p> </li> <li> <p> <b> <code>DECRYPT</code> </b> - Decrypt a file that was encrypted before it was uploaded.</p> </li> <li> <p> <b> <code>DELETE</code> </b> - Delete the file.</p> </li> <li> <p> <b> <code>TAG</code> </b> - Add a tag to the file.</p> </li> </ul> <note> <p> Currently, copying and tagging are supported only on S3. </p> </note> <p> For file location, you specify either the Amazon S3 bucket and key, or the Amazon EFS file system ID and path. </p>"
              }
            ]
          },
          "OnExceptionSteps": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowSteps"
              },
              {
                "description": "<p>Specifies the steps (actions) to take if errors are encountered during execution of the workflow.</p> <note> <p>For custom steps, the Lambda function needs to send <code>FAILURE</code> to the call back API to kick off the exception steps. Additionally, if the Lambda does not send <code>SUCCESS</code> before it times out, the exception steps are executed.</p> </note>"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/Tags"
              },
              {
                "description": "Key-value pairs that can be used to group and search for workflows. Tags are metadata attached to workflows for any purpose."
              }
            ]
          }
        }
      },
      "WorkflowDescription": {
        "type": "string",
        "pattern": "^[\\w- ]*$",
        "maxLength": 256
      },
      "WorkflowSteps": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/WorkflowStep"
        },
        "maxItems": 8
      },
      "WorkflowStep": {
        "type": "object",
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowStepType"
              },
              {
                "description": "<p> Currently, the following step types are supported. </p> <ul> <li> <p> <b> <code>COPY</code> </b> - Copy the file to another location.</p> </li> <li> <p> <b> <code>CUSTOM</code> </b> - Perform a custom step with an Lambda function target.</p> </li> <li> <p> <b> <code>DECRYPT</code> </b> - Decrypt a file that was encrypted before it was uploaded.</p> </li> <li> <p> <b> <code>DELETE</code> </b> - Delete the file.</p> </li> <li> <p> <b> <code>TAG</code> </b> - Add a tag to the file.</p> </li> </ul>"
              }
            ]
          },
          "CopyStepDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/CopyStepDetails"
              },
              {
                "description": "<p>Details for a step that performs a file copy.</p> <p> Consists of the following values: </p> <ul> <li> <p>A description</p> </li> <li> <p>An Amazon S3 location for the destination of the file copy.</p> </li> <li> <p>A flag that indicates whether to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p> </li> </ul>"
              }
            ]
          },
          "CustomStepDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomStepDetails"
              },
              {
                "description": "<p>Details for a step that invokes an Lambda function.</p> <p>Consists of the Lambda function's name, target, and timeout (in seconds). </p>"
              }
            ]
          },
          "DeleteStepDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/DeleteStepDetails"
              },
              {
                "description": "Details for a step that deletes the file."
              }
            ]
          },
          "TagStepDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/TagStepDetails"
              },
              {
                "description": "<p>Details for a step that creates one or more tags.</p> <p>You specify one or more tags. Each tag contains a key-value pair.</p>"
              }
            ]
          },
          "DecryptStepDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/DecryptStepDetails"
              },
              {
                "description": "<p>Details for a step that decrypts an encrypted file.</p> <p>Consists of the following values:</p> <ul> <li> <p>A descriptive name</p> </li> <li> <p>An Amazon S3 or Amazon Elastic File System (Amazon EFS) location for the source file to decrypt.</p> </li> <li> <p>An S3 or Amazon EFS location for the destination of the file decryption.</p> </li> <li> <p>A flag that indicates whether to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p> </li> <li> <p>The type of encryption that's used. Currently, only PGP encryption is supported.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "The basic building block of a workflow."
      },
      "WorkflowStepType": {
        "type": "string",
        "enum": [
          "COPY",
          "CUSTOM",
          "TAG",
          "DELETE",
          "DECRYPT"
        ]
      },
      "CopyStepDetails": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowStepName"
              },
              {
                "description": "The name of the step, used as an identifier."
              }
            ]
          },
          "DestinationFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/InputFileLocation"
              },
              {
                "description": "<p>Specifies the location for the file being copied. Use <code>${Transfer:UserName}</code> or <code>${Transfer:UploadDate}</code> in this field to parametrize the destination prefix by username or uploaded date.</p> <ul> <li> <p>Set the value of <code>DestinationFileLocation</code> to <code>${Transfer:UserName}</code> to copy uploaded files to an Amazon S3 bucket that is prefixed with the name of the Transfer Family user that uploaded the file.</p> </li> <li> <p>Set the value of <code>DestinationFileLocation</code> to <code>${Transfer:UploadDate}</code> to copy uploaded files to an Amazon S3 bucket that is prefixed with the date of the upload.</p> <note> <p>The system resolves <code>UploadDate</code> to a date format of <i>YYYY-MM-DD</i>, based on the date the file is uploaded in UTC.</p> </note> </li> </ul>"
              }
            ]
          },
          "OverwriteExisting": {
            "allOf": [
              {
                "$ref": "#/$defs/OverwriteExisting"
              },
              {
                "description": "<p>A flag that indicates whether to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p> <p>If the workflow is processing a file that has the same name as an existing file, the behavior is as follows:</p> <ul> <li> <p>If <code>OverwriteExisting</code> is <code>TRUE</code>, the existing file is replaced with the file being processed.</p> </li> <li> <p>If <code>OverwriteExisting</code> is <code>FALSE</code>, nothing happens, and the workflow processing stops.</p> </li> </ul>"
              }
            ]
          },
          "SourceFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceFileLocation"
              },
              {
                "description": "<p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p> <ul> <li> <p>To use the previous file as the input, enter <code>${previous.file}</code>. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li> <li> <p>To use the originally uploaded file location as input for this step, enter <code>${original.file}</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Each step type has its own <code>StepDetails</code> structure."
      },
      "WorkflowStepName": {
        "type": "string",
        "pattern": "^[\\w-]*$",
        "maxLength": 30
      },
      "InputFileLocation": {
        "type": "object",
        "properties": {
          "S3FileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/S3InputFileLocation"
              },
              {
                "description": "Specifies the details for the Amazon S3 file that's being copied or decrypted."
              }
            ]
          },
          "EfsFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/EfsFileLocation"
              },
              {
                "description": "Specifies the details for the Amazon Elastic File System (Amazon EFS) file that's being decrypted."
              }
            ]
          }
        },
        "description": "Specifies the location for the file that's being processed."
      },
      "S3InputFileLocation": {
        "type": "object",
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "Specifies the S3 bucket for the customer input file."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Key"
              },
              {
                "description": "The name assigned to the file when it was created in Amazon S3. You use the object key to retrieve the object."
              }
            ]
          }
        },
        "description": "<p>Specifies the customer input Amazon S3 file location. If it is used inside <code>copyStepDetails.DestinationFileLocation</code>, it should be the S3 copy destination.</p> <p> You need to provide the bucket and key. The key can represent either a path or a file. This is determined by whether or not you end the key value with the forward slash (/) character. If the final character is \"/\", then your file is copied to the folder, and its name does not change. If, rather, the final character is alphanumeric, your uploaded file is renamed to the path value. In this case, if a file with that name already exists, it is overwritten. </p> <p>For example, if your path is <code>shared-files/bob/</code>, your uploaded files are copied to the <code>shared-files/bob/</code>, folder. If your path is <code>shared-files/today</code>, each uploaded file is copied to the <code>shared-files</code> folder and named <code>today</code>: each upload overwrites the previous version of the <i>bob</i> file.</p>"
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Key": {
        "type": "string",
        "pattern": "[\\P{M}\\p{M}]*",
        "maxLength": 1024
      },
      "EfsFileLocation": {
        "type": "object",
        "properties": {
          "FileSystemId": {
            "allOf": [
              {
                "$ref": "#/$defs/EfsFileSystemId"
              },
              {
                "description": "The identifier of the file system, assigned by Amazon EFS."
              }
            ]
          },
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/EfsPath"
              },
              {
                "description": "The pathname for the folder being used by a workflow."
              }
            ]
          }
        },
        "description": "<p>Specifies the details for the file location for the file that's being used in the workflow. Only applicable if you are using Amazon Elastic File Systems (Amazon EFS) for storage.</p> <p> </p>"
      },
      "EfsFileSystemId": {
        "type": "string",
        "pattern": "^(arn:aws[-a-z]*:elasticfilesystem:[0-9a-z-:]+:(access-point/fsap|file-system/fs)-[0-9a-f]{8,40}|fs(ap)?-[0-9a-f]{8,40})$",
        "maxLength": 128
      },
      "EfsPath": {
        "type": "string",
        "pattern": "^[^\\x00]+$",
        "minLength": 1,
        "maxLength": 65536
      },
      "OverwriteExisting": {
        "type": "string",
        "enum": [
          "TRUE",
          "FALSE"
        ]
      },
      "SourceFileLocation": {
        "type": "string",
        "pattern": "^\\$\\{(\\w+.)+\\w+\\}$",
        "maxLength": 256
      },
      "CustomStepDetails": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowStepName"
              },
              {
                "description": "The name of the step, used as an identifier."
              }
            ]
          },
          "Target": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomStepTarget"
              },
              {
                "description": "The ARN for the Lambda function that is being called."
              }
            ]
          },
          "TimeoutSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomStepTimeoutSeconds"
              },
              {
                "description": "Timeout, in seconds, for the step."
              }
            ]
          },
          "SourceFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceFileLocation"
              },
              {
                "description": "<p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p> <ul> <li> <p>To use the previous file as the input, enter <code>${previous.file}</code>. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li> <li> <p>To use the originally uploaded file location as input for this step, enter <code>${original.file}</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Each step type has its own <code>StepDetails</code> structure."
      },
      "CustomStepTarget": {
        "type": "string",
        "pattern": "arn:[a-z-]+:lambda:.*$",
        "maxLength": 170
      },
      "CustomStepTimeoutSeconds": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1800
      },
      "DeleteStepDetails": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowStepName"
              },
              {
                "description": "The name of the step, used as an identifier."
              }
            ]
          },
          "SourceFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceFileLocation"
              },
              {
                "description": "<p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p> <ul> <li> <p>To use the previous file as the input, enter <code>${previous.file}</code>. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li> <li> <p>To use the originally uploaded file location as input for this step, enter <code>${original.file}</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "The name of the step, used to identify the delete step."
      },
      "TagStepDetails": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowStepName"
              },
              {
                "description": "The name of the step, used as an identifier."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Tags"
              },
              {
                "description": "Array that contains from 1 to 10 key/value pairs."
              }
            ]
          },
          "SourceFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceFileLocation"
              },
              {
                "description": "<p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p> <ul> <li> <p>To use the previous file as the input, enter <code>${previous.file}</code>. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li> <li> <p>To use the originally uploaded file location as input for this step, enter <code>${original.file}</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>Each step type has its own <code>StepDetails</code> structure.</p> <p>The key/value pairs used to tag a file during the execution of a workflow step.</p>"
      },
      "S3Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/S3Tag"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "S3Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3TagKey"
              },
              {
                "description": "The name assigned to the tag that you create."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/S3TagValue"
              },
              {
                "description": "The value that corresponds to the key."
              }
            ]
          }
        },
        "description": "Specifies the key-value pair that are assigned to a file during the execution of a Tagging step."
      },
      "S3TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "S3TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "maxLength": 256
      },
      "DecryptStepDetails": {
        "type": "object",
        "required": [
          "Type",
          "DestinationFileLocation"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkflowStepName"
              },
              {
                "description": "The name of the step, used as an identifier."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionType"
              },
              {
                "description": "The type of encryption used. Currently, this value must be <code>PGP</code>."
              }
            ]
          },
          "SourceFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceFileLocation"
              },
              {
                "description": "<p>Specifies which file to use as input to the workflow step: either the output from the previous step, or the originally uploaded file for the workflow.</p> <ul> <li> <p>To use the previous file as the input, enter <code>${previous.file}</code>. In this case, this workflow step uses the output file from the previous workflow step as input. This is the default value.</p> </li> <li> <p>To use the originally uploaded file location as input for this step, enter <code>${original.file}</code>.</p> </li> </ul>"
              }
            ]
          },
          "OverwriteExisting": {
            "allOf": [
              {
                "$ref": "#/$defs/OverwriteExisting"
              },
              {
                "description": "<p>A flag that indicates whether to overwrite an existing file of the same name. The default is <code>FALSE</code>.</p> <p>If the workflow is processing a file that has the same name as an existing file, the behavior is as follows:</p> <ul> <li> <p>If <code>OverwriteExisting</code> is <code>TRUE</code>, the existing file is replaced with the file being processed.</p> </li> <li> <p>If <code>OverwriteExisting</code> is <code>FALSE</code>, nothing happens, and the workflow processing stops.</p> </li> </ul>"
              }
            ]
          },
          "DestinationFileLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/InputFileLocation"
              },
              {
                "description": "<p>Specifies the location for the file being decrypted. Use <code>${Transfer:UserName}</code> or <code>${Transfer:UploadDate}</code> in this field to parametrize the destination prefix by username or uploaded date.</p> <ul> <li> <p>Set the value of <code>DestinationFileLocation</code> to <code>${Transfer:UserName}</code> to decrypt uploaded files to an Amazon S3 bucket that is prefixed with the name of the Transfer Family user that uploaded the file.</p> </li> <li> <p>Set the value of <code>DestinationFileLocation</code> to <code>${Transfer:UploadDate}</code> to decrypt uploaded files to an Amazon S3 bucket that is prefixed with the date of the upload.</p> <note> <p>The system resolves <code>UploadDate</code> to a date format of <i>YYYY-MM-DD</i>, based on the date the file is uploaded in UTC.</p> </note> </li> </ul>"
              }
            ]
          }
        },
        "description": "Each step type has its own <code>StepDetails</code> structure."
      },
      "EncryptionType": {
        "type": "string",
        "enum": [
          "PGP"
        ]
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The name assigned to the tag that you create."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "Contains one or more values that you assigned to the key name you create."
              }
            ]
          }
        },
        "description": "Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called <code>Group</code> and assign the values <code>Research</code> and <code>Accounting</code> to that group."
      },
      "TagKey": {
        "type": "string",
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://transfer.us-east-1.amazonaws.com/#X-Amz-Target=TransferService.CreateWorkflow"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**WorkflowId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
