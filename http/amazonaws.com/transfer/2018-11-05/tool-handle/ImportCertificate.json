{
  "name": "ImportCertificate",
  "description": "Imports the signing and encryption certificates that you need to create local (AS2) profiles and partner profiles.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "TransferService.ImportCertificate"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ImportCertificateRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ImportCertificateRequest": {
        "type": "object",
        "required": [
          "Usage",
          "Certificate"
        ],
        "title": "ImportCertificateRequest",
        "properties": {
          "Usage": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateUsageType"
              },
              {
                "description": "Specifies whether this certificate is used for signing or encryption."
              }
            ]
          },
          "Certificate": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateBodyType"
              },
              {
                "description": "<ul> <li> <p>For the CLI, provide a file path for a certificate in URI format. For example, <code>--certificate file://encryption-cert.pem</code>. Alternatively, you can provide the raw content.</p> </li> <li> <p>For the SDK, specify the raw content of a certificate file. For example, <code>--certificate \"`cat encryption-cert.pem`\"</code>.</p> </li> </ul>"
              }
            ]
          },
          "CertificateChain": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateChainType"
              },
              {
                "description": "An optional list of certificates that make up the chain for the certificate that's being imported."
              }
            ]
          },
          "PrivateKey": {
            "allOf": [
              {
                "$ref": "#/$defs/PrivateKeyType"
              },
              {
                "description": "<ul> <li> <p>For the CLI, provide a file path for a private key in URI format.For example, <code>--private-key file://encryption-key.pem</code>. Alternatively, you can provide the raw content of the private key file.</p> </li> <li> <p>For the SDK, specify the raw content of a private key file. For example, <code>--private-key \"`cat encryption-key.pem`\"</code> </p> </li> </ul>"
              }
            ]
          },
          "ActiveDate": {
            "allOf": [
              {
                "$ref": "#/$defs/CertDate"
              },
              {
                "description": "An optional date that specifies when the certificate becomes active."
              }
            ]
          },
          "InactiveDate": {
            "allOf": [
              {
                "$ref": "#/$defs/CertDate"
              },
              {
                "description": "An optional date that specifies when the certificate becomes inactive."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A short description that helps identify the certificate. "
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/Tags"
              },
              {
                "description": "Key-value pairs that can be used to group and search for certificates."
              }
            ]
          }
        }
      },
      "CertificateUsageType": {
        "type": "string",
        "enum": [
          "SIGNING",
          "ENCRYPTION"
        ]
      },
      "CertificateBodyType": {
        "type": "string",
        "pattern": "^[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*",
        "minLength": 1,
        "maxLength": 16384,
        "format": "password"
      },
      "CertificateChainType": {
        "type": "string",
        "pattern": "^[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*",
        "minLength": 1,
        "maxLength": 2097152,
        "format": "password"
      },
      "PrivateKeyType": {
        "type": "string",
        "pattern": "^[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*",
        "minLength": 1,
        "maxLength": 16384,
        "format": "password"
      },
      "CertDate": {
        "type": "string",
        "format": "date-time"
      },
      "Description": {
        "type": "string",
        "pattern": "^[\\p{Graph}]+",
        "minLength": 1,
        "maxLength": 200
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The name assigned to the tag that you create."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "Contains one or more values that you assigned to the key name you create."
              }
            ]
          }
        },
        "description": "Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called <code>Group</code> and assign the values <code>Research</code> and <code>Accounting</code> to that group."
      },
      "TagKey": {
        "type": "string",
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://transfer.us-east-1.amazonaws.com/#X-Amz-Target=TransferService.ImportCertificate"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**CertificateId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
