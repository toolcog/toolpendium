{
  "name": "UpdateAgreement",
  "description": "Updates some of the parameters for an existing agreement. Provide the <code>AgreementId</code> and the <code>ServerId</code> for the agreement that you want to update, along with the new values for the parameters to update.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "TransferService.UpdateAgreement"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateAgreementRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateAgreementRequest": {
        "type": "object",
        "required": [
          "AgreementId",
          "ServerId"
        ],
        "title": "UpdateAgreementRequest",
        "properties": {
          "AgreementId": {
            "allOf": [
              {
                "$ref": "#/$defs/AgreementId"
              },
              {
                "description": "A unique identifier for the agreement. This identifier is returned when you create an agreement."
              }
            ]
          },
          "ServerId": {
            "allOf": [
              {
                "$ref": "#/$defs/ServerId"
              },
              {
                "description": "A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "To replace the existing description, provide a short description for the agreement. "
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/$defs/AgreementStatusType"
              },
              {
                "description": "You can update the status for the agreement, either activating an inactive agreement or the reverse."
              }
            ]
          },
          "LocalProfileId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProfileId"
              },
              {
                "description": "<p>A unique identifier for the AS2 local profile.</p> <p>To change the local profile identifier, provide a new value here.</p>"
              }
            ]
          },
          "PartnerProfileId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProfileId"
              },
              {
                "description": "A unique identifier for the partner profile. To change the partner profile identifier, provide a new value here."
              }
            ]
          },
          "BaseDirectory": {
            "allOf": [
              {
                "$ref": "#/$defs/HomeDirectory"
              },
              {
                "description": "To change the landing directory (folder) for files that are transferred, provide the bucket folder that you want to use; for example, <code>/<i>DOC-EXAMPLE-BUCKET</i>/<i>home</i>/<i>mydirectory</i> </code>."
              }
            ]
          },
          "AccessRole": {
            "allOf": [
              {
                "$ref": "#/$defs/Role"
              },
              {
                "description": "<p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the fileâ€™s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p> <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>"
              }
            ]
          }
        }
      },
      "AgreementId": {
        "type": "string",
        "pattern": "^a-([0-9a-f]{17})$",
        "minLength": 19,
        "maxLength": 19
      },
      "ServerId": {
        "type": "string",
        "pattern": "^s-([0-9a-f]{17})$",
        "minLength": 19,
        "maxLength": 19
      },
      "Description": {
        "type": "string",
        "pattern": "^[\\p{Graph}]+",
        "minLength": 1,
        "maxLength": 200
      },
      "AgreementStatusType": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "ProfileId": {
        "type": "string",
        "pattern": "^p-([0-9a-f]{17})$",
        "minLength": 19,
        "maxLength": 19
      },
      "HomeDirectory": {
        "type": "string",
        "pattern": "^$|/.*",
        "maxLength": 1024
      },
      "Role": {
        "type": "string",
        "pattern": "arn:.*role/.*",
        "minLength": 20,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://transfer.us-east-1.amazonaws.com/#X-Amz-Target=TransferService.UpdateAgreement"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AgreementId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
