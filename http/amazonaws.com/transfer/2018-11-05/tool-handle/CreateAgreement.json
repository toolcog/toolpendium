{
  "name": "CreateAgreement",
  "description": "<p>Creates an agreement. An agreement is a bilateral trading partner agreement, or partnership, between an Transfer Family server and an AS2 process. The agreement defines the file and message transfer relationship between the server and the AS2 process. To define an agreement, Transfer Family combines a server, local profile, partner profile, certificate, and other attributes.</p> <p>The partner is identified with the <code>PartnerProfileId</code>, and the AS2 process is identified with the <code>LocalProfileId</code>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "TransferService.CreateAgreement"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateAgreementRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateAgreementRequest": {
        "type": "object",
        "required": [
          "ServerId",
          "LocalProfileId",
          "PartnerProfileId",
          "BaseDirectory",
          "AccessRole"
        ],
        "title": "CreateAgreementRequest",
        "properties": {
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A name or short description to identify the agreement. "
              }
            ]
          },
          "ServerId": {
            "allOf": [
              {
                "$ref": "#/$defs/ServerId"
              },
              {
                "description": "A system-assigned unique identifier for a server instance. This is the specific server that the agreement uses."
              }
            ]
          },
          "LocalProfileId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProfileId"
              },
              {
                "description": "A unique identifier for the AS2 local profile."
              }
            ]
          },
          "PartnerProfileId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProfileId"
              },
              {
                "description": "A unique identifier for the partner profile used in the agreement."
              }
            ]
          },
          "BaseDirectory": {
            "allOf": [
              {
                "$ref": "#/$defs/HomeDirectory"
              },
              {
                "description": "<p>The landing directory (folder) for files transferred by using the AS2 protocol.</p> <p>A <code>BaseDirectory</code> example is <code>/DOC-EXAMPLE-BUCKET/home/mydirectory</code>.</p>"
              }
            ]
          },
          "AccessRole": {
            "allOf": [
              {
                "$ref": "#/$defs/Role"
              },
              {
                "description": "<p>With AS2, you can send files by calling <code>StartFileTransfer</code> and specifying the file paths in the request parameter, <code>SendFilePaths</code>. We use the fileâ€™s parent directory (for example, for <code>--send-file-paths /bucket/dir/file.txt</code>, parent directory is <code>/bucket/dir/</code>) to temporarily store a processed AS2 message file, store the MDN when we receive them from the partner, and write a final JSON file containing relevant metadata of the transmission. So, the <code>AccessRole</code> needs to provide read and write access to the parent directory of the file location used in the <code>StartFileTransfer</code> request. Additionally, you need to provide read and write access to the parent directory of the files that you intend to send with <code>StartFileTransfer</code>.</p> <p>If you are using Basic authentication for your AS2 connector, the access role requires the <code>secretsmanager:GetSecretValue</code> permission for the secret. If the secret is encrypted using a customer-managed key instead of the Amazon Web Services managed key in Secrets Manager, then the role also needs the <code>kms:Decrypt</code> permission for that key.</p>"
              }
            ]
          },
          "Status": {
            "allOf": [
              {
                "$ref": "#/$defs/AgreementStatusType"
              },
              {
                "description": "The status of the agreement. The agreement can be either <code>ACTIVE</code> or <code>INACTIVE</code>."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/Tags"
              },
              {
                "description": "Key-value pairs that can be used to group and search for agreements."
              }
            ]
          }
        }
      },
      "Description": {
        "type": "string",
        "pattern": "^[\\p{Graph}]+",
        "minLength": 1,
        "maxLength": 200
      },
      "ServerId": {
        "type": "string",
        "pattern": "^s-([0-9a-f]{17})$",
        "minLength": 19,
        "maxLength": 19
      },
      "ProfileId": {
        "type": "string",
        "pattern": "^p-([0-9a-f]{17})$",
        "minLength": 19,
        "maxLength": 19
      },
      "HomeDirectory": {
        "type": "string",
        "pattern": "^$|/.*",
        "maxLength": 1024
      },
      "Role": {
        "type": "string",
        "pattern": "arn:.*role/.*",
        "minLength": 20,
        "maxLength": 2048
      },
      "AgreementStatusType": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The name assigned to the tag that you create."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "Contains one or more values that you assigned to the key name you create."
              }
            ]
          }
        },
        "description": "Creates a key-value pair for a specific resource. Tags are metadata that you can use to search for and group a resource for various purposes. You can apply tags to servers, users, and roles. A tag key can take more than one value. For example, to group servers for accounting purposes, you might create a tag called <code>Group</code> and assign the values <code>Research</code> and <code>Accounting</code> to that group."
      },
      "TagKey": {
        "type": "string",
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://transfer.us-east-1.amazonaws.com/#X-Amz-Target=TransferService.CreateAgreement"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AgreementId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
