{
  "name": "CreateDeploymentConfig",
  "description": " Creates a deployment configuration. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodeDeploy_20141006.CreateDeploymentConfig"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateDeploymentConfigInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateDeploymentConfigInput": {
        "type": "object",
        "required": [
          "deploymentConfigName"
        ],
        "title": "CreateDeploymentConfigInput",
        "properties": {
          "deploymentConfigName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentConfigName"
              },
              {
                "description": "The name of the deployment configuration to create."
              }
            ]
          },
          "minimumHealthyHosts": {
            "allOf": [
              {
                "$ref": "#/$defs/MinimumHealthyHosts"
              },
              {
                "description": "<p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p> <p>The type parameter takes either of the following values:</p> <ul> <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li> <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li> </ul> <p>The value parameter takes an integer.</p> <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p>"
              }
            ]
          },
          "trafficRoutingConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/TrafficRoutingConfig"
              },
              {
                "description": "The configuration that specifies how the deployment traffic is routed."
              }
            ]
          },
          "computePlatform": {
            "allOf": [
              {
                "$ref": "#/$defs/ComputePlatform"
              },
              {
                "description": "The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>)."
              }
            ]
          }
        },
        "description": "Represents the input of a <code>CreateDeploymentConfig</code> operation."
      },
      "DeploymentConfigName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "MinimumHealthyHosts": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/MinimumHealthyHostsType"
              },
              {
                "description": "<p>The minimum healthy instance type:</p> <ul> <li> <p> <code>HOST_COUNT</code>: The minimum number of healthy instances as an absolute value.</p> </li> <li> <p> <code>FLEET_PERCENT</code>: The minimum number of healthy instances as a percentage of the total number of instances in the deployment.</p> </li> </ul> <p>In an example of nine instances, if a HOST_COUNT of six is specified, deploy to up to three instances at a time. The deployment is successful if six or more instances are deployed to successfully. Otherwise, the deployment fails. If a FLEET_PERCENT of 40 is specified, deploy to up to five instances at a time. The deployment is successful if four or more instances are deployed to successfully. Otherwise, the deployment fails.</p> <note> <p>In a call to the <code>GetDeploymentConfig</code>, CodeDeployDefault.OneAtATime returns a minimum healthy instance type of MOST_CONCURRENCY and a value of 1. This means a deployment to only one instance at a time. (You cannot set the type to MOST_CONCURRENCY, only to HOST_COUNT or FLEET_PERCENT.) In addition, with CodeDeployDefault.OneAtATime, CodeDeploy attempts to ensure that all instances but one are kept in a healthy state during the deployment. Although this allows one instance at a time to be taken offline for a new deployment, it also means that if the deployment to the last instance fails, the overall deployment is still successful.</p> </note> <p>For more information, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-health.html\">CodeDeploy Instance Health</a> in the <i>CodeDeploy User Guide</i>.</p>"
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/MinimumHealthyHostsValue"
              },
              {
                "description": "The minimum healthy instance value."
              }
            ]
          }
        },
        "description": "Information about minimum healthy instance."
      },
      "MinimumHealthyHostsType": {
        "type": "string",
        "enum": [
          "HOST_COUNT",
          "FLEET_PERCENT"
        ]
      },
      "MinimumHealthyHostsValue": {
        "type": "integer"
      },
      "TrafficRoutingConfig": {
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/TrafficRoutingType"
              },
              {
                "description": "The type of traffic shifting (<code>TimeBasedCanary</code> or <code>TimeBasedLinear</code>) used by a deployment configuration."
              }
            ]
          },
          "timeBasedCanary": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeBasedCanary"
              },
              {
                "description": "A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file."
              }
            ]
          },
          "timeBasedLinear": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeBasedLinear"
              },
              {
                "description": "A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or Amazon ECS task sets are specified in the deployment's AppSpec file."
              }
            ]
          }
        },
        "description": "The configuration that specifies how traffic is shifted from one version of a Lambda function to another version during an Lambda deployment, or from one Amazon ECS task set to another during an Amazon ECS deployment."
      },
      "TrafficRoutingType": {
        "type": "string",
        "enum": [
          "TimeBasedCanary",
          "TimeBasedLinear",
          "AllAtOnce"
        ]
      },
      "TimeBasedCanary": {
        "type": "object",
        "properties": {
          "canaryPercentage": {
            "allOf": [
              {
                "$ref": "#/$defs/Percentage"
              },
              {
                "description": "The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment."
              }
            ]
          },
          "canaryInterval": {
            "allOf": [
              {
                "$ref": "#/$defs/WaitTimeInMins"
              },
              {
                "description": "The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment."
              }
            ]
          }
        },
        "description": "A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file."
      },
      "Percentage": {
        "type": "integer"
      },
      "WaitTimeInMins": {
        "type": "integer"
      },
      "TimeBasedLinear": {
        "type": "object",
        "properties": {
          "linearPercentage": {
            "allOf": [
              {
                "$ref": "#/$defs/Percentage"
              },
              {
                "description": "The percentage of traffic that is shifted at the start of each increment of a <code>TimeBasedLinear</code> deployment."
              }
            ]
          },
          "linearInterval": {
            "allOf": [
              {
                "$ref": "#/$defs/WaitTimeInMins"
              },
              {
                "description": "The number of minutes between each incremental traffic shift of a <code>TimeBasedLinear</code> deployment."
              }
            ]
          }
        },
        "description": "A configuration that shifts traffic from one version of a Lambda function or ECS task set to another in equal increments, with an equal number of minutes between each increment. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file."
      },
      "ComputePlatform": {
        "type": "string",
        "enum": [
          "Server",
          "Lambda",
          "ECS"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codedeploy.us-east-1.amazonaws.com/#X-Amz-Target=CodeDeploy_20141006.CreateDeploymentConfig"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents the output of a <code>CreateDeploymentConfig</code> operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**deploymentConfigId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
