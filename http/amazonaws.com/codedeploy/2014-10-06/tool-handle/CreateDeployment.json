{
  "name": "CreateDeployment",
  "description": "Deploys an application revision through the specified deployment group.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodeDeploy_20141006.CreateDeployment"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateDeploymentInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateDeploymentInput": {
        "type": "object",
        "required": [
          "applicationName"
        ],
        "title": "CreateDeploymentInput",
        "properties": {
          "applicationName": {
            "allOf": [
              {
                "$ref": "#/$defs/ApplicationName"
              },
              {
                "description": "The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account."
              }
            ]
          },
          "deploymentGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentGroupName"
              },
              {
                "description": "The name of the deployment group."
              }
            ]
          },
          "revision": {
            "allOf": [
              {
                "$ref": "#/$defs/RevisionLocation"
              },
              {
                "description": " The type and location of the revision to deploy. "
              }
            ]
          },
          "deploymentConfigName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentConfigName"
              },
              {
                "description": "<p>The name of a deployment configuration associated with the IAM user or Amazon Web Services account.</p> <p>If not specified, the value configured in the deployment group is used as the default. If the deployment group does not have a deployment configuration associated with it, <code>CodeDeployDefault</code>.<code>OneAtATime</code> is used by default.</p>"
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A comment about the deployment."
              }
            ]
          },
          "ignoreApplicationStopFailures": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p> If true, then if an <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, or <code>AfterBlockTraffic</code> deployment lifecycle event to an instance fails, then the deployment continues to the next deployment lifecycle event. For example, if <code>ApplicationStop</code> fails, the deployment continues with <code>DownloadBundle</code>. If <code>BeforeBlockTraffic</code> fails, the deployment continues with <code>BlockTraffic</code>. If <code>AfterBlockTraffic</code> fails, the deployment continues with <code>ApplicationStop</code>. </p> <p> If false or not specified, then if a lifecycle event fails during a deployment to an instance, that deployment fails. If deployment to that instance is part of an overall deployment and the number of healthy hosts is not less than the minimum number of healthy hosts, then a deployment to the next instance is attempted. </p> <p> During a deployment, the CodeDeploy agent runs the scripts specified for <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> in the AppSpec file from the previous successful deployment. (All other scripts are run from the AppSpec file in the current deployment.) If one of these scripts contains an error and does not run successfully, the deployment can fail. </p> <p> If the cause of the failure is a script from the last successful deployment that will never run successfully, create a new deployment and use <code>ignoreApplicationStopFailures</code> to specify that the <code>ApplicationStop</code>, <code>BeforeBlockTraffic</code>, and <code>AfterBlockTraffic</code> failures should be ignored. </p>"
              }
            ]
          },
          "targetInstances": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetInstances"
              },
              {
                "description": " Information about the instances that belong to the replacement environment in a blue/green deployment. "
              }
            ]
          },
          "autoRollbackConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoRollbackConfiguration"
              },
              {
                "description": "Configuration information for an automatic rollback that is added when a deployment is created."
              }
            ]
          },
          "updateOutdatedInstancesOnly": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " Indicates whether to deploy to all instances or only to instances that are not running the latest application revision. "
              }
            ]
          },
          "fileExistsBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/FileExistsBehavior"
              },
              {
                "description": "<p>Information about how CodeDeploy handles files that already exist in a deployment target location but weren't part of the previous successful deployment.</p> <p>The <code>fileExistsBehavior</code> parameter takes any of the following values:</p> <ul> <li> <p>DISALLOW: The deployment fails. This is also the default behavior if no option is specified.</p> </li> <li> <p>OVERWRITE: The version of the file from the application revision currently being deployed replaces the version already on the instance.</p> </li> <li> <p>RETAIN: The version of the file already on the instance is kept and used as part of the new deployment.</p> </li> </ul>"
              }
            ]
          },
          "overrideAlarmConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmConfiguration"
              },
              {
                "description": "<p>Allows you to specify information about alarms associated with a deployment. The alarm configuration that you specify here will override the alarm configuration at the deployment group level. Consider overriding the alarm configuration if you have set up alarms at the deployment group level that are causing deployment failures. In this case, you would call <code>CreateDeployment</code> to create a new deployment that uses a previous application revision that is known to work, and set its alarm configuration to turn off alarm polling. Turning off alarm polling ensures that the new deployment proceeds without being blocked by the alarm that was generated by the previous, failed, deployment.</p> <note> <p>If you specify an <code>overrideAlarmConfiguration</code>, you need the <code>UpdateDeploymentGroup</code> IAM permission when calling <code>CreateDeployment</code>.</p> </note>"
              }
            ]
          }
        },
        "description": "Represents the input of a <code>CreateDeployment</code> operation."
      },
      "ApplicationName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "DeploymentGroupName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "RevisionLocation": {
        "type": "object",
        "properties": {
          "revisionType": {
            "allOf": [
              {
                "$ref": "#/$defs/RevisionLocationType"
              },
              {
                "description": "<p>The type of application revision:</p> <ul> <li> <p>S3: An application revision stored in Amazon S3.</p> </li> <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li> <li> <p>String: A YAML-formatted or JSON-formatted string (Lambda deployments only).</p> </li> <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li> </ul>"
              }
            ]
          },
          "s3Location": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Location"
              },
              {
                "description": "Information about the location of a revision stored in Amazon S3. "
              }
            ]
          },
          "gitHubLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/GitHubLocation"
              },
              {
                "description": "Information about the location of application artifacts stored in GitHub."
              }
            ]
          },
          "string": {
            "allOf": [
              {
                "$ref": "#/$defs/RawString"
              },
              {
                "description": "Information about the location of an Lambda deployment revision stored as a RawString."
              }
            ]
          },
          "appSpecContent": {
            "allOf": [
              {
                "$ref": "#/$defs/AppSpecContent"
              },
              {
                "description": " The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. "
              }
            ]
          }
        },
        "description": "Information about the location of an application revision."
      },
      "RevisionLocationType": {
        "type": "string",
        "enum": [
          "S3",
          "GitHub",
          "String",
          "AppSpecContent"
        ]
      },
      "S3Location": {
        "type": "object",
        "properties": {
          "bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The name of the Amazon S3 bucket where the application revision is stored."
              }
            ]
          },
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Key"
              },
              {
                "description": "The name of the Amazon S3 object that represents the bundled artifacts for the application revision."
              }
            ]
          },
          "bundleType": {
            "allOf": [
              {
                "$ref": "#/$defs/BundleType"
              },
              {
                "description": "<p>The file type of the application revision. Must be one of the following:</p> <ul> <li> <p> <code>tar</code>: A tar archive file.</p> </li> <li> <p> <code>tgz</code>: A compressed tar archive file.</p> </li> <li> <p> <code>zip</code>: A zip archive file.</p> </li> </ul>"
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionId"
              },
              {
                "description": "<p>A specific version of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the version is not specified, the system uses the most recent version by default.</p>"
              }
            ]
          },
          "eTag": {
            "allOf": [
              {
                "$ref": "#/$defs/ETag"
              },
              {
                "description": "<p>The ETag of the Amazon S3 object that represents the bundled artifacts for the application revision.</p> <p>If the ETag is not specified as an input parameter, ETag validation of the object is skipped.</p>"
              }
            ]
          }
        },
        "description": "Information about the location of application artifacts stored in Amazon S3."
      },
      "S3Bucket": {
        "type": "string"
      },
      "S3Key": {
        "type": "string"
      },
      "BundleType": {
        "type": "string",
        "enum": [
          "tar",
          "tgz",
          "zip",
          "YAML",
          "JSON"
        ]
      },
      "VersionId": {
        "type": "string"
      },
      "ETag": {
        "type": "string"
      },
      "GitHubLocation": {
        "type": "object",
        "properties": {
          "repository": {
            "allOf": [
              {
                "$ref": "#/$defs/Repository"
              },
              {
                "description": "<p>The GitHub account and repository pair that stores a reference to the commit that represents the bundled artifacts for the application revision. </p> <p>Specified as account/repository.</p>"
              }
            ]
          },
          "commitId": {
            "allOf": [
              {
                "$ref": "#/$defs/CommitId"
              },
              {
                "description": "The SHA1 commit ID of the GitHub commit that represents the bundled artifacts for the application revision."
              }
            ]
          }
        },
        "description": "Information about the location of application artifacts stored in GitHub."
      },
      "Repository": {
        "type": "string"
      },
      "CommitId": {
        "type": "string"
      },
      "RawString": {
        "type": "object",
        "deprecated": true,
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/RawStringContent"
              },
              {
                "description": "The YAML-formatted or JSON-formatted revision string. It includes information about which Lambda function to update and optional Lambda functions that validate deployment lifecycle events."
              }
            ]
          },
          "sha256": {
            "allOf": [
              {
                "$ref": "#/$defs/RawStringSha256"
              },
              {
                "description": "The SHA256 hash value of the revision content."
              }
            ]
          }
        },
        "description": "A revision for an Lambda deployment that is a YAML-formatted or JSON-formatted string. For Lambda deployments, the revision is the same as the AppSpec file.RawString and String revision type are deprecated, use AppSpecContent type instead."
      },
      "RawStringContent": {
        "type": "string"
      },
      "RawStringSha256": {
        "type": "string"
      },
      "AppSpecContent": {
        "type": "object",
        "properties": {
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/RawStringContent"
              },
              {
                "description": "<p> The YAML-formatted or JSON-formatted revision string. </p> <p> For an Lambda deployment, the content includes a Lambda function name, the alias for its original version, and the alias for its replacement version. The deployment shifts traffic from the original version of the Lambda function to the replacement version. </p> <p> For an Amazon ECS deployment, the content includes the task name, information about the load balancer that serves traffic to the container, and more. </p> <p> For both types of deployments, the content can specify Lambda functions that run at specified hooks, such as <code>BeforeInstall</code>, during a deployment. </p>"
              }
            ]
          },
          "sha256": {
            "allOf": [
              {
                "$ref": "#/$defs/RawStringSha256"
              },
              {
                "description": " The SHA256 hash value of the revision content. "
              }
            ]
          }
        },
        "description": " A revision for an Lambda or Amazon ECS deployment that is a YAML-formatted or JSON-formatted string. For Lambda and Amazon ECS deployments, the revision is the same as the AppSpec file. This method replaces the deprecated <code>RawString</code> data type. "
      },
      "DeploymentConfigName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "Description": {
        "type": "string"
      },
      "Boolean": {
        "type": "boolean"
      },
      "TargetInstances": {
        "type": "object",
        "properties": {
          "tagFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagFilterList"
              },
              {
                "description": "The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>."
              }
            ]
          },
          "autoScalingGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoScalingGroupNameList"
              },
              {
                "description": "The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment."
              }
            ]
          },
          "ec2TagSet": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagSet"
              },
              {
                "description": "Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>."
              }
            ]
          }
        },
        "description": "Information about the instances to be used in the replacement environment in a blue/green deployment."
      },
      "EC2TagFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EC2TagFilter"
        }
      },
      "EC2TagFilter": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The tag filter key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/Value"
              },
              {
                "description": "The tag filter value."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagFilterType"
              },
              {
                "description": "<p>The tag filter type:</p> <ul> <li> <p> <code>KEY_ONLY</code>: Key only.</p> </li> <li> <p> <code>VALUE_ONLY</code>: Value only.</p> </li> <li> <p> <code>KEY_AND_VALUE</code>: Key and value.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Information about an EC2 tag filter."
      },
      "Key": {
        "type": "string"
      },
      "Value": {
        "type": "string"
      },
      "EC2TagFilterType": {
        "type": "string",
        "enum": [
          "KEY_ONLY",
          "VALUE_ONLY",
          "KEY_AND_VALUE"
        ]
      },
      "AutoScalingGroupNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AutoScalingGroupName"
        }
      },
      "AutoScalingGroupName": {
        "type": "string"
      },
      "EC2TagSet": {
        "type": "object",
        "properties": {
          "ec2TagSetList": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagSetList"
              },
              {
                "description": "A list that contains other lists of Amazon EC2 instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list."
              }
            ]
          }
        },
        "description": "Information about groups of Amazon EC2 instance tags."
      },
      "EC2TagSetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EC2TagFilterList"
        }
      },
      "AutoRollbackConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether a defined automatic rollback configuration is currently enabled."
              }
            ]
          },
          "events": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoRollbackEventsList"
              },
              {
                "description": "The event type or types that trigger a rollback."
              }
            ]
          }
        },
        "description": "Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully."
      },
      "AutoRollbackEventsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AutoRollbackEvent"
        }
      },
      "AutoRollbackEvent": {
        "type": "string",
        "enum": [
          "DEPLOYMENT_FAILURE",
          "DEPLOYMENT_STOP_ON_ALARM",
          "DEPLOYMENT_STOP_ON_REQUEST"
        ]
      },
      "FileExistsBehavior": {
        "type": "string",
        "enum": [
          "DISALLOW",
          "OVERWRITE",
          "RETAIN"
        ]
      },
      "AlarmConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether the alarm configuration is enabled."
              }
            ]
          },
          "ignorePollAlarmFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p> <ul> <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> </ul>"
              }
            ]
          },
          "alarms": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmList"
              },
              {
                "description": "A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added."
              }
            ]
          }
        },
        "description": "Information about alarms associated with a deployment or deployment group."
      },
      "AlarmList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Alarm"
        }
      },
      "Alarm": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmName"
              },
              {
                "description": "The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms."
              }
            ]
          }
        },
        "description": "Information about an alarm."
      },
      "AlarmName": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codedeploy.us-east-1.amazonaws.com/#X-Amz-Target=CodeDeploy_20141006.CreateDeployment"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        " Represents the output of a <code>CreateDeployment</code> operation. ",
        "**Key properties:**",
        {
          "$ul": [
            "**deploymentId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "491": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "492": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "493": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "494": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "495": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "496": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "497": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "498": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "499": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "500": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "501": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "502": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "503": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "504": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "505": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
