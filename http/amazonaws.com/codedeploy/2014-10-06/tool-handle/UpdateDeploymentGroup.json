{
  "name": "UpdateDeploymentGroup",
  "description": "Changes information about a deployment group.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodeDeploy_20141006.UpdateDeploymentGroup"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateDeploymentGroupInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateDeploymentGroupInput": {
        "type": "object",
        "required": [
          "applicationName",
          "currentDeploymentGroupName"
        ],
        "title": "UpdateDeploymentGroupInput",
        "properties": {
          "applicationName": {
            "allOf": [
              {
                "$ref": "#/$defs/ApplicationName"
              },
              {
                "description": "The application name that corresponds to the deployment group to update."
              }
            ]
          },
          "currentDeploymentGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentGroupName"
              },
              {
                "description": "The current name of the deployment group."
              }
            ]
          },
          "newDeploymentGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentGroupName"
              },
              {
                "description": "The new name of the deployment group, if you want to change it."
              }
            ]
          },
          "deploymentConfigName": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentConfigName"
              },
              {
                "description": "The replacement deployment configuration name to use, if you want to change it."
              }
            ]
          },
          "ec2TagFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagFilterList"
              },
              {
                "description": "The replacement set of Amazon EC2 tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names."
              }
            ]
          },
          "onPremisesInstanceTagFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/TagFilterList"
              },
              {
                "description": "The replacement set of on-premises instance tags on which to filter, if you want to change them. To keep the existing tags, enter their names. To remove tags, do not enter any tag names."
              }
            ]
          },
          "autoScalingGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoScalingGroupNameList"
              },
              {
                "description": "<p>The replacement list of Auto Scaling groups to be included in the deployment group, if you want to change them.</p> <ul> <li> <p>To keep the Auto Scaling groups, enter their names or do not specify this parameter. </p> </li> <li> <p>To remove Auto Scaling groups, specify a non-null empty list of Auto Scaling group names to detach all CodeDeploy-managed Auto Scaling lifecycle hooks. For examples, see <a href=\"https://docs.aws.amazon.com/https:/docs.aws.amazon.com/codedeploy/latest/userguide/troubleshooting-auto-scaling.html#troubleshooting-auto-scaling-heartbeat\">Amazon EC2 instances in an Amazon EC2 Auto Scaling group fail to launch and receive the error \"Heartbeat Timeout\"</a> in the <i>CodeDeploy User Guide</i>.</p> </li> </ul>"
              }
            ]
          },
          "serviceRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Role"
              },
              {
                "description": "A replacement ARN for the service role, if you want to change it."
              }
            ]
          },
          "triggerConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerConfigList"
              },
              {
                "description": "Information about triggers to change when the deployment group is updated. For examples, see <a href=\"https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-edit.html\">Edit a Trigger in a CodeDeploy Deployment Group</a> in the <i>CodeDeploy User Guide</i>."
              }
            ]
          },
          "alarmConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmConfiguration"
              },
              {
                "description": "Information to add or change about Amazon CloudWatch alarms when the deployment group is updated."
              }
            ]
          },
          "autoRollbackConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoRollbackConfiguration"
              },
              {
                "description": "Information for an automatic rollback configuration that is added or changed when a deployment group is updated."
              }
            ]
          },
          "outdatedInstancesStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/OutdatedInstancesStrategy"
              },
              {
                "description": "<p>Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p> <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances.</p> <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.</p>"
              }
            ]
          },
          "deploymentStyle": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentStyle"
              },
              {
                "description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer."
              }
            ]
          },
          "blueGreenDeploymentConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/BlueGreenDeploymentConfiguration"
              },
              {
                "description": "Information about blue/green deployment options for a deployment group."
              }
            ]
          },
          "loadBalancerInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/LoadBalancerInfo"
              },
              {
                "description": "Information about the load balancer used in a deployment."
              }
            ]
          },
          "ec2TagSet": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagSet"
              },
              {
                "description": "Information about groups of tags applied to on-premises instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups."
              }
            ]
          },
          "ecsServices": {
            "allOf": [
              {
                "$ref": "#/$defs/ECSServiceList"
              },
              {
                "description": " The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>&lt;clustername&gt;:&lt;servicename&gt;</code>. "
              }
            ]
          },
          "onPremisesTagSet": {
            "allOf": [
              {
                "$ref": "#/$defs/OnPremisesTagSet"
              },
              {
                "description": "Information about an on-premises instance tag set. The deployment group includes only on-premises instances identified by all the tag groups."
              }
            ]
          }
        },
        "description": "Represents the input of an <code>UpdateDeploymentGroup</code> operation."
      },
      "ApplicationName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "DeploymentGroupName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "DeploymentConfigName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "EC2TagFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EC2TagFilter"
        }
      },
      "EC2TagFilter": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The tag filter key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/Value"
              },
              {
                "description": "The tag filter value."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagFilterType"
              },
              {
                "description": "<p>The tag filter type:</p> <ul> <li> <p> <code>KEY_ONLY</code>: Key only.</p> </li> <li> <p> <code>VALUE_ONLY</code>: Value only.</p> </li> <li> <p> <code>KEY_AND_VALUE</code>: Key and value.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Information about an EC2 tag filter."
      },
      "Key": {
        "type": "string"
      },
      "Value": {
        "type": "string"
      },
      "EC2TagFilterType": {
        "type": "string",
        "enum": [
          "KEY_ONLY",
          "VALUE_ONLY",
          "KEY_AND_VALUE"
        ]
      },
      "TagFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TagFilter"
        }
      },
      "TagFilter": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Key"
              },
              {
                "description": "The on-premises instance tag filter key."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/Value"
              },
              {
                "description": "The on-premises instance tag filter value."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/TagFilterType"
              },
              {
                "description": "<p>The on-premises instance tag filter type:</p> <ul> <li> <p>KEY_ONLY: Key only.</p> </li> <li> <p>VALUE_ONLY: Value only.</p> </li> <li> <p>KEY_AND_VALUE: Key and value.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Information about an on-premises instance tag filter."
      },
      "TagFilterType": {
        "type": "string",
        "enum": [
          "KEY_ONLY",
          "VALUE_ONLY",
          "KEY_AND_VALUE"
        ]
      },
      "AutoScalingGroupNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AutoScalingGroupName"
        }
      },
      "AutoScalingGroupName": {
        "type": "string"
      },
      "Role": {
        "type": "string"
      },
      "TriggerConfigList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TriggerConfig"
        }
      },
      "TriggerConfig": {
        "type": "object",
        "properties": {
          "triggerName": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerName"
              },
              {
                "description": "The name of the notification trigger."
              }
            ]
          },
          "triggerTargetArn": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerTargetArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent."
              }
            ]
          },
          "triggerEvents": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerEventTypeList"
              },
              {
                "description": "The event type or types for which notifications are triggered."
              }
            ]
          }
        },
        "description": "Information about notification triggers for the deployment group."
      },
      "TriggerName": {
        "type": "string"
      },
      "TriggerTargetArn": {
        "type": "string"
      },
      "TriggerEventTypeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TriggerEventType"
        }
      },
      "TriggerEventType": {
        "type": "string",
        "enum": [
          "DeploymentStart",
          "DeploymentSuccess",
          "DeploymentFailure",
          "DeploymentStop",
          "DeploymentRollback",
          "DeploymentReady",
          "InstanceStart",
          "InstanceSuccess",
          "InstanceFailure",
          "InstanceReady"
        ]
      },
      "AlarmConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether the alarm configuration is enabled."
              }
            ]
          },
          "ignorePollAlarmFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p> <ul> <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li> </ul>"
              }
            ]
          },
          "alarms": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmList"
              },
              {
                "description": "A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added."
              }
            ]
          }
        },
        "description": "Information about alarms associated with a deployment or deployment group."
      },
      "Boolean": {
        "type": "boolean"
      },
      "AlarmList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Alarm"
        }
      },
      "Alarm": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmName"
              },
              {
                "description": "The name of the alarm. Maximum length is 255 characters. Each alarm name can be used only once in a list of alarms."
              }
            ]
          }
        },
        "description": "Information about an alarm."
      },
      "AlarmName": {
        "type": "string"
      },
      "AutoRollbackConfiguration": {
        "type": "object",
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether a defined automatic rollback configuration is currently enabled."
              }
            ]
          },
          "events": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoRollbackEventsList"
              },
              {
                "description": "The event type or types that trigger a rollback."
              }
            ]
          }
        },
        "description": "Information about a configuration for automatically rolling back to a previous version of an application revision when a deployment is not completed successfully."
      },
      "AutoRollbackEventsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AutoRollbackEvent"
        }
      },
      "AutoRollbackEvent": {
        "type": "string",
        "enum": [
          "DEPLOYMENT_FAILURE",
          "DEPLOYMENT_STOP_ON_ALARM",
          "DEPLOYMENT_STOP_ON_REQUEST"
        ]
      },
      "OutdatedInstancesStrategy": {
        "type": "string",
        "enum": [
          "UPDATE",
          "IGNORE"
        ]
      },
      "DeploymentStyle": {
        "type": "object",
        "properties": {
          "deploymentType": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentType"
              },
              {
                "description": "Indicates whether to run an in-place deployment or a blue/green deployment."
              }
            ]
          },
          "deploymentOption": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentOption"
              },
              {
                "description": "Indicates whether to route deployment traffic behind a load balancer."
              }
            ]
          }
        },
        "description": "Information about the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer."
      },
      "DeploymentType": {
        "type": "string",
        "enum": [
          "IN_PLACE",
          "BLUE_GREEN"
        ]
      },
      "DeploymentOption": {
        "type": "string",
        "enum": [
          "WITH_TRAFFIC_CONTROL",
          "WITHOUT_TRAFFIC_CONTROL"
        ]
      },
      "BlueGreenDeploymentConfiguration": {
        "type": "object",
        "properties": {
          "terminateBlueInstancesOnDeploymentSuccess": {
            "allOf": [
              {
                "$ref": "#/$defs/BlueInstanceTerminationOption"
              },
              {
                "description": "Information about whether to terminate instances in the original fleet during a blue/green deployment."
              }
            ]
          },
          "deploymentReadyOption": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentReadyOption"
              },
              {
                "description": "Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment."
              }
            ]
          },
          "greenFleetProvisioningOption": {
            "allOf": [
              {
                "$ref": "#/$defs/GreenFleetProvisioningOption"
              },
              {
                "description": "Information about how instances are provisioned for a replacement environment in a blue/green deployment."
              }
            ]
          }
        },
        "description": "Information about blue/green deployment options for a deployment group."
      },
      "BlueInstanceTerminationOption": {
        "type": "object",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceAction"
              },
              {
                "description": "<p>The action to take on instances in the original environment after a successful blue/green deployment.</p> <ul> <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li> <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li> </ul>"
              }
            ]
          },
          "terminationWaitTimeInMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "<p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p> <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p> <p> The maximum setting is 2880 minutes (2 days). </p>"
              }
            ]
          }
        },
        "description": "Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. "
      },
      "InstanceAction": {
        "type": "string",
        "enum": [
          "TERMINATE",
          "KEEP_ALIVE"
        ]
      },
      "Duration": {
        "type": "integer"
      },
      "DeploymentReadyOption": {
        "type": "object",
        "properties": {
          "actionOnTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentReadyAction"
              },
              {
                "description": "<p>Information about when to reroute traffic from an original environment to a replacement environment in a blue/green deployment.</p> <ul> <li> <p>CONTINUE_DEPLOYMENT: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.</p> </li> <li> <p>STOP_DEPLOYMENT: Do not register new instances with a load balancer unless traffic rerouting is started using <a>ContinueDeployment</a>. If traffic rerouting is not started before the end of the specified wait period, the deployment status is changed to Stopped.</p> </li> </ul>"
              }
            ]
          },
          "waitTimeInMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "The number of minutes to wait before the status of a blue/green deployment is changed to Stopped if rerouting is not started manually. Applies only to the <code>STOP_DEPLOYMENT</code> option for <code>actionOnTimeout</code>."
              }
            ]
          }
        },
        "description": "Information about how traffic is rerouted to instances in a replacement environment in a blue/green deployment."
      },
      "DeploymentReadyAction": {
        "type": "string",
        "enum": [
          "CONTINUE_DEPLOYMENT",
          "STOP_DEPLOYMENT"
        ]
      },
      "GreenFleetProvisioningOption": {
        "type": "object",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/$defs/GreenFleetProvisioningAction"
              },
              {
                "description": "<p>The method used to add instances to a replacement environment.</p> <ul> <li> <p> <code>DISCOVER_EXISTING</code>: Use instances that already exist or will be created manually.</p> </li> <li> <p> <code>COPY_AUTO_SCALING_GROUP</code>: Use settings from a specified Auto Scaling group to define and create instances in a new Auto Scaling group.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Information about the instances that belong to the replacement environment in a blue/green deployment."
      },
      "GreenFleetProvisioningAction": {
        "type": "string",
        "enum": [
          "DISCOVER_EXISTING",
          "COPY_AUTO_SCALING_GROUP"
        ]
      },
      "LoadBalancerInfo": {
        "type": "object",
        "properties": {
          "elbInfoList": {
            "allOf": [
              {
                "$ref": "#/$defs/ELBInfoList"
              },
              {
                "description": "<p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note> <p> Adding more than one load balancer to the array is not supported. </p> </note>"
              }
            ]
          },
          "targetGroupInfoList": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupInfoList"
              },
              {
                "description": "<p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note> <p> Adding more than one target group to the array is not supported. </p> </note>"
              }
            ]
          },
          "targetGroupPairInfoList": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupPairInfoList"
              },
              {
                "description": " The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. "
              }
            ]
          }
        },
        "description": "Information about the Elastic Load Balancing load balancer or target group used in a deployment."
      },
      "ELBInfoList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ELBInfo"
        }
      },
      "ELBInfo": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ELBName"
              },
              {
                "description": "For blue/green deployments, the name of the load balancer that is used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete."
              }
            ]
          }
        },
        "description": "Information about a load balancer in Elastic Load Balancing to use in a deployment. Instances are registered directly with a load balancer, and traffic is routed to the load balancer."
      },
      "ELBName": {
        "type": "string"
      },
      "TargetGroupInfoList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetGroupInfo"
        }
      },
      "TargetGroupInfo": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupName"
              },
              {
                "description": "For blue/green deployments, the name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment are registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment is complete. "
              }
            ]
          }
        },
        "description": "Information about a target group in Elastic Load Balancing to use in a deployment. Instances are registered as targets in a target group, and traffic is routed to the target group."
      },
      "TargetGroupName": {
        "type": "string"
      },
      "TargetGroupPairInfoList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetGroupPairInfo"
        }
      },
      "TargetGroupPairInfo": {
        "type": "object",
        "properties": {
          "targetGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupInfoList"
              },
              {
                "description": " One pair of target groups. One is associated with the original task set. The second is associated with the task set that serves traffic after the deployment is complete. "
              }
            ]
          },
          "prodTrafficRoute": {
            "allOf": [
              {
                "$ref": "#/$defs/TrafficRoute"
              },
              {
                "description": " The path used by a load balancer to route production traffic when an Amazon ECS deployment is complete. "
              }
            ]
          },
          "testTrafficRoute": {
            "allOf": [
              {
                "$ref": "#/$defs/TrafficRoute"
              },
              {
                "description": " An optional path used by a load balancer to route test traffic after an Amazon ECS deployment. Validation can occur while test traffic is served during a deployment. "
              }
            ]
          }
        },
        "description": " Information about two target groups and how traffic is routed during an Amazon ECS deployment. An optional test traffic route can be specified. "
      },
      "TrafficRoute": {
        "type": "object",
        "properties": {
          "listenerArns": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerArnList"
              },
              {
                "description": " The Amazon Resource Name (ARN) of one listener. The listener identifies the route between a target group and a load balancer. This is an array of strings with a maximum size of one. "
              }
            ]
          }
        },
        "description": " Information about a listener. The listener contains the path used to route traffic that is received from the load balancer to a target group. "
      },
      "ListenerArnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ListenerArn"
        }
      },
      "ListenerArn": {
        "type": "string"
      },
      "EC2TagSet": {
        "type": "object",
        "properties": {
          "ec2TagSetList": {
            "allOf": [
              {
                "$ref": "#/$defs/EC2TagSetList"
              },
              {
                "description": "A list that contains other lists of Amazon EC2 instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list."
              }
            ]
          }
        },
        "description": "Information about groups of Amazon EC2 instance tags."
      },
      "EC2TagSetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EC2TagFilterList"
        }
      },
      "ECSServiceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ECSService"
        }
      },
      "ECSService": {
        "type": "object",
        "properties": {
          "serviceName": {
            "allOf": [
              {
                "$ref": "#/$defs/ECSServiceName"
              },
              {
                "description": " The name of the target Amazon ECS service. "
              }
            ]
          },
          "clusterName": {
            "allOf": [
              {
                "$ref": "#/$defs/ECSClusterName"
              },
              {
                "description": " The name of the cluster that the Amazon ECS service is associated with. "
              }
            ]
          }
        },
        "description": " Contains the service and cluster names used to identify an Amazon ECS deployment's target. "
      },
      "ECSServiceName": {
        "type": "string"
      },
      "ECSClusterName": {
        "type": "string"
      },
      "OnPremisesTagSet": {
        "type": "object",
        "properties": {
          "onPremisesTagSetList": {
            "allOf": [
              {
                "$ref": "#/$defs/OnPremisesTagSetList"
              },
              {
                "description": "A list that contains other lists of on-premises instance tag groups. For an instance to be included in the deployment group, it must be identified by all of the tag groups in the list."
              }
            ]
          }
        },
        "description": "Information about groups of on-premises instance tags."
      },
      "OnPremisesTagSetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TagFilterList"
        }
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codedeploy.us-east-1.amazonaws.com/#X-Amz-Target=CodeDeploy_20141006.UpdateDeploymentGroup"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents the output of an <code>UpdateDeploymentGroup</code> operation.",
        "**Key properties:**",
        {
          "$ul": [
            "**hooksNotCleanedUp**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "491": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "492": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "493": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "494": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "495": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "496": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "497": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "498": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "499": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "500": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "501": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "502": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "503": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "504": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "505": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "506": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "507": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "508": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "509": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "510": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
