{
  "name": "PutMetricPolicy",
  "description": "The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "MediaStore_20170901.PutMetricPolicy"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutMetricPolicyInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutMetricPolicyInput": {
        "type": "object",
        "required": [
          "ContainerName",
          "MetricPolicy"
        ],
        "title": "PutMetricPolicyInput",
        "properties": {
          "ContainerName": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerName"
              },
              {
                "description": "The name of the container that you want to add the metric policy to."
              }
            ]
          },
          "MetricPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricPolicy"
              },
              {
                "description": "<p>The metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:</p> <ul> <li> <p>An object group that defines which objects to include in the group. The definition can be a path or a file name, but it can't have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.</p> </li> <li> <p>An object group name that allows you to refer to the object group. The name can't have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).</p> </li> </ul>"
              }
            ]
          }
        }
      },
      "ContainerName": {
        "type": "string",
        "pattern": "[\\w-]+",
        "minLength": 1,
        "maxLength": 255
      },
      "MetricPolicy": {
        "type": "object",
        "required": [
          "ContainerLevelMetrics"
        ],
        "properties": {
          "ContainerLevelMetrics": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerLevelMetrics"
              },
              {
                "description": "A setting to enable or disable metrics at the container level."
              }
            ]
          },
          "MetricPolicyRules": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricPolicyRules"
              },
              {
                "description": "A parameter that holds an array of rules that enable metrics at the object level. This parameter is optional, but if you choose to include it, you must also include at least one rule. By default, you can include up to five rules. You can also <a href=\"https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas\">request a quota increase</a> to allow up to 300 rules per policy."
              }
            ]
          }
        },
        "description": "<p>The metric policy that is associated with the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include rules to define groups of objects that you want MediaStore to send object-level metrics for.</p> <p>To view examples of how to construct a metric policy for your use case, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/policies-metric-examples.html\">Example Metric Policies</a>.</p>"
      },
      "ContainerLevelMetrics": {
        "type": "string",
        "enum": [
          "ENABLED",
          "DISABLED"
        ]
      },
      "MetricPolicyRules": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MetricPolicyRule"
        },
        "minItems": 1,
        "maxItems": 300
      },
      "MetricPolicyRule": {
        "type": "object",
        "required": [
          "ObjectGroup",
          "ObjectGroupName"
        ],
        "properties": {
          "ObjectGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/ObjectGroup"
              },
              {
                "description": "A path or file name that defines which objects to include in the group. Wildcards (*) are acceptable."
              }
            ]
          },
          "ObjectGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/ObjectGroupName"
              },
              {
                "description": "A name that allows you to refer to the object group."
              }
            ]
          }
        },
        "description": "A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also <a href=\"https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas\">request a quota increase</a> to allow up to 300 rules per policy."
      },
      "ObjectGroup": {
        "type": "string",
        "pattern": "/?(?:[A-Za-z0-9_=:\\.\\-\\~\\*]+/){0,10}(?:[A-Za-z0-9_=:\\.\\-\\~\\*]+)?/?",
        "minLength": 1,
        "maxLength": 900
      },
      "ObjectGroupName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_]+",
        "minLength": 1,
        "maxLength": 30
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mediastore.us-east-1.amazonaws.com/#X-Amz-Target=MediaStore_20170901.PutMetricPolicy"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
