{
  "name": "PutCorsPolicy",
  "description": "<p>Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser's XMLHttpRequest capability.</p> <p>To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.</p> <p>To learn more about CORS, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html\">Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "MediaStore_20170901.PutCorsPolicy"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutCorsPolicyInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutCorsPolicyInput": {
        "type": "object",
        "required": [
          "ContainerName",
          "CorsPolicy"
        ],
        "title": "PutCorsPolicyInput",
        "properties": {
          "ContainerName": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerName"
              },
              {
                "description": "The name of the container that you want to assign the CORS policy to."
              }
            ]
          },
          "CorsPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/CorsPolicy"
              },
              {
                "description": "The CORS policy to apply to the container. "
              }
            ]
          }
        }
      },
      "ContainerName": {
        "type": "string",
        "pattern": "[\\w-]+",
        "minLength": 1,
        "maxLength": 255
      },
      "CorsPolicy": {
        "type": "array",
        "description": "The CORS policy of the container. ",
        "items": {
          "$ref": "#/$defs/CorsRule"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "CorsRule": {
        "type": "object",
        "required": [
          "AllowedOrigins",
          "AllowedHeaders"
        ],
        "properties": {
          "AllowedOrigins": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowedOrigins"
              },
              {
                "description": "<p>One or more response headers that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>Each CORS rule must have at least one <code>AllowedOrigins</code> element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.</p>"
              }
            ]
          },
          "AllowedMethods": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowedMethods"
              },
              {
                "description": "<p>Identifies an HTTP method that the origin that is specified in the rule is allowed to execute.</p> <p>Each CORS rule must contain at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code> element.</p>"
              }
            ]
          },
          "AllowedHeaders": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowedHeaders"
              },
              {
                "description": "<p>Specifies which headers are allowed in a preflight <code>OPTIONS</code> request through the <code>Access-Control-Request-Headers</code> header. Each header name that is specified in <code>Access-Control-Request-Headers</code> must have a corresponding entry in the rule. Only the headers that were requested are sent back. </p> <p>This element can contain only one wildcard character (*).</p>"
              }
            ]
          },
          "MaxAgeSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxAgeSeconds"
              },
              {
                "description": "<p>The time in seconds that your browser caches the preflight response for the specified resource.</p> <p>A CORS rule can have only one <code>MaxAgeSeconds</code> element.</p>"
              }
            ]
          },
          "ExposeHeaders": {
            "allOf": [
              {
                "$ref": "#/$defs/ExposeHeaders"
              },
              {
                "description": "<p>One or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript <code>XMLHttpRequest</code> object).</p> <p>This element is optional for each rule.</p>"
              }
            ]
          }
        },
        "description": "A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed."
      },
      "AllowedOrigins": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Origin"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "Origin": {
        "type": "string",
        "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+",
        "minLength": 1,
        "maxLength": 2048
      },
      "AllowedMethods": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MethodName"
        },
        "minItems": 1,
        "maxItems": 4
      },
      "MethodName": {
        "type": "string",
        "enum": [
          "PUT",
          "GET",
          "DELETE",
          "HEAD"
        ]
      },
      "AllowedHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Header"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "Header": {
        "type": "string",
        "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+",
        "minLength": 1,
        "maxLength": 8192
      },
      "MaxAgeSeconds": {
        "type": "integer",
        "minimum": 0,
        "maximum": 2147483647
      },
      "ExposeHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Header"
        },
        "minItems": 0,
        "maxItems": 100
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mediastore.us-east-1.amazonaws.com/#X-Amz-Target=MediaStore_20170901.PutCorsPolicy"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
