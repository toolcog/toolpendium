{
  "name": "ListPolicies",
  "description": "Returns a paginated list of all policies stored in the specified policy store.",
  "parameters": {
    "type": "object",
    "properties": {
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "VerifiedPermissions.ListPolicies"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ListPoliciesInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ListPoliciesInput": {
        "type": "object",
        "required": [
          "policyStoreId"
        ],
        "title": "ListPoliciesInput",
        "properties": {
          "policyStoreId": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyStoreId"
              },
              {
                "description": "Specifies the ID of the policy store you want to list policies from."
              }
            ]
          },
          "nextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/NextToken"
              },
              {
                "description": "Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results."
              }
            ]
          },
          "maxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxResults"
              },
              {
                "description": "Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results."
              }
            ]
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyFilter"
              },
              {
                "description": "Specifies a filter that limits the response to only policies that match the specified criteria. For example, you list only the policies that reference a specified principal."
              }
            ]
          }
        }
      },
      "PolicyStoreId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]*",
        "minLength": 1,
        "maxLength": 200
      },
      "NextToken": {
        "type": "string",
        "pattern": "[A-Za-z0-9-_=+/\\.]*",
        "minLength": 1,
        "maxLength": 8000
      },
      "MaxResults": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      },
      "PolicyFilter": {
        "type": "object",
        "properties": {
          "principal": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityReference"
              },
              {
                "description": "Filters the output to only policies that reference the specified principal."
              }
            ]
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityReference"
              },
              {
                "description": "Filters the output to only policies that reference the specified resource."
              }
            ]
          },
          "policyType": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyType"
              },
              {
                "description": "Filters the output to only policies of the specified type."
              }
            ]
          },
          "policyTemplateId": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyTemplateId"
              },
              {
                "description": "Filters the output to only template-linked policies that were instantiated from the specified policy template."
              }
            ]
          }
        },
        "description": "<p>Contains information about a filter to refine policies returned in a query.</p> <p>This data type is used as a response parameter for the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html\">ListPolicies</a> operation.</p>"
      },
      "EntityReference": {
        "type": "object",
        "properties": {
          "unspecified": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Used to indicate that a principal or resource is not specified. This can be used to search for policies that are not associated with a specific principal or resource."
              }
            ]
          },
          "identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityIdentifier"
              },
              {
                "description": "The identifier of the entity. It can consist of either an EntityType and EntityId, a principal, or a resource."
              }
            ]
          }
        },
        "description": "<p>Contains information about a principal or resource that can be referenced in a Cedar policy.</p> <p>This data type is used as part of the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_PolicyFilter.html\">PolicyFilter</a> structure that is used as a request parameter for the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html\">ListPolicies</a> operation..</p>"
      },
      "Boolean": {
        "type": "boolean"
      },
      "EntityIdentifier": {
        "type": "object",
        "required": [
          "entityType",
          "entityId"
        ],
        "properties": {
          "entityType": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityType"
              },
              {
                "description": "<p>The type of an entity.</p> <p>Example: <code>\"entityType\":\"<i>typeName</i>\"</code> </p>"
              }
            ]
          },
          "entityId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "<p>The identifier of an entity.</p> <p> <code>\"entityId\":\"<i>identifier</i>\"</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Contains the identifier of an entity, including its ID and type.</p> <p>This data type is used as a request parameter for <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_IsAuthorized.html\">IsAuthorized</a> operation, and as a response parameter for the <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html\">CreatePolicy</a>, <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_GetPolicy.html\">GetPolicy</a>, and <a href=\"https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicy.html\">UpdatePolicy</a> operations.</p> <p>Example: <code>{\"entityId\":\"<i>string</i>\",\"entityType\":\"<i>string</i>\"}</code> </p>"
      },
      "EntityType": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 200
      },
      "EntityId": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 200
      },
      "PolicyType": {
        "type": "string",
        "enum": [
          "STATIC",
          "TEMPLATE_LINKED"
        ]
      },
      "PolicyTemplateId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]*",
        "minLength": 1,
        "maxLength": 200
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://verifiedpermissions.us-east-1.amazonaws.com/#X-Amz-Target=VerifiedPermissions.ListPolicies{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**nextToken**",
            "**policies**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
