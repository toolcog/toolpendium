{
  "name": "CreateDomain",
  "description": "<p>Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.</p> <p>Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.</p> <p>Use this API or <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html\">UpdateDomain</a> to enable <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html\">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html\">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "DomainName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]+$",
        "minLength": 1,
        "maxLength": 64,
        "description": "The unique name of the domain."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "DefaultExpirationDays"
        ],
        "properties": {
          "DefaultExpirationDays": {
            "description": "The default number of days until the data within the domain expires.",
            "type": "integer",
            "minimum": 1,
            "maximum": 1098
          },
          "DefaultEncryptionKey": {
            "description": "The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.",
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "DeadLetterQueueUrl": {
            "description": "The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.",
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "Matching": {
            "description": "The flag that enables the matching process of duplicate profiles.",
            "type": "object",
            "properties": {
              "Enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/optionalBoolean"
                  },
                  {
                    "description": "The flag that enables the matching process of duplicate profiles."
                  }
                ]
              },
              "JobSchedule": {
                "allOf": [
                  {
                    "$ref": "#/$defs/JobSchedule"
                  },
                  {
                    "description": "The day and time when do you want to start the Identity Resolution Job every week."
                  }
                ]
              },
              "AutoMerging": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AutoMerging"
                  },
                  {
                    "description": "Configuration information about the auto-merging process."
                  }
                ]
              },
              "ExportingConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ExportingConfig"
                  },
                  {
                    "description": "Configuration information for exporting Identity Resolution results, for example, to an S3 bucket."
                  }
                ]
              }
            }
          },
          "RuleBasedMatching": {
            "description": "The request to enable the rule-based matching.",
            "type": "object",
            "properties": {
              "Enabled": {
                "allOf": [
                  {
                    "$ref": "#/$defs/optionalBoolean"
                  },
                  {
                    "description": "The flag that enables the rule-based matching process of duplicate profiles."
                  }
                ]
              },
              "MatchingRules": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MatchingRules"
                  },
                  {
                    "description": "Configures how the rule-based matching process should match profiles. You can have up to 15 <code>MatchingRule</code> in the <code>MatchingRules</code>."
                  }
                ]
              },
              "MaxAllowedRuleLevelForMerging": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MaxAllowedRuleLevelForMerging"
                  },
                  {
                    "description": " <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html\">MatchingRule</a> "
                  }
                ]
              },
              "MaxAllowedRuleLevelForMatching": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MaxAllowedRuleLevelForMatching"
                  },
                  {
                    "description": "Indicates the maximum allowed rule level."
                  }
                ]
              },
              "AttributeTypesSelector": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AttributeTypesSelector"
                  },
                  {
                    "description": "Configures information about the <code>AttributeTypesSelector</code> where the rule-based identity resolution uses to match profiles."
                  }
                ]
              },
              "ConflictResolution": {
                "$ref": "#/$defs/ConflictResolution"
              },
              "ExportingConfig": {
                "$ref": "#/$defs/ExportingConfig"
              }
            }
          },
          "Tags": {
            "description": "The tags used to organize, track, or control access for this resource.",
            "type": "object",
            "minProperties": 1,
            "maxProperties": 50,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "DomainName",
      "body"
    ],
    "$defs": {
      "optionalBoolean": {
        "type": "boolean"
      },
      "JobSchedule": {
        "type": "object",
        "required": [
          "DayOfTheWeek",
          "Time"
        ],
        "properties": {
          "DayOfTheWeek": {
            "allOf": [
              {
                "$ref": "#/$defs/JobScheduleDayOfTheWeek"
              },
              {
                "description": "The day when the Identity Resolution Job should run every week."
              }
            ]
          },
          "Time": {
            "allOf": [
              {
                "$ref": "#/$defs/JobScheduleTime"
              },
              {
                "description": "The time when the Identity Resolution Job should run every week."
              }
            ]
          }
        },
        "description": "The day and time when do you want to start the Identity Resolution Job every week."
      },
      "JobScheduleDayOfTheWeek": {
        "type": "string",
        "enum": [
          "SUNDAY",
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY"
        ]
      },
      "JobScheduleTime": {
        "type": "string",
        "pattern": "^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
        "minLength": 3,
        "maxLength": 5
      },
      "AutoMerging": {
        "type": "object",
        "required": [
          "Enabled"
        ],
        "properties": {
          "Enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/optionalBoolean"
              },
              {
                "description": "The flag that enables the auto-merging of duplicate profiles."
              }
            ]
          },
          "Consolidation": {
            "allOf": [
              {
                "$ref": "#/$defs/Consolidation"
              },
              {
                "description": "A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged."
              }
            ]
          },
          "ConflictResolution": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictResolution"
              },
              {
                "description": "How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same <code>FirstName</code> and <code>LastName</code> (and that is the matching criteria), which <code>EmailAddress</code> should be used? "
              }
            ]
          },
          "MinAllowedConfidenceScoreForMerging": {
            "allOf": [
              {
                "$ref": "#/$defs/Double0To1"
              },
              {
                "description": "A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles. "
              }
            ]
          }
        },
        "description": "Configuration settings for how to perform the auto-merging of profiles."
      },
      "Consolidation": {
        "type": "object",
        "required": [
          "MatchingAttributesList"
        ],
        "properties": {
          "MatchingAttributesList": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchingAttributesList"
              },
              {
                "description": "A list of matching criteria."
              }
            ]
          }
        },
        "description": "The matching criteria to be used during the auto-merging process. "
      },
      "MatchingAttributesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MatchingAttributes"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "MatchingAttributes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string1To255"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "string1To255": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ConflictResolution": {
        "type": "object",
        "required": [
          "ConflictResolvingModel"
        ],
        "properties": {
          "ConflictResolvingModel": {
            "allOf": [
              {
                "$ref": "#/$defs/ConflictResolvingModel"
              },
              {
                "description": "<p>How the auto-merging process should resolve conflicts between different profiles.</p> <ul> <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li> <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li> </ul>"
              }
            ]
          },
          "SourceName": {
            "allOf": [
              {
                "$ref": "#/$defs/string1To255"
              },
              {
                "description": "The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>."
              }
            ]
          }
        },
        "description": "How the auto-merging process should resolve conflicts between different profiles."
      },
      "ConflictResolvingModel": {
        "type": "string",
        "enum": [
          "RECENCY",
          "SOURCE"
        ]
      },
      "Double0To1": {
        "type": "number",
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "ExportingConfig": {
        "type": "object",
        "properties": {
          "S3Exporting": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ExportingConfig"
              },
              {
                "description": "The S3 location where Identity Resolution Jobs write result files."
              }
            ]
          }
        },
        "description": "<p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you'll get an exception in the API response. For an example policy, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service\">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>"
      },
      "S3ExportingConfig": {
        "type": "object",
        "required": [
          "S3BucketName"
        ],
        "properties": {
          "S3BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/s3BucketName"
              },
              {
                "description": "The name of the S3 bucket where Identity Resolution Jobs write result files."
              }
            ]
          },
          "S3KeyName": {
            "allOf": [
              {
                "$ref": "#/$defs/s3KeyNameCustomerOutputConfig"
              },
              {
                "description": "The S3 key name of the location where Identity Resolution Jobs write result files."
              }
            ]
          }
        },
        "description": "Configuration information about the S3 bucket where Identity Resolution Jobs write result files."
      },
      "s3BucketName": {
        "type": "string",
        "pattern": "^[a-z0-9.-]+$",
        "minLength": 3,
        "maxLength": 63
      },
      "s3KeyNameCustomerOutputConfig": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 800
      },
      "MatchingRules": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MatchingRule"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "MatchingRule": {
        "type": "object",
        "required": [
          "Rule"
        ],
        "properties": {
          "Rule": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchingRuleAttributeList"
              },
              {
                "description": "A single rule level of the <code>MatchRules</code>. Configures how the rule-based matching process should match profiles."
              }
            ]
          }
        },
        "description": "<p>Specifies how does the rule-based matching process should match profiles. You can choose from the following attributes to build the matching Rule:</p> <ul> <li> <p>AccountNumber</p> </li> <li> <p>Address.Address</p> </li> <li> <p>Address.City</p> </li> <li> <p>Address.Country</p> </li> <li> <p>Address.County</p> </li> <li> <p>Address.PostalCode</p> </li> <li> <p>Address.State</p> </li> <li> <p>Address.Province</p> </li> <li> <p>BirthDate</p> </li> <li> <p>BusinessName</p> </li> <li> <p>EmailAddress</p> </li> <li> <p>FirstName</p> </li> <li> <p>Gender</p> </li> <li> <p>LastName</p> </li> <li> <p>MiddleName</p> </li> <li> <p>PhoneNumber</p> </li> <li> <p>Any customized profile attributes that start with the <code>Attributes</code> </p> </li> </ul>"
      },
      "MatchingRuleAttributeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string1To255"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "MaxAllowedRuleLevelForMerging": {
        "type": "integer",
        "minimum": 1,
        "maximum": 15
      },
      "MaxAllowedRuleLevelForMatching": {
        "type": "integer",
        "minimum": 1,
        "maximum": 15
      },
      "AttributeTypesSelector": {
        "type": "object",
        "required": [
          "AttributeMatchingModel"
        ],
        "properties": {
          "AttributeMatchingModel": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeMatchingModel"
              },
              {
                "description": "Configures the <code>AttributeMatchingModel</code>, you can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code>."
              }
            ]
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/$defs/AddressList"
              },
              {
                "description": "<p>The <code>Address</code> type. You can choose from <code>Address</code>, <code>BusinessAddress</code>, <code>MaillingAddress</code>, and <code>ShippingAddress</code>.</p> <p>You only can use the Address type in the <code>MatchingRule</code>. For example, if you want to match profile based on <code>BusinessAddress.City</code> or <code>MaillingAddress.City</code>, you need to choose the <code>BusinessAddress</code> and the <code>MaillingAddress</code> to represent the Address type and specify the <code>Address.City</code> on the matching rule.</p>"
              }
            ]
          },
          "PhoneNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/PhoneNumberList"
              },
              {
                "description": "<p>The <code>PhoneNumber</code> type. You can choose from <code>PhoneNumber</code>, <code>HomePhoneNumber</code>, and <code>MobilePhoneNumber</code>.</p> <p>You only can use the <code>PhoneNumber</code> type in the <code>MatchingRule</code>. For example, if you want to match a profile based on <code>Phone</code> or <code>HomePhone</code>, you need to choose the <code>Phone</code> and the <code>HomePhone</code> to represent the <code>PhoneNumber</code> type and only specify the <code>PhoneNumber</code> on the matching rule.</p>"
              }
            ]
          },
          "EmailAddress": {
            "allOf": [
              {
                "$ref": "#/$defs/EmailList"
              },
              {
                "description": "<p>The <code>Email</code> type. You can choose from <code>EmailAddress</code>, <code>BusinessEmailAddress</code> and <code>PersonalEmailAddress</code>.</p> <p>You only can use the <code>EmailAddress</code> type in the <code>MatchingRule</code>. For example, if you want to match profile based on <code>PersonalEmailAddress</code> or <code>BusinessEmailAddress</code>, you need to choose the <code>PersonalEmailAddress</code> and the <code>BusinessEmailAddress</code> to represent the <code>EmailAddress</code> type and only specify the <code>EmailAddress</code> on the matching rule.</p>"
              }
            ]
          }
        },
        "description": "<p>Configuration information about the <code>AttributeTypesSelector </code>where the rule-based identity resolution uses to match profiles. You can choose how profiles are compared across attribute types and which attribute to use for matching from each type. There are three attribute types you can configure:</p> <ul> <li> <p>Email type</p> <ul> <li> <p>You can choose from <code>Email</code>, <code>BusinessEmail</code>, and <code>PersonalEmail</code> </p> </li> </ul> </li> <li> <p>Phone number type</p> <ul> <li> <p>You can choose from <code>Phone</code>, <code>HomePhone</code>, and <code>MobilePhone</code> </p> </li> </ul> </li> <li> <p>Address type</p> <ul> <li> <p>You can choose from <code>Address</code>, <code>BusinessAddress</code>, <code>MaillingAddress</code>, and <code>ShippingAddress</code> </p> </li> </ul> </li> </ul> <p>You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>AttributeMatchingModel</code>. When choosing <code>MANY_TO_MANY</code>, the system can match attribute across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the Email type. When choosing <code>ONE_TO_ONE</code> the system can only match if the sub-types are exact matches. For example, only when the value of the <code>Email</code> field of Profile A and the value of the <code>Email</code> field of Profile B matches, the two profiles are matched on the Email type.</p>"
      },
      "AttributeMatchingModel": {
        "type": "string",
        "enum": [
          "ONE_TO_ONE",
          "MANY_TO_MANY"
        ]
      },
      "AddressList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string1To255"
        },
        "minItems": 1,
        "maxItems": 4
      },
      "PhoneNumberList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string1To255"
        },
        "minItems": 1,
        "maxItems": 4
      },
      "EmailList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/string1To255"
        },
        "minItems": 1,
        "maxItems": 3
      },
      "TagValue": {
        "type": "string",
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://profile.us-east-1.amazonaws.com/domains/{DomainName}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**DomainName**",
            "**DefaultExpirationDays**",
            "**DefaultEncryptionKey**",
            "**DeadLetterQueueUrl**",
            "**Matching**",
            "**RuleBasedMatching**",
            "**CreatedAt**",
            "**LastUpdatedAt**",
            "**Tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
