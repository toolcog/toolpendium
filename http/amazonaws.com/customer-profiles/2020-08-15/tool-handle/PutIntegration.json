{
  "name": "PutIntegration",
  "description": "<p>Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.</p> <p>An integration can belong to only one domain.</p> <p>To add or remove tags on an existing Integration, see <a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html\"> TagResource </a>/<a href=\"https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html\"> UntagResource</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "DomainName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]+$",
        "minLength": 1,
        "maxLength": 64,
        "description": "The unique name of the domain."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "Uri": {
            "description": "The URI of the S3 bucket or any other type of data source.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "ObjectTypeName": {
            "description": "The name of the profile object type.",
            "type": "string",
            "pattern": "^[a-zA-Z_][a-zA-Z_0-9-]*$",
            "minLength": 1,
            "maxLength": 255
          },
          "Tags": {
            "description": "The tags used to organize, track, or control access for this resource.",
            "type": "object",
            "minProperties": 1,
            "maxProperties": 50,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          },
          "FlowDefinition": {
            "description": "The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.",
            "type": "object",
            "properties": {
              "Description": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FlowDescription"
                  },
                  {
                    "description": "A description of the flow you want to create."
                  }
                ]
              },
              "FlowName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FlowName"
                  },
                  {
                    "description": "The specified name of the flow. Use underscores (_) or hyphens (-) only. Spaces are not allowed."
                  }
                ]
              },
              "KmsArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/KmsArn"
                  },
                  {
                    "description": "The Amazon Resource Name of the AWS Key Management Service (KMS) key you provide for encryption."
                  }
                ]
              },
              "SourceFlowConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SourceFlowConfig"
                  },
                  {
                    "description": "The configuration that controls how Customer Profiles retrieves data from the source."
                  }
                ]
              },
              "Tasks": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Tasks"
                  },
                  {
                    "description": "A list of tasks that Customer Profiles performs while transferring the data in the flow run."
                  }
                ]
              },
              "TriggerConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TriggerConfig"
                  },
                  {
                    "description": "The trigger settings that determine how and when the flow runs."
                  }
                ]
              }
            }
          },
          "ObjectTypeNames": {
            "description": "A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/typeName"
            }
          }
        }
      }
    },
    "required": [
      "DomainName",
      "body"
    ],
    "$defs": {
      "TagValue": {
        "type": "string",
        "maxLength": 256
      },
      "FlowDescription": {
        "type": "string",
        "pattern": "[\\w!@#\\-.?,\\s]*",
        "maxLength": 2048
      },
      "FlowName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][\\w!@#.-]+",
        "maxLength": 256
      },
      "KmsArn": {
        "type": "string",
        "pattern": "arn:aws:kms:.*:[0-9]+:.*",
        "minLength": 20,
        "maxLength": 2048
      },
      "SourceFlowConfig": {
        "type": "object",
        "required": [
          "ConnectorType",
          "SourceConnectorProperties"
        ],
        "properties": {
          "ConnectorProfileName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectorProfileName"
              },
              {
                "description": "The name of the AppFlow connector profile. This name must be unique for each connector profile in the AWS account."
              }
            ]
          },
          "ConnectorType": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceConnectorType"
              },
              {
                "description": "The type of connector, such as Salesforce, Marketo, and so on."
              }
            ]
          },
          "IncrementalPullConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/IncrementalPullConfig"
              },
              {
                "description": "Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull."
              }
            ]
          },
          "SourceConnectorProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceConnectorProperties"
              },
              {
                "description": "Specifies the information that is required to query a particular source connector."
              }
            ]
          }
        },
        "description": "Contains information about the configuration of the source connector used in the flow."
      },
      "ConnectorProfileName": {
        "type": "string",
        "pattern": "[\\w/!@#+=.-]+",
        "maxLength": 256
      },
      "SourceConnectorType": {
        "type": "string",
        "enum": [
          "Salesforce",
          "Marketo",
          "Zendesk",
          "Servicenow",
          "S3"
        ]
      },
      "IncrementalPullConfig": {
        "type": "object",
        "properties": {
          "DatetimeTypeFieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatetimeTypeFieldName"
              },
              {
                "description": "A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source."
              }
            ]
          }
        },
        "description": "Specifies the configuration used when importing incremental records from the source."
      },
      "DatetimeTypeFieldName": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "SourceConnectorProperties": {
        "type": "object",
        "properties": {
          "Marketo": {
            "allOf": [
              {
                "$ref": "#/$defs/MarketoSourceProperties"
              },
              {
                "description": "The properties that are applied when Marketo is being used as a source."
              }
            ]
          },
          "S3": {
            "allOf": [
              {
                "$ref": "#/$defs/S3SourceProperties"
              },
              {
                "description": "The properties that are applied when Amazon S3 is being used as the flow source."
              }
            ]
          },
          "Salesforce": {
            "allOf": [
              {
                "$ref": "#/$defs/SalesforceSourceProperties"
              },
              {
                "description": "The properties that are applied when Salesforce is being used as a source."
              }
            ]
          },
          "ServiceNow": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceNowSourceProperties"
              },
              {
                "description": "The properties that are applied when ServiceNow is being used as a source."
              }
            ]
          },
          "Zendesk": {
            "allOf": [
              {
                "$ref": "#/$defs/ZendeskSourceProperties"
              },
              {
                "description": "The properties that are applied when using Zendesk as a flow source."
              }
            ]
          }
        },
        "description": "Specifies the information that is required to query a particular Amazon AppFlow connector. Customer Profiles supports Salesforce, Zendesk, Marketo, ServiceNow and Amazon S3."
      },
      "MarketoSourceProperties": {
        "type": "object",
        "required": [
          "Object"
        ],
        "properties": {
          "Object": {
            "allOf": [
              {
                "$ref": "#/$defs/Object"
              },
              {
                "description": "The object specified in the Marketo flow source."
              }
            ]
          }
        },
        "description": "The properties that are applied when Marketo is being used as a source."
      },
      "Object": {
        "type": "string",
        "pattern": "\\S+",
        "maxLength": 512
      },
      "S3SourceProperties": {
        "type": "object",
        "required": [
          "BucketName"
        ],
        "properties": {
          "BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/BucketName"
              },
              {
                "description": "The Amazon S3 bucket name where the source files are stored."
              }
            ]
          },
          "BucketPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/BucketPrefix"
              },
              {
                "description": "The object key for the Amazon S3 bucket in which the source files are stored."
              }
            ]
          }
        },
        "description": "The properties that are applied when Amazon S3 is being used as the flow source."
      },
      "BucketName": {
        "type": "string",
        "pattern": "\\S+",
        "minLength": 3,
        "maxLength": 63
      },
      "BucketPrefix": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 512
      },
      "SalesforceSourceProperties": {
        "type": "object",
        "required": [
          "Object"
        ],
        "properties": {
          "Object": {
            "allOf": [
              {
                "$ref": "#/$defs/Object"
              },
              {
                "description": "The object specified in the Salesforce flow source."
              }
            ]
          },
          "EnableDynamicFieldUpdate": {
            "allOf": [
              {
                "$ref": "#/$defs/boolean"
              },
              {
                "description": "The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow."
              }
            ]
          },
          "IncludeDeletedRecords": {
            "allOf": [
              {
                "$ref": "#/$defs/boolean"
              },
              {
                "description": "Indicates whether Amazon AppFlow includes deleted files in the flow run."
              }
            ]
          }
        },
        "description": "The properties that are applied when Salesforce is being used as a source."
      },
      "boolean": {
        "type": "boolean"
      },
      "ServiceNowSourceProperties": {
        "type": "object",
        "required": [
          "Object"
        ],
        "properties": {
          "Object": {
            "allOf": [
              {
                "$ref": "#/$defs/Object"
              },
              {
                "description": "The object specified in the ServiceNow flow source."
              }
            ]
          }
        },
        "description": "The properties that are applied when ServiceNow is being used as a source."
      },
      "ZendeskSourceProperties": {
        "type": "object",
        "required": [
          "Object"
        ],
        "properties": {
          "Object": {
            "allOf": [
              {
                "$ref": "#/$defs/Object"
              },
              {
                "description": "The object specified in the Zendesk flow source."
              }
            ]
          }
        },
        "description": "The properties that are applied when using Zendesk as a flow source."
      },
      "Tasks": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Task"
        }
      },
      "Task": {
        "type": "object",
        "required": [
          "SourceFields",
          "TaskType"
        ],
        "properties": {
          "ConnectorOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectorOperator"
              },
              {
                "description": "The operation to be performed on the provided source fields."
              }
            ]
          },
          "DestinationField": {
            "allOf": [
              {
                "$ref": "#/$defs/DestinationField"
              },
              {
                "description": "A field in a destination connector, or a field value against which Amazon AppFlow validates a source field."
              }
            ]
          },
          "SourceFields": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceFields"
              },
              {
                "description": "The source fields to which a particular task is applied."
              }
            ]
          },
          "TaskProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskPropertiesMap"
              },
              {
                "description": "A map used to store task-related information. The service looks for particular information based on the TaskType."
              }
            ]
          },
          "TaskType": {
            "allOf": [
              {
                "$ref": "#/$defs/TaskType"
              },
              {
                "description": "Specifies the particular task implementation that Amazon AppFlow performs."
              }
            ]
          }
        },
        "description": "A class for modeling different type of tasks. Task implementation varies based on the TaskType."
      },
      "ConnectorOperator": {
        "type": "object",
        "properties": {
          "Marketo": {
            "allOf": [
              {
                "$ref": "#/$defs/MarketoConnectorOperator"
              },
              {
                "description": "The operation to be performed on the provided Marketo source fields."
              }
            ]
          },
          "S3": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ConnectorOperator"
              },
              {
                "description": "The operation to be performed on the provided Amazon S3 source fields."
              }
            ]
          },
          "Salesforce": {
            "allOf": [
              {
                "$ref": "#/$defs/SalesforceConnectorOperator"
              },
              {
                "description": "The operation to be performed on the provided Salesforce source fields."
              }
            ]
          },
          "ServiceNow": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceNowConnectorOperator"
              },
              {
                "description": "The operation to be performed on the provided ServiceNow source fields."
              }
            ]
          },
          "Zendesk": {
            "allOf": [
              {
                "$ref": "#/$defs/ZendeskConnectorOperator"
              },
              {
                "description": "The operation to be performed on the provided Zendesk source fields."
              }
            ]
          }
        },
        "description": "The operation to be performed on the provided source fields."
      },
      "MarketoConnectorOperator": {
        "type": "string",
        "enum": [
          "PROJECTION",
          "LESS_THAN",
          "GREATER_THAN",
          "BETWEEN",
          "ADDITION",
          "MULTIPLICATION",
          "DIVISION",
          "SUBTRACTION",
          "MASK_ALL",
          "MASK_FIRST_N",
          "MASK_LAST_N",
          "VALIDATE_NON_NULL",
          "VALIDATE_NON_ZERO",
          "VALIDATE_NON_NEGATIVE",
          "VALIDATE_NUMERIC",
          "NO_OP"
        ]
      },
      "S3ConnectorOperator": {
        "type": "string",
        "enum": [
          "PROJECTION",
          "LESS_THAN",
          "GREATER_THAN",
          "BETWEEN",
          "LESS_THAN_OR_EQUAL_TO",
          "GREATER_THAN_OR_EQUAL_TO",
          "EQUAL_TO",
          "NOT_EQUAL_TO",
          "ADDITION",
          "MULTIPLICATION",
          "DIVISION",
          "SUBTRACTION",
          "MASK_ALL",
          "MASK_FIRST_N",
          "MASK_LAST_N",
          "VALIDATE_NON_NULL",
          "VALIDATE_NON_ZERO",
          "VALIDATE_NON_NEGATIVE",
          "VALIDATE_NUMERIC",
          "NO_OP"
        ]
      },
      "SalesforceConnectorOperator": {
        "type": "string",
        "enum": [
          "PROJECTION",
          "LESS_THAN",
          "CONTAINS",
          "GREATER_THAN",
          "BETWEEN",
          "LESS_THAN_OR_EQUAL_TO",
          "GREATER_THAN_OR_EQUAL_TO",
          "EQUAL_TO",
          "NOT_EQUAL_TO",
          "ADDITION",
          "MULTIPLICATION",
          "DIVISION",
          "SUBTRACTION",
          "MASK_ALL",
          "MASK_FIRST_N",
          "MASK_LAST_N",
          "VALIDATE_NON_NULL",
          "VALIDATE_NON_ZERO",
          "VALIDATE_NON_NEGATIVE",
          "VALIDATE_NUMERIC",
          "NO_OP"
        ]
      },
      "ServiceNowConnectorOperator": {
        "type": "string",
        "enum": [
          "PROJECTION",
          "CONTAINS",
          "LESS_THAN",
          "GREATER_THAN",
          "BETWEEN",
          "LESS_THAN_OR_EQUAL_TO",
          "GREATER_THAN_OR_EQUAL_TO",
          "EQUAL_TO",
          "NOT_EQUAL_TO",
          "ADDITION",
          "MULTIPLICATION",
          "DIVISION",
          "SUBTRACTION",
          "MASK_ALL",
          "MASK_FIRST_N",
          "MASK_LAST_N",
          "VALIDATE_NON_NULL",
          "VALIDATE_NON_ZERO",
          "VALIDATE_NON_NEGATIVE",
          "VALIDATE_NUMERIC",
          "NO_OP"
        ]
      },
      "ZendeskConnectorOperator": {
        "type": "string",
        "enum": [
          "PROJECTION",
          "GREATER_THAN",
          "ADDITION",
          "MULTIPLICATION",
          "DIVISION",
          "SUBTRACTION",
          "MASK_ALL",
          "MASK_FIRST_N",
          "MASK_LAST_N",
          "VALIDATE_NON_NULL",
          "VALIDATE_NON_ZERO",
          "VALIDATE_NON_NEGATIVE",
          "VALIDATE_NUMERIC",
          "NO_OP"
        ]
      },
      "DestinationField": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "SourceFields": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/stringTo2048"
        }
      },
      "stringTo2048": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 2048
      },
      "TaskPropertiesMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Property"
        }
      },
      "Property": {
        "type": "string",
        "pattern": ".+",
        "maxLength": 2048
      },
      "TaskType": {
        "type": "string",
        "enum": [
          "Arithmetic",
          "Filter",
          "Map",
          "Mask",
          "Merge",
          "Truncate",
          "Validate"
        ]
      },
      "TriggerConfig": {
        "type": "object",
        "required": [
          "TriggerType"
        ],
        "properties": {
          "TriggerType": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerType"
              },
              {
                "description": "Specifies the type of flow trigger. It can be OnDemand, Scheduled, or Event."
              }
            ]
          },
          "TriggerProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerProperties"
              },
              {
                "description": "Specifies the configuration details of a schedule-triggered flow that you define. Currently, these settings only apply to the Scheduled trigger type."
              }
            ]
          }
        },
        "description": "The trigger settings that determine how and when Amazon AppFlow runs the specified flow."
      },
      "TriggerType": {
        "type": "string",
        "enum": [
          "Scheduled",
          "Event",
          "OnDemand"
        ]
      },
      "TriggerProperties": {
        "type": "object",
        "properties": {
          "Scheduled": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduledTriggerProperties"
              },
              {
                "description": "Specifies the configuration details of a schedule-triggered flow that you define."
              }
            ]
          }
        },
        "description": "Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the Scheduled trigger type."
      },
      "ScheduledTriggerProperties": {
        "type": "object",
        "required": [
          "ScheduleExpression"
        ],
        "properties": {
          "ScheduleExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleExpression"
              },
              {
                "description": "The scheduling expression that determines the rate at which the schedule will run, for example rate (5 minutes)."
              }
            ]
          },
          "DataPullMode": {
            "allOf": [
              {
                "$ref": "#/$defs/DataPullMode"
              },
              {
                "description": "Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run."
              }
            ]
          },
          "ScheduleStartTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Date"
              },
              {
                "description": "Specifies the scheduled start time for a scheduled-trigger flow."
              }
            ]
          },
          "ScheduleEndTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Date"
              },
              {
                "description": "Specifies the scheduled end time for a scheduled-trigger flow."
              }
            ]
          },
          "Timezone": {
            "allOf": [
              {
                "$ref": "#/$defs/Timezone"
              },
              {
                "description": "Specifies the time zone used when referring to the date and time of a scheduled-triggered flow, such as America/New_York."
              }
            ]
          },
          "ScheduleOffset": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleOffset"
              },
              {
                "description": "Specifies the optional offset that is added to the time interval for a schedule-triggered flow."
              }
            ]
          },
          "FirstExecutionFrom": {
            "allOf": [
              {
                "$ref": "#/$defs/Date"
              },
              {
                "description": "Specifies the date range for the records to import from the connector in the first flow run."
              }
            ]
          }
        },
        "description": "Specifies the configuration details of a scheduled-trigger flow that you define. Currently, these settings only apply to the scheduled-trigger type."
      },
      "ScheduleExpression": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "DataPullMode": {
        "type": "string",
        "enum": [
          "Incremental",
          "Complete"
        ]
      },
      "Date": {
        "type": "string",
        "format": "date-time"
      },
      "Timezone": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "ScheduleOffset": {
        "type": "integer",
        "minimum": 0,
        "maximum": 36000
      },
      "typeName": {
        "type": "string",
        "pattern": "^[a-zA-Z_][a-zA-Z_0-9-]*$",
        "minLength": 1,
        "maxLength": 255
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://profile.us-east-1.amazonaws.com/domains/{DomainName}/integrations"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**DomainName**",
            "**Uri**",
            "**ObjectTypeName**",
            "**CreatedAt**",
            "**LastUpdatedAt**",
            "**Tags**",
            "**ObjectTypeNames**",
            "**WorkflowId**",
            "**IsUnstructured**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
