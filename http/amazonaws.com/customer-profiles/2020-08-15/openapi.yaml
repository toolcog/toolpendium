openapi: 3.0.0
info:
  version: '2020-08-15'
  x-release: v4
  title: Amazon Connect Customer Profiles
  description: '<fullname>Amazon Connect Customer Profiles</fullname> <p>Amazon Connect Customer Profiles is a unified customer profile for your contact center that has pre-built connectors powered by AppFlow that make it easy to combine customer information from third party applications, such as Salesforce (CRM), ServiceNow (ITSM), and your enterprise resource planning (ERP), with contact history from your Amazon Connect contact center. If you''re new to Amazon Connect, you might find it helpful to review the <a href="https://docs.aws.amazon.com/connect/latest/adminguide/">Amazon Connect Administrator Guide</a>.</p>'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: customer-profiles
  x-aws-signingName: profile
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/customer-profiles-2020-08-15.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/profile/'
servers:
  - url: 'http://profile.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Customer Profiles multi-region endpoint
  - url: 'https://profile.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The Customer Profiles multi-region endpoint
  - url: 'http://profile.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Customer Profiles endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://profile.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The Customer Profiles endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/domains/{DomainName}/profiles/keys':
    post:
      operationId: AddProfileKey
      description: '<p>Associates a new key value with a specific profile, such as a Contact Record ContactId.</p> <p>A profile object can have a single unique key and any number of additional keys that can be used to identify the profile that it belongs to.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddProfileKeyResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
                - KeyName
                - Values
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                KeyName:
                  description: 'A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.'
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                Values:
                  description: A list of key values.
                  type: array
                  items:
                    $ref: '#/components/schemas/string1To255'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/calculated-attributes/{CalculatedAttributeName}':
    post:
      operationId: CreateCalculatedAttributeDefinition
      description: 'Creates a new calculated attribute definition. After creation, new object data ingested into Customer Profiles will be included in the calculated attribute, which can be retrieved for a profile using the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetCalculatedAttributeForProfile.html">GetCalculatedAttributeForProfile</a> API. Defining a calculated attribute makes it available for all profiles within a domain. Each calculated attribute can only reference one <code>ObjectType</code> and at most, two fields from that <code>ObjectType</code>.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCalculatedAttributeDefinitionResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: CalculatedAttributeName
          in: path
          required: true
          description: The unique name of the calculated attribute.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - AttributeDetails
                - Statistic
              properties:
                DisplayName:
                  description: The display name of the calculated attribute.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-\s]*$'
                  minLength: 1
                  maxLength: 255
                Description:
                  description: The description of the calculated attribute.
                  type: string
                  minLength: 1
                  maxLength: 1000
                AttributeDetails:
                  description: Mathematical expression and a list of attribute items specified in that expression.
                  type: object
                  properties:
                    Attributes:
                      allOf:
                        - $ref: '#/components/schemas/AttributeList'
                        - description: A list of attribute items specified in the mathematical expression.
                    Expression:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: 'Mathematical expression that is performed on attribute items provided in the attribute list. Each element in the expression should follow the structure of \"{ObjectTypeName.AttributeName}\".'
                Conditions:
                  description: 'The conditions including range, object count, and threshold for the calculated attribute.'
                  type: object
                  properties:
                    Range:
                      allOf:
                        - $ref: '#/components/schemas/Range'
                        - description: The relative time period over which data is included in the aggregation.
                    ObjectCount:
                      allOf:
                        - $ref: '#/components/schemas/ObjectCount'
                        - description: The number of profile objects used for the calculated attribute.
                    Threshold:
                      allOf:
                        - $ref: '#/components/schemas/Threshold'
                        - description: The threshold for the calculated attribute.
                Statistic:
                  description: The aggregation operation to perform for the calculated attribute.
                  type: string
                  enum:
                    - FIRST_OCCURRENCE
                    - LAST_OCCURRENCE
                    - COUNT
                    - SUM
                    - MINIMUM
                    - MAXIMUM
                    - AVERAGE
                    - MAX_OCCURRENCE
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteCalculatedAttributeDefinition
      description: 'Deletes an existing calculated attribute definition. Note that deleting a default calculated attribute is possible, however once deleted, you will be unable to undo that action and will need to recreate it on your own using the CreateCalculatedAttributeDefinition API if you want it back.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCalculatedAttributeDefinitionResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: CalculatedAttributeName
          in: path
          required: true
          description: The unique name of the calculated attribute.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    get:
      operationId: GetCalculatedAttributeDefinition
      description: Provides more information on a calculated attribute definition for Customer Profiles.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCalculatedAttributeDefinitionResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: CalculatedAttributeName
          in: path
          required: true
          description: The unique name of the calculated attribute.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    put:
      operationId: UpdateCalculatedAttributeDefinition
      description: 'Updates an existing calculated attribute definition. When updating the Conditions, note that increasing the date range of a calculated attribute will not trigger inclusion of historical data greater than the current date range.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCalculatedAttributeDefinitionResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: CalculatedAttributeName
          in: path
          required: true
          description: The unique name of the calculated attribute.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DisplayName:
                  description: The display name of the calculated attribute.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-\s]*$'
                  minLength: 1
                  maxLength: 255
                Description:
                  description: The description of the calculated attribute.
                  type: string
                  minLength: 1
                  maxLength: 1000
                Conditions:
                  description: 'The conditions including range, object count, and threshold for the calculated attribute.'
                  type: object
                  properties:
                    Range:
                      allOf:
                        - $ref: '#/components/schemas/Range'
                        - description: The relative time period over which data is included in the aggregation.
                    ObjectCount:
                      allOf:
                        - $ref: '#/components/schemas/ObjectCount'
                        - description: The number of profile objects used for the calculated attribute.
                    Threshold:
                      allOf:
                        - $ref: '#/components/schemas/Threshold'
                        - description: The threshold for the calculated attribute.
  '/domains/{DomainName}':
    post:
      operationId: CreateDomain
      description: '<p>Creates a domain, which is a container for all customer data, such as customer profile attributes, object types, profile keys, and encryption keys. You can create multiple domains, and each domain can have multiple third-party integrations.</p> <p>Each Amazon Connect instance can be associated with only one domain. Multiple Amazon Connect instances can be associated with one domain.</p> <p>Use this API or <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html">UpdateDomain</a> to enable <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - DefaultExpirationDays
              properties:
                DefaultExpirationDays:
                  description: The default number of days until the data within the domain expires.
                  type: integer
                  minimum: 1
                  maximum: 1098
                DefaultEncryptionKey:
                  description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
                  type: string
                  minLength: 0
                  maxLength: 255
                DeadLetterQueueUrl:
                  description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
                  type: string
                  minLength: 0
                  maxLength: 255
                Matching:
                  description: The flag that enables the matching process of duplicate profiles.
                  type: object
                  properties:
                    Enabled:
                      allOf:
                        - $ref: '#/components/schemas/optionalBoolean'
                        - description: The flag that enables the matching process of duplicate profiles.
                    JobSchedule:
                      allOf:
                        - $ref: '#/components/schemas/JobSchedule'
                        - description: The day and time when do you want to start the Identity Resolution Job every week.
                    AutoMerging:
                      allOf:
                        - $ref: '#/components/schemas/AutoMerging'
                        - description: Configuration information about the auto-merging process.
                    ExportingConfig:
                      allOf:
                        - $ref: '#/components/schemas/ExportingConfig'
                        - description: 'Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.'
                RuleBasedMatching:
                  description: The request to enable the rule-based matching.
                  type: object
                  properties:
                    Enabled:
                      allOf:
                        - $ref: '#/components/schemas/optionalBoolean'
                        - description: The flag that enables the rule-based matching process of duplicate profiles.
                    MatchingRules:
                      allOf:
                        - $ref: '#/components/schemas/MatchingRules'
                        - description: Configures how the rule-based matching process should match profiles. You can have up to 15 <code>MatchingRule</code> in the <code>MatchingRules</code>.
                    MaxAllowedRuleLevelForMerging:
                      allOf:
                        - $ref: '#/components/schemas/MaxAllowedRuleLevelForMerging'
                        - description: ' <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html">MatchingRule</a> '
                    MaxAllowedRuleLevelForMatching:
                      allOf:
                        - $ref: '#/components/schemas/MaxAllowedRuleLevelForMatching'
                        - description: Indicates the maximum allowed rule level.
                    AttributeTypesSelector:
                      allOf:
                        - $ref: '#/components/schemas/AttributeTypesSelector'
                        - description: Configures information about the <code>AttributeTypesSelector</code> where the rule-based identity resolution uses to match profiles.
                    ConflictResolution:
                      $ref: '#/components/schemas/ConflictResolution'
                    ExportingConfig:
                      $ref: '#/components/schemas/ExportingConfig'
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteDomain
      description: 'Deletes a specific domain and all of its customer data, such as customer profile attributes and their related objects.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    get:
      operationId: GetDomain
      description: Returns information about a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    put:
      operationId: UpdateDomain
      description: '<p>Updates the properties of a domain, including creating or selecting a dead letter queue or an encryption key.</p> <p>After a domain is created, the name can’t be changed.</p> <p>Use this API or <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html">CreateDomain</a> to enable <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">identity resolution</a>: set <code>Matching</code> to true.</p> <p>To prevent cross-service impersonation when you call this API, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html">Cross-service confused deputy prevention</a> for sample policies that you should apply. </p> <p>To add or remove tags on an existing Domain, see <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html">TagResource</a>/<a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDomainResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                DefaultExpirationDays:
                  description: The default number of days until the data within the domain expires.
                  type: integer
                  minimum: 1
                  maximum: 1098
                DefaultEncryptionKey:
                  description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.'
                  type: string
                  minLength: 0
                  maxLength: 255
                DeadLetterQueueUrl:
                  description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
                  type: string
                  minLength: 0
                  maxLength: 255
                Matching:
                  description: The flag that enables the matching process of duplicate profiles.
                  type: object
                  properties:
                    Enabled:
                      allOf:
                        - $ref: '#/components/schemas/optionalBoolean'
                        - description: The flag that enables the matching process of duplicate profiles.
                    JobSchedule:
                      allOf:
                        - $ref: '#/components/schemas/JobSchedule'
                        - description: The day and time when do you want to start the Identity Resolution Job every week.
                    AutoMerging:
                      allOf:
                        - $ref: '#/components/schemas/AutoMerging'
                        - description: Configuration information about the auto-merging process.
                    ExportingConfig:
                      allOf:
                        - $ref: '#/components/schemas/ExportingConfig'
                        - description: 'Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.'
                RuleBasedMatching:
                  description: The request to enable the rule-based matching.
                  type: object
                  properties:
                    Enabled:
                      allOf:
                        - $ref: '#/components/schemas/optionalBoolean'
                        - description: The flag that enables the rule-based matching process of duplicate profiles.
                    MatchingRules:
                      allOf:
                        - $ref: '#/components/schemas/MatchingRules'
                        - description: Configures how the rule-based matching process should match profiles. You can have up to 15 <code>MatchingRule</code> in the <code>MatchingRules</code>.
                    MaxAllowedRuleLevelForMerging:
                      allOf:
                        - $ref: '#/components/schemas/MaxAllowedRuleLevelForMerging'
                        - description: ' <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html">MatchingRule</a> '
                    MaxAllowedRuleLevelForMatching:
                      allOf:
                        - $ref: '#/components/schemas/MaxAllowedRuleLevelForMatching'
                        - description: Indicates the maximum allowed rule level.
                    AttributeTypesSelector:
                      allOf:
                        - $ref: '#/components/schemas/AttributeTypesSelector'
                        - description: Configures information about the <code>AttributeTypesSelector</code> where the rule-based identity resolution uses to match profiles.
                    ConflictResolution:
                      $ref: '#/components/schemas/ConflictResolution'
                    ExportingConfig:
                      $ref: '#/components/schemas/ExportingConfig'
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/domains/{DomainName}/event-streams/{EventStreamName}':
    post:
      operationId: CreateEventStream
      description: '<p>Creates an event stream, which is a subscription to real-time events, such as when profiles are created and updated through Amazon Connect Customer Profiles.</p> <p>Each event stream can be associated with only one Kinesis Data Stream destination in the same region and Amazon Web Services account as the customer profiles domain</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventStreamResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: EventStreamName
          in: path
          required: true
          description: The name of the event stream.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Uri
              properties:
                Uri:
                  description: 'The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name'
                  type: string
                  minLength: 1
                  maxLength: 255
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteEventStream
      description: Disables and deletes the specified event stream.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEventStreamResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: EventStreamName
          in: path
          required: true
          description: The name of the event stream
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    get:
      operationId: GetEventStream
      description: Returns information about the specified event stream in a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventStreamResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: EventStreamName
          in: path
          required: true
          description: The name of the event stream provided during create operations.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
  '/domains/{DomainName}/workflows/integrations':
    post:
      operationId: CreateIntegrationWorkflow
      description: ' Creates an integration workflow. An integration workflow is an async process which ingests historic data and sets up an integration for ongoing updates. The supported Amazon AppFlow sources are Salesforce, ServiceNow, and Marketo. '
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationWorkflowResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - WorkflowType
                - IntegrationConfig
                - ObjectTypeName
                - RoleArn
              properties:
                WorkflowType:
                  description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
                  type: string
                  enum:
                    - APPFLOW_INTEGRATION
                IntegrationConfig:
                  description: Configuration data for integration workflow.
                  type: object
                  properties:
                    AppflowIntegration:
                      allOf:
                        - $ref: '#/components/schemas/AppflowIntegration'
                        - description: Configuration data for <code>APPFLOW_INTEGRATION</code> workflow type.
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                RoleArn:
                  description: The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.
                  type: string
                  pattern: 'arn:aws:iam:.*:[0-9]+:.*'
                  maxLength: 512
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles':
    post:
      operationId: CreateProfile
      description: <p>Creates a standard profile.</p> <p>A standard profile represents the following attributes for a customer profile in a domain.</p>
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AccountNumber:
                  description: A unique account number that you have given to the customer.
                  type: string
                  minLength: 1
                  maxLength: 255
                AdditionalInformation:
                  description: Any additional information relevant to the customer’s profile.
                  type: string
                  minLength: 1
                  maxLength: 1000
                PartyType:
                  description: The type of profile used to describe the customer.
                  type: string
                  deprecated: true
                  enum:
                    - INDIVIDUAL
                    - BUSINESS
                    - OTHER
                BusinessName:
                  description: The name of the customer’s business.
                  type: string
                  minLength: 1
                  maxLength: 255
                FirstName:
                  description: The customer’s first name.
                  type: string
                  minLength: 1
                  maxLength: 255
                MiddleName:
                  description: The customer’s middle name.
                  type: string
                  minLength: 1
                  maxLength: 255
                LastName:
                  description: The customer’s last name.
                  type: string
                  minLength: 1
                  maxLength: 255
                BirthDate:
                  description: 'The customer’s birth date. '
                  type: string
                  minLength: 1
                  maxLength: 255
                Gender:
                  description: 'The gender with which the customer identifies. '
                  type: string
                  deprecated: true
                  enum:
                    - MALE
                    - FEMALE
                    - UNSPECIFIED
                PhoneNumber:
                  description: 'The customer’s phone number, which has not been specified as a mobile, home, or business number. '
                  type: string
                  minLength: 1
                  maxLength: 255
                MobilePhoneNumber:
                  description: The customer’s mobile phone number.
                  type: string
                  minLength: 1
                  maxLength: 255
                HomePhoneNumber:
                  description: The customer’s home phone number.
                  type: string
                  minLength: 1
                  maxLength: 255
                BusinessPhoneNumber:
                  description: The customer’s business phone number.
                  type: string
                  minLength: 1
                  maxLength: 255
                EmailAddress:
                  description: 'The customer’s email address, which has not been specified as a personal or business address. '
                  type: string
                  minLength: 1
                  maxLength: 255
                PersonalEmailAddress:
                  description: The customer’s personal email address.
                  type: string
                  minLength: 1
                  maxLength: 255
                BusinessEmailAddress:
                  description: The customer’s business email address.
                  type: string
                  minLength: 1
                  maxLength: 255
                Address:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                ShippingAddress:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                MailingAddress:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                BillingAddress:
                  description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The postal code of a customer address.
                Attributes:
                  description: A key value pair of attributes of a customer profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/string1To255'
                PartyTypeString:
                  description: An alternative to <code>PartyType</code> which accepts any string as input.
                  type: string
                  minLength: 1
                  maxLength: 255
                GenderString:
                  description: An alternative to <code>Gender</code> which accepts any string as input.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: UpdateProfile
      description: '<p>Updates the properties of a profile. The ProfileId is required for updating a customer profile.</p> <p>When calling the UpdateProfile API, specifying an empty string value means that any existing value will be removed. Not specifying a string value means that any value already there will be kept.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                AdditionalInformation:
                  description: Any additional information relevant to the customer’s profile.
                  type: string
                  minLength: 0
                  maxLength: 1000
                AccountNumber:
                  description: A unique account number that you have given to the customer.
                  type: string
                  minLength: 0
                  maxLength: 255
                PartyType:
                  description: The type of profile used to describe the customer.
                  type: string
                  deprecated: true
                  enum:
                    - INDIVIDUAL
                    - BUSINESS
                    - OTHER
                BusinessName:
                  description: The name of the customer’s business.
                  type: string
                  minLength: 0
                  maxLength: 255
                FirstName:
                  description: The customer’s first name.
                  type: string
                  minLength: 0
                  maxLength: 255
                MiddleName:
                  description: The customer’s middle name.
                  type: string
                  minLength: 0
                  maxLength: 255
                LastName:
                  description: The customer’s last name.
                  type: string
                  minLength: 0
                  maxLength: 255
                BirthDate:
                  description: 'The customer’s birth date. '
                  type: string
                  minLength: 0
                  maxLength: 255
                Gender:
                  description: 'The gender with which the customer identifies. '
                  type: string
                  deprecated: true
                  enum:
                    - MALE
                    - FEMALE
                    - UNSPECIFIED
                PhoneNumber:
                  description: 'The customer’s phone number, which has not been specified as a mobile, home, or business number. '
                  type: string
                  minLength: 0
                  maxLength: 255
                MobilePhoneNumber:
                  description: The customer’s mobile phone number.
                  type: string
                  minLength: 0
                  maxLength: 255
                HomePhoneNumber:
                  description: The customer’s home phone number.
                  type: string
                  minLength: 0
                  maxLength: 255
                BusinessPhoneNumber:
                  description: The customer’s business phone number.
                  type: string
                  minLength: 0
                  maxLength: 255
                EmailAddress:
                  description: 'The customer’s email address, which has not been specified as a personal or business address. '
                  type: string
                  minLength: 0
                  maxLength: 255
                PersonalEmailAddress:
                  description: The customer’s personal email address.
                  type: string
                  minLength: 0
                  maxLength: 255
                BusinessEmailAddress:
                  description: The customer’s business email address.
                  type: string
                  minLength: 0
                  maxLength: 255
                Address:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                ShippingAddress:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                MailingAddress:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                BillingAddress:
                  description: Updates associated with the address properties of a customer profile.
                  type: object
                  properties:
                    Address1:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The first line of a customer address.
                    Address2:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The second line of a customer address.
                    Address3:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The third line of a customer address.
                    Address4:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The fourth line of a customer address.
                    City:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The city in which a customer lives.
                    County:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The county in which a customer lives.
                    State:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The state in which a customer lives.
                    Province:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The province in which a customer lives.
                    Country:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The country in which a customer lives.
                    PostalCode:
                      allOf:
                        - $ref: '#/components/schemas/string0To255'
                        - description: The postal code of a customer address.
                Attributes:
                  description: A key value pair of attributes of a customer profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/string0To255'
                PartyTypeString:
                  description: An alternative to <code>PartyType</code> which accepts any string as input.
                  type: string
                  minLength: 0
                  maxLength: 255
                GenderString:
                  description: An alternative to <code>Gender</code> which accepts any string as input.
                  type: string
                  minLength: 0
                  maxLength: 255
  '/domains/{DomainName}/integrations/delete':
    post:
      operationId: DeleteIntegration
      description: Removes an integration from a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIntegrationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Uri
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/delete':
    post:
      operationId: DeleteProfile
      description: Deletes the standard customer profile and all data pertaining to the profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/keys/delete':
    post:
      operationId: DeleteProfileKey
      description: Removes a searchable key from a customer profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileKeyResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
                - KeyName
                - Values
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                KeyName:
                  description: A searchable identifier of a customer profile.
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                Values:
                  description: A list of key values.
                  type: array
                  items:
                    $ref: '#/components/schemas/string1To255'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/objects/delete':
    post:
      operationId: DeleteProfileObject
      description: Removes an object associated with a profile of a given ProfileObjectType.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileObjectResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ProfileId
                - ProfileObjectUniqueKey
                - ObjectTypeName
              properties:
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                ProfileObjectUniqueKey:
                  description: The unique identifier of the profile object generated by the service.
                  type: string
                  minLength: 1
                  maxLength: 255
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/object-types/{ObjectTypeName}':
    delete:
      operationId: DeleteProfileObjectType
      description: 'Removes a ProfileObjectType from a specific domain as well as removes all the ProfileObjects of that type. It also disables integrations from this specific ProfileObjectType. In addition, it scrubs all of the fields of the standard profile that were populated from this ProfileObjectType.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileObjectTypeResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ObjectTypeName
          in: path
          required: true
          description: The name of the profile object type.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetProfileObjectType
      description: Returns the object types for a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileObjectTypeResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ObjectTypeName
          in: path
          required: true
          description: The name of the profile object type.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    put:
      operationId: PutProfileObjectType
      description: '<p>Defines a ProfileObjectType.</p> <p>To add or remove tags on an existing ObjectType, see <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html"> TagResource</a>/<a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html">UntagResource</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutProfileObjectTypeResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ObjectTypeName
          in: path
          required: true
          description: The name of the profile object type.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Description
              properties:
                Description:
                  description: Description of the profile object type.
                  type: string
                  minLength: 1
                  maxLength: 1000
                TemplateId:
                  description: 'A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.'
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                ExpirationDays:
                  description: The number of days until the data in the object expires.
                  type: integer
                  minimum: 1
                  maximum: 1098
                EncryptionKey:
                  description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
                  type: string
                  minLength: 0
                  maxLength: 255
                AllowProfileCreation:
                  description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
                  type: boolean
                SourceLastUpdatedTimestampFormat:
                  description: 'The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. '
                  type: string
                  minLength: 1
                  maxLength: 255
                Fields:
                  description: A map of the name and ObjectType field.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ObjectTypeField'
                Keys:
                  description: A list of unique keys that can be used to map data to the profile.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ObjectTypeKeyList'
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/domains/{DomainName}/workflows/{WorkflowId}':
    delete:
      operationId: DeleteWorkflow
      description: Deletes the specified workflow and all its corresponding resources. This is an async process.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkflowResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: WorkflowId
          in: path
          required: true
          description: Unique identifier for the workflow.
          schema:
            type: string
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetWorkflow
      description: Get details of specified workflow.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: WorkflowId
          in: path
          required: true
          description: Unique identifier for the workflow.
          schema:
            type: string
            pattern: '[a-f0-9]{32}'
  '/domains/{DomainName}/identity-resolution-jobs/auto-merging-preview':
    post:
      operationId: GetAutoMergingPreview
      description: '<p>Tests the auto-merging settings of your Identity Resolution Job without merging your data. It randomly selects a sample of matching groups from the existing matching results, and applies the automerging settings that you provided. You can then view the number of profiles in the sample, the number of matches, and the number of profiles identified to be merged. This enables you to evaluate the accuracy of the attributes in your matching list. </p> <p>You can''t view which profiles are matched and would be merged.</p> <important> <p>We strongly recommend you use this API to do a dry run of the automerging process before running the Identity Resolution Job. Include <b>at least</b> two matching attributes. If your matching list includes too few attributes (such as only <code>FirstName</code> or only <code>LastName</code>), there may be a large number of matches. This increases the chances of erroneous merges.</p> </important>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAutoMergingPreviewResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Consolidation
                - ConflictResolution
              properties:
                Consolidation:
                  description: 'The matching criteria to be used during the auto-merging process. '
                  type: object
                  properties:
                    MatchingAttributesList:
                      allOf:
                        - $ref: '#/components/schemas/MatchingAttributesList'
                        - description: A list of matching criteria.
                ConflictResolution:
                  description: How the auto-merging process should resolve conflicts between different profiles.
                  type: object
                  properties:
                    ConflictResolvingModel:
                      allOf:
                        - $ref: '#/components/schemas/ConflictResolvingModel'
                        - description: '<p>How the auto-merging process should resolve conflicts between different profiles.</p> <ul> <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li> <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li> </ul>'
                    SourceName:
                      allOf:
                        - $ref: '#/components/schemas/string1To255'
                        - description: The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.
                MinAllowedConfidenceScoreForMerging:
                  description: Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.
                  type: number
                  format: double
                  minimum: 0
                  maximum: 1
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profile/{ProfileId}/calculated-attributes/{CalculatedAttributeName}':
    get:
      operationId: GetCalculatedAttributeForProfile
      description: Retrieve a calculated attribute for a customer profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCalculatedAttributeForProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ProfileId
          in: path
          required: true
          description: The unique identifier of a customer profile.
          schema:
            type: string
            pattern: '[a-f0-9]{32}'
        - name: CalculatedAttributeName
          in: path
          required: true
          description: The unique name of the calculated attribute.
          schema:
            type: string
            pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
            minLength: 1
            maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/identity-resolution-jobs/{JobId}':
    get:
      operationId: GetIdentityResolutionJob
      description: '<p>Returns information about an Identity Resolution Job in a specific domain. </p> <p>Identity Resolution Jobs are set up using the Amazon Connect admin console. For more information, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/use-identity-resolution.html">Use Identity Resolution to consolidate similar profiles</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIdentityResolutionJobResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: JobId
          in: path
          required: true
          description: The unique identifier of the Identity Resolution Job.
          schema:
            type: string
            pattern: '[a-f0-9]{32}'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/integrations':
    post:
      operationId: GetIntegration
      description: Returns an integration for a domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Uri
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: ListIntegrations
      description: Lists all of the integrations in your domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIntegrationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListIntegrations API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: include-hidden
          in: query
          required: false
          description: Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.
          schema:
            type: boolean
    put:
      operationId: PutIntegration
      description: '<p>Adds an integration between the service and a third-party service, which includes Amazon AppFlow and Amazon Connect.</p> <p>An integration can belong to only one domain.</p> <p>To add or remove tags on an existing Integration, see <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_TagResource.html"> TagResource </a>/<a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UntagResource.html"> UntagResource</a>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutIntegrationResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                Tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                FlowDefinition:
                  description: 'The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.'
                  type: object
                  properties:
                    Description:
                      allOf:
                        - $ref: '#/components/schemas/FlowDescription'
                        - description: A description of the flow you want to create.
                    FlowName:
                      allOf:
                        - $ref: '#/components/schemas/FlowName'
                        - description: The specified name of the flow. Use underscores (_) or hyphens (-) only. Spaces are not allowed.
                    KmsArn:
                      allOf:
                        - $ref: '#/components/schemas/KmsArn'
                        - description: The Amazon Resource Name of the AWS Key Management Service (KMS) key you provide for encryption.
                    SourceFlowConfig:
                      allOf:
                        - $ref: '#/components/schemas/SourceFlowConfig'
                        - description: The configuration that controls how Customer Profiles retrieves data from the source.
                    Tasks:
                      allOf:
                        - $ref: '#/components/schemas/Tasks'
                        - description: A list of tasks that Customer Profiles performs while transferring the data in the flow run.
                    TriggerConfig:
                      allOf:
                        - $ref: '#/components/schemas/TriggerConfig'
                        - description: The trigger settings that determine how and when the flow runs.
                ObjectTypeNames:
                  description: 'A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.'
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/typeName'
  '/domains/{DomainName}/matches':
    get:
      operationId: GetMatches
      description: '<p>Before calling this API, use <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_CreateDomain.html">CreateDomain</a> or <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_UpdateDomain.html">UpdateDomain</a> to enable identity resolution: set <code>Matching</code> to true.</p> <p>GetMatches returns potentially matching profiles, based on the results of the latest run of a machine learning process. </p> <important> <p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p> </important> <p>Amazon Connect uses the following profile attributes to identify matches:</p> <ul> <li> <p>PhoneNumber</p> </li> <li> <p>HomePhoneNumber</p> </li> <li> <p>BusinessPhoneNumber</p> </li> <li> <p>MobilePhoneNumber</p> </li> <li> <p>EmailAddress</p> </li> <li> <p>PersonalEmailAddress</p> </li> <li> <p>BusinessEmailAddress</p> </li> <li> <p>FullName</p> </li> </ul> <p>For example, two or more profiles—with spelling mistakes such as <b>John Doe</b> and <b>Jhn Doe</b>, or different casing email addresses such as <b>JOHN_DOE@ANYCOMPANY.COM</b> and <b>johndoe@anycompany.com</b>, or different phone number formats such as <b>555-010-0000</b> and <b>+1-555-010-0000</b>—can be detected as belonging to the same customer <b>John Doe</b> and merged into a unified profile.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMatchesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of results to return per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: GetSimilarProfiles
      description: Returns a set of profiles that belong to the same matching group using the <code>matchId</code> or <code>profileId</code>. You can also specify the type of matching that you want for finding similar profiles using either <code>RULE_BASED_MATCHING</code> or <code>ML_BASED_MATCHING</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSimilarProfilesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous <code>GetSimilarProfiles</code> API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - MatchType
                - SearchKey
                - SearchValue
              properties:
                MatchType:
                  description: Specify the type of matching to get similar profiles for.
                  type: string
                  enum:
                    - RULE_BASED_MATCHING
                    - ML_BASED_MATCHING
                SearchKey:
                  description: The string indicating the search key to be used.
                  type: string
                  minLength: 1
                  maxLength: 255
                SearchValue:
                  description: The string based on <code>SearchKey</code> to be searched for similar profiles.
                  type: string
                  minLength: 1
                  maxLength: 255
  '/templates/{TemplateId}':
    get:
      operationId: GetProfileObjectTypeTemplate
      description: '<p>Returns the template information for a specific object type.</p> <p>A template is a predefined ProfileObjectType, such as “Salesforce-Account” or “Salesforce-Contact.” When a user sends a ProfileObject, using the PutProfileObject API, with an ObjectTypeName that matches one of the TemplateIds, it uses the mappings from the template.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetProfileObjectTypeTemplateResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: TemplateId
          in: path
          required: true
          description: A unique identifier for the object template.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/workflows/{WorkflowId}/steps':
    get:
      operationId: GetWorkflowSteps
      description: Get granular list of steps in workflow.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowStepsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: WorkflowId
          in: path
          required: true
          description: Unique identifier for the workflow.
          schema:
            type: string
            pattern: '[a-f0-9]{32}'
        - name: next-token
          in: query
          required: false
          description: The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of results to return per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /integrations:
    post:
      operationId: ListAccountIntegrations
      description: Lists all of the integrations associated to a specific URI in the AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAccountIntegrationsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListAccountIntegrations API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: include-hidden
          in: query
          required: false
          description: Boolean to indicate if hidden integration should be returned. Defaults to <code>False</code>.
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Uri
              properties:
                Uri:
                  description: The URI of the S3 bucket or any other type of data source.
                  type: string
                  minLength: 1
                  maxLength: 255
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/calculated-attributes':
    get:
      operationId: ListCalculatedAttributeDefinitions
      description: Lists calculated attribute definitions for Customer Profiles
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCalculatedAttributeDefinitionsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous call to ListCalculatedAttributeDefinitions.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of calculated attribute definitions returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profile/{ProfileId}/calculated-attributes':
    get:
      operationId: ListCalculatedAttributesForProfile
      description: Retrieve a list of calculated attributes for a customer profile.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCalculatedAttributesForProfileResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous call to ListCalculatedAttributesForProfile.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of calculated attributes returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: ProfileId
          in: path
          required: true
          description: The unique identifier of a customer profile.
          schema:
            type: string
            pattern: '[a-f0-9]{32}'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /domains:
    get:
      operationId: ListDomains
      description: Returns a list of all the domains for an AWS account that have been created.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDomainsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListDomain API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/event-streams':
    get:
      operationId: ListEventStreams
      description: Returns a list of all the event streams in a specific domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventStreamsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: Identifies the next page of results to return.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: MaxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: NextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/identity-resolution-jobs':
    get:
      operationId: ListIdentityResolutionJobs
      description: Lists all of the Identity Resolution Jobs in your domain. The response sorts the list by <code>JobStartTime</code>.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIdentityResolutionJobsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of results to return per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /templates:
    get:
      operationId: ListProfileObjectTypeTemplates
      description: Lists all of the template information for object types.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfileObjectTypeTemplatesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous ListObjectTypeTemplates API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/object-types':
    get:
      operationId: ListProfileObjectTypes
      description: Lists all of the templates available within the service.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfileObjectTypesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: Identifies the next page of results to return.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/objects':
    post:
      operationId: ListProfileObjects
      description: Returns a list of objects associated with a profile of a given ProfileObjectType.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProfileObjectsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous call to ListProfileObjects.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of objects returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ObjectTypeName
                - ProfileId
              properties:
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                ProfileId:
                  description: The unique identifier of a customer profile.
                  type: string
                  pattern: '[a-f0-9]{32}'
                ObjectFilter:
                  description: The filter applied to <code>ListProfileObjects</code> response to include profile objects with the specified index values.
                  type: object
                  properties:
                    KeyName:
                      allOf:
                        - $ref: '#/components/schemas/name'
                        - description: 'A searchable identifier of a profile object. The predefined keys you can use to search for <code>_asset</code> include: <code>_assetId</code>, <code>_assetName</code>, and <code>_serialNumber</code>. The predefined keys you can use to search for <code>_case</code> include: <code>_caseId</code>. The predefined keys you can use to search for <code>_order</code> include: <code>_orderId</code>.'
                    Values:
                      allOf:
                        - $ref: '#/components/schemas/requestValueList'
                        - description: A list of key values.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    put:
      operationId: PutProfileObject
      description: '<p>Adds additional objects to customer profiles of a given ObjectType.</p> <p>When adding a specific profile object, like a Contact Record, an inferred profile can get created if it is not mapped to an existing profile. The resulting profile will only have a phone number populated in the standard ProfileObject. Any additional Contact Records with the same phone number will be mapped to the same inferred profile.</p> <p>When a ProfileObject is created and if a ProfileObjectType already exists for the ProfileObject, it will provide data to a standard profile depending on the ProfileObjectType definition.</p> <p>PutProfileObject needs an ObjectType, which can be created using PutProfileObjectType.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutProfileObjectResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ObjectTypeName
                - Object
              properties:
                ObjectTypeName:
                  description: The name of the profile object type.
                  type: string
                  pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
                  minLength: 1
                  maxLength: 255
                Object:
                  description: A string that is serialized from a JSON object.
                  type: string
                  minLength: 1
                  maxLength: 256000
  '/domains/{DomainName}/profiles/ruleBasedMatches':
    get:
      operationId: ListRuleBasedMatches
      description: Returns a set of <code>MatchIds</code> that belong to the given domain.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRuleBasedMatchesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous <code>ListRuleBasedMatches</code> API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of <code>MatchIds</code> returned per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}':
    get:
      operationId: ListTagsForResource
      description: 'Displays the tags associated with an Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of the resource for which you want to view tags.
          schema:
            type: string
            pattern: '^arn:[a-z0-9]{1,10}:profile'
            maxLength: 256
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: '<p>Assigns one or more tags (key-value pairs) to the specified Amazon Connect Customer Profiles resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.</p> <p>Tags don''t have any semantic meaning to AWS and are interpreted strictly as strings of characters.</p> <p>You can use the TagResource action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of the resource that you're adding tags to.
          schema:
            type: string
            pattern: '^arn:[a-z0-9]{1,10}:profile'
            maxLength: 256
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tags
              properties:
                tags:
                  description: 'The tags used to organize, track, or control access for this resource.'
                  type: object
                  minProperties: 1
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
  '/domains/{DomainName}/workflows':
    post:
      operationId: ListWorkflows
      description: Query to list all workflows.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowsResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
        - name: next-token
          in: query
          required: false
          description: The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: The maximum number of results to return per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                WorkflowType:
                  description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
                  type: string
                  enum:
                    - APPFLOW_INTEGRATION
                Status:
                  description: Status of workflow execution.
                  type: string
                  enum:
                    - NOT_STARTED
                    - IN_PROGRESS
                    - COMPLETE
                    - FAILED
                    - SPLIT
                    - RETRY
                    - CANCELLED
                QueryStartDate:
                  description: Retrieve workflows started after timestamp.
                  type: string
                  format: date-time
                QueryEndDate:
                  description: Retrieve workflows ended after timestamp.
                  type: string
                  format: date-time
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/objects/merge':
    post:
      operationId: MergeProfiles
      description: '<p>Runs an AWS Lambda job that does the following:</p> <ol> <li> <p>All the profileKeys in the <code>ProfileToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>All the objects in the <code>ProfileToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>All the <code>ProfileToBeMerged</code> will be deleted at the end.</p> </li> <li> <p>All the profileKeys in the <code>ProfileIdsToBeMerged</code> will be moved to the main profile.</p> </li> <li> <p>Standard fields are merged as follows:</p> <ol> <li> <p>Fields are always "union"-ed if there are no conflicts in standard fields or attributeKeys.</p> </li> <li> <p>When there are conflicting fields:</p> <ol> <li> <p>If no <code>SourceProfileIds</code> entry is specified, the main Profile value is always taken. </p> </li> <li> <p>If a <code>SourceProfileIds</code> entry is specified, the specified profileId is always taken, even if it is a NULL value.</p> </li> </ol> </li> </ol> </li> </ol> <p>You can use MergeProfiles together with <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a>, which returns potentially matching profiles, or use it with the results of another matching system. After profiles have been merged, they cannot be separated (unmerged).</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeProfilesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - MainProfileId
                - ProfileIdsToBeMerged
              properties:
                MainProfileId:
                  description: The identifier of the profile to be taken.
                  type: string
                  pattern: '[a-f0-9]{32}'
                ProfileIdsToBeMerged:
                  description: The identifier of the profile to be merged into MainProfileId.
                  type: array
                  items:
                    $ref: '#/components/schemas/uuid'
                  minItems: 1
                  maxItems: 20
                FieldSourceProfileIds:
                  description: 'A duplicate customer profile that is to be merged into a main profile. '
                  type: object
                  properties:
                    AccountNumber:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: 'A unique identifier for the account number field to be merged. '
                    AdditionalInformation:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the additional information field to be merged.
                    PartyType:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the party type field to be merged.
                    BusinessName:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the business name field to be merged.
                    FirstName:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the first name field to be merged.
                    MiddleName:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the middle name field to be merged.
                    LastName:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the last name field to be merged.
                    BirthDate:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the birthdate field to be merged.
                    Gender:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the gender field to be merged.
                    PhoneNumber:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the phone number field to be merged.
                    MobilePhoneNumber:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the mobile phone number field to be merged.
                    HomePhoneNumber:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the home phone number field to be merged.
                    BusinessPhoneNumber:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the business phone number field to be merged.
                    EmailAddress:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the email address field to be merged.
                    PersonalEmailAddress:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the personal email address field to be merged.
                    BusinessEmailAddress:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the party type field to be merged.
                    Address:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the party type field to be merged.
                    ShippingAddress:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the shipping address field to be merged.
                    MailingAddress:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the mailing address field to be merged.
                    BillingAddress:
                      allOf:
                        - $ref: '#/components/schemas/uuid'
                        - description: A unique identifier for the billing type field to be merged.
                    Attributes:
                      allOf:
                        - $ref: '#/components/schemas/AttributeSourceIdMap'
                        - description: A unique identifier for the attributes field to be merged.
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/domains/{DomainName}/profiles/search':
    post:
      operationId: SearchProfiles
      description: '<p>Searches for profiles within a specific domain using one or more predefined search keys (e.g., _fullName, _phone, _email, _account, etc.) and/or custom-defined search keys. A search key is a data type pair that consists of a <code>KeyName</code> and <code>Values</code> list.</p> <p>This operation supports searching for profiles with a minimum of 1 key-value(s) pair and up to 5 key-value(s) pairs using either <code>AND</code> or <code>OR</code> logic.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchProfilesResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
      parameters:
        - name: next-token
          in: query
          required: false
          description: The pagination token from the previous SearchProfiles API call.
          schema:
            type: string
            minLength: 1
            maxLength: 1024
        - name: max-results
          in: query
          required: false
          description: <p>The maximum number of objects returned per page.</p> <p>The default is 20 if this parameter is not included in the request.</p>
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - name: DomainName
          in: path
          required: true
          description: The unique name of the domain.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            minLength: 1
            maxLength: 64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - KeyName
                - Values
              properties:
                KeyName:
                  description: 'A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.'
                  type: string
                  pattern: '^[a-zA-Z0-9_-]+$'
                  minLength: 1
                  maxLength: 64
                Values:
                  description: A list of key values.
                  type: array
                  items:
                    $ref: '#/components/schemas/string1To255'
                AdditionalSearchKeys:
                  description: 'A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria. '
                  type: array
                  items:
                    $ref: '#/components/schemas/AdditionalSearchKey'
                  minItems: 1
                  maxItems: 4
                LogicalOperator:
                  description: '<p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>'
                  type: string
                  enum:
                    - AND
                    - OR
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/tags/{resourceArn}#tagKeys':
    delete:
      operationId: UntagResource
      description: 'Removes one or more tags from the specified Amazon Connect Customer Profiles resource. In Connect Customer Profiles, domains, profile object types, and integrations can be tagged.'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceArn
          in: path
          required: true
          description: The ARN of the resource from which you are removing tags.
          schema:
            type: string
            pattern: '^arn:[a-z0-9]{1,10}:profile'
            maxLength: 256
        - name: tagKeys
          in: query
          required: true
          description: The list of tag keys to remove from the resource.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 1
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    AddProfileKeyResponse:
      type: object
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    string1To255:
      type: string
      minLength: 1
      maxLength: 255
    BadRequestException: {}
    AccessDeniedException: {}
    ResourceNotFoundException: {}
    ThrottlingException: {}
    InternalServerException: {}
    CreateCalculatedAttributeDefinitionResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the calculated attribute.
        AttributeDetails:
          allOf:
            - $ref: '#/components/schemas/AttributeDetails'
            - description: Mathematical expression and a list of attribute items specified in that expression.
        Conditions:
          allOf:
            - $ref: '#/components/schemas/Conditions'
            - description: 'The conditions including range, object count, and threshold for the calculated attribute.'
        Statistic:
          allOf:
            - $ref: '#/components/schemas/Statistic'
            - description: The aggregation operation to perform for the calculated attribute.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    AttributeList:
      type: array
      items:
        $ref: '#/components/schemas/AttributeItem'
      minItems: 1
      maxItems: 2
    Range:
      type: object
      required:
        - Value
        - Unit
      properties:
        Value:
          allOf:
            - $ref: '#/components/schemas/Value'
            - description: The amount of time of the specified unit.
        Unit:
          allOf:
            - $ref: '#/components/schemas/Unit'
            - description: The unit of time.
      description: The relative time period over which data is included in the aggregation.
    ObjectCount:
      type: integer
      minimum: 1
      maximum: 100
    Threshold:
      type: object
      required:
        - Value
        - Operator
      properties:
        Value:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The value of the threshold.
        Operator:
          allOf:
            - $ref: '#/components/schemas/Operator'
            - description: The operator of the threshold.
      description: The threshold for the calculated attribute.
    TagValue:
      type: string
      maxLength: 256
    CreateDomainResponse:
      type: object
      required:
        - DomainName
        - DefaultExpirationDays
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.'
        Matching:
          allOf:
            - $ref: '#/components/schemas/MatchingResponse'
            - description: '<p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p>'
        RuleBasedMatching:
          allOf:
            - $ref: '#/components/schemas/RuleBasedMatchingResponse'
            - description: 'The process of matching duplicate profiles using the Rule-Based matching. If <code>RuleBasedMatching</code> = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the <code>RuleBasedMatchingRequest</code>. You can use the <code>ListRuleBasedMatches</code> and <code>GetSimilarProfiles</code> API to return and review the results. Also, if you have configured <code>ExportingConfig</code> in the <code>RuleBasedMatchingRequest</code>, you can download the results from S3.'
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    optionalBoolean:
      type: boolean
    JobSchedule:
      type: object
      required:
        - DayOfTheWeek
        - Time
      properties:
        DayOfTheWeek:
          allOf:
            - $ref: '#/components/schemas/JobScheduleDayOfTheWeek'
            - description: The day when the Identity Resolution Job should run every week.
        Time:
          allOf:
            - $ref: '#/components/schemas/JobScheduleTime'
            - description: The time when the Identity Resolution Job should run every week.
      description: The day and time when do you want to start the Identity Resolution Job every week.
    AutoMerging:
      type: object
      required:
        - Enabled
      properties:
        Enabled:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: The flag that enables the auto-merging of duplicate profiles.
        Consolidation:
          allOf:
            - $ref: '#/components/schemas/Consolidation'
            - description: 'A list of matching attributes that represent matching criteria. If two profiles meet at least one of the requirements in the matching attributes list, they will be merged.'
        ConflictResolution:
          allOf:
            - $ref: '#/components/schemas/ConflictResolution'
            - description: 'How the auto-merging process should resolve conflicts between different profiles. For example, if Profile A and Profile B have the same <code>FirstName</code> and <code>LastName</code> (and that is the matching criteria), which <code>EmailAddress</code> should be used? '
        MinAllowedConfidenceScoreForMerging:
          allOf:
            - $ref: '#/components/schemas/Double0To1'
            - description: 'A number between 0 and 1 that represents the minimum confidence score required for profiles within a matching group to be merged during the auto-merge process. A higher score means higher similarity required to merge profiles. '
      description: Configuration settings for how to perform the auto-merging of profiles.
    ExportingConfig:
      type: object
      properties:
        S3Exporting:
          allOf:
            - $ref: '#/components/schemas/S3ExportingConfig'
            - description: The S3 location where Identity Resolution Jobs write result files.
      description: '<p>Configuration information about the S3 bucket where Identity Resolution Jobs writes result files. </p> <note> <p>You need to give Customer Profiles service principal write permission to your S3 bucket. Otherwise, you''ll get an exception in the API response. For an example policy, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/cross-service-confused-deputy-prevention.html#customer-profiles-cross-service">Amazon Connect Customer Profiles cross-service confused deputy prevention</a>. </p> </note>'
    MatchingRules:
      type: array
      items:
        $ref: '#/components/schemas/MatchingRule'
      minItems: 1
      maxItems: 15
    MaxAllowedRuleLevelForMerging:
      type: integer
      minimum: 1
      maximum: 15
    MaxAllowedRuleLevelForMatching:
      type: integer
      minimum: 1
      maximum: 15
    AttributeTypesSelector:
      type: object
      required:
        - AttributeMatchingModel
      properties:
        AttributeMatchingModel:
          allOf:
            - $ref: '#/components/schemas/AttributeMatchingModel'
            - description: 'Configures the <code>AttributeMatchingModel</code>, you can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code>.'
        Address:
          allOf:
            - $ref: '#/components/schemas/AddressList'
            - description: '<p>The <code>Address</code> type. You can choose from <code>Address</code>, <code>BusinessAddress</code>, <code>MaillingAddress</code>, and <code>ShippingAddress</code>.</p> <p>You only can use the Address type in the <code>MatchingRule</code>. For example, if you want to match profile based on <code>BusinessAddress.City</code> or <code>MaillingAddress.City</code>, you need to choose the <code>BusinessAddress</code> and the <code>MaillingAddress</code> to represent the Address type and specify the <code>Address.City</code> on the matching rule.</p>'
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/PhoneNumberList'
            - description: '<p>The <code>PhoneNumber</code> type. You can choose from <code>PhoneNumber</code>, <code>HomePhoneNumber</code>, and <code>MobilePhoneNumber</code>.</p> <p>You only can use the <code>PhoneNumber</code> type in the <code>MatchingRule</code>. For example, if you want to match a profile based on <code>Phone</code> or <code>HomePhone</code>, you need to choose the <code>Phone</code> and the <code>HomePhone</code> to represent the <code>PhoneNumber</code> type and only specify the <code>PhoneNumber</code> on the matching rule.</p>'
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/EmailList'
            - description: '<p>The <code>Email</code> type. You can choose from <code>EmailAddress</code>, <code>BusinessEmailAddress</code> and <code>PersonalEmailAddress</code>.</p> <p>You only can use the <code>EmailAddress</code> type in the <code>MatchingRule</code>. For example, if you want to match profile based on <code>PersonalEmailAddress</code> or <code>BusinessEmailAddress</code>, you need to choose the <code>PersonalEmailAddress</code> and the <code>BusinessEmailAddress</code> to represent the <code>EmailAddress</code> type and only specify the <code>EmailAddress</code> on the matching rule.</p>'
      description: '<p>Configuration information about the <code>AttributeTypesSelector </code>where the rule-based identity resolution uses to match profiles. You can choose how profiles are compared across attribute types and which attribute to use for matching from each type. There are three attribute types you can configure:</p> <ul> <li> <p>Email type</p> <ul> <li> <p>You can choose from <code>Email</code>, <code>BusinessEmail</code>, and <code>PersonalEmail</code> </p> </li> </ul> </li> <li> <p>Phone number type</p> <ul> <li> <p>You can choose from <code>Phone</code>, <code>HomePhone</code>, and <code>MobilePhone</code> </p> </li> </ul> </li> <li> <p>Address type</p> <ul> <li> <p>You can choose from <code>Address</code>, <code>BusinessAddress</code>, <code>MaillingAddress</code>, and <code>ShippingAddress</code> </p> </li> </ul> </li> </ul> <p>You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the <code>AttributeMatchingModel</code>. When choosing <code>MANY_TO_MANY</code>, the system can match attribute across the sub-types of an attribute type. For example, if the value of the <code>Email</code> field of Profile A and the value of <code>BusinessEmail</code> field of Profile B matches, the two profiles are matched on the Email type. When choosing <code>ONE_TO_ONE</code> the system can only match if the sub-types are exact matches. For example, only when the value of the <code>Email</code> field of Profile A and the value of the <code>Email</code> field of Profile B matches, the two profiles are matched on the Email type.</p>'
    ConflictResolution:
      type: object
      required:
        - ConflictResolvingModel
      properties:
        ConflictResolvingModel:
          allOf:
            - $ref: '#/components/schemas/ConflictResolvingModel'
            - description: '<p>How the auto-merging process should resolve conflicts between different profiles.</p> <ul> <li> <p> <code>RECENCY</code>: Uses the data that was most recently updated.</p> </li> <li> <p> <code>SOURCE</code>: Uses the data from a specific source. For example, if a company has been aquired or two departments have merged, data from the specified source is used. If two duplicate profiles are from the same source, then <code>RECENCY</code> is used again.</p> </li> </ul>'
        SourceName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The <code>ObjectType</code> name that is used to resolve profile merging conflicts when choosing <code>SOURCE</code> as the <code>ConflictResolvingModel</code>.
      description: How the auto-merging process should resolve conflicts between different profiles.
    CreateEventStreamResponse:
      type: object
      required:
        - EventStreamArn
      properties:
        EventStreamArn:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique identifier for the event stream.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    CreateIntegrationWorkflowResponse:
      type: object
      required:
        - WorkflowId
        - Message
      properties:
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: Unique identifier for the workflow.
        Message:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A message indicating create request was received.
    AppflowIntegration:
      type: object
      required:
        - FlowDefinition
      properties:
        FlowDefinition:
          $ref: '#/components/schemas/FlowDefinition'
        Batches:
          allOf:
            - $ref: '#/components/schemas/Batches'
            - description: Batches in workflow of type <code>APPFLOW_INTEGRATION</code>.
      description: Details for workflow of type <code>APPFLOW_INTEGRATION</code>.
    CreateProfileResponse:
      type: object
      required:
        - ProfileId
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    DeleteCalculatedAttributeDefinitionResponse:
      type: object
      properties: {}
    DeleteDomainResponse:
      type: object
      required:
        - Message
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteEventStreamResponse:
      type: object
      properties: {}
    DeleteIntegrationResponse:
      type: object
      required:
        - Message
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileKeyResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileObjectResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteProfileObjectTypeResponse:
      type: object
      required:
        - Message
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the delete request is done.
    DeleteWorkflowResponse:
      type: object
      properties: {}
    GetAutoMergingPreviewResponse:
      type: object
      required:
        - DomainName
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        NumberOfMatchesInSample:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The number of match groups in the domain that have been reviewed in this preview dry run.
        NumberOfProfilesInSample:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The number of profiles found in this preview dry run.
        NumberOfProfilesWillBeMerged:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The number of profiles that would be merged if this wasn't a preview dry run.
    MatchingAttributesList:
      type: array
      items:
        $ref: '#/components/schemas/MatchingAttributes'
      minItems: 1
      maxItems: 10
    ConflictResolvingModel:
      type: string
      enum:
        - RECENCY
        - SOURCE
    GetCalculatedAttributeDefinitionResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the calculated attribute.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was most recently edited.
        Statistic:
          allOf:
            - $ref: '#/components/schemas/Statistic'
            - description: The aggregation operation to perform for the calculated attribute.
        Conditions:
          allOf:
            - $ref: '#/components/schemas/Conditions'
            - description: 'The conditions including range, object count, and threshold for the calculated attribute.'
        AttributeDetails:
          allOf:
            - $ref: '#/components/schemas/AttributeDetails'
            - description: Mathematical expression and a list of attribute items specified in that expression.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetCalculatedAttributeForProfileResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        IsDataPartial:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.'
        Value:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The value of the calculated attribute.
    GetDomainResponse:
      type: object
      required:
        - DomainName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.'
        Stats:
          allOf:
            - $ref: '#/components/schemas/DomainStats'
            - description: Usage-specific statistics about the domain.
        Matching:
          allOf:
            - $ref: '#/components/schemas/MatchingResponse'
            - description: '<p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p>'
        RuleBasedMatching:
          allOf:
            - $ref: '#/components/schemas/RuleBasedMatchingResponse'
            - description: 'The process of matching duplicate profiles using the Rule-Based matching. If <code>RuleBasedMatching</code> = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the <code>RuleBasedMatchingRequest</code>. You can use the <code>ListRuleBasedMatches</code> and <code>GetSimilarProfiles</code> API to return and review the results. Also, if you have configured <code>ExportingConfig</code> in the <code>RuleBasedMatchingRequest</code>, you can download the results from S3.'
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetEventStreamResponse:
      type: object
      required:
        - DomainName
        - EventStreamArn
        - CreatedAt
        - State
        - DestinationDetails
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        EventStreamArn:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique identifier for the event stream.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the export was created.
        State:
          allOf:
            - $ref: '#/components/schemas/EventStreamState'
            - description: The operational state of destination stream for export.
        StoppedSince:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp when the <code>State</code> changed to <code>STOPPED</code>.
        DestinationDetails:
          allOf:
            - $ref: '#/components/schemas/EventStreamDestinationDetails'
            - description: Details regarding the Kinesis stream.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetIdentityResolutionJobResponse:
      type: object
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        JobId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of the Identity Resolution Job.
        Status:
          allOf:
            - $ref: '#/components/schemas/IdentityResolutionJobStatus'
            - description: '<p>The status of the Identity Resolution Job.</p> <ul> <li> <p> <code>PENDING</code>: The Identity Resolution Job is scheduled but has not started yet. If you turn off the Identity Resolution feature in your domain, jobs in the <code>PENDING</code> state are deleted.</p> </li> <li> <p> <code>PREPROCESSING</code>: The Identity Resolution Job is loading your data.</p> </li> <li> <p> <code>FIND_MATCHING</code>: The Identity Resolution Job is using the machine learning model to identify profiles that belong to the same matching group.</p> </li> <li> <p> <code>MERGING</code>: The Identity Resolution Job is merging duplicate profiles.</p> </li> <li> <p> <code>COMPLETED</code>: The Identity Resolution Job completed successfully.</p> </li> <li> <p> <code>PARTIAL_SUCCESS</code>: There''s a system error and not all of the data is merged. The Identity Resolution Job writes a message indicating the source of the problem.</p> </li> <li> <p> <code>FAILED</code>: The Identity Resolution Job did not merge any data. It writes a message indicating the source of the problem.</p> </li> </ul>'
        Message:
          allOf:
            - $ref: '#/components/schemas/stringTo2048'
            - description: The error messages that are generated when the Identity Resolution Job runs.
        JobStartTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the Identity Resolution Job was started or will be started.
        JobEndTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the Identity Resolution Job was completed.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the Identity Resolution Job was most recently edited.
        JobExpirationTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the Identity Resolution Job will expire.
        AutoMerging:
          allOf:
            - $ref: '#/components/schemas/AutoMerging'
            - description: Configuration settings for how to perform the auto-merging of profiles.
        ExportingLocation:
          allOf:
            - $ref: '#/components/schemas/ExportingLocation'
            - description: The S3 location where the Identity Resolution Job writes result files.
        JobStats:
          allOf:
            - $ref: '#/components/schemas/JobStats'
            - description: Statistics about the Identity Resolution Job.
    GetIntegrationResponse:
      type: object
      required:
        - DomainName
        - Uri
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
        ObjectTypeNames:
          allOf:
            - $ref: '#/components/schemas/ObjectTypeNames'
            - description: 'A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.'
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Unique identifier for the workflow.
        IsUnstructured:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: 'Boolean that shows if the Flow that''s associated with the Integration is created in Amazon Appflow, or with ObjectTypeName equals _unstructured via API/CLI in flowDefinition.'
    GetMatchesResponse:
      type: object
      properties:
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: 'If there are additional results, this is the token for the next set of results.'
        MatchGenerationDate:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp this version of Match Result generated.
        PotentialMatches:
          allOf:
            - $ref: '#/components/schemas/matchesNumber'
            - description: The number of potential matches found.
        Matches:
          allOf:
            - $ref: '#/components/schemas/MatchesList'
            - description: The list of matched profiles for this instance.
    GetProfileObjectTypeResponse:
      type: object
      required:
        - ObjectTypeName
        - Description
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the profile object type.
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        SourceLastUpdatedTimestampFormat:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up.
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    GetProfileObjectTypeTemplateResponse:
      type: object
      properties:
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        SourceName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The name of the source of the object template.
        SourceObject:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The source of the object template.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        SourceLastUpdatedTimestampFormat:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up.
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
    GetSimilarProfilesResponse:
      type: object
      properties:
        ProfileIds:
          allOf:
            - $ref: '#/components/schemas/ProfileIdList'
            - description: Set of <code>profileId</code>s that belong to the same matching group.
        MatchId:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The string <code>matchId</code> that the similar profiles belong to.
        MatchType:
          allOf:
            - $ref: '#/components/schemas/MatchType'
            - description: Specify the type of matching to get similar profiles for.
        RuleLevel:
          allOf:
            - $ref: '#/components/schemas/RuleLevel'
            - description: The integer rule level that the profiles matched on.
        ConfidenceScore:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: 'It only has value when the <code>MatchType</code> is <code>ML_BASED_MATCHING</code>.A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used as an absolute measure of matching quality.'
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous <code>GetSimilarProfiles</code> API call.
    GetWorkflowResponse:
      type: object
      properties:
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: Unique identifier for the workflow.
        WorkflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        Status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: Status of workflow execution.
        ErrorDescription:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Workflow error messages during execution (if any).
        StartDate:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp that represents when workflow execution started.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp that represents when workflow execution last updated.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/WorkflowAttributes'
            - description: Attributes provided for workflow execution.
        Metrics:
          allOf:
            - $ref: '#/components/schemas/WorkflowMetrics'
            - description: Workflow specific execution metrics.
    GetWorkflowStepsResponse:
      type: object
      properties:
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: Unique identifier for the workflow.
        WorkflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        Items:
          allOf:
            - $ref: '#/components/schemas/WorkflowStepsList'
            - description: List containing workflow step details.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: 'If there are additional results, this is the token for the next set of results.'
    ListAccountIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/IntegrationList'
            - description: The list of ListAccountIntegration instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous ListAccountIntegrations API call.
    ListCalculatedAttributeDefinitionsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/CalculatedAttributeDefinitionsList'
            - description: The list of calculated attribute definitions.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous call to ListCalculatedAttributeDefinitions.
    ListCalculatedAttributesForProfileResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/CalculatedAttributesForProfileList'
            - description: The list of calculated attributes.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous call to ListCalculatedAttributesForProfile.
    ListDomainsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/DomainList'
            - description: The list of ListDomains instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous ListDomains API call.
    ListEventStreamsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/EventStreamSummaryList'
            - description: Contains summary information about an EventStream.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: Identifies the next page of results to return.
    ListIdentityResolutionJobsResponse:
      type: object
      properties:
        IdentityResolutionJobsList:
          allOf:
            - $ref: '#/components/schemas/IdentityResolutionJobsList'
            - description: A list of Identity Resolution Jobs.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: 'If there are additional results, this is the token for the next set of results.'
    ListIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/IntegrationList'
            - description: The list of ListIntegrations instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous ListIntegrations API call.
    ListProfileObjectTypeTemplatesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileObjectTypeTemplateList'
            - description: The list of ListProfileObjectType template instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: 'The pagination token from the previous ListObjectTypeTemplates API call. '
    ListProfileObjectTypesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileObjectTypeList'
            - description: The list of ListProfileObjectTypes instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: Identifies the next page of results to return.
    ListProfileObjectsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileObjectList'
            - description: The list of ListProfileObject instances.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous call to ListProfileObjects.
    name:
      type: string
      pattern: '^[a-zA-Z0-9_-]+$'
      minLength: 1
      maxLength: 64
    requestValueList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    ListRuleBasedMatchesResponse:
      type: object
      properties:
        MatchIds:
          allOf:
            - $ref: '#/components/schemas/MatchIdList'
            - description: The list of <code>MatchIds</code> for the given domain.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous <code>ListRuleBasedMatches</code> API call.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    ListWorkflowsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/WorkflowList'
            - description: List containing workflow details.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: 'If there are additional results, this is the token for the next set of results.'
    MergeProfilesResponse:
      type: object
      properties:
        Message:
          allOf:
            - $ref: '#/components/schemas/message'
            - description: A message that indicates the merge request is complete.
    uuid:
      type: string
      pattern: '[a-f0-9]{32}'
    AttributeSourceIdMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/uuid'
    PutIntegrationResponse:
      type: object
      required:
        - DomainName
        - Uri
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
        ObjectTypeNames:
          allOf:
            - $ref: '#/components/schemas/ObjectTypeNames'
            - description: 'A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.'
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Unique identifier for the workflow.
        IsUnstructured:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: 'Boolean that shows if the Flow that''s associated with the Integration is created in Amazon Appflow, or with ObjectTypeName equals _unstructured via API/CLI in flowDefinition.'
    FlowDescription:
      type: string
      pattern: '[\w!@#\-.?,\s]*'
      maxLength: 2048
    FlowName:
      type: string
      pattern: '[a-zA-Z0-9][\w!@#.-]+'
      maxLength: 256
    KmsArn:
      type: string
      pattern: 'arn:aws:kms:.*:[0-9]+:.*'
      minLength: 20
      maxLength: 2048
    SourceFlowConfig:
      type: object
      required:
        - ConnectorType
        - SourceConnectorProperties
      properties:
        ConnectorProfileName:
          allOf:
            - $ref: '#/components/schemas/ConnectorProfileName'
            - description: The name of the AppFlow connector profile. This name must be unique for each connector profile in the AWS account.
        ConnectorType:
          allOf:
            - $ref: '#/components/schemas/SourceConnectorType'
            - description: 'The type of connector, such as Salesforce, Marketo, and so on.'
        IncrementalPullConfig:
          allOf:
            - $ref: '#/components/schemas/IncrementalPullConfig'
            - description: 'Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull.'
        SourceConnectorProperties:
          allOf:
            - $ref: '#/components/schemas/SourceConnectorProperties'
            - description: Specifies the information that is required to query a particular source connector.
      description: Contains information about the configuration of the source connector used in the flow.
    Tasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    TriggerConfig:
      type: object
      required:
        - TriggerType
      properties:
        TriggerType:
          allOf:
            - $ref: '#/components/schemas/TriggerType'
            - description: 'Specifies the type of flow trigger. It can be OnDemand, Scheduled, or Event.'
        TriggerProperties:
          allOf:
            - $ref: '#/components/schemas/TriggerProperties'
            - description: 'Specifies the configuration details of a schedule-triggered flow that you define. Currently, these settings only apply to the Scheduled trigger type.'
      description: The trigger settings that determine how and when Amazon AppFlow runs the specified flow.
    typeName:
      type: string
      pattern: '^[a-zA-Z_][a-zA-Z_0-9-]*$'
      minLength: 1
      maxLength: 255
    PutProfileObjectResponse:
      type: object
      properties:
        ProfileObjectUniqueKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifier of the profile object generated by the service.
    PutProfileObjectTypeResponse:
      type: object
      required:
        - ObjectTypeName
        - Description
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: Description of the profile object type.
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        ExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        SourceLastUpdatedTimestampFormat:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up in fields that were parsed using <a href="https://docs.oracle.com/javase/10/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat</a>. If you have <code>sourceLastUpdatedTimestamp</code> in your field, you must set up <code>sourceLastUpdatedTimestampFormat</code>.'
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    ObjectTypeField:
      type: object
      properties:
        Source:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: 'A field of a ProfileObject. For example: _source.FirstName, where “_source” is a ProfileObjectType of a Zendesk user and “FirstName” is a field in that ObjectType.'
        Target:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: 'The location of the data in the standard ProfileObject model. For example: _profile.Address.PostalCode.'
        ContentType:
          allOf:
            - $ref: '#/components/schemas/FieldContentType'
            - description: The content type of the field. Used for determining equality when searching.
      description: Represents a field in a ProfileObjectType.
    ObjectTypeKeyList:
      type: array
      items:
        $ref: '#/components/schemas/ObjectTypeKey'
    SearchProfilesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/ProfileList'
            - description: The list of Profiles matching the search criteria.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/token'
            - description: The pagination token from the previous SearchProfiles API call.
    AdditionalSearchKey:
      type: object
      required:
        - KeyName
        - Values
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
      description: 'A data type pair that consists of a <code>KeyName</code> and <code>Values</code> list that is used in conjunction with the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html#customerprofiles-SearchProfiles-request-KeyName">KeyName</a> and <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html#customerprofiles-SearchProfiles-request-Values">Values</a> parameters to search for profiles using the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> API.'
    TagResourceResponse:
      type: object
      properties: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '^(?!aws:)[a-zA-Z+-=._:/]+$'
      minLength: 1
      maxLength: 128
    UpdateCalculatedAttributeDefinitionResponse:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the calculated attribute.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was most recently edited.
        Statistic:
          allOf:
            - $ref: '#/components/schemas/Statistic'
            - description: The aggregation operation to perform for the calculated attribute.
        Conditions:
          allOf:
            - $ref: '#/components/schemas/Conditions'
            - description: 'The conditions including range, object count, and threshold for the calculated attribute.'
        AttributeDetails:
          allOf:
            - $ref: '#/components/schemas/AttributeDetails'
            - description: The mathematical expression and a list of attribute items specified in that expression.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    UpdateDomainResponse:
      type: object
      required:
        - DomainName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications.'
        Matching:
          allOf:
            - $ref: '#/components/schemas/MatchingResponse'
            - description: '<p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p>'
        RuleBasedMatching:
          allOf:
            - $ref: '#/components/schemas/RuleBasedMatchingResponse'
            - description: 'The process of matching duplicate profiles using the rule-Based matching. If <code>RuleBasedMatching</code> = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the <code>RuleBasedMatchingRequest</code>. You can use the <code>ListRuleBasedMatches</code> and <code>GetSimilarProfiles</code> API to return and review the results. Also, if you have configured <code>ExportingConfig</code> in the <code>RuleBasedMatchingRequest</code>, you can download the results from S3.'
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    UpdateProfileResponse:
      type: object
      required:
        - ProfileId
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    string0To255:
      type: string
      minLength: 0
      maxLength: 255
    AddProfileKeyRequest:
      type: object
      required:
        - ProfileId
        - KeyName
        - Values
      title: AddProfileKeyRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: 'A searchable identifier of a customer profile. The predefined keys you can use include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.'
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    Address:
      type: object
      properties:
        Address1:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The first line of a customer address.
        Address2:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The second line of a customer address.
        Address3:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The third line of a customer address.
        Address4:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The fourth line of a customer address.
        City:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The city in which a customer lives.
        County:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The county in which a customer lives.
        State:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The state in which a customer lives.
        Province:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The province in which a customer lives.
        Country:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The country in which a customer lives.
        PostalCode:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The postal code of a customer address.
      description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
    AddressList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
      minItems: 1
      maxItems: 4
    FlowDefinition:
      type: object
      required:
        - FlowName
        - KmsArn
        - SourceFlowConfig
        - Tasks
        - TriggerConfig
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/FlowDescription'
            - description: A description of the flow you want to create.
        FlowName:
          allOf:
            - $ref: '#/components/schemas/FlowName'
            - description: The specified name of the flow. Use underscores (_) or hyphens (-) only. Spaces are not allowed.
        KmsArn:
          allOf:
            - $ref: '#/components/schemas/KmsArn'
            - description: The Amazon Resource Name of the AWS Key Management Service (KMS) key you provide for encryption.
        SourceFlowConfig:
          allOf:
            - $ref: '#/components/schemas/SourceFlowConfig'
            - description: The configuration that controls how Customer Profiles retrieves data from the source.
        Tasks:
          allOf:
            - $ref: '#/components/schemas/Tasks'
            - description: A list of tasks that Customer Profiles performs while transferring the data in the flow run.
        TriggerConfig:
          allOf:
            - $ref: '#/components/schemas/TriggerConfig'
            - description: The trigger settings that determine how and when the flow runs.
      description: 'The configurations that control how Customer Profiles retrieves data from the source, Amazon AppFlow. Customer Profiles uses this information to create an AppFlow flow on behalf of customers.'
    Batches:
      type: array
      items:
        $ref: '#/components/schemas/Batch'
    SourceConnectorType:
      type: string
      enum:
        - Salesforce
        - Marketo
        - Zendesk
        - Servicenow
        - S3
    ConnectorProfileName:
      type: string
      pattern: '[\w/!@#+=.-]+'
      maxLength: 256
    AppflowIntegrationWorkflowAttributes:
      type: object
      required:
        - SourceConnectorType
        - ConnectorProfileName
      properties:
        SourceConnectorType:
          allOf:
            - $ref: '#/components/schemas/SourceConnectorType'
            - description: 'Specifies the source connector type, such as Salesforce, ServiceNow, and Marketo. Indicates source of ingestion.'
        ConnectorProfileName:
          allOf:
            - $ref: '#/components/schemas/ConnectorProfileName'
            - description: The name of the AppFlow connector profile used for ingestion.
        RoleArn:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.
      description: Structure holding all <code>APPFLOW_INTEGRATION</code> specific workflow attributes.
    long:
      type: integer
    AppflowIntegrationWorkflowMetrics:
      type: object
      required:
        - RecordsProcessed
        - StepsCompleted
        - TotalSteps
      properties:
        RecordsProcessed:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: Number of records processed in <code>APPFLOW_INTEGRATION</code> workflow.
        StepsCompleted:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: Total steps completed in <code>APPFLOW_INTEGRATION</code> workflow.
        TotalSteps:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: Total steps in <code>APPFLOW_INTEGRATION</code> workflow.
      description: Workflow specific execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.
    Status:
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - COMPLETE
        - FAILED
        - SPLIT
        - RETRY
        - CANCELLED
    timestamp:
      type: string
      format: date-time
    AppflowIntegrationWorkflowStep:
      type: object
      required:
        - FlowName
        - Status
        - ExecutionMessage
        - RecordsProcessed
        - BatchRecordsStartTime
        - BatchRecordsEndTime
        - CreatedAt
        - LastUpdatedAt
      properties:
        FlowName:
          allOf:
            - $ref: '#/components/schemas/FlowName'
            - description: Name of the flow created during execution of workflow step. <code>APPFLOW_INTEGRATION</code> workflow type creates an appflow flow during workflow step execution on the customers behalf.
        Status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: Workflow step status for <code>APPFLOW_INTEGRATION</code> workflow.
        ExecutionMessage:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Message indicating execution of workflow step for <code>APPFLOW_INTEGRATION</code> workflow.
        RecordsProcessed:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: Total number of records processed during execution of workflow step for <code>APPFLOW_INTEGRATION</code> workflow.
        BatchRecordsStartTime:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Start datetime of records pulled in batch during execution of workflow step for <code>APPFLOW_INTEGRATION</code> workflow.
        BatchRecordsEndTime:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: End datetime of records pulled in batch during execution of workflow step for <code>APPFLOW_INTEGRATION</code> workflow.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Creation timestamp of workflow step for <code>APPFLOW_INTEGRATION</code> workflow.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Last updated timestamp for workflow step for <code>APPFLOW_INTEGRATION</code> workflow.
      description: Workflow step details for <code>APPFLOW_INTEGRATION</code> workflow.
    AttributeDetails:
      type: object
      required:
        - Attributes
        - Expression
      properties:
        Attributes:
          allOf:
            - $ref: '#/components/schemas/AttributeList'
            - description: A list of attribute items specified in the mathematical expression.
        Expression:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'Mathematical expression that is performed on attribute items provided in the attribute list. Each element in the expression should follow the structure of \"{ObjectTypeName.AttributeName}\".'
      description: Mathematical expression and a list of attribute items specified in that expression.
    attributeName:
      type: string
      pattern: '^[a-zA-Z0-9_.-]+$'
      minLength: 1
      maxLength: 64
    AttributeItem:
      type: object
      required:
        - Name
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/attributeName'
            - description: The name of an attribute defined in a profile object type.
      description: The details of a single attribute item specified in the mathematical expression.
    AttributeMatchingModel:
      type: string
      enum:
        - ONE_TO_ONE
        - MANY_TO_MANY
    PhoneNumberList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
      minItems: 1
      maxItems: 4
    EmailList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
      minItems: 1
      maxItems: 3
    Attributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string1To255'
    Consolidation:
      type: object
      required:
        - MatchingAttributesList
      properties:
        MatchingAttributesList:
          allOf:
            - $ref: '#/components/schemas/MatchingAttributesList'
            - description: A list of matching criteria.
      description: 'The matching criteria to be used during the auto-merging process. '
    Double0To1:
      type: number
      format: double
      minimum: 0
      maximum: 1
    Batch:
      type: object
      required:
        - StartTime
        - EndTime
      properties:
        StartTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Start time of batch to split ingestion.
        EndTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: End time of batch to split ingestion.
      description: Batch defines the boundaries for ingestion for each step in <code>APPFLOW_INTEGRATION</code> workflow. <code>APPFLOW_INTEGRATION</code> workflow splits ingestion based on these boundaries.
    BucketName:
      type: string
      pattern: \S+
      minLength: 3
      maxLength: 63
    BucketPrefix:
      type: string
      pattern: .*
      maxLength: 512
    ListCalculatedAttributeDefinitionItem:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The threshold for the calculated attribute.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The threshold for the calculated attribute.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the calculated attribute definition was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: The details of a single calculated attribute definition.
    CalculatedAttributeDefinitionsList:
      type: array
      items:
        $ref: '#/components/schemas/ListCalculatedAttributeDefinitionItem'
    ListCalculatedAttributeForProfileItem:
      type: object
      properties:
        CalculatedAttributeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The unique name of the calculated attribute.
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        IsDataPartial:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'Indicates whether the calculated attribute’s value is based on partial data. If data is partial, it is set to true.'
        Value:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The value of the calculated attribute.
      description: The details of a single calculated attribute for a profile.
    CalculatedAttributesForProfileList:
      type: array
      items:
        $ref: '#/components/schemas/ListCalculatedAttributeForProfileItem'
    Conditions:
      type: object
      properties:
        Range:
          allOf:
            - $ref: '#/components/schemas/Range'
            - description: The relative time period over which data is included in the aggregation.
        ObjectCount:
          allOf:
            - $ref: '#/components/schemas/ObjectCount'
            - description: The number of profile objects used for the calculated attribute.
        Threshold:
          allOf:
            - $ref: '#/components/schemas/Threshold'
            - description: The threshold for the calculated attribute.
      description: 'The conditions including range, object count, and threshold for the calculated attribute.'
    MarketoConnectorOperator:
      type: string
      enum:
        - PROJECTION
        - LESS_THAN
        - GREATER_THAN
        - BETWEEN
        - ADDITION
        - MULTIPLICATION
        - DIVISION
        - SUBTRACTION
        - MASK_ALL
        - MASK_FIRST_N
        - MASK_LAST_N
        - VALIDATE_NON_NULL
        - VALIDATE_NON_ZERO
        - VALIDATE_NON_NEGATIVE
        - VALIDATE_NUMERIC
        - NO_OP
    S3ConnectorOperator:
      type: string
      enum:
        - PROJECTION
        - LESS_THAN
        - GREATER_THAN
        - BETWEEN
        - LESS_THAN_OR_EQUAL_TO
        - GREATER_THAN_OR_EQUAL_TO
        - EQUAL_TO
        - NOT_EQUAL_TO
        - ADDITION
        - MULTIPLICATION
        - DIVISION
        - SUBTRACTION
        - MASK_ALL
        - MASK_FIRST_N
        - MASK_LAST_N
        - VALIDATE_NON_NULL
        - VALIDATE_NON_ZERO
        - VALIDATE_NON_NEGATIVE
        - VALIDATE_NUMERIC
        - NO_OP
    SalesforceConnectorOperator:
      type: string
      enum:
        - PROJECTION
        - LESS_THAN
        - CONTAINS
        - GREATER_THAN
        - BETWEEN
        - LESS_THAN_OR_EQUAL_TO
        - GREATER_THAN_OR_EQUAL_TO
        - EQUAL_TO
        - NOT_EQUAL_TO
        - ADDITION
        - MULTIPLICATION
        - DIVISION
        - SUBTRACTION
        - MASK_ALL
        - MASK_FIRST_N
        - MASK_LAST_N
        - VALIDATE_NON_NULL
        - VALIDATE_NON_ZERO
        - VALIDATE_NON_NEGATIVE
        - VALIDATE_NUMERIC
        - NO_OP
    ServiceNowConnectorOperator:
      type: string
      enum:
        - PROJECTION
        - CONTAINS
        - LESS_THAN
        - GREATER_THAN
        - BETWEEN
        - LESS_THAN_OR_EQUAL_TO
        - GREATER_THAN_OR_EQUAL_TO
        - EQUAL_TO
        - NOT_EQUAL_TO
        - ADDITION
        - MULTIPLICATION
        - DIVISION
        - SUBTRACTION
        - MASK_ALL
        - MASK_FIRST_N
        - MASK_LAST_N
        - VALIDATE_NON_NULL
        - VALIDATE_NON_ZERO
        - VALIDATE_NON_NEGATIVE
        - VALIDATE_NUMERIC
        - NO_OP
    ZendeskConnectorOperator:
      type: string
      enum:
        - PROJECTION
        - GREATER_THAN
        - ADDITION
        - MULTIPLICATION
        - DIVISION
        - SUBTRACTION
        - MASK_ALL
        - MASK_FIRST_N
        - MASK_LAST_N
        - VALIDATE_NON_NULL
        - VALIDATE_NON_ZERO
        - VALIDATE_NON_NEGATIVE
        - VALIDATE_NUMERIC
        - NO_OP
    ConnectorOperator:
      type: object
      properties:
        Marketo:
          allOf:
            - $ref: '#/components/schemas/MarketoConnectorOperator'
            - description: The operation to be performed on the provided Marketo source fields.
        S3:
          allOf:
            - $ref: '#/components/schemas/S3ConnectorOperator'
            - description: The operation to be performed on the provided Amazon S3 source fields.
        Salesforce:
          allOf:
            - $ref: '#/components/schemas/SalesforceConnectorOperator'
            - description: The operation to be performed on the provided Salesforce source fields.
        ServiceNow:
          allOf:
            - $ref: '#/components/schemas/ServiceNowConnectorOperator'
            - description: The operation to be performed on the provided ServiceNow source fields.
        Zendesk:
          allOf:
            - $ref: '#/components/schemas/ZendeskConnectorOperator'
            - description: The operation to be performed on the provided Zendesk source fields.
      description: The operation to be performed on the provided source fields.
    displayName:
      type: string
      pattern: '^[a-zA-Z_][a-zA-Z_0-9-\s]*$'
      minLength: 1
      maxLength: 255
    text:
      type: string
      minLength: 1
      maxLength: 1000
    Statistic:
      type: string
      enum:
        - FIRST_OCCURRENCE
        - LAST_OCCURRENCE
        - COUNT
        - SUM
        - MINIMUM
        - MAXIMUM
        - AVERAGE
        - MAX_OCCURRENCE
    TagMap:
      type: object
      minProperties: 1
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    CreateCalculatedAttributeDefinitionRequest:
      type: object
      required:
        - AttributeDetails
        - Statistic
      title: CreateCalculatedAttributeDefinitionRequest
      properties:
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the calculated attribute.
        AttributeDetails:
          allOf:
            - $ref: '#/components/schemas/AttributeDetails'
            - description: Mathematical expression and a list of attribute items specified in that expression.
        Conditions:
          allOf:
            - $ref: '#/components/schemas/Conditions'
            - description: 'The conditions including range, object count, and threshold for the calculated attribute.'
        Statistic:
          allOf:
            - $ref: '#/components/schemas/Statistic'
            - description: The aggregation operation to perform for the calculated attribute.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    expirationDaysInteger:
      type: integer
      minimum: 1
      maximum: 1098
    encryptionKey:
      type: string
      minLength: 0
      maxLength: 255
    sqsQueueUrl:
      type: string
      minLength: 0
      maxLength: 255
    MatchingRequest:
      type: object
      required:
        - Enabled
      properties:
        Enabled:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: The flag that enables the matching process of duplicate profiles.
        JobSchedule:
          allOf:
            - $ref: '#/components/schemas/JobSchedule'
            - description: The day and time when do you want to start the Identity Resolution Job every week.
        AutoMerging:
          allOf:
            - $ref: '#/components/schemas/AutoMerging'
            - description: Configuration information about the auto-merging process.
        ExportingConfig:
          allOf:
            - $ref: '#/components/schemas/ExportingConfig'
            - description: 'Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.'
      description: The flag that enables the matching process of duplicate profiles.
    RuleBasedMatchingRequest:
      type: object
      required:
        - Enabled
      properties:
        Enabled:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: The flag that enables the rule-based matching process of duplicate profiles.
        MatchingRules:
          allOf:
            - $ref: '#/components/schemas/MatchingRules'
            - description: Configures how the rule-based matching process should match profiles. You can have up to 15 <code>MatchingRule</code> in the <code>MatchingRules</code>.
        MaxAllowedRuleLevelForMerging:
          allOf:
            - $ref: '#/components/schemas/MaxAllowedRuleLevelForMerging'
            - description: ' <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html">MatchingRule</a> '
        MaxAllowedRuleLevelForMatching:
          allOf:
            - $ref: '#/components/schemas/MaxAllowedRuleLevelForMatching'
            - description: Indicates the maximum allowed rule level.
        AttributeTypesSelector:
          allOf:
            - $ref: '#/components/schemas/AttributeTypesSelector'
            - description: Configures information about the <code>AttributeTypesSelector</code> where the rule-based identity resolution uses to match profiles.
        ConflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
        ExportingConfig:
          $ref: '#/components/schemas/ExportingConfig'
      description: The request to enable the rule-based matching.
    CreateDomainRequest:
      type: object
      required:
        - DefaultExpirationDays
      title: CreateDomainRequest
      properties:
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
        Matching:
          allOf:
            - $ref: '#/components/schemas/MatchingRequest'
            - description: '<p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p>'
        RuleBasedMatching:
          allOf:
            - $ref: '#/components/schemas/RuleBasedMatchingRequest'
            - description: 'The process of matching duplicate profiles using the Rule-Based matching. If <code>RuleBasedMatching</code> = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the <code>RuleBasedMatchingRequest</code>. You can use the <code>ListRuleBasedMatches</code> and <code>GetSimilarProfiles</code> API to return and review the results. Also, if you have configured <code>ExportingConfig</code> in the <code>RuleBasedMatchingRequest</code>, you can download the results from S3.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    MatchingResponse:
      type: object
      properties:
        Enabled:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: The flag that enables the matching process of duplicate profiles.
        JobSchedule:
          allOf:
            - $ref: '#/components/schemas/JobSchedule'
            - description: The day and time when do you want to start the Identity Resolution Job every week.
        AutoMerging:
          allOf:
            - $ref: '#/components/schemas/AutoMerging'
            - description: Configuration information about the auto-merging process.
        ExportingConfig:
          allOf:
            - $ref: '#/components/schemas/ExportingConfig'
            - description: 'Configuration information for exporting Identity Resolution results, for example, to an S3 bucket.'
      description: The flag that enables the matching process of duplicate profiles.
    RuleBasedMatchingResponse:
      type: object
      properties:
        Enabled:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: The flag that enables the rule-based matching process of duplicate profiles.
        MatchingRules:
          allOf:
            - $ref: '#/components/schemas/MatchingRules'
            - description: Configures how the rule-based matching process should match profiles. You can have up to 15 <code>MatchingRule</code> in the <code>MatchingRules</code>.
        Status:
          allOf:
            - $ref: '#/components/schemas/RuleBasedMatchingStatus'
            - description: '<p>PENDING</p> <ul> <li> <p>The first status after configuration a rule-based matching rule. If it is an existing domain, the rule-based Identity Resolution waits one hour before creating the matching rule. If it is a new domain, the system will skip the <code>PENDING</code> stage.</p> </li> </ul> <p>IN_PROGRESS</p> <ul> <li> <p>The system is creating the rule-based matching rule. Under this status, the system is evaluating the existing data and you can no longer change the Rule-based matching configuration.</p> </li> </ul> <p>ACTIVE</p> <ul> <li> <p>The rule is ready to use. You can change the rule a day after the status is in <code>ACTIVE</code>.</p> </li> </ul>'
        MaxAllowedRuleLevelForMerging:
          allOf:
            - $ref: '#/components/schemas/MaxAllowedRuleLevelForMerging'
            - description: ' <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_MatchingRule.html">MatchingRule</a> '
        MaxAllowedRuleLevelForMatching:
          allOf:
            - $ref: '#/components/schemas/MaxAllowedRuleLevelForMatching'
            - description: Indicates the maximum allowed rule level.
        AttributeTypesSelector:
          allOf:
            - $ref: '#/components/schemas/AttributeTypesSelector'
            - description: Configures information about the <code>AttributeTypesSelector</code> where the rule-based identity resolution uses to match profiles.
        ConflictResolution:
          $ref: '#/components/schemas/ConflictResolution'
        ExportingConfig:
          $ref: '#/components/schemas/ExportingConfig'
      description: The response of the Rule-based matching request.
    CreateEventStreamRequest:
      type: object
      required:
        - Uri
      title: CreateEventStreamRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name'
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    WorkflowType:
      type: string
      enum:
        - APPFLOW_INTEGRATION
    IntegrationConfig:
      type: object
      properties:
        AppflowIntegration:
          allOf:
            - $ref: '#/components/schemas/AppflowIntegration'
            - description: Configuration data for <code>APPFLOW_INTEGRATION</code> workflow type.
      description: Configuration data for integration workflow.
    RoleArn:
      type: string
      pattern: 'arn:aws:iam:.*:[0-9]+:.*'
      maxLength: 512
    CreateIntegrationWorkflowRequest:
      type: object
      required:
        - WorkflowType
        - IntegrationConfig
        - ObjectTypeName
        - RoleArn
      title: CreateIntegrationWorkflowRequest
      properties:
        WorkflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        IntegrationConfig:
          allOf:
            - $ref: '#/components/schemas/IntegrationConfig'
            - description: Configuration data for integration workflow.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        RoleArn:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The Amazon Resource Name (ARN) of the IAM role. Customer Profiles assumes this role to create resources on your behalf as part of workflow execution.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    string1To1000:
      type: string
      minLength: 1
      maxLength: 1000
    PartyType:
      type: string
      deprecated: true
      enum:
        - INDIVIDUAL
        - BUSINESS
        - OTHER
    Gender:
      type: string
      deprecated: true
      enum:
        - MALE
        - FEMALE
        - UNSPECIFIED
    CreateProfileRequest:
      type: object
      title: CreateProfileRequest
      properties:
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique account number that you have given to the customer.
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/string1To1000'
            - description: Any additional information relevant to the customer’s profile.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/PartyType'
            - description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The name of the customer’s business.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s first name.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s middle name.
        LastName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s last name.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer’s birth date. '
        Gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
            - description: 'The gender with which the customer identifies. '
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer’s phone number, which has not been specified as a mobile, home, or business number. '
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s business phone number.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer’s email address, which has not been specified as a personal or business address. '
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s business email address.
        Address:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s shipping address.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s mailing address.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s billing address.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/Attributes'
            - description: A key value pair of attributes of a customer profile.
        PartyTypeString:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: An alternative to <code>PartyType</code> which accepts any string as input.
        GenderString:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: An alternative to <code>Gender</code> which accepts any string as input.
    DataPullMode:
      type: string
      enum:
        - Incremental
        - Complete
    Date:
      type: string
      format: date-time
    DatetimeTypeFieldName:
      type: string
      pattern: .*
      maxLength: 256
    DeleteCalculatedAttributeDefinitionRequest:
      type: object
      title: DeleteCalculatedAttributeDefinitionRequest
      properties: {}
    DeleteDomainRequest:
      type: object
      title: DeleteDomainRequest
      properties: {}
    message:
      type: string
    DeleteEventStreamRequest:
      type: object
      title: DeleteEventStreamRequest
      properties: {}
    DeleteIntegrationRequest:
      type: object
      required:
        - Uri
      title: DeleteIntegrationRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
    DeleteProfileKeyRequest:
      type: object
      required:
        - ProfileId
        - KeyName
        - Values
      title: DeleteProfileKeyRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
    DeleteProfileObjectRequest:
      type: object
      required:
        - ProfileId
        - ProfileObjectUniqueKey
        - ObjectTypeName
      title: DeleteProfileObjectRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        ProfileObjectUniqueKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifier of the profile object generated by the service.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
    DeleteProfileObjectTypeRequest:
      type: object
      title: DeleteProfileObjectTypeRequest
      properties: {}
    DeleteProfileRequest:
      type: object
      required:
        - ProfileId
      title: DeleteProfileRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
    DeleteWorkflowRequest:
      type: object
      title: DeleteWorkflowRequest
      properties: {}
    DestinationField:
      type: string
      pattern: .*
      maxLength: 256
    EventStreamDestinationStatus:
      type: string
      enum:
        - HEALTHY
        - UNHEALTHY
    DestinationSummary:
      type: object
      required:
        - Uri
        - Status
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.'
        Status:
          allOf:
            - $ref: '#/components/schemas/EventStreamDestinationStatus'
            - description: The status of enabling the Kinesis stream as a destination for export.
        UnhealthySince:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp when the status last changed to <code>UNHEALHY</code>.
      description: Summary information about the Kinesis data stream
    ListDomainItem:
      type: object
      required:
        - DomainName
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: An object in a list that represents a domain.
    DomainList:
      type: array
      items:
        $ref: '#/components/schemas/ListDomainItem'
    DomainStats:
      type: object
      properties:
        ProfileCount:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The total number of profiles currently in the domain.
        MeteringProfileCount:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: 'The number of profiles that you are currently paying for in the domain. If you have more than 100 objects associated with a single profile, that profile counts as two profiles. If you have more than 200 objects, that profile counts as three, and so on.'
        ObjectCount:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The total number of objects in domain.
        TotalSize:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: 'The total size, in bytes, of all objects in the domain.'
      description: Usage-specific statistics about the domain.
    Double:
      type: number
      format: double
    EventStreamDestinationDetails:
      type: object
      required:
        - Uri
        - Status
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The StreamARN of the destination to deliver profile events to. For example, arn:aws:kinesis:region:account-id:stream/stream-name.'
        Status:
          allOf:
            - $ref: '#/components/schemas/EventStreamDestinationStatus'
            - description: The status of enabling the Kinesis stream as a destination for export.
        UnhealthySince:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp when the status last changed to <code>UNHEALHY</code>.
        Message:
          allOf:
            - $ref: '#/components/schemas/string1To1000'
            - description: The human-readable string that corresponds to the error or success while enabling the streaming destination.
      description: Details of the destination being used for the EventStream.
    EventStreamState:
      type: string
      enum:
        - RUNNING
        - STOPPED
    EventStreamSummary:
      type: object
      required:
        - DomainName
        - EventStreamName
        - EventStreamArn
        - State
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        EventStreamName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The name of the event stream.
        EventStreamArn:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique identifier for the event stream.
        State:
          allOf:
            - $ref: '#/components/schemas/EventStreamState'
            - description: The operational state of destination stream for export.
        StoppedSince:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp when the <code>State</code> changed to <code>STOPPED</code>.
        DestinationSummary:
          allOf:
            - $ref: '#/components/schemas/DestinationSummary'
            - description: Summary information about the Kinesis data stream.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: An instance of EventStream in a list of EventStreams.
    EventStreamSummaryList:
      type: array
      items:
        $ref: '#/components/schemas/EventStreamSummary'
    S3ExportingConfig:
      type: object
      required:
        - S3BucketName
      properties:
        S3BucketName:
          allOf:
            - $ref: '#/components/schemas/s3BucketName'
            - description: The name of the S3 bucket where Identity Resolution Jobs write result files.
        S3KeyName:
          allOf:
            - $ref: '#/components/schemas/s3KeyNameCustomerOutputConfig'
            - description: The S3 key name of the location where Identity Resolution Jobs write result files.
      description: Configuration information about the S3 bucket where Identity Resolution Jobs write result files.
    S3ExportingLocation:
      type: object
      properties:
        S3BucketName:
          allOf:
            - $ref: '#/components/schemas/s3BucketName'
            - description: The name of the S3 bucket name where Identity Resolution Jobs write result files.
        S3KeyName:
          allOf:
            - $ref: '#/components/schemas/s3KeyName'
            - description: The S3 key name of the location where Identity Resolution Jobs write result files.
      description: The S3 location where Identity Resolution Jobs write result files.
    ExportingLocation:
      type: object
      properties:
        S3Exporting:
          allOf:
            - $ref: '#/components/schemas/S3ExportingLocation'
            - description: Information about the S3 location where Identity Resolution Jobs write result files.
      description: The S3 location where Identity Resolution Jobs write result files.
    FieldContentType:
      type: string
      enum:
        - STRING
        - NUMBER
        - PHONE_NUMBER
        - EMAIL_ADDRESS
        - NAME
    FieldMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ObjectTypeField'
    FieldNameList:
      type: array
      items:
        $ref: '#/components/schemas/name'
    FieldSourceProfileIds:
      type: object
      properties:
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: 'A unique identifier for the account number field to be merged. '
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the additional information field to be merged.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the party type field to be merged.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the business name field to be merged.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the first name field to be merged.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the middle name field to be merged.
        LastName:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the last name field to be merged.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the birthdate field to be merged.
        Gender:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the gender field to be merged.
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the phone number field to be merged.
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the mobile phone number field to be merged.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the home phone number field to be merged.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the business phone number field to be merged.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the email address field to be merged.
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the personal email address field to be merged.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the party type field to be merged.
        Address:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the party type field to be merged.
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the shipping address field to be merged.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the mailing address field to be merged.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: A unique identifier for the billing type field to be merged.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/AttributeSourceIdMap'
            - description: A unique identifier for the attributes field to be merged.
      description: 'A duplicate customer profile that is to be merged into a main profile. '
    FoundByKeyValue:
      type: object
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A searchable identifier of a customer profile.
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
      description: 'A data type pair that consists of a <code>KeyName</code> and <code>Values</code> list that were used to find a profile returned in response to a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request. '
    GetAutoMergingPreviewRequest:
      type: object
      required:
        - Consolidation
        - ConflictResolution
      title: GetAutoMergingPreviewRequest
      properties:
        Consolidation:
          allOf:
            - $ref: '#/components/schemas/Consolidation'
            - description: A list of matching attributes that represent matching criteria.
        ConflictResolution:
          allOf:
            - $ref: '#/components/schemas/ConflictResolution'
            - description: How the auto-merging process should resolve conflicts between different profiles.
        MinAllowedConfidenceScoreForMerging:
          allOf:
            - $ref: '#/components/schemas/Double0To1'
            - description: Minimum confidence score required for profiles within a matching group to be merged during the auto-merge process.
    GetCalculatedAttributeDefinitionRequest:
      type: object
      title: GetCalculatedAttributeDefinitionRequest
      properties: {}
    GetCalculatedAttributeForProfileRequest:
      type: object
      title: GetCalculatedAttributeForProfileRequest
      properties: {}
    GetDomainRequest:
      type: object
      title: GetDomainRequest
      properties: {}
    GetEventStreamRequest:
      type: object
      title: GetEventStreamRequest
      properties: {}
    GetIdentityResolutionJobRequest:
      type: object
      title: GetIdentityResolutionJobRequest
      properties: {}
    IdentityResolutionJobStatus:
      type: string
      enum:
        - PENDING
        - PREPROCESSING
        - FIND_MATCHING
        - MERGING
        - COMPLETED
        - PARTIAL_SUCCESS
        - FAILED
    stringTo2048:
      type: string
      pattern: .*
      maxLength: 2048
    JobStats:
      type: object
      properties:
        NumberOfProfilesReviewed:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The number of profiles reviewed.
        NumberOfMatchesFound:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The number of matches found.
        NumberOfMergesDone:
          allOf:
            - $ref: '#/components/schemas/long'
            - description: The number of merges completed.
      description: Statistics about the Identity Resolution Job.
    GetIntegrationRequest:
      type: object
      required:
        - Uri
      title: GetIntegrationRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
    ObjectTypeNames:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/typeName'
    token:
      type: string
      minLength: 1
      maxLength: 1024
    maxSize100:
      type: integer
      minimum: 1
      maximum: 100
    GetMatchesRequest:
      type: object
      title: GetMatchesRequest
      properties: {}
    matchesNumber:
      type: integer
      minimum: 0
    MatchesList:
      type: array
      items:
        $ref: '#/components/schemas/MatchItem'
    GetProfileObjectTypeRequest:
      type: object
      title: GetProfileObjectTypeRequest
      properties: {}
    boolean:
      type: boolean
    KeyMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ObjectTypeKeyList'
    GetProfileObjectTypeTemplateRequest:
      type: object
      title: GetProfileObjectTypeTemplateRequest
      properties: {}
    MatchType:
      type: string
      enum:
        - RULE_BASED_MATCHING
        - ML_BASED_MATCHING
    GetSimilarProfilesRequest:
      type: object
      required:
        - MatchType
        - SearchKey
        - SearchValue
      title: GetSimilarProfilesRequest
      properties:
        MatchType:
          allOf:
            - $ref: '#/components/schemas/MatchType'
            - description: Specify the type of matching to get similar profiles for.
        SearchKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The string indicating the search key to be used.
        SearchValue:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The string based on <code>SearchKey</code> to be searched for similar profiles.
    ProfileIdList:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
    RuleLevel:
      type: integer
      minimum: 1
      maximum: 15
    GetWorkflowRequest:
      type: object
      title: GetWorkflowRequest
      properties: {}
    WorkflowAttributes:
      type: object
      properties:
        AppflowIntegration:
          allOf:
            - $ref: '#/components/schemas/AppflowIntegrationWorkflowAttributes'
            - description: Workflow attributes specific to <code>APPFLOW_INTEGRATION</code> workflow.
      description: Structure to hold workflow attributes.
    WorkflowMetrics:
      type: object
      properties:
        AppflowIntegration:
          allOf:
            - $ref: '#/components/schemas/AppflowIntegrationWorkflowMetrics'
            - description: Workflow execution metrics for <code>APPFLOW_INTEGRATION</code> workflow.
      description: Generic object containing workflow execution metrics.
    GetWorkflowStepsRequest:
      type: object
      title: GetWorkflowStepsRequest
      properties: {}
    WorkflowStepsList:
      type: array
      items:
        $ref: '#/components/schemas/WorkflowStepItem'
    IdentityResolutionJob:
      type: object
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        JobId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of the Identity Resolution Job.
        Status:
          allOf:
            - $ref: '#/components/schemas/IdentityResolutionJobStatus'
            - description: '<p>The status of the Identity Resolution Job.</p> <ul> <li> <p> <code>PENDING</code>: The Identity Resolution Job is scheduled but has not started yet. If you turn off the Identity Resolution feature in your domain, jobs in the <code>PENDING</code> state are deleted.</p> </li> <li> <p> <code>PREPROCESSING</code>: The Identity Resolution Job is loading your data.</p> </li> <li> <p> <code>FIND_MATCHING</code>: The Identity Resolution Job is using the machine learning model to identify profiles that belong to the same matching group.</p> </li> <li> <p> <code>MERGING</code>: The Identity Resolution Job is merging duplicate profiles.</p> </li> <li> <p> <code>COMPLETED</code>: The Identity Resolution Job completed successfully.</p> </li> <li> <p> <code>PARTIAL_SUCCESS</code>: There''s a system error and not all of the data is merged. The Identity Resolution Job writes a message indicating the source of the problem.</p> </li> <li> <p> <code>FAILED</code>: The Identity Resolution Job did not merge any data. It writes a message indicating the source of the problem.</p> </li> </ul>'
        JobStartTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the job was started or will be started.
        JobEndTime:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the job was completed.
        JobStats:
          allOf:
            - $ref: '#/components/schemas/JobStats'
            - description: Statistics about an Identity Resolution Job.
        ExportingLocation:
          allOf:
            - $ref: '#/components/schemas/ExportingLocation'
            - description: The S3 location where the Identity Resolution Job writes result files.
        Message:
          allOf:
            - $ref: '#/components/schemas/stringTo2048'
            - description: The error messages that are generated when the Identity Resolution Job runs.
      description: Information about the Identity Resolution Job.
    IdentityResolutionJobsList:
      type: array
      items:
        $ref: '#/components/schemas/IdentityResolutionJob'
    IncrementalPullConfig:
      type: object
      properties:
        DatetimeTypeFieldName:
          allOf:
            - $ref: '#/components/schemas/DatetimeTypeFieldName'
            - description: A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
      description: Specifies the configuration used when importing incremental records from the source.
    ListIntegrationItem:
      type: object
      required:
        - DomainName
        - Uri
        - CreatedAt
        - LastUpdatedAt
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The unique name of the domain.
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
        ObjectTypeNames:
          allOf:
            - $ref: '#/components/schemas/ObjectTypeNames'
            - description: 'A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.'
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Unique identifier for the workflow.
        IsUnstructured:
          allOf:
            - $ref: '#/components/schemas/optionalBoolean'
            - description: 'Boolean that shows if the Flow that''s associated with the Integration is created in Amazon Appflow, or with ObjectTypeName equals _unstructured via API/CLI in flowDefinition.'
      description: An integration in list of integrations.
    IntegrationList:
      type: array
      items:
        $ref: '#/components/schemas/ListIntegrationItem'
    JobScheduleDayOfTheWeek:
      type: string
      enum:
        - SUNDAY
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
    JobScheduleTime:
      type: string
      pattern: '^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'
      minLength: 3
      maxLength: 5
    ListAccountIntegrationsRequest:
      type: object
      required:
        - Uri
      title: ListAccountIntegrationsRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
    ListCalculatedAttributeDefinitionsRequest:
      type: object
      title: ListCalculatedAttributeDefinitionsRequest
      properties: {}
    ListCalculatedAttributesForProfileRequest:
      type: object
      title: ListCalculatedAttributesForProfileRequest
      properties: {}
    ListDomainsRequest:
      type: object
      title: ListDomainsRequest
      properties: {}
    ListEventStreamsRequest:
      type: object
      title: ListEventStreamsRequest
      properties: {}
    ListIdentityResolutionJobsRequest:
      type: object
      title: ListIdentityResolutionJobsRequest
      properties: {}
    ListIntegrationsRequest:
      type: object
      title: ListIntegrationsRequest
      properties: {}
    ListProfileObjectTypeItem:
      type: object
      required:
        - ObjectTypeName
        - Description
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: Description of the profile object type.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was created.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: The timestamp of when the domain was most recently edited.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
      description: A ProfileObjectType instance.
    ListProfileObjectTypeTemplateItem:
      type: object
      properties:
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: A unique identifier for the object template.
        SourceName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The name of the source of the object template.
        SourceObject:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: The source of the object template.
      description: A ProfileObjectTypeTemplate in a list of ProfileObjectTypeTemplates.
    ListProfileObjectTypeTemplatesRequest:
      type: object
      title: ListProfileObjectTypeTemplatesRequest
      properties: {}
    ProfileObjectTypeTemplateList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectTypeTemplateItem'
    ListProfileObjectTypesRequest:
      type: object
      title: ListProfileObjectTypesRequest
      properties: {}
    ProfileObjectTypeList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectTypeItem'
    stringifiedJson:
      type: string
      minLength: 1
      maxLength: 256000
    ListProfileObjectsItem:
      type: object
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: 'Specifies the kind of object being added to a profile, such as "Salesforce-Account."'
        ProfileObjectUniqueKey:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifier of the ProfileObject generated by the service.
        Object:
          allOf:
            - $ref: '#/components/schemas/stringifiedJson'
            - description: A JSON representation of a ProfileObject that belongs to a profile.
      description: A ProfileObject in a list of ProfileObjects.
    ObjectFilter:
      type: object
      required:
        - KeyName
        - Values
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: 'A searchable identifier of a profile object. The predefined keys you can use to search for <code>_asset</code> include: <code>_assetId</code>, <code>_assetName</code>, and <code>_serialNumber</code>. The predefined keys you can use to search for <code>_case</code> include: <code>_caseId</code>. The predefined keys you can use to search for <code>_order</code> include: <code>_orderId</code>.'
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
      description: The filter applied to <code>ListProfileObjects</code> response to include profile objects with the specified index values.
    ListProfileObjectsRequest:
      type: object
      required:
        - ObjectTypeName
        - ProfileId
      title: ListProfileObjectsRequest
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        ObjectFilter:
          allOf:
            - $ref: '#/components/schemas/ObjectFilter'
            - description: Applies a filter to the response to include profile objects with the specified index values.
    ProfileObjectList:
      type: array
      items:
        $ref: '#/components/schemas/ListProfileObjectsItem'
    ListRuleBasedMatchesRequest:
      type: object
      title: ListRuleBasedMatchesRequest
      properties: {}
    MatchIdList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
    TagArn:
      type: string
      pattern: '^arn:[a-z0-9]{1,10}:profile'
      maxLength: 256
    ListTagsForResourceRequest:
      type: object
      title: ListTagsForResourceRequest
      properties: {}
    ListWorkflowsItem:
      type: object
      required:
        - WorkflowType
        - WorkflowId
        - Status
        - StatusDescription
        - CreatedAt
        - LastUpdatedAt
      properties:
        WorkflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        WorkflowId:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Unique identifier for the workflow.
        Status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: Status of workflow execution.
        StatusDescription:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: Description for workflow execution status.
        CreatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Creation timestamp for workflow.
        LastUpdatedAt:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Last updated timestamp for workflow.
      description: A workflow in list of workflows.
    ListWorkflowsRequest:
      type: object
      title: ListWorkflowsRequest
      properties:
        WorkflowType:
          allOf:
            - $ref: '#/components/schemas/WorkflowType'
            - description: The type of workflow. The only supported value is APPFLOW_INTEGRATION.
        Status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: Status of workflow execution.
        QueryStartDate:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Retrieve workflows started after timestamp.
        QueryEndDate:
          allOf:
            - $ref: '#/components/schemas/timestamp'
            - description: Retrieve workflows ended after timestamp.
    WorkflowList:
      type: array
      items:
        $ref: '#/components/schemas/ListWorkflowsItem'
    Object:
      type: string
      pattern: \S+
      maxLength: 512
    MarketoSourceProperties:
      type: object
      required:
        - Object
      properties:
        Object:
          allOf:
            - $ref: '#/components/schemas/Object'
            - description: The object specified in the Marketo flow source.
      description: The properties that are applied when Marketo is being used as a source.
    MatchItem:
      type: object
      properties:
        MatchId:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The unique identifiers for this group of profiles that match.
        ProfileIds:
          allOf:
            - $ref: '#/components/schemas/ProfileIdList'
            - description: A list of identifiers for profiles that match.
        ConfidenceScore:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: 'A number between 0 and 1, where a higher score means higher similarity. Examining match confidence scores lets you distinguish between groups of similar records in which the system is highly confident (which you may decide to merge), groups of similar records about which the system is uncertain (which you may decide to have reviewed by a human), and groups of similar records that the system deems to be unlikely (which you may decide to reject). Given confidence scores vary as per the data input, it should not be used an absolute measure of matching quality.'
      description: The Match group object.
    MatchingAttributes:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
      minItems: 1
      maxItems: 20
    MatchingRuleAttributeList:
      type: array
      items:
        $ref: '#/components/schemas/string1To255'
      minItems: 1
      maxItems: 15
    MatchingRule:
      type: object
      required:
        - Rule
      properties:
        Rule:
          allOf:
            - $ref: '#/components/schemas/MatchingRuleAttributeList'
            - description: A single rule level of the <code>MatchRules</code>. Configures how the rule-based matching process should match profiles.
      description: '<p>Specifies how does the rule-based matching process should match profiles. You can choose from the following attributes to build the matching Rule:</p> <ul> <li> <p>AccountNumber</p> </li> <li> <p>Address.Address</p> </li> <li> <p>Address.City</p> </li> <li> <p>Address.Country</p> </li> <li> <p>Address.County</p> </li> <li> <p>Address.PostalCode</p> </li> <li> <p>Address.State</p> </li> <li> <p>Address.Province</p> </li> <li> <p>BirthDate</p> </li> <li> <p>BusinessName</p> </li> <li> <p>EmailAddress</p> </li> <li> <p>FirstName</p> </li> <li> <p>Gender</p> </li> <li> <p>LastName</p> </li> <li> <p>MiddleName</p> </li> <li> <p>PhoneNumber</p> </li> <li> <p>Any customized profile attributes that start with the <code>Attributes</code> </p> </li> </ul>'
    ProfileIdToBeMergedList:
      type: array
      items:
        $ref: '#/components/schemas/uuid'
      minItems: 1
      maxItems: 20
    MergeProfilesRequest:
      type: object
      required:
        - MainProfileId
        - ProfileIdsToBeMerged
      title: MergeProfilesRequest
      properties:
        MainProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The identifier of the profile to be taken.
        ProfileIdsToBeMerged:
          allOf:
            - $ref: '#/components/schemas/ProfileIdToBeMergedList'
            - description: The identifier of the profile to be merged into MainProfileId.
        FieldSourceProfileIds:
          allOf:
            - $ref: '#/components/schemas/FieldSourceProfileIds'
            - description: 'The identifiers of the fields in the profile that has the information you want to apply to the merge. For example, say you want to merge EmailAddress from Profile1 into MainProfile. This would be the identifier of the EmailAddress field in Profile1. '
    StandardIdentifierList:
      type: array
      items:
        $ref: '#/components/schemas/StandardIdentifier'
    ObjectTypeKey:
      type: object
      properties:
        StandardIdentifiers:
          allOf:
            - $ref: '#/components/schemas/StandardIdentifierList'
            - description: 'The types of keys that a ProfileObject can have. Each ProfileObject can have only 1 UNIQUE key but multiple PROFILE keys. PROFILE, ASSET, CASE, or ORDER means that this key can be used to tie an object to a PROFILE, ASSET, CASE, or ORDER respectively. UNIQUE means that it can be used to uniquely identify an object. If a key a is marked as SECONDARY, it will be used to search for profiles after all other PROFILE keys have been searched. A LOOKUP_ONLY key is only used to match a profile but is not persisted to be used for searching of the profile. A NEW_ONLY key is only used if the profile does not already exist before the object is ingested, otherwise it is only used for matching objects to profiles.'
        FieldNames:
          allOf:
            - $ref: '#/components/schemas/FieldNameList'
            - description: The reference for the key name of the fields map.
      description: An object that defines the Key element of a ProfileObject. A Key is a special element that can be used to search for a customer profile.
    Operator:
      type: string
      enum:
        - EQUAL_TO
        - GREATER_THAN
        - LESS_THAN
        - NOT_EQUAL_TO
    OperatorPropertiesKeys:
      type: string
      enum:
        - VALUE
        - VALUES
        - DATA_TYPE
        - UPPER_BOUND
        - LOWER_BOUND
        - SOURCE_DATA_TYPE
        - DESTINATION_DATA_TYPE
        - VALIDATION_ACTION
        - MASK_VALUE
        - MASK_LENGTH
        - TRUNCATE_LENGTH
        - MATH_OPERATION_FIELDS_ORDER
        - CONCAT_FORMAT
        - SUBFIELD_CATEGORY_MAP
    foundByList:
      type: array
      items:
        $ref: '#/components/schemas/FoundByKeyValue'
      minItems: 1
      maxItems: 5
    Profile:
      type: object
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: A unique account number that you have given to the customer.
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/string1To1000'
            - description: Any additional information relevant to the customer’s profile.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/PartyType'
            - description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The name of the customer’s business.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s first name.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s middle name.
        LastName:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s last name.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer’s birth date. '
        Gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
            - description: 'The gender with which the customer identifies. '
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer''s phone number, which has not been specified as a mobile, home, or business number.'
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s home phone number.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The customer’s email address, which has not been specified as a personal or business address. '
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The customer’s business email address.
        Address:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s shipping address.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s mailing address.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/Address'
            - description: The customer’s billing address.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/Attributes'
            - description: A key value pair of attributes of a customer profile.
        FoundByItems:
          allOf:
            - $ref: '#/components/schemas/foundByList'
            - description: '<p>A list of items used to find a profile returned in a <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> response. An item is a key-value(s) pair that matches an attribute in the profile.</p> <p>If the optional <code>AdditionalSearchKeys</code> parameter was included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request, the <code>FoundByItems</code> list should be interpreted based on the <code>LogicalOperator</code> used in the request:</p> <ul> <li> <p> <code>AND</code> - The profile included in the response matched all of the search keys specified in the request. The <code>FoundByItems</code> will include all of the key-value(s) pairs that were specified in the request (as this is a requirement of <code>AND</code> search logic).</p> </li> <li> <p> <code>OR</code> - The profile included in the response matched at least one of the search keys specified in the request. The <code>FoundByItems</code> will include each of the key-value(s) pairs that the profile was found by.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if the <code>LogicalOperator</code> parameter is not included in the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_SearchProfiles.html">SearchProfiles</a> request.</p>'
        PartyTypeString:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: An alternative to PartyType which accepts any string as input.
        GenderString:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: An alternative to Gender which accepts any string as input.
      description: The standard profile of a customer.
    ProfileList:
      type: array
      items:
        $ref: '#/components/schemas/Profile'
    Property:
      type: string
      pattern: .+
      maxLength: 2048
    PutIntegrationRequest:
      type: object
      title: PutIntegrationRequest
      properties:
        Uri:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: The URI of the S3 bucket or any other type of data source.
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
        FlowDefinition:
          allOf:
            - $ref: '#/components/schemas/FlowDefinition'
            - description: The configuration that controls how Customer Profiles retrieves data from the source.
        ObjectTypeNames:
          allOf:
            - $ref: '#/components/schemas/ObjectTypeNames'
            - description: 'A map in which each key is an event type from an external application such as Segment or Shopify, and each value is an <code>ObjectTypeName</code> (template) used to ingest the event. It supports the following event types: <code>SegmentIdentify</code>, <code>ShopifyCreateCustomers</code>, <code>ShopifyUpdateCustomers</code>, <code>ShopifyCreateDraftOrders</code>, <code>ShopifyUpdateDraftOrders</code>, <code>ShopifyCreateOrders</code>, and <code>ShopifyUpdatedOrders</code>.'
    PutProfileObjectRequest:
      type: object
      required:
        - ObjectTypeName
        - Object
      title: PutProfileObjectRequest
      properties:
        ObjectTypeName:
          allOf:
            - $ref: '#/components/schemas/typeName'
            - description: The name of the profile object type.
        Object:
          allOf:
            - $ref: '#/components/schemas/stringifiedJson'
            - description: A string that is serialized from a JSON object.
    PutProfileObjectTypeRequest:
      type: object
      required:
        - Description
      title: PutProfileObjectTypeRequest
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: Description of the profile object type.
        TemplateId:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: 'A unique identifier for the object template. For some attributes in the request, the service will use the default value from the object template when TemplateId is present. If these attributes are present in the request, the service may return a <code>BadRequestException</code>. These attributes include: AllowProfileCreation, SourceLastUpdatedTimestampFormat, Fields, and Keys. For example, if AllowProfileCreation is set to true when TemplateId is set, the service may return a <code>BadRequestException</code>.'
        ExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The number of days until the data in the object expires.
        EncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: The customer-provided key to encrypt the profile object that will be created in this profile object type.
        AllowProfileCreation:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: 'Indicates whether a profile should be created when data is received if one doesn’t exist for an object of this type. The default is <code>FALSE</code>. If the AllowProfileCreation flag is set to <code>FALSE</code>, then the service tries to fetch a standard profile and associate this object with the profile. If it is set to <code>TRUE</code>, and if no match is found, then the service creates a new standard profile.'
        SourceLastUpdatedTimestampFormat:
          allOf:
            - $ref: '#/components/schemas/string1To255'
            - description: 'The format of your <code>sourceLastUpdatedTimestamp</code> that was previously set up. '
        Fields:
          allOf:
            - $ref: '#/components/schemas/FieldMap'
            - description: A map of the name and ObjectType field.
        Keys:
          allOf:
            - $ref: '#/components/schemas/KeyMap'
            - description: A list of unique keys that can be used to map data to the profile.
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    Value:
      type: integer
      minimum: 1
      maximum: 366
    Unit:
      type: string
      enum:
        - DAYS
    RuleBasedMatchingStatus:
      type: string
      enum:
        - PENDING
        - IN_PROGRESS
        - ACTIVE
    s3BucketName:
      type: string
      pattern: '^[a-z0-9.-]+$'
      minLength: 3
      maxLength: 63
    s3KeyNameCustomerOutputConfig:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 800
    s3KeyName:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 1024
    S3SourceProperties:
      type: object
      required:
        - BucketName
      properties:
        BucketName:
          allOf:
            - $ref: '#/components/schemas/BucketName'
            - description: The Amazon S3 bucket name where the source files are stored.
        BucketPrefix:
          allOf:
            - $ref: '#/components/schemas/BucketPrefix'
            - description: The object key for the Amazon S3 bucket in which the source files are stored.
      description: The properties that are applied when Amazon S3 is being used as the flow source.
    SalesforceSourceProperties:
      type: object
      required:
        - Object
      properties:
        Object:
          allOf:
            - $ref: '#/components/schemas/Object'
            - description: The object specified in the Salesforce flow source.
        EnableDynamicFieldUpdate:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
        IncludeDeletedRecords:
          allOf:
            - $ref: '#/components/schemas/boolean'
            - description: Indicates whether Amazon AppFlow includes deleted files in the flow run.
      description: The properties that are applied when Salesforce is being used as a source.
    ScheduleExpression:
      type: string
      pattern: .*
      maxLength: 256
    ScheduleOffset:
      type: integer
      minimum: 0
      maximum: 36000
    Timezone:
      type: string
      pattern: .*
      maxLength: 256
    ScheduledTriggerProperties:
      type: object
      required:
        - ScheduleExpression
      properties:
        ScheduleExpression:
          allOf:
            - $ref: '#/components/schemas/ScheduleExpression'
            - description: 'The scheduling expression that determines the rate at which the schedule will run, for example rate (5 minutes).'
        DataPullMode:
          allOf:
            - $ref: '#/components/schemas/DataPullMode'
            - description: Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run.
        ScheduleStartTime:
          allOf:
            - $ref: '#/components/schemas/Date'
            - description: Specifies the scheduled start time for a scheduled-trigger flow.
        ScheduleEndTime:
          allOf:
            - $ref: '#/components/schemas/Date'
            - description: Specifies the scheduled end time for a scheduled-trigger flow.
        Timezone:
          allOf:
            - $ref: '#/components/schemas/Timezone'
            - description: 'Specifies the time zone used when referring to the date and time of a scheduled-triggered flow, such as America/New_York.'
        ScheduleOffset:
          allOf:
            - $ref: '#/components/schemas/ScheduleOffset'
            - description: Specifies the optional offset that is added to the time interval for a schedule-triggered flow.
        FirstExecutionFrom:
          allOf:
            - $ref: '#/components/schemas/Date'
            - description: Specifies the date range for the records to import from the connector in the first flow run.
      description: 'Specifies the configuration details of a scheduled-trigger flow that you define. Currently, these settings only apply to the scheduled-trigger type.'
    additionalSearchKeysList:
      type: array
      items:
        $ref: '#/components/schemas/AdditionalSearchKey'
      minItems: 1
      maxItems: 4
    logicalOperator:
      type: string
      enum:
        - AND
        - OR
    SearchProfilesRequest:
      type: object
      required:
        - KeyName
        - Values
      title: SearchProfilesRequest
      properties:
        KeyName:
          allOf:
            - $ref: '#/components/schemas/name'
            - description: 'A searchable identifier of a customer profile. The predefined keys you can use to search include: _account, _profileId, _assetId, _caseId, _orderId, _fullName, _phone, _email, _ctrContactId, _marketoLeadId, _salesforceAccountId, _salesforceContactId, _salesforceAssetId, _zendeskUserId, _zendeskExternalId, _zendeskTicketId, _serviceNowSystemId, _serviceNowIncidentId, _segmentUserId, _shopifyCustomerId, _shopifyOrderId.'
        Values:
          allOf:
            - $ref: '#/components/schemas/requestValueList'
            - description: A list of key values.
        AdditionalSearchKeys:
          allOf:
            - $ref: '#/components/schemas/additionalSearchKeysList'
            - description: 'A list of <code>AdditionalSearchKey</code> objects that are each searchable identifiers of a profile. Each <code>AdditionalSearchKey</code> object contains a <code>KeyName</code> and a list of <code>Values</code> associated with that specific key (i.e., a key-value(s) pair). These additional search keys will be used in conjunction with the <code>LogicalOperator</code> and the required <code>KeyName</code> and <code>Values</code> parameters to search for profiles that satisfy the search criteria. '
        LogicalOperator:
          allOf:
            - $ref: '#/components/schemas/logicalOperator'
            - description: '<p>Relationship between all specified search keys that will be used to search for profiles. This includes the required <code>KeyName</code> and <code>Values</code> parameters as well as any key-value(s) pairs specified in the <code>AdditionalSearchKeys</code> list.</p> <p>This parameter influences which profiles will be returned in the response in the following manner:</p> <ul> <li> <p> <code>AND</code> - The response only includes profiles that match all of the search keys.</p> </li> <li> <p> <code>OR</code> - The response includes profiles that match at least one of the search keys.</p> </li> </ul> <p>The <code>OR</code> relationship is the default behavior if this parameter is not included in the request.</p>'
    ServiceNowSourceProperties:
      type: object
      required:
        - Object
      properties:
        Object:
          allOf:
            - $ref: '#/components/schemas/Object'
            - description: The object specified in the ServiceNow flow source.
      description: The properties that are applied when ServiceNow is being used as a source.
    ZendeskSourceProperties:
      type: object
      required:
        - Object
      properties:
        Object:
          allOf:
            - $ref: '#/components/schemas/Object'
            - description: The object specified in the Zendesk flow source.
      description: The properties that are applied when using Zendesk as a flow source.
    SourceConnectorProperties:
      type: object
      properties:
        Marketo:
          allOf:
            - $ref: '#/components/schemas/MarketoSourceProperties'
            - description: The properties that are applied when Marketo is being used as a source.
        S3:
          allOf:
            - $ref: '#/components/schemas/S3SourceProperties'
            - description: The properties that are applied when Amazon S3 is being used as the flow source.
        Salesforce:
          allOf:
            - $ref: '#/components/schemas/SalesforceSourceProperties'
            - description: The properties that are applied when Salesforce is being used as a source.
        ServiceNow:
          allOf:
            - $ref: '#/components/schemas/ServiceNowSourceProperties'
            - description: The properties that are applied when ServiceNow is being used as a source.
        Zendesk:
          allOf:
            - $ref: '#/components/schemas/ZendeskSourceProperties'
            - description: The properties that are applied when using Zendesk as a flow source.
      description: 'Specifies the information that is required to query a particular Amazon AppFlow connector. Customer Profiles supports Salesforce, Zendesk, Marketo, ServiceNow and Amazon S3.'
    SourceFields:
      type: array
      items:
        $ref: '#/components/schemas/stringTo2048'
    StandardIdentifier:
      type: string
      enum:
        - PROFILE
        - ASSET
        - CASE
        - UNIQUE
        - SECONDARY
        - LOOKUP_ONLY
        - NEW_ONLY
        - ORDER
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 1
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - tags
      title: TagResourceRequest
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    TaskPropertiesMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Property'
    TaskType:
      type: string
      enum:
        - Arithmetic
        - Filter
        - Map
        - Mask
        - Merge
        - Truncate
        - Validate
    Task:
      type: object
      required:
        - SourceFields
        - TaskType
      properties:
        ConnectorOperator:
          allOf:
            - $ref: '#/components/schemas/ConnectorOperator'
            - description: The operation to be performed on the provided source fields.
        DestinationField:
          allOf:
            - $ref: '#/components/schemas/DestinationField'
            - description: 'A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.'
        SourceFields:
          allOf:
            - $ref: '#/components/schemas/SourceFields'
            - description: The source fields to which a particular task is applied.
        TaskProperties:
          allOf:
            - $ref: '#/components/schemas/TaskPropertiesMap'
            - description: A map used to store task-related information. The service looks for particular information based on the TaskType.
        TaskType:
          allOf:
            - $ref: '#/components/schemas/TaskType'
            - description: Specifies the particular task implementation that Amazon AppFlow performs.
      description: A class for modeling different type of tasks. Task implementation varies based on the TaskType.
    TriggerType:
      type: string
      enum:
        - Scheduled
        - Event
        - OnDemand
    TriggerProperties:
      type: object
      properties:
        Scheduled:
          allOf:
            - $ref: '#/components/schemas/ScheduledTriggerProperties'
            - description: Specifies the configuration details of a schedule-triggered flow that you define.
      description: 'Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the Scheduled trigger type.'
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateAddress:
      type: object
      properties:
        Address1:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The first line of a customer address.
        Address2:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The second line of a customer address.
        Address3:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The third line of a customer address.
        Address4:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The fourth line of a customer address.
        City:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The city in which a customer lives.
        County:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The county in which a customer lives.
        State:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The state in which a customer lives.
        Province:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The province in which a customer lives.
        Country:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The country in which a customer lives.
        PostalCode:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The postal code of a customer address.
      description: Updates associated with the address properties of a customer profile.
    UpdateAttributes:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/string0To255'
    UpdateCalculatedAttributeDefinitionRequest:
      type: object
      title: UpdateCalculatedAttributeDefinitionRequest
      properties:
        DisplayName:
          allOf:
            - $ref: '#/components/schemas/displayName'
            - description: The display name of the calculated attribute.
        Description:
          allOf:
            - $ref: '#/components/schemas/text'
            - description: The description of the calculated attribute.
        Conditions:
          allOf:
            - $ref: '#/components/schemas/Conditions'
            - description: 'The conditions including range, object count, and threshold for the calculated attribute.'
    UpdateDomainRequest:
      type: object
      title: UpdateDomainRequest
      properties:
        DefaultExpirationDays:
          allOf:
            - $ref: '#/components/schemas/expirationDaysInteger'
            - description: The default number of days until the data within the domain expires.
        DefaultEncryptionKey:
          allOf:
            - $ref: '#/components/schemas/encryptionKey'
            - description: 'The default encryption key, which is an AWS managed key, is used when no specific type of encryption key is specified. It is used to encrypt all data before it is placed in permanent or semi-permanent storage. If specified as an empty string, it will clear any existing value.'
        DeadLetterQueueUrl:
          allOf:
            - $ref: '#/components/schemas/sqsQueueUrl'
            - description: 'The URL of the SQS dead letter queue, which is used for reporting errors associated with ingesting data from third party applications. If specified as an empty string, it will clear any existing value. You must set up a policy on the DeadLetterQueue for the SendMessage operation to enable Amazon Connect Customer Profiles to send messages to the DeadLetterQueue.'
        Matching:
          allOf:
            - $ref: '#/components/schemas/MatchingRequest'
            - description: '<p>The process of matching duplicate profiles. If <code>Matching</code> = <code>true</code>, Amazon Connect Customer Profiles starts a weekly batch process called Identity Resolution Job. If you do not specify a date and time for Identity Resolution Job to run, by default it runs every Saturday at 12AM UTC to detect duplicate profiles in your domains. </p> <p>After the Identity Resolution Job completes, use the <a href="https://docs.aws.amazon.com/customerprofiles/latest/APIReference/API_GetMatches.html">GetMatches</a> API to return and review the results. Or, if you have configured <code>ExportingConfig</code> in the <code>MatchingRequest</code>, you can download the results from S3.</p>'
        RuleBasedMatching:
          allOf:
            - $ref: '#/components/schemas/RuleBasedMatchingRequest'
            - description: 'The process of matching duplicate profiles using the rule-Based matching. If <code>RuleBasedMatching</code> = true, Amazon Connect Customer Profiles will start to match and merge your profiles according to your configuration in the <code>RuleBasedMatchingRequest</code>. You can use the <code>ListRuleBasedMatches</code> and <code>GetSimilarProfiles</code> API to return and review the results. Also, if you have configured <code>ExportingConfig</code> in the <code>RuleBasedMatchingRequest</code>, you can download the results from S3.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: 'The tags used to organize, track, or control access for this resource.'
    string0To1000:
      type: string
      minLength: 0
      maxLength: 1000
    UpdateProfileRequest:
      type: object
      required:
        - ProfileId
      title: UpdateProfileRequest
      properties:
        ProfileId:
          allOf:
            - $ref: '#/components/schemas/uuid'
            - description: The unique identifier of a customer profile.
        AdditionalInformation:
          allOf:
            - $ref: '#/components/schemas/string0To1000'
            - description: Any additional information relevant to the customer’s profile.
        AccountNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: A unique account number that you have given to the customer.
        PartyType:
          allOf:
            - $ref: '#/components/schemas/PartyType'
            - description: The type of profile used to describe the customer.
        BusinessName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The name of the customer’s business.
        FirstName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s first name.
        MiddleName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s middle name.
        LastName:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s last name.
        BirthDate:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: 'The customer’s birth date. '
        Gender:
          allOf:
            - $ref: '#/components/schemas/Gender'
            - description: 'The gender with which the customer identifies. '
        PhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: 'The customer’s phone number, which has not been specified as a mobile, home, or business number. '
        MobilePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s mobile phone number.
        HomePhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s home phone number.
        BusinessPhoneNumber:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s business phone number.
        EmailAddress:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: 'The customer’s email address, which has not been specified as a personal or business address. '
        PersonalEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s personal email address.
        BusinessEmailAddress:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: The customer’s business email address.
        Address:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: 'A generic address associated with the customer that is not mailing, shipping, or billing.'
        ShippingAddress:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: The customer’s shipping address.
        MailingAddress:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: The customer’s mailing address.
        BillingAddress:
          allOf:
            - $ref: '#/components/schemas/UpdateAddress'
            - description: The customer’s billing address.
        Attributes:
          allOf:
            - $ref: '#/components/schemas/UpdateAttributes'
            - description: A key value pair of attributes of a customer profile.
        PartyTypeString:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: An alternative to <code>PartyType</code> which accepts any string as input.
        GenderString:
          allOf:
            - $ref: '#/components/schemas/string0To255'
            - description: An alternative to <code>Gender</code> which accepts any string as input.
    WorkflowStepItem:
      type: object
      properties:
        AppflowIntegration:
          allOf:
            - $ref: '#/components/schemas/AppflowIntegrationWorkflowStep'
            - description: Workflow step information specific to <code>APPFLOW_INTEGRATION</code> workflow.
      description: List containing steps in workflow.
security:
  - hmac: []
