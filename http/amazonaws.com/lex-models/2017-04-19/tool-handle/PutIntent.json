{
  "name": "PutIntent",
  "description": "<p>Creates an intent or replaces an existing intent.</p> <p>To define the interaction between the user and your bot, you use one or more intents. For a pizza ordering bot, for example, you would create an <code>OrderPizza</code> intent. </p> <p>To create an intent or replace an existing intent, you must provide the following:</p> <ul> <li> <p>Intent name. For example, <code>OrderPizza</code>.</p> </li> <li> <p>Sample utterances. For example, \"Can I order a pizza, please.\" and \"I want to order a pizza.\"</p> </li> <li> <p>Information to be gathered. You specify slot types for the information that your bot will request from the user. You can specify standard slot types, such as a date or a time, or custom slot types such as the size and crust of a pizza.</p> </li> <li> <p>How the intent will be fulfilled. You can provide a Lambda function or configure the intent to return the intent information to the client application. If you use a Lambda function, when all of the intent information is available, Amazon Lex invokes your Lambda function. If you configure your intent to return the intent information to the client application. </p> </li> </ul> <p>You can specify other optional information in the request, such as:</p> <ul> <li> <p>A confirmation prompt to ask the user to confirm an intent. For example, \"Shall I order your pizza?\"</p> </li> <li> <p>A conclusion statement to send to the user after the intent has been fulfilled. For example, \"I placed your pizza order.\"</p> </li> <li> <p>A follow-up prompt that asks the user for additional activity. For example, asking \"Do you want to order a drink with your pizza?\"</p> </li> </ul> <p>If you specify an existing intent name to update the intent, Amazon Lex replaces the values in the <code>$LATEST</code> version of the intent with the values in the request. Amazon Lex removes fields that you don't provide in the request. If you don't specify the required fields, Amazon Lex throws an exception. When you update the <code>$LATEST</code> version of an intent, the <code>status</code> field of any bot that uses the <code>$LATEST</code> version of the intent is set to <code>NOT_BUILT</code>.</p> <p>For more information, see <a>how-it-works</a>.</p> <p>This operation requires permissions for the <code>lex:PutIntent</code> action.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100,
        "description": "<p>The name of the intent. The name is <i>not</i> case sensitive. </p> <p>The name can't match a built-in intent name, or a built-in intent name with \"AMAZON.\" removed. For example, because there is a built-in intent called <code>AMAZON.HelpIntent</code>, you can't create a custom intent called <code>HelpIntent</code>.</p> <p>For a list of built-in intents, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.</p>"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "description": {
            "description": "A description of the intent.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "slots": {
            "description": "An array of intent slots. At runtime, Amazon Lex elicits required slot values from the user using prompts defined in the slots. For more information, see <a>how-it-works</a>. ",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Slot"
            },
            "minItems": 0,
            "maxItems": 100
          },
          "sampleUtterances": {
            "description": "<p>An array of utterances (strings) that a user might say to signal the intent. For example, \"I want {PizzaSize} pizza\", \"Order {Quantity} {PizzaSize} pizzas\". </p> <p>In each utterance, a slot name is enclosed in curly braces. </p>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Utterance"
            },
            "minItems": 0,
            "maxItems": 1500
          },
          "confirmationPrompt": {
            "description": "Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>.",
            "type": "object",
            "properties": {
              "messages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageList"
                  },
                  {
                    "description": "An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML)."
                  }
                ]
              },
              "maxAttempts": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PromptMaxAttempts"
                  },
                  {
                    "description": "The number of times to prompt the user for information."
                  }
                ]
              },
              "responseCard": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseCard"
                  },
                  {
                    "description": "A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see <a>ex-resp-card</a>. "
                  }
                ]
              }
            }
          },
          "rejectionStatement": {
            "description": "A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. ",
            "type": "object",
            "properties": {
              "messages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageList"
                  },
                  {
                    "description": "A collection of message objects."
                  }
                ]
              },
              "responseCard": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseCard"
                  },
                  {
                    "description": " At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card. "
                  }
                ]
              }
            }
          },
          "followUpPrompt": {
            "description": "A prompt for additional activity after an intent is fulfilled. For example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.",
            "type": "object",
            "properties": {
              "prompt": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Prompt"
                  },
                  {
                    "description": "Prompts for information from the user. "
                  }
                ]
              },
              "rejectionStatement": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Statement"
                  },
                  {
                    "description": "If the user answers \"no\" to the question defined in the <code>prompt</code> field, Amazon Lex responds with this statement to acknowledge that the intent was canceled. "
                  }
                ]
              }
            }
          },
          "conclusionStatement": {
            "description": "A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. ",
            "type": "object",
            "properties": {
              "messages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageList"
                  },
                  {
                    "description": "A collection of message objects."
                  }
                ]
              },
              "responseCard": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseCard"
                  },
                  {
                    "description": " At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card. "
                  }
                ]
              }
            }
          },
          "dialogCodeHook": {
            "description": "Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot..",
            "type": "object",
            "properties": {
              "uri": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LambdaARN"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of the Lambda function."
                  }
                ]
              },
              "messageVersion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageVersion"
                  },
                  {
                    "description": "The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <a>using-lambda</a>."
                  }
                ]
              }
            }
          },
          "fulfillmentActivity": {
            "description": "<p> Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application. </p> <p>Consider the following examples:</p> <ul> <li> <p>In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. </p> </li> <li> <p>In a gaming application, when a user says \"pick up a rock,\" this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. </p> </li> </ul>",
            "type": "object",
            "properties": {
              "type": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FulfillmentActivityType"
                  },
                  {
                    "description": " How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application. "
                  }
                ]
              },
              "codeHook": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CodeHook"
                  },
                  {
                    "description": " A description of the Lambda function that is run to fulfill the intent. "
                  }
                ]
              }
            }
          },
          "parentIntentSignature": {
            "description": "A unique identifier for the built-in intent to base this intent on. To find the signature for an intent, see <a href=\"https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents\">Standard Built-in Intents</a> in the <i>Alexa Skills Kit</i>.",
            "type": "string"
          },
          "checksum": {
            "description": "<p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new intent, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a intent, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>",
            "type": "string"
          },
          "createVersion": {
            "description": "When set to <code>true</code> a new numbered version of the intent is created. This is the same as calling the <code>CreateIntentVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.",
            "type": "boolean"
          },
          "kendraConfiguration": {
            "description": "Provides configuration information for the AMAZON.KendraSearchIntent intent. When you use this intent, Amazon Lex searches the specified Amazon Kendra index and returns documents from the index that match the user's utterance. For more information, see <a href=\"http://docs.aws.amazon.com/lex/latest/dg/built-in-intent-kendra-search.html\"> AMAZON.KendraSearchIntent</a>.",
            "type": "object",
            "properties": {
              "kendraIndex": {
                "allOf": [
                  {
                    "$ref": "#/$defs/KendraIndexArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of the Amazon Kendra index that you want the AMAZON.KendraSearchIntent intent to search. The index must be in the same account and Region as the Amazon Lex bot. If the Amazon Kendra index does not exist, you get an exception when you call the <code>PutIntent</code> operation."
                  }
                ]
              },
              "queryFilterString": {
                "allOf": [
                  {
                    "$ref": "#/$defs/QueryFilterString"
                  },
                  {
                    "description": "<p>A query filter that Amazon Lex sends to Amazon Kendra to filter the response from the query. The filter is in the format defined by Amazon Kendra. For more information, see <a href=\"http://docs.aws.amazon.com/kendra/latest/dg/filtering.html\">Filtering queries</a>.</p> <p>You can override this filter string with a new filter string at runtime.</p>"
                  }
                ]
              },
              "role": {
                "allOf": [
                  {
                    "$ref": "#/$defs/roleArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of an IAM role that has permission to search the Amazon Kendra index. The role must be in the same account and Region as the Amazon Lex bot. If the role does not exist, you get an exception when you call the <code>PutIntent</code> operation."
                  }
                ]
              }
            }
          },
          "inputContexts": {
            "description": "An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/InputContext"
            },
            "minItems": 0,
            "maxItems": 5
          },
          "outputContexts": {
            "description": "An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/OutputContext"
            },
            "minItems": 0,
            "maxItems": 10
          }
        }
      }
    },
    "required": [
      "name",
      "body"
    ],
    "$defs": {
      "Slot": {
        "type": "object",
        "required": [
          "name",
          "slotConstraint"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotName"
              },
              {
                "description": "The name of the slot."
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A description of the slot."
              }
            ]
          },
          "slotConstraint": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotConstraint"
              },
              {
                "description": "Specifies whether the slot is required or optional. "
              }
            ]
          },
          "slotType": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomOrBuiltinSlotTypeName"
              },
              {
                "description": "The type of the slot, either a custom slot type that you defined or one of the built-in slot types."
              }
            ]
          },
          "slotTypeVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "The version of the slot type."
              }
            ]
          },
          "valueElicitationPrompt": {
            "allOf": [
              {
                "$ref": "#/$defs/Prompt"
              },
              {
                "description": "The prompt that Amazon Lex uses to elicit the slot value from the user."
              }
            ]
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/$defs/Priority"
              },
              {
                "description": "<p> Directs Amazon Lex the order in which to elicit this slot value from the user. For example, if the intent has two slots with priorities 1 and 2, AWS Amazon Lex first elicits a value for the slot with priority 1.</p> <p>If multiple slots share the same priority, the order in which Amazon Lex elicits values is arbitrary.</p>"
              }
            ]
          },
          "sampleUtterances": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotUtteranceList"
              },
              {
                "description": " If you know a specific pattern with which users might respond to an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This is optional. In most cases, Amazon Lex is capable of understanding user utterances. "
              }
            ]
          },
          "responseCard": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseCard"
              },
              {
                "description": " A set of possible responses for the slot type used by text-based clients. A user chooses an option from the response card, instead of using text to reply. "
              }
            ]
          },
          "obfuscationSetting": {
            "allOf": [
              {
                "$ref": "#/$defs/ObfuscationSetting"
              },
              {
                "description": "Determines whether a slot is obfuscated in conversation logs and stored utterances. When you obfuscate a slot, the value is replaced by the slot name in curly braces ({}). For example, if the slot name is \"full_name\", obfuscated values are replaced with \"{full_name}\". For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-obfuscate.html\"> Slot Obfuscation </a>. "
              }
            ]
          },
          "defaultValueSpec": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotDefaultValueSpec"
              },
              {
                "description": "A list of default values for the slot. Default values are used when Amazon Lex hasn't determined a value for a slot. You can specify default values from context variables, session attributes, and defined values."
              }
            ]
          }
        },
        "description": "Identifies the version of a specific slot."
      },
      "SlotName": {
        "type": "string",
        "pattern": "^([A-Za-z](-|_|.)?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "Description": {
        "type": "string",
        "minLength": 0,
        "maxLength": 200
      },
      "SlotConstraint": {
        "type": "string",
        "enum": [
          "Required",
          "Optional"
        ]
      },
      "CustomOrBuiltinSlotTypeName": {
        "type": "string",
        "pattern": "^((AMAZON\\.)_?|[A-Za-z]_?)+",
        "minLength": 1,
        "maxLength": 100
      },
      "Version": {
        "type": "string",
        "pattern": "\\$LATEST|[0-9]+",
        "minLength": 1,
        "maxLength": 64
      },
      "Prompt": {
        "type": "object",
        "required": [
          "messages",
          "maxAttempts"
        ],
        "properties": {
          "messages": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageList"
              },
              {
                "description": "An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML)."
              }
            ]
          },
          "maxAttempts": {
            "allOf": [
              {
                "$ref": "#/$defs/PromptMaxAttempts"
              },
              {
                "description": "The number of times to prompt the user for information."
              }
            ]
          },
          "responseCard": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseCard"
              },
              {
                "description": "A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see <a>ex-resp-card</a>. "
              }
            ]
          }
        },
        "description": "Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>."
      },
      "MessageList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Message"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "Message": {
        "type": "object",
        "required": [
          "contentType",
          "content"
        ],
        "properties": {
          "contentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The content type of the message string."
              }
            ]
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentString"
              },
              {
                "description": "The text of the message."
              }
            ]
          },
          "groupNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupNumber"
              },
              {
                "description": "Identifies the message group that the message belongs to. When a group is assigned to a message, Amazon Lex returns one message from each group in the response."
              }
            ]
          }
        },
        "description": "The message object that provides the message text and its type."
      },
      "ContentType": {
        "type": "string",
        "enum": [
          "PlainText",
          "SSML",
          "CustomPayload"
        ]
      },
      "ContentString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "GroupNumber": {
        "type": "integer",
        "minimum": 1,
        "maximum": 5
      },
      "PromptMaxAttempts": {
        "type": "integer",
        "minimum": 1,
        "maximum": 5
      },
      "ResponseCard": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50000
      },
      "Priority": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100
      },
      "SlotUtteranceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Utterance"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "Utterance": {
        "type": "string",
        "minLength": 1,
        "maxLength": 200
      },
      "ObfuscationSetting": {
        "type": "string",
        "enum": [
          "NONE",
          "DEFAULT_OBFUSCATION"
        ]
      },
      "SlotDefaultValueSpec": {
        "type": "object",
        "required": [
          "defaultValueList"
        ],
        "properties": {
          "defaultValueList": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotDefaultValueList"
              },
              {
                "description": "<p>The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value.</p> <p>The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.</p>"
              }
            ]
          }
        },
        "description": "Contains the default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot."
      },
      "SlotDefaultValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SlotDefaultValue"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "SlotDefaultValue": {
        "type": "object",
        "required": [
          "defaultValue"
        ],
        "properties": {
          "defaultValue": {
            "allOf": [
              {
                "$ref": "#/$defs/SlotDefaultValueString"
              },
              {
                "description": "<p>The default value for the slot. You can specify one of the following:</p> <ul> <li> <p> <code>#context-name.slot-name</code> - The slot value \"slot-name\" in the context \"context-name.\"</p> </li> <li> <p> <code>{attribute}</code> - The slot value of the session attribute \"attribute.\"</p> </li> <li> <p> <code>'value'</code> - The discrete value \"value.\"</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "A default value for a slot."
      },
      "SlotDefaultValueString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 202
      },
      "Statement": {
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "messages": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageList"
              },
              {
                "description": "A collection of message objects."
              }
            ]
          },
          "responseCard": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseCard"
              },
              {
                "description": " At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card. "
              }
            ]
          }
        },
        "description": "A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. "
      },
      "LambdaARN": {
        "type": "string",
        "pattern": "arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+(-[a-z]+)*-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?",
        "minLength": 20,
        "maxLength": 2048
      },
      "MessageVersion": {
        "type": "string",
        "minLength": 1,
        "maxLength": 5
      },
      "FulfillmentActivityType": {
        "type": "string",
        "enum": [
          "ReturnIntent",
          "CodeHook"
        ]
      },
      "CodeHook": {
        "type": "object",
        "required": [
          "uri",
          "messageVersion"
        ],
        "properties": {
          "uri": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaARN"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Lambda function."
              }
            ]
          },
          "messageVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageVersion"
              },
              {
                "description": "The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <a>using-lambda</a>."
              }
            ]
          }
        },
        "description": "Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot.."
      },
      "KendraIndexArn": {
        "type": "string",
        "pattern": "arn:aws:kendra:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:index\\/[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 20,
        "maxLength": 2048
      },
      "QueryFilterString": {
        "type": "string",
        "minLength": 0
      },
      "roleArn": {
        "type": "string",
        "pattern": "arn:aws:iam::[0-9]{12}:role/.*",
        "minLength": 20,
        "maxLength": 2048
      },
      "InputContext": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/InputContextName"
              },
              {
                "description": "The name of the context."
              }
            ]
          }
        },
        "description": "The name of a context that must be active for an intent to be selected by Amazon Lex."
      },
      "InputContextName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "OutputContext": {
        "type": "object",
        "required": [
          "name",
          "timeToLiveInSeconds",
          "turnsToLive"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputContextName"
              },
              {
                "description": "The name of the context."
              }
            ]
          },
          "timeToLiveInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/ContextTimeToLiveInSeconds"
              },
              {
                "description": "The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours)."
              }
            ]
          },
          "turnsToLive": {
            "allOf": [
              {
                "$ref": "#/$defs/ContextTurnsToLive"
              },
              {
                "description": "The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex."
              }
            ]
          }
        },
        "description": "The specification of an output context that is set when an intent is fulfilled."
      },
      "OutputContextName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "ContextTimeToLiveInSeconds": {
        "type": "integer",
        "minimum": 5,
        "maximum": 86400
      },
      "ContextTurnsToLive": {
        "type": "integer",
        "minimum": 1,
        "maximum": 20
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models.lex.us-east-1.amazonaws.com/intents/{name}/versions/$LATEST"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**name**",
            "**description**",
            "**slots**",
            "**sampleUtterances**",
            "**confirmationPrompt**",
            "**rejectionStatement**",
            "**followUpPrompt**",
            "**conclusionStatement**",
            "**dialogCodeHook**",
            "**fulfillmentActivity**",
            "**parentIntentSignature**",
            "**lastUpdatedDate**",
            "**createdDate**",
            "**version**",
            "**checksum**",
            "**createVersion**",
            "**kendraConfiguration**",
            "**inputContexts**",
            "**outputContexts**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
