{
  "name": "PutBot",
  "description": "<p>Creates an Amazon Lex conversational bot or replaces an existing bot. When you create or update a bot you are only required to specify a name, a locale, and whether the bot is directed toward children under age 13. You can use this to add intents later, or to remove intents from an existing bot. When you create a bot with the minimum information, the bot is created or updated but Amazon Lex returns the <code/> response <code>FAILED</code>. You can build the bot after you add one or more intents. For more information about Amazon Lex bots, see <a>how-it-works</a>. </p> <p>If you specify the name of an existing bot, the fields in the request replace the existing values in the <code>$LATEST</code> version of the bot. Amazon Lex removes any fields that you don't provide values for in the request, except for the <code>idleTTLInSeconds</code> and <code>privacySettings</code> fields, which are set to their default values. If you don't specify values for required fields, Amazon Lex throws an exception.</p> <p>This operation requires permissions for the <code>lex:PutBot</code> action. For more information, see <a>security-iam</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 2,
        "maxLength": 50,
        "description": "The name of the bot. The name is <i>not</i> case sensitive. "
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "locale",
          "childDirected"
        ],
        "properties": {
          "description": {
            "description": "A description of the bot.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "intents": {
            "description": "An array of <code>Intent</code> objects. Each intent represents a command that a user can express. For example, a pizza ordering bot might support an OrderPizza intent. For more information, see <a>how-it-works</a>.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Intent"
            }
          },
          "enableModelImprovements": {
            "description": "<p>Set to <code>true</code> to enable access to natural language understanding improvements. </p> <p>When you set the <code>enableModelImprovements</code> parameter to <code>true</code> you can use the <code>nluIntentConfidenceThreshold</code> parameter to configure confidence scores. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence Scores</a>.</p> <p>You can only set the <code>enableModelImprovements</code> parameter in certain Regions. If you set the parameter to <code>true</code>, your bot has access to accuracy improvements.</p> <p>The Regions where you can set the <code>enableModelImprovements</code> parameter to <code>true</code> are:</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default. In these Regions setting the parameter to <code>false</code> throws a <code>ValidationException</code> exception.</p>",
            "type": "boolean"
          },
          "nluIntentConfidenceThreshold": {
            "description": "<p>Determines the threshold where Amazon Lex will insert the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html\">PostContent</a> or <a href=\"https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> response. <code>AMAZON.FallbackIntent</code> and <code>AMAZON.KendraSearchIntent</code> are only inserted if they are configured for the bot.</p> <p>You must set the <code>enableModelImprovements</code> parameter to <code>true</code> to use confidence scores in the following regions.</p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> <li> <p>Asia Pacific (Sydney) (ap-southeast-2)</p> </li> <li> <p>EU (Ireland) (eu-west-1)</p> </li> </ul> <p>In other Regions, the <code>enableModelImprovements</code> parameter is set to <code>true</code> by default.</p> <p>For example, suppose a bot is configured with the confidence threshold of 0.80 and the <code>AMAZON.FallbackIntent</code>. Amazon Lex returns three alternative intents with the following confidence scores: IntentA (0.70), IntentB (0.60), IntentC (0.50). The response from the <code>PostText</code> operation would be:</p> <ul> <li> <p>AMAZON.FallbackIntent</p> </li> <li> <p>IntentA</p> </li> <li> <p>IntentB</p> </li> <li> <p>IntentC</p> </li> </ul>",
            "type": "number",
            "format": "double",
            "minimum": 0,
            "maximum": 1
          },
          "clarificationPrompt": {
            "description": "Obtains information from the user. To define a prompt, provide one or more messages and specify the number of attempts to get information from the user. If you provide more than one message, Amazon Lex chooses one of the messages to use to prompt the user. For more information, see <a>how-it-works</a>.",
            "type": "object",
            "properties": {
              "messages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageList"
                  },
                  {
                    "description": "An array of objects, each of which provides a message string and its type. You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML)."
                  }
                ]
              },
              "maxAttempts": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PromptMaxAttempts"
                  },
                  {
                    "description": "The number of times to prompt the user for information."
                  }
                ]
              },
              "responseCard": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseCard"
                  },
                  {
                    "description": "A response card. Amazon Lex uses this prompt at runtime, in the <code>PostText</code> API response. It substitutes session attributes and slot values for placeholders in the response card. For more information, see <a>ex-resp-card</a>. "
                  }
                ]
              }
            }
          },
          "abortStatement": {
            "description": "A collection of messages that convey information to the user. At runtime, Amazon Lex selects the message to convey. ",
            "type": "object",
            "properties": {
              "messages": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MessageList"
                  },
                  {
                    "description": "A collection of message objects."
                  }
                ]
              },
              "responseCard": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResponseCard"
                  },
                  {
                    "description": " At runtime, if the client is using the <a href=\"http://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html\">PostText</a> API, Amazon Lex includes the response card in the response. It substitutes all of the session attributes and slot values for placeholders in the response card. "
                  }
                ]
              }
            }
          },
          "idleSessionTTLInSeconds": {
            "description": "<p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation.</p> <p>A user interaction session remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Lex deletes any data provided before the timeout.</p> <p>For example, suppose that a user chooses the OrderPizza intent, but gets sidetracked halfway through placing an order. If the user doesn't complete the order within the specified time, Amazon Lex discards the slot information that it gathered, and the user must start over.</p> <p>If you don't include the <code>idleSessionTTLInSeconds</code> element in a <code>PutBot</code> operation request, Amazon Lex uses the default value. This is also true if the request replaces an existing bot.</p> <p>The default is 300 seconds (5 minutes).</p>",
            "type": "integer",
            "minimum": 60,
            "maximum": 86400
          },
          "voiceId": {
            "description": "The Amazon Polly voice ID that you want Amazon Lex to use for voice interactions with the user. The locale configured for the voice must match the locale of the bot. For more information, see <a href=\"https://docs.aws.amazon.com/polly/latest/dg/voicelist.html\">Voices in Amazon Polly</a> in the <i>Amazon Polly Developer Guide</i>.",
            "type": "string"
          },
          "checksum": {
            "description": "<p>Identifies a specific revision of the <code>$LATEST</code> version.</p> <p>When you create a new bot, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p> <p>When you want to update a bot, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>",
            "type": "string"
          },
          "processBehavior": {
            "description": "<p>If you set the <code>processBehavior</code> element to <code>BUILD</code>, Amazon Lex builds the bot so that it can be run. If you set the element to <code>SAVE</code> Amazon Lex saves the bot, but doesn't build it. </p> <p>If you don't specify this value, the default value is <code>BUILD</code>.</p>",
            "type": "string",
            "enum": [
              "SAVE",
              "BUILD"
            ]
          },
          "locale": {
            "description": "<p> Specifies the target locale for the bot. Any intent used in the bot must be compatible with the locale of the bot. </p> <p>The default is <code>en-US</code>.</p>",
            "type": "string",
            "enum": [
              "de-DE",
              "en-AU",
              "en-GB",
              "en-IN",
              "en-US",
              "es-419",
              "es-ES",
              "es-US",
              "fr-FR",
              "fr-CA",
              "it-IT",
              "ja-JP",
              "ko-KR"
            ]
          },
          "childDirected": {
            "description": "<p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p> <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href=\"https://aws.amazon.com/lex/faqs#data-security\">Amazon Lex FAQ.</a> </p>",
            "type": "boolean"
          },
          "detectSentiment": {
            "description": "When set to <code>true</code> user utterances are sent to Amazon Comprehend for sentiment analysis. If you don't specify <code>detectSentiment</code>, the default is <code>false</code>.",
            "type": "boolean"
          },
          "createVersion": {
            "description": "When set to <code>true</code> a new numbered version of the bot is created. This is the same as calling the <code>CreateBotVersion</code> operation. If you don't specify <code>createVersion</code>, the default is <code>false</code>.",
            "type": "boolean"
          },
          "tags": {
            "description": "A list of tags to add to the bot. You can only add tags when you create a bot, you can't use the <code>PutBot</code> operation to update the tags on a bot. To update tags, use the <code>TagResource</code> operation.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 0,
            "maxItems": 200
          }
        }
      }
    },
    "required": [
      "name",
      "body"
    ],
    "$defs": {
      "Intent": {
        "type": "object",
        "required": [
          "intentName",
          "intentVersion"
        ],
        "properties": {
          "intentName": {
            "allOf": [
              {
                "$ref": "#/$defs/IntentName"
              },
              {
                "description": "The name of the intent."
              }
            ]
          },
          "intentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "The version of the intent."
              }
            ]
          }
        },
        "description": "Identifies the specific version of an intent."
      },
      "IntentName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      },
      "Version": {
        "type": "string",
        "pattern": "\\$LATEST|[0-9]+",
        "minLength": 1,
        "maxLength": 64
      },
      "MessageList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Message"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "Message": {
        "type": "object",
        "required": [
          "contentType",
          "content"
        ],
        "properties": {
          "contentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The content type of the message string."
              }
            ]
          },
          "content": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentString"
              },
              {
                "description": "The text of the message."
              }
            ]
          },
          "groupNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupNumber"
              },
              {
                "description": "Identifies the message group that the message belongs to. When a group is assigned to a message, Amazon Lex returns one message from each group in the response."
              }
            ]
          }
        },
        "description": "The message object that provides the message text and its type."
      },
      "ContentType": {
        "type": "string",
        "enum": [
          "PlainText",
          "SSML",
          "CustomPayload"
        ]
      },
      "ContentString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "GroupNumber": {
        "type": "integer",
        "minimum": 1,
        "maximum": 5
      },
      "PromptMaxAttempts": {
        "type": "integer",
        "minimum": 1,
        "maximum": 5
      },
      "ResponseCard": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50000
      },
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key for the tag. Keys are not case-sensitive and must be unique."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value associated with a key. The value may be an empty string but it can't be null."
              }
            ]
          }
        },
        "description": "A list of key/value pairs that identify a bot, bot alias, or bot channel. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @. "
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://models.lex.us-east-1.amazonaws.com/bots/{name}/versions/$LATEST"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**name**",
            "**description**",
            "**intents**",
            "**enableModelImprovements**",
            "**nluIntentConfidenceThreshold**",
            "**clarificationPrompt**",
            "**abortStatement**",
            "**status**",
            "**failureReason**",
            "**lastUpdatedDate**",
            "**createdDate**",
            "**idleSessionTTLInSeconds**",
            "**voiceId**",
            "**checksum**",
            "**version**",
            "**locale**",
            "**childDirected**",
            "**createVersion**",
            "**detectSentiment**",
            "**tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
