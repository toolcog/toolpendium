{
  "name": "GetQuerySuggestions",
  "description": "<p>Fetches the queries that are suggested to your users.</p> <p> <code>GetQuerySuggestions</code> is currently not supported in the Amazon Web Services GovCloud (US-West) region.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSKendraFrontendService.GetQuerySuggestions"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/GetQuerySuggestionsRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "GetQuerySuggestionsRequest": {
        "type": "object",
        "required": [
          "IndexId",
          "QueryText"
        ],
        "title": "GetQuerySuggestionsRequest",
        "properties": {
          "IndexId": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexId"
              },
              {
                "description": "The identifier of the index you want to get query suggestions from."
              }
            ]
          },
          "QueryText": {
            "allOf": [
              {
                "$ref": "#/$defs/SuggestionQueryText"
              },
              {
                "description": "<p>The text of a user's query to generate query suggestions.</p> <p>A query is suggested if the query prefix matches what a user starts to type as their query.</p> <p>Amazon Kendra does not show any suggestions if a user types fewer than two characters or more than 60 characters. A query must also have at least one search result and contain at least one word of more than four characters.</p>"
              }
            ]
          },
          "MaxSuggestionsCount": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "The maximum number of query suggestions you want to show to your users."
              }
            ]
          },
          "SuggestionTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/SuggestionTypes"
              },
              {
                "description": "<p>The suggestions type to base query suggestions on. The suggestion types are query history or document fields/attributes. You can set one type or the other.</p> <p>If you set query history as your suggestions type, Amazon Kendra suggests queries relevant to your users based on popular queries in the query history.</p> <p>If you set document fields/attributes as your suggestions type, Amazon Kendra suggests queries relevant to your users based on the contents of document fields.</p>"
              }
            ]
          },
          "AttributeSuggestionsConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeSuggestionsGetConfig"
              },
              {
                "description": "Configuration information for the document fields/attributes that you want to base query suggestions on."
              }
            ]
          }
        }
      },
      "IndexId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9-]*",
        "minLength": 36,
        "maxLength": 36
      },
      "SuggestionQueryText": {
        "type": "string",
        "pattern": "^\\P{C}*$"
      },
      "Integer": {
        "type": "integer"
      },
      "SuggestionTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SuggestionType"
        }
      },
      "SuggestionType": {
        "type": "string",
        "enum": [
          "QUERY",
          "DOCUMENT_ATTRIBUTES"
        ]
      },
      "AttributeSuggestionsGetConfig": {
        "type": "object",
        "properties": {
          "SuggestionAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKeyList"
              },
              {
                "description": "The list of document field/attribute keys or field names to use for query suggestions. If the content within any of the fields match what your user starts typing as their query, then the field content is returned as a query suggestion."
              }
            ]
          },
          "AdditionalResponseAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKeyList"
              },
              {
                "description": "The list of additional document field/attribute keys or field names to include in the response. You can use additional fields to provide extra information in the response. Additional fields are not used to based suggestions on."
              }
            ]
          },
          "AttributeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilter"
              },
              {
                "description": "Filters the search results based on document fields/attributes."
              }
            ]
          },
          "UserContext": {
            "allOf": [
              {
                "$ref": "#/$defs/UserContext"
              },
              {
                "description": "Applies user context filtering so that only users who are given access to certain documents see these document in their search results."
              }
            ]
          }
        },
        "description": "Provides the configuration information for the document fields/attributes that you want to base query suggestions on."
      },
      "DocumentAttributeKeyList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DocumentAttributeKey"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "DocumentAttributeKey": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 200
      },
      "AttributeFilter": {
        "type": "object",
        "properties": {
          "AndAllFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilterList"
              },
              {
                "description": "Performs a logical <code>AND</code> operation on all supplied filters."
              }
            ]
          },
          "OrAllFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilterList"
              },
              {
                "description": "Performs a logical <code>OR</code> operation on all supplied filters."
              }
            ]
          },
          "NotFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilter"
              },
              {
                "description": "Performs a logical <code>NOT</code> operation on all supplied filters."
              }
            ]
          },
          "EqualsTo": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs an equals operation on two document attributes or metadata fields."
              }
            ]
          },
          "ContainsAll": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Returns true when a document contains all of the specified document attributes or metadata fields. This filter is only applicable to <code>StringListValue</code> metadata."
              }
            ]
          },
          "ContainsAny": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Returns true when a document contains any of the specified document attributes or metadata fields. This filter is only applicable to <code>StringListValue</code> metadata."
              }
            ]
          },
          "GreaterThan": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a greater than operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          },
          "GreaterThanOrEquals": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a greater or equals than operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          },
          "LessThan": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a less than operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          },
          "LessThanOrEquals": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a less than or equals operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          }
        },
        "description": "<p>Provides filtering the query results based on document attributes or metadata fields.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualsTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message \"<code>AttributeFilter</code> cannot have a depth of more than 2.\"</p> <p>If you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message \"<code>AttributeFilter</code> cannot have a length of more than 10\".</p>"
      },
      "AttributeFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeFilter"
        }
      },
      "DocumentAttribute": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "The identifier for the attribute."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeValue"
              },
              {
                "description": "The value of the attribute."
              }
            ]
          }
        },
        "description": "A document attribute or metadata field. To create custom document attributes, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-attributes.html\">Custom attributes</a>."
      },
      "DocumentAttributeValue": {
        "type": "object",
        "properties": {
          "StringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeStringValue"
              },
              {
                "description": "A string, such as \"department\"."
              }
            ]
          },
          "StringListValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeStringListValue"
              },
              {
                "description": "A list of strings. The default maximum length or number of strings is 10."
              }
            ]
          },
          "LongValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "A long integer value."
              }
            ]
          },
          "DateValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "<p>A date expressed as an ISO 8601 string.</p> <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>"
              }
            ]
          }
        },
        "description": "The value of a document attribute. You can only provide one value for a document attribute."
      },
      "DocumentAttributeStringValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "DocumentAttributeStringListValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Long": {
        "type": "integer"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "UserContext": {
        "type": "object",
        "properties": {
          "Token": {
            "allOf": [
              {
                "$ref": "#/$defs/Token"
              },
              {
                "description": "The user context token for filtering search results for a user. It must be a JWT or a JSON token."
              }
            ]
          },
          "UserId": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalName"
              },
              {
                "description": "The identifier of the user you want to filter search results based on their access to documents."
              }
            ]
          },
          "Groups": {
            "allOf": [
              {
                "$ref": "#/$defs/Groups"
              },
              {
                "description": "The list of groups you want to filter search results based on the groups' access to documents."
              }
            ]
          },
          "DataSourceGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceGroups"
              },
              {
                "description": "The list of data source groups you want to filter search results based on groups' access to documents in that data source."
              }
            ]
          }
        },
        "description": "<p>Provides information about the user context for an Amazon Kendra index.</p> <p>User context filtering is a kind of personalized search with the benefit of controlling access to documents. For example, not all teams that search the company portal for information should access top-secret company documents, nor are these documents relevant to all users. Only specific users or groups of teams given access to top-secret documents should see these documents in their search results.</p> <p>You provide one of the following:</p> <ul> <li> <p>User token</p> </li> <li> <p>User ID, the groups the user belongs to, and any data sources the groups can access.</p> </li> </ul> <p>If you provide both, an exception is thrown.</p>"
      },
      "Token": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100000
      },
      "PrincipalName": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 200
      },
      "Groups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PrincipalName"
        },
        "minItems": 1,
        "maxItems": 2048
      },
      "DataSourceGroups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataSourceGroup"
        },
        "minItems": 1,
        "maxItems": 2048
      },
      "DataSourceGroup": {
        "type": "object",
        "required": [
          "GroupId",
          "DataSourceId"
        ],
        "properties": {
          "GroupId": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalName"
              },
              {
                "description": "The identifier of the group you want to add to your list of groups. This is for filtering search results based on the groups' access to documents."
              }
            ]
          },
          "DataSourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceId"
              },
              {
                "description": "The identifier of the data source group you want to add to your list of data source groups. This is for filtering search results based on the groups' access to documents in that data source."
              }
            ]
          }
        },
        "description": "Data source information for user context filtering."
      },
      "DataSourceId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 100
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://kendra.us-east-1.amazonaws.com/#X-Amz-Target=AWSKendraFrontendService.GetQuerySuggestions"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**QuerySuggestionsId**",
            "**Suggestions**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
