{
  "name": "BatchPutDocument",
  "description": "<p>Adds one or more documents to an index.</p> <p>The <code>BatchPutDocument</code> API enables you to ingest inline documents or a set of documents stored in an Amazon S3 bucket. Use this API to ingest your text and unstructured text into an index, add custom attributes to the documents, and to attach an access control list to the documents added to the index.</p> <p>The documents are indexed asynchronously. You can see the progress of the batch using Amazon Web Services CloudWatch. Any error messages related to processing the batch are sent to your Amazon Web Services CloudWatch log.</p> <p>For an example of ingesting inline documents using Python and Java SDKs, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/in-adding-binary-doc.html\">Adding files directly to an index</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSKendraFrontendService.BatchPutDocument"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/BatchPutDocumentRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "BatchPutDocumentRequest": {
        "type": "object",
        "required": [
          "IndexId",
          "Documents"
        ],
        "title": "BatchPutDocumentRequest",
        "properties": {
          "IndexId": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexId"
              },
              {
                "description": "The identifier of the index to add the documents to. You need to create the index first using the <code>CreateIndex</code> API."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an IAM role with permission to access your S3 bucket. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html\">IAM access roles for Amazon Kendra</a>."
              }
            ]
          },
          "Documents": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentList"
              },
              {
                "description": "<p>One or more documents to add to the index.</p> <p>Documents have the following file size limits.</p> <ul> <li> <p>50 MB total size for any file</p> </li> <li> <p>5 MB extracted text for any file</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/quotas.html\">Quotas</a>.</p>"
              }
            ]
          },
          "CustomDocumentEnrichmentConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomDocumentEnrichmentConfiguration"
              },
              {
                "description": "<p>Configuration information for altering your document metadata and content during the document ingestion process when you use the <code>BatchPutDocument</code> API.</p> <p>For more information on how to create, modify and delete document metadata, or make other content alterations when you ingest documents into Amazon Kendra, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html\">Customizing document metadata during the ingestion process</a>.</p>"
              }
            ]
          }
        }
      },
      "IndexId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9-]*",
        "minLength": 36,
        "maxLength": 36
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
        "minLength": 0,
        "maxLength": 1284
      },
      "DocumentList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Document"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "Document": {
        "type": "object",
        "required": [
          "Id"
        ],
        "properties": {
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentId"
              },
              {
                "description": "<p>A identifier of the document in the index.</p> <p>Note, each document ID must be unique per index. You cannot create a data source to index your documents with their unique IDs and then use the <code>BatchPutDocument</code> API to index the same documents, or vice versa. You can delete a data source and then use the <code>BatchPutDocument</code> API to index the same documents, or vice versa.</p>"
              }
            ]
          },
          "Title": {
            "allOf": [
              {
                "$ref": "#/$defs/Title"
              },
              {
                "description": "The title of the document."
              }
            ]
          },
          "Blob": {
            "allOf": [
              {
                "$ref": "#/$defs/Blob"
              },
              {
                "description": "<p>The contents of the document. </p> <p>Documents passed to the <code>Blob</code> parameter must be base64 encoded. Your code might not need to encode the document file bytes if you're using an Amazon Web Services SDK to call Amazon Kendra APIs. If you are calling the Amazon Kendra endpoint directly using REST, you must base64 encode the contents before sending.</p>"
              }
            ]
          },
          "S3Path": {
            "$ref": "#/$defs/S3Path"
          },
          "Attributes": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeList"
              },
              {
                "description": "<p>Custom attributes to apply to the document. Use the custom attributes to provide additional information for searching, to provide facets for refining searches, and to provide additional information in the query response.</p> <p>For example, 'DataSourceId' and 'DataSourceSyncJobId' are custom attributes that provide information on the synchronization of documents running on a data source. Note, 'DataSourceSyncJobId' could be an optional custom attribute as Amazon Kendra will use the ID of a running sync job.</p>"
              }
            ]
          },
          "AccessControlList": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalList"
              },
              {
                "description": "Information on principals (users and/or groups) and which documents they should have access to. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents."
              }
            ]
          },
          "HierarchicalAccessControlList": {
            "allOf": [
              {
                "$ref": "#/$defs/HierarchicalPrincipalList"
              },
              {
                "description": "The list of <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html\">principal</a> lists that define the hierarchy for which documents users should have access to."
              }
            ]
          },
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "<p>The file type of the document in the <code>Blob</code> field.</p> <p>If you want to index snippets or subsets of HTML documents instead of the entirety of the HTML documents, you must add the <code>HTML</code> start and closing tags (<code>&lt;HTML&gt;content&lt;/HTML&gt;</code>) around the content.</p>"
              }
            ]
          },
          "AccessControlConfigurationId": {
            "allOf": [
              {
                "$ref": "#/$defs/AccessControlConfigurationId"
              },
              {
                "description": "The identifier of the access control configuration that you want to apply to the document."
              }
            ]
          }
        },
        "description": "A document in an index."
      },
      "DocumentId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Title": {
        "type": "string"
      },
      "Blob": {
        "type": "string"
      },
      "S3Path": {
        "type": "object",
        "required": [
          "Bucket",
          "Key"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the S3 bucket that contains the file."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectKey"
              },
              {
                "description": "The name of the file."
              }
            ]
          }
        },
        "description": "Information required to find a specific file in an Amazon S3 bucket."
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DocumentAttributeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DocumentAttribute"
        }
      },
      "DocumentAttribute": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "The identifier for the attribute."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeValue"
              },
              {
                "description": "The value of the attribute."
              }
            ]
          }
        },
        "description": "A document attribute or metadata field. To create custom document attributes, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-attributes.html\">Custom attributes</a>."
      },
      "DocumentAttributeKey": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 200
      },
      "DocumentAttributeValue": {
        "type": "object",
        "properties": {
          "StringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeStringValue"
              },
              {
                "description": "A string, such as \"department\"."
              }
            ]
          },
          "StringListValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeStringListValue"
              },
              {
                "description": "A list of strings. The default maximum length or number of strings is 10."
              }
            ]
          },
          "LongValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "A long integer value."
              }
            ]
          },
          "DateValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "<p>A date expressed as an ISO 8601 string.</p> <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>"
              }
            ]
          }
        },
        "description": "The value of a document attribute. You can only provide one value for a document attribute."
      },
      "DocumentAttributeStringValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "DocumentAttributeStringListValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Long": {
        "type": "integer"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "PrincipalList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Principal"
        }
      },
      "Principal": {
        "type": "object",
        "required": [
          "Name",
          "Type",
          "Access"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalName"
              },
              {
                "description": "The name of the user or group."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalType"
              },
              {
                "description": "The type of principal."
              }
            ]
          },
          "Access": {
            "allOf": [
              {
                "$ref": "#/$defs/ReadAccessType"
              },
              {
                "description": "Whether to allow or deny document access to the principal."
              }
            ]
          },
          "DataSourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceId"
              },
              {
                "description": "The identifier of the data source the principal should access documents from."
              }
            ]
          }
        },
        "description": "Provides user and group information for <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html\">user context filtering</a>."
      },
      "PrincipalName": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 200
      },
      "PrincipalType": {
        "type": "string",
        "enum": [
          "USER",
          "GROUP"
        ]
      },
      "ReadAccessType": {
        "type": "string",
        "enum": [
          "ALLOW",
          "DENY"
        ]
      },
      "DataSourceId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 100
      },
      "HierarchicalPrincipalList": {
        "type": "array",
        "description": "A list of <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html\">principal</a> lists that define the hierarchy for which documents users should have access to. Each hierarchical list specifies which user or group has allow or deny access for each document.",
        "items": {
          "$ref": "#/$defs/HierarchicalPrincipal"
        },
        "minItems": 1,
        "maxItems": 30
      },
      "HierarchicalPrincipal": {
        "type": "object",
        "required": [
          "PrincipalList"
        ],
        "properties": {
          "PrincipalList": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalList"
              },
              {
                "description": "A list of <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html\">principal</a> lists that define the hierarchy for which documents users should have access to. Each hierarchical list specifies which user or group has allow or deny access for each document."
              }
            ]
          }
        },
        "description": " Information to define the hierarchy for which documents users should have access to. "
      },
      "ContentType": {
        "type": "string",
        "enum": [
          "PDF",
          "HTML",
          "MS_WORD",
          "PLAIN_TEXT",
          "PPT",
          "RTF",
          "XML",
          "XSLT",
          "MS_EXCEL",
          "CSV",
          "JSON",
          "MD"
        ]
      },
      "AccessControlConfigurationId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]+",
        "minLength": 1,
        "maxLength": 36
      },
      "CustomDocumentEnrichmentConfiguration": {
        "type": "object",
        "properties": {
          "InlineConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/InlineCustomDocumentEnrichmentConfigurationList"
              },
              {
                "description": "Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Kendra."
              }
            ]
          },
          "PreExtractionHookConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/HookConfiguration"
              },
              {
                "description": "Configuration information for invoking a Lambda function in Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation\">Advanced data manipulation</a>."
              }
            ]
          },
          "PostExtractionHookConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/HookConfiguration"
              },
              {
                "description": "Configuration information for invoking a Lambda function in Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation\">Advanced data manipulation</a>."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of a role with permission to run <code>PreExtractionHookConfiguration</code> and <code>PostExtractionHookConfiguration</code> for altering document metadata and content during the document ingestion process. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html\">IAM roles for Amazon Kendra</a>."
              }
            ]
          }
        },
        "description": "<p>Provides the configuration information for altering document metadata and content during the document ingestion process.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html\">Customizing document metadata during the ingestion process</a>.</p>"
      },
      "InlineCustomDocumentEnrichmentConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InlineCustomDocumentEnrichmentConfiguration"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "InlineCustomDocumentEnrichmentConfiguration": {
        "type": "object",
        "properties": {
          "Condition": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeCondition"
              },
              {
                "description": "Configuration of the condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra."
              }
            ]
          },
          "Target": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeTarget"
              },
              {
                "description": "Configuration of the target document attribute or metadata field when ingesting documents into Amazon Kendra. You can also include a value."
              }
            ]
          },
          "DocumentContentDeletion": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>TRUE</code> to delete content if the condition used for the target attribute is met."
              }
            ]
          }
        },
        "description": "<p>Provides the configuration information for applying basic logic to alter document metadata and content when ingesting documents into Amazon Kendra. To apply advanced logic, to go beyond what you can do with basic logic, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_HookConfiguration.html\">HookConfiguration</a>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html\">Customizing document metadata during the ingestion process</a>.</p>"
      },
      "DocumentAttributeCondition": {
        "type": "object",
        "required": [
          "ConditionDocumentAttributeKey",
          "Operator"
        ],
        "properties": {
          "ConditionDocumentAttributeKey": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "<p>The identifier of the document attribute used for the condition.</p> <p>For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents.</p> <p>Amazon Kendra currently does not support <code>_document_body</code> as an attribute key used for the condition.</p>"
              }
            ]
          },
          "Operator": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionOperator"
              },
              {
                "description": "<p>The condition operator.</p> <p>For example, you can use 'Contains' to partially match a string.</p>"
              }
            ]
          },
          "ConditionOnValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeValue"
              },
              {
                "description": "<p>The value used by the operator.</p> <p>For example, you can specify the value 'financial' for strings in the 'Source_URI' field that partially match or contain this value.</p>"
              }
            ]
          }
        },
        "description": "<p>The condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra. You use this with <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeTarget.html\">DocumentAttributeTarget to apply the condition</a>.</p> <p>For example, you can create the 'Department' target field and have it prefill department names associated with the documents based on information in the 'Source_URI' field. Set the condition that if the 'Source_URI' field contains 'financial' in its URI value, then prefill the target field 'Department' with the target value 'Finance' for the document.</p> <p>Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using <code>DocumentAttributeTarget</code>. Amazon Kendra then will map your newly created metadata field to your index field.</p>"
      },
      "ConditionOperator": {
        "type": "string",
        "enum": [
          "GreaterThan",
          "GreaterThanOrEquals",
          "LessThan",
          "LessThanOrEquals",
          "Equals",
          "NotEquals",
          "Contains",
          "NotContains",
          "Exists",
          "NotExists",
          "BeginsWith"
        ]
      },
      "DocumentAttributeTarget": {
        "type": "object",
        "properties": {
          "TargetDocumentAttributeKey": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "<p>The identifier of the target document attribute or metadata field.</p> <p>For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.</p>"
              }
            ]
          },
          "TargetDocumentAttributeValueDeletion": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>TRUE</code> to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to <code>TRUE</code>. To create a target value (<code>TargetDocumentAttributeValue</code>), set this to <code>FALSE</code>."
              }
            ]
          },
          "TargetDocumentAttributeValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeValue"
              },
              {
                "description": "<p>The target value you want to create for the target attribute.</p> <p>For example, 'Finance' could be the target value for the target attribute key 'Department'.</p>"
              }
            ]
          }
        },
        "description": "<p>The target document attribute or metadata field you want to alter when ingesting documents into Amazon Kendra.</p> <p>For example, you can delete customer identification numbers associated with the documents, stored in the document metadata field called 'Customer_ID'. You set the target key as 'Customer_ID' and the deletion flag to <code>TRUE</code>. This removes all customer ID values in the field 'Customer_ID'. This would scrub personally identifiable information from each document's metadata.</p> <p>Amazon Kendra cannot create a target field if it has not already been created as an index field. After you create your index field, you can create a document metadata field using <code>DocumentAttributeTarget</code>. Amazon Kendra then will map your newly created metadata field to your index field.</p> <p>You can also use this with <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_DocumentAttributeCondition.html\">DocumentAttributeCondition</a>.</p>"
      },
      "Boolean": {
        "type": "boolean"
      },
      "HookConfiguration": {
        "type": "object",
        "required": [
          "LambdaArn",
          "S3Bucket"
        ],
        "properties": {
          "InvocationCondition": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeCondition"
              },
              {
                "description": "<p>The condition used for when a Lambda function should be invoked.</p> <p>For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.</p>"
              }
            ]
          },
          "LambdaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of a role with permission to run a Lambda function during ingestion. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html\">IAM roles for Amazon Kendra</a>."
              }
            ]
          },
          "S3Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda\">Data contracts for Lambda functions</a>."
              }
            ]
          }
        },
        "description": "<p>Provides the configuration information for invoking a Lambda function in Lambda to alter document metadata and content when ingesting documents into Amazon Kendra. You can configure your Lambda function using <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html\">PreExtractionHookConfiguration</a> if you want to apply advanced alterations on the original or raw documents. If you want to apply advanced alterations on the Amazon Kendra structured documents, you must configure your Lambda function using <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_CustomDocumentEnrichmentConfiguration.html\">PostExtractionHookConfiguration</a>. You can only invoke one Lambda function. However, this function can invoke other functions it requires.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html\">Customizing document metadata during the ingestion process</a>.</p>"
      },
      "LambdaArn": {
        "type": "string",
        "pattern": "/arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?/",
        "minLength": 1,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://kendra.us-east-1.amazonaws.com/#X-Amz-Target=AWSKendraFrontendService.BatchPutDocument"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FailedDocuments**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
