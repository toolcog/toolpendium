{
  "name": "UpdateIndex",
  "description": "Updates an existing Amazon Kendra index.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSKendraFrontendService.UpdateIndex"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateIndexRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateIndexRequest": {
        "type": "object",
        "required": [
          "Id"
        ],
        "title": "UpdateIndexRequest",
        "properties": {
          "Id": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexId"
              },
              {
                "description": "The identifier of the index you want to update."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "The name of the index you want to update."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "An Identity and Access Management (IAM) role that gives Amazon Kendra permission to access Amazon CloudWatch logs and metrics."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A new description for the index."
              }
            ]
          },
          "DocumentMetadataConfigurationUpdates": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentMetadataConfigurationList"
              },
              {
                "description": "The document metadata configuration you want to update for the index. Document metadata are fields or attributes associated with your documents. For example, the company department name associated with each document."
              }
            ]
          },
          "CapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/CapacityUnitsConfiguration"
              },
              {
                "description": "<p>Sets the number of additional document storage and query capacity units that should be used by the index. You can change the capacity of the index up to 5 times per day, or make 5 API calls.</p> <p>If you are using extra storage units, you can't reduce the storage capacity below what is required to meet the storage needs for your index.</p>"
              }
            ]
          },
          "UserTokenConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/UserTokenConfigurationList"
              },
              {
                "description": "The user token configuration."
              }
            ]
          },
          "UserContextPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/UserContextPolicy"
              },
              {
                "description": "The user context policy."
              }
            ]
          },
          "UserGroupResolutionConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/UserGroupResolutionConfiguration"
              },
              {
                "description": "Enables fetching access levels of groups and users from an IAM Identity Center (successor to Single Sign-On) identity source. To configure this, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html\">UserGroupResolutionConfiguration</a>."
              }
            ]
          }
        }
      },
      "IndexId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9-]*",
        "minLength": 36,
        "maxLength": 36
      },
      "IndexName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 1000
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
        "minLength": 0,
        "maxLength": 1284
      },
      "Description": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 0,
        "maxLength": 1000
      },
      "DocumentMetadataConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DocumentMetadataConfiguration"
        },
        "minItems": 0,
        "maxItems": 500
      },
      "DocumentMetadataConfiguration": {
        "type": "object",
        "required": [
          "Name",
          "Type"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentMetadataConfigurationName"
              },
              {
                "description": "The name of the index field."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeValueType"
              },
              {
                "description": "The data type of the index field. "
              }
            ]
          },
          "Relevance": {
            "allOf": [
              {
                "$ref": "#/$defs/Relevance"
              },
              {
                "description": "Provides tuning parameters to determine how the field affects the search results."
              }
            ]
          },
          "Search": {
            "allOf": [
              {
                "$ref": "#/$defs/Search"
              },
              {
                "description": "Provides information about how the field is used during a search."
              }
            ]
          }
        },
        "description": "Specifies the properties, such as relevance tuning and searchability, of an index field."
      },
      "DocumentMetadataConfigurationName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 30
      },
      "DocumentAttributeValueType": {
        "type": "string",
        "enum": [
          "STRING_VALUE",
          "STRING_LIST_VALUE",
          "LONG_VALUE",
          "DATE_VALUE"
        ]
      },
      "Relevance": {
        "type": "object",
        "properties": {
          "Freshness": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentMetadataBoolean"
              },
              {
                "description": "Indicates that this field determines how \"fresh\" a document is. For example, if document 1 was created on November 5, and document 2 was created on October 31, document 1 is \"fresher\" than document 2. You can only set the <code>Freshness</code> field on one <code>DATE</code> type field. Only applies to <code>DATE</code> fields."
              }
            ]
          },
          "Importance": {
            "allOf": [
              {
                "$ref": "#/$defs/Importance"
              },
              {
                "description": "The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers."
              }
            ]
          },
          "Duration": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "<p>Specifies the time period that the boost applies to. For example, to make the boost apply to documents with the field value within the last month, you would use \"2628000s\". Once the field value is beyond the specified range, the effect of the boost drops off. The higher the importance, the faster the effect drops off. If you don't specify a value, the default is 3 months. The value of the field is a numeric string followed by the character \"s\", for example \"86400s\" for one day, or \"604800s\" for one week. </p> <p>Only applies to <code>DATE</code> fields.</p>"
              }
            ]
          },
          "RankOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/Order"
              },
              {
                "description": "<p>Determines how values should be interpreted.</p> <p>When the <code>RankOrder</code> field is <code>ASCENDING</code>, higher numbers are better. For example, a document with a rating score of 10 is higher ranking than a document with a rating score of 1.</p> <p>When the <code>RankOrder</code> field is <code>DESCENDING</code>, lower numbers are better. For example, in a task tracking application, a priority 1 task is more important than a priority 5 task.</p> <p>Only applies to <code>LONG</code> and <code>DOUBLE</code> fields.</p>"
              }
            ]
          },
          "ValueImportanceMap": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueImportanceMap"
              },
              {
                "description": "<p>A list of values that should be given a different boost when they appear in the result list. For example, if you are boosting a field called \"department,\" query terms that match the department field are boosted in the result. However, you can add entries from the department field to boost documents with those values higher. </p> <p>For example, you can add entries to the map with names of departments. If you add \"HR\",5 and \"Legal\",3 those departments are given special attention when they appear in the metadata of a document. When those terms appear they are given the specified importance instead of the regular importance for the boost.</p>"
              }
            ]
          }
        },
        "description": "Provides information for tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters."
      },
      "DocumentMetadataBoolean": {
        "type": "boolean"
      },
      "Importance": {
        "type": "integer",
        "minimum": 1,
        "maximum": 10
      },
      "Duration": {
        "type": "string",
        "pattern": "[0-9]+[s]",
        "minLength": 1,
        "maxLength": 10
      },
      "Order": {
        "type": "string",
        "enum": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "ValueImportanceMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Importance"
        }
      },
      "Search": {
        "type": "object",
        "properties": {
          "Facetable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is <code>false</code> ."
              }
            ]
          },
          "Searchable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Determines whether the field is used in the search. If the <code>Searchable</code> field is <code>true</code>, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is <code>true</code> for string fields and <code>false</code> for number and date fields."
              }
            ]
          },
          "Displayable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Determines whether the field is returned in the query response. The default is <code>true</code>."
              }
            ]
          },
          "Sortable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have <code>Sortable</code> set to <code>true</code>, Amazon Kendra returns an exception. The default is <code>false</code>."
              }
            ]
          }
        },
        "description": "Provides information about how a custom index field is used during a search."
      },
      "Boolean": {
        "type": "boolean"
      },
      "CapacityUnitsConfiguration": {
        "type": "object",
        "required": [
          "StorageCapacityUnits",
          "QueryCapacityUnits"
        ],
        "properties": {
          "StorageCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/StorageCapacityUnit"
              },
              {
                "description": "The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. You can add up to 100 extra capacity units."
              }
            ]
          },
          "QueryCapacityUnits": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryCapacityUnit"
              },
              {
                "description": "<p>The amount of extra query capacity for an index and <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html\">GetQuerySuggestions</a> capacity.</p> <p>A single extra capacity unit for an index provides 0.1 queries per second or approximately 8,000 queries per day. You can add up to 100 extra capacity units.</p> <p> <code>GetQuerySuggestions</code> capacity is five times the provisioned query capacity for an index, or the base capacity of 2.5 calls per second, whichever is higher. For example, the base capacity for an index is 0.1 queries per second, and <code>GetQuerySuggestions</code> capacity has a base of 2.5 calls per second. If you add another 0.1 queries per second to total 0.2 queries per second for an index, the <code>GetQuerySuggestions</code> capacity is 2.5 calls per second (higher than five times 0.2 queries per second).</p>"
              }
            ]
          }
        },
        "description": "Specifies additional capacity units configured for your Enterprise Edition index. You can add and remove capacity units to fit your usage requirements."
      },
      "StorageCapacityUnit": {
        "type": "integer",
        "minimum": 0
      },
      "QueryCapacityUnit": {
        "type": "integer",
        "minimum": 0
      },
      "UserTokenConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/UserTokenConfiguration"
        },
        "maxItems": 1
      },
      "UserTokenConfiguration": {
        "type": "object",
        "properties": {
          "JwtTokenTypeConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/JwtTokenTypeConfiguration"
              },
              {
                "description": "Information about the JWT token type configuration."
              }
            ]
          },
          "JsonTokenTypeConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonTokenTypeConfiguration"
              },
              {
                "description": "Information about the JSON token type configuration."
              }
            ]
          }
        },
        "description": "Provides the configuration information for a token."
      },
      "JwtTokenTypeConfiguration": {
        "type": "object",
        "required": [
          "KeyLocation"
        ],
        "properties": {
          "KeyLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyLocation"
              },
              {
                "description": "The location of the key."
              }
            ]
          },
          "URL": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "The signing key URL."
              }
            ]
          },
          "SecretManagerArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (arn) of the secret."
              }
            ]
          },
          "UserNameAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/UserNameAttributeField"
              },
              {
                "description": "The user name attribute field."
              }
            ]
          },
          "GroupAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupAttributeField"
              },
              {
                "description": "The group attribute field."
              }
            ]
          },
          "Issuer": {
            "allOf": [
              {
                "$ref": "#/$defs/Issuer"
              },
              {
                "description": "The issuer of the token."
              }
            ]
          },
          "ClaimRegex": {
            "allOf": [
              {
                "$ref": "#/$defs/ClaimRegex"
              },
              {
                "description": "The regular expression that identifies the claim."
              }
            ]
          }
        },
        "description": "Provides the configuration information for the JWT token type."
      },
      "KeyLocation": {
        "type": "string",
        "enum": [
          "URL",
          "SECRET_MANAGER"
        ]
      },
      "Url": {
        "type": "string",
        "pattern": "^(https?|ftp|file):\\/\\/([^\\s]*)",
        "minLength": 1,
        "maxLength": 2048
      },
      "UserNameAttributeField": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100
      },
      "GroupAttributeField": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100
      },
      "Issuer": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 65
      },
      "ClaimRegex": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100
      },
      "JsonTokenTypeConfiguration": {
        "type": "object",
        "required": [
          "UserNameAttributeField",
          "GroupAttributeField"
        ],
        "properties": {
          "UserNameAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The user name attribute field."
              }
            ]
          },
          "GroupAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The group attribute field."
              }
            ]
          }
        },
        "description": "Provides the configuration information for the JSON token type."
      },
      "String": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "UserContextPolicy": {
        "type": "string",
        "enum": [
          "ATTRIBUTE_FILTER",
          "USER_TOKEN"
        ]
      },
      "UserGroupResolutionConfiguration": {
        "type": "object",
        "required": [
          "UserGroupResolutionMode"
        ],
        "properties": {
          "UserGroupResolutionMode": {
            "allOf": [
              {
                "$ref": "#/$defs/UserGroupResolutionMode"
              },
              {
                "description": "The identity store provider (mode) you want to use to get users and groups. IAM Identity Center (successor to Single Sign-On) is currently the only available mode. Your users and groups must exist in an IAM Identity Center identity source in order to use this mode."
              }
            ]
          }
        },
        "description": "<p>Provides the configuration information to get users and groups from an IAM Identity Center (successor to Single Sign-On) identity source. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can also use the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html\">PutPrincipalMapping</a> API to map users to their groups so that you only need to provide the user ID when you issue the query.</p> <p>To set up an IAM Identity Center identity source in the console to use with Amazon Kendra, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html\">Getting started with an IAM Identity Center identity source</a>. You must also grant the required permissions to use IAM Identity Center with Amazon Kendra. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso\">IAM roles for IAM Identity Center</a>.</p> <p>Amazon Kendra currently does not support using <code>UserGroupResolutionConfiguration</code> with an Amazon Web Services organization member account for your IAM Identity Center identify source. You must create your index in the management account for the organization in order to use <code>UserGroupResolutionConfiguration</code>.</p>"
      },
      "UserGroupResolutionMode": {
        "type": "string",
        "enum": [
          "AWS_SSO",
          "NONE"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://kendra.us-east-1.amazonaws.com/#X-Amz-Target=AWSKendraFrontendService.UpdateIndex"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
