{
  "name": "CreateIndex",
  "description": "<p>Creates an Amazon Kendra index. Index creation is an asynchronous API. To determine if index creation has completed, check the <code>Status</code> field returned from a call to <code>DescribeIndex</code>. The <code>Status</code> field is set to <code>ACTIVE</code> when the index is ready to use.</p> <p>Once the index is active you can index your documents using the <code>BatchPutDocument</code> API or using one of the supported data sources.</p> <p>For an example of creating an index and data source using the Python SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/gs-python.html\">Getting started with Python SDK</a>. For an example of creating an index and data source using the Java SDK, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/gs-java.html\">Getting started with Java SDK</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSKendraFrontendService.CreateIndex"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateIndexRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateIndexRequest": {
        "type": "object",
        "required": [
          "Name",
          "RoleArn"
        ],
        "title": "CreateIndexRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexName"
              },
              {
                "description": "A name for the index."
              }
            ]
          },
          "Edition": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexEdition"
              },
              {
                "description": "<p>The Amazon Kendra edition to use for the index. Choose <code>DEVELOPER_EDITION</code> for indexes intended for development, testing, or proof of concept. Use <code>ENTERPRISE_EDITION</code> for production. Once you set the edition for an index, it can't be changed.</p> <p>The <code>Edition</code> parameter is optional. If you don't supply a value, the default is <code>ENTERPRISE_EDITION</code>.</p> <p>For more information on quota limits for Enterprise and Developer editions, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/quotas.html\">Quotas</a>.</p>"
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of an IAM role with permission to access your Amazon CloudWatch logs and metrics. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html\">IAM access roles for Amazon Kendra</a>."
              }
            ]
          },
          "ServerSideEncryptionConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/ServerSideEncryptionConfiguration"
              },
              {
                "description": "The identifier of the KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "A description for the index."
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientTokenName"
              },
              {
                "description": "A token that you provide to identify the request to create an index. Multiple calls to the <code>CreateIndex</code> API with the same client token will create only one index."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "A list of key-value pairs that identify or categorize the index. You can also use tags to help control access to the index. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @."
              }
            ]
          },
          "UserTokenConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/UserTokenConfigurationList"
              },
              {
                "description": "The user token configuration."
              }
            ]
          },
          "UserContextPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/UserContextPolicy"
              },
              {
                "description": "<p>The user context policy.</p> <dl> <dt>ATTRIBUTE_FILTER</dt> <dd> <p>All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of <code>_user_id</code> and <code>_group_ids</code> or you can provide user and group information in <code>UserContext</code>. </p> </dd> <dt>USER_TOKEN</dt> <dd> <p>Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable. </p> </dd> </dl>"
              }
            ]
          },
          "UserGroupResolutionConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/UserGroupResolutionConfiguration"
              },
              {
                "description": "Gets users and groups from IAM Identity Center (successor to Single Sign-On) identity source. To configure this, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_UserGroupResolutionConfiguration.html\">UserGroupResolutionConfiguration</a>."
              }
            ]
          }
        }
      },
      "IndexName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 1000
      },
      "IndexEdition": {
        "type": "string",
        "enum": [
          "DEVELOPER_EDITION",
          "ENTERPRISE_EDITION"
        ]
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
        "minLength": 0,
        "maxLength": 1284
      },
      "ServerSideEncryptionConfiguration": {
        "type": "object",
        "properties": {
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "The identifier of the KMS key. Amazon Kendra doesn't support asymmetric keys."
              }
            ]
          }
        },
        "description": "Provides the identifier of the KMS key used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric keys."
      },
      "KmsKeyId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048,
        "format": "password"
      },
      "Description": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 0,
        "maxLength": 1000
      },
      "ClientTokenName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key for the tag. Keys are not case sensitive and must be unique for the index, FAQ, or data source."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value associated with the tag. The value may be an empty string but it can't be null."
              }
            ]
          }
        },
        "description": "A list of key/value pairs that identify an index, FAQ, or data source. Tag keys and values can consist of Unicode letters, digits, white space, and any of the following symbols: _ . : / = + - @."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "UserTokenConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/UserTokenConfiguration"
        },
        "maxItems": 1
      },
      "UserTokenConfiguration": {
        "type": "object",
        "properties": {
          "JwtTokenTypeConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/JwtTokenTypeConfiguration"
              },
              {
                "description": "Information about the JWT token type configuration."
              }
            ]
          },
          "JsonTokenTypeConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonTokenTypeConfiguration"
              },
              {
                "description": "Information about the JSON token type configuration."
              }
            ]
          }
        },
        "description": "Provides the configuration information for a token."
      },
      "JwtTokenTypeConfiguration": {
        "type": "object",
        "required": [
          "KeyLocation"
        ],
        "properties": {
          "KeyLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/KeyLocation"
              },
              {
                "description": "The location of the key."
              }
            ]
          },
          "URL": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "The signing key URL."
              }
            ]
          },
          "SecretManagerArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (arn) of the secret."
              }
            ]
          },
          "UserNameAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/UserNameAttributeField"
              },
              {
                "description": "The user name attribute field."
              }
            ]
          },
          "GroupAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupAttributeField"
              },
              {
                "description": "The group attribute field."
              }
            ]
          },
          "Issuer": {
            "allOf": [
              {
                "$ref": "#/$defs/Issuer"
              },
              {
                "description": "The issuer of the token."
              }
            ]
          },
          "ClaimRegex": {
            "allOf": [
              {
                "$ref": "#/$defs/ClaimRegex"
              },
              {
                "description": "The regular expression that identifies the claim."
              }
            ]
          }
        },
        "description": "Provides the configuration information for the JWT token type."
      },
      "KeyLocation": {
        "type": "string",
        "enum": [
          "URL",
          "SECRET_MANAGER"
        ]
      },
      "Url": {
        "type": "string",
        "pattern": "^(https?|ftp|file):\\/\\/([^\\s]*)",
        "minLength": 1,
        "maxLength": 2048
      },
      "UserNameAttributeField": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100
      },
      "GroupAttributeField": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100
      },
      "Issuer": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 65
      },
      "ClaimRegex": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100
      },
      "JsonTokenTypeConfiguration": {
        "type": "object",
        "required": [
          "UserNameAttributeField",
          "GroupAttributeField"
        ],
        "properties": {
          "UserNameAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The user name attribute field."
              }
            ]
          },
          "GroupAttributeField": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The group attribute field."
              }
            ]
          }
        },
        "description": "Provides the configuration information for the JSON token type."
      },
      "String": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "UserContextPolicy": {
        "type": "string",
        "enum": [
          "ATTRIBUTE_FILTER",
          "USER_TOKEN"
        ]
      },
      "UserGroupResolutionConfiguration": {
        "type": "object",
        "required": [
          "UserGroupResolutionMode"
        ],
        "properties": {
          "UserGroupResolutionMode": {
            "allOf": [
              {
                "$ref": "#/$defs/UserGroupResolutionMode"
              },
              {
                "description": "The identity store provider (mode) you want to use to get users and groups. IAM Identity Center (successor to Single Sign-On) is currently the only available mode. Your users and groups must exist in an IAM Identity Center identity source in order to use this mode."
              }
            ]
          }
        },
        "description": "<p>Provides the configuration information to get users and groups from an IAM Identity Center (successor to Single Sign-On) identity source. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. You can also use the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/API_PutPrincipalMapping.html\">PutPrincipalMapping</a> API to map users to their groups so that you only need to provide the user ID when you issue the query.</p> <p>To set up an IAM Identity Center identity source in the console to use with Amazon Kendra, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/getting-started-aws-sso.html\">Getting started with an IAM Identity Center identity source</a>. You must also grant the required permissions to use IAM Identity Center with Amazon Kendra. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-aws-sso\">IAM roles for IAM Identity Center</a>.</p> <p>Amazon Kendra currently does not support using <code>UserGroupResolutionConfiguration</code> with an Amazon Web Services organization member account for your IAM Identity Center identify source. You must create your index in the management account for the organization in order to use <code>UserGroupResolutionConfiguration</code>.</p>"
      },
      "UserGroupResolutionMode": {
        "type": "string",
        "enum": [
          "AWS_SSO",
          "NONE"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://kendra.us-east-1.amazonaws.com/#X-Amz-Target=AWSKendraFrontendService.CreateIndex"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Id**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
