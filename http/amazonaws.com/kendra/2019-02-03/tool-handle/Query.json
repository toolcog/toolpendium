{
  "name": "Query",
  "description": "<p>Searches an index given an input query.</p> <p>You can configure boosting or relevance tuning at the query level to override boosting at the index level, filter based on document fields/attributes and faceted search, and filter based on the user or their group access to documents. You can also include certain fields in the response that might provide useful additional information.</p> <p>A query response contains three types of results.</p> <ul> <li> <p>Relevant suggested answers. The answers can be either a text excerpt or table excerpt. The answer can be highlighted in the excerpt.</p> </li> <li> <p>Matching FAQs or questions-answer from your FAQ file.</p> </li> <li> <p>Relevant documents. This result type includes an excerpt of the document with the document title. The searched terms can be highlighted in the excerpt.</p> </li> </ul> <p>You can specify that the query return only one type of result using the <code>QueryResultTypeFilter</code> parameter. Each query returns the 100 most relevant results. If you filter result type to only question-answers, a maximum of four results are returned. If you filter result type to only answers, a maximum of three results are returned.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSKendraFrontendService.Query"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/QueryRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "QueryRequest": {
        "type": "object",
        "required": [
          "IndexId"
        ],
        "title": "QueryRequest",
        "properties": {
          "IndexId": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexId"
              },
              {
                "description": "The identifier of the index for the search."
              }
            ]
          },
          "QueryText": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryText"
              },
              {
                "description": "The input query text for the search. Amazon Kendra truncates queries at 30 token words, which excludes punctuation and stop words. Truncation still applies if you use Boolean or more advanced, complex queries. "
              }
            ]
          },
          "AttributeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilter"
              },
              {
                "description": "<p>Filters search results by document fields/attributes. You can only provide one attribute filter; however, the <code>AndAllFilters</code>, <code>NotFilter</code>, and <code>OrAllFilters</code> parameters contain a list of other filters.</p> <p>The <code>AttributeFilter</code> parameter means you can create a set of filtering rules that a document must satisfy to be included in the query results.</p>"
              }
            ]
          },
          "Facets": {
            "allOf": [
              {
                "$ref": "#/$defs/FacetList"
              },
              {
                "description": "An array of documents fields/attributes for faceted search. Amazon Kendra returns a count for each field key specified. This helps your users narrow their search."
              }
            ]
          },
          "RequestedDocumentAttributes": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKeyList"
              },
              {
                "description": "An array of document fields/attributes to include in the response. You can limit the response to include certain document fields. By default, all document attributes are included in the response."
              }
            ]
          },
          "QueryResultTypeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryResultType"
              },
              {
                "description": "Sets the type of query result or response. Only results for the specified type are returned."
              }
            ]
          },
          "DocumentRelevanceOverrideConfigurations": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentRelevanceOverrideConfigurationList"
              },
              {
                "description": "<p>Overrides relevance tuning configurations of fields/attributes set at the index level.</p> <p>If you use this API to override the relevance tuning configured at the index level, but there is no relevance tuning configured at the index level, then Amazon Kendra does not apply any relevance tuning.</p> <p>If there is relevance tuning configured for fields at the index level, and you use this API to override only some of these fields, then for the fields you did not override, the importance is set to 1.</p>"
              }
            ]
          },
          "PageNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Query results are returned in pages the size of the <code>PageSize</code> parameter. By default, Amazon Kendra returns the first page of results. Use this parameter to get result pages after the first one."
              }
            ]
          },
          "PageSize": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Sets the number of results that are returned in each page of results. The default page size is 10. The maximum number of results returned is 100. If you ask for more than 100 results, only 100 are returned."
              }
            ]
          },
          "SortingConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SortingConfiguration"
              },
              {
                "description": "<p>Provides information that determines how the results of the query are sorted. You can set the field that Amazon Kendra should sort the results on, and specify whether the results should be sorted in ascending or descending order. In the case of ties in sorting the results, the results are sorted by relevance.</p> <p>If you don't provide sorting configuration, the results are sorted by the relevance that Amazon Kendra determines for the result.</p>"
              }
            ]
          },
          "UserContext": {
            "allOf": [
              {
                "$ref": "#/$defs/UserContext"
              },
              {
                "description": "The user context token or user and group information."
              }
            ]
          },
          "VisitorId": {
            "allOf": [
              {
                "$ref": "#/$defs/VisitorId"
              },
              {
                "description": "Provides an identifier for a specific user. The <code>VisitorId</code> should be a unique identifier, such as a GUID. Don't use personally identifiable information, such as the user's email address, as the <code>VisitorId</code>."
              }
            ]
          },
          "SpellCorrectionConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/SpellCorrectionConfiguration"
              },
              {
                "description": "Enables suggested spell corrections for queries."
              }
            ]
          }
        }
      },
      "IndexId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9-]*",
        "minLength": 36,
        "maxLength": 36
      },
      "QueryText": {
        "type": "string"
      },
      "AttributeFilter": {
        "type": "object",
        "properties": {
          "AndAllFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilterList"
              },
              {
                "description": "Performs a logical <code>AND</code> operation on all supplied filters."
              }
            ]
          },
          "OrAllFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilterList"
              },
              {
                "description": "Performs a logical <code>OR</code> operation on all supplied filters."
              }
            ]
          },
          "NotFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeFilter"
              },
              {
                "description": "Performs a logical <code>NOT</code> operation on all supplied filters."
              }
            ]
          },
          "EqualsTo": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs an equals operation on two document attributes or metadata fields."
              }
            ]
          },
          "ContainsAll": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Returns true when a document contains all of the specified document attributes or metadata fields. This filter is only applicable to <code>StringListValue</code> metadata."
              }
            ]
          },
          "ContainsAny": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Returns true when a document contains any of the specified document attributes or metadata fields. This filter is only applicable to <code>StringListValue</code> metadata."
              }
            ]
          },
          "GreaterThan": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a greater than operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          },
          "GreaterThanOrEquals": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a greater or equals than operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          },
          "LessThan": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a less than operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          },
          "LessThanOrEquals": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttribute"
              },
              {
                "description": "Performs a less than or equals operation on two document attributes or metadata fields. Use with a document attribute of type <code>Date</code> or <code>Long</code>."
              }
            ]
          }
        },
        "description": "<p>Provides filtering the query results based on document attributes or metadata fields.</p> <p>When you use the <code>AndAllFilters</code> or <code>OrAllFilters</code>, filters you can use 2 layers under the first attribute filter. For example, you can use:</p> <p> <code>&lt;AndAllFilters&gt;</code> </p> <ol> <li> <p> <code> &lt;OrAllFilters&gt;</code> </p> </li> <li> <p> <code> &lt;EqualsTo&gt;</code> </p> </li> </ol> <p>If you use more than 2 layers, you receive a <code>ValidationException</code> exception with the message \"<code>AttributeFilter</code> cannot have a depth of more than 2.\"</p> <p>If you use more than 10 attribute filters in a given list for <code>AndAllFilters</code> or <code>OrAllFilters</code>, you receive a <code>ValidationException</code> with the message \"<code>AttributeFilter</code> cannot have a length of more than 10\".</p>"
      },
      "AttributeFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeFilter"
        }
      },
      "DocumentAttribute": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "The identifier for the attribute."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeValue"
              },
              {
                "description": "The value of the attribute."
              }
            ]
          }
        },
        "description": "A document attribute or metadata field. To create custom document attributes, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/custom-attributes.html\">Custom attributes</a>."
      },
      "DocumentAttributeKey": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 200
      },
      "DocumentAttributeValue": {
        "type": "object",
        "properties": {
          "StringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeStringValue"
              },
              {
                "description": "A string, such as \"department\"."
              }
            ]
          },
          "StringListValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeStringListValue"
              },
              {
                "description": "A list of strings. The default maximum length or number of strings is 10."
              }
            ]
          },
          "LongValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "A long integer value."
              }
            ]
          },
          "DateValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "<p>A date expressed as an ISO 8601 string.</p> <p>It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.</p>"
              }
            ]
          }
        },
        "description": "The value of a document attribute. You can only provide one value for a document attribute."
      },
      "DocumentAttributeStringValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "DocumentAttributeStringListValue": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "Long": {
        "type": "integer"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "FacetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Facet"
        }
      },
      "Facet": {
        "type": "object",
        "properties": {
          "DocumentAttributeKey": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "The unique key for the document attribute."
              }
            ]
          },
          "Facets": {
            "allOf": [
              {
                "$ref": "#/$defs/FacetList"
              },
              {
                "description": "<p>An array of document attributes that are nested facets within a facet.</p> <p>For example, the document attribute or facet \"Department\" includes a value called \"Engineering\". In addition, the document attribute or facet \"SubDepartment\" includes the values \"Frontend\" and \"Backend\" for documents assigned to \"Engineering\". You can display nested facets in the search results so that documents can be searched not only by department but also by a sub department within a department. This helps your users further narrow their search.</p> <p>You can only have one nested facet within a facet. If you want to increase this limit, contact <a href=\"http://aws.amazon.com/contact-us/\">Support</a>.</p>"
              }
            ]
          },
          "MaxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/TopDocumentAttributeValueCountPairsSize"
              },
              {
                "description": "Maximum number of facet values per facet. The default is 10. You can use this to limit the number of facet values to less than 10. If you want to increase the default, contact <a href=\"http://aws.amazon.com/contact-us/\">Support</a>."
              }
            ]
          }
        },
        "description": "<p>Information about a document attribute. You can use document attributes as facets.</p> <p>For example, the document attribute or facet \"Department\" includes the values \"HR\", \"Engineering\", and \"Accounting\". You can display these values in the search results so that documents can be searched by department.</p> <p>You can display up to 10 facet values per facet for a query. If you want to increase this limit, contact <a href=\"http://aws.amazon.com/contact-us/\">Support</a>.</p>"
      },
      "TopDocumentAttributeValueCountPairsSize": {
        "type": "integer",
        "minimum": 0,
        "maximum": 5000
      },
      "DocumentAttributeKeyList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DocumentAttributeKey"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "QueryResultType": {
        "type": "string",
        "enum": [
          "DOCUMENT",
          "QUESTION_ANSWER",
          "ANSWER"
        ]
      },
      "DocumentRelevanceOverrideConfigurationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DocumentRelevanceConfiguration"
        },
        "minItems": 0,
        "maxItems": 500
      },
      "DocumentRelevanceConfiguration": {
        "type": "object",
        "required": [
          "Name",
          "Relevance"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentMetadataConfigurationName"
              },
              {
                "description": "The name of the index field."
              }
            ]
          },
          "Relevance": {
            "allOf": [
              {
                "$ref": "#/$defs/Relevance"
              },
              {
                "description": "Provides information for tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters."
              }
            ]
          }
        },
        "description": "Overrides the document relevance properties of a custom index field."
      },
      "DocumentMetadataConfigurationName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 30
      },
      "Relevance": {
        "type": "object",
        "properties": {
          "Freshness": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentMetadataBoolean"
              },
              {
                "description": "Indicates that this field determines how \"fresh\" a document is. For example, if document 1 was created on November 5, and document 2 was created on October 31, document 1 is \"fresher\" than document 2. You can only set the <code>Freshness</code> field on one <code>DATE</code> type field. Only applies to <code>DATE</code> fields."
              }
            ]
          },
          "Importance": {
            "allOf": [
              {
                "$ref": "#/$defs/Importance"
              },
              {
                "description": "The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers."
              }
            ]
          },
          "Duration": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "<p>Specifies the time period that the boost applies to. For example, to make the boost apply to documents with the field value within the last month, you would use \"2628000s\". Once the field value is beyond the specified range, the effect of the boost drops off. The higher the importance, the faster the effect drops off. If you don't specify a value, the default is 3 months. The value of the field is a numeric string followed by the character \"s\", for example \"86400s\" for one day, or \"604800s\" for one week. </p> <p>Only applies to <code>DATE</code> fields.</p>"
              }
            ]
          },
          "RankOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/Order"
              },
              {
                "description": "<p>Determines how values should be interpreted.</p> <p>When the <code>RankOrder</code> field is <code>ASCENDING</code>, higher numbers are better. For example, a document with a rating score of 10 is higher ranking than a document with a rating score of 1.</p> <p>When the <code>RankOrder</code> field is <code>DESCENDING</code>, lower numbers are better. For example, in a task tracking application, a priority 1 task is more important than a priority 5 task.</p> <p>Only applies to <code>LONG</code> and <code>DOUBLE</code> fields.</p>"
              }
            ]
          },
          "ValueImportanceMap": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueImportanceMap"
              },
              {
                "description": "<p>A list of values that should be given a different boost when they appear in the result list. For example, if you are boosting a field called \"department,\" query terms that match the department field are boosted in the result. However, you can add entries from the department field to boost documents with those values higher. </p> <p>For example, you can add entries to the map with names of departments. If you add \"HR\",5 and \"Legal\",3 those departments are given special attention when they appear in the metadata of a document. When those terms appear they are given the specified importance instead of the regular importance for the boost.</p>"
              }
            ]
          }
        },
        "description": "Provides information for tuning the relevance of a field in a search. When a query includes terms that match the field, the results are given a boost in the response based on these tuning parameters."
      },
      "DocumentMetadataBoolean": {
        "type": "boolean"
      },
      "Importance": {
        "type": "integer",
        "minimum": 1,
        "maximum": 10
      },
      "Duration": {
        "type": "string",
        "pattern": "[0-9]+[s]",
        "minLength": 1,
        "maxLength": 10
      },
      "Order": {
        "type": "string",
        "enum": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "ValueImportanceMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Importance"
        }
      },
      "Integer": {
        "type": "integer"
      },
      "SortingConfiguration": {
        "type": "object",
        "required": [
          "DocumentAttributeKey",
          "SortOrder"
        ],
        "properties": {
          "DocumentAttributeKey": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentAttributeKey"
              },
              {
                "description": "<p>The name of the document attribute used to sort the response. You can use any field that has the <code>Sortable</code> flag set to true.</p> <p>You can also sort by any of the following built-in attributes:</p> <ul> <li> <p>_category</p> </li> <li> <p>_created_at</p> </li> <li> <p>_last_updated_at</p> </li> <li> <p>_version</p> </li> <li> <p>_view_count</p> </li> </ul>"
              }
            ]
          },
          "SortOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/SortOrder"
              },
              {
                "description": "The order that the results should be returned in. In case of ties, the relevance assigned to the result by Amazon Kendra is used as the tie-breaker."
              }
            ]
          }
        },
        "description": "<p>Specifies the document attribute to use to sort the response to a Amazon Kendra query. You can specify a single attribute for sorting. The attribute must have the <code>Sortable</code> flag set to <code>true</code>, otherwise Amazon Kendra returns an exception.</p> <p>You can sort attributes of the following types.</p> <ul> <li> <p>Date value</p> </li> <li> <p>Long value</p> </li> <li> <p>String value</p> </li> </ul> <p>You can't sort attributes of the following type.</p> <ul> <li> <p>String list value</p> </li> </ul>"
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "DESC",
          "ASC"
        ]
      },
      "UserContext": {
        "type": "object",
        "properties": {
          "Token": {
            "allOf": [
              {
                "$ref": "#/$defs/Token"
              },
              {
                "description": "The user context token for filtering search results for a user. It must be a JWT or a JSON token."
              }
            ]
          },
          "UserId": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalName"
              },
              {
                "description": "The identifier of the user you want to filter search results based on their access to documents."
              }
            ]
          },
          "Groups": {
            "allOf": [
              {
                "$ref": "#/$defs/Groups"
              },
              {
                "description": "The list of groups you want to filter search results based on the groups' access to documents."
              }
            ]
          },
          "DataSourceGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceGroups"
              },
              {
                "description": "The list of data source groups you want to filter search results based on groups' access to documents in that data source."
              }
            ]
          }
        },
        "description": "<p>Provides information about the user context for an Amazon Kendra index.</p> <p>User context filtering is a kind of personalized search with the benefit of controlling access to documents. For example, not all teams that search the company portal for information should access top-secret company documents, nor are these documents relevant to all users. Only specific users or groups of teams given access to top-secret documents should see these documents in their search results.</p> <p>You provide one of the following:</p> <ul> <li> <p>User token</p> </li> <li> <p>User ID, the groups the user belongs to, and any data sources the groups can access.</p> </li> </ul> <p>If you provide both, an exception is thrown.</p>"
      },
      "Token": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 100000
      },
      "PrincipalName": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 200
      },
      "Groups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PrincipalName"
        },
        "minItems": 1,
        "maxItems": 2048
      },
      "DataSourceGroups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataSourceGroup"
        },
        "minItems": 1,
        "maxItems": 2048
      },
      "DataSourceGroup": {
        "type": "object",
        "required": [
          "GroupId",
          "DataSourceId"
        ],
        "properties": {
          "GroupId": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalName"
              },
              {
                "description": "The identifier of the group you want to add to your list of groups. This is for filtering search results based on the groups' access to documents."
              }
            ]
          },
          "DataSourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceId"
              },
              {
                "description": "The identifier of the data source group you want to add to your list of data source groups. This is for filtering search results based on the groups' access to documents in that data source."
              }
            ]
          }
        },
        "description": "Data source information for user context filtering."
      },
      "DataSourceId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 100
      },
      "VisitorId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 256
      },
      "SpellCorrectionConfiguration": {
        "type": "object",
        "required": [
          "IncludeQuerySpellCheckSuggestions"
        ],
        "properties": {
          "IncludeQuerySpellCheckSuggestions": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>TRUE</code> to suggest spell corrections for queries."
              }
            ]
          }
        },
        "description": "<p>Provides the configuration information for suggested query spell corrections.</p> <p>Suggested spell corrections are based on words that appear in your indexed documents and how closely a corrected word matches a misspelled word.</p> <p>This feature is designed with certain defaults or limits. For information on the current limits and how to request more support for some limits, see the <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/query-spell-check.html\">Spell Checker documentation</a>.</p>"
      },
      "Boolean": {
        "type": "boolean"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://kendra.us-east-1.amazonaws.com/#X-Amz-Target=AWSKendraFrontendService.Query"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**QueryId**",
            "**ResultItems**",
            "**FacetResults**",
            "**TotalNumberOfResults**",
            "**Warnings**",
            "**SpellCorrectedQueries**",
            "**FeaturedResultsItems**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
