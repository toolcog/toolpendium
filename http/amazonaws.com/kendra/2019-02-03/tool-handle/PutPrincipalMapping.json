{
  "name": "PutPrincipalMapping",
  "description": "<p>Maps users to their groups so that you only need to provide the user ID when you issue the query.</p> <p>You can also map sub groups to groups. For example, the group \"Company Intellectual Property Teams\" includes sub groups \"Research\" and \"Engineering\". These sub groups include their own list of users or people who work in these teams. Only users who work in research and engineering, and therefore belong in the intellectual property group, can see top-secret company documents in their search results.</p> <p>This is useful for user context filtering, where search results are filtered based on the user or their group access to documents. For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html\">Filtering on user context</a>.</p> <p>If more than five <code>PUT</code> actions for a group are currently processing, a validation exception is thrown.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSKendraFrontendService.PutPrincipalMapping"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutPrincipalMappingRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutPrincipalMappingRequest": {
        "type": "object",
        "required": [
          "IndexId",
          "GroupId",
          "GroupMembers"
        ],
        "title": "PutPrincipalMappingRequest",
        "properties": {
          "IndexId": {
            "allOf": [
              {
                "$ref": "#/$defs/IndexId"
              },
              {
                "description": "The identifier of the index you want to map users to their groups."
              }
            ]
          },
          "DataSourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceId"
              },
              {
                "description": "<p>The identifier of the data source you want to map users to their groups.</p> <p>This is useful if a group is tied to multiple data sources, but you only want the group to access documents of a certain data source. For example, the groups \"Research\", \"Engineering\", and \"Sales and Marketing\" are all tied to the company's documents stored in the data sources Confluence and Salesforce. However, \"Sales and Marketing\" team only needs access to customer-related documents stored in Salesforce.</p>"
              }
            ]
          },
          "GroupId": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupId"
              },
              {
                "description": "The identifier of the group you want to map its users to."
              }
            ]
          },
          "GroupMembers": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupMembers"
              },
              {
                "description": "<p>The list that contains your users or sub groups that belong the same group.</p> <p>For example, the group \"Company\" includes the user \"CEO\" and the sub groups \"Research\", \"Engineering\", and \"Sales and Marketing\".</p> <p>If you have more than 1000 users and/or sub groups for a single group, you need to provide the path to the S3 file that lists your users and sub groups for a group. Your sub groups can contain more than 1000 users, but the list of sub groups that belong to a group (and/or users) must be no more than 1000.</p>"
              }
            ]
          },
          "OrderingId": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalOrderingId"
              },
              {
                "description": "<p>The timestamp identifier you specify to ensure Amazon Kendra does not override the latest <code>PUT</code> action with previous actions. The highest number ID, which is the ordering ID, is the latest action you want to process and apply on top of other actions with lower number IDs. This prevents previous actions with lower number IDs from possibly overriding the latest action.</p> <p>The ordering ID can be the Unix time of the last update you made to a group members list. You would then provide this list when calling <code>PutPrincipalMapping</code>. This ensures your <code>PUT</code> action for that updated group with the latest members list doesn't get overwritten by earlier <code>PUT</code> actions for the same group which are yet to be processed.</p> <p>The default ordering ID is the current Unix time in milliseconds that the action was received by Amazon Kendra.</p>"
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "<p>The Amazon Resource Name (ARN) of a role that has access to the S3 file that contains your list of users or sub groups that belong to a group.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html#iam-roles-ds\">IAM roles for Amazon Kendra</a>.</p>"
              }
            ]
          }
        }
      },
      "IndexId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9-]*",
        "minLength": 36,
        "maxLength": 36
      },
      "DataSourceId": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_-]*",
        "minLength": 1,
        "maxLength": 100
      },
      "GroupId": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 1024
      },
      "GroupMembers": {
        "type": "object",
        "properties": {
          "MemberGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/MemberGroups"
              },
              {
                "description": "A list of sub groups that belong to a group. For example, the sub groups \"Research\", \"Engineering\", and \"Sales and Marketing\" all belong to the group \"Company\"."
              }
            ]
          },
          "MemberUsers": {
            "allOf": [
              {
                "$ref": "#/$defs/MemberUsers"
              },
              {
                "description": "A list of users that belong to a group. For example, a list of interns all belong to the \"Interns\" group."
              }
            ]
          },
          "S3PathforGroupMembers": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Path"
              },
              {
                "description": "<p>If you have more than 1000 users and/or sub groups for a single group, you need to provide the path to the S3 file that lists your users and sub groups for a group. Your sub groups can contain more than 1000 users, but the list of sub groups that belong to a group (and/or users) must be no more than 1000.</p> <p>You can download this <a href=\"https://docs.aws.amazon.com/kendra/latest/dg/samples/group_members.zip\">example S3 file</a> that uses the correct format for listing group members. Note, <code>dataSourceId</code> is optional. The value of <code>type</code> for a group is always <code>GROUP</code> and for a user it is always <code>USER</code>.</p>"
              }
            ]
          }
        },
        "description": "A list of users or sub groups that belong to a group. This is useful for user context filtering, where search results are filtered based on the user or their group access to documents."
      },
      "MemberGroups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MemberGroup"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "MemberGroup": {
        "type": "object",
        "required": [
          "GroupId"
        ],
        "properties": {
          "GroupId": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupId"
              },
              {
                "description": "The identifier of the sub group you want to map to a group."
              }
            ]
          },
          "DataSourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSourceId"
              },
              {
                "description": "The identifier of the data source for the sub group you want to map to a group."
              }
            ]
          }
        },
        "description": "The sub groups that belong to a group."
      },
      "MemberUsers": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MemberUser"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "MemberUser": {
        "type": "object",
        "required": [
          "UserId"
        ],
        "properties": {
          "UserId": {
            "allOf": [
              {
                "$ref": "#/$defs/UserId"
              },
              {
                "description": "The identifier of the user you want to map to a group."
              }
            ]
          }
        },
        "description": "The users that belong to a group."
      },
      "UserId": {
        "type": "string",
        "pattern": "^\\P{C}*$",
        "minLength": 1,
        "maxLength": 1024
      },
      "S3Path": {
        "type": "object",
        "required": [
          "Bucket",
          "Key"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the S3 bucket that contains the file."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/S3ObjectKey"
              },
              {
                "description": "The name of the file."
              }
            ]
          }
        },
        "description": "Information required to find a specific file in an Amazon S3 bucket."
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]",
        "minLength": 3,
        "maxLength": 63
      },
      "S3ObjectKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "PrincipalOrderingId": {
        "type": "integer",
        "minimum": 0,
        "maximum": 32535158400000
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
        "minLength": 0,
        "maxLength": 1284
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://kendra.us-east-1.amazonaws.com/#X-Amz-Target=AWSKendraFrontendService.PutPrincipalMapping"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
