{
  "name": "StartModelPackagingJob",
  "description": "<p>Starts an Amazon Lookout for Vision model packaging job. A model packaging job creates an AWS IoT Greengrass component for a Lookout for Vision model. You can use the component to deploy your model to an edge device managed by Greengrass. </p> <p>Use the <a>DescribeModelPackagingJob</a> API to determine the current status of the job. The model packaging job is complete if the value of <code>Status</code> is <code>SUCCEEDED</code>.</p> <p>To deploy the component to the target device, use the component name and component version with the AWS IoT Greengrass <a href=\"https://docs.aws.amazon.com/greengrass/v2/APIReference/API_CreateDeployment.html\">CreateDeployment</a> API.</p> <p>This operation requires the following permissions:</p> <ul> <li> <p> <code>lookoutvision:StartModelPackagingJob</code> </p> </li> <li> <p> <code>s3:PutObject</code> </p> </li> <li> <p> <code>s3:GetBucketLocation</code> </p> </li> <li> <p> <code>kms:GenerateDataKey</code> </p> </li> <li> <p> <code>greengrass:CreateComponentVersion</code> </p> </li> <li> <p> <code>greengrass:DescribeComponent</code> </p> </li> <li> <p>(Optional) <code>greengrass:TagResource</code>. Only required if you want to tag the component.</p> </li> </ul> <p>For more information, see <i>Using your Amazon Lookout for Vision model on an edge device</i> in the Amazon Lookout for Vision Developer Guide. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "projectName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9][a-zA-Z0-9_\\-]*",
        "minLength": 1,
        "maxLength": 255,
        "description": " The name of the project which contains the version of the model that you want to package. "
      },
      "X-Amzn-Client-Token": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 64,
        "description": "<p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModelPackagingJob</code>. In this case, safely retry your call to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p> <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p> <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency token is active for 8 hours. </p>"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "ModelVersion",
          "Configuration"
        ],
        "properties": {
          "ModelVersion": {
            "description": " The version of the model within the project that you want to package. ",
            "type": "string",
            "pattern": "([1-9][0-9]*|latest)",
            "minLength": 1,
            "maxLength": 10
          },
          "JobName": {
            "description": "A name for the model packaging job. If you don't supply a value, the service creates a job name for you. ",
            "type": "string",
            "pattern": "[a-zA-Z0-9-]+",
            "minLength": 1,
            "maxLength": 64
          },
          "Configuration": {
            "description": " Configuration information for a Amazon Lookout for Vision model packaging job. For more information, see <a>StartModelPackagingJob</a>. ",
            "type": "object",
            "properties": {
              "Greengrass": {
                "allOf": [
                  {
                    "$ref": "#/$defs/GreengrassConfiguration"
                  },
                  {
                    "description": " Configuration information for the AWS IoT Greengrass component in a model packaging job. "
                  }
                ]
              }
            }
          },
          "Description": {
            "description": "A description for the model packaging job. ",
            "type": "string",
            "pattern": "[a-zA-Z0-9-_. ()':,;?]+",
            "minLength": 1,
            "maxLength": 256
          }
        }
      }
    },
    "required": [
      "projectName",
      "body"
    ],
    "$defs": {
      "GreengrassConfiguration": {
        "type": "object",
        "required": [
          "S3OutputLocation",
          "ComponentName"
        ],
        "properties": {
          "CompilerOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/CompilerOptions"
              },
              {
                "description": "<p>Additional compiler options for the Greengrass component. Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators are supported. If you specify <code>TargetDevice</code>, don't specify <code>CompilerOptions</code>.</p> <p>For more information, see <i>Compiler options</i> in the Amazon Lookout for Vision Developer Guide. </p>"
              }
            ]
          },
          "TargetDevice": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetDevice"
              },
              {
                "description": "The target device for the model. Currently the only supported value is <code>jetson_xavier</code>. If you specify <code>TargetDevice</code>, you can't specify <code>TargetPlatform</code>. "
              }
            ]
          },
          "TargetPlatform": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetPlatform"
              },
              {
                "description": "The target platform for the model. If you specify <code>TargetPlatform</code>, you can't specify <code>TargetDevice</code>. "
              }
            ]
          },
          "S3OutputLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Location"
              },
              {
                "description": " An S3 location in which Lookout for Vision stores the component artifacts. "
              }
            ]
          },
          "ComponentName": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentName"
              },
              {
                "description": " A name for the AWS IoT Greengrass component. "
              }
            ]
          },
          "ComponentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentVersion"
              },
              {
                "description": "A Version for the AWS IoT Greengrass component. If you don't provide a value, a default value of <code> <i>Model Version</i>.0.0</code> is used. "
              }
            ]
          },
          "ComponentDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentDescription"
              },
              {
                "description": " A description for the AWS IoT Greengrass component. "
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": " A set of tags (key-value pairs) that you want to attach to the AWS IoT Greengrass component. "
              }
            ]
          }
        },
        "description": "<p>Configuration information for the AWS IoT Greengrass component created in a model packaging job. For more information, see <a>StartModelPackagingJob</a>. </p> <note> <p>You can't specify a component with the same <code>ComponentName</code> and <code>Componentversion</code> as an existing component with the same component name and component version.</p> </note>"
      },
      "CompilerOptions": {
        "type": "string",
        "pattern": ".*",
        "minLength": 3,
        "maxLength": 1024
      },
      "TargetDevice": {
        "type": "string",
        "enum": [
          "jetson_xavier"
        ]
      },
      "TargetPlatform": {
        "type": "object",
        "required": [
          "Os",
          "Arch"
        ],
        "properties": {
          "Os": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetPlatformOs"
              },
              {
                "description": "The target operating system for the model. Linux is the only operating system that is currently supported. "
              }
            ]
          },
          "Arch": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetPlatformArch"
              },
              {
                "description": "The target architecture for the model. The currently supported architectures are X86_64 (64-bit version of the x86 instruction set) and ARM_64 (ARMv8 64-bit CPU). "
              }
            ]
          },
          "Accelerator": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetPlatformAccelerator"
              },
              {
                "description": "<p>The target accelerator for the model. Currently, Amazon Lookout for Vision only supports NVIDIA (Nvidia graphics processing unit) and CPU accelerators. If you specify NVIDIA as an accelerator, you must also specify the <code>gpu-code</code>, <code>trt-ver</code>, and <code>cuda-ver</code> compiler options. If you don't specify an accelerator, Lookout for Vision uses the CPU for compilation and we highly recommend that you use the <a>GreengrassConfiguration$CompilerOptions</a> field. For example, you can use the following compiler options for CPU: </p> <ul> <li> <p> <code>mcpu</code>: CPU micro-architecture. For example, <code>{'mcpu': 'skylake-avx512'}</code> </p> </li> <li> <p> <code>mattr</code>: CPU flags. For example, <code>{'mattr': ['+neon', '+vfpv4']}</code> </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "The platform on which a model runs on an AWS IoT Greengrass core device."
      },
      "TargetPlatformOs": {
        "type": "string",
        "enum": [
          "LINUX"
        ]
      },
      "TargetPlatformArch": {
        "type": "string",
        "enum": [
          "ARM64",
          "X86_64"
        ]
      },
      "TargetPlatformAccelerator": {
        "type": "string",
        "enum": [
          "NVIDIA"
        ]
      },
      "S3Location": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The S3 bucket that contains the training or model packaging job output. If you are training a model, the bucket must in your AWS account. If you use an S3 bucket for a model packaging job, the S3 bucket must be in the same AWS Region and AWS account in which you use AWS IoT Greengrass."
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3KeyPrefix"
              },
              {
                "description": "The path of the folder, within the S3 bucket, that contains the output."
              }
            ]
          }
        },
        "description": "Information about the location of training output or the output of a model packaging job."
      },
      "S3BucketName": {
        "type": "string",
        "pattern": "[0-9A-Za-z\\.\\-_]*",
        "minLength": 3,
        "maxLength": 63
      },
      "S3KeyPrefix": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9!_.*'()-][/a-zA-Z0-9!_.*'()-]*)?$",
        "maxLength": 1024
      },
      "ComponentName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-_.]+",
        "minLength": 1,
        "maxLength": 128
      },
      "ComponentVersion": {
        "type": "string",
        "pattern": "^([0-9]{1,6})\\.([0-9]{1,6})\\.([0-9]{1,6})$",
        "minLength": 1,
        "maxLength": 64
      },
      "ComponentDescription": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-_. ()':,;?]+",
        "minLength": 1,
        "maxLength": 256
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key of the tag that is attached to the specified model."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the tag that is attached to the specified model."
              }
            ]
          }
        },
        "description": "A key and value pair that is attached to the specified Amazon Lookout for Vision model."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://lookoutvision.us-east-1.amazonaws.com/2020-11-20/projects/{projectName}/modelpackagingjobs"
    },
    "headers": {
      "X-Amzn-Client-Token": {
        "$": "X-Amzn-Client-Token"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**JobName**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
