{
  "name": "PutConfigRule",
  "description": "<p>Adds or updates an Config rule to evaluate if your Amazon Web Services resources comply with your desired configurations. For information on how many Config rules you can have per account, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html\"> <b>Service Limits</b> </a> in the <i>Config Developer Guide</i>.</p> <p>There are two types of rules: <i>Config Managed Rules</i> and <i>Config Custom Rules</i>. You can use <code>PutConfigRule</code> to create both Config Managed Rules and Config Custom Rules.</p> <p>Config Managed Rules are predefined, customizable rules created by Config. For a list of managed rules, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html\">List of Config Managed Rules</a>. If you are adding an Config managed rule, you must specify the rule's identifier for the <code>SourceIdentifier</code> key.</p> <p>Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions (<a href=\"https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function\"> Lambda Developer Guide</a>) and with Guard (<a href=\"https://github.com/aws-cloudformation/cloudformation-guard\">Guard GitHub Repository</a>), a policy-as-code language. Config custom rules created with Lambda are called <i>Config Custom Lambda Rules</i> and Config custom rules created with Guard are called <i>Config Custom Policy Rules</i>.</p> <p>If you are adding a new Config Custom Lambda rule, you first need to create an Lambda function that the rule invokes to evaluate your resources. When you use <code>PutConfigRule</code> to add a Custom Lambda rule to Config, you must specify the Amazon Resource Name (ARN) that Lambda assigns to the function. You specify the ARN in the <code>SourceIdentifier</code> key. This key is part of the <code>Source</code> object, which is part of the <code>ConfigRule</code> object. </p> <p>For any new Config rule that you add, specify the <code>ConfigRuleName</code> in the <code>ConfigRule</code> object. Do not specify the <code>ConfigRuleArn</code> or the <code>ConfigRuleId</code>. These values are generated by Config for new rules.</p> <p>If you are updating a rule that you added previously, you can specify the rule by <code>ConfigRuleName</code>, <code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the <code>ConfigRule</code> data type that you use in this request.</p> <p>For more information about developing and using Config rules, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html\">Evaluating Resources with Config Rules</a> in the <i>Config Developer Guide</i>.</p> <note> <p> <code>PutConfigRule</code> is an idempotent API. Subsequent requests wonâ€™t create a duplicate resource if one was already created. If a following request has different <code>tags</code> values, Config will ignore these differences and treat it as an idempotent request of the previous. In this case, <code>tags</code> will not be updated, even if they are different.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "StarlingDoveService.PutConfigRule"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutConfigRuleRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutConfigRuleRequest": {
        "type": "object",
        "required": [
          "ConfigRule"
        ],
        "title": "PutConfigRuleRequest",
        "properties": {
          "ConfigRule": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigRule"
              },
              {
                "description": "The rule that you want to add to your account."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagsList"
              },
              {
                "description": "An array of tag object."
              }
            ]
          }
        }
      },
      "ConfigRule": {
        "type": "object",
        "required": [
          "Source"
        ],
        "properties": {
          "ConfigRuleName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigRuleName"
              },
              {
                "description": "The name that you assign to the Config rule. The name is required if you are adding a new rule."
              }
            ]
          },
          "ConfigRuleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit256"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the Config rule."
              }
            ]
          },
          "ConfigRuleId": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit64"
              },
              {
                "description": "The ID of the Config rule."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/EmptiableStringWithCharLimit256"
              },
              {
                "description": "The description that you provide for the Config rule."
              }
            ]
          },
          "Scope": {
            "allOf": [
              {
                "$ref": "#/$defs/Scope"
              },
              {
                "description": "<p>Defines which resources can trigger an evaluation for the rule. The scope can include one or more resource types, a combination of one resource type and one resource ID, or a combination of a tag key and value. Specify a scope to constrain the resources that can trigger an evaluation for the rule. If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.</p> <note> <p>The scope can be empty. </p> </note>"
              }
            ]
          },
          "Source": {
            "allOf": [
              {
                "$ref": "#/$defs/Source"
              },
              {
                "description": "Provides the rule owner (<code>Amazon Web Services</code> for managed rules, <code>CUSTOM_POLICY</code> for Custom Policy rules, and <code>CUSTOM_LAMBDA</code> for Custom Lambda rules), the rule identifier, and the notifications that cause the function to evaluate your Amazon Web Services resources."
              }
            ]
          },
          "InputParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit1024"
              },
              {
                "description": "A string, in JSON format, that is passed to the Config rule Lambda function."
              }
            ]
          },
          "MaximumExecutionFrequency": {
            "allOf": [
              {
                "$ref": "#/$defs/MaximumExecutionFrequency"
              },
              {
                "description": "<p>The maximum frequency with which Config runs evaluations for a rule. You can specify a value for <code>MaximumExecutionFrequency</code> when:</p> <ul> <li> <p>This is for an Config managed rule that is triggered at a periodic frequency.</p> </li> <li> <p>Your custom rule is triggered when Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </li> </ul> <note> <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code> parameter.</p> </note>"
              }
            ]
          },
          "ConfigRuleState": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigRuleState"
              },
              {
                "description": "<p>Indicates whether the Config rule is active or is currently being deleted by Config. It can also indicate the evaluation status for the Config rule.</p> <p>Config sets the state of the rule to <code>EVALUATING</code> temporarily after you use the <code>StartConfigRulesEvaluation</code> request to evaluate your resources against the Config rule.</p> <p>Config sets the state of the rule to <code>DELETING_RESULTS</code> temporarily after you use the <code>DeleteEvaluationResults</code> request to delete the current evaluation results for the Config rule.</p> <p>Config temporarily sets the state of a rule to <code>DELETING</code> after you use the <code>DeleteConfigRule</code> request to delete the rule. After Config deletes the rule, the rule and all of its evaluations are erased and are no longer available.</p>"
              }
            ]
          },
          "CreatedBy": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit256"
              },
              {
                "description": "<p>Service principal name of the service that created the rule.</p> <note> <p>The field is populated only if the service-linked rule is created by a service. The field is empty if you create your own rule.</p> </note>"
              }
            ]
          },
          "EvaluationModes": {
            "allOf": [
              {
                "$ref": "#/$defs/EvaluationModes"
              },
              {
                "description": "The modes the Config rule can be evaluated in. The valid values are distinct objects. By default, the value is Detective evaluation mode only."
              }
            ]
          }
        },
        "description": "<p>Config rules evaluate the configuration settings of your Amazon Web Services resources. A rule can run when Config detects a configuration change to an Amazon Web Services resource or at a periodic frequency that you choose (for example, every 24 hours). There are two types of rules: <i>Config Managed Rules</i> and <i>Config Custom Rules</i>.</p> <p>Config Managed Rules are predefined, customizable rules created by Config. For a list of managed rules, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html\">List of Config Managed Rules</a>.</p> <p>Config Custom Rules are rules that you create from scratch. There are two ways to create Config custom rules: with Lambda functions (<a href=\"https://docs.aws.amazon.com/config/latest/developerguide/gettingstarted-concepts.html#gettingstarted-concepts-function\"> Lambda Developer Guide</a>) and with Guard (<a href=\"https://github.com/aws-cloudformation/cloudformation-guard\">Guard GitHub Repository</a>), a policy-as-code language. Config custom rules created with Lambda are called <i>Config Custom Lambda Rules</i> and Config custom rules created with Guard are called <i>Config Custom Policy Rules</i>.</p> <p>For more information about developing and using Config rules, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html\">Evaluating Resource with Config Rules</a> in the <i>Config Developer Guide</i>.</p> <note> <p>You can use the Amazon Web Services CLI and Amazon Web Services SDKs if you want to create a rule that triggers evaluations for your resources when Config delivers the configuration snapshot. For more information, see <a>ConfigSnapshotDeliveryProperties</a>.</p> </note>"
      },
      "ConfigRuleName": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 128
      },
      "StringWithCharLimit256": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "StringWithCharLimit64": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "EmptiableStringWithCharLimit256": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "Scope": {
        "type": "object",
        "properties": {
          "ComplianceResourceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ComplianceResourceTypes"
              },
              {
                "description": "The resource types of only those Amazon Web Services resources that you want to trigger an evaluation for the rule. You can only specify one type if you also specify a resource ID for <code>ComplianceResourceId</code>."
              }
            ]
          },
          "TagKey": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit128"
              },
              {
                "description": "The tag key that is applied to only those Amazon Web Services resources that you want to trigger an evaluation for the rule."
              }
            ]
          },
          "TagValue": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit256"
              },
              {
                "description": "The tag value applied to only those Amazon Web Services resources that you want to trigger an evaluation for the rule. If you specify a value for <code>TagValue</code>, you must also specify a value for <code>TagKey</code>."
              }
            ]
          },
          "ComplianceResourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/BaseResourceId"
              },
              {
                "description": "The ID of the only Amazon Web Services resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for <code>ComplianceResourceTypes</code>."
              }
            ]
          }
        },
        "description": "Defines which resources trigger an evaluation for an Config rule. The scope can include one or more resource types, a combination of a tag key and value, or a combination of one resource type and one resource ID. Specify a scope to constrain which resources trigger an evaluation for a rule. Otherwise, evaluations for the rule are triggered when any resource in your recording group changes in configuration."
      },
      "ComplianceResourceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StringWithCharLimit256"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "StringWithCharLimit128": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "BaseResourceId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 768
      },
      "Source": {
        "type": "object",
        "required": [
          "Owner"
        ],
        "properties": {
          "Owner": {
            "allOf": [
              {
                "$ref": "#/$defs/Owner"
              },
              {
                "description": "<p>Indicates whether Amazon Web Services or the customer owns and manages the Config rule.</p> <p>Config Managed Rules are predefined rules owned by Amazon Web Services. For more information, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html\">Config Managed Rules</a> in the <i>Config developer guide</i>.</p> <p>Config Custom Rules are rules that you can develop either with Guard (<code>CUSTOM_POLICY</code>) or Lambda (<code>CUSTOM_LAMBDA</code>). For more information, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html\">Config Custom Rules </a> in the <i>Config developer guide</i>.</p>"
              }
            ]
          },
          "SourceIdentifier": {
            "allOf": [
              {
                "$ref": "#/$defs/StringWithCharLimit256"
              },
              {
                "description": "<p>For Config Managed rules, a predefined identifier from a list. For example, <code>IAM_PASSWORD_POLICY</code> is a managed rule. To reference a managed rule, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html\">List of Config Managed Rules</a>.</p> <p>For Config Custom Lambda rules, the identifier is the Amazon Resource Name (ARN) of the rule's Lambda function, such as <code>arn:aws:lambda:us-east-2:123456789012:function:custom_rule_name</code>.</p> <p>For Config Custom Policy rules, this field will be ignored.</p>"
              }
            ]
          },
          "SourceDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceDetails"
              },
              {
                "description": "<p>Provides the source and the message types that cause Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic.</p> <p>If the owner is set to <code>CUSTOM_POLICY</code>, the only acceptable values for the Config rule trigger message type are <code>ConfigurationItemChangeNotification</code> and <code>OversizedConfigurationItemChangeNotification</code>.</p>"
              }
            ]
          },
          "CustomPolicyDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomPolicyDetails"
              },
              {
                "description": "Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to <code>CUSTOM_POLICY</code>."
              }
            ]
          }
        },
        "description": "Provides the CustomPolicyDetails, the rule owner (<code>Amazon Web Services</code> for managed rules, <code>CUSTOM_POLICY</code> for Custom Policy rules, and <code>CUSTOM_LAMBDA</code> for Custom Lambda rules), the rule identifier, and the events that cause the evaluation of your Amazon Web Services resources."
      },
      "Owner": {
        "type": "string",
        "enum": [
          "CUSTOM_LAMBDA",
          "AWS",
          "CUSTOM_POLICY"
        ]
      },
      "SourceDetails": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SourceDetail"
        },
        "minItems": 0,
        "maxItems": 25
      },
      "SourceDetail": {
        "type": "object",
        "properties": {
          "EventSource": {
            "allOf": [
              {
                "$ref": "#/$defs/EventSource"
              },
              {
                "description": "The source of the event, such as an Amazon Web Services service, that triggers Config to evaluate your Amazon Web Services resources."
              }
            ]
          },
          "MessageType": {
            "allOf": [
              {
                "$ref": "#/$defs/MessageType"
              },
              {
                "description": "<p>The type of notification that triggers Config to run an evaluation for a rule. You can specify the following notification types:</p> <ul> <li> <p> <code>ConfigurationItemChangeNotification</code> - Triggers an evaluation when Config delivers a configuration item as a result of a resource change.</p> </li> <li> <p> <code>OversizedConfigurationItemChangeNotification</code> - Triggers an evaluation when Config delivers an oversized configuration item. Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.</p> </li> <li> <p> <code>ScheduledNotification</code> - Triggers a periodic evaluation at the frequency specified for <code>MaximumExecutionFrequency</code>.</p> </li> <li> <p> <code>ConfigurationSnapshotDeliveryCompleted</code> - Triggers a periodic evaluation when Config delivers a configuration snapshot.</p> </li> </ul> <p>If you want your custom rule to be triggered by configuration changes, specify two SourceDetail objects, one for <code>ConfigurationItemChangeNotification</code> and one for <code>OversizedConfigurationItemChangeNotification</code>.</p>"
              }
            ]
          },
          "MaximumExecutionFrequency": {
            "allOf": [
              {
                "$ref": "#/$defs/MaximumExecutionFrequency"
              },
              {
                "description": "<p>The frequency at which you want Config to run evaluations for a custom rule with a periodic trigger. If you specify a value for <code>MaximumExecutionFrequency</code>, then <code>MessageType</code> must use the <code>ScheduledNotification</code> value.</p> <note> <p>By default, rules with a periodic trigger are evaluated every 24 hours. To change the frequency, specify a valid value for the <code>MaximumExecutionFrequency</code> parameter.</p> <p>Based on the valid value you choose, Config runs evaluations once for each valid value. For example, if you choose <code>Three_Hours</code>, Config runs evaluations once every three hours. In this case, <code>Three_Hours</code> is the frequency of this rule. </p> </note>"
              }
            ]
          }
        },
        "description": "Provides the source and the message types that trigger Config to evaluate your Amazon Web Services resources against a rule. It also provides the frequency with which you want Config to run evaluations for the rule if the trigger type is periodic. You can specify the parameter values for <code>SourceDetail</code> only for custom rules. "
      },
      "EventSource": {
        "type": "string",
        "enum": [
          "aws.config"
        ]
      },
      "MessageType": {
        "type": "string",
        "enum": [
          "ConfigurationItemChangeNotification",
          "ConfigurationSnapshotDeliveryCompleted",
          "ScheduledNotification",
          "OversizedConfigurationItemChangeNotification"
        ]
      },
      "MaximumExecutionFrequency": {
        "type": "string",
        "enum": [
          "One_Hour",
          "Three_Hours",
          "Six_Hours",
          "Twelve_Hours",
          "TwentyFour_Hours"
        ]
      },
      "CustomPolicyDetails": {
        "type": "object",
        "required": [
          "PolicyRuntime",
          "PolicyText"
        ],
        "properties": {
          "PolicyRuntime": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyRuntime"
              },
              {
                "description": "The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the <a href=\"https://github.com/aws-cloudformation/cloudformation-guard\">Guard GitHub Repository</a>."
              }
            ]
          },
          "PolicyText": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyText"
              },
              {
                "description": "The policy definition containing the logic for your Config Custom Policy rule."
              }
            ]
          },
          "EnableDebugLogDelivery": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is <code>false</code>."
              }
            ]
          }
        },
        "description": "Provides the runtime system, policy definition, and whether debug logging enabled. You can specify the following CustomPolicyDetails parameter values only for Config Custom Policy rules."
      },
      "PolicyRuntime": {
        "type": "string",
        "pattern": "guard\\-2\\.x\\.x",
        "minLength": 1,
        "maxLength": 64
      },
      "PolicyText": {
        "type": "string",
        "minLength": 0,
        "maxLength": 10000
      },
      "Boolean": {
        "type": "boolean"
      },
      "StringWithCharLimit1024": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ConfigRuleState": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "DELETING",
          "DELETING_RESULTS",
          "EVALUATING"
        ]
      },
      "EvaluationModes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/EvaluationModeConfiguration"
        }
      },
      "EvaluationModeConfiguration": {
        "type": "object",
        "properties": {
          "Mode": {
            "allOf": [
              {
                "$ref": "#/$defs/EvaluationMode"
              },
              {
                "description": "The mode of an evaluation. The valid values are Detective or Proactive."
              }
            ]
          }
        },
        "description": "The configuration object for Config rule evaluation mode. The Supported valid values are Detective or Proactive."
      },
      "EvaluationMode": {
        "type": "string",
        "enum": [
          "DETECTIVE",
          "PROACTIVE"
        ]
      },
      "TagsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key)."
              }
            ]
          }
        },
        "description": "The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://config.us-east-1.amazonaws.com/#X-Amz-Target=StarlingDoveService.PutConfigRule"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
