{
  "name": "PutConfigurationAggregator",
  "description": "<p>Creates and updates the configuration aggregator with the selected source accounts and regions. The source account can be individual account(s) or an organization.</p> <p> <code>accountIds</code> that are passed will be replaced with existing accounts. If you want to add additional accounts into the aggregator, call <code>DescribeConfigurationAggregators</code> to get the previous accounts and then append new ones.</p> <note> <p>Config should be enabled in source accounts and regions you want to aggregate.</p> <p>If your source type is an organization, you must be signed in to the management account or a registered delegated administrator and all the features must be enabled in your organization. If the caller is a management account, Config calls <code>EnableAwsServiceAccess</code> API to enable integration between Config and Organizations. If the caller is a registered delegated administrator, Config calls <code>ListDelegatedAdministrators</code> API to verify whether the caller is a valid delegated administrator.</p> <p>To register a delegated administrator, see <a href=\"https://docs.aws.amazon.com/config/latest/developerguide/set-up-aggregator-cli.html#register-a-delegated-administrator-cli\">Register a Delegated Administrator</a> in the <i>Config developer guide</i>. </p> </note> <note> <p> <code>PutConfigurationAggregator</code> is an idempotent API. Subsequent requests wonâ€™t create a duplicate resource if one was already created. If a following request has different <code>tags</code> values, Config will ignore these differences and treat it as an idempotent request of the previous. In this case, <code>tags</code> will not be updated, even if they are different.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "StarlingDoveService.PutConfigurationAggregator"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutConfigurationAggregatorRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutConfigurationAggregatorRequest": {
        "type": "object",
        "required": [
          "ConfigurationAggregatorName"
        ],
        "title": "PutConfigurationAggregatorRequest",
        "properties": {
          "ConfigurationAggregatorName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConfigurationAggregatorName"
              },
              {
                "description": "The name of the configuration aggregator."
              }
            ]
          },
          "AccountAggregationSources": {
            "allOf": [
              {
                "$ref": "#/$defs/AccountAggregationSourceList"
              },
              {
                "description": "A list of AccountAggregationSource object. "
              }
            ]
          },
          "OrganizationAggregationSource": {
            "allOf": [
              {
                "$ref": "#/$defs/OrganizationAggregationSource"
              },
              {
                "description": "An OrganizationAggregationSource object."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagsList"
              },
              {
                "description": "An array of tag object."
              }
            ]
          }
        }
      },
      "ConfigurationAggregatorName": {
        "type": "string",
        "pattern": "[\\w\\-]+",
        "minLength": 1,
        "maxLength": 256
      },
      "AccountAggregationSourceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AccountAggregationSource"
        },
        "minItems": 0,
        "maxItems": 1
      },
      "AccountAggregationSource": {
        "type": "object",
        "required": [
          "AccountIds"
        ],
        "properties": {
          "AccountIds": {
            "allOf": [
              {
                "$ref": "#/$defs/AccountAggregationSourceAccountList"
              },
              {
                "description": "The 12-digit account ID of the account being aggregated. "
              }
            ]
          },
          "AllAwsRegions": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "If true, aggregate existing Config regions and future regions."
              }
            ]
          },
          "AwsRegions": {
            "allOf": [
              {
                "$ref": "#/$defs/AggregatorRegionList"
              },
              {
                "description": "The source regions being aggregated."
              }
            ]
          }
        },
        "description": "A collection of accounts and regions."
      },
      "AccountAggregationSourceAccountList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AccountId"
        },
        "minItems": 1
      },
      "AccountId": {
        "type": "string",
        "pattern": "\\d{12}"
      },
      "Boolean": {
        "type": "boolean"
      },
      "AggregatorRegionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 1
      },
      "String": {
        "type": "string"
      },
      "OrganizationAggregationSource": {
        "type": "object",
        "required": [
          "RoleArn"
        ],
        "properties": {
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "ARN of the IAM role used to retrieve Amazon Web Services Organization details associated with the aggregator account."
              }
            ]
          },
          "AwsRegions": {
            "allOf": [
              {
                "$ref": "#/$defs/AggregatorRegionList"
              },
              {
                "description": "The source regions being aggregated."
              }
            ]
          },
          "AllAwsRegions": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "If true, aggregate existing Config regions and future regions."
              }
            ]
          }
        },
        "description": "This object contains regions to set up the aggregator and an IAM role to retrieve organization details."
      },
      "TagsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "One part of a key-value pair that make up a tag. A key is a general label that acts like a category for more specific tag values."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The optional part of a key-value pair that make up a tag. A value acts as a descriptor within a tag category (key)."
              }
            ]
          }
        },
        "description": "The tags for the resource. The metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://config.us-east-1.amazonaws.com/#X-Amz-Target=StarlingDoveService.PutConfigurationAggregator"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ConfigurationAggregator**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
