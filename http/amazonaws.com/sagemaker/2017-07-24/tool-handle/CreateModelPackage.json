{
  "name": "CreateModelPackage",
  "description": "<p>Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.</p> <p>To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for <code>InferenceSpecification</code>. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for <code>SourceAlgorithmSpecification</code>.</p> <note> <p>There are two types of model packages:</p> <ul> <li> <p>Versioned - a model that is part of a model group in the model registry.</p> </li> <li> <p>Unversioned - a model package that is not part of a model group.</p> </li> </ul> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SageMaker.CreateModelPackage"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateModelPackageInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateModelPackageInput": {
        "type": "object",
        "title": "CreateModelPackageInput",
        "properties": {
          "ModelPackageName": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "<p>The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).</p> <p>This parameter is required for unversioned models. It is not applicable to versioned models.</p>"
              }
            ]
          },
          "ModelPackageGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/ArnOrName"
              },
              {
                "description": "<p>The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to.</p> <p>This parameter is required for versioned models, and does not apply to unversioned models.</p>"
              }
            ]
          },
          "ModelPackageDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A description of the model package."
              }
            ]
          },
          "InferenceSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceSpecification"
              },
              {
                "description": "<p>Specifies details about inference jobs that can be run with models based on this model package, including the following:</p> <ul> <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li> <li> <p>The instance types that the model package supports for transform jobs and real-time endpoints used for inference.</p> </li> <li> <p>The input and output content formats that the model package supports for inference.</p> </li> </ul>"
              }
            ]
          },
          "ValidationSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageValidationSpecification"
              },
              {
                "description": "Specifies configurations for one or more transform jobs that SageMaker runs to test the model package."
              }
            ]
          },
          "SourceAlgorithmSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceAlgorithmSpecification"
              },
              {
                "description": "Details about the algorithm that was used to create the model package."
              }
            ]
          },
          "CertifyForMarketplace": {
            "allOf": [
              {
                "$ref": "#/$defs/CertifyForMarketplace"
              },
              {
                "description": "<p>Whether to certify the model package for listing on Amazon Web Services Marketplace.</p> <p>This parameter is optional for unversioned models, and does not apply to versioned models.</p>"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "A list of key value pairs associated with the model. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>."
              }
            ]
          },
          "ModelApprovalStatus": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelApprovalStatus"
              },
              {
                "description": "<p>Whether the model is approved for deployment.</p> <p>This parameter is optional for versioned models, and does not apply to unversioned models.</p> <p>For versioned models, the value of this parameter must be set to <code>Approved</code> to deploy the model.</p>"
              }
            ]
          },
          "MetadataProperties": {
            "$ref": "#/$defs/MetadataProperties"
          },
          "ModelMetrics": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelMetrics"
              },
              {
                "description": "A structure that contains model metrics reports."
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientToken"
              },
              {
                "description": "A unique token that guarantees that the call to this API is idempotent."
              }
            ]
          },
          "CustomerMetadataProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomerMetadataMap"
              },
              {
                "description": "The metadata properties associated with the model package versions."
              }
            ]
          },
          "DriftCheckBaselines": {
            "allOf": [
              {
                "$ref": "#/$defs/DriftCheckBaselines"
              },
              {
                "description": "Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection\">Drift Detection against Previous Baselines in SageMaker Pipelines</a> in the <i>Amazon SageMaker Developer Guide</i>. "
              }
            ]
          },
          "Domain": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing."
              }
            ]
          },
          "Task": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: <code>\"IMAGE_CLASSIFICATION\"</code> | <code>\"OBJECT_DETECTION\"</code> | <code>\"TEXT_GENERATION\"</code> |<code>\"IMAGE_SEGMENTATION\"</code> | <code>\"FILL_MASK\"</code> | <code>\"CLASSIFICATION\"</code> | <code>\"REGRESSION\"</code> | <code>\"OTHER\"</code>.</p> <p>Specify \"OTHER\" if none of the tasks listed fit your use case.</p>"
              }
            ]
          },
          "SamplePayloadUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). This archive can hold multiple files that are all equally used in the load test. Each file in the archive must satisfy the size constraints of the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html#API_runtime_InvokeEndpoint_RequestSyntax\">InvokeEndpoint</a> call."
              }
            ]
          },
          "AdditionalInferenceSpecifications": {
            "allOf": [
              {
                "$ref": "#/$defs/AdditionalInferenceSpecifications"
              },
              {
                "description": "An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts. "
              }
            ]
          }
        }
      },
      "EntityName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$",
        "minLength": 1,
        "maxLength": 63
      },
      "ArnOrName": {
        "type": "string",
        "pattern": "(arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:[a-z\\-]*\\/)?([a-zA-Z0-9]([a-zA-Z0-9-]){0,62})(?<!-)$",
        "minLength": 1,
        "maxLength": 170
      },
      "EntityDescription": {
        "type": "string",
        "pattern": "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*",
        "maxLength": 1024
      },
      "InferenceSpecification": {
        "type": "object",
        "required": [
          "Containers",
          "SupportedContentTypes",
          "SupportedResponseMIMETypes"
        ],
        "properties": {
          "Containers": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageContainerDefinitionList"
              },
              {
                "description": "The Amazon ECR registry path of the Docker image that contains the inference code."
              }
            ]
          },
          "SupportedTransformInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceTypes"
              },
              {
                "description": "<p>A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.</p> <p>This parameter is required for unversioned models, and optional for versioned models.</p>"
              }
            ]
          },
          "SupportedRealtimeInferenceInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/RealtimeInferenceInstanceTypes"
              },
              {
                "description": "<p>A list of the instance types that are used to generate inferences in real-time.</p> <p>This parameter is required for unversioned models, and optional for versioned models.</p>"
              }
            ]
          },
          "SupportedContentTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentTypes"
              },
              {
                "description": "The supported MIME types for the input data."
              }
            ]
          },
          "SupportedResponseMIMETypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseMIMETypes"
              },
              {
                "description": "The supported MIME types for the output data."
              }
            ]
          }
        },
        "description": "Defines how to perform inference generation after a training job is run."
      },
      "ModelPackageContainerDefinitionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ModelPackageContainerDefinition"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "ModelPackageContainerDefinition": {
        "type": "object",
        "required": [
          "Image"
        ],
        "properties": {
          "ContainerHostname": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerHostname"
              },
              {
                "description": "The DNS host name for the Docker container."
              }
            ]
          },
          "Image": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerImage"
              },
              {
                "description": "<p>The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.</p> <p>If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code> image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon SageMaker</a>.</p>"
              }
            ]
          },
          "ImageDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageDigest"
              },
              {
                "description": "An MD5 hash of the training algorithm that identifies the Docker image used for training."
              }
            ]
          },
          "ModelDataUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "<p>The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single <code>gzip</code> compressed tar archive (<code>.tar.gz</code> suffix).</p> <note> <p>The model artifacts must be in an S3 bucket that is in the same region as the model package.</p> </note>"
              }
            ]
          },
          "ProductId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductId"
              },
              {
                "description": "The Amazon Web Services Marketplace product ID of the model package."
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/$defs/EnvironmentMap"
              },
              {
                "description": "The environment variables to set in the Docker container. Each key and value in the <code>Environment</code> string to string map can have length of up to 1024. We support up to 16 entries in the map."
              }
            ]
          },
          "ModelInput": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelInput"
              },
              {
                "description": "A structure with Model Input details."
              }
            ]
          },
          "Framework": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The machine learning framework of the model package container image."
              }
            ]
          },
          "FrameworkVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageFrameworkVersion"
              },
              {
                "description": "The framework version of the Model Package Container Image."
              }
            ]
          },
          "NearestModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling <code>ListModelMetadata</code>."
              }
            ]
          }
        },
        "description": "Describes the Docker container for the model package."
      },
      "ContainerHostname": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}",
        "maxLength": 63
      },
      "ContainerImage": {
        "type": "string",
        "pattern": "[\\S]+",
        "maxLength": 255
      },
      "ImageDigest": {
        "type": "string",
        "pattern": "^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$",
        "maxLength": 72
      },
      "Url": {
        "type": "string",
        "pattern": "^(https|s3)://([^/]+)/?(.*)$",
        "maxLength": 1024
      },
      "ProductId": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
        "maxLength": 256
      },
      "EnvironmentMap": {
        "type": "object",
        "maxProperties": 16,
        "additionalProperties": {
          "$ref": "#/$defs/EnvironmentValue"
        }
      },
      "EnvironmentValue": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "maxLength": 1024
      },
      "ModelInput": {
        "type": "object",
        "required": [
          "DataInputConfig"
        ],
        "properties": {
          "DataInputConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DataInputConfig"
              },
              {
                "description": "The input configuration object for the model."
              }
            ]
          }
        },
        "description": "Input object for the model."
      },
      "DataInputConfig": {
        "type": "string",
        "pattern": "[\\S\\s]+",
        "minLength": 1,
        "maxLength": 1024
      },
      "String": {
        "type": "string"
      },
      "ModelPackageFrameworkVersion": {
        "type": "string",
        "pattern": "[0-9]\\.[A-Za-z0-9.-]+",
        "minLength": 3,
        "maxLength": 10
      },
      "TransformInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TransformInstanceType"
        },
        "minItems": 1
      },
      "TransformInstanceType": {
        "type": "string",
        "enum": [
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge"
        ]
      },
      "RealtimeInferenceInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ProductionVariantInstanceType"
        }
      },
      "ProductionVariantInstanceType": {
        "type": "string",
        "enum": [
          "ml.t2.medium",
          "ml.t2.large",
          "ml.t2.xlarge",
          "ml.t2.2xlarge",
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.m5d.large",
          "ml.m5d.xlarge",
          "ml.m5d.2xlarge",
          "ml.m5d.4xlarge",
          "ml.m5d.12xlarge",
          "ml.m5d.24xlarge",
          "ml.c4.large",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.c5.large",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.c5d.large",
          "ml.c5d.xlarge",
          "ml.c5d.2xlarge",
          "ml.c5d.4xlarge",
          "ml.c5d.9xlarge",
          "ml.c5d.18xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge",
          "ml.r5.large",
          "ml.r5.xlarge",
          "ml.r5.2xlarge",
          "ml.r5.4xlarge",
          "ml.r5.12xlarge",
          "ml.r5.24xlarge",
          "ml.r5d.large",
          "ml.r5d.xlarge",
          "ml.r5d.2xlarge",
          "ml.r5d.4xlarge",
          "ml.r5d.12xlarge",
          "ml.r5d.24xlarge",
          "ml.inf1.xlarge",
          "ml.inf1.2xlarge",
          "ml.inf1.6xlarge",
          "ml.inf1.24xlarge",
          "ml.c6i.large",
          "ml.c6i.xlarge",
          "ml.c6i.2xlarge",
          "ml.c6i.4xlarge",
          "ml.c6i.8xlarge",
          "ml.c6i.12xlarge",
          "ml.c6i.16xlarge",
          "ml.c6i.24xlarge",
          "ml.c6i.32xlarge",
          "ml.g5.xlarge",
          "ml.g5.2xlarge",
          "ml.g5.4xlarge",
          "ml.g5.8xlarge",
          "ml.g5.12xlarge",
          "ml.g5.16xlarge",
          "ml.g5.24xlarge",
          "ml.g5.48xlarge",
          "ml.p4d.24xlarge",
          "ml.c7g.large",
          "ml.c7g.xlarge",
          "ml.c7g.2xlarge",
          "ml.c7g.4xlarge",
          "ml.c7g.8xlarge",
          "ml.c7g.12xlarge",
          "ml.c7g.16xlarge",
          "ml.m6g.large",
          "ml.m6g.xlarge",
          "ml.m6g.2xlarge",
          "ml.m6g.4xlarge",
          "ml.m6g.8xlarge",
          "ml.m6g.12xlarge",
          "ml.m6g.16xlarge",
          "ml.m6gd.large",
          "ml.m6gd.xlarge",
          "ml.m6gd.2xlarge",
          "ml.m6gd.4xlarge",
          "ml.m6gd.8xlarge",
          "ml.m6gd.12xlarge",
          "ml.m6gd.16xlarge",
          "ml.c6g.large",
          "ml.c6g.xlarge",
          "ml.c6g.2xlarge",
          "ml.c6g.4xlarge",
          "ml.c6g.8xlarge",
          "ml.c6g.12xlarge",
          "ml.c6g.16xlarge",
          "ml.c6gd.large",
          "ml.c6gd.xlarge",
          "ml.c6gd.2xlarge",
          "ml.c6gd.4xlarge",
          "ml.c6gd.8xlarge",
          "ml.c6gd.12xlarge",
          "ml.c6gd.16xlarge",
          "ml.c6gn.large",
          "ml.c6gn.xlarge",
          "ml.c6gn.2xlarge",
          "ml.c6gn.4xlarge",
          "ml.c6gn.8xlarge",
          "ml.c6gn.12xlarge",
          "ml.c6gn.16xlarge",
          "ml.r6g.large",
          "ml.r6g.xlarge",
          "ml.r6g.2xlarge",
          "ml.r6g.4xlarge",
          "ml.r6g.8xlarge",
          "ml.r6g.12xlarge",
          "ml.r6g.16xlarge",
          "ml.r6gd.large",
          "ml.r6gd.xlarge",
          "ml.r6gd.2xlarge",
          "ml.r6gd.4xlarge",
          "ml.r6gd.8xlarge",
          "ml.r6gd.12xlarge",
          "ml.r6gd.16xlarge",
          "ml.p4de.24xlarge",
          "ml.trn1.2xlarge",
          "ml.trn1.32xlarge",
          "ml.inf2.xlarge",
          "ml.inf2.8xlarge",
          "ml.inf2.24xlarge",
          "ml.inf2.48xlarge"
        ]
      },
      "ContentTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ContentType"
        }
      },
      "ContentType": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "ResponseMIMETypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ResponseMIMEType"
        }
      },
      "ResponseMIMEType": {
        "type": "string",
        "pattern": "^[-\\w]+\\/.+$",
        "maxLength": 1024
      },
      "ModelPackageValidationSpecification": {
        "type": "object",
        "required": [
          "ValidationRole",
          "ValidationProfiles"
        ],
        "properties": {
          "ValidationRole": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The IAM roles to be used for the validation of the model package."
              }
            ]
          },
          "ValidationProfiles": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageValidationProfiles"
              },
              {
                "description": "An array of <code>ModelPackageValidationProfile</code> objects, each of which specifies a batch transform job that SageMaker runs to validate your model package."
              }
            ]
          }
        },
        "description": "Specifies batch transform jobs that SageMaker runs to validate your model package."
      },
      "RoleArn": {
        "type": "string",
        "pattern": "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$",
        "minLength": 20,
        "maxLength": 2048
      },
      "ModelPackageValidationProfiles": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ModelPackageValidationProfile"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "ModelPackageValidationProfile": {
        "type": "object",
        "required": [
          "ProfileName",
          "TransformJobDefinition"
        ],
        "properties": {
          "ProfileName": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the profile for the model package."
              }
            ]
          },
          "TransformJobDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformJobDefinition"
              },
              {
                "description": "The <code>TransformJobDefinition</code> object that describes the transform job used for the validation of the model package."
              }
            ]
          }
        },
        "description": "<p>Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p>"
      },
      "TransformJobDefinition": {
        "type": "object",
        "required": [
          "TransformInput",
          "TransformOutput",
          "TransformResources"
        ],
        "properties": {
          "MaxConcurrentTransforms": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrentTransforms"
              },
              {
                "description": "The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1."
              }
            ]
          },
          "MaxPayloadInMB": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxPayloadInMB"
              },
              {
                "description": "The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata)."
              }
            ]
          },
          "BatchStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/BatchStrategy"
              },
              {
                "description": "<p>A string that determines the number of records included in a single mini-batch.</p> <p> <code>SingleRecord</code> means only one record is used per mini-batch. <code>MultiRecord</code> means a mini-batch is set to contain as many records that can fit within the <code>MaxPayloadInMB</code> limit.</p>"
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformEnvironmentMap"
              },
              {
                "description": "The environment variables to set in the Docker container. We support up to 16 key and values entries in the map."
              }
            ]
          },
          "TransformInput": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInput"
              },
              {
                "description": "A description of the input source and the way the transform job consumes it."
              }
            ]
          },
          "TransformOutput": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformOutput"
              },
              {
                "description": "Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job."
              }
            ]
          },
          "TransformResources": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformResources"
              },
              {
                "description": "Identifies the ML compute instances for the transform job."
              }
            ]
          }
        },
        "description": "Defines the input needed to run a transform job using the inference specification specified in the algorithm."
      },
      "MaxConcurrentTransforms": {
        "type": "integer",
        "minimum": 0
      },
      "MaxPayloadInMB": {
        "type": "integer",
        "minimum": 0
      },
      "BatchStrategy": {
        "type": "string",
        "enum": [
          "MultiRecord",
          "SingleRecord"
        ]
      },
      "TransformEnvironmentMap": {
        "type": "object",
        "maxProperties": 16,
        "additionalProperties": {
          "$ref": "#/$defs/TransformEnvironmentValue"
        }
      },
      "TransformEnvironmentValue": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "maxLength": 10240
      },
      "TransformInput": {
        "type": "object",
        "required": [
          "DataSource"
        ],
        "properties": {
          "DataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformDataSource"
              },
              {
                "description": "Describes the location of the channel data, which is, the S3 location of the input data that the model can consume."
              }
            ]
          },
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job."
              }
            ]
          },
          "CompressionType": {
            "allOf": [
              {
                "$ref": "#/$defs/CompressionType"
              },
              {
                "description": "If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is <code>None</code>."
              }
            ]
          },
          "SplitType": {
            "allOf": [
              {
                "$ref": "#/$defs/SplitType"
              },
              {
                "description": "<p>The method to use to split the transform job's data files into smaller batches. Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for <code>SplitType</code> is <code>None</code>, which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to <code>Line</code> to split records on a newline character boundary. <code>SplitType</code> also supports a number of record-oriented binary data formats. Currently, the supported record formats are:</p> <ul> <li> <p>RecordIO</p> </li> <li> <p>TFRecord</p> </li> </ul> <p>When splitting is enabled, the size of a mini-batch depends on the values of the <code>BatchStrategy</code> and <code>MaxPayloadInMB</code> parameters. When the value of <code>BatchStrategy</code> is <code>MultiRecord</code>, Amazon SageMaker sends the maximum number of records in each request, up to the <code>MaxPayloadInMB</code> limit. If the value of <code>BatchStrategy</code> is <code>SingleRecord</code>, Amazon SageMaker sends individual records in each request.</p> <note> <p>Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of <code>BatchStrategy</code> is set to <code>SingleRecord</code>. Padding is not removed if the value of <code>BatchStrategy</code> is set to <code>MultiRecord</code>.</p> <p>For more information about <code>RecordIO</code>, see <a href=\"https://mxnet.apache.org/api/faq/recordio\">Create a Dataset Using RecordIO</a> in the MXNet documentation. For more information about <code>TFRecord</code>, see <a href=\"https://www.tensorflow.org/guide/data#consuming_tfrecord_data\">Consuming TFRecord data</a> in the TensorFlow documentation.</p> </note>"
              }
            ]
          }
        },
        "description": "Describes the input source of a transform job and the way the transform job consumes it."
      },
      "TransformDataSource": {
        "type": "object",
        "required": [
          "S3DataSource"
        ],
        "properties": {
          "S3DataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformS3DataSource"
              },
              {
                "description": "The S3 location of the data source that is associated with a channel."
              }
            ]
          }
        },
        "description": "Describes the location of the channel data."
      },
      "TransformS3DataSource": {
        "type": "object",
        "required": [
          "S3DataType",
          "S3Uri"
        ],
        "properties": {
          "S3DataType": {
            "allOf": [
              {
                "$ref": "#/$defs/S3DataType"
              },
              {
                "description": "<p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for batch transform. </p> <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch transform. </p> <p>The following values are compatible: <code>ManifestFile</code>, <code>S3Prefix</code> </p> <p>The following value is not compatible: <code>AugmentedManifestFile</code> </p>"
              }
            ]
          },
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>Depending on the value specified for the <code>S3DataType</code>, identifies either a key name prefix or a manifest. For example:</p> <ul> <li> <p> A key name prefix might look like this: <code>s3://bucketname/exampleprefix</code>. </p> </li> <li> <p> A manifest might look like this: <code>s3://bucketname/example.manifest</code> </p> <p> The manifest is an S3 object which is a JSON file with the following format: </p> <p> <code>[ {\"prefix\": \"s3://customer_bucket/some/prefix/\"},</code> </p> <p> <code>\"relative/path/to/custdata-1\",</code> </p> <p> <code>\"relative/path/custdata-2\",</code> </p> <p> <code>...</code> </p> <p> <code>\"relative/path/custdata-N\"</code> </p> <p> <code>]</code> </p> <p> The preceding JSON matches the following <code>S3Uris</code>: </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code> </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code> </p> <p> <code>...</code> </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code> </p> <p> The complete set of <code>S3Uris</code> in this manifest constitutes the input data for the channel for this datasource. The object that each <code>S3Uris</code> points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Describes the S3 data source."
      },
      "S3DataType": {
        "type": "string",
        "enum": [
          "ManifestFile",
          "S3Prefix",
          "AugmentedManifestFile"
        ]
      },
      "S3Uri": {
        "type": "string",
        "pattern": "^(https|s3)://([^/]+)/?(.*)$",
        "maxLength": 1024
      },
      "CompressionType": {
        "type": "string",
        "enum": [
          "None",
          "Gzip"
        ]
      },
      "SplitType": {
        "type": "string",
        "enum": [
          "None",
          "Line",
          "RecordIO",
          "TFRecord"
        ]
      },
      "TransformOutput": {
        "type": "object",
        "required": [
          "S3OutputPath"
        ],
        "properties": {
          "S3OutputPath": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For example, <code>s3://bucket-name/key-name-prefix</code>.</p> <p>For every S3 object used as input for the transform job, batch transform stores the transformed data with an .<code>out</code> suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at <code>s3://bucket-name/input-name-prefix/dataset01/data.csv</code>, batch transform stores the transformed data at <code>s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out</code>. Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an .<code>out</code> file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.</p>"
              }
            ]
          },
          "Accept": {
            "allOf": [
              {
                "$ref": "#/$defs/Accept"
              },
              {
                "description": "The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job."
              }
            ]
          },
          "AssembleWith": {
            "allOf": [
              {
                "$ref": "#/$defs/AssemblyType"
              },
              {
                "description": "Defines how to assemble the results of the transform job as a single S3 object. Choose a format that is most convenient to you. To concatenate the results in binary format, specify <code>None</code>. To add a newline character at the end of every transformed record, specify <code>Line</code>."
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following formats: </p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul> <p>If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">KMS-Managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i> </p> <p>The KMS key policy must grant permission to the IAM role that you specify in your <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html\">CreateModel</a> request. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\">Using Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Describes the results of a transform job."
      },
      "Accept": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "AssemblyType": {
        "type": "string",
        "enum": [
          "None",
          "Line"
        ]
      },
      "KmsKeyId": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 2048
      },
      "TransformResources": {
        "type": "object",
        "required": [
          "InstanceType",
          "InstanceCount"
        ],
        "properties": {
          "InstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceType"
              },
              {
                "description": "The ML compute instance type for the transform job. If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or <code>ml.m5.large</code>instance types."
              }
            ]
          },
          "InstanceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceCount"
              },
              {
                "description": "The number of ML compute instances to use in the transform job. The default value is <code>1</code>, and the maximum is <code>100</code>. For distributed transform jobs, specify a value greater than <code>1</code>."
              }
            ]
          },
          "VolumeKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.</p> <note> <p>Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a <code>VolumeKmsKeyId</code> when using an instance type with local storage.</p> <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p> <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD Instance Store Volumes</a>.</p> </note> <p> The <code>VolumeKmsKeyId</code> can be any of the following formats:</p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Describes the resources, including ML instance types and ML instance count, to use for transform job."
      },
      "TransformInstanceCount": {
        "type": "integer",
        "minimum": 1
      },
      "SourceAlgorithmSpecification": {
        "type": "object",
        "required": [
          "SourceAlgorithms"
        ],
        "properties": {
          "SourceAlgorithms": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceAlgorithmList"
              },
              {
                "description": "A list of the algorithms that were used to create a model package."
              }
            ]
          }
        },
        "description": "A list of algorithms that were used to create a model package."
      },
      "SourceAlgorithmList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SourceAlgorithm"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "SourceAlgorithm": {
        "type": "object",
        "required": [
          "AlgorithmName"
        ],
        "properties": {
          "ModelDataUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "<p>The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single <code>gzip</code> compressed tar archive (<code>.tar.gz</code> suffix).</p> <note> <p>The model artifacts must be in an S3 bucket that is in the same Amazon Web Services region as the algorithm.</p> </note>"
              }
            ]
          },
          "AlgorithmName": {
            "allOf": [
              {
                "$ref": "#/$defs/ArnOrName"
              },
              {
                "description": "The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to."
              }
            ]
          }
        },
        "description": "Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to."
      },
      "CertifyForMarketplace": {
        "type": "boolean"
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag key. Tag keys must be unique per resource."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag value."
              }
            ]
          }
        },
        "description": "<p>A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources.</p> <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html\">AddTags</a>.</p> <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>. For advice on best practices for managing Amazon Web Services resources with tagging, see <a href=\"https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf\">Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      },
      "ModelApprovalStatus": {
        "type": "string",
        "enum": [
          "Approved",
          "Rejected",
          "PendingManualApproval"
        ]
      },
      "MetadataProperties": {
        "type": "object",
        "properties": {
          "CommitId": {
            "allOf": [
              {
                "$ref": "#/$defs/MetadataPropertyValue"
              },
              {
                "description": "The commit ID."
              }
            ]
          },
          "Repository": {
            "allOf": [
              {
                "$ref": "#/$defs/MetadataPropertyValue"
              },
              {
                "description": "The repository."
              }
            ]
          },
          "GeneratedBy": {
            "allOf": [
              {
                "$ref": "#/$defs/MetadataPropertyValue"
              },
              {
                "description": "The entity this entity was generated by."
              }
            ]
          },
          "ProjectId": {
            "allOf": [
              {
                "$ref": "#/$defs/MetadataPropertyValue"
              },
              {
                "description": "The project ID."
              }
            ]
          }
        },
        "description": "Metadata properties of the tracking entity, trial, or trial component."
      },
      "MetadataPropertyValue": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 1024
      },
      "ModelMetrics": {
        "type": "object",
        "properties": {
          "ModelQuality": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelQuality"
              },
              {
                "description": "Metrics that measure the quality of a model."
              }
            ]
          },
          "ModelDataQuality": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelDataQuality"
              },
              {
                "description": "Metrics that measure the quality of the input data for a model."
              }
            ]
          },
          "Bias": {
            "allOf": [
              {
                "$ref": "#/$defs/Bias"
              },
              {
                "description": "Metrics that measure bais in a model."
              }
            ]
          },
          "Explainability": {
            "allOf": [
              {
                "$ref": "#/$defs/Explainability"
              },
              {
                "description": "Metrics that help explain a model."
              }
            ]
          }
        },
        "description": "Contains metrics captured from a model."
      },
      "ModelQuality": {
        "type": "object",
        "properties": {
          "Statistics": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "Model quality statistics."
              }
            ]
          },
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "Model quality constraints."
              }
            ]
          }
        },
        "description": "Model quality statistics and constraints."
      },
      "MetricsSource": {
        "type": "object",
        "required": [
          "ContentType",
          "S3Uri"
        ],
        "properties": {
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The metric source content type."
              }
            ]
          },
          "ContentDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentDigest"
              },
              {
                "description": "The hash key used for the metrics source."
              }
            ]
          },
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "The S3 URI for the metrics source."
              }
            ]
          }
        },
        "description": "Details about the metrics source."
      },
      "ContentDigest": {
        "type": "string",
        "pattern": "^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$",
        "maxLength": 72
      },
      "ModelDataQuality": {
        "type": "object",
        "properties": {
          "Statistics": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "Data quality statistics for a model."
              }
            ]
          },
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "Data quality constraints for a model."
              }
            ]
          }
        },
        "description": "Data quality constraints and statistics for a model."
      },
      "Bias": {
        "type": "object",
        "properties": {
          "Report": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The bias report for a model"
              }
            ]
          },
          "PreTrainingReport": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The pre-training bias report for a model."
              }
            ]
          },
          "PostTrainingReport": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The post-training bias report for a model."
              }
            ]
          }
        },
        "description": "Contains bias metrics for a model."
      },
      "Explainability": {
        "type": "object",
        "properties": {
          "Report": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The explainability report for a model."
              }
            ]
          }
        },
        "description": "Contains explainability metrics for a model."
      },
      "ClientToken": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 36
      },
      "CustomerMetadataMap": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/CustomerMetadataValue"
        }
      },
      "CustomerMetadataValue": {
        "type": "string",
        "pattern": "^\\([\\p\\{L\\}\\p\\{Z\\}\\p\\{N\\}_.:\\/=\\+\\-@]*\\)$\\{1,256\\}",
        "minLength": 1,
        "maxLength": 256
      },
      "DriftCheckBaselines": {
        "type": "object",
        "properties": {
          "Bias": {
            "allOf": [
              {
                "$ref": "#/$defs/DriftCheckBias"
              },
              {
                "description": "Represents the drift check bias baselines that can be used when the model monitor is set using the model package. "
              }
            ]
          },
          "Explainability": {
            "allOf": [
              {
                "$ref": "#/$defs/DriftCheckExplainability"
              },
              {
                "description": "Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. "
              }
            ]
          },
          "ModelQuality": {
            "allOf": [
              {
                "$ref": "#/$defs/DriftCheckModelQuality"
              },
              {
                "description": "Represents the drift check model quality baselines that can be used when the model monitor is set using the model package."
              }
            ]
          },
          "ModelDataQuality": {
            "allOf": [
              {
                "$ref": "#/$defs/DriftCheckModelDataQuality"
              },
              {
                "description": "Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package."
              }
            ]
          }
        },
        "description": "Represents the drift check baselines that can be used when the model monitor is set using the model package. "
      },
      "DriftCheckBias": {
        "type": "object",
        "properties": {
          "ConfigFile": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSource"
              },
              {
                "description": "The bias config file for a model."
              }
            ]
          },
          "PreTrainingConstraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The pre-training constraints."
              }
            ]
          },
          "PostTrainingConstraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The post-training constraints."
              }
            ]
          }
        },
        "description": "Represents the drift check bias baselines that can be used when the model monitor is set using the model package."
      },
      "FileSource": {
        "type": "object",
        "required": [
          "S3Uri"
        ],
        "properties": {
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The type of content stored in the file source."
              }
            ]
          },
          "ContentDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentDigest"
              },
              {
                "description": "The digest of the file source."
              }
            ]
          },
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "The Amazon S3 URI for the file source."
              }
            ]
          }
        },
        "description": "Contains details regarding the file source."
      },
      "DriftCheckExplainability": {
        "type": "object",
        "properties": {
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The drift check explainability constraints."
              }
            ]
          },
          "ConfigFile": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSource"
              },
              {
                "description": "The explainability config file for the model."
              }
            ]
          }
        },
        "description": "Represents the drift check explainability baselines that can be used when the model monitor is set using the model package. "
      },
      "DriftCheckModelQuality": {
        "type": "object",
        "properties": {
          "Statistics": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The drift check model quality statistics."
              }
            ]
          },
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The drift check model quality constraints."
              }
            ]
          }
        },
        "description": "Represents the drift check model quality baselines that can be used when the model monitor is set using the model package. "
      },
      "DriftCheckModelDataQuality": {
        "type": "object",
        "properties": {
          "Statistics": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The drift check model data quality statistics."
              }
            ]
          },
          "Constraints": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricsSource"
              },
              {
                "description": "The drift check model data quality constraints."
              }
            ]
          }
        },
        "description": "Represents the drift check data quality baselines that can be used when the model monitor is set using the model package. "
      },
      "AdditionalInferenceSpecifications": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AdditionalInferenceSpecificationDefinition"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "AdditionalInferenceSpecificationDefinition": {
        "type": "object",
        "required": [
          "Name",
          "Containers"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A description of the additional Inference specification"
              }
            ]
          },
          "Containers": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageContainerDefinitionList"
              },
              {
                "description": "The Amazon ECR registry path of the Docker image that contains the inference code."
              }
            ]
          },
          "SupportedTransformInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceTypes"
              },
              {
                "description": "A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed."
              }
            ]
          },
          "SupportedRealtimeInferenceInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/RealtimeInferenceInstanceTypes"
              },
              {
                "description": "A list of the instance types that are used to generate inferences in real-time."
              }
            ]
          },
          "SupportedContentTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentTypes"
              },
              {
                "description": "The supported MIME types for the input data."
              }
            ]
          },
          "SupportedResponseMIMETypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseMIMETypes"
              },
              {
                "description": "The supported MIME types for the output data."
              }
            ]
          }
        },
        "description": "A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.sagemaker.us-east-1.amazonaws.com/#X-Amz-Target=SageMaker.CreateModelPackage"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ModelPackageArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
