{
  "name": "CreateAlgorithm",
  "description": "Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SageMaker.CreateAlgorithm"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateAlgorithmInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateAlgorithmInput": {
        "type": "object",
        "required": [
          "AlgorithmName",
          "TrainingSpecification"
        ],
        "title": "CreateAlgorithmInput",
        "properties": {
          "AlgorithmName": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the algorithm."
              }
            ]
          },
          "AlgorithmDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A description of the algorithm."
              }
            ]
          },
          "TrainingSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingSpecification"
              },
              {
                "description": "<p>Specifies details about training jobs run by this algorithm, including the following:</p> <ul> <li> <p>The Amazon ECR path of the container and the version digest of the algorithm.</p> </li> <li> <p>The hyperparameters that the algorithm supports.</p> </li> <li> <p>The instance types that the algorithm supports for training.</p> </li> <li> <p>Whether the algorithm supports distributed training.</p> </li> <li> <p>The metrics that the algorithm emits to Amazon CloudWatch.</p> </li> <li> <p>Which metrics that the algorithm emits can be used as the objective metric for hyperparameter tuning jobs.</p> </li> <li> <p>The input channels that the algorithm supports for training data. For example, an algorithm might support <code>train</code>, <code>validation</code>, and <code>test</code> channels.</p> </li> </ul>"
              }
            ]
          },
          "InferenceSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceSpecification"
              },
              {
                "description": "<p>Specifies details about inference jobs that the algorithm runs, including the following:</p> <ul> <li> <p>The Amazon ECR paths of containers that contain the inference code and model artifacts.</p> </li> <li> <p>The instance types that the algorithm supports for transform jobs and real-time endpoints used for inference.</p> </li> <li> <p>The input and output content formats that the algorithm supports for inference.</p> </li> </ul>"
              }
            ]
          },
          "ValidationSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/AlgorithmValidationSpecification"
              },
              {
                "description": "Specifies configurations for one or more training jobs and that SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that SageMaker runs to test the algorithm's inference code."
              }
            ]
          },
          "CertifyForMarketplace": {
            "allOf": [
              {
                "$ref": "#/$defs/CertifyForMarketplace"
              },
              {
                "description": "Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a>."
              }
            ]
          }
        }
      },
      "EntityName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$",
        "minLength": 1,
        "maxLength": 63
      },
      "EntityDescription": {
        "type": "string",
        "pattern": "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*",
        "maxLength": 1024
      },
      "TrainingSpecification": {
        "type": "object",
        "required": [
          "TrainingImage",
          "SupportedTrainingInstanceTypes",
          "TrainingChannels"
        ],
        "properties": {
          "TrainingImage": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerImage"
              },
              {
                "description": "The Amazon ECR registry path of the Docker image that contains the training algorithm."
              }
            ]
          },
          "TrainingImageDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageDigest"
              },
              {
                "description": "An MD5 hash of the training algorithm that identifies the Docker image used for training."
              }
            ]
          },
          "SupportedHyperParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/HyperParameterSpecifications"
              },
              {
                "description": "A list of the <code>HyperParameterSpecification</code> objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.&gt;"
              }
            ]
          },
          "SupportedTrainingInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingInstanceTypes"
              },
              {
                "description": "A list of the instance types that this algorithm can use for training."
              }
            ]
          },
          "SupportsDistributedTraining": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training."
              }
            ]
          },
          "MetricDefinitions": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricDefinitionList"
              },
              {
                "description": "A list of <code>MetricDefinition</code> objects, which are used for parsing metrics generated by the algorithm."
              }
            ]
          },
          "TrainingChannels": {
            "allOf": [
              {
                "$ref": "#/$defs/ChannelSpecifications"
              },
              {
                "description": "A list of <code>ChannelSpecification</code> objects, which specify the input sources to be used by the algorithm."
              }
            ]
          },
          "SupportedTuningJobObjectiveMetrics": {
            "allOf": [
              {
                "$ref": "#/$defs/HyperParameterTuningJobObjectives"
              },
              {
                "description": "A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job."
              }
            ]
          }
        },
        "description": "Defines how the algorithm is used for a training job."
      },
      "ContainerImage": {
        "type": "string",
        "pattern": "[\\S]+",
        "maxLength": 255
      },
      "ImageDigest": {
        "type": "string",
        "pattern": "^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$",
        "maxLength": 72
      },
      "HyperParameterSpecifications": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HyperParameterSpecification"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "HyperParameterSpecification": {
        "type": "object",
        "required": [
          "Name",
          "Type"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterName"
              },
              {
                "description": "The name of this hyperparameter. The name must be unique."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A brief description of the hyperparameter."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterType"
              },
              {
                "description": "The type of this hyperparameter. The valid types are <code>Integer</code>, <code>Continuous</code>, <code>Categorical</code>, and <code>FreeText</code>."
              }
            ]
          },
          "Range": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterRange"
              },
              {
                "description": "The allowed range for this hyperparameter."
              }
            ]
          },
          "IsTunable": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether this hyperparameter is tunable in a hyperparameter tuning job."
              }
            ]
          },
          "IsRequired": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether this hyperparameter is required."
              }
            ]
          },
          "DefaultValue": {
            "allOf": [
              {
                "$ref": "#/$defs/HyperParameterValue"
              },
              {
                "description": "The default value for this hyperparameter. If a default value is specified, a hyperparameter cannot be required."
              }
            ]
          }
        },
        "description": "Defines a hyperparameter to be used by an algorithm."
      },
      "ParameterName": {
        "type": "string",
        "pattern": "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*",
        "maxLength": 256
      },
      "ParameterType": {
        "type": "string",
        "enum": [
          "Integer",
          "Continuous",
          "Categorical",
          "FreeText"
        ]
      },
      "ParameterRange": {
        "type": "object",
        "properties": {
          "IntegerParameterRangeSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerParameterRangeSpecification"
              },
              {
                "description": "A <code>IntegerParameterRangeSpecification</code> object that defines the possible values for an integer hyperparameter."
              }
            ]
          },
          "ContinuousParameterRangeSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/ContinuousParameterRangeSpecification"
              },
              {
                "description": "A <code>ContinuousParameterRangeSpecification</code> object that defines the possible values for a continuous hyperparameter."
              }
            ]
          },
          "CategoricalParameterRangeSpecification": {
            "allOf": [
              {
                "$ref": "#/$defs/CategoricalParameterRangeSpecification"
              },
              {
                "description": "A <code>CategoricalParameterRangeSpecification</code> object that defines the possible values for a categorical hyperparameter."
              }
            ]
          }
        },
        "description": "Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm."
      },
      "IntegerParameterRangeSpecification": {
        "type": "object",
        "required": [
          "MinValue",
          "MaxValue"
        ],
        "properties": {
          "MinValue": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValue"
              },
              {
                "description": "The minimum integer value allowed."
              }
            ]
          },
          "MaxValue": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValue"
              },
              {
                "description": "The maximum integer value allowed."
              }
            ]
          }
        },
        "description": "Defines the possible values for an integer hyperparameter."
      },
      "ParameterValue": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "ContinuousParameterRangeSpecification": {
        "type": "object",
        "required": [
          "MinValue",
          "MaxValue"
        ],
        "properties": {
          "MinValue": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValue"
              },
              {
                "description": "The minimum floating-point value allowed."
              }
            ]
          },
          "MaxValue": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValue"
              },
              {
                "description": "The maximum floating-point value allowed."
              }
            ]
          }
        },
        "description": "Defines the possible values for a continuous hyperparameter."
      },
      "CategoricalParameterRangeSpecification": {
        "type": "object",
        "required": [
          "Values"
        ],
        "properties": {
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/ParameterValues"
              },
              {
                "description": "The allowed categories for the hyperparameter."
              }
            ]
          }
        },
        "description": "Defines the possible values for a categorical hyperparameter."
      },
      "ParameterValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ParameterValue"
        },
        "minItems": 1,
        "maxItems": 30
      },
      "Boolean": {
        "type": "boolean"
      },
      "HyperParameterValue": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 2500
      },
      "TrainingInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TrainingInstanceType"
        }
      },
      "TrainingInstanceType": {
        "type": "string",
        "enum": [
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.p3dn.24xlarge",
          "ml.p4d.24xlarge",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.c5n.xlarge",
          "ml.c5n.2xlarge",
          "ml.c5n.4xlarge",
          "ml.c5n.9xlarge",
          "ml.c5n.18xlarge",
          "ml.g5.xlarge",
          "ml.g5.2xlarge",
          "ml.g5.4xlarge",
          "ml.g5.8xlarge",
          "ml.g5.16xlarge",
          "ml.g5.12xlarge",
          "ml.g5.24xlarge",
          "ml.g5.48xlarge",
          "ml.trn1.2xlarge",
          "ml.trn1.32xlarge",
          "ml.trn1n.32xlarge",
          "ml.p5.48xlarge"
        ]
      },
      "MetricDefinitionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MetricDefinition"
        },
        "minItems": 0,
        "maxItems": 40
      },
      "MetricDefinition": {
        "type": "object",
        "required": [
          "Name",
          "Regex"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricName"
              },
              {
                "description": "The name of the metric."
              }
            ]
          },
          "Regex": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricRegex"
              },
              {
                "description": "A regular expression that searches the output of a training job and gets the value of the metric. For more information about using regular expressions to define metrics, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html\">Defining metrics and environment variables</a>."
              }
            ]
          }
        },
        "description": "Specifies a metric that the training algorithm writes to <code>stderr</code> or <code>stdout</code>. You can view these logs to understand how your training job performs and check for any errors encountered during training. SageMaker hyperparameter tuning captures all defined metrics. Specify one of the defined metrics to use as an objective metric using the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective\">TuningObjective</a> parameter in the <code>HyperParameterTrainingJobDefinition</code> API to evaluate job performance during hyperparameter tuning."
      },
      "MetricName": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255
      },
      "MetricRegex": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 500
      },
      "ChannelSpecifications": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ChannelSpecification"
        },
        "minItems": 1,
        "maxItems": 8
      },
      "ChannelSpecification": {
        "type": "object",
        "required": [
          "Name",
          "SupportedContentTypes",
          "SupportedInputModes"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ChannelName"
              },
              {
                "description": "The name of the channel."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A brief description of the channel."
              }
            ]
          },
          "IsRequired": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether the channel is required by the algorithm."
              }
            ]
          },
          "SupportedContentTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentTypes"
              },
              {
                "description": "The supported MIME types for the data."
              }
            ]
          },
          "SupportedCompressionTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/CompressionTypes"
              },
              {
                "description": "The allowed compression types, if data compression is used."
              }
            ]
          },
          "SupportedInputModes": {
            "allOf": [
              {
                "$ref": "#/$defs/InputModes"
              },
              {
                "description": "<p>The allowed input mode, either FILE or PIPE.</p> <p>In FILE mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode.</p> <p>In PIPE mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.</p>"
              }
            ]
          }
        },
        "description": "Defines a named input source, called a channel, to be used by an algorithm."
      },
      "ChannelName": {
        "type": "string",
        "pattern": "[A-Za-z0-9\\.\\-_]+",
        "minLength": 1,
        "maxLength": 64
      },
      "ContentTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ContentType"
        }
      },
      "ContentType": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "CompressionTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CompressionType"
        }
      },
      "CompressionType": {
        "type": "string",
        "enum": [
          "None",
          "Gzip"
        ]
      },
      "InputModes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TrainingInputMode"
        },
        "minItems": 1
      },
      "TrainingInputMode": {
        "type": "string",
        "enum": [
          "Pipe",
          "File",
          "FastFile"
        ],
        "description": "<p>The training input mode that the algorithm supports. For more information about input modes, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\">Algorithms</a>.</p> <p> <b>Pipe mode</b> </p> <p>If an algorithm supports <code>Pipe</code> mode, Amazon SageMaker streams data directly from Amazon S3 to the container.</p> <p> <b>File mode</b> </p> <p>If an algorithm supports <code>File</code> mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container.</p> <p>You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any.</p> <p>For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training.</p> <p> <b>FastFile mode</b> </p> <p>If an algorithm supports <code>FastFile</code> mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk.</p> <p> <code>FastFile</code> mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.</p>"
      },
      "HyperParameterTuningJobObjectives": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HyperParameterTuningJobObjective"
        }
      },
      "HyperParameterTuningJobObjective": {
        "type": "object",
        "required": [
          "Type",
          "MetricName"
        ],
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/HyperParameterTuningJobObjectiveType"
              },
              {
                "description": "Whether to minimize or maximize the objective metric."
              }
            ]
          },
          "MetricName": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricName"
              },
              {
                "description": "The name of the metric to use for the objective metric."
              }
            ]
          }
        },
        "description": "Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the <code>Type</code> parameter."
      },
      "HyperParameterTuningJobObjectiveType": {
        "type": "string",
        "enum": [
          "Maximize",
          "Minimize"
        ]
      },
      "InferenceSpecification": {
        "type": "object",
        "required": [
          "Containers",
          "SupportedContentTypes",
          "SupportedResponseMIMETypes"
        ],
        "properties": {
          "Containers": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageContainerDefinitionList"
              },
              {
                "description": "The Amazon ECR registry path of the Docker image that contains the inference code."
              }
            ]
          },
          "SupportedTransformInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceTypes"
              },
              {
                "description": "<p>A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.</p> <p>This parameter is required for unversioned models, and optional for versioned models.</p>"
              }
            ]
          },
          "SupportedRealtimeInferenceInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/RealtimeInferenceInstanceTypes"
              },
              {
                "description": "<p>A list of the instance types that are used to generate inferences in real-time.</p> <p>This parameter is required for unversioned models, and optional for versioned models.</p>"
              }
            ]
          },
          "SupportedContentTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentTypes"
              },
              {
                "description": "The supported MIME types for the input data."
              }
            ]
          },
          "SupportedResponseMIMETypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseMIMETypes"
              },
              {
                "description": "The supported MIME types for the output data."
              }
            ]
          }
        },
        "description": "Defines how to perform inference generation after a training job is run."
      },
      "ModelPackageContainerDefinitionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ModelPackageContainerDefinition"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "ModelPackageContainerDefinition": {
        "type": "object",
        "required": [
          "Image"
        ],
        "properties": {
          "ContainerHostname": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerHostname"
              },
              {
                "description": "The DNS host name for the Docker container."
              }
            ]
          },
          "Image": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerImage"
              },
              {
                "description": "<p>The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.</p> <p>If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code> image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon SageMaker</a>.</p>"
              }
            ]
          },
          "ImageDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageDigest"
              },
              {
                "description": "An MD5 hash of the training algorithm that identifies the Docker image used for training."
              }
            ]
          },
          "ModelDataUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "<p>The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single <code>gzip</code> compressed tar archive (<code>.tar.gz</code> suffix).</p> <note> <p>The model artifacts must be in an S3 bucket that is in the same region as the model package.</p> </note>"
              }
            ]
          },
          "ProductId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductId"
              },
              {
                "description": "The Amazon Web Services Marketplace product ID of the model package."
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/$defs/EnvironmentMap"
              },
              {
                "description": "The environment variables to set in the Docker container. Each key and value in the <code>Environment</code> string to string map can have length of up to 1024. We support up to 16 entries in the map."
              }
            ]
          },
          "ModelInput": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelInput"
              },
              {
                "description": "A structure with Model Input details."
              }
            ]
          },
          "Framework": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The machine learning framework of the model package container image."
              }
            ]
          },
          "FrameworkVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageFrameworkVersion"
              },
              {
                "description": "The framework version of the Model Package Container Image."
              }
            ]
          },
          "NearestModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling <code>ListModelMetadata</code>."
              }
            ]
          }
        },
        "description": "Describes the Docker container for the model package."
      },
      "ContainerHostname": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}",
        "maxLength": 63
      },
      "Url": {
        "type": "string",
        "pattern": "^(https|s3)://([^/]+)/?(.*)$",
        "maxLength": 1024
      },
      "ProductId": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
        "maxLength": 256
      },
      "EnvironmentMap": {
        "type": "object",
        "maxProperties": 16,
        "additionalProperties": {
          "$ref": "#/$defs/EnvironmentValue"
        }
      },
      "EnvironmentValue": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "maxLength": 1024
      },
      "ModelInput": {
        "type": "object",
        "required": [
          "DataInputConfig"
        ],
        "properties": {
          "DataInputConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DataInputConfig"
              },
              {
                "description": "The input configuration object for the model."
              }
            ]
          }
        },
        "description": "Input object for the model."
      },
      "DataInputConfig": {
        "type": "string",
        "pattern": "[\\S\\s]+",
        "minLength": 1,
        "maxLength": 1024
      },
      "String": {
        "type": "string"
      },
      "ModelPackageFrameworkVersion": {
        "type": "string",
        "pattern": "[0-9]\\.[A-Za-z0-9.-]+",
        "minLength": 3,
        "maxLength": 10
      },
      "TransformInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TransformInstanceType"
        },
        "minItems": 1
      },
      "TransformInstanceType": {
        "type": "string",
        "enum": [
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge"
        ]
      },
      "RealtimeInferenceInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ProductionVariantInstanceType"
        }
      },
      "ProductionVariantInstanceType": {
        "type": "string",
        "enum": [
          "ml.t2.medium",
          "ml.t2.large",
          "ml.t2.xlarge",
          "ml.t2.2xlarge",
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.m5d.large",
          "ml.m5d.xlarge",
          "ml.m5d.2xlarge",
          "ml.m5d.4xlarge",
          "ml.m5d.12xlarge",
          "ml.m5d.24xlarge",
          "ml.c4.large",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.c5.large",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.c5d.large",
          "ml.c5d.xlarge",
          "ml.c5d.2xlarge",
          "ml.c5d.4xlarge",
          "ml.c5d.9xlarge",
          "ml.c5d.18xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge",
          "ml.r5.large",
          "ml.r5.xlarge",
          "ml.r5.2xlarge",
          "ml.r5.4xlarge",
          "ml.r5.12xlarge",
          "ml.r5.24xlarge",
          "ml.r5d.large",
          "ml.r5d.xlarge",
          "ml.r5d.2xlarge",
          "ml.r5d.4xlarge",
          "ml.r5d.12xlarge",
          "ml.r5d.24xlarge",
          "ml.inf1.xlarge",
          "ml.inf1.2xlarge",
          "ml.inf1.6xlarge",
          "ml.inf1.24xlarge",
          "ml.c6i.large",
          "ml.c6i.xlarge",
          "ml.c6i.2xlarge",
          "ml.c6i.4xlarge",
          "ml.c6i.8xlarge",
          "ml.c6i.12xlarge",
          "ml.c6i.16xlarge",
          "ml.c6i.24xlarge",
          "ml.c6i.32xlarge",
          "ml.g5.xlarge",
          "ml.g5.2xlarge",
          "ml.g5.4xlarge",
          "ml.g5.8xlarge",
          "ml.g5.12xlarge",
          "ml.g5.16xlarge",
          "ml.g5.24xlarge",
          "ml.g5.48xlarge",
          "ml.p4d.24xlarge",
          "ml.c7g.large",
          "ml.c7g.xlarge",
          "ml.c7g.2xlarge",
          "ml.c7g.4xlarge",
          "ml.c7g.8xlarge",
          "ml.c7g.12xlarge",
          "ml.c7g.16xlarge",
          "ml.m6g.large",
          "ml.m6g.xlarge",
          "ml.m6g.2xlarge",
          "ml.m6g.4xlarge",
          "ml.m6g.8xlarge",
          "ml.m6g.12xlarge",
          "ml.m6g.16xlarge",
          "ml.m6gd.large",
          "ml.m6gd.xlarge",
          "ml.m6gd.2xlarge",
          "ml.m6gd.4xlarge",
          "ml.m6gd.8xlarge",
          "ml.m6gd.12xlarge",
          "ml.m6gd.16xlarge",
          "ml.c6g.large",
          "ml.c6g.xlarge",
          "ml.c6g.2xlarge",
          "ml.c6g.4xlarge",
          "ml.c6g.8xlarge",
          "ml.c6g.12xlarge",
          "ml.c6g.16xlarge",
          "ml.c6gd.large",
          "ml.c6gd.xlarge",
          "ml.c6gd.2xlarge",
          "ml.c6gd.4xlarge",
          "ml.c6gd.8xlarge",
          "ml.c6gd.12xlarge",
          "ml.c6gd.16xlarge",
          "ml.c6gn.large",
          "ml.c6gn.xlarge",
          "ml.c6gn.2xlarge",
          "ml.c6gn.4xlarge",
          "ml.c6gn.8xlarge",
          "ml.c6gn.12xlarge",
          "ml.c6gn.16xlarge",
          "ml.r6g.large",
          "ml.r6g.xlarge",
          "ml.r6g.2xlarge",
          "ml.r6g.4xlarge",
          "ml.r6g.8xlarge",
          "ml.r6g.12xlarge",
          "ml.r6g.16xlarge",
          "ml.r6gd.large",
          "ml.r6gd.xlarge",
          "ml.r6gd.2xlarge",
          "ml.r6gd.4xlarge",
          "ml.r6gd.8xlarge",
          "ml.r6gd.12xlarge",
          "ml.r6gd.16xlarge",
          "ml.p4de.24xlarge",
          "ml.trn1.2xlarge",
          "ml.trn1.32xlarge",
          "ml.inf2.xlarge",
          "ml.inf2.8xlarge",
          "ml.inf2.24xlarge",
          "ml.inf2.48xlarge"
        ]
      },
      "ResponseMIMETypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ResponseMIMEType"
        }
      },
      "ResponseMIMEType": {
        "type": "string",
        "pattern": "^[-\\w]+\\/.+$",
        "maxLength": 1024
      },
      "AlgorithmValidationSpecification": {
        "type": "object",
        "required": [
          "ValidationRole",
          "ValidationProfiles"
        ],
        "properties": {
          "ValidationRole": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The IAM roles that SageMaker uses to run the training jobs."
              }
            ]
          },
          "ValidationProfiles": {
            "allOf": [
              {
                "$ref": "#/$defs/AlgorithmValidationProfiles"
              },
              {
                "description": "An array of <code>AlgorithmValidationProfile</code> objects, each of which specifies a training job and batch transform job that SageMaker runs to validate your algorithm."
              }
            ]
          }
        },
        "description": "Specifies configurations for one or more training jobs that SageMaker runs to test the algorithm."
      },
      "RoleArn": {
        "type": "string",
        "pattern": "^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$",
        "minLength": 20,
        "maxLength": 2048
      },
      "AlgorithmValidationProfiles": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AlgorithmValidationProfile"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "AlgorithmValidationProfile": {
        "type": "object",
        "required": [
          "ProfileName",
          "TrainingJobDefinition"
        ],
        "properties": {
          "ProfileName": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the profile for the algorithm. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen)."
              }
            ]
          },
          "TrainingJobDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingJobDefinition"
              },
              {
                "description": "The <code>TrainingJobDefinition</code> object that describes the training job that SageMaker runs to validate your algorithm."
              }
            ]
          },
          "TransformJobDefinition": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformJobDefinition"
              },
              {
                "description": "The <code>TransformJobDefinition</code> object that describes the transform job that SageMaker runs to validate your algorithm."
              }
            ]
          }
        },
        "description": "<p>Defines a training job and a batch transform job that SageMaker runs to validate your algorithm.</p> <p>The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.</p>"
      },
      "TrainingJobDefinition": {
        "type": "object",
        "required": [
          "TrainingInputMode",
          "InputDataConfig",
          "OutputDataConfig",
          "ResourceConfig",
          "StoppingCondition"
        ],
        "properties": {
          "TrainingInputMode": {
            "$ref": "#/$defs/TrainingInputMode"
          },
          "HyperParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/HyperParameters"
              },
              {
                "description": "The hyperparameters used for the training job."
              }
            ]
          },
          "InputDataConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/InputDataConfig"
              },
              {
                "description": "An array of <code>Channel</code> objects, each of which specifies an input source."
              }
            ]
          },
          "OutputDataConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputDataConfig"
              },
              {
                "description": "the path to the S3 bucket where you want to store model artifacts. SageMaker creates subfolders for the artifacts."
              }
            ]
          },
          "ResourceConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceConfig"
              },
              {
                "description": "The resources, including the ML compute instances and ML storage volumes, to use for model training."
              }
            ]
          },
          "StoppingCondition": {
            "allOf": [
              {
                "$ref": "#/$defs/StoppingCondition"
              },
              {
                "description": "<p>Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs.</p> <p>To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts.</p>"
              }
            ]
          }
        },
        "description": "Defines the input needed to run a training job using the algorithm."
      },
      "HyperParameters": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 100,
        "additionalProperties": {
          "$ref": "#/$defs/HyperParameterValue"
        }
      },
      "InputDataConfig": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Channel"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "Channel": {
        "type": "object",
        "required": [
          "ChannelName",
          "DataSource"
        ],
        "properties": {
          "ChannelName": {
            "allOf": [
              {
                "$ref": "#/$defs/ChannelName"
              },
              {
                "description": "The name of the channel. "
              }
            ]
          },
          "DataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/DataSource"
              },
              {
                "description": "The location of the channel data."
              }
            ]
          },
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The MIME type of the data."
              }
            ]
          },
          "CompressionType": {
            "allOf": [
              {
                "$ref": "#/$defs/CompressionType"
              },
              {
                "description": "If training data is compressed, the compression type. The default value is <code>None</code>. <code>CompressionType</code> is used only in Pipe input mode. In File mode, leave this field unset or set it to None."
              }
            ]
          },
          "RecordWrapperType": {
            "allOf": [
              {
                "$ref": "#/$defs/RecordWrapper"
              },
              {
                "description": "<p/> <p>Specify RecordIO as the value when input data is in raw format but the training algorithm requires the RecordIO format. In this case, SageMaker wraps each individual S3 object in a RecordIO record. If the input data is already in RecordIO format, you don't need to set this attribute. For more information, see <a href=\"https://mxnet.apache.org/api/architecture/note_data_loading#data-format\">Create a Dataset Using RecordIO</a>. </p> <p>In File mode, leave this field unset or set it to None.</p>"
              }
            ]
          },
          "InputMode": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingInputMode"
              },
              {
                "description": "<p>(Optional) The input mode to use for the data channel in a training job. If you don't set a value for <code>InputMode</code>, SageMaker uses the value set for <code>TrainingInputMode</code>. Use this parameter to override the <code>TrainingInputMode</code> setting in a <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html\">AlgorithmSpecification</a> request when you have a channel that needs a different input mode from the training job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML storage volume, and mount the directory to a Docker volume, use <code>File</code> input mode. To stream data directly from Amazon S3 to the container, choose <code>Pipe</code> input mode.</p> <p>To use a model for incremental training, choose <code>File</code> input model.</p>"
              }
            ]
          },
          "ShuffleConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/ShuffleConfig"
              },
              {
                "description": "<p>A configuration for a shuffle option for input data in a channel. If you use <code>S3Prefix</code> for <code>S3DataType</code>, this shuffles the results of the S3 key prefix matches. If you use <code>ManifestFile</code>, the order of the S3 object references in the <code>ManifestFile</code> is shuffled. If you use <code>AugmentedManifestFile</code>, the order of the JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined using the <code>Seed</code> value.</p> <p>For Pipe input mode, shuffling is done at the start of every epoch. With large datasets this ensures that the order of the training data is different for each epoch, it helps reduce bias and possible overfitting. In a multi-node training job when ShuffleConfig is combined with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.</p>"
              }
            ]
          }
        },
        "description": "A channel is a named input source that training algorithms can consume. "
      },
      "DataSource": {
        "type": "object",
        "properties": {
          "S3DataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/S3DataSource"
              },
              {
                "description": "The S3 location of the data source that is associated with a channel."
              }
            ]
          },
          "FileSystemDataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemDataSource"
              },
              {
                "description": "The file system that is associated with a channel."
              }
            ]
          }
        },
        "description": "Describes the location of the channel data."
      },
      "S3DataSource": {
        "type": "object",
        "required": [
          "S3DataType",
          "S3Uri"
        ],
        "properties": {
          "S3DataType": {
            "allOf": [
              {
                "$ref": "#/$defs/S3DataType"
              },
              {
                "description": "<p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix. SageMaker uses all objects that match the specified key name prefix for model training. </p> <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that is a manifest file containing a list of object keys that you want SageMaker to use for model training. </p> <p>If you choose <code>AugmentedManifestFile</code>, S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. <code>AugmentedManifestFile</code> can only be used if the Channel's input mode is <code>Pipe</code>.</p>"
              }
            ]
          },
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>Depending on the value specified for the <code>S3DataType</code>, identifies either a key name prefix or a manifest. For example: </p> <ul> <li> <p> A key name prefix might look like this: <code>s3://bucketname/exampleprefix</code> </p> </li> <li> <p> A manifest might look like this: <code>s3://bucketname/example.manifest</code> </p> <p> A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of <code>S3Uri</code>. Note that the prefix must be a valid non-empty <code>S3Uri</code> that precludes users from specifying a manifest whose individual <code>S3Uri</code> is sourced from different S3 buckets.</p> <p> The following code example shows a valid manifest format: </p> <p> <code>[ {\"prefix\": \"s3://customer_bucket/some/prefix/\"},</code> </p> <p> <code> \"relative/path/to/custdata-1\",</code> </p> <p> <code> \"relative/path/custdata-2\",</code> </p> <p> <code> ...</code> </p> <p> <code> \"relative/path/custdata-N\"</code> </p> <p> <code>]</code> </p> <p> This JSON is equivalent to the following <code>S3Uri</code> list:</p> <p> <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code> </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code> </p> <p> <code>...</code> </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code> </p> <p>The complete set of <code>S3Uri</code> in this manifest is the input data for the channel for this data source. The object that each <code>S3Uri</code> points to must be readable by the IAM role that SageMaker uses to perform tasks on your behalf. </p> </li> </ul> <p>Your input bucket must be located in same Amazon Web Services region as your training job.</p>"
              }
            ]
          },
          "S3DataDistributionType": {
            "allOf": [
              {
                "$ref": "#/$defs/S3DataDistribution"
              },
              {
                "description": "<p>If you want SageMaker to replicate the entire dataset on each ML compute instance that is launched for model training, specify <code>FullyReplicated</code>. </p> <p>If you want SageMaker to replicate a subset of data on each ML compute instance that is launched for model training, specify <code>ShardedByS3Key</code>. If there are <i>n</i> ML compute instances launched for a training job, each instance gets approximately 1/<i>n</i> of the number of S3 objects. In this case, model training on each machine uses only the subset of training data. </p> <p>Don't choose more ML compute instances for training than available S3 objects. If you do, some nodes won't get any data and you will pay for nodes that aren't getting any training data. This applies in both File and Pipe modes. Keep this in mind when developing algorithms. </p> <p>In distributed training, where you use multiple ML compute EC2 instances, you might choose <code>ShardedByS3Key</code>. If the algorithm requires copying training data to the ML storage volume (when <code>TrainingInputMode</code> is set to <code>File</code>), this copies 1/<i>n</i> of the number of objects. </p>"
              }
            ]
          },
          "AttributeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeNames"
              },
              {
                "description": "A list of one or more attribute names to use that are found in a specified augmented manifest file."
              }
            ]
          },
          "InstanceGroupNames": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceGroupNames"
              },
              {
                "description": "A list of names of instance groups that get data from the S3 data source."
              }
            ]
          }
        },
        "description": "<p>Describes the S3 data source.</p> <p>Your input bucket must be in the same Amazon Web Services region as your training job.</p>"
      },
      "S3DataType": {
        "type": "string",
        "enum": [
          "ManifestFile",
          "S3Prefix",
          "AugmentedManifestFile"
        ]
      },
      "S3Uri": {
        "type": "string",
        "pattern": "^(https|s3)://([^/]+)/?(.*)$",
        "maxLength": 1024
      },
      "S3DataDistribution": {
        "type": "string",
        "enum": [
          "FullyReplicated",
          "ShardedByS3Key"
        ]
      },
      "AttributeNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AttributeName"
        },
        "maxItems": 16
      },
      "AttributeName": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 256
      },
      "InstanceGroupNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InstanceGroupName"
        },
        "maxItems": 5
      },
      "InstanceGroupName": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 64
      },
      "FileSystemDataSource": {
        "type": "object",
        "required": [
          "FileSystemId",
          "FileSystemAccessMode",
          "FileSystemType",
          "DirectoryPath"
        ],
        "properties": {
          "FileSystemId": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemId"
              },
              {
                "description": "The file system id."
              }
            ]
          },
          "FileSystemAccessMode": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemAccessMode"
              },
              {
                "description": "The access mode of the mount of the directory associated with the channel. A directory can be mounted either in <code>ro</code> (read-only) or <code>rw</code> (read-write) mode."
              }
            ]
          },
          "FileSystemType": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemType"
              },
              {
                "description": "The file system type. "
              }
            ]
          },
          "DirectoryPath": {
            "allOf": [
              {
                "$ref": "#/$defs/DirectoryPath"
              },
              {
                "description": "The full path to the directory to associate with the channel."
              }
            ]
          }
        },
        "description": "Specifies a file system data source for a channel."
      },
      "FileSystemId": {
        "type": "string",
        "pattern": ".*",
        "minLength": 11
      },
      "FileSystemAccessMode": {
        "type": "string",
        "enum": [
          "rw",
          "ro"
        ]
      },
      "FileSystemType": {
        "type": "string",
        "enum": [
          "EFS",
          "FSxLustre"
        ]
      },
      "DirectoryPath": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 4096
      },
      "RecordWrapper": {
        "type": "string",
        "enum": [
          "None",
          "RecordIO"
        ]
      },
      "ShuffleConfig": {
        "type": "object",
        "required": [
          "Seed"
        ],
        "properties": {
          "Seed": {
            "allOf": [
              {
                "$ref": "#/$defs/Seed"
              },
              {
                "description": "Determines the shuffling order in <code>ShuffleConfig</code> value."
              }
            ]
          }
        },
        "description": "<p>A configuration for a shuffle option for input data in a channel. If you use <code>S3Prefix</code> for <code>S3DataType</code>, the results of the S3 key prefix matches are shuffled. If you use <code>ManifestFile</code>, the order of the S3 object references in the <code>ManifestFile</code> is shuffled. If you use <code>AugmentedManifestFile</code>, the order of the JSON lines in the <code>AugmentedManifestFile</code> is shuffled. The shuffling order is determined using the <code>Seed</code> value.</p> <p>For Pipe input mode, when <code>ShuffleConfig</code> is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when <code>ShuffleConfig</code> is combined with <code>S3DataDistributionType</code> of <code>ShardedByS3Key</code>, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.</p>"
      },
      "Seed": {
        "type": "integer"
      },
      "OutputDataConfig": {
        "type": "object",
        "required": [
          "S3OutputPath"
        ],
        "properties": {
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following formats: </p> <ul> <li> <p>// KMS Key ID</p> <p> <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>// Amazon Resource Name (ARN) of a KMS Key</p> <p> <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>// KMS Key Alias</p> <p> <code>\"alias/ExampleAlias\"</code> </p> </li> <li> <p>// Amazon Resource Name (ARN) of a KMS Key Alias</p> <p> <code>\"arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias\"</code> </p> </li> </ul> <p>If you use a KMS key ID or an alias of your KMS key, the SageMaker execution role must include permissions to call <code>kms:Encrypt</code>. If you don't provide a KMS key ID, SageMaker uses the default KMS key for Amazon S3 for your role's account. SageMaker uses server-side encryption with KMS-managed keys for <code>OutputDataConfig</code>. If you use a bucket policy with an <code>s3:PutObject</code> permission that only allows objects with server-side encryption, set the condition key of <code>s3:x-amz-server-side-encryption</code> to <code>\"aws:kms\"</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html\">KMS-Managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i> </p> <p>The KMS key policy must grant permission to the IAM role that you specify in your <code>CreateTrainingJob</code>, <code>CreateTransformJob</code>, or <code>CreateHyperParameterTuningJob</code> requests. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\">Using Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>"
              }
            ]
          },
          "S3OutputPath": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "Identifies the S3 path where you want SageMaker to store the model artifacts. For example, <code>s3://bucket-name/key-name-prefix</code>. "
              }
            ]
          },
          "CompressionType": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputCompressionType"
              },
              {
                "description": "The model output compression type. Select <code>None</code> to output an uncompressed model, recommended for large model outputs. Defaults to gzip."
              }
            ]
          }
        },
        "description": "Provides information about how to store model training results (model artifacts)."
      },
      "KmsKeyId": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 2048
      },
      "OutputCompressionType": {
        "type": "string",
        "enum": [
          "GZIP",
          "NONE"
        ]
      },
      "ResourceConfig": {
        "type": "object",
        "required": [
          "VolumeSizeInGB"
        ],
        "properties": {
          "InstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingInstanceType"
              },
              {
                "description": "<p>The ML compute instance type. </p> <note> <p>SageMaker Training on Amazon Elastic Compute Cloud (EC2) P4de instances is in preview release starting December 9th, 2022. </p> <p> <a href=\"http://aws.amazon.com/ec2/instance-types/p4/\">Amazon EC2 P4de instances</a> (currently in preview) are powered by 8 NVIDIA A100 GPUs with 80GB high-performance HBM2e GPU memory, which accelerate the speed of training ML models that need to be trained on large datasets of high-resolution data. In this preview release, Amazon SageMaker supports ML training jobs on P4de instances (<code>ml.p4de.24xlarge</code>) to reduce model training time. The <code>ml.p4de.24xlarge</code> instances are available in the following Amazon Web Services Regions. </p> <ul> <li> <p>US East (N. Virginia) (us-east-1)</p> </li> <li> <p>US West (Oregon) (us-west-2)</p> </li> </ul> <p>To request quota limit increase and start using P4de instances, contact the SageMaker Training service team through your account team.</p> </note>"
              }
            ]
          },
          "InstanceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingInstanceCount"
              },
              {
                "description": "The number of ML compute instances to use. For distributed training, provide a value greater than 1. "
              }
            ]
          },
          "VolumeSizeInGB": {
            "allOf": [
              {
                "$ref": "#/$defs/VolumeSizeInGB"
              },
              {
                "description": "<p>The size of the ML storage volume that you want to provision. </p> <p>ML storage volumes store model artifacts and incremental states. Training algorithms might also use the ML storage volume for scratch space. If you want to store the training data in the ML storage volume, choose <code>File</code> as the <code>TrainingInputMode</code> in the algorithm specification. </p> <p>When using an ML instance with <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html#nvme-ssd-volumes\">NVMe SSD volumes</a>, SageMaker doesn't provision Amazon EBS General Purpose SSD (gp2) storage. Available storage is fixed to the NVMe-type instance's storage capacity. SageMaker configures storage paths for training datasets, checkpoints, model artifacts, and outputs to use the entire capacity of the instance storage. For example, ML instance families with the NVMe-type instance storage include <code>ml.p4d</code>, <code>ml.g4dn</code>, and <code>ml.g5</code>. </p> <p>When using an ML instance with the EBS-only storage option and without instance storage, you must define the size of EBS volume through <code>VolumeSizeInGB</code> in the <code>ResourceConfig</code> API. For example, ML instance families that use EBS volumes include <code>ml.c5</code> and <code>ml.p2</code>. </p> <p>To look up instance types and their instance storage types and volumes, see <a href=\"http://aws.amazon.com/ec2/instance-types/\">Amazon EC2 Instance Types</a>.</p> <p>To find the default local paths defined by the SageMaker training platform, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/model-train-storage.html\">Amazon SageMaker Training Storage Folders for Training Datasets, Checkpoints, Model Artifacts, and Outputs</a>.</p>"
              }
            ]
          },
          "VolumeKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>The Amazon Web Services KMS key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training job.</p> <note> <p>Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a <code>VolumeKmsKeyId</code> when using an instance type with local storage.</p> <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p> <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD Instance Store Volumes</a>.</p> </note> <p>The <code>VolumeKmsKeyId</code> can be in any of the following formats:</p> <ul> <li> <p>// KMS Key ID</p> <p> <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>// Amazon Resource Name (ARN) of a KMS Key</p> <p> <code>\"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> </ul>"
              }
            ]
          },
          "InstanceGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceGroups"
              },
              {
                "description": "The configuration of a heterogeneous cluster in JSON format."
              }
            ]
          },
          "KeepAlivePeriodInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/KeepAlivePeriodInSeconds"
              },
              {
                "description": "The duration of time in seconds to retain configured resources in a warm pool for subsequent training jobs."
              }
            ]
          }
        },
        "description": "Describes the resources, including machine learning (ML) compute instances and ML storage volumes, to use for model training. "
      },
      "TrainingInstanceCount": {
        "type": "integer",
        "minimum": 0
      },
      "VolumeSizeInGB": {
        "type": "integer",
        "minimum": 1
      },
      "InstanceGroups": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InstanceGroup"
        },
        "maxItems": 5
      },
      "InstanceGroup": {
        "type": "object",
        "required": [
          "InstanceType",
          "InstanceCount",
          "InstanceGroupName"
        ],
        "properties": {
          "InstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingInstanceType"
              },
              {
                "description": "Specifies the instance type of the instance group."
              }
            ]
          },
          "InstanceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/TrainingInstanceCount"
              },
              {
                "description": "Specifies the number of instances of the instance group."
              }
            ]
          },
          "InstanceGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceGroupName"
              },
              {
                "description": "Specifies the name of the instance group."
              }
            ]
          }
        },
        "description": "Defines an instance group for heterogeneous cluster training. When requesting a training job using the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html\">CreateTrainingJob</a> API, you can configure multiple instance groups ."
      },
      "KeepAlivePeriodInSeconds": {
        "type": "integer",
        "minimum": 0,
        "maximum": 3600
      },
      "StoppingCondition": {
        "type": "object",
        "properties": {
          "MaxRuntimeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxRuntimeInSeconds"
              },
              {
                "description": "<p>The maximum length of time, in seconds, that a training or compilation job can run before it is stopped.</p> <p>For compilation jobs, if the job does not complete during this time, a <code>TimeOut</code> error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model.</p> <p>For all other jobs, if the job does not complete during this time, SageMaker ends the job. When <code>RetryStrategy</code> is specified in the job request, <code>MaxRuntimeInSeconds</code> specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days.</p> <p>The maximum time that a <code>TrainingJob</code> can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.</p>"
              }
            ]
          },
          "MaxWaitTimeInSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxWaitTimeInSeconds"
              },
              {
                "description": "<p>The maximum length of time, in seconds, that a managed Spot training job has to complete. It is the amount of time spent waiting for Spot capacity plus the amount of time the job can run. It must be equal to or greater than <code>MaxRuntimeInSeconds</code>. If the job does not complete during this time, SageMaker ends the job.</p> <p>When <code>RetryStrategy</code> is specified in the job request, <code>MaxWaitTimeInSeconds</code> specifies the maximum time for all of the attempts in total, not each individual attempt.</p>"
              }
            ]
          }
        },
        "description": "<p>Specifies a limit to how long a model training job or model compilation job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training or compilation job. Use this API to cap model training costs.</p> <p>To stop a training job, SageMaker sends the algorithm the <code>SIGTERM</code> signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. </p> <p>The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with <code>CreateModel</code>.</p> <note> <p>The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.</p> </note>"
      },
      "MaxRuntimeInSeconds": {
        "type": "integer",
        "minimum": 1
      },
      "MaxWaitTimeInSeconds": {
        "type": "integer",
        "minimum": 1
      },
      "TransformJobDefinition": {
        "type": "object",
        "required": [
          "TransformInput",
          "TransformOutput",
          "TransformResources"
        ],
        "properties": {
          "MaxConcurrentTransforms": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrentTransforms"
              },
              {
                "description": "The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1."
              }
            ]
          },
          "MaxPayloadInMB": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxPayloadInMB"
              },
              {
                "description": "The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata)."
              }
            ]
          },
          "BatchStrategy": {
            "allOf": [
              {
                "$ref": "#/$defs/BatchStrategy"
              },
              {
                "description": "<p>A string that determines the number of records included in a single mini-batch.</p> <p> <code>SingleRecord</code> means only one record is used per mini-batch. <code>MultiRecord</code> means a mini-batch is set to contain as many records that can fit within the <code>MaxPayloadInMB</code> limit.</p>"
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformEnvironmentMap"
              },
              {
                "description": "The environment variables to set in the Docker container. We support up to 16 key and values entries in the map."
              }
            ]
          },
          "TransformInput": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInput"
              },
              {
                "description": "A description of the input source and the way the transform job consumes it."
              }
            ]
          },
          "TransformOutput": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformOutput"
              },
              {
                "description": "Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job."
              }
            ]
          },
          "TransformResources": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformResources"
              },
              {
                "description": "Identifies the ML compute instances for the transform job."
              }
            ]
          }
        },
        "description": "Defines the input needed to run a transform job using the inference specification specified in the algorithm."
      },
      "MaxConcurrentTransforms": {
        "type": "integer",
        "minimum": 0
      },
      "MaxPayloadInMB": {
        "type": "integer",
        "minimum": 0
      },
      "BatchStrategy": {
        "type": "string",
        "enum": [
          "MultiRecord",
          "SingleRecord"
        ]
      },
      "TransformEnvironmentMap": {
        "type": "object",
        "maxProperties": 16,
        "additionalProperties": {
          "$ref": "#/$defs/TransformEnvironmentValue"
        }
      },
      "TransformEnvironmentValue": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "maxLength": 10240
      },
      "TransformInput": {
        "type": "object",
        "required": [
          "DataSource"
        ],
        "properties": {
          "DataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformDataSource"
              },
              {
                "description": "Describes the location of the channel data, which is, the S3 location of the input data that the model can consume."
              }
            ]
          },
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentType"
              },
              {
                "description": "The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job."
              }
            ]
          },
          "CompressionType": {
            "allOf": [
              {
                "$ref": "#/$defs/CompressionType"
              },
              {
                "description": "If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is <code>None</code>."
              }
            ]
          },
          "SplitType": {
            "allOf": [
              {
                "$ref": "#/$defs/SplitType"
              },
              {
                "description": "<p>The method to use to split the transform job's data files into smaller batches. Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for <code>SplitType</code> is <code>None</code>, which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to <code>Line</code> to split records on a newline character boundary. <code>SplitType</code> also supports a number of record-oriented binary data formats. Currently, the supported record formats are:</p> <ul> <li> <p>RecordIO</p> </li> <li> <p>TFRecord</p> </li> </ul> <p>When splitting is enabled, the size of a mini-batch depends on the values of the <code>BatchStrategy</code> and <code>MaxPayloadInMB</code> parameters. When the value of <code>BatchStrategy</code> is <code>MultiRecord</code>, Amazon SageMaker sends the maximum number of records in each request, up to the <code>MaxPayloadInMB</code> limit. If the value of <code>BatchStrategy</code> is <code>SingleRecord</code>, Amazon SageMaker sends individual records in each request.</p> <note> <p>Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of <code>BatchStrategy</code> is set to <code>SingleRecord</code>. Padding is not removed if the value of <code>BatchStrategy</code> is set to <code>MultiRecord</code>.</p> <p>For more information about <code>RecordIO</code>, see <a href=\"https://mxnet.apache.org/api/faq/recordio\">Create a Dataset Using RecordIO</a> in the MXNet documentation. For more information about <code>TFRecord</code>, see <a href=\"https://www.tensorflow.org/guide/data#consuming_tfrecord_data\">Consuming TFRecord data</a> in the TensorFlow documentation.</p> </note>"
              }
            ]
          }
        },
        "description": "Describes the input source of a transform job and the way the transform job consumes it."
      },
      "TransformDataSource": {
        "type": "object",
        "required": [
          "S3DataSource"
        ],
        "properties": {
          "S3DataSource": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformS3DataSource"
              },
              {
                "description": "The S3 location of the data source that is associated with a channel."
              }
            ]
          }
        },
        "description": "Describes the location of the channel data."
      },
      "TransformS3DataSource": {
        "type": "object",
        "required": [
          "S3DataType",
          "S3Uri"
        ],
        "properties": {
          "S3DataType": {
            "allOf": [
              {
                "$ref": "#/$defs/S3DataType"
              },
              {
                "description": "<p>If you choose <code>S3Prefix</code>, <code>S3Uri</code> identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for batch transform. </p> <p>If you choose <code>ManifestFile</code>, <code>S3Uri</code> identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch transform. </p> <p>The following values are compatible: <code>ManifestFile</code>, <code>S3Prefix</code> </p> <p>The following value is not compatible: <code>AugmentedManifestFile</code> </p>"
              }
            ]
          },
          "S3Uri": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>Depending on the value specified for the <code>S3DataType</code>, identifies either a key name prefix or a manifest. For example:</p> <ul> <li> <p> A key name prefix might look like this: <code>s3://bucketname/exampleprefix</code>. </p> </li> <li> <p> A manifest might look like this: <code>s3://bucketname/example.manifest</code> </p> <p> The manifest is an S3 object which is a JSON file with the following format: </p> <p> <code>[ {\"prefix\": \"s3://customer_bucket/some/prefix/\"},</code> </p> <p> <code>\"relative/path/to/custdata-1\",</code> </p> <p> <code>\"relative/path/custdata-2\",</code> </p> <p> <code>...</code> </p> <p> <code>\"relative/path/custdata-N\"</code> </p> <p> <code>]</code> </p> <p> The preceding JSON matches the following <code>S3Uris</code>: </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/to/custdata-1</code> </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/custdata-2</code> </p> <p> <code>...</code> </p> <p> <code>s3://customer_bucket/some/prefix/relative/path/custdata-N</code> </p> <p> The complete set of <code>S3Uris</code> in this manifest constitutes the input data for the channel for this datasource. The object that each <code>S3Uris</code> points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Describes the S3 data source."
      },
      "SplitType": {
        "type": "string",
        "enum": [
          "None",
          "Line",
          "RecordIO",
          "TFRecord"
        ]
      },
      "TransformOutput": {
        "type": "object",
        "required": [
          "S3OutputPath"
        ],
        "properties": {
          "S3OutputPath": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "<p>The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For example, <code>s3://bucket-name/key-name-prefix</code>.</p> <p>For every S3 object used as input for the transform job, batch transform stores the transformed data with an .<code>out</code> suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at <code>s3://bucket-name/input-name-prefix/dataset01/data.csv</code>, batch transform stores the transformed data at <code>s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out</code>. Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an .<code>out</code> file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.</p>"
              }
            ]
          },
          "Accept": {
            "allOf": [
              {
                "$ref": "#/$defs/Accept"
              },
              {
                "description": "The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job."
              }
            ]
          },
          "AssembleWith": {
            "allOf": [
              {
                "$ref": "#/$defs/AssemblyType"
              },
              {
                "description": "Defines how to assemble the results of the transform job as a single S3 object. Choose a format that is most convenient to you. To concatenate the results in binary format, specify <code>None</code>. To add a newline character at the end of every transformed record, specify <code>Line</code>."
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The <code>KmsKeyId</code> can be any of the following formats: </p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul> <p>If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html\">KMS-Managed Encryption Keys</a> in the <i>Amazon Simple Storage Service Developer Guide.</i> </p> <p>The KMS key policy must grant permission to the IAM role that you specify in your <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html\">CreateModel</a> request. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html\">Using Key Policies in Amazon Web Services KMS</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "Describes the results of a transform job."
      },
      "Accept": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "AssemblyType": {
        "type": "string",
        "enum": [
          "None",
          "Line"
        ]
      },
      "TransformResources": {
        "type": "object",
        "required": [
          "InstanceType",
          "InstanceCount"
        ],
        "properties": {
          "InstanceType": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceType"
              },
              {
                "description": "The ML compute instance type for the transform job. If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or <code>ml.m5.large</code>instance types."
              }
            ]
          },
          "InstanceCount": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceCount"
              },
              {
                "description": "The number of ML compute instances to use in the transform job. The default value is <code>1</code>, and the maximum is <code>100</code>. For distributed transform jobs, specify a value greater than <code>1</code>."
              }
            ]
          },
          "VolumeKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "<p>The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job.</p> <note> <p>Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a <code>VolumeKmsKeyId</code> when using an instance type with local storage.</p> <p>For a list of instance types that support local instance storage, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes\">Instance Store Volumes</a>.</p> <p>For more information about local instance storage encryption, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html\">SSD Instance Store Volumes</a>.</p> </note> <p> The <code>VolumeKmsKeyId</code> can be any of the following formats:</p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias name ARN: <code>arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Describes the resources, including ML instance types and ML instance count, to use for transform job."
      },
      "TransformInstanceCount": {
        "type": "integer",
        "minimum": 1
      },
      "CertifyForMarketplace": {
        "type": "boolean"
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag key. Tag keys must be unique per resource."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag value."
              }
            ]
          }
        },
        "description": "<p>A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources.</p> <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html\">AddTags</a>.</p> <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>. For advice on best practices for managing Amazon Web Services resources with tagging, see <a href=\"https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf\">Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.sagemaker.us-east-1.amazonaws.com/#X-Amz-Target=SageMaker.CreateAlgorithm"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AlgorithmArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
