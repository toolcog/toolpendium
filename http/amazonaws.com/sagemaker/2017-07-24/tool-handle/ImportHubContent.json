{
  "name": "ImportHubContent",
  "description": "<p>Import hub content.</p> <note> <p>Hub APIs are only callable through SageMaker Studio.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SageMaker.ImportHubContent"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ImportHubContentRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ImportHubContentRequest": {
        "type": "object",
        "required": [
          "HubContentName",
          "HubContentType",
          "DocumentSchemaVersion",
          "HubName",
          "HubContentDocument"
        ],
        "title": "ImportHubContentRequest",
        "properties": {
          "HubContentName": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentName"
              },
              {
                "description": "The name of the hub content to import."
              }
            ]
          },
          "HubContentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentVersion"
              },
              {
                "description": "The version of the hub content to import."
              }
            ]
          },
          "HubContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentType"
              },
              {
                "description": "The type of hub content to import."
              }
            ]
          },
          "DocumentSchemaVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentSchemaVersion"
              },
              {
                "description": "The version of the hub content schema to import."
              }
            ]
          },
          "HubName": {
            "allOf": [
              {
                "$ref": "#/$defs/HubName"
              },
              {
                "description": "The name of the hub to import content into."
              }
            ]
          },
          "HubContentDisplayName": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentDisplayName"
              },
              {
                "description": "The display name of the hub content to import."
              }
            ]
          },
          "HubContentDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentDescription"
              },
              {
                "description": "A description of the hub content to import."
              }
            ]
          },
          "HubContentMarkdown": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentMarkdown"
              },
              {
                "description": "A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating."
              }
            ]
          },
          "HubContentDocument": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentDocument"
              },
              {
                "description": "The hub content document that describes information about the hub content such as type, associated containers, scripts, and more."
              }
            ]
          },
          "HubContentSearchKeywords": {
            "allOf": [
              {
                "$ref": "#/$defs/HubContentSearchKeywordList"
              },
              {
                "description": "The searchable keywords of the hub content."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "Any tags associated with the hub content."
              }
            ]
          }
        }
      },
      "HubContentName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}",
        "maxLength": 63
      },
      "HubContentVersion": {
        "type": "string",
        "pattern": "^\\d{1,4}.\\d{1,4}.\\d{1,4}$",
        "minLength": 5,
        "maxLength": 14
      },
      "HubContentType": {
        "type": "string",
        "enum": [
          "Model",
          "Notebook"
        ]
      },
      "DocumentSchemaVersion": {
        "type": "string",
        "pattern": "^\\d{1,4}.\\d{1,4}.\\d{1,4}$",
        "minLength": 5,
        "maxLength": 14
      },
      "HubName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}",
        "maxLength": 63
      },
      "HubContentDisplayName": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 255
      },
      "HubContentDescription": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 1023
      },
      "HubContentMarkdown": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 65535
      },
      "HubContentDocument": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 65535
      },
      "HubContentSearchKeywordList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HubSearchKeyword"
        },
        "maxItems": 50
      },
      "HubSearchKeyword": {
        "type": "string",
        "pattern": "^[^A-Z]*$",
        "maxLength": 255
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag key. Tag keys must be unique per resource."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag value."
              }
            ]
          }
        },
        "description": "<p>A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources.</p> <p>You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html\">AddTags</a>.</p> <p>For more information on adding metadata to your Amazon Web Services resources with tagging, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>. For advice on best practices for managing Amazon Web Services resources with tagging, see <a href=\"https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf\">Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy</a>.</p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.sagemaker.us-east-1.amazonaws.com/#X-Amz-Target=SageMaker.ImportHubContent"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**HubArn**",
            "**HubContentArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
