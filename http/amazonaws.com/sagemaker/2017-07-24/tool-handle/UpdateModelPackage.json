{
  "name": "UpdateModelPackage",
  "description": "Updates a versioned model.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SageMaker.UpdateModelPackage"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateModelPackageInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateModelPackageInput": {
        "type": "object",
        "required": [
          "ModelPackageArn"
        ],
        "title": "UpdateModelPackageInput",
        "properties": {
          "ModelPackageArn": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the model package."
              }
            ]
          },
          "ModelApprovalStatus": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelApprovalStatus"
              },
              {
                "description": "The approval status of the model."
              }
            ]
          },
          "ApprovalDescription": {
            "allOf": [
              {
                "$ref": "#/$defs/ApprovalDescription"
              },
              {
                "description": "A description for the approval status of the model."
              }
            ]
          },
          "CustomerMetadataProperties": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomerMetadataMap"
              },
              {
                "description": "The metadata properties associated with the model package versions."
              }
            ]
          },
          "CustomerMetadataPropertiesToRemove": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomerMetadataKeyList"
              },
              {
                "description": "The metadata properties associated with the model package versions to remove."
              }
            ]
          },
          "AdditionalInferenceSpecificationsToAdd": {
            "allOf": [
              {
                "$ref": "#/$defs/AdditionalInferenceSpecifications"
              },
              {
                "description": "An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts."
              }
            ]
          }
        }
      },
      "ModelPackageArn": {
        "type": "string",
        "pattern": "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:model-package/.*",
        "minLength": 1,
        "maxLength": 2048
      },
      "ModelApprovalStatus": {
        "type": "string",
        "enum": [
          "Approved",
          "Rejected",
          "PendingManualApproval"
        ]
      },
      "ApprovalDescription": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 1024
      },
      "CustomerMetadataMap": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/CustomerMetadataValue"
        }
      },
      "CustomerMetadataValue": {
        "type": "string",
        "pattern": "^\\([\\p\\{L\\}\\p\\{Z\\}\\p\\{N\\}_.:\\/=\\+\\-@]*\\)$\\{1,256\\}",
        "minLength": 1,
        "maxLength": 256
      },
      "CustomerMetadataKeyList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CustomerMetadataKey"
        }
      },
      "CustomerMetadataKey": {
        "type": "string",
        "pattern": "^\\([\\p\\{L\\}\\p\\{Z\\}\\p\\{N\\}_.:\\/=\\+\\-@]*\\)$\\{1,128\\}",
        "minLength": 1,
        "maxLength": 128
      },
      "AdditionalInferenceSpecifications": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AdditionalInferenceSpecificationDefinition"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "AdditionalInferenceSpecificationDefinition": {
        "type": "object",
        "required": [
          "Name",
          "Containers"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A description of the additional Inference specification"
              }
            ]
          },
          "Containers": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageContainerDefinitionList"
              },
              {
                "description": "The Amazon ECR registry path of the Docker image that contains the inference code."
              }
            ]
          },
          "SupportedTransformInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformInstanceTypes"
              },
              {
                "description": "A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed."
              }
            ]
          },
          "SupportedRealtimeInferenceInstanceTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/RealtimeInferenceInstanceTypes"
              },
              {
                "description": "A list of the instance types that are used to generate inferences in real-time."
              }
            ]
          },
          "SupportedContentTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ContentTypes"
              },
              {
                "description": "The supported MIME types for the input data."
              }
            ]
          },
          "SupportedResponseMIMETypes": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseMIMETypes"
              },
              {
                "description": "The supported MIME types for the output data."
              }
            ]
          }
        },
        "description": "A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package"
      },
      "EntityName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}$",
        "minLength": 1,
        "maxLength": 63
      },
      "EntityDescription": {
        "type": "string",
        "pattern": "[\\p{L}\\p{M}\\p{Z}\\p{S}\\p{N}\\p{P}]*",
        "maxLength": 1024
      },
      "ModelPackageContainerDefinitionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ModelPackageContainerDefinition"
        },
        "minItems": 1,
        "maxItems": 15
      },
      "ModelPackageContainerDefinition": {
        "type": "object",
        "required": [
          "Image"
        ],
        "properties": {
          "ContainerHostname": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerHostname"
              },
              {
                "description": "The DNS host name for the Docker container."
              }
            ]
          },
          "Image": {
            "allOf": [
              {
                "$ref": "#/$defs/ContainerImage"
              },
              {
                "description": "<p>The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored.</p> <p>If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both <code>registry/repository[:tag]</code> and <code>registry/repository[@digest]</code> image path formats. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html\">Using Your Own Algorithms with Amazon SageMaker</a>.</p>"
              }
            ]
          },
          "ImageDigest": {
            "allOf": [
              {
                "$ref": "#/$defs/ImageDigest"
              },
              {
                "description": "An MD5 hash of the training algorithm that identifies the Docker image used for training."
              }
            ]
          },
          "ModelDataUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "<p>The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single <code>gzip</code> compressed tar archive (<code>.tar.gz</code> suffix).</p> <note> <p>The model artifacts must be in an S3 bucket that is in the same region as the model package.</p> </note>"
              }
            ]
          },
          "ProductId": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductId"
              },
              {
                "description": "The Amazon Web Services Marketplace product ID of the model package."
              }
            ]
          },
          "Environment": {
            "allOf": [
              {
                "$ref": "#/$defs/EnvironmentMap"
              },
              {
                "description": "The environment variables to set in the Docker container. Each key and value in the <code>Environment</code> string to string map can have length of up to 1024. We support up to 16 entries in the map."
              }
            ]
          },
          "ModelInput": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelInput"
              },
              {
                "description": "A structure with Model Input details."
              }
            ]
          },
          "Framework": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The machine learning framework of the model package container image."
              }
            ]
          },
          "FrameworkVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelPackageFrameworkVersion"
              },
              {
                "description": "The framework version of the Model Package Container Image."
              }
            ]
          },
          "NearestModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling <code>ListModelMetadata</code>."
              }
            ]
          }
        },
        "description": "Describes the Docker container for the model package."
      },
      "ContainerHostname": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9]){0,62}",
        "maxLength": 63
      },
      "ContainerImage": {
        "type": "string",
        "pattern": "[\\S]+",
        "maxLength": 255
      },
      "ImageDigest": {
        "type": "string",
        "pattern": "^[Ss][Hh][Aa]256:[0-9a-fA-F]{64}$",
        "maxLength": 72
      },
      "Url": {
        "type": "string",
        "pattern": "^(https|s3)://([^/]+)/?(.*)$",
        "maxLength": 1024
      },
      "ProductId": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9](-*[a-zA-Z0-9])*$",
        "maxLength": 256
      },
      "EnvironmentMap": {
        "type": "object",
        "maxProperties": 16,
        "additionalProperties": {
          "$ref": "#/$defs/EnvironmentValue"
        }
      },
      "EnvironmentValue": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "maxLength": 1024
      },
      "ModelInput": {
        "type": "object",
        "required": [
          "DataInputConfig"
        ],
        "properties": {
          "DataInputConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/DataInputConfig"
              },
              {
                "description": "The input configuration object for the model."
              }
            ]
          }
        },
        "description": "Input object for the model."
      },
      "DataInputConfig": {
        "type": "string",
        "pattern": "[\\S\\s]+",
        "minLength": 1,
        "maxLength": 1024
      },
      "String": {
        "type": "string"
      },
      "ModelPackageFrameworkVersion": {
        "type": "string",
        "pattern": "[0-9]\\.[A-Za-z0-9.-]+",
        "minLength": 3,
        "maxLength": 10
      },
      "TransformInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TransformInstanceType"
        },
        "minItems": 1
      },
      "TransformInstanceType": {
        "type": "string",
        "enum": [
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge"
        ]
      },
      "RealtimeInferenceInstanceTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ProductionVariantInstanceType"
        }
      },
      "ProductionVariantInstanceType": {
        "type": "string",
        "enum": [
          "ml.t2.medium",
          "ml.t2.large",
          "ml.t2.xlarge",
          "ml.t2.2xlarge",
          "ml.m4.xlarge",
          "ml.m4.2xlarge",
          "ml.m4.4xlarge",
          "ml.m4.10xlarge",
          "ml.m4.16xlarge",
          "ml.m5.large",
          "ml.m5.xlarge",
          "ml.m5.2xlarge",
          "ml.m5.4xlarge",
          "ml.m5.12xlarge",
          "ml.m5.24xlarge",
          "ml.m5d.large",
          "ml.m5d.xlarge",
          "ml.m5d.2xlarge",
          "ml.m5d.4xlarge",
          "ml.m5d.12xlarge",
          "ml.m5d.24xlarge",
          "ml.c4.large",
          "ml.c4.xlarge",
          "ml.c4.2xlarge",
          "ml.c4.4xlarge",
          "ml.c4.8xlarge",
          "ml.p2.xlarge",
          "ml.p2.8xlarge",
          "ml.p2.16xlarge",
          "ml.p3.2xlarge",
          "ml.p3.8xlarge",
          "ml.p3.16xlarge",
          "ml.c5.large",
          "ml.c5.xlarge",
          "ml.c5.2xlarge",
          "ml.c5.4xlarge",
          "ml.c5.9xlarge",
          "ml.c5.18xlarge",
          "ml.c5d.large",
          "ml.c5d.xlarge",
          "ml.c5d.2xlarge",
          "ml.c5d.4xlarge",
          "ml.c5d.9xlarge",
          "ml.c5d.18xlarge",
          "ml.g4dn.xlarge",
          "ml.g4dn.2xlarge",
          "ml.g4dn.4xlarge",
          "ml.g4dn.8xlarge",
          "ml.g4dn.12xlarge",
          "ml.g4dn.16xlarge",
          "ml.r5.large",
          "ml.r5.xlarge",
          "ml.r5.2xlarge",
          "ml.r5.4xlarge",
          "ml.r5.12xlarge",
          "ml.r5.24xlarge",
          "ml.r5d.large",
          "ml.r5d.xlarge",
          "ml.r5d.2xlarge",
          "ml.r5d.4xlarge",
          "ml.r5d.12xlarge",
          "ml.r5d.24xlarge",
          "ml.inf1.xlarge",
          "ml.inf1.2xlarge",
          "ml.inf1.6xlarge",
          "ml.inf1.24xlarge",
          "ml.c6i.large",
          "ml.c6i.xlarge",
          "ml.c6i.2xlarge",
          "ml.c6i.4xlarge",
          "ml.c6i.8xlarge",
          "ml.c6i.12xlarge",
          "ml.c6i.16xlarge",
          "ml.c6i.24xlarge",
          "ml.c6i.32xlarge",
          "ml.g5.xlarge",
          "ml.g5.2xlarge",
          "ml.g5.4xlarge",
          "ml.g5.8xlarge",
          "ml.g5.12xlarge",
          "ml.g5.16xlarge",
          "ml.g5.24xlarge",
          "ml.g5.48xlarge",
          "ml.p4d.24xlarge",
          "ml.c7g.large",
          "ml.c7g.xlarge",
          "ml.c7g.2xlarge",
          "ml.c7g.4xlarge",
          "ml.c7g.8xlarge",
          "ml.c7g.12xlarge",
          "ml.c7g.16xlarge",
          "ml.m6g.large",
          "ml.m6g.xlarge",
          "ml.m6g.2xlarge",
          "ml.m6g.4xlarge",
          "ml.m6g.8xlarge",
          "ml.m6g.12xlarge",
          "ml.m6g.16xlarge",
          "ml.m6gd.large",
          "ml.m6gd.xlarge",
          "ml.m6gd.2xlarge",
          "ml.m6gd.4xlarge",
          "ml.m6gd.8xlarge",
          "ml.m6gd.12xlarge",
          "ml.m6gd.16xlarge",
          "ml.c6g.large",
          "ml.c6g.xlarge",
          "ml.c6g.2xlarge",
          "ml.c6g.4xlarge",
          "ml.c6g.8xlarge",
          "ml.c6g.12xlarge",
          "ml.c6g.16xlarge",
          "ml.c6gd.large",
          "ml.c6gd.xlarge",
          "ml.c6gd.2xlarge",
          "ml.c6gd.4xlarge",
          "ml.c6gd.8xlarge",
          "ml.c6gd.12xlarge",
          "ml.c6gd.16xlarge",
          "ml.c6gn.large",
          "ml.c6gn.xlarge",
          "ml.c6gn.2xlarge",
          "ml.c6gn.4xlarge",
          "ml.c6gn.8xlarge",
          "ml.c6gn.12xlarge",
          "ml.c6gn.16xlarge",
          "ml.r6g.large",
          "ml.r6g.xlarge",
          "ml.r6g.2xlarge",
          "ml.r6g.4xlarge",
          "ml.r6g.8xlarge",
          "ml.r6g.12xlarge",
          "ml.r6g.16xlarge",
          "ml.r6gd.large",
          "ml.r6gd.xlarge",
          "ml.r6gd.2xlarge",
          "ml.r6gd.4xlarge",
          "ml.r6gd.8xlarge",
          "ml.r6gd.12xlarge",
          "ml.r6gd.16xlarge",
          "ml.p4de.24xlarge",
          "ml.trn1.2xlarge",
          "ml.trn1.32xlarge",
          "ml.inf2.xlarge",
          "ml.inf2.8xlarge",
          "ml.inf2.24xlarge",
          "ml.inf2.48xlarge"
        ]
      },
      "ContentTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ContentType"
        }
      },
      "ContentType": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 256
      },
      "ResponseMIMETypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ResponseMIMEType"
        }
      },
      "ResponseMIMEType": {
        "type": "string",
        "pattern": "^[-\\w]+\\/.+$",
        "maxLength": 1024
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.sagemaker.us-east-1.amazonaws.com/#X-Amz-Target=SageMaker.UpdateModelPackage"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ModelPackageArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
