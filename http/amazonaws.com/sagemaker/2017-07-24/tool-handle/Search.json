{
  "name": "Search",
  "description": "<p>Finds SageMaker resources that match a search query. Matching resources are returned as a list of <code>SearchRecord</code> objects in the response. You can sort the search results by any resource property in a ascending or descending order.</p> <p>You can query against the following value types: numeric, text, Boolean, and timestamp.</p> <note> <p>The Search API may provide access to otherwise restricted data. See <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html\">Amazon SageMaker API Permissions: Actions, Permissions, and Resources Reference</a> for more information.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "MaxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "NextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SageMaker.Search"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/SearchRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "SearchRequest": {
        "type": "object",
        "required": [
          "Resource"
        ],
        "title": "SearchRequest",
        "properties": {
          "Resource": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceType"
              },
              {
                "description": "The name of the SageMaker resource to search for."
              }
            ]
          },
          "SearchExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/SearchExpression"
              },
              {
                "description": "A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive <code>SubExpressions</code>, <code>NestedFilters</code>, and <code>Filters</code> that can be included in a <code>SearchExpression</code> object is 50."
              }
            ]
          },
          "SortBy": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourcePropertyName"
              },
              {
                "description": "The name of the resource property used to sort the <code>SearchResults</code>. The default is <code>LastModifiedTime</code>."
              }
            ]
          },
          "SortOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/SearchSortOrder"
              },
              {
                "description": "How <code>SearchResults</code> are ordered. Valid values are <code>Ascending</code> or <code>Descending</code>. The default is <code>Descending</code>."
              }
            ]
          },
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/NextToken"
              },
              {
                "description": "If more than <code>MaxResults</code> resources match the specified <code>SearchExpression</code>, the response includes a <code>NextToken</code>. The <code>NextToken</code> can be passed to the next <code>SearchRequest</code> to continue retrieving results."
              }
            ]
          },
          "MaxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxResults"
              },
              {
                "description": "The maximum number of results to return."
              }
            ]
          },
          "CrossAccountFilterOption": {
            "allOf": [
              {
                "$ref": "#/$defs/CrossAccountFilterOption"
              },
              {
                "description": " A cross account filter option. When the value is <code>\"CrossAccount\"</code> the search results will only include resources made discoverable to you from other accounts. When the value is <code>\"SameAccount\"</code> or <code>null</code> the search results will only include resources from your account. Default is <code>null</code>. For more information on searching for resources made discoverable to your account, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/feature-store-cross-account-discoverability-use.html\"> Search discoverable resources</a> in the SageMaker Developer Guide. The maximum number of <code>ResourceCatalog</code>s viewable is 1000. "
              }
            ]
          }
        }
      },
      "ResourceType": {
        "type": "string",
        "enum": [
          "TrainingJob",
          "Experiment",
          "ExperimentTrial",
          "ExperimentTrialComponent",
          "Endpoint",
          "ModelPackage",
          "ModelPackageGroup",
          "Pipeline",
          "PipelineExecution",
          "FeatureGroup",
          "Project",
          "FeatureMetadata",
          "HyperParameterTuningJob",
          "ModelCard",
          "Model"
        ]
      },
      "SearchExpression": {
        "type": "object",
        "properties": {
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterList"
              },
              {
                "description": "A list of filter objects."
              }
            ]
          },
          "NestedFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/NestedFiltersList"
              },
              {
                "description": "A list of nested filter objects."
              }
            ]
          },
          "SubExpressions": {
            "allOf": [
              {
                "$ref": "#/$defs/SearchExpressionList"
              },
              {
                "description": "A list of search expression objects."
              }
            ]
          },
          "Operator": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanOperator"
              },
              {
                "description": "A Boolean operator used to evaluate the search expression. If you want every conditional statement in all lists to be satisfied for the entire search expression to be true, specify <code>And</code>. If only a single conditional statement needs to be true for the entire search expression to be true, specify <code>Or</code>. The default value is <code>And</code>."
              }
            ]
          }
        },
        "description": "<p>A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A <code>SearchExpression</code> can contain up to twenty elements.</p> <p>A <code>SearchExpression</code> contains the following components:</p> <ul> <li> <p>A list of <code>Filter</code> objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.</p> </li> <li> <p>A list of <code>NestedFilter</code> objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.</p> </li> <li> <p>A list of <code>SearchExpression</code> objects. A search expression object can be nested in a list of search expression objects.</p> </li> <li> <p>A Boolean operator: <code>And</code> or <code>Or</code>.</p> </li> </ul>"
      },
      "FilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Filter"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "Filter": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourcePropertyName"
              },
              {
                "description": "A resource property name. For example, <code>TrainingJobName</code>. For valid property names, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html\">SearchRecord</a>. You must specify a valid property for the resource."
              }
            ]
          },
          "Operator": {
            "allOf": [
              {
                "$ref": "#/$defs/Operator"
              },
              {
                "description": "<p>A Boolean binary operator that is used to evaluate the filter. The operator field contains one of the following values:</p> <dl> <dt>Equals</dt> <dd> <p>The value of <code>Name</code> equals <code>Value</code>.</p> </dd> <dt>NotEquals</dt> <dd> <p>The value of <code>Name</code> doesn't equal <code>Value</code>.</p> </dd> <dt>Exists</dt> <dd> <p>The <code>Name</code> property exists.</p> </dd> <dt>NotExists</dt> <dd> <p>The <code>Name</code> property does not exist.</p> </dd> <dt>GreaterThan</dt> <dd> <p>The value of <code>Name</code> is greater than <code>Value</code>. Not supported for text properties.</p> </dd> <dt>GreaterThanOrEqualTo</dt> <dd> <p>The value of <code>Name</code> is greater than or equal to <code>Value</code>. Not supported for text properties.</p> </dd> <dt>LessThan</dt> <dd> <p>The value of <code>Name</code> is less than <code>Value</code>. Not supported for text properties.</p> </dd> <dt>LessThanOrEqualTo</dt> <dd> <p>The value of <code>Name</code> is less than or equal to <code>Value</code>. Not supported for text properties.</p> </dd> <dt>In</dt> <dd> <p>The value of <code>Name</code> is one of the comma delimited strings in <code>Value</code>. Only supported for text properties.</p> </dd> <dt>Contains</dt> <dd> <p>The value of <code>Name</code> contains the string <code>Value</code>. Only supported for text properties.</p> <p>A <code>SearchExpression</code> can include the <code>Contains</code> operator multiple times when the value of <code>Name</code> is one of the following:</p> <ul> <li> <p> <code>Experiment.DisplayName</code> </p> </li> <li> <p> <code>Experiment.ExperimentName</code> </p> </li> <li> <p> <code>Experiment.Tags</code> </p> </li> <li> <p> <code>Trial.DisplayName</code> </p> </li> <li> <p> <code>Trial.TrialName</code> </p> </li> <li> <p> <code>Trial.Tags</code> </p> </li> <li> <p> <code>TrialComponent.DisplayName</code> </p> </li> <li> <p> <code>TrialComponent.TrialComponentName</code> </p> </li> <li> <p> <code>TrialComponent.Tags</code> </p> </li> <li> <p> <code>TrialComponent.InputArtifacts</code> </p> </li> <li> <p> <code>TrialComponent.OutputArtifacts</code> </p> </li> </ul> <p>A <code>SearchExpression</code> can include only one <code>Contains</code> operator for all other values of <code>Name</code>. In these cases, if you include multiple <code>Contains</code> operators in the <code>SearchExpression</code>, the result is the following error message: \"<code>'CONTAINS' operator usage limit of 1 exceeded.</code>\"</p> </dd> </dl>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterValue"
              },
              {
                "description": "A value used with <code>Name</code> and <code>Operator</code> to determine which resources satisfy the filter's condition. For numerical properties, <code>Value</code> must be an integer or floating-point decimal. For timestamp properties, <code>Value</code> must be an ISO 8601 date-time string of the following format: <code>YYYY-mm-dd'T'HH:MM:SS</code>."
              }
            ]
          }
        },
        "description": "<p>A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\">Search</a> API.</p> <p>If you specify a <code>Value</code>, but not an <code>Operator</code>, SageMaker uses the equals operator.</p> <p>In search, there are several property types:</p> <dl> <dt>Metrics</dt> <dd> <p>To define a metric filter, enter a value using the form <code>\"Metrics.&lt;name&gt;\"</code>, where <code>&lt;name&gt;</code> is a metric name. For example, the following filter searches for training jobs with an <code>\"accuracy\"</code> metric greater than <code>\"0.9\"</code>:</p> <p> <code>{</code> </p> <p> <code>\"Name\": \"Metrics.accuracy\",</code> </p> <p> <code>\"Operator\": \"GreaterThan\",</code> </p> <p> <code>\"Value\": \"0.9\"</code> </p> <p> <code>}</code> </p> </dd> <dt>HyperParameters</dt> <dd> <p>To define a hyperparameter filter, enter a value with the form <code>\"HyperParameters.&lt;name&gt;\"</code>. Decimal hyperparameter values are treated as a decimal in a comparison if the specified <code>Value</code> is also a decimal value. If the specified <code>Value</code> is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a <code>\"learning_rate\"</code> hyperparameter that is less than <code>\"0.5\"</code>:</p> <p> <code> {</code> </p> <p> <code> \"Name\": \"HyperParameters.learning_rate\",</code> </p> <p> <code> \"Operator\": \"LessThan\",</code> </p> <p> <code> \"Value\": \"0.5\"</code> </p> <p> <code> }</code> </p> </dd> <dt>Tags</dt> <dd> <p>To define a tag filter, enter a value with the form <code>Tags.&lt;key&gt;</code>.</p> </dd> </dl>"
      },
      "ResourcePropertyName": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 255
      },
      "Operator": {
        "type": "string",
        "enum": [
          "Equals",
          "NotEquals",
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThan",
          "LessThanOrEqualTo",
          "Contains",
          "Exists",
          "NotExists",
          "In"
        ]
      },
      "FilterValue": {
        "type": "string",
        "pattern": ".+",
        "minLength": 1,
        "maxLength": 1024
      },
      "NestedFiltersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NestedFilters"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "NestedFilters": {
        "type": "object",
        "required": [
          "NestedPropertyName",
          "Filters"
        ],
        "properties": {
          "NestedPropertyName": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourcePropertyName"
              },
              {
                "description": "The name of the property to use in the nested filters. The value must match a listed property name, such as <code>InputDataConfig</code>."
              }
            ]
          },
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/FilterList"
              },
              {
                "description": "A list of filters. Each filter acts on a property. Filters must contain at least one <code>Filters</code> value. For example, a <code>NestedFilters</code> call might include a filter on the <code>PropertyName</code> parameter of the <code>InputDataConfig</code> property: <code>InputDataConfig.DataSource.S3DataSource.S3Uri</code>."
              }
            ]
          }
        },
        "description": "<p>A list of nested <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html\">Filter</a> objects. A resource must satisfy the conditions of all filters to be included in the results returned from the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html\">Search</a> API.</p> <p>For example, to filter on a training job's <code>InputDataConfig</code> property with a specific channel name and <code>S3Uri</code> prefix, define the following filters:</p> <ul> <li> <p> <code>'{Name:\"InputDataConfig.ChannelName\", \"Operator\":\"Equals\", \"Value\":\"train\"}',</code> </p> </li> <li> <p> <code>'{Name:\"InputDataConfig.DataSource.S3DataSource.S3Uri\", \"Operator\":\"Contains\", \"Value\":\"mybucket/catdata\"}'</code> </p> </li> </ul>"
      },
      "SearchExpressionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SearchExpression"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "BooleanOperator": {
        "type": "string",
        "enum": [
          "And",
          "Or"
        ]
      },
      "SearchSortOrder": {
        "type": "string",
        "enum": [
          "Ascending",
          "Descending"
        ]
      },
      "NextToken": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 8192
      },
      "MaxResults": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100
      },
      "CrossAccountFilterOption": {
        "type": "string",
        "enum": [
          "SameAccount",
          "CrossAccount"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.sagemaker.us-east-1.amazonaws.com/#X-Amz-Target=SageMaker.Search{?MaxResults,NextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Results**",
            "**NextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
