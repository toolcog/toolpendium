{
  "name": "QueryLineage",
  "description": "Use this action to inspect your lineage and discover relationships between entities. For more information, see <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html\"> Querying Lineage Entities</a> in the <i>Amazon SageMaker Developer Guide</i>.",
  "parameters": {
    "type": "object",
    "properties": {
      "MaxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "NextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "SageMaker.QueryLineage"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/QueryLineageRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "QueryLineageRequest": {
        "type": "object",
        "title": "QueryLineageRequest",
        "properties": {
          "StartArns": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryLineageStartArns"
              },
              {
                "description": "A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query."
              }
            ]
          },
          "Direction": {
            "allOf": [
              {
                "$ref": "#/$defs/Direction"
              },
              {
                "description": "Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses."
              }
            ]
          },
          "IncludeEdges": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " Setting this value to <code>True</code> retrieves not only the entities of interest but also the <a href=\"https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html\">Associations</a> and lineage entities on the path. Set to <code>False</code> to only return lineage entities that match your query."
              }
            ]
          },
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryFilters"
              },
              {
                "description": "<p>A set of filtering parameters that allow you to specify which entities should be returned.</p> <ul> <li> <p>Properties - Key-value pairs to match on the lineage entities' properties.</p> </li> <li> <p>LineageTypes - A set of lineage entity types to match on. For example: <code>TrialComponent</code>, <code>Artifact</code>, or <code>Context</code>.</p> </li> <li> <p>CreatedBefore - Filter entities created before this date.</p> </li> <li> <p>ModifiedBefore - Filter entities modified before this date.</p> </li> <li> <p>ModifiedAfter - Filter entities modified after this date.</p> </li> </ul>"
              }
            ]
          },
          "MaxDepth": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryLineageMaxDepth"
              },
              {
                "description": "The maximum depth in lineage relationships from the <code>StartArns</code> that are traversed. Depth is a measure of the number of <code>Associations</code> from the <code>StartArn</code> entity to the matched results."
              }
            ]
          },
          "MaxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryLineageMaxResults"
              },
              {
                "description": "Limits the number of vertices in the results. Use the <code>NextToken</code> in a response to to retrieve the next page of results."
              }
            ]
          },
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/String8192"
              },
              {
                "description": "Limits the number of vertices in the request. Use the <code>NextToken</code> in a response to to retrieve the next page of results."
              }
            ]
          }
        }
      },
      "QueryLineageStartArns": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AssociationEntityArn"
        },
        "minItems": 0,
        "maxItems": 1
      },
      "AssociationEntityArn": {
        "type": "string",
        "pattern": "arn:aws[a-z\\-]*:sagemaker:[a-z0-9\\-]*:[0-9]{12}:(experiment|experiment-trial-component|artifact|action|context)/.*",
        "maxLength": 256
      },
      "Direction": {
        "type": "string",
        "enum": [
          "Both",
          "Ascendants",
          "Descendants"
        ]
      },
      "Boolean": {
        "type": "boolean"
      },
      "QueryFilters": {
        "type": "object",
        "properties": {
          "Types": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryTypes"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code> by type. For example: <code>DataSet</code>, <code>Model</code>, <code>Endpoint</code>, or <code>ModelDeployment</code>."
              }
            ]
          },
          "LineageTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryLineageTypes"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code>(s) by the type of the lineage entity."
              }
            ]
          },
          "CreatedBefore": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code>(s) by created date."
              }
            ]
          },
          "CreatedAfter": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code>(s) after the create date."
              }
            ]
          },
          "ModifiedBefore": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code>(s) before the last modified date."
              }
            ]
          },
          "ModifiedAfter": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code>(s) after the last modified date."
              }
            ]
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryProperties"
              },
              {
                "description": "Filter the lineage entities connected to the <code>StartArn</code>(s) by a set if property key value pairs. If multiple pairs are provided, an entity is included in the results if it matches any of the provided pairs."
              }
            ]
          }
        },
        "description": "A set of filters to narrow the set of lineage entities connected to the <code>StartArn</code>(s) returned by the <code>QueryLineage</code> API action."
      },
      "QueryTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String40"
        },
        "maxItems": 5
      },
      "String40": {
        "type": "string",
        "maxLength": 40
      },
      "QueryLineageTypes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LineageType"
        },
        "maxItems": 4
      },
      "LineageType": {
        "type": "string",
        "enum": [
          "TrialComponent",
          "Artifact",
          "Context",
          "Action"
        ]
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "QueryProperties": {
        "type": "object",
        "maxProperties": 5,
        "additionalProperties": {
          "$ref": "#/$defs/String256"
        }
      },
      "String256": {
        "type": "string",
        "maxLength": 256
      },
      "QueryLineageMaxDepth": {
        "type": "integer",
        "maximum": 10
      },
      "QueryLineageMaxResults": {
        "type": "integer",
        "maximum": 50
      },
      "String8192": {
        "type": "string",
        "maxLength": 8192
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://api.sagemaker.us-east-1.amazonaws.com/#X-Amz-Target=SageMaker.QueryLineage{?MaxResults,NextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Vertices**",
            "**Edges**",
            "**NextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
