{
  "name": "UploadFunction",
  "description": "<p>Creates a new Lambda function or updates an existing function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the existing Lambda function is updated with the new code and metadata. </p> <p>This operation requires permission for the <code>lambda:UploadFunction</code> action.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "FunctionName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-_]+",
        "minLength": 1,
        "maxLength": 64,
        "description": "The name you want to assign to the function you are uploading. The function names appear in the console and are returned in the <a>ListFunctions</a> API. Function names are used to specify functions to other AWS Lambda APIs, such as <a>InvokeAsync</a>. "
      },
      "Runtime": {
        "type": "string",
        "enum": [
          "nodejs"
        ],
        "description": "The runtime environment for the Lambda function you are uploading. Currently, Lambda supports only \"nodejs\" as the runtime."
      },
      "Role": {
        "type": "string",
        "pattern": "arn:aws:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+",
        "description": "The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. "
      },
      "Handler": {
        "type": "string",
        "pattern": "[a-zA-Z0-9./\\-_]+",
        "description": "The function that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function. "
      },
      "Mode": {
        "type": "string",
        "enum": [
          "event"
        ],
        "description": "How the Lambda function will be invoked. Lambda supports only the \"event\" mode. "
      },
      "Description": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256,
        "description": "A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit."
      },
      "Timeout": {
        "type": "integer",
        "minimum": 1,
        "maximum": 60,
        "description": "The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. "
      },
      "MemorySize": {
        "type": "integer",
        "minimum": 128,
        "maximum": 1024,
        "description": "The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, database operation might need less memory compared to image processing function. The default value is 128 MB. The value must be a multiple of 64 MB."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "FunctionZip"
        ],
        "properties": {
          "FunctionZip": {
            "description": "A .zip file containing your packaged source code. For more information about creating a .zip file, go to <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events.html\">AWS LambdaL How it Works</a> in the AWS Lambda Developer Guide. ",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "FunctionName",
      "Runtime",
      "Role",
      "Handler",
      "Mode",
      "body"
    ]
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://lambda.us-east-1.amazonaws.com/2014-11-13/functions/{FunctionName}#Runtime&Role&Handler&Mode{?Runtime,Role,Handler,Mode,Description,Timeout,MemorySize}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A complex type that describes function metadata.",
        "**Key properties:**",
        {
          "$ul": [
            "**FunctionName**",
            "**FunctionARN**",
            "**ConfigurationId**",
            "**Runtime**",
            "**Role**",
            "**Handler**",
            "**Mode**",
            "**CodeSize**",
            "**Description**",
            "**Timeout**",
            "**MemorySize**",
            "**LastModified**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "One of the parameters in the request is invalid. For example, if you provided an IAM role for AWS Lambda to assume in the <code>UploadFunction</code> or the <code>UpdateFunctionConfiguration</code> API, that AWS Lambda is unable to assume you will get this exception. ",
        "**Key properties:**",
        {
          "$ul": [
            "**Type**",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The function or the event source specified in the request does not exist.",
        "**Key properties:**",
        {
          "$ul": [
            "**Type**",
            "**Message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "500": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The AWS Lambda service encountered an internal error.",
        "**Key properties:**",
        {
          "$ul": [
            "**Type**",
            "**Message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
