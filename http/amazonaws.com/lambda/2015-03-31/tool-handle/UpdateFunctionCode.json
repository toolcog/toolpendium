{
  "name": "UpdateFunctionCode",
  "description": "<p>Updates a Lambda function's code. If code signing is enabled for the function, the code package must be signed by a trusted publisher. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html\">Configuring code signing for Lambda</a>.</p> <p>If the function's package type is <code>Image</code>, then you must specify the code package in <code>ImageUri</code> as the URI of a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html\">container image</a> in the Amazon ECR registry.</p> <p>If the function's package type is <code>Zip</code>, then you must specify the deployment package as a <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html#gettingstarted-package-zip\">.zip file archive</a>. Enter the Amazon S3 bucket and key of the code .zip file location. You can also provide the function code inline using the <code>ZipFile</code> field.</p> <p>The code in the deployment package must be compatible with the target instruction set architecture of the function (<code>x86-64</code> or <code>arm64</code>).</p> <p>The function's code is locked when you publish a version. You can't modify the code of a published version, only the unpublished version.</p> <note> <p>For a function defined as a container image, Lambda resolves the image tag to an image digest. In Amazon ECR, if you update the image tag to a new image, Lambda does not automatically update the function.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "FunctionName": {
        "type": "string",
        "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
        "minLength": 1,
        "maxLength": 140,
        "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "ZipFile": {
            "description": "The base64-encoded contents of the deployment package. Amazon Web Services SDK and CLI clients handle the encoding for you. Use only with a function defined with a .zip file archive deployment package.",
            "type": "string",
            "format": "password"
          },
          "S3Bucket": {
            "description": "An Amazon S3 bucket in the same Amazon Web Services Region as your function. The bucket can be in a different Amazon Web Services account. Use only with a function defined with a .zip file archive deployment package.",
            "type": "string",
            "pattern": "^[0-9A-Za-z\\.\\-_]*(?<!\\.)$",
            "minLength": 3,
            "maxLength": 63
          },
          "S3Key": {
            "description": "The Amazon S3 key of the deployment package. Use only with a function defined with a .zip file archive deployment package.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "S3ObjectVersion": {
            "description": "For versioned objects, the version of the deployment package object to use.",
            "type": "string",
            "minLength": 1,
            "maxLength": 1024
          },
          "ImageUri": {
            "description": "URI of a container image in the Amazon ECR registry. Do not use for a function defined with a .zip file archive.",
            "type": "string"
          },
          "Publish": {
            "description": "Set to true to publish a new version of the function after updating the code. This has the same effect as calling <a>PublishVersion</a> separately.",
            "type": "boolean"
          },
          "DryRun": {
            "description": "Set to true to validate the request parameters and access permissions without modifying the function code.",
            "type": "boolean"
          },
          "RevisionId": {
            "description": "Update the function only if the revision ID matches the ID that's specified. Use this option to avoid modifying a function that has changed since you last read it.",
            "type": "string"
          },
          "Architectures": {
            "description": "The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is <code>x86_64</code>.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Architecture"
            },
            "minItems": 1,
            "maxItems": 1
          }
        }
      }
    },
    "required": [
      "FunctionName",
      "body"
    ],
    "$defs": {
      "Architecture": {
        "type": "string",
        "enum": [
          "x86_64",
          "arm64"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://lambda.us-east-1.amazonaws.com/2015-03-31/functions/{FunctionName}/code"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Details about a function's configuration.",
        "**Key properties:**",
        {
          "$ul": [
            "**FunctionName**",
            "**FunctionArn**",
            "**Runtime**",
            "**Role**",
            "**Handler**",
            "**CodeSize**",
            "**Description**",
            "**Timeout**",
            "**MemorySize**",
            "**LastModified**",
            "**CodeSha256**",
            "**Version**",
            "**VpcConfig**",
            "**DeadLetterConfig**",
            "**Environment**",
            "**KMSKeyArn**",
            "**TracingConfig**",
            "**MasterArn**",
            "**RevisionId**",
            "**Layers**",
            "**State**",
            "**StateReason**",
            "**StateReasonCode**",
            "**LastUpdateStatus**",
            "**LastUpdateStatusReason**",
            "**LastUpdateStatusReasonCode**",
            "**FileSystemConfigs**",
            "**PackageType**",
            "**ImageConfigResponse**",
            "**SigningProfileVersionArn**",
            "**SigningJobArn**",
            "**Architectures**",
            "**EphemeralStorage**",
            "**SnapStart**",
            "**RuntimeVersionConfig**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
