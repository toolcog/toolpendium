{
  "name": "CreateEventSourceMapping",
  "description": "<p>Creates a mapping between an event source and an Lambda function. Lambda reads items from the event source and invokes the function.</p> <p>For details about how to configure different event sources, see the following topics. </p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-dynamodb-eventsourcemapping\"> Amazon DynamoDB Streams</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-eventsourcemapping\"> Amazon Kinesis</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-eventsource\"> Amazon SQS</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-eventsourcemapping\"> Amazon MQ and RabbitMQ</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html\"> Amazon MSK</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/kafka-smaa.html\"> Apache Kafka</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html\"> Amazon DocumentDB</a> </p> </li> </ul> <p>The following error handling options are available only for stream sources (DynamoDB and Kinesis):</p> <ul> <li> <p> <code>BisectBatchOnFunctionError</code> – If the function returns an error, split the batch in two and retry.</p> </li> <li> <p> <code>DestinationConfig</code> – Send discarded records to an Amazon SQS queue or Amazon SNS topic.</p> </li> <li> <p> <code>MaximumRecordAgeInSeconds</code> – Discard records older than the specified age. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires</p> </li> <li> <p> <code>MaximumRetryAttempts</code> – Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.</p> </li> <li> <p> <code>ParallelizationFactor</code> – Process multiple batches from each shard concurrently.</p> </li> </ul> <p>For information about which configuration parameters apply to each event source, see the following topics.</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-params\"> Amazon DynamoDB Streams</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-params\"> Amazon Kinesis</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#services-sqs-params\"> Amazon SQS</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html#services-mq-params\"> Amazon MQ and RabbitMQ</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-parms\"> Amazon MSK</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html#services-kafka-parms\"> Apache Kafka</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html#docdb-configuration\"> Amazon DocumentDB</a> </p> </li> </ul>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "FunctionName"
        ],
        "properties": {
          "EventSourceArn": {
            "description": "<p>The Amazon Resource Name (ARN) of the event source.</p> <ul> <li> <p> <b>Amazon Kinesis</b> – The ARN of the data stream or a stream consumer.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> – The ARN of the stream.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> – The ARN of the queue.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> – The ARN of the cluster.</p> </li> <li> <p> <b>Amazon MQ</b> – The ARN of the broker.</p> </li> <li> <p> <b>Amazon DocumentDB</b> – The ARN of the DocumentDB change stream.</p> </li> </ul>",
            "type": "string",
            "pattern": "arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)"
          },
          "FunctionName": {
            "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>MyFunction</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction</code>.</p> </li> <li> <p> <b>Version or Alias ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:MyFunction:PROD</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:MyFunction</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it's limited to 64 characters in length.</p>",
            "type": "string",
            "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
            "minLength": 1,
            "maxLength": 140
          },
          "Enabled": {
            "description": "<p>When true, the event source mapping is active. When false, Lambda pauses polling and invocation.</p> <p>Default: True</p>",
            "type": "boolean"
          },
          "BatchSize": {
            "description": "<p>The maximum number of records in each batch that Lambda pulls from your stream or queue and sends to your function. Lambda passes all of the records in the batch to the function in a single call, up to the payload limit for synchronous invocation (6 MB).</p> <ul> <li> <p> <b>Amazon Kinesis</b> – Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon DynamoDB Streams</b> – Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon Simple Queue Service</b> – Default 10. For standard queues the max is 10,000. For FIFO queues the max is 10.</p> </li> <li> <p> <b>Amazon Managed Streaming for Apache Kafka</b> – Default 100. Max 10,000.</p> </li> <li> <p> <b>Self-managed Apache Kafka</b> – Default 100. Max 10,000.</p> </li> <li> <p> <b>Amazon MQ (ActiveMQ and RabbitMQ)</b> – Default 100. Max 10,000.</p> </li> <li> <p> <b>DocumentDB</b> – Default 100. Max 10,000.</p> </li> </ul>",
            "type": "integer",
            "minimum": 1,
            "maximum": 10000
          },
          "FilterCriteria": {
            "description": " An object that contains the filters for an event source. ",
            "type": "object",
            "properties": {
              "Filters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FilterList"
                  },
                  {
                    "description": " A list of filters. "
                  }
                ]
              }
            }
          },
          "MaximumBatchingWindowInSeconds": {
            "description": "<p>The maximum amount of time, in seconds, that Lambda spends gathering records before invoking the function. You can configure <code>MaximumBatchingWindowInSeconds</code> to any value from 0 seconds to 300 seconds in increments of seconds.</p> <p>For streams and Amazon SQS event sources, the default batching window is 0 seconds. For Amazon MSK, Self-managed Apache Kafka, Amazon MQ, and DocumentDB event sources, the default batching window is 500 ms. Note that because you can only change <code>MaximumBatchingWindowInSeconds</code> in increments of seconds, you cannot revert back to the 500 ms default batching window after you have changed it. To restore the default batching window, you must create a new event source mapping.</p> <p>Related setting: For streams and Amazon SQS event sources, when you set <code>BatchSize</code> to a value greater than 10, you must set <code>MaximumBatchingWindowInSeconds</code> to at least 1.</p>",
            "type": "integer",
            "minimum": 0,
            "maximum": 300
          },
          "ParallelizationFactor": {
            "description": "(Kinesis and DynamoDB Streams only) The number of batches to process from each shard concurrently.",
            "type": "integer",
            "minimum": 1,
            "maximum": 10
          },
          "StartingPosition": {
            "description": "The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Stream event sources. <code>AT_TIMESTAMP</code> is supported only for Amazon Kinesis streams, Amazon DocumentDB, Amazon MSK, and self-managed Apache Kafka.",
            "type": "string",
            "enum": [
              "TRIM_HORIZON",
              "LATEST",
              "AT_TIMESTAMP"
            ]
          },
          "StartingPositionTimestamp": {
            "description": "With <code>StartingPosition</code> set to <code>AT_TIMESTAMP</code>, the time from which to start reading. <code>StartingPositionTimestamp</code> cannot be in the future.",
            "type": "string",
            "format": "date-time"
          },
          "DestinationConfig": {
            "description": "A configuration object that specifies the destination of an event after Lambda processes it.",
            "type": "object",
            "properties": {
              "OnSuccess": {
                "allOf": [
                  {
                    "$ref": "#/$defs/OnSuccess"
                  },
                  {
                    "description": "The destination configuration for successful invocations."
                  }
                ]
              },
              "OnFailure": {
                "allOf": [
                  {
                    "$ref": "#/$defs/OnFailure"
                  },
                  {
                    "description": "The destination configuration for failed invocations."
                  }
                ]
              }
            }
          },
          "MaximumRecordAgeInSeconds": {
            "description": "(Kinesis and DynamoDB Streams only) Discard records older than the specified age. The default value is infinite (-1).",
            "type": "integer",
            "minimum": -1,
            "maximum": 604800
          },
          "BisectBatchOnFunctionError": {
            "description": "(Kinesis and DynamoDB Streams only) If the function returns an error, split the batch in two and retry.",
            "type": "boolean"
          },
          "MaximumRetryAttempts": {
            "description": "(Kinesis and DynamoDB Streams only) Discard records after the specified number of retries. The default value is infinite (-1). When set to infinite (-1), failed records are retried until the record expires.",
            "type": "integer",
            "minimum": -1,
            "maximum": 10000
          },
          "TumblingWindowInSeconds": {
            "description": "(Kinesis and DynamoDB Streams only) The duration in seconds of a processing window for DynamoDB and Kinesis Streams event sources. A value of 0 seconds indicates no tumbling window.",
            "type": "integer",
            "minimum": 0,
            "maximum": 900
          },
          "Topics": {
            "description": "The name of the Kafka topic.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Topic"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "Queues": {
            "description": " (MQ) The name of the Amazon MQ broker destination queue to consume. ",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Queue"
            },
            "minItems": 1,
            "maxItems": 1
          },
          "SourceAccessConfigurations": {
            "description": "An array of authentication protocols or VPC components required to secure your event source.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SourceAccessConfiguration"
            },
            "minItems": 0,
            "maxItems": 22
          },
          "SelfManagedEventSource": {
            "description": "The self-managed Apache Kafka cluster for your event source.",
            "type": "object",
            "properties": {
              "Endpoints": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Endpoints"
                  },
                  {
                    "description": "The list of bootstrap servers for your Kafka brokers in the following format: <code>\"KAFKA_BOOTSTRAP_SERVERS\": [\"abc.xyz.com:xxxx\",\"abc2.xyz.com:xxxx\"]</code>."
                  }
                ]
              }
            }
          },
          "FunctionResponseTypes": {
            "description": "(Kinesis, DynamoDB Streams, and Amazon SQS) A list of current response type enums applied to the event source mapping.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/FunctionResponseType"
            },
            "minItems": 0,
            "maxItems": 1
          },
          "AmazonManagedKafkaEventSourceConfig": {
            "description": "Specific configuration settings for an Amazon Managed Streaming for Apache Kafka (Amazon MSK) event source.",
            "type": "object",
            "properties": {
              "ConsumerGroupId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/URI"
                  },
                  {
                    "description": "The identifier for the Kafka consumer group to join. The consumer group ID must be unique among all your Kafka event sources. After creating a Kafka event source mapping with the consumer group ID specified, you cannot update this value. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id\">Customizable consumer group ID</a>."
                  }
                ]
              }
            }
          },
          "SelfManagedKafkaEventSourceConfig": {
            "description": "Specific configuration settings for a self-managed Apache Kafka event source.",
            "type": "object",
            "properties": {
              "ConsumerGroupId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/URI"
                  },
                  {
                    "description": "The identifier for the Kafka consumer group to join. The consumer group ID must be unique among all your Kafka event sources. After creating a Kafka event source mapping with the consumer group ID specified, you cannot update this value. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html#services-msk-consumer-group-id\">Customizable consumer group ID</a>."
                  }
                ]
              }
            }
          },
          "ScalingConfig": {
            "description": "(Amazon SQS only) The scaling configuration for the event source. To remove the configuration, pass an empty value.",
            "type": "object",
            "properties": {
              "MaximumConcurrency": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MaximumConcurrency"
                  },
                  {
                    "description": "Limits the number of concurrent instances that the Amazon SQS event source can invoke."
                  }
                ]
              }
            }
          },
          "DocumentDBEventSourceConfig": {
            "description": " Specific configuration settings for a DocumentDB event source. ",
            "type": "object",
            "properties": {
              "DatabaseName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DatabaseName"
                  },
                  {
                    "description": " The name of the database to consume within the DocumentDB cluster. "
                  }
                ]
              },
              "CollectionName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CollectionName"
                  },
                  {
                    "description": " The name of the collection to consume within the database. If you do not specify a collection, Lambda consumes all collections. "
                  }
                ]
              },
              "FullDocument": {
                "allOf": [
                  {
                    "$ref": "#/$defs/FullDocument"
                  },
                  {
                    "description": " Determines what DocumentDB sends to your event stream during document update operations. If set to UpdateLookup, DocumentDB sends a delta describing the changes, along with a copy of the entire document. Otherwise, DocumentDB sends only a partial document that contains the changes. "
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "FilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Filter"
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "Pattern": {
            "allOf": [
              {
                "$ref": "#/$defs/Pattern"
              },
              {
                "description": " A filter pattern. For more information on the syntax of a filter pattern, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax\"> Filter rule syntax</a>. "
              }
            ]
          }
        },
        "description": " A structure within a <code>FilterCriteria</code> object that defines an event filtering pattern. "
      },
      "Pattern": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 4096
      },
      "OnSuccess": {
        "type": "object",
        "properties": {
          "Destination": {
            "allOf": [
              {
                "$ref": "#/$defs/DestinationArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the destination resource."
              }
            ]
          }
        },
        "description": "A destination for events that were processed successfully."
      },
      "DestinationArn": {
        "type": "string",
        "pattern": "^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\\-])+:([a-z]{2}(-gov)?-[a-z]+-\\d{1})?:(\\d{12})?:(.*)",
        "minLength": 0,
        "maxLength": 350
      },
      "OnFailure": {
        "type": "object",
        "properties": {
          "Destination": {
            "allOf": [
              {
                "$ref": "#/$defs/DestinationArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the destination resource."
              }
            ]
          }
        },
        "description": "A destination for events that failed processing."
      },
      "Topic": {
        "type": "string",
        "pattern": "^[^.]([a-zA-Z0-9\\-_.]+)",
        "minLength": 1,
        "maxLength": 249
      },
      "Queue": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 1,
        "maxLength": 1000
      },
      "SourceAccessConfiguration": {
        "type": "object",
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/SourceAccessType"
              },
              {
                "description": "<p>The type of authentication protocol, VPC components, or virtual host for your event source. For example: <code>\"Type\":\"SASL_SCRAM_512_AUTH\"</code>.</p> <ul> <li> <p> <code>BASIC_AUTH</code> – (Amazon MQ) The Secrets Manager secret that stores your broker credentials.</p> </li> <li> <p> <code>BASIC_AUTH</code> – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL/PLAIN authentication of your Apache Kafka brokers.</p> </li> <li> <p> <code>VPC_SUBNET</code> – (Self-managed Apache Kafka) The subnets associated with your VPC. Lambda connects to these subnets to fetch data from your self-managed Apache Kafka cluster.</p> </li> <li> <p> <code>VPC_SECURITY_GROUP</code> – (Self-managed Apache Kafka) The VPC security group used to manage access to your self-managed Apache Kafka brokers.</p> </li> <li> <p> <code>SASL_SCRAM_256_AUTH</code> – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL SCRAM-256 authentication of your self-managed Apache Kafka brokers.</p> </li> <li> <p> <code>SASL_SCRAM_512_AUTH</code> – (Amazon MSK, Self-managed Apache Kafka) The Secrets Manager ARN of your secret key used for SASL SCRAM-512 authentication of your self-managed Apache Kafka brokers.</p> </li> <li> <p> <code>VIRTUAL_HOST</code> –- (RabbitMQ) The name of the virtual host in your RabbitMQ broker. Lambda uses this RabbitMQ host as the event source. This property cannot be specified in an UpdateEventSourceMapping API call.</p> </li> <li> <p> <code>CLIENT_CERTIFICATE_TLS_AUTH</code> – (Amazon MSK, self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the certificate chain (X.509 PEM), private key (PKCS#8 PEM), and private key password (optional) used for mutual TLS authentication of your MSK/Apache Kafka brokers.</p> </li> <li> <p> <code>SERVER_ROOT_CA_CERTIFICATE</code> – (Self-managed Apache Kafka) The Secrets Manager ARN of your secret key containing the root CA certificate (X.509 PEM) used for TLS encryption of your Apache Kafka brokers. </p> </li> </ul>"
              }
            ]
          },
          "URI": {
            "allOf": [
              {
                "$ref": "#/$defs/URI"
              },
              {
                "description": "The value for your chosen configuration in <code>Type</code>. For example: <code>\"URI\": \"arn:aws:secretsmanager:us-east-1:01234567890:secret:MyBrokerSecretName\"</code>."
              }
            ]
          }
        },
        "description": "To secure and define access to your event source, you can specify the authentication protocol, VPC components, or virtual host."
      },
      "SourceAccessType": {
        "type": "string",
        "enum": [
          "BASIC_AUTH",
          "VPC_SUBNET",
          "VPC_SECURITY_GROUP",
          "SASL_SCRAM_512_AUTH",
          "SASL_SCRAM_256_AUTH",
          "VIRTUAL_HOST",
          "CLIENT_CERTIFICATE_TLS_AUTH",
          "SERVER_ROOT_CA_CERTIFICATE"
        ]
      },
      "URI": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-\\/*:_+=.@-]*",
        "minLength": 1,
        "maxLength": 200
      },
      "Endpoints": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 2,
        "additionalProperties": {
          "$ref": "#/$defs/EndpointLists"
        }
      },
      "EndpointLists": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Endpoint"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "Endpoint": {
        "type": "string",
        "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):[0-9]{1,5}",
        "minLength": 1,
        "maxLength": 300
      },
      "FunctionResponseType": {
        "type": "string",
        "enum": [
          "ReportBatchItemFailures"
        ]
      },
      "MaximumConcurrency": {
        "type": "integer",
        "minimum": 2,
        "maximum": 1000
      },
      "DatabaseName": {
        "type": "string",
        "pattern": "[^ /\\.$\\x22]*",
        "minLength": 1,
        "maxLength": 63
      },
      "CollectionName": {
        "type": "string",
        "pattern": "(^(?!(system\\x2e)))(^[_a-zA-Z0-9])([^$]*)",
        "minLength": 1,
        "maxLength": 57
      },
      "FullDocument": {
        "type": "string",
        "enum": [
          "UpdateLookup",
          "Default"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://lambda.us-east-1.amazonaws.com/2015-03-31/event-source-mappings/"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "202": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A mapping between an Amazon Web Services resource and a Lambda function. For details, see <a>CreateEventSourceMapping</a>.",
        "**Key properties:**",
        {
          "$ul": [
            "**UUID**",
            "**StartingPosition**",
            "**StartingPositionTimestamp**",
            "**BatchSize**",
            "**MaximumBatchingWindowInSeconds**",
            "**ParallelizationFactor**",
            "**EventSourceArn**",
            "**FilterCriteria**",
            "**FunctionArn**",
            "**LastModified**",
            "**LastProcessingResult**",
            "**State**",
            "**StateTransitionReason**",
            "**DestinationConfig**",
            "**Topics**",
            "**Queues**",
            "**SourceAccessConfigurations**",
            "**SelfManagedEventSource**",
            "**MaximumRecordAgeInSeconds**",
            "**BisectBatchOnFunctionError**",
            "**MaximumRetryAttempts**",
            "**TumblingWindowInSeconds**",
            "**FunctionResponseTypes**",
            "**AmazonManagedKafkaEventSourceConfig**",
            "**SelfManagedKafkaEventSourceConfig**",
            "**ScalingConfig**",
            "**DocumentDBEventSourceConfig**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
