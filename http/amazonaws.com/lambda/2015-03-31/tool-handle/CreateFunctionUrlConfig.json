{
  "name": "CreateFunctionUrlConfig",
  "description": "Creates a Lambda function URL with the specified configuration parameters. A function URL is a dedicated HTTP(S) endpoint that you can use to invoke your function.",
  "parameters": {
    "type": "object",
    "properties": {
      "FunctionName": {
        "type": "string",
        "pattern": "(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\\d{1}:)?(\\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\\$LATEST|[a-zA-Z0-9-_]+))?",
        "minLength": 1,
        "maxLength": 140,
        "description": "<p>The name of the Lambda function.</p> <p class=\"title\"> <b>Name formats</b> </p> <ul> <li> <p> <b>Function name</b> – <code>my-function</code>.</p> </li> <li> <p> <b>Function ARN</b> – <code>arn:aws:lambda:us-west-2:123456789012:function:my-function</code>.</p> </li> <li> <p> <b>Partial ARN</b> – <code>123456789012:function:my-function</code>.</p> </li> </ul> <p>The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.</p>"
      },
      "Qualifier": {
        "type": "string",
        "pattern": "(^\\$LATEST$)|((?!^[0-9]+$)([a-zA-Z0-9-_]+))",
        "minLength": 1,
        "maxLength": 128,
        "description": "The alias name."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "AuthType"
        ],
        "properties": {
          "AuthType": {
            "description": "The type of authentication that your function URL uses. Set to <code>AWS_IAM</code> if you want to restrict access to authenticated users only. Set to <code>NONE</code> if you want to bypass IAM authentication to create a public endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html\">Security and auth model for Lambda function URLs</a>.",
            "type": "string",
            "enum": [
              "NONE",
              "AWS_IAM"
            ]
          },
          "Cors": {
            "description": "The <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">cross-origin resource sharing (CORS)</a> settings for your Lambda function URL. Use CORS to grant access to your function URL from any origin. You can also use CORS to control access for specific HTTP headers and methods in requests to your function URL.",
            "type": "object",
            "properties": {
              "AllowCredentials": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AllowCredentials"
                  },
                  {
                    "description": "Whether to allow cookies or other credentials in requests to your function URL. The default is <code>false</code>."
                  }
                ]
              },
              "AllowHeaders": {
                "allOf": [
                  {
                    "$ref": "#/$defs/HeadersList"
                  },
                  {
                    "description": "The HTTP headers that origins can include in requests to your function URL. For example: <code>Date</code>, <code>Keep-Alive</code>, <code>X-Custom-Header</code>."
                  }
                ]
              },
              "AllowMethods": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AllowMethodsList"
                  },
                  {
                    "description": "The HTTP methods that are allowed when calling your function URL. For example: <code>GET</code>, <code>POST</code>, <code>DELETE</code>, or the wildcard character (<code>*</code>)."
                  }
                ]
              },
              "AllowOrigins": {
                "allOf": [
                  {
                    "$ref": "#/$defs/AllowOriginsList"
                  },
                  {
                    "description": "<p>The origins that can access your function URL. You can list any number of specific origins, separated by a comma. For example: <code>https://www.example.com</code>, <code>http://localhost:60905</code>.</p> <p>Alternatively, you can grant access to all origins using the wildcard character (<code>*</code>).</p>"
                  }
                ]
              },
              "ExposeHeaders": {
                "allOf": [
                  {
                    "$ref": "#/$defs/HeadersList"
                  },
                  {
                    "description": "The HTTP headers in your function response that you want to expose to origins that call your function URL. For example: <code>Date</code>, <code>Keep-Alive</code>, <code>X-Custom-Header</code>."
                  }
                ]
              },
              "MaxAge": {
                "allOf": [
                  {
                    "$ref": "#/$defs/MaxAge"
                  },
                  {
                    "description": "The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to <code>0</code>, which means that the browser doesn't cache results."
                  }
                ]
              }
            }
          },
          "InvokeMode": {
            "description": "<p>Use one of the following options:</p> <ul> <li> <p> <code>BUFFERED</code> – This is the default option. Lambda invokes your function using the <code>Invoke</code> API operation. Invocation results are available when the payload is complete. The maximum payload size is 6 MB.</p> </li> <li> <p> <code>RESPONSE_STREAM</code> – Your function streams payload results as they become available. Lambda invokes your function using the <code>InvokeWithResponseStream</code> API operation. The maximum response payload size is 20 MB, however, you can <a href=\"https://docs.aws.amazon.com/servicequotas/latest/userguide/request-quota-increase.html\">request a quota increase</a>.</p> </li> </ul>",
            "type": "string",
            "enum": [
              "BUFFERED",
              "RESPONSE_STREAM"
            ]
          }
        }
      }
    },
    "required": [
      "FunctionName",
      "body"
    ],
    "$defs": {
      "AllowCredentials": {
        "type": "boolean"
      },
      "HeadersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Header"
        },
        "maxItems": 100
      },
      "Header": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 1024
      },
      "AllowMethodsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Method"
        },
        "maxItems": 6
      },
      "Method": {
        "type": "string",
        "pattern": ".*",
        "maxLength": 6
      },
      "AllowOriginsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Origin"
        },
        "maxItems": 100
      },
      "Origin": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 253
      },
      "MaxAge": {
        "type": "integer",
        "minimum": 0,
        "maximum": 86400
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://lambda.us-east-1.amazonaws.com/2021-10-31/functions/{FunctionName}/url{?Qualifier}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FunctionUrl**",
            "**FunctionArn**",
            "**AuthType**",
            "**Cors**",
            "**CreationTime**",
            "**InvokeMode**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
