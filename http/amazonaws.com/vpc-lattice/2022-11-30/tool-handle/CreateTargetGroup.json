{
  "name": "CreateTargetGroup",
  "description": "<p>Creates a target group. A target group is a collection of targets, or compute resources, that run your application or service. A target group can only be used by a single service.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/vpc-lattice/latest/ug/target-groups.html\">Target groups</a> in the <i>Amazon VPC Lattice User Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "clientToken": {
            "description": "A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you retry a request that completed successfully using the same client token and parameters, the retry succeeds without performing any actions. If the parameters aren't identical, the retry fails.",
            "type": "string",
            "pattern": "[!-~]+",
            "minLength": 1,
            "maxLength": 64
          },
          "config": {
            "description": "Describes the configuration of a target group. Lambda functions don't support target group configuration.",
            "type": "object",
            "properties": {
              "healthCheck": {
                "allOf": [
                  {
                    "$ref": "#/$defs/HealthCheckConfig"
                  },
                  {
                    "description": "The health check configuration."
                  }
                ]
              },
              "ipAddressType": {
                "allOf": [
                  {
                    "$ref": "#/$defs/IpAddressType"
                  },
                  {
                    "description": "The type of IP address used for the target group. The possible values are <code>ipv4</code> and <code>ipv6</code>. This is an optional parameter. If not specified, the IP address type defaults to <code>ipv4</code>."
                  }
                ]
              },
              "port": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Port"
                  },
                  {
                    "description": "The port on which the targets are listening. For HTTP, the default is <code>80</code>. For HTTPS, the default is <code>443</code> "
                  }
                ]
              },
              "protocol": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TargetGroupProtocol"
                  },
                  {
                    "description": "The protocol to use for routing traffic to the targets. Default is the protocol of a target group."
                  }
                ]
              },
              "protocolVersion": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TargetGroupProtocolVersion"
                  },
                  {
                    "description": "The protocol version. Default value is <code>HTTP1</code>."
                  }
                ]
              },
              "vpcIdentifier": {
                "allOf": [
                  {
                    "$ref": "#/$defs/VpcId"
                  },
                  {
                    "description": "The ID of the VPC."
                  }
                ]
              }
            }
          },
          "name": {
            "description": "The name of the target group. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.",
            "type": "string",
            "pattern": "^(?!tg-)(?![-])(?!.*[-]$)(?!.*[-]{2})[a-z0-9-]+$",
            "minLength": 3,
            "maxLength": 128
          },
          "tags": {
            "description": "The tags for the target group.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 200,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          },
          "type": {
            "description": "The type of target group.",
            "type": "string",
            "enum": [
              "IP",
              "LAMBDA",
              "INSTANCE",
              "ALB"
            ]
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "HealthCheckConfig": {
        "type": "object",
        "properties": {
          "enabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether health checking is enabled."
              }
            ]
          },
          "healthCheckIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckIntervalSeconds"
              },
              {
                "description": "The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds."
              }
            ]
          },
          "healthCheckTimeoutSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckTimeoutSeconds"
              },
              {
                "description": "The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds."
              }
            ]
          },
          "healthyThresholdCount": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthyThresholdCount"
              },
              {
                "description": "The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5."
              }
            ]
          },
          "matcher": {
            "allOf": [
              {
                "$ref": "#/$defs/Matcher"
              },
              {
                "description": "The codes to use when checking for a successful response from a target. These are called <i>Success codes</i> in the console."
              }
            ]
          },
          "path": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckPath"
              },
              {
                "description": "The destination for health checks on the targets. If the protocol version is <code>HTTP/1.1</code> or <code>HTTP/2</code>, specify a valid URI (for example, <code>/path?query</code>). The default path is <code>/</code>. Health checks are not supported if the protocol version is <code>gRPC</code>, however, you can choose <code>HTTP/1.1</code> or <code>HTTP/2</code> and specify a valid URI."
              }
            ]
          },
          "port": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckPort"
              },
              {
                "description": "The port used when performing health checks on targets. The default setting is the port that a target receives traffic on."
              }
            ]
          },
          "protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetGroupProtocol"
              },
              {
                "description": "The protocol used when performing health checks on targets. The possible protocols are <code>HTTP</code> and <code>HTTPS</code>. The default is <code>HTTP</code>."
              }
            ]
          },
          "protocolVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckProtocolVersion"
              },
              {
                "description": "The protocol version used when performing health checks on targets. The possible protocol versions are <code>HTTP1</code> and <code>HTTP2</code>."
              }
            ]
          },
          "unhealthyThresholdCount": {
            "allOf": [
              {
                "$ref": "#/$defs/UnhealthyThresholdCount"
              },
              {
                "description": "The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2."
              }
            ]
          }
        },
        "description": "The health check configuration of a target group. Health check configurations aren't used for <code>LAMBDA</code> and <code>ALB</code> target groups."
      },
      "Boolean": {
        "type": "boolean"
      },
      "HealthCheckIntervalSeconds": {
        "type": "integer",
        "minimum": 0,
        "maximum": 300
      },
      "HealthCheckTimeoutSeconds": {
        "type": "integer",
        "minimum": 0,
        "maximum": 120
      },
      "HealthyThresholdCount": {
        "type": "integer",
        "minimum": 0,
        "maximum": 10
      },
      "Matcher": {
        "type": "object",
        "properties": {
          "httpCode": {
            "allOf": [
              {
                "$ref": "#/$defs/HttpCodeMatcher"
              },
              {
                "description": "The HTTP code to use when checking for a successful response from a target."
              }
            ]
          }
        },
        "description": "The codes to use when checking for a successful response from a target for health checks."
      },
      "HttpCodeMatcher": {
        "type": "string",
        "pattern": "(^[0-9-,]+$|(^$))",
        "minLength": 0,
        "maxLength": 2000
      },
      "HealthCheckPath": {
        "type": "string",
        "pattern": "(^/[a-zA-Z0-9@:%_+.~#?&/=-]*$|(^$))",
        "minLength": 0,
        "maxLength": 2048
      },
      "HealthCheckPort": {
        "type": "integer",
        "minimum": 0,
        "maximum": 65535
      },
      "TargetGroupProtocol": {
        "type": "string",
        "enum": [
          "HTTP",
          "HTTPS"
        ]
      },
      "HealthCheckProtocolVersion": {
        "type": "string",
        "enum": [
          "HTTP1",
          "HTTP2"
        ]
      },
      "UnhealthyThresholdCount": {
        "type": "integer",
        "minimum": 0,
        "maximum": 10
      },
      "IpAddressType": {
        "type": "string",
        "enum": [
          "IPV4",
          "IPV6"
        ]
      },
      "Port": {
        "type": "integer",
        "minimum": 1,
        "maximum": 65535
      },
      "TargetGroupProtocolVersion": {
        "type": "string",
        "enum": [
          "HTTP1",
          "HTTP2",
          "GRPC"
        ]
      },
      "VpcId": {
        "type": "string",
        "pattern": "^vpc-(([0-9a-z]{8})|([0-9a-z]{17}))$",
        "minLength": 5,
        "maxLength": 50
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://vpc-lattice.us-east-1.amazonaws.com/targetgroups"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**arn**",
            "**config**",
            "**id**",
            "**name**",
            "**status**",
            "**type**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
