{
  "name": "CreateSchemaMapping",
  "description": "Creates a schema mapping, which defines the schema of the input customer records table. The <code>SchemaMapping</code> also provides Entity Resolution with some metadata about the table, such as the attribute types of the columns and which columns to match on.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "schemaName"
        ],
        "properties": {
          "description": {
            "description": "A description of the schema.",
            "type": "string",
            "minLength": 0,
            "maxLength": 255
          },
          "mappedInputFields": {
            "description": "A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/SchemaInputAttribute"
            },
            "minItems": 2,
            "maxItems": 25
          },
          "schemaName": {
            "description": "The name of the schema. There cannot be multiple <code>SchemaMappings</code> with the same name.",
            "type": "string",
            "pattern": "^[a-zA-Z_0-9-]*$",
            "minLength": 0,
            "maxLength": 255
          },
          "tags": {
            "description": "The tags used to organize, track, or control access for this resource.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 200,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "SchemaInputAttribute": {
        "type": "object",
        "required": [
          "fieldName",
          "type"
        ],
        "properties": {
          "fieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeName"
              },
              {
                "description": "A string containing the field name."
              }
            ]
          },
          "groupName": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeName"
              },
              {
                "description": "Instruct Entity Resolution to combine several columns into a unified column with the identical attribute type. For example, when working with columns such as first_name, middle_name, and last_name, assigning them a common <code>GroupName</code> will prompt Entity Resolution to concatenate them into a single value."
              }
            ]
          },
          "matchKey": {
            "allOf": [
              {
                "$ref": "#/$defs/AttributeName"
              },
              {
                "description": "A key that allows grouping of multiple input attributes into a unified matching group. For example, let's consider a scenario where the source table contains various addresses, such as business_address and shipping_address. By assigning the <code>MatchKey</code> <i>Address</i>' to both attributes, Entity Resolution will match records across these fields to create a consolidated matching group. If no <code>MatchKey</code> is specified for a column, it won't be utilized for matching purposes but will still be included in the output table."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaAttributeType"
              },
              {
                "description": "The type of the attribute, selected from a list of values."
              }
            ]
          }
        },
        "description": "An object containing <code>FieldField</code>, <code>Type</code>, <code>GroupName</code>, and <code>MatchKey</code>."
      },
      "AttributeName": {
        "type": "string",
        "pattern": "^[a-zA-Z_0-9- \\t]*$",
        "minLength": 0,
        "maxLength": 255
      },
      "SchemaAttributeType": {
        "type": "string",
        "enum": [
          "NAME",
          "NAME_FIRST",
          "NAME_MIDDLE",
          "NAME_LAST",
          "ADDRESS",
          "ADDRESS_STREET1",
          "ADDRESS_STREET2",
          "ADDRESS_STREET3",
          "ADDRESS_CITY",
          "ADDRESS_STATE",
          "ADDRESS_COUNTRY",
          "ADDRESS_POSTALCODE",
          "PHONE",
          "PHONE_NUMBER",
          "PHONE_COUNTRYCODE",
          "EMAIL_ADDRESS",
          "UNIQUE_ID",
          "DATE",
          "STRING"
        ]
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://entityresolution.us-east-1.amazonaws.com/schemas"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**description**",
            "**mappedInputFields**",
            "**schemaArn**",
            "**schemaName**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
