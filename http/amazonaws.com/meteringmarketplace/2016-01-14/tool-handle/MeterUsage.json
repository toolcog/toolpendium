{
  "name": "MeterUsage",
  "description": "<p>API to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.</p> <p> <code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials from the EC2 instance, ECS task, or EKS pod.</p> <p> <code>MeterUsage</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSMPMeteringService.MeterUsage"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/MeterUsageRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "MeterUsageRequest": {
        "type": "object",
        "required": [
          "ProductCode",
          "Timestamp",
          "UsageDimension"
        ],
        "title": "MeterUsageRequest",
        "properties": {
          "ProductCode": {
            "allOf": [
              {
                "$ref": "#/$defs/ProductCode"
              },
              {
                "description": "Product code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product."
              }
            ]
          },
          "Timestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "Timestamp, in UTC, for which the usage is being reported. Your application can meter usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage."
              }
            ]
          },
          "UsageDimension": {
            "allOf": [
              {
                "$ref": "#/$defs/UsageDimension"
              },
              {
                "description": "It will be one of the fcp dimension name provided during the publishing of the product."
              }
            ]
          },
          "UsageQuantity": {
            "allOf": [
              {
                "$ref": "#/$defs/UsageQuantity"
              },
              {
                "description": "Consumption value for the hour. Defaults to <code>0</code> if not specified."
              }
            ]
          },
          "DryRun": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Checks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns <code>DryRunOperation</code>; otherwise, it returns <code>UnauthorizedException</code>. Defaults to <code>false</code> if not specified."
              }
            ]
          },
          "UsageAllocations": {
            "allOf": [
              {
                "$ref": "#/$defs/UsageAllocations"
              },
              {
                "description": "<p>The set of <code>UsageAllocations</code> to submit.</p> <p>The sum of all <code>UsageAllocation</code> quantities must equal the <code>UsageQuantity</code> of the <code>MeterUsage</code> request, and each <code>UsageAllocation</code> must have a unique set of tags (include no tags).</p>"
              }
            ]
          }
        }
      },
      "ProductCode": {
        "type": "string",
        "pattern": "^[-a-zA-Z0-9/=:_.@]*$",
        "minLength": 1,
        "maxLength": 255
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "UsageDimension": {
        "type": "string",
        "pattern": "[\\s\\S]+",
        "minLength": 1,
        "maxLength": 255
      },
      "UsageQuantity": {
        "type": "integer",
        "minimum": 0,
        "maximum": 2147483647
      },
      "Boolean": {
        "type": "boolean"
      },
      "UsageAllocations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/UsageAllocation"
        },
        "minItems": 1,
        "maxItems": 2500
      },
      "UsageAllocation": {
        "type": "object",
        "required": [
          "AllocatedUsageQuantity"
        ],
        "properties": {
          "AllocatedUsageQuantity": {
            "allOf": [
              {
                "$ref": "#/$defs/AllocatedUsageQuantity"
              },
              {
                "description": "The total quantity allocated to this bucket of usage."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "The set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out."
              }
            ]
          }
        },
        "description": "<p>Usage allocations allow you to split usage into buckets by tags.</p> <p>Each <code>UsageAllocation</code> indicates the usage quantity for a specific set of tags.</p>"
      },
      "AllocatedUsageQuantity": {
        "type": "integer",
        "minimum": 0,
        "maximum": 2147483647
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "One part of a key-value pair that makes up a <code>tag</code>. A <code>key</code> is a label that acts like a category for the specific tag values."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "One part of a key-value pair that makes up a <code>tag</code>. A <code>value</code> acts as a descriptor within a tag category (key). The value can be empty or null."
              }
            ]
          }
        },
        "description": "Metadata assigned to an allocation. Each tag is made up of a <code>key</code> and a <code>value</code>."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9+ -=._:\\/@]+$",
        "minLength": 1,
        "maxLength": 100
      },
      "TagValue": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9+ -=._:\\/@]+$",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://metering.marketplace.us-east-1.amazonaws.com/#X-Amz-Target=AWSMPMeteringService.MeterUsage"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**MeteringRecordId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
