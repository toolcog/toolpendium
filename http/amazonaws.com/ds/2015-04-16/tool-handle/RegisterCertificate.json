{
  "name": "RegisterCertificate",
  "description": "Registers a certificate for a secure LDAP or client certificate authentication.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DirectoryService_20150416.RegisterCertificate"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/RegisterCertificateRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "RegisterCertificateRequest": {
        "type": "object",
        "required": [
          "DirectoryId",
          "CertificateData"
        ],
        "title": "RegisterCertificateRequest",
        "properties": {
          "DirectoryId": {
            "allOf": [
              {
                "$ref": "#/$defs/DirectoryId"
              },
              {
                "description": "The identifier of the directory."
              }
            ]
          },
          "CertificateData": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateData"
              },
              {
                "description": "The certificate PEM string that needs to be registered."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateType"
              },
              {
                "description": "The function that the registered certificate performs. Valid values include <code>ClientLDAPS</code> or <code>ClientCertAuth</code>. The default value is <code>ClientLDAPS</code>."
              }
            ]
          },
          "ClientCertAuthSettings": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientCertAuthSettings"
              },
              {
                "description": "A <code>ClientCertAuthSettings</code> object that contains client certificate authentication settings."
              }
            ]
          }
        }
      },
      "DirectoryId": {
        "type": "string",
        "pattern": "^d-[0-9a-f]{10}$"
      },
      "CertificateData": {
        "type": "string",
        "minLength": 1,
        "maxLength": 8192
      },
      "CertificateType": {
        "type": "string",
        "enum": [
          "ClientCertAuth",
          "ClientLDAPS"
        ]
      },
      "ClientCertAuthSettings": {
        "type": "object",
        "properties": {
          "OCSPUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/OCSPUrl"
              },
              {
                "description": "Specifies the URL of the default OCSP server used to check for revocation status. A secondary value to any OCSP address found in the AIA extension of the user certificate."
              }
            ]
          }
        },
        "description": "Contains information about the client certificate authentication settings for the <code>RegisterCertificate</code> and <code>DescribeCertificate</code> operations. "
      },
      "OCSPUrl": {
        "type": "string",
        "pattern": "^(https?|ftp|file|ldaps?)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;()]*[-a-zA-Z0-9+&@#/%=~_|()]",
        "minLength": 1,
        "maxLength": 1024
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ds.us-east-1.amazonaws.com/#X-Amz-Target=DirectoryService_20150416.RegisterCertificate"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**CertificateId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
