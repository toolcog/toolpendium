{
  "name": "CreateFileCache",
  "description": "<p>Creates a new Amazon File Cache resource.</p> <p>You can use this operation with a client request token in the request that Amazon File Cache uses to ensure idempotent creation. If a cache with the specified client request token exists and the parameters match, <code>CreateFileCache</code> returns the description of the existing cache. If a cache with the specified client request token exists and the parameters don't match, this call returns <code>IncompatibleParameterError</code>. If a file cache with the specified client request token doesn't exist, <code>CreateFileCache</code> does the following: </p> <ul> <li> <p>Creates a new, empty Amazon File Cache resourcewith an assigned ID, and an initial lifecycle state of <code>CREATING</code>.</p> </li> <li> <p>Returns the description of the cache in JSON format.</p> </li> </ul> <note> <p>The <code>CreateFileCache</code> call returns while the cache's lifecycle state is still <code>CREATING</code>. You can check the cache creation status by calling the <a href=\"https://docs.aws.amazon.com/fsx/latest/APIReference/API_DescribeFileCaches.html\">DescribeFileCaches</a> operation, which returns the cache state along with other information.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSSimbaAPIService_v20180301.CreateFileCache"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateFileCacheRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateFileCacheRequest": {
        "type": "object",
        "required": [
          "FileCacheType",
          "FileCacheTypeVersion",
          "StorageCapacity",
          "SubnetIds"
        ],
        "title": "CreateFileCacheRequest",
        "properties": {
          "ClientRequestToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientRequestToken"
              },
              {
                "description": "<p>An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.</p> <p>By using the idempotent operation, you can retry a <code>CreateFileCache</code> operation without the risk of creating an extra cache. This approach can be useful when an initial call fails in a way that makes it unclear whether a cache was created. Examples are if a transport level timeout occurred, or your connection was reset. If you use the same client request token and the initial call created a cache, the client receives success as long as the parameters are the same.</p>"
              }
            ]
          },
          "FileCacheType": {
            "allOf": [
              {
                "$ref": "#/$defs/FileCacheType"
              },
              {
                "description": "The type of cache that you're creating, which must be <code>LUSTRE</code>."
              }
            ]
          },
          "FileCacheTypeVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/FileSystemTypeVersion"
              },
              {
                "description": "Sets the Lustre version for the cache that you're creating, which must be <code>2.12</code>."
              }
            ]
          },
          "StorageCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/StorageCapacity"
              },
              {
                "description": "The storage capacity of the cache in gibibytes (GiB). Valid values are 1200 GiB, 2400 GiB, and increments of 2400 GiB."
              }
            ]
          },
          "SubnetIds": {
            "$ref": "#/$defs/SubnetIds"
          },
          "SecurityGroupIds": {
            "allOf": [
              {
                "$ref": "#/$defs/SecurityGroupIds"
              },
              {
                "description": "A list of IDs specifying the security groups to apply to all network interfaces created for Amazon File Cache access. This list isn't returned in later requests to describe the cache."
              }
            ]
          },
          "Tags": {
            "$ref": "#/$defs/Tags"
          },
          "CopyTagsToDataRepositoryAssociations": {
            "allOf": [
              {
                "$ref": "#/$defs/CopyTagsToDataRepositoryAssociations"
              },
              {
                "description": "A boolean flag indicating whether tags for the cache should be copied to data repository associations. This value defaults to false."
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKeyId"
              },
              {
                "description": "Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on an Amazon File Cache. If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\">Encrypt</a> in the <i>Key Management Service API Reference</i>."
              }
            ]
          },
          "LustreConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateFileCacheLustreConfiguration"
              },
              {
                "description": "The configuration for the Amazon File Cache resource being created."
              }
            ]
          },
          "DataRepositoryAssociations": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateFileCacheDataRepositoryAssociations"
              },
              {
                "description": "<p>A list of up to 8 configurations for data repository associations (DRAs) to be created during the cache creation. The DRAs link the cache to either an Amazon S3 data repository or a Network File System (NFS) data repository that supports the NFSv3 protocol.</p> <p>The DRA configurations must meet the following requirements:</p> <ul> <li> <p>All configurations on the list must be of the same data repository type, either all S3 or all NFS. A cache can't link to different data repository types at the same time.</p> </li> <li> <p>An NFS DRA must link to an NFS file system that supports the NFSv3 protocol.</p> </li> </ul> <p>DRA automatic import and automatic export is not supported.</p>"
              }
            ]
          }
        }
      },
      "ClientRequestToken": {
        "type": "string",
        "pattern": "[A-za-z0-9_.-]{0,63}$",
        "description": "(Optional) An idempotency token for resource creation, in a string of up to 63 ASCII characters. This token is automatically filled on your behalf when you use the Command Line Interface (CLI) or an Amazon Web Services SDK.",
        "minLength": 1,
        "maxLength": 63
      },
      "FileCacheType": {
        "type": "string",
        "enum": [
          "LUSTRE"
        ]
      },
      "FileSystemTypeVersion": {
        "type": "string",
        "pattern": "^[0-9](.[0-9]*)*$",
        "minLength": 1,
        "maxLength": 20
      },
      "StorageCapacity": {
        "type": "integer",
        "description": "Specifies the file system's storage capacity, in gibibytes (GiB).",
        "minimum": 0,
        "maximum": 2147483647
      },
      "SubnetIds": {
        "type": "array",
        "description": "A list of subnet IDs that the cache will be accessible from. You can specify only one subnet ID in a call to the <code>CreateFileCache</code> operation.",
        "items": {
          "$ref": "#/$defs/SubnetId"
        },
        "maxItems": 50
      },
      "SubnetId": {
        "type": "string",
        "pattern": "^(subnet-[0-9a-f]{8,})$",
        "description": "The ID for a subnet. A <i>subnet</i> is a range of IP addresses in your virtual private cloud (VPC). For more information, see <a href=\"https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html\">VPC and subnets</a> in the <i>Amazon VPC User Guide.</i> ",
        "minLength": 15,
        "maxLength": 24
      },
      "SecurityGroupIds": {
        "type": "array",
        "description": "A list of IDs specifying the security groups to apply to all network interfaces created for file system access. This list isn't returned in later requests to describe the file system.",
        "items": {
          "$ref": "#/$defs/SecurityGroupId"
        },
        "maxItems": 50
      },
      "SecurityGroupId": {
        "type": "string",
        "pattern": "^(sg-[0-9a-f]{8,})$",
        "description": "The ID of your Amazon EC2 security group. This ID is used to control network access to the endpoint that Amazon FSx creates on your behalf in each subnet. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\">Amazon EC2 Security groups for Linux instances</a> in the <i>Amazon EC2 User Guide</i>.",
        "minLength": 11,
        "maxLength": 20
      },
      "Tags": {
        "type": "array",
        "description": "A list of <code>Tag</code> values, with a maximum of 50 elements.",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "A value that specifies the <code>TagKey</code>, the name of the tag. Tag keys must be unique for the resource to which they are attached."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "A value that specifies the <code>TagValue</code>, the value assigned to the corresponding tag key. Tag values can be null and don't have to be unique in a tag set. For example, you can have a key-value pair in a tag set of <code>finances : April</code> and also of <code>payroll : April</code>."
              }
            ]
          }
        },
        "description": "Specifies a key-value pair for a resource tag."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "description": "A string of 1 to 128 characters that specifies the key for a tag. Tag keys must be unique for the resource to which they are attached.",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "description": "A string of 0 to 256 characters that specifies the value for a tag. Tag values can be null and don't have to be unique in a tag set.",
        "minLength": 0,
        "maxLength": 256
      },
      "CopyTagsToDataRepositoryAssociations": {
        "type": "boolean"
      },
      "KmsKeyId": {
        "type": "string",
        "pattern": "^.{1,2048}$",
        "description": "<p>Specifies the ID of the Key Management Service (KMS) key to use for encrypting data on Amazon FSx file systems, as follows:</p> <ul> <li> <p>Amazon FSx for Lustre <code>PERSISTENT_1</code> and <code>PERSISTENT_2</code> deployment types only.</p> <p> <code>SCRATCH_1</code> and <code>SCRATCH_2</code> types are encrypted using the Amazon FSx service KMS key for your account.</p> </li> <li> <p>Amazon FSx for NetApp ONTAP</p> </li> <li> <p>Amazon FSx for OpenZFS</p> </li> <li> <p>Amazon FSx for Windows File Server</p> </li> </ul> <p>If a <code>KmsKeyId</code> isn't specified, the Amazon FSx-managed KMS key for your account is used. For more information, see <a href=\"https://docs.aws.amazon.com/kms/latest/APIReference/API_Encrypt.html\">Encrypt</a> in the <i>Key Management Service API Reference</i>.</p>",
        "minLength": 1,
        "maxLength": 2048
      },
      "CreateFileCacheLustreConfiguration": {
        "type": "object",
        "required": [
          "PerUnitStorageThroughput",
          "DeploymentType",
          "MetadataConfiguration"
        ],
        "properties": {
          "PerUnitStorageThroughput": {
            "allOf": [
              {
                "$ref": "#/$defs/PerUnitStorageThroughput"
              },
              {
                "description": "Provisions the amount of read and write throughput for each 1 tebibyte (TiB) of cache storage capacity, in MB/s/TiB. The only supported value is <code>1000</code>."
              }
            ]
          },
          "DeploymentType": {
            "allOf": [
              {
                "$ref": "#/$defs/FileCacheLustreDeploymentType"
              },
              {
                "description": "Specifies the cache deployment type, which must be <code>CACHE_1</code>."
              }
            ]
          },
          "WeeklyMaintenanceStartTime": {
            "$ref": "#/$defs/WeeklyTime"
          },
          "MetadataConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/FileCacheLustreMetadataConfiguration"
              },
              {
                "description": "The configuration for a Lustre MDT (Metadata Target) storage volume."
              }
            ]
          }
        },
        "description": "The Amazon File Cache configuration for the cache that you are creating."
      },
      "PerUnitStorageThroughput": {
        "type": "integer",
        "minimum": 12,
        "maximum": 1000
      },
      "FileCacheLustreDeploymentType": {
        "type": "string",
        "enum": [
          "CACHE_1"
        ]
      },
      "WeeklyTime": {
        "type": "string",
        "pattern": "^[1-7]:([01]\\d|2[0-3]):?([0-5]\\d)$",
        "description": "<p>A recurring weekly time, in the format <code>D:HH:MM</code>. </p> <p> <code>D</code> is the day of the week, for which 1 represents Monday and 7 represents Sunday. For further details, see <a href=\"https://en.wikipedia.org/wiki/ISO_week_date\">the ISO-8601 spec as described on Wikipedia</a>.</p> <p> <code>HH</code> is the zero-padded hour of the day (0-23), and <code>MM</code> is the zero-padded minute of the hour. </p> <p>For example, <code>1:05:00</code> specifies maintenance at 5 AM Monday.</p>",
        "minLength": 7,
        "maxLength": 7
      },
      "FileCacheLustreMetadataConfiguration": {
        "type": "object",
        "required": [
          "StorageCapacity"
        ],
        "properties": {
          "StorageCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/MetadataStorageCapacity"
              },
              {
                "description": "The storage capacity of the Lustre MDT (Metadata Target) storage volume in gibibytes (GiB). The only supported value is <code>2400</code> GiB."
              }
            ]
          }
        },
        "description": "The configuration for a Lustre MDT (Metadata Target) storage volume. The metadata on Amazon File Cache is managed by a Lustre Metadata Server (MDS) while the actual metadata is persisted on an MDT."
      },
      "MetadataStorageCapacity": {
        "type": "integer",
        "minimum": 0,
        "maximum": 2147483647
      },
      "CreateFileCacheDataRepositoryAssociations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FileCacheDataRepositoryAssociation"
        },
        "maxItems": 8
      },
      "FileCacheDataRepositoryAssociation": {
        "type": "object",
        "required": [
          "FileCachePath",
          "DataRepositoryPath"
        ],
        "properties": {
          "FileCachePath": {
            "allOf": [
              {
                "$ref": "#/$defs/Namespace"
              },
              {
                "description": "<p>A path on the cache that points to a high-level directory (such as <code>/ns1/</code>) or subdirectory (such as <code>/ns1/subdir/</code>) that will be mapped 1-1 with <code>DataRepositoryPath</code>. The leading forward slash in the name is required. Two data repository associations cannot have overlapping cache paths. For example, if a data repository is associated with cache path <code>/ns1/</code>, then you cannot link another data repository with cache path <code>/ns1/ns2</code>.</p> <p>This path specifies where in your cache files will be exported from. This cache directory can be linked to only one data repository, and no data repository other can be linked to the directory.</p> <note> <p>The cache path can only be set to root (/) on an NFS DRA when <code>DataRepositorySubdirectories</code> is specified. If you specify root (/) as the cache path, you can create only one DRA on the cache.</p> <p>The cache path cannot be set to root (/) for an S3 DRA.</p> </note>"
              }
            ]
          },
          "DataRepositoryPath": {
            "allOf": [
              {
                "$ref": "#/$defs/ArchivePath"
              },
              {
                "description": "<p>The path to the S3 or NFS data repository that links to the cache. You must provide one of the following paths:</p> <ul> <li> <p>The path can be an NFS data repository that links to the cache. The path can be in one of two formats:</p> <ul> <li> <p>If you are not using the <code>DataRepositorySubdirectories</code> parameter, the path is to an NFS Export directory (or one of its subdirectories) in the format <code>nsf://nfs-domain-name/exportpath</code>. You can therefore link a single NFS Export to a single data repository association.</p> </li> <li> <p>If you are using the <code>DataRepositorySubdirectories</code> parameter, the path is the domain name of the NFS file system in the format <code>nfs://filer-domain-name</code>, which indicates the root of the subdirectories specified with the <code>DataRepositorySubdirectories</code> parameter.</p> </li> </ul> </li> <li> <p>The path can be an S3 bucket or prefix in the format <code>s3://myBucket/myPrefix/</code>.</p> </li> </ul>"
              }
            ]
          },
          "DataRepositorySubdirectories": {
            "allOf": [
              {
                "$ref": "#/$defs/SubDirectoriesPaths"
              },
              {
                "description": "A list of NFS Exports that will be linked with this data repository association. The Export paths are in the format <code>/exportpath1</code>. To use this parameter, you must configure <code>DataRepositoryPath</code> as the domain name of the NFS file system. The NFS file system domain name in effect is the root of the subdirectories. Note that <code>DataRepositorySubdirectories</code> is not supported for S3 data repositories."
              }
            ]
          },
          "NFS": {
            "allOf": [
              {
                "$ref": "#/$defs/FileCacheNFSConfiguration"
              },
              {
                "description": "The configuration for a data repository association that links an Amazon File Cache resource to an NFS data repository."
              }
            ]
          }
        },
        "description": "<p>The configuration for a data repository association (DRA) to be created during the Amazon File Cache resource creation. The DRA links the cache to either an Amazon S3 bucket or prefix, or a Network File System (NFS) data repository that supports the NFSv3 protocol.</p> <p>The DRA does not support automatic import or automatic export.</p>"
      },
      "Namespace": {
        "type": "string",
        "pattern": "^[^\\u0000\\u0085\\u2028\\u2029\\r\\n]{1,4096}$",
        "minLength": 1,
        "maxLength": 4096
      },
      "ArchivePath": {
        "type": "string",
        "pattern": "^[^\\u0000\\u0085\\u2028\\u2029\\r\\n]{3,4357}$",
        "minLength": 3,
        "maxLength": 4357
      },
      "SubDirectoriesPaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Namespace"
        },
        "maxItems": 500
      },
      "FileCacheNFSConfiguration": {
        "type": "object",
        "required": [
          "Version"
        ],
        "properties": {
          "Version": {
            "allOf": [
              {
                "$ref": "#/$defs/NfsVersion"
              },
              {
                "description": "The version of the NFS (Network File System) protocol of the NFS data repository. The only supported value is <code>NFS3</code>, which indicates that the data repository must support the NFSv3 protocol."
              }
            ]
          },
          "DnsIps": {
            "allOf": [
              {
                "$ref": "#/$defs/RepositoryDnsIps"
              },
              {
                "description": "A list of up to 2 IP addresses of DNS servers used to resolve the NFS file system domain name. The provided IP addresses can either be the IP addresses of a DNS forwarder or resolver that the customer manages and runs inside the customer VPC, or the IP addresses of the on-premises DNS servers."
              }
            ]
          }
        },
        "description": "The configuration for an NFS data repository association (DRA) created during the creation of the Amazon File Cache resource."
      },
      "NfsVersion": {
        "type": "string",
        "enum": [
          "NFS3"
        ]
      },
      "RepositoryDnsIps": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/IpAddress"
        },
        "maxItems": 10
      },
      "IpAddress": {
        "type": "string",
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$",
        "minLength": 7,
        "maxLength": 15
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://fsx.us-east-1.amazonaws.com/#X-Amz-Target=AWSSimbaAPIService_v20180301.CreateFileCache"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**FileCache**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
