{
  "name": "StartEarthObservationJob",
  "description": "Use this operation to create an Earth observation job.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "ExecutionRoleArn",
          "InputConfig",
          "JobConfig",
          "Name"
        ],
        "properties": {
          "ClientToken": {
            "description": "A unique token that guarantees that the call to this API is idempotent.",
            "type": "string",
            "minLength": 36,
            "maxLength": 64
          },
          "ExecutionRoleArn": {
            "description": "The Amazon Resource Name (ARN) of the IAM role that you specified for the job.",
            "type": "string",
            "pattern": "^arn:(aws[a-z-]*):iam::([0-9]{12}):role/[a-zA-Z0-9+=,.@_/-]+$",
            "minLength": 20,
            "maxLength": 2048
          },
          "InputConfig": {
            "description": "Input configuration information.",
            "type": "object",
            "properties": {
              "PreviousEarthObservationJobArn": {
                "allOf": [
                  {
                    "$ref": "#/$defs/EarthObservationJobArn"
                  },
                  {
                    "description": "The Amazon Resource Name (ARN) of the previous Earth Observation job."
                  }
                ]
              },
              "RasterDataCollectionQuery": {
                "allOf": [
                  {
                    "$ref": "#/$defs/RasterDataCollectionQueryInput"
                  },
                  {
                    "description": "The structure representing the RasterDataCollection Query consisting of the Area of Interest, RasterDataCollectionArn,TimeRange and Property Filters."
                  }
                ]
              }
            }
          },
          "JobConfig": {
            "description": "The input structure for the JobConfig in an EarthObservationJob.",
            "type": "object",
            "properties": {
              "BandMathConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BandMathConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for BandMath."
                  }
                ]
              },
              "CloudMaskingConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CloudMaskingConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for cloud masking."
                  }
                ]
              },
              "CloudRemovalConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/CloudRemovalConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for cloud removal."
                  }
                ]
              },
              "GeoMosaicConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/GeoMosaicConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for geomosaic."
                  }
                ]
              },
              "LandCoverSegmentationConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LandCoverSegmentationConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for land cover segmentation."
                  }
                ]
              },
              "ResamplingConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ResamplingConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for resampling."
                  }
                ]
              },
              "StackConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/StackConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for a Stacking Earth Observation job."
                  }
                ]
              },
              "TemporalStatisticsConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/TemporalStatisticsConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for temporal statistics."
                  }
                ]
              },
              "ZonalStatisticsConfig": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ZonalStatisticsConfigInput"
                  },
                  {
                    "description": "An object containing information about the job configuration for zonal statistics."
                  }
                ]
              }
            }
          },
          "KmsKeyId": {
            "description": "The Key Management Service key ID for server-side encryption.",
            "type": "string",
            "minLength": 0,
            "maxLength": 2048
          },
          "Name": {
            "description": "The name of the Earth Observation job.",
            "type": "string",
            "minLength": 0,
            "maxLength": 200
          },
          "Tags": {
            "description": "Each tag consists of a key and a value.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/String"
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "EarthObservationJobArn": {
        "type": "string",
        "pattern": "^arn:aws[a-z-]{0,12}:sagemaker-geospatial:[a-z0-9-]{1,25}:[0-9]{12}:earth-observation-job/[a-z0-9]{12,}$"
      },
      "RasterDataCollectionQueryInput": {
        "type": "object",
        "required": [
          "RasterDataCollectionArn",
          "TimeRangeFilter"
        ],
        "properties": {
          "AreaOfInterest": {
            "allOf": [
              {
                "$ref": "#/$defs/AreaOfInterest"
              },
              {
                "description": "The area of interest being queried for the raster data collection."
              }
            ]
          },
          "PropertyFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyFilters"
              },
              {
                "description": "The list of Property filters used in the Raster Data Collection Query."
              }
            ]
          },
          "RasterDataCollectionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/DataCollectionArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the raster data collection."
              }
            ]
          },
          "TimeRangeFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeRangeFilterInput"
              },
              {
                "description": "The TimeRange Filter used in the RasterDataCollection Query."
              }
            ]
          }
        },
        "description": "The input structure for Raster Data Collection Query containing the Area of Interest, TimeRange Filters, and Property Filters."
      },
      "AreaOfInterest": {
        "type": "object",
        "properties": {
          "AreaOfInterestGeometry": {
            "allOf": [
              {
                "$ref": "#/$defs/AreaOfInterestGeometry"
              },
              {
                "description": "A GeoJSON object representing the geographic extent in the coordinate space."
              }
            ]
          }
        },
        "description": "The geographic extent of the Earth Observation job."
      },
      "AreaOfInterestGeometry": {
        "type": "object",
        "properties": {
          "MultiPolygonGeometry": {
            "allOf": [
              {
                "$ref": "#/$defs/MultiPolygonGeometryInput"
              },
              {
                "description": "The structure representing the MultiPolygon Geometry."
              }
            ]
          },
          "PolygonGeometry": {
            "allOf": [
              {
                "$ref": "#/$defs/PolygonGeometryInput"
              },
              {
                "description": "The structure representing Polygon Geometry."
              }
            ]
          }
        },
        "description": "A GeoJSON object representing the geographic extent in the coordinate space."
      },
      "MultiPolygonGeometryInput": {
        "type": "object",
        "required": [
          "Coordinates"
        ],
        "properties": {
          "Coordinates": {
            "allOf": [
              {
                "$ref": "#/$defs/LinearRingsList"
              },
              {
                "description": "The coordinates of the multipolygon geometry."
              }
            ]
          }
        },
        "description": "The structure representing Polygon Geometry based on the <a href=\"https://www.rfc-editor.org/rfc/rfc7946#section-3.1.6\">GeoJson spec</a>."
      },
      "LinearRingsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LinearRings"
        }
      },
      "LinearRings": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LinearRing"
        },
        "minItems": 1
      },
      "LinearRing": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Position"
        },
        "minItems": 4
      },
      "Position": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Double"
        },
        "minItems": 2,
        "maxItems": 2
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "PolygonGeometryInput": {
        "type": "object",
        "required": [
          "Coordinates"
        ],
        "properties": {
          "Coordinates": {
            "allOf": [
              {
                "$ref": "#/$defs/LinearRings"
              },
              {
                "description": "Coordinates representing a Polygon based on the <a href=\"https://www.rfc-editor.org/rfc/rfc7946#section-3.1.6\">GeoJson spec</a>."
              }
            ]
          }
        },
        "description": "The structure representing Polygon Geometry based on the <a href=\"https://www.rfc-editor.org/rfc/rfc7946#section-3.1.6\">GeoJson spec</a>."
      },
      "PropertyFilters": {
        "type": "object",
        "properties": {
          "LogicalOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/LogicalOperator"
              },
              {
                "description": "The Logical Operator used to combine the Property Filters."
              }
            ]
          },
          "Properties": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyFiltersList"
              },
              {
                "description": "A list of Property Filters."
              }
            ]
          }
        },
        "description": "A list of PropertyFilter objects."
      },
      "LogicalOperator": {
        "type": "string",
        "enum": [
          "AND"
        ]
      },
      "PropertyFiltersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PropertyFilter"
        }
      },
      "PropertyFilter": {
        "type": "object",
        "required": [
          "Property"
        ],
        "properties": {
          "Property": {
            "allOf": [
              {
                "$ref": "#/$defs/Property"
              },
              {
                "description": "Represents a single property to match with when searching a raster data collection."
              }
            ]
          }
        },
        "description": "The structure representing a single PropertyFilter."
      },
      "Property": {
        "type": "object",
        "properties": {
          "EoCloudCover": {
            "allOf": [
              {
                "$ref": "#/$defs/EoCloudCoverInput"
              },
              {
                "description": "The structure representing EoCloudCover property filter containing a lower bound and upper bound."
              }
            ]
          },
          "LandsatCloudCoverLand": {
            "allOf": [
              {
                "$ref": "#/$defs/LandsatCloudCoverLandInput"
              },
              {
                "description": "The structure representing Land Cloud Cover property filter for Landsat collection containing a lower bound and upper bound."
              }
            ]
          },
          "Platform": {
            "allOf": [
              {
                "$ref": "#/$defs/PlatformInput"
              },
              {
                "description": "The structure representing Platform property filter consisting of value and comparison operator."
              }
            ]
          },
          "ViewOffNadir": {
            "allOf": [
              {
                "$ref": "#/$defs/ViewOffNadirInput"
              },
              {
                "description": "The structure representing ViewOffNadir property filter containing a lower bound and upper bound."
              }
            ]
          },
          "ViewSunAzimuth": {
            "allOf": [
              {
                "$ref": "#/$defs/ViewSunAzimuthInput"
              },
              {
                "description": "The structure representing ViewSunAzimuth property filter containing a lower bound and upper bound."
              }
            ]
          },
          "ViewSunElevation": {
            "allOf": [
              {
                "$ref": "#/$defs/ViewSunElevationInput"
              },
              {
                "description": "The structure representing ViewSunElevation property filter containing a lower bound and upper bound."
              }
            ]
          }
        },
        "description": "Represents a single searchable property to search on."
      },
      "EoCloudCoverInput": {
        "type": "object",
        "required": [
          "LowerBound",
          "UpperBound"
        ],
        "properties": {
          "LowerBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Lower bound for EoCloudCover."
              }
            ]
          },
          "UpperBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "Upper bound for EoCloudCover."
              }
            ]
          }
        },
        "description": "The structure representing the EoCloudCover filter."
      },
      "Float": {
        "type": "number",
        "format": "float"
      },
      "LandsatCloudCoverLandInput": {
        "type": "object",
        "required": [
          "LowerBound",
          "UpperBound"
        ],
        "properties": {
          "LowerBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The minimum value for Land Cloud Cover property filter. This will filter items having Land Cloud Cover greater than or equal to this value."
              }
            ]
          },
          "UpperBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The maximum value for Land Cloud Cover property filter. This will filter items having Land Cloud Cover less than or equal to this value."
              }
            ]
          }
        },
        "description": "The structure representing Land Cloud Cover property for Landsat data collection."
      },
      "PlatformInput": {
        "type": "object",
        "required": [
          "Value"
        ],
        "properties": {
          "ComparisonOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparisonOperator"
              },
              {
                "description": "The ComparisonOperator to use with PlatformInput."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The value of the platform."
              }
            ]
          }
        },
        "description": "The input structure for specifying Platform. Platform refers to the unique name of the specific platform the instrument is attached to. For satellites it is the name of the satellite, eg. landsat-8 (Landsat-8), sentinel-2a."
      },
      "ComparisonOperator": {
        "type": "string",
        "enum": [
          "EQUALS",
          "NOT_EQUALS",
          "STARTS_WITH"
        ]
      },
      "String": {
        "type": "string"
      },
      "ViewOffNadirInput": {
        "type": "object",
        "required": [
          "LowerBound",
          "UpperBound"
        ],
        "properties": {
          "LowerBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The minimum value for ViewOffNadir property filter. This filters items having ViewOffNadir greater than or equal to this value. "
              }
            ]
          },
          "UpperBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The maximum value for ViewOffNadir property filter. This filters items having ViewOffNadir lesser than or equal to this value."
              }
            ]
          }
        },
        "description": "The input structure for specifying ViewOffNadir property filter. ViewOffNadir refers to the angle from the sensor between nadir (straight down) and the scene center. Measured in degrees (0-90)."
      },
      "ViewSunAzimuthInput": {
        "type": "object",
        "required": [
          "LowerBound",
          "UpperBound"
        ],
        "properties": {
          "LowerBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The minimum value for ViewSunAzimuth property filter. This filters items having ViewSunAzimuth greater than or equal to this value."
              }
            ]
          },
          "UpperBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The maximum value for ViewSunAzimuth property filter. This filters items having ViewSunAzimuth lesser than or equal to this value."
              }
            ]
          }
        },
        "description": "The input structure for specifying ViewSunAzimuth property filter. ViewSunAzimuth refers to the Sun azimuth angle. From the scene center point on the ground, this is the angle between truth north and the sun. Measured clockwise in degrees (0-360)."
      },
      "ViewSunElevationInput": {
        "type": "object",
        "required": [
          "LowerBound",
          "UpperBound"
        ],
        "properties": {
          "LowerBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The lower bound to view the sun elevation."
              }
            ]
          },
          "UpperBound": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The upper bound to view the sun elevation."
              }
            ]
          }
        },
        "description": "The input structure for specifying ViewSunElevation angle property filter. "
      },
      "DataCollectionArn": {
        "type": "string",
        "pattern": "^arn:aws[a-z-]{0,12}:sagemaker-geospatial:[a-z0-9-]{1,25}:[0-9]{12}:raster-data-collection/(public|premium|user)/[a-z0-9]{12,}$"
      },
      "TimeRangeFilterInput": {
        "type": "object",
        "required": [
          "EndTime",
          "StartTime"
        ],
        "properties": {
          "EndTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The end time for the time-range filter."
              }
            ]
          },
          "StartTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The start time for the time-range filter."
              }
            ]
          }
        },
        "description": "The input for the time-range filter."
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "BandMathConfigInput": {
        "type": "object",
        "properties": {
          "CustomIndices": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomIndicesInput"
              },
              {
                "description": "CustomIndices that are computed."
              }
            ]
          },
          "PredefinedIndices": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "One or many of the supported predefined indices to compute. Allowed values: <code>NDVI</code>, <code>EVI2</code>, <code>MSAVI</code>, <code>NDWI</code>, <code>NDMI</code>, <code>NDSI</code>, and <code>WDRVI</code>."
              }
            ]
          }
        },
        "description": "Input structure for the BandMath operation type. Defines Predefined and CustomIndices to be computed using BandMath."
      },
      "CustomIndicesInput": {
        "type": "object",
        "properties": {
          "Operations": {
            "allOf": [
              {
                "$ref": "#/$defs/OperationsListInput"
              },
              {
                "description": "A list of BandMath indices to compute."
              }
            ]
          }
        },
        "description": "Input object defining the custom BandMath indices to compute."
      },
      "OperationsListInput": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Operation"
        },
        "minItems": 1
      },
      "Operation": {
        "type": "object",
        "required": [
          "Equation",
          "Name"
        ],
        "properties": {
          "Equation": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Textual representation of the math operation; Equation used to compute the spectral index."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The name of the operation."
              }
            ]
          },
          "OutputType": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputType"
              },
              {
                "description": "The type of the operation."
              }
            ]
          }
        },
        "description": "Represents an arithmetic operation to compute spectral index."
      },
      "OutputType": {
        "type": "string",
        "enum": [
          "INT32",
          "FLOAT32",
          "INT16",
          "FLOAT64",
          "UINT16"
        ]
      },
      "StringListInput": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        },
        "minItems": 1
      },
      "CloudMaskingConfigInput": {
        "type": "object",
        "properties": {},
        "description": "Input structure for CloudMasking operation type."
      },
      "CloudRemovalConfigInput": {
        "type": "object",
        "properties": {
          "AlgorithmName": {
            "allOf": [
              {
                "$ref": "#/$defs/AlgorithmNameCloudRemoval"
              },
              {
                "description": "The name of the algorithm used for cloud removal."
              }
            ]
          },
          "InterpolationValue": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The interpolation value you provide for cloud removal."
              }
            ]
          },
          "TargetBands": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "TargetBands to be returned in the output of CloudRemoval operation."
              }
            ]
          }
        },
        "description": "Input structure for Cloud Removal Operation type"
      },
      "AlgorithmNameCloudRemoval": {
        "type": "string",
        "enum": [
          "INTERPOLATION"
        ]
      },
      "GeoMosaicConfigInput": {
        "type": "object",
        "properties": {
          "AlgorithmName": {
            "allOf": [
              {
                "$ref": "#/$defs/AlgorithmNameGeoMosaic"
              },
              {
                "description": "The name of the algorithm being used for geomosaic."
              }
            ]
          },
          "TargetBands": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "The target bands for geomosaic."
              }
            ]
          }
        },
        "description": "Input configuration information for the geomosaic."
      },
      "AlgorithmNameGeoMosaic": {
        "type": "string",
        "enum": [
          "NEAR",
          "BILINEAR",
          "CUBIC",
          "CUBICSPLINE",
          "LANCZOS",
          "AVERAGE",
          "RMS",
          "MODE",
          "MAX",
          "MIN",
          "MED",
          "Q1",
          "Q3",
          "SUM"
        ]
      },
      "LandCoverSegmentationConfigInput": {
        "type": "object",
        "properties": {},
        "description": "The input structure for Land Cover Operation type."
      },
      "ResamplingConfigInput": {
        "type": "object",
        "required": [
          "OutputResolution"
        ],
        "properties": {
          "AlgorithmName": {
            "allOf": [
              {
                "$ref": "#/$defs/AlgorithmNameResampling"
              },
              {
                "description": "The name of the algorithm used for resampling."
              }
            ]
          },
          "OutputResolution": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputResolutionResamplingInput"
              },
              {
                "description": "The structure representing output resolution (in target georeferenced units) of the result of resampling operation."
              }
            ]
          },
          "TargetBands": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "Bands used in the operation. If no target bands are specified, it uses all bands available in the input."
              }
            ]
          }
        },
        "description": "The structure representing input for resampling operation."
      },
      "AlgorithmNameResampling": {
        "type": "string",
        "enum": [
          "NEAR",
          "BILINEAR",
          "CUBIC",
          "CUBICSPLINE",
          "LANCZOS",
          "AVERAGE",
          "RMS",
          "MODE",
          "MAX",
          "MIN",
          "MED",
          "Q1",
          "Q3",
          "SUM"
        ]
      },
      "OutputResolutionResamplingInput": {
        "type": "object",
        "required": [
          "UserDefined"
        ],
        "properties": {
          "UserDefined": {
            "allOf": [
              {
                "$ref": "#/$defs/UserDefined"
              },
              {
                "description": "User Defined Resolution for the output of Resampling operation defined by value and unit."
              }
            ]
          }
        },
        "description": "OutputResolution Configuration indicating the target resolution for the output of Resampling operation."
      },
      "UserDefined": {
        "type": "object",
        "required": [
          "Unit",
          "Value"
        ],
        "properties": {
          "Unit": {
            "allOf": [
              {
                "$ref": "#/$defs/Unit"
              },
              {
                "description": "The units for output resolution of the result."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/Float"
              },
              {
                "description": "The value for output resolution of the result."
              }
            ]
          }
        },
        "description": "The output resolution (in target georeferenced units) of the result of the operation"
      },
      "Unit": {
        "type": "string",
        "enum": [
          "METERS"
        ]
      },
      "StackConfigInput": {
        "type": "object",
        "properties": {
          "OutputResolution": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputResolutionStackInput"
              },
              {
                "description": "The structure representing output resolution (in target georeferenced units) of the result of stacking operation."
              }
            ]
          },
          "TargetBands": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "A list of bands to be stacked in the specified order. When the parameter is not provided, all the available bands in the data collection are stacked in the alphabetical order of their asset names."
              }
            ]
          }
        },
        "description": "The input structure for Stacking Operation."
      },
      "OutputResolutionStackInput": {
        "type": "object",
        "properties": {
          "Predefined": {
            "allOf": [
              {
                "$ref": "#/$defs/PredefinedResolution"
              },
              {
                "description": "A string value representing Predefined Output Resolution for a stacking operation. Allowed values are <code>HIGHEST</code>, <code>LOWEST</code>, and <code>AVERAGE</code>."
              }
            ]
          },
          "UserDefined": {
            "allOf": [
              {
                "$ref": "#/$defs/UserDefined"
              },
              {
                "description": "The structure representing User Output Resolution for a Stacking operation defined as a value and unit."
              }
            ]
          }
        },
        "description": "The input structure representing Output Resolution for Stacking Operation."
      },
      "PredefinedResolution": {
        "type": "string",
        "enum": [
          "HIGHEST",
          "LOWEST",
          "AVERAGE"
        ]
      },
      "TemporalStatisticsConfigInput": {
        "type": "object",
        "required": [
          "Statistics"
        ],
        "properties": {
          "GroupBy": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupBy"
              },
              {
                "description": "The input for the temporal statistics grouping by time frequency option."
              }
            ]
          },
          "Statistics": {
            "allOf": [
              {
                "$ref": "#/$defs/TemporalStatisticsListInput"
              },
              {
                "description": "The list of the statistics method options."
              }
            ]
          },
          "TargetBands": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "The list of target band names for the temporal statistic to calculate."
              }
            ]
          }
        },
        "description": "The structure representing the configuration for Temporal Statistics operation."
      },
      "GroupBy": {
        "type": "string",
        "enum": [
          "ALL",
          "YEARLY"
        ]
      },
      "TemporalStatisticsListInput": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TemporalStatistics"
        },
        "minItems": 1
      },
      "TemporalStatistics": {
        "type": "string",
        "enum": [
          "MEAN",
          "MEDIAN",
          "STANDARD_DEVIATION"
        ]
      },
      "ZonalStatisticsConfigInput": {
        "type": "object",
        "required": [
          "Statistics",
          "ZoneS3Path"
        ],
        "properties": {
          "Statistics": {
            "allOf": [
              {
                "$ref": "#/$defs/ZonalStatisticsListInput"
              },
              {
                "description": "List of zonal statistics to compute."
              }
            ]
          },
          "TargetBands": {
            "allOf": [
              {
                "$ref": "#/$defs/StringListInput"
              },
              {
                "description": "Bands used in the operation. If no target bands are specified, it uses all bands available input."
              }
            ]
          },
          "ZoneS3Path": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Uri"
              },
              {
                "description": "The Amazon S3 path pointing to the GeoJSON containing the polygonal zones."
              }
            ]
          },
          "ZoneS3PathKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/KmsKey"
              },
              {
                "description": "<p>The Amazon Resource Name (ARN) or an ID of a Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to decrypt your output artifacts with Amazon S3 server-side encryption. The SageMaker execution role must have <code>kms:GenerateDataKey</code> permission.</p> <p>The <code>KmsKeyId</code> can be any of the following formats:</p> <ul> <li> <p>// KMS Key ID</p> <p> <code>\"1234abcd-12ab-34cd-56ef-1234567890ab\"</code> </p> </li> <li> <p>// Amazon Resource Name (ARN) of a KMS Key</p> <p> <code>\"arn:aws:kms:&lt;region&gt;:&lt;account&gt;:key/&lt;key-id-12ab-34cd-56ef-1234567890ab&gt;\"</code> </p> </li> </ul> <p>For more information about key identifiers, see <a href=\"https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id\">Key identifiers (KeyID)</a> in the Amazon Web Services Key Management Service (Amazon Web Services KMS) documentation.</p>"
              }
            ]
          }
        },
        "description": "The structure representing input configuration of ZonalStatistics operation."
      },
      "ZonalStatisticsListInput": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ZonalStatistics"
        },
        "minItems": 1
      },
      "ZonalStatistics": {
        "type": "string",
        "enum": [
          "MEAN",
          "MEDIAN",
          "STANDARD_DEVIATION",
          "MAX",
          "MIN",
          "SUM"
        ]
      },
      "S3Uri": {
        "type": "string",
        "pattern": "^s3://([^/]+)/?(.*)$"
      },
      "KmsKey": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://sagemaker-geospatial.us-east-1.amazonaws.com/earth-observation-jobs"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**CreationTime**",
            "**DurationInSeconds**",
            "**ExecutionRoleArn**",
            "**InputConfig**",
            "**JobConfig**",
            "**KmsKeyId**",
            "**Name**",
            "**Status**",
            "**Tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
