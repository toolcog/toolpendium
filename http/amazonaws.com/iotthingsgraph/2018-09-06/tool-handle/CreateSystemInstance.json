{
  "name": "CreateSystemInstance",
  "description": "<p>Creates a system instance. </p> <p>This action validates the system instance, prepares the deployment-related resources. For Greengrass deployments, it updates the Greengrass group that is specified by the <code>greengrassGroupName</code> parameter. It also adds a file to the S3 bucket specified by the <code>s3BucketName</code> parameter. You need to call <code>DeploySystemInstance</code> after running this action.</p> <p>For Greengrass deployments, since this action modifies and adds resources to a Greengrass group and an S3 bucket on the caller's behalf, the calling identity must have write permissions to both the specified Greengrass group and S3 bucket. Otherwise, the call will fail with an authorization error.</p> <p>For cloud deployments, this action requires a <code>flowActionsRoleArn</code> value. This is an IAM role that has permissions to access AWS services, such as AWS Lambda and AWS IoT, that the flow uses when it executes.</p> <p>If the definition document doesn't specify a version of the user's namespace, the latest version will be used by default.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "IotThingsGraphFrontEndService.CreateSystemInstance"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateSystemInstanceRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateSystemInstanceRequest": {
        "type": "object",
        "required": [
          "definition",
          "target"
        ],
        "title": "CreateSystemInstanceRequest",
        "properties": {
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "Metadata, consisting of key-value pairs, that can be used to categorize your system instances."
              }
            ]
          },
          "definition": {
            "$ref": "#/$defs/DefinitionDocument"
          },
          "target": {
            "allOf": [
              {
                "$ref": "#/$defs/DeploymentTarget"
              },
              {
                "description": "The target type of the deployment. Valid values are <code>GREENGRASS</code> and <code>CLOUD</code>."
              }
            ]
          },
          "greengrassGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupName"
              },
              {
                "description": "The name of the Greengrass group where the system instance will be deployed. This value is required if the value of the <code>target</code> parameter is <code>GREENGRASS</code>."
              }
            ]
          },
          "s3BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the Amazon Simple Storage Service bucket that will be used to store and deploy the system instance's resource file. This value is required if the value of the <code>target</code> parameter is <code>GREENGRASS</code>."
              }
            ]
          },
          "metricsConfiguration": {
            "$ref": "#/$defs/MetricsConfiguration"
          },
          "flowActionsRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The ARN of the IAM role that AWS IoT Things Graph will assume when it executes the flow. This role must have read and write access to AWS Lambda and AWS IoT and any other AWS services that the flow uses when it executes. This value is required if the value of the <code>target</code> parameter is <code>CLOUD</code>."
              }
            ]
          }
        }
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The required name of the tag. The string value can be from 1 to 128 Unicode characters in length."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The optional value of the tag. The string value can be from 1 to 256 Unicode characters in length."
              }
            ]
          }
        },
        "description": "Metadata assigned to an AWS IoT Things Graph resource consisting of a key-value pair."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "DefinitionDocument": {
        "type": "object",
        "required": [
          "language",
          "text"
        ],
        "properties": {
          "language": {
            "allOf": [
              {
                "$ref": "#/$defs/DefinitionLanguage"
              },
              {
                "description": "The language used to define the entity. <code>GRAPHQL</code> is the only valid value."
              }
            ]
          },
          "text": {
            "allOf": [
              {
                "$ref": "#/$defs/DefinitionText"
              },
              {
                "description": "The GraphQL text that defines the entity."
              }
            ]
          }
        },
        "description": "A document that defines an entity. "
      },
      "DefinitionLanguage": {
        "type": "string",
        "enum": [
          "GRAPHQL"
        ]
      },
      "DefinitionText": {
        "type": "string",
        "maxLength": 1048576
      },
      "DeploymentTarget": {
        "type": "string",
        "enum": [
          "GREENGRASS",
          "CLOUD"
        ]
      },
      "GroupName": {
        "type": "string"
      },
      "S3BucketName": {
        "type": "string"
      },
      "MetricsConfiguration": {
        "type": "object",
        "properties": {
          "cloudMetricEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Enabled"
              },
              {
                "description": "A Boolean that specifies whether cloud metrics are collected."
              }
            ]
          },
          "metricRuleRoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The ARN of the role that is used to collect cloud metrics."
              }
            ]
          }
        },
        "description": "An object that specifies whether cloud metrics are collected in a deployment and, if so, what role is used to collect metrics."
      },
      "Enabled": {
        "type": "boolean"
      },
      "RoleArn": {
        "type": "string",
        "minLength": 20,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iotthingsgraph.us-east-1.amazonaws.com/#X-Amz-Target=IotThingsGraphFrontEndService.CreateSystemInstance"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**summary**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
