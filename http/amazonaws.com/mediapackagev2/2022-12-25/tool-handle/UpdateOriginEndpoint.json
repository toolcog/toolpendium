{
  "name": "UpdateOriginEndpoint",
  "description": "<p>Update the specified origin endpoint. Edit the packaging preferences on an endpoint to optimize the viewing experience. You can't edit the name of the endpoint.</p> <p>Any edits you make that impact the video output may not be reflected for a few minutes.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "ChannelGroupName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_-]+",
        "minLength": 1,
        "maxLength": 256,
        "description": "The name that describes the channel group. The name is the primary identifier for the channel group, and must be unique for your account in the AWS Region."
      },
      "ChannelName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_-]+",
        "minLength": 1,
        "maxLength": 256,
        "description": "The name that describes the channel. The name is the primary identifier for the channel, and must be unique for your account in the AWS Region and channel group. "
      },
      "OriginEndpointName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_-]+",
        "minLength": 1,
        "maxLength": 256,
        "description": "The name that describes the origin endpoint. The name is the primary identifier for the origin endpoint, and and must be unique for your account in the AWS Region and channel. "
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "ContainerType"
        ],
        "properties": {
          "ContainerType": {
            "description": "The type of container attached to this origin endpoint. A container type is a file format that encapsulates one or more media streams, such as audio and video, into a single file. ",
            "type": "string",
            "enum": [
              "TS",
              "CMAF"
            ]
          },
          "Segment": {
            "description": "The segment configuration, including the segment name, duration, and other configuration values.",
            "type": "object",
            "properties": {
              "SegmentDurationSeconds": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SegmentSegmentDurationSecondsInteger"
                  },
                  {
                    "description": "The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration."
                  }
                ]
              },
              "SegmentName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/SegmentSegmentNameString"
                  },
                  {
                    "description": "The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name."
                  }
                ]
              },
              "TsUseAudioRenditionGroup": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group."
                  }
                ]
              },
              "IncludeIframeOnlyStreams": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind."
                  }
                ]
              },
              "TsIncludeDvbSubtitles": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Boolean"
                  },
                  {
                    "description": "By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output."
                  }
                ]
              },
              "Scte": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Scte"
                  },
                  {
                    "description": "The SCTE configuration options in the segment settings."
                  }
                ]
              },
              "Encryption": {
                "$ref": "#/$defs/Encryption"
              }
            }
          },
          "Description": {
            "description": "Any descriptive information that you want to add to the origin endpoint for future identification purposes.",
            "type": "string",
            "minLength": 0,
            "maxLength": 1024
          },
          "StartoverWindowSeconds": {
            "description": "The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).",
            "type": "integer",
            "minimum": 60,
            "maximum": 1209600
          },
          "HlsManifests": {
            "description": "An HTTP live streaming (HLS) manifest configuration.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/CreateHlsManifestConfiguration"
            }
          },
          "LowLatencyHlsManifests": {
            "description": "A low-latency HLS manifest configuration.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/CreateLowLatencyHlsManifestConfiguration"
            }
          }
        }
      }
    },
    "required": [
      "ChannelGroupName",
      "ChannelName",
      "OriginEndpointName",
      "body"
    ],
    "$defs": {
      "SegmentSegmentDurationSecondsInteger": {
        "type": "integer",
        "minimum": 1,
        "maximum": 30
      },
      "SegmentSegmentNameString": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_-]+",
        "minLength": 1,
        "maxLength": 256
      },
      "Boolean": {
        "type": "boolean"
      },
      "Scte": {
        "type": "object",
        "properties": {
          "ScteFilter": {
            "allOf": [
              {
                "$ref": "#/$defs/ScteFilterList"
              },
              {
                "description": "The SCTE-35 message types that you want to be treated as ad markers in the output."
              }
            ]
          }
        },
        "description": "The SCTE configuration."
      },
      "ScteFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ScteFilter"
        },
        "minItems": 0,
        "maxItems": 100
      },
      "ScteFilter": {
        "type": "string",
        "enum": [
          "SPLICE_INSERT",
          "BREAK",
          "PROVIDER_ADVERTISEMENT",
          "DISTRIBUTOR_ADVERTISEMENT",
          "PROVIDER_PLACEMENT_OPPORTUNITY",
          "DISTRIBUTOR_PLACEMENT_OPPORTUNITY",
          "PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY",
          "DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY",
          "PROGRAM"
        ]
      },
      "Encryption": {
        "type": "object",
        "required": [
          "EncryptionMethod",
          "SpekeKeyProvider"
        ],
        "properties": {
          "ConstantInitializationVector": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionConstantInitializationVectorString"
              },
              {
                "description": "A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV)."
              }
            ]
          },
          "EncryptionMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionMethod"
              },
              {
                "description": "The encryption method to use."
              }
            ]
          },
          "KeyRotationIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionKeyRotationIntervalSecondsInteger"
              },
              {
                "description": "<p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p> <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code> </p>"
              }
            ]
          },
          "SpekeKeyProvider": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProvider"
              },
              {
                "description": "The parameters for the SPEKE key provider."
              }
            ]
          }
        },
        "description": "The parameters for encrypting content."
      },
      "EncryptionConstantInitializationVectorString": {
        "type": "string",
        "pattern": "[0-9a-fA-F]+",
        "minLength": 32,
        "maxLength": 32
      },
      "EncryptionMethod": {
        "type": "object",
        "properties": {
          "TsEncryptionMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/TsEncryptionMethod"
              },
              {
                "description": "The encryption method to use."
              }
            ]
          },
          "CmafEncryptionMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/CmafEncryptionMethod"
              },
              {
                "description": "The encryption method to use."
              }
            ]
          }
        },
        "description": "The encryption type."
      },
      "TsEncryptionMethod": {
        "type": "string",
        "enum": [
          "AES_128",
          "SAMPLE_AES"
        ]
      },
      "CmafEncryptionMethod": {
        "type": "string",
        "enum": [
          "CENC",
          "CBCS"
        ]
      },
      "EncryptionKeyRotationIntervalSecondsInteger": {
        "type": "integer",
        "minimum": 300,
        "maximum": 31536000
      },
      "SpekeKeyProvider": {
        "type": "object",
        "required": [
          "EncryptionContractConfiguration",
          "ResourceId",
          "DrmSystems",
          "RoleArn",
          "Url"
        ],
        "properties": {
          "EncryptionContractConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionContractConfiguration"
              },
              {
                "description": "Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use."
              }
            ]
          },
          "ResourceId": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProviderResourceIdString"
              },
              {
                "description": "<p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p> <p>The following example shows a resource ID: <code>MovieNight20171126093045</code> </p>"
              }
            ]
          },
          "DrmSystems": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProviderDrmSystemsList"
              },
              {
                "description": "The DRM solution provider you're using to protect your content during distribution."
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProviderRoleArnString"
              },
              {
                "description": "<p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p> <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code> </p>"
              }
            ]
          },
          "Url": {
            "allOf": [
              {
                "$ref": "#/$defs/SpekeKeyProviderUrlString"
              },
              {
                "description": "<p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p> <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code> </p>"
              }
            ]
          }
        },
        "description": "The parameters for the SPEKE key provider."
      },
      "EncryptionContractConfiguration": {
        "type": "object",
        "required": [
          "PresetSpeke20Audio",
          "PresetSpeke20Video"
        ],
        "properties": {
          "PresetSpeke20Audio": {
            "allOf": [
              {
                "$ref": "#/$defs/PresetSpeke20Audio"
              },
              {
                "description": "<p>A collection of audio encryption presets.</p> <p>Value description: </p> <ul> <li> <p>PRESET-AUDIO-1 - Use one content key to encrypt all of the audio tracks in your stream.</p> </li> <li> <p>PRESET-AUDIO-2 - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks.</p> </li> <li> <p>PRESET-AUDIO-3 - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels.</p> </li> <li> <p>SHARED - Use the same content key for all of the audio and video tracks in your stream.</p> </li> <li> <p>UNENCRYPTED - Don't encrypt any of the audio tracks in your stream.</p> </li> </ul>"
              }
            ]
          },
          "PresetSpeke20Video": {
            "allOf": [
              {
                "$ref": "#/$defs/PresetSpeke20Video"
              },
              {
                "description": "<p>A collection of video encryption presets.</p> <p>Value description: </p> <ul> <li> <p>PRESET-VIDEO-1 - Use one content key to encrypt all of the video tracks in your stream.</p> </li> <li> <p>PRESET-VIDEO-2 - Use one content key to encrypt all of the SD video tracks and one content key for all HD and higher resolutions video tracks.</p> </li> <li> <p>PRESET-VIDEO-3 - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks and one content key for all UHD video tracks.</p> </li> <li> <p>PRESET-VIDEO-4 - Use one content key to encrypt all of the SD video tracks, one content key for HD video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.</p> </li> <li> <p>PRESET-VIDEO-5 - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.</p> </li> <li> <p>PRESET-VIDEO-6 - Use one content key to encrypt all of the SD video tracks, one content key for HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.</p> </li> <li> <p>PRESET-VIDEO-7 - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks and one content key for all UHD video tracks.</p> </li> <li> <p>PRESET-VIDEO-8 - Use one content key to encrypt all of the SD+HD1 video tracks, one content key for HD2 video tracks, one content key for all UHD1 video tracks and one content key for all UHD2 video tracks.</p> </li> <li> <p>SHARED - Use the same content key for all of the video and audio tracks in your stream.</p> </li> <li> <p>UNENCRYPTED - Don't encrypt any of the video tracks in your stream.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use."
      },
      "PresetSpeke20Audio": {
        "type": "string",
        "enum": [
          "PRESET_AUDIO_1",
          "PRESET_AUDIO_2",
          "PRESET_AUDIO_3",
          "SHARED",
          "UNENCRYPTED"
        ]
      },
      "PresetSpeke20Video": {
        "type": "string",
        "enum": [
          "PRESET_VIDEO_1",
          "PRESET_VIDEO_2",
          "PRESET_VIDEO_3",
          "PRESET_VIDEO_4",
          "PRESET_VIDEO_5",
          "PRESET_VIDEO_6",
          "PRESET_VIDEO_7",
          "PRESET_VIDEO_8",
          "SHARED",
          "UNENCRYPTED"
        ]
      },
      "SpekeKeyProviderResourceIdString": {
        "type": "string",
        "pattern": "[0-9a-zA-Z_-]+",
        "minLength": 1,
        "maxLength": 256
      },
      "SpekeKeyProviderDrmSystemsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DrmSystem"
        },
        "minItems": 1,
        "maxItems": 4
      },
      "DrmSystem": {
        "type": "string",
        "enum": [
          "CLEAR_KEY_AES_128",
          "FAIRPLAY",
          "PLAYREADY",
          "WIDEVINE"
        ]
      },
      "SpekeKeyProviderRoleArnString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "SpekeKeyProviderUrlString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "CreateHlsManifestConfiguration": {
        "type": "object",
        "required": [
          "ManifestName"
        ],
        "properties": {
          "ManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestName"
              },
              {
                "description": "A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object."
              }
            ]
          },
          "ChildManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestName"
              },
              {
                "description": "A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index, with an added suffix to distinguish it from the manifest name. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object."
              }
            ]
          },
          "ScteHls": {
            "$ref": "#/$defs/ScteHls"
          },
          "ManifestWindowSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateHlsManifestConfigurationManifestWindowSecondsInteger"
              },
              {
                "description": "The total duration (in seconds) of the manifest's content."
              }
            ]
          },
          "ProgramDateTimeIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateHlsManifestConfigurationProgramDateTimeIntervalSecondsInteger"
              },
              {
                "description": "<p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p> <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>"
              }
            ]
          }
        },
        "description": "Create an HTTP live streaming (HLS) manifest configuration."
      },
      "ManifestName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-]+",
        "minLength": 1,
        "maxLength": 256
      },
      "ScteHls": {
        "type": "object",
        "properties": {
          "AdMarkerHls": {
            "allOf": [
              {
                "$ref": "#/$defs/AdMarkerHls"
              },
              {
                "description": "<p>Ad markers indicate when ads should be inserted during playback. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output. Choose what you want MediaPackage to do with the ad markers.</p> <p>Value description: </p> <ul> <li> <p>DATERANGE - Insert EXT-X-DATERANGE tags to signal ad and program transition events in TS and CMAF manifests. If you use DATERANGE, you must set a programDateTimeIntervalSeconds value of 1 or higher. To learn more about DATERANGE, see <a href=\"http://docs.aws.amazon.com/mediapackage/latest/ug/scte-35-ad-marker-ext-x-daterange.html\">SCTE-35 Ad Marker EXT-X-DATERANGE</a>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "The SCTE configuration."
      },
      "AdMarkerHls": {
        "type": "string",
        "enum": [
          "DATERANGE"
        ]
      },
      "CreateHlsManifestConfigurationManifestWindowSecondsInteger": {
        "type": "integer",
        "minimum": 30,
        "maximum": 900
      },
      "CreateHlsManifestConfigurationProgramDateTimeIntervalSecondsInteger": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1209600
      },
      "CreateLowLatencyHlsManifestConfiguration": {
        "type": "object",
        "required": [
          "ManifestName"
        ],
        "properties": {
          "ManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestName"
              },
              {
                "description": "A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object."
              }
            ]
          },
          "ChildManifestName": {
            "allOf": [
              {
                "$ref": "#/$defs/ManifestName"
              },
              {
                "description": "A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index, with an added suffix to distinguish it from the manifest name. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object."
              }
            ]
          },
          "ScteHls": {
            "$ref": "#/$defs/ScteHls"
          },
          "ManifestWindowSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateLowLatencyHlsManifestConfigurationManifestWindowSecondsInteger"
              },
              {
                "description": "The total duration (in seconds) of the manifest's content."
              }
            ]
          },
          "ProgramDateTimeIntervalSeconds": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateLowLatencyHlsManifestConfigurationProgramDateTimeIntervalSecondsInteger"
              },
              {
                "description": "<p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p> <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>"
              }
            ]
          }
        },
        "description": "Create a low-latency HTTP live streaming (HLS) manifest configuration."
      },
      "CreateLowLatencyHlsManifestConfigurationManifestWindowSecondsInteger": {
        "type": "integer",
        "minimum": 30,
        "maximum": 900
      },
      "CreateLowLatencyHlsManifestConfigurationProgramDateTimeIntervalSecondsInteger": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1209600
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://mediapackagev2.us-east-1.amazonaws.com/channelGroup/{ChannelGroupName}/channel/{ChannelName}/originEndpoint/{OriginEndpointName}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Arn**",
            "**ChannelGroupName**",
            "**ChannelName**",
            "**OriginEndpointName**",
            "**ContainerType**",
            "**Segment**",
            "**CreatedAt**",
            "**ModifiedAt**",
            "**Description**",
            "**StartoverWindowSeconds**",
            "**HlsManifests**",
            "**LowLatencyHlsManifests**",
            "**Tags**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
