{
  "name": "UpdateInferenceScheduler",
  "description": "Updates an inference scheduler. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSLookoutEquipmentFrontendService.UpdateInferenceScheduler"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateInferenceSchedulerRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateInferenceSchedulerRequest": {
        "type": "object",
        "required": [
          "InferenceSchedulerName"
        ],
        "title": "UpdateInferenceSchedulerRequest",
        "properties": {
          "InferenceSchedulerName": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceSchedulerIdentifier"
              },
              {
                "description": "The name of the inference scheduler to be updated. "
              }
            ]
          },
          "DataDelayOffsetInMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/DataDelayOffsetInMinutes"
              },
              {
                "description": " A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data."
              }
            ]
          },
          "DataUploadFrequency": {
            "allOf": [
              {
                "$ref": "#/$defs/DataUploadFrequency"
              },
              {
                "description": "How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes. "
              }
            ]
          },
          "DataInputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceInputConfiguration"
              },
              {
                "description": " Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location. "
              }
            ]
          },
          "DataOutputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceOutputConfiguration"
              },
              {
                "description": " Specifies information for the output results from the inference scheduler, including the output S3 location. "
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/IamRoleArn"
              },
              {
                "description": " The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler. "
              }
            ]
          }
        }
      },
      "InferenceSchedulerIdentifier": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_-]{1,200}$",
        "minLength": 1,
        "maxLength": 200
      },
      "DataDelayOffsetInMinutes": {
        "type": "integer",
        "minimum": 0,
        "maximum": 60
      },
      "DataUploadFrequency": {
        "type": "string",
        "enum": [
          "PT5M",
          "PT10M",
          "PT15M",
          "PT30M",
          "PT1H"
        ]
      },
      "InferenceInputConfiguration": {
        "type": "object",
        "properties": {
          "S3InputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceS3InputConfiguration"
              },
              {
                "description": " Specifies configuration information for the input data for the inference, including Amazon S3 location of input data."
              }
            ]
          },
          "InputTimeZoneOffset": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeZoneOffset"
              },
              {
                "description": "Indicates the difference between your time zone and Coordinated Universal Time (UTC)."
              }
            ]
          },
          "InferenceInputNameConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceInputNameConfiguration"
              },
              {
                "description": "Specifies configuration information for the input data for the inference, including timestamp format and delimiter. "
              }
            ]
          }
        },
        "description": "Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.. "
      },
      "InferenceS3InputConfiguration": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The bucket containing the input dataset for the inference. "
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Prefix"
              },
              {
                "description": "The prefix for the S3 bucket used for the input data for the inference. "
              }
            ]
          }
        },
        "description": " Specifies configuration information for the input data for the inference, including input data S3 location. "
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Prefix": {
        "type": "string",
        "pattern": "(^$)|([\\u0009\\u000A\\u000D\\u0020-\\u00FF]{1,1023}/$)",
        "minLength": 0,
        "maxLength": 1024
      },
      "TimeZoneOffset": {
        "type": "string",
        "pattern": "^(\\+|\\-)[0-9]{2}\\:[0-9]{2}$"
      },
      "InferenceInputNameConfiguration": {
        "type": "object",
        "properties": {
          "TimestampFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/FileNameTimestampFormat"
              },
              {
                "description": "The format of the timestamp, whether Epoch time, or standard, with or without hyphens (-). "
              }
            ]
          },
          "ComponentTimestampDelimiter": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentTimestampDelimiter"
              },
              {
                "description": "Indicates the delimiter character used between items in the data. "
              }
            ]
          }
        },
        "description": "Specifies configuration information for the input data for the inference, including timestamp format and delimiter. "
      },
      "FileNameTimestampFormat": {
        "type": "string",
        "pattern": "^EPOCH|yyyy-MM-dd-HH-mm-ss|yyyyMMddHHmmss$"
      },
      "ComponentTimestampDelimiter": {
        "type": "string",
        "pattern": "^(\\-|\\_|\\s)?$",
        "minLength": 0,
        "maxLength": 1
      },
      "InferenceOutputConfiguration": {
        "type": "object",
        "required": [
          "S3OutputConfiguration"
        ],
        "properties": {
          "S3OutputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceS3OutputConfiguration"
              },
              {
                "description": " Specifies configuration information for the output results from for the inference, output S3 location. "
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/NameOrArn"
              },
              {
                "description": "The ID number for the KMS key key used to encrypt the inference output. "
              }
            ]
          }
        },
        "description": " Specifies configuration information for the output results from for the inference, including KMS key ID and output S3 location. "
      },
      "InferenceS3OutputConfiguration": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": " The bucket containing the output results from the inference "
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Prefix"
              },
              {
                "description": " The prefix for the S3 bucket used for the output results from the inference. "
              }
            ]
          }
        },
        "description": " Specifies configuration information for the output results from the inference, including output S3 location. "
      },
      "NameOrArn": {
        "type": "string",
        "pattern": "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$",
        "minLength": 1,
        "maxLength": 2048
      },
      "IamRoleArn": {
        "type": "string",
        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
        "minLength": 20,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://lookoutequipment.us-east-1.amazonaws.com/#X-Amz-Target=AWSLookoutEquipmentFrontendService.UpdateInferenceScheduler"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
