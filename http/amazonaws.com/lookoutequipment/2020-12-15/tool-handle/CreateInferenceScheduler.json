{
  "name": "CreateInferenceScheduler",
  "description": " Creates a scheduled inference. Scheduling an inference is setting up a continuous real-time inference plan to analyze new measurement data. When setting up the schedule, you provide an S3 bucket location for the input data, assign it a delimiter between separate entries in the data, set an offset delay if desired, and set the frequency of inferencing. You must also provide an S3 bucket location for the output data. ",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSLookoutEquipmentFrontendService.CreateInferenceScheduler"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateInferenceSchedulerRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateInferenceSchedulerRequest": {
        "type": "object",
        "required": [
          "ModelName",
          "InferenceSchedulerName",
          "DataUploadFrequency",
          "DataInputConfiguration",
          "DataOutputConfiguration",
          "RoleArn",
          "ClientToken"
        ],
        "title": "CreateInferenceSchedulerRequest",
        "properties": {
          "ModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelName"
              },
              {
                "description": "The name of the previously trained ML model being used to create the inference scheduler. "
              }
            ]
          },
          "InferenceSchedulerName": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceSchedulerName"
              },
              {
                "description": "The name of the inference scheduler being created. "
              }
            ]
          },
          "DataDelayOffsetInMinutes": {
            "allOf": [
              {
                "$ref": "#/$defs/DataDelayOffsetInMinutes"
              },
              {
                "description": "<p>The interval (in minutes) of planned delay at the start of each inference segment. For example, if inference is set to run every ten minutes, the delay is set to five minutes and the time is 09:08. The inference scheduler will wake up at the configured interval (which, without a delay configured, would be 09:10) plus the additional five minute delay time (so 09:15) to check your Amazon S3 bucket. The delay provides a buffer for you to upload data at the same frequency, so that you don't have to stop and restart the scheduler when uploading new data.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html\">Understanding the inference process</a>.</p>"
              }
            ]
          },
          "DataUploadFrequency": {
            "allOf": [
              {
                "$ref": "#/$defs/DataUploadFrequency"
              },
              {
                "description": "<p> How often data is uploaded to the source Amazon S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment runs inference on your data.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lookout-for-equipment/latest/ug/understanding-inference-process.html\">Understanding the inference process</a>.</p>"
              }
            ]
          },
          "DataInputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceInputConfiguration"
              },
              {
                "description": "Specifies configuration information for the input data for the inference scheduler, including delimiter, format, and dataset location. "
              }
            ]
          },
          "DataOutputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceOutputConfiguration"
              },
              {
                "description": "Specifies configuration information for the output results for the inference scheduler, including the S3 location for the output. "
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/IamRoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of a role with permission to access the data source being used for the inference. "
              }
            ]
          },
          "ServerSideKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/NameOrArn"
              },
              {
                "description": "Provides the identifier of the KMS key used to encrypt inference scheduler data by Amazon Lookout for Equipment. "
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotenceToken"
              },
              {
                "description": " A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. "
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "Any tags associated with the inference scheduler. "
              }
            ]
          }
        }
      },
      "ModelName": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_-]{1,200}$",
        "minLength": 1,
        "maxLength": 200
      },
      "InferenceSchedulerName": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_-]{1,200}$",
        "minLength": 1,
        "maxLength": 200
      },
      "DataDelayOffsetInMinutes": {
        "type": "integer",
        "minimum": 0,
        "maximum": 60
      },
      "DataUploadFrequency": {
        "type": "string",
        "enum": [
          "PT5M",
          "PT10M",
          "PT15M",
          "PT30M",
          "PT1H"
        ]
      },
      "InferenceInputConfiguration": {
        "type": "object",
        "properties": {
          "S3InputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceS3InputConfiguration"
              },
              {
                "description": " Specifies configuration information for the input data for the inference, including Amazon S3 location of input data."
              }
            ]
          },
          "InputTimeZoneOffset": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeZoneOffset"
              },
              {
                "description": "Indicates the difference between your time zone and Coordinated Universal Time (UTC)."
              }
            ]
          },
          "InferenceInputNameConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceInputNameConfiguration"
              },
              {
                "description": "Specifies configuration information for the input data for the inference, including timestamp format and delimiter. "
              }
            ]
          }
        },
        "description": "Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.. "
      },
      "InferenceS3InputConfiguration": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The bucket containing the input dataset for the inference. "
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Prefix"
              },
              {
                "description": "The prefix for the S3 bucket used for the input data for the inference. "
              }
            ]
          }
        },
        "description": " Specifies configuration information for the input data for the inference, including input data S3 location. "
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Prefix": {
        "type": "string",
        "pattern": "(^$)|([\\u0009\\u000A\\u000D\\u0020-\\u00FF]{1,1023}/$)",
        "minLength": 0,
        "maxLength": 1024
      },
      "TimeZoneOffset": {
        "type": "string",
        "pattern": "^(\\+|\\-)[0-9]{2}\\:[0-9]{2}$"
      },
      "InferenceInputNameConfiguration": {
        "type": "object",
        "properties": {
          "TimestampFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/FileNameTimestampFormat"
              },
              {
                "description": "The format of the timestamp, whether Epoch time, or standard, with or without hyphens (-). "
              }
            ]
          },
          "ComponentTimestampDelimiter": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentTimestampDelimiter"
              },
              {
                "description": "Indicates the delimiter character used between items in the data. "
              }
            ]
          }
        },
        "description": "Specifies configuration information for the input data for the inference, including timestamp format and delimiter. "
      },
      "FileNameTimestampFormat": {
        "type": "string",
        "pattern": "^EPOCH|yyyy-MM-dd-HH-mm-ss|yyyyMMddHHmmss$"
      },
      "ComponentTimestampDelimiter": {
        "type": "string",
        "pattern": "^(\\-|\\_|\\s)?$",
        "minLength": 0,
        "maxLength": 1
      },
      "InferenceOutputConfiguration": {
        "type": "object",
        "required": [
          "S3OutputConfiguration"
        ],
        "properties": {
          "S3OutputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/InferenceS3OutputConfiguration"
              },
              {
                "description": " Specifies configuration information for the output results from for the inference, output S3 location. "
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/NameOrArn"
              },
              {
                "description": "The ID number for the KMS key key used to encrypt the inference output. "
              }
            ]
          }
        },
        "description": " Specifies configuration information for the output results from for the inference, including KMS key ID and output S3 location. "
      },
      "InferenceS3OutputConfiguration": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": " The bucket containing the output results from the inference "
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Prefix"
              },
              {
                "description": " The prefix for the S3 bucket used for the output results from the inference. "
              }
            ]
          }
        },
        "description": " Specifies configuration information for the output results from the inference, including output S3 location. "
      },
      "NameOrArn": {
        "type": "string",
        "pattern": "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$",
        "minLength": 1,
        "maxLength": 2048
      },
      "IamRoleArn": {
        "type": "string",
        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
        "minLength": 20,
        "maxLength": 2048
      },
      "IdempotenceToken": {
        "type": "string",
        "pattern": "\\p{ASCII}{1,256}",
        "minLength": 1,
        "maxLength": 256
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key for the specified tag. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value for the specified tag. "
              }
            ]
          }
        },
        "description": "A tag is a key-value pair that can be added to a resource as metadata. "
      },
      "TagKey": {
        "type": "string",
        "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "[\\s\\w+-=\\.:/@]*",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://lookoutequipment.us-east-1.amazonaws.com/#X-Amz-Target=AWSLookoutEquipmentFrontendService.CreateInferenceScheduler"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**InferenceSchedulerArn**",
            "**InferenceSchedulerName**",
            "**Status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
