{
  "name": "ImportModelVersion",
  "description": "Imports a model that has been trained successfully.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSLookoutEquipmentFrontendService.ImportModelVersion"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/ImportModelVersionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "ImportModelVersionRequest": {
        "type": "object",
        "required": [
          "SourceModelVersionArn",
          "DatasetName",
          "ClientToken"
        ],
        "title": "ImportModelVersionRequest",
        "properties": {
          "SourceModelVersionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelVersionArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the model version to import."
              }
            ]
          },
          "ModelName": {
            "allOf": [
              {
                "$ref": "#/$defs/ModelName"
              },
              {
                "description": "The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model."
              }
            ]
          },
          "DatasetName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatasetIdentifier"
              },
              {
                "description": "The name of the dataset for the machine learning model being imported. "
              }
            ]
          },
          "LabelsInputConfiguration": {
            "$ref": "#/$defs/LabelsInputConfiguration"
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotenceToken"
              },
              {
                "description": "A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. "
              }
            ]
          },
          "RoleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/IamRoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model. "
              }
            ]
          },
          "ServerSideKmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/NameOrArn"
              },
              {
                "description": "Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment. "
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "The tags associated with the machine learning model to be created. "
              }
            ]
          }
        }
      },
      "ModelVersionArn": {
        "type": "string",
        "pattern": "^arn:aws(-[^:]+)?:lookoutequipment:[a-zA-Z0-9\\-]*:[0-9]{12}:model\\/.+\\/.+\\/model-version\\/[0-9]{1,}$",
        "minLength": 20,
        "maxLength": 2048
      },
      "ModelName": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_-]{1,200}$",
        "minLength": 1,
        "maxLength": 200
      },
      "DatasetIdentifier": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_-]{1,200}$",
        "minLength": 1,
        "maxLength": 200
      },
      "LabelsInputConfiguration": {
        "type": "object",
        "properties": {
          "S3InputConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelsS3InputConfiguration"
              },
              {
                "description": "Contains location information for the S3 location being used for label data. "
              }
            ]
          },
          "LabelGroupName": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelGroupName"
              },
              {
                "description": " The name of the label group to be used for label data. "
              }
            ]
          }
        },
        "description": "Contains the configuration information for the S3 location being used to hold label data. "
      },
      "LabelsS3InputConfiguration": {
        "type": "object",
        "required": [
          "Bucket"
        ],
        "properties": {
          "Bucket": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Bucket"
              },
              {
                "description": "The name of the S3 bucket holding the label data. "
              }
            ]
          },
          "Prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Prefix"
              },
              {
                "description": " The prefix for the S3 bucket used for the label data. "
              }
            ]
          }
        },
        "description": "The location information (prefix and bucket name) for the s3 location being used for label data. "
      },
      "S3Bucket": {
        "type": "string",
        "pattern": "^[a-z0-9][\\.\\-a-z0-9]{1,61}[a-z0-9]$",
        "minLength": 3,
        "maxLength": 63
      },
      "S3Prefix": {
        "type": "string",
        "pattern": "(^$)|([\\u0009\\u000A\\u000D\\u0020-\\u00FF]{1,1023}/$)",
        "minLength": 0,
        "maxLength": 1024
      },
      "LabelGroupName": {
        "type": "string",
        "pattern": "^[0-9a-zA-Z_-]{1,200}$",
        "minLength": 1,
        "maxLength": 200
      },
      "IdempotenceToken": {
        "type": "string",
        "pattern": "\\p{ASCII}{1,256}",
        "minLength": 1,
        "maxLength": 256
      },
      "IamRoleArn": {
        "type": "string",
        "pattern": "arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+",
        "minLength": 20,
        "maxLength": 2048
      },
      "NameOrArn": {
        "type": "string",
        "pattern": "^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$",
        "minLength": 1,
        "maxLength": 2048
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 0,
        "maxItems": 200
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key for the specified tag. "
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value for the specified tag. "
              }
            ]
          }
        },
        "description": "A tag is a key-value pair that can be added to a resource as metadata. "
      },
      "TagKey": {
        "type": "string",
        "pattern": "^(?!aws:)[a-zA-Z+-=._:/]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "[\\s\\w+-=\\.:/@]*",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://lookoutequipment.us-east-1.amazonaws.com/#X-Amz-Target=AWSLookoutEquipmentFrontendService.ImportModelVersion"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**ModelName**",
            "**ModelArn**",
            "**ModelVersionArn**",
            "**ModelVersion**",
            "**Status**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
