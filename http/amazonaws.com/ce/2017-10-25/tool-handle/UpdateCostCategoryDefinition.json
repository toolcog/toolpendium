{
  "name": "UpdateCostCategoryDefinition",
  "description": "Updates an existing Cost Category. Changes made to the Cost Category rules will be used to categorize the current month’s expenses and future expenses. This won’t change categorization for the previous months.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSInsightsIndexService.UpdateCostCategoryDefinition"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateCostCategoryDefinitionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateCostCategoryDefinitionRequest": {
        "type": "object",
        "required": [
          "CostCategoryArn",
          "RuleVersion",
          "Rules"
        ],
        "title": "UpdateCostCategoryDefinitionRequest",
        "properties": {
          "CostCategoryArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The unique identifier for your Cost Category."
              }
            ]
          },
          "EffectiveStart": {
            "allOf": [
              {
                "$ref": "#/$defs/ZonedDateTime"
              },
              {
                "description": "The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future."
              }
            ]
          },
          "RuleVersion": {
            "$ref": "#/$defs/CostCategoryRuleVersion"
          },
          "Rules": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategoryRulesList"
              },
              {
                "description": "The <code>Expression</code> object used to categorize costs. For more information, see <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html\">CostCategoryRule </a>. "
              }
            ]
          },
          "DefaultValue": {
            "$ref": "#/$defs/CostCategoryValue"
          },
          "SplitChargeRules": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategorySplitChargeRulesList"
              },
              {
                "description": " The split charge rules used to allocate your charges between your Cost Category values. "
              }
            ]
          }
        }
      },
      "Arn": {
        "type": "string",
        "pattern": "arn:aws[-a-z0-9]*:[a-z0-9]+:[-a-z0-9]*:[0-9]{12}:[-a-zA-Z0-9/:_]+",
        "minLength": 20,
        "maxLength": 2048
      },
      "ZonedDateTime": {
        "type": "string",
        "pattern": "^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(([+-]\\d\\d:\\d\\d)|Z)$",
        "description": "The period of time that you want the usage and costs for.",
        "minLength": 20,
        "maxLength": 25
      },
      "CostCategoryRuleVersion": {
        "type": "string",
        "enum": [
          "CostCategoryExpression.v1"
        ],
        "description": "The rule schema version in this particular Cost Category."
      },
      "CostCategoryRulesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CostCategoryRule"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "CostCategoryRule": {
        "type": "object",
        "properties": {
          "Value": {
            "$ref": "#/$defs/CostCategoryValue"
          },
          "Rule": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "<p>An <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html\">Expression</a> object used to categorize costs. This supports dimensions, tags, and nested expressions. Currently the only dimensions supported are <code>LINKED_ACCOUNT</code>, <code>SERVICE_CODE</code>, <code>RECORD_TYPE</code>, <code>LINKED_ACCOUNT_NAME</code>, <code>REGION</code>, and <code>USAGE_TYPE</code>.</p> <p> <code>RECORD_TYPE</code> is a dimension used for Cost Explorer APIs, and is also supported for Cost Category expressions. This dimension uses different terms, depending on whether you're using the console or API/JSON editor. For a detailed comparison, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/manage-cost-categories.html#cost-categories-terms\">Term Comparisons</a> in the <i>Billing and Cost Management User Guide</i>.</p>"
              }
            ]
          },
          "InheritedValue": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategoryInheritedValueDimension"
              },
              {
                "description": "The value the line item is categorized as if the line item contains the matched dimension."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategoryRuleType"
              },
              {
                "description": "You can define the <code>CostCategoryRule</code> rule type as either <code>REGULAR</code> or <code>INHERITED_VALUE</code>. The <code>INHERITED_VALUE</code> rule type adds the flexibility to define a rule that dynamically inherits the cost category value. This value is from the dimension value that's defined by <code>CostCategoryInheritedValueDimension</code>. For example, suppose that you want to costs to be dynamically grouped based on the value of a specific tag key. First, choose an inherited value rule type, and then choose the tag dimension and specify the tag key to use."
              }
            ]
          }
        },
        "description": "Rules are processed in order. If there are multiple rules that match the line item, then the first rule to match is used to determine that Cost Category value."
      },
      "CostCategoryValue": {
        "type": "string",
        "description": "The default value for the cost category.",
        "minLength": 1,
        "maxLength": 50,
        "x-pattern": "^\\(\\?! \\)[\\p\\{L\\}\\p\\{N\\}\\p\\{Z\\}-_]*$"
      },
      "Expression": {
        "type": "object",
        "properties": {
          "Or": {
            "allOf": [
              {
                "$ref": "#/$defs/Expressions"
              },
              {
                "description": "Return results that match either <code>Dimension</code> object."
              }
            ]
          },
          "And": {
            "allOf": [
              {
                "$ref": "#/$defs/Expressions"
              },
              {
                "description": "Return results that match both <code>Dimension</code> objects."
              }
            ]
          },
          "Not": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "Return results that don't match a <code>Dimension</code> object."
              }
            ]
          },
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/$defs/DimensionValues"
              },
              {
                "description": "The specific <code>Dimension</code> to use for <code>Expression</code>."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValues"
              },
              {
                "description": "The specific <code>Tag</code> to use for <code>Expression</code>."
              }
            ]
          },
          "CostCategories": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategoryValues"
              },
              {
                "description": "The filter that's based on <code>CostCategory</code> values."
              }
            ]
          }
        },
        "description": "<p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p> <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p> <p>There are two patterns:</p> <ul> <li> <p>Simple dimension values.</p> <ul> <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p> <ul> <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li> <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li> <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html\"> <code>DimensionValues</code> </a>.</p> </li> </ul> </li> <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p> <ul> <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \"Dimensions\": { \"Key\": \"REGION\", \"Values\": [ \"us-east-1\", \"us-west-1\" ] } }</code> </p> </li> <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li> </ul> </li> <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p> <ul> <li> <p>For example, you can filter for linked account names that start with \"a\".</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \"Dimensions\": { \"Key\": \"LINKED_ACCOUNT_NAME\", \"MatchOptions\": [ \"STARTS_WITH\" ], \"Values\": [ \"a\" ] } }</code> </p> </li> </ul> </li> </ul> </li> <li> <p>Compound <code>Expression</code> types with logical operations.</p> <ul> <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li> <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \"And\": [ {\"Or\": [ {\"Dimensions\": { \"Key\": \"REGION\", \"Values\": [ \"us-east-1\", \"us-west-1\" ] }}, {\"Tags\": { \"Key\": \"TagName\", \"Values\": [\"Value1\"] } } ]}, {\"Not\": {\"Dimensions\": { \"Key\": \"USAGE_TYPE\", \"Values\": [\"DataTransfer\"] }}} ] } </code> </p> </li> </ul> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { \"And\": [ ... ], \"Dimensions\": { \"Key\": \"USAGE_TYPE\", \"Values\": [ \"DataTransfer\" ] } } </code> </p> <p>The following is an example of the corresponding error message: <code>\"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories\"</code> </p> </note> </li> </ul> <note> <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p> </note>"
      },
      "Expressions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Expression"
        }
      },
      "DimensionValues": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Dimension"
              },
              {
                "description": "<p>The names of the metadata types that you can use to filter and group your results. For example, <code>AZ</code> returns a list of Availability Zones.</p> <p>Not all dimensions are supported in each API. Refer to the documentation for each specific API to see what is supported.</p> <p> <code>LINK_ACCOUNT_NAME</code> and <code>SERVICE_CODE</code> can only be used in <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html\">CostCategoryRule</a>.</p> <p> <code>ANOMALY_TOTAL_IMPACT_ABSOLUTE</code> and <code>ANOMALY_TOTAL_IMPACT_PERCENTAGE</code> can only be used in <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalySubscription.html\">AnomalySubscriptions</a>.</p>"
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "The metadata values that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values."
              }
            ]
          },
          "MatchOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchOptions"
              },
              {
                "description": "<p>The match options that you can use to filter your results.</p> <p> <code>MatchOptions</code> is only applicable for actions related to Cost Category and Anomaly Subscriptions. Refer to the documentation for each specific API to see what is supported.</p> <p>The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>"
              }
            ]
          }
        },
        "description": "The metadata that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values."
      },
      "Dimension": {
        "type": "string",
        "enum": [
          "AZ",
          "INSTANCE_TYPE",
          "LINKED_ACCOUNT",
          "LINKED_ACCOUNT_NAME",
          "OPERATION",
          "PURCHASE_TYPE",
          "REGION",
          "SERVICE",
          "SERVICE_CODE",
          "USAGE_TYPE",
          "USAGE_TYPE_GROUP",
          "RECORD_TYPE",
          "OPERATING_SYSTEM",
          "TENANCY",
          "SCOPE",
          "PLATFORM",
          "SUBSCRIPTION_ID",
          "LEGAL_ENTITY_NAME",
          "DEPLOYMENT_OPTION",
          "DATABASE_ENGINE",
          "CACHE_ENGINE",
          "INSTANCE_TYPE_FAMILY",
          "BILLING_ENTITY",
          "RESERVATION_ID",
          "RESOURCE_ID",
          "RIGHTSIZING_TYPE",
          "SAVINGS_PLANS_TYPE",
          "SAVINGS_PLAN_ARN",
          "PAYMENT_OPTION",
          "AGREEMENT_END_DATE_TIME_AFTER",
          "AGREEMENT_END_DATE_TIME_BEFORE",
          "INVOICING_ENTITY",
          "ANOMALY_TOTAL_IMPACT_ABSOLUTE",
          "ANOMALY_TOTAL_IMPACT_PERCENTAGE"
        ]
      },
      "Values": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Value"
        }
      },
      "Value": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "MatchOptions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MatchOption"
        }
      },
      "MatchOption": {
        "type": "string",
        "enum": [
          "EQUALS",
          "ABSENT",
          "STARTS_WITH",
          "ENDS_WITH",
          "CONTAINS",
          "CASE_SENSITIVE",
          "CASE_INSENSITIVE",
          "GREATER_THAN_OR_EQUAL"
        ]
      },
      "TagValues": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key for the tag."
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "The specific value of the tag."
              }
            ]
          },
          "MatchOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchOptions"
              },
              {
                "description": "The match options that you can use to filter your results. <code>MatchOptions</code> is only applicable for actions related to Cost Category. The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>."
              }
            ]
          }
        },
        "description": "<p>The values that are available for a tag.</p> <p>If <code>Values</code> and <code>Key</code> aren't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to all tags. That is, it's filtered on resources with no tags.</p> <p>If <code>Key</code> is provided and <code>Values</code> isn't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to the tag <code>Key</code> only. That is, it's filtered on resources without the given tag key.</p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "CostCategoryValues": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/$defs/CostCategoryName"
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "The specific value of the Cost Category."
              }
            ]
          },
          "MatchOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchOptions"
              },
              {
                "description": "The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. "
              }
            ]
          }
        },
        "description": "<p>The Cost Categories values used for filtering the costs.</p> <p>If <code>Values</code> and <code>Key</code> are not specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to all Cost Categories. That is, it filters on resources that aren't mapped to any Cost Categories.</p> <p>If <code>Values</code> is provided and <code>Key</code> isn't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to the Cost Categories <code>Key</code> only. That is, it filters on resources without the given Cost Categories key.</p>"
      },
      "CostCategoryName": {
        "type": "string",
        "description": "The unique name of the Cost Category.",
        "minLength": 1,
        "maxLength": 50,
        "x-pattern": "^\\(\\?! \\)[\\p\\{L\\}\\p\\{N\\}\\p\\{Z\\}-_]*$"
      },
      "CostCategoryInheritedValueDimension": {
        "type": "object",
        "properties": {
          "DimensionName": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategoryInheritedValueDimensionName"
              },
              {
                "description": "<p>The name of the dimension that's used to group costs.</p> <p>If you specify <code>LINKED_ACCOUNT_NAME</code>, the cost category value is based on account name. If you specify <code>TAG</code>, the cost category value is based on the value of the specified tag key.</p>"
              }
            ]
          },
          "DimensionKey": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericString"
              },
              {
                "description": "The key to extract cost category values."
              }
            ]
          }
        },
        "description": "When you create or update a cost category, you can define the <code>CostCategoryRule</code> rule type as <code>INHERITED_VALUE</code>. This rule type adds the flexibility to define a rule that dynamically inherits the cost category value from the dimension value that's defined by <code>CostCategoryInheritedValueDimension</code>. For example, suppose that you want to dynamically group costs that are based on the value of a specific tag key. First, choose an inherited value rule type, and then choose the tag dimension and specify the tag key to use."
      },
      "CostCategoryInheritedValueDimensionName": {
        "type": "string",
        "enum": [
          "LINKED_ACCOUNT_NAME",
          "TAG"
        ]
      },
      "GenericString": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "CostCategoryRuleType": {
        "type": "string",
        "enum": [
          "REGULAR",
          "INHERITED_VALUE"
        ]
      },
      "CostCategorySplitChargeRulesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CostCategorySplitChargeRule"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "CostCategorySplitChargeRule": {
        "type": "object",
        "required": [
          "Source",
          "Targets",
          "Method"
        ],
        "properties": {
          "Source": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericString"
              },
              {
                "description": "The Cost Category value that you want to split. That value can't be used as a source or a target in other split charge rules. To indicate uncategorized costs, you can use an empty string as the source."
              }
            ]
          },
          "Targets": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategorySplitChargeRuleTargetsList"
              },
              {
                "description": "The Cost Category values that you want to split costs across. These values can't be used as a source in other split charge rules. "
              }
            ]
          },
          "Method": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategorySplitChargeMethod"
              },
              {
                "description": "<p>The method that's used to define how to split your source costs across your targets. </p> <p> <code>Proportional</code> - Allocates charges across your targets based on the proportional weighted cost of each target.</p> <p> <code>Fixed</code> - Allocates charges across your targets based on your defined allocation percentage.</p> <p>&gt;<code>Even</code> - Allocates costs evenly across all targets.</p>"
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategorySplitChargeRuleParametersList"
              },
              {
                "description": "The parameters for a split charge method. This is only required for the <code>FIXED</code> method. "
              }
            ]
          }
        },
        "description": "Use the split charge rule to split the cost of one Cost Category value across several other target values. "
      },
      "CostCategorySplitChargeRuleTargetsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GenericString"
        },
        "minItems": 1,
        "maxItems": 500
      },
      "CostCategorySplitChargeMethod": {
        "type": "string",
        "enum": [
          "FIXED",
          "PROPORTIONAL",
          "EVEN"
        ]
      },
      "CostCategorySplitChargeRuleParametersList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CostCategorySplitChargeRuleParameter"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "CostCategorySplitChargeRuleParameter": {
        "type": "object",
        "required": [
          "Type",
          "Values"
        ],
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategorySplitChargeRuleParameterType"
              },
              {
                "description": "The parameter type. "
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategorySplitChargeRuleParameterValuesList"
              },
              {
                "description": "The parameter values. "
              }
            ]
          }
        },
        "description": "The parameters for a split charge method. "
      },
      "CostCategorySplitChargeRuleParameterType": {
        "type": "string",
        "enum": [
          "ALLOCATION_PERCENTAGES"
        ]
      },
      "CostCategorySplitChargeRuleParameterValuesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GenericString"
        },
        "minItems": 1,
        "maxItems": 500
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ce.us-east-1.amazonaws.com/#X-Amz-Target=AWSInsightsIndexService.UpdateCostCategoryDefinition"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**CostCategoryArn**",
            "**EffectiveStart**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
