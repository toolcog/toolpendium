{
  "name": "GetCostAndUsage",
  "description": "<p>Retrieves cost and usage metrics for your account. You can specify which cost and usage-related metric that you want the request to return. For example, you can specify <code>BlendedCosts</code> or <code>UsageQuantity</code>. You can also filter and group your data by various dimensions, such as <code>SERVICE</code> or <code>AZ</code>, in a specific time range. For a complete list of valid dimensions, see the <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_GetDimensionValues.html\">GetDimensionValues</a> operation. Management account in an organization in Organizations have access to all member accounts.</p> <p>For information about filter limitations, see <a href=\"https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-limits.html\">Quotas and restrictions</a> in the <i>Billing and Cost Management User Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSInsightsIndexService.GetCostAndUsage"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/GetCostAndUsageRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "GetCostAndUsageRequest": {
        "type": "object",
        "required": [
          "TimePeriod",
          "Granularity",
          "Metrics"
        ],
        "title": "GetCostAndUsageRequest",
        "properties": {
          "TimePeriod": {
            "allOf": [
              {
                "$ref": "#/$defs/DateInterval"
              },
              {
                "description": "Sets the start date and end date for retrieving Amazon Web Services costs. The start date is inclusive, but the end date is exclusive. For example, if <code>start</code> is <code>2017-01-01</code> and <code>end</code> is <code>2017-05-01</code>, then the cost and usage data is retrieved from <code>2017-01-01</code> up to and including <code>2017-04-30</code> but not including <code>2017-05-01</code>."
              }
            ]
          },
          "Granularity": {
            "allOf": [
              {
                "$ref": "#/$defs/Granularity"
              },
              {
                "description": "Sets the Amazon Web Services cost granularity to <code>MONTHLY</code> or <code>DAILY</code>, or <code>HOURLY</code>. If <code>Granularity</code> isn't set, the response object doesn't include the <code>Granularity</code>, either <code>MONTHLY</code> or <code>DAILY</code>, or <code>HOURLY</code>. "
              }
            ]
          },
          "Filter": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "<p>Filters Amazon Web Services costs by different dimensions. For example, you can specify <code>SERVICE</code> and <code>LINKED_ACCOUNT</code> and get the costs that are associated with that account's usage of that service. You can nest <code>Expression</code> objects to define any combination of dimension filters. For more information, see <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_Expression.html\">Expression</a>. </p> <p>Valid values for <code>MatchOptions</code> for <code>Dimensions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p> <p>Valid values for <code>MatchOptions</code> for <code>CostCategories</code> and <code>Tags</code> are <code>EQUALS</code>, <code>ABSENT</code>, and <code>CASE_SENSITIVE</code>. Default values are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>"
              }
            ]
          },
          "Metrics": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricNames"
              },
              {
                "description": "<p>Which metrics are returned in the query. For more information about blended and unblended rates, see <a href=\"http://aws.amazon.com/premiumsupport/knowledge-center/blended-rates-intro/\">Why does the \"blended\" annotation appear on some line items in my bill?</a>. </p> <p>Valid values are <code>AmortizedCost</code>, <code>BlendedCost</code>, <code>NetAmortizedCost</code>, <code>NetUnblendedCost</code>, <code>NormalizedUsageAmount</code>, <code>UnblendedCost</code>, and <code>UsageQuantity</code>. </p> <note> <p>If you return the <code>UsageQuantity</code> metric, the service aggregates all usage numbers without taking into account the units. For example, if you aggregate <code>usageQuantity</code> across all of Amazon EC2, the results aren't meaningful because Amazon EC2 compute hours and data transfer are measured in different units (for example, hours and GB). To get more meaningful <code>UsageQuantity</code> metrics, filter by <code>UsageType</code> or <code>UsageTypeGroups</code>. </p> </note> <p> <code>Metrics</code> is required for <code>GetCostAndUsage</code> requests.</p>"
              }
            ]
          },
          "GroupBy": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupDefinitions"
              },
              {
                "description": "<p>You can group Amazon Web Services costs using up to two different groups, either dimensions, tag keys, cost categories, or any two group by types.</p> <p>Valid values for the <code>DIMENSION</code> type are <code>AZ</code>, <code>INSTANCE_TYPE</code>, <code>LEGAL_ENTITY_NAME</code>, <code>INVOICING_ENTITY</code>, <code>LINKED_ACCOUNT</code>, <code>OPERATION</code>, <code>PLATFORM</code>, <code>PURCHASE_TYPE</code>, <code>SERVICE</code>, <code>TENANCY</code>, <code>RECORD_TYPE</code>, and <code>USAGE_TYPE</code>.</p> <p>When you group by the <code>TAG</code> type and include a valid tag key, you get all tag values, including empty strings.</p>"
              }
            ]
          },
          "NextPageToken": {
            "allOf": [
              {
                "$ref": "#/$defs/NextPageToken"
              },
              {
                "description": "The token to retrieve the next set of results. Amazon Web Services provides the token when the response from a previous call has more results than the maximum page size."
              }
            ]
          }
        }
      },
      "DateInterval": {
        "type": "object",
        "required": [
          "Start",
          "End"
        ],
        "properties": {
          "Start": {
            "allOf": [
              {
                "$ref": "#/$defs/YearMonthDay"
              },
              {
                "description": "The beginning of the time period. The start date is inclusive. For example, if <code>start</code> is <code>2017-01-01</code>, Amazon Web Services retrieves cost and usage data starting at <code>2017-01-01</code> up to the end date. The start date must be equal to or no later than the current date to avoid a validation error."
              }
            ]
          },
          "End": {
            "allOf": [
              {
                "$ref": "#/$defs/YearMonthDay"
              },
              {
                "description": "The end of the time period. The end date is exclusive. For example, if <code>end</code> is <code>2017-05-01</code>, Amazon Web Services retrieves cost and usage data from the start date up to, but not including, <code>2017-05-01</code>."
              }
            ]
          }
        },
        "description": "The time period of the request. "
      },
      "YearMonthDay": {
        "type": "string",
        "pattern": "(\\d{4}-\\d{2}-\\d{2})(T\\d{2}:\\d{2}:\\d{2}Z)?",
        "minLength": 0,
        "maxLength": 40
      },
      "Granularity": {
        "type": "string",
        "enum": [
          "DAILY",
          "MONTHLY",
          "HOURLY"
        ]
      },
      "Expression": {
        "type": "object",
        "properties": {
          "Or": {
            "allOf": [
              {
                "$ref": "#/$defs/Expressions"
              },
              {
                "description": "Return results that match either <code>Dimension</code> object."
              }
            ]
          },
          "And": {
            "allOf": [
              {
                "$ref": "#/$defs/Expressions"
              },
              {
                "description": "Return results that match both <code>Dimension</code> objects."
              }
            ]
          },
          "Not": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "Return results that don't match a <code>Dimension</code> object."
              }
            ]
          },
          "Dimensions": {
            "allOf": [
              {
                "$ref": "#/$defs/DimensionValues"
              },
              {
                "description": "The specific <code>Dimension</code> to use for <code>Expression</code>."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValues"
              },
              {
                "description": "The specific <code>Tag</code> to use for <code>Expression</code>."
              }
            ]
          },
          "CostCategories": {
            "allOf": [
              {
                "$ref": "#/$defs/CostCategoryValues"
              },
              {
                "description": "The filter that's based on <code>CostCategory</code> values."
              }
            ]
          }
        },
        "description": "<p>Use <code>Expression</code> to filter in various Cost Explorer APIs.</p> <p>Not all <code>Expression</code> types are supported in each API. Refer to the documentation for each specific API to see what is supported.</p> <p>There are two patterns:</p> <ul> <li> <p>Simple dimension values.</p> <ul> <li> <p>There are three types of simple dimension values: <code>CostCategories</code>, <code>Tags</code>, and <code>Dimensions</code>.</p> <ul> <li> <p>Specify the <code>CostCategories</code> field to define a filter that acts on Cost Categories.</p> </li> <li> <p>Specify the <code>Tags</code> field to define a filter that acts on Cost Allocation Tags.</p> </li> <li> <p>Specify the <code>Dimensions</code> field to define a filter that acts on the <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_DimensionValues.html\"> <code>DimensionValues</code> </a>.</p> </li> </ul> </li> <li> <p>For each filter type, you can set the dimension name and values for the filters that you plan to use.</p> <ul> <li> <p>For example, you can filter for <code>REGION==us-east-1 OR REGION==us-west-1</code>. For <code>GetRightsizingRecommendation</code>, the Region is a full name (for example, <code>REGION==US East (N. Virginia)</code>.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \"Dimensions\": { \"Key\": \"REGION\", \"Values\": [ \"us-east-1\", \"us-west-1\" ] } }</code> </p> </li> <li> <p>As shown in the previous example, lists of dimension values are combined with <code>OR</code> when applying the filter.</p> </li> </ul> </li> <li> <p>You can also set different match options to further control how the filter behaves. Not all APIs support match options. Refer to the documentation for each specific API to see what is supported.</p> <ul> <li> <p>For example, you can filter for linked account names that start with \"a\".</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \"Dimensions\": { \"Key\": \"LINKED_ACCOUNT_NAME\", \"MatchOptions\": [ \"STARTS_WITH\" ], \"Values\": [ \"a\" ] } }</code> </p> </li> </ul> </li> </ul> </li> <li> <p>Compound <code>Expression</code> types with logical operations.</p> <ul> <li> <p>You can use multiple <code>Expression</code> types and the logical operators <code>AND/OR/NOT</code> to create a list of one or more <code>Expression</code> objects. By doing this, you can filter by more advanced options.</p> </li> <li> <p>For example, you can filter by <code>((REGION == us-east-1 OR REGION == us-west-1) OR (TAG.Type == Type1)) AND (USAGE_TYPE != DataTransfer)</code>.</p> </li> <li> <p>The corresponding <code>Expression</code> for this example is as follows: <code>{ \"And\": [ {\"Or\": [ {\"Dimensions\": { \"Key\": \"REGION\", \"Values\": [ \"us-east-1\", \"us-west-1\" ] }}, {\"Tags\": { \"Key\": \"TagName\", \"Values\": [\"Value1\"] } } ]}, {\"Not\": {\"Dimensions\": { \"Key\": \"USAGE_TYPE\", \"Values\": [\"DataTransfer\"] }}} ] } </code> </p> </li> </ul> <note> <p>Because each <code>Expression</code> can have only one operator, the service returns an error if more than one is specified. The following example shows an <code>Expression</code> object that creates an error: <code> { \"And\": [ ... ], \"Dimensions\": { \"Key\": \"USAGE_TYPE\", \"Values\": [ \"DataTransfer\" ] } } </code> </p> <p>The following is an example of the corresponding error message: <code>\"Expression has more than one roots. Only one root operator is allowed for each expression: And, Or, Not, Dimensions, Tags, CostCategories\"</code> </p> </note> </li> </ul> <note> <p>For the <code>GetRightsizingRecommendation</code> action, a combination of OR and NOT isn't supported. OR isn't supported between different dimensions, or dimensions and tags. NOT operators aren't supported. Dimensions are also limited to <code>LINKED_ACCOUNT</code>, <code>REGION</code>, or <code>RIGHTSIZING_TYPE</code>.</p> <p>For the <code>GetReservationPurchaseRecommendation</code> action, only NOT is supported. AND and OR aren't supported. Dimensions are limited to <code>LINKED_ACCOUNT</code>.</p> </note>"
      },
      "Expressions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Expression"
        }
      },
      "DimensionValues": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/Dimension"
              },
              {
                "description": "<p>The names of the metadata types that you can use to filter and group your results. For example, <code>AZ</code> returns a list of Availability Zones.</p> <p>Not all dimensions are supported in each API. Refer to the documentation for each specific API to see what is supported.</p> <p> <code>LINK_ACCOUNT_NAME</code> and <code>SERVICE_CODE</code> can only be used in <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_CostCategoryRule.html\">CostCategoryRule</a>.</p> <p> <code>ANOMALY_TOTAL_IMPACT_ABSOLUTE</code> and <code>ANOMALY_TOTAL_IMPACT_PERCENTAGE</code> can only be used in <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_AnomalySubscription.html\">AnomalySubscriptions</a>.</p>"
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "The metadata values that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values."
              }
            ]
          },
          "MatchOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchOptions"
              },
              {
                "description": "<p>The match options that you can use to filter your results.</p> <p> <code>MatchOptions</code> is only applicable for actions related to Cost Category and Anomaly Subscriptions. Refer to the documentation for each specific API to see what is supported.</p> <p>The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>.</p>"
              }
            ]
          }
        },
        "description": "The metadata that you can use to filter and group your results. You can use <code>GetDimensionValues</code> to find specific values."
      },
      "Dimension": {
        "type": "string",
        "enum": [
          "AZ",
          "INSTANCE_TYPE",
          "LINKED_ACCOUNT",
          "LINKED_ACCOUNT_NAME",
          "OPERATION",
          "PURCHASE_TYPE",
          "REGION",
          "SERVICE",
          "SERVICE_CODE",
          "USAGE_TYPE",
          "USAGE_TYPE_GROUP",
          "RECORD_TYPE",
          "OPERATING_SYSTEM",
          "TENANCY",
          "SCOPE",
          "PLATFORM",
          "SUBSCRIPTION_ID",
          "LEGAL_ENTITY_NAME",
          "DEPLOYMENT_OPTION",
          "DATABASE_ENGINE",
          "CACHE_ENGINE",
          "INSTANCE_TYPE_FAMILY",
          "BILLING_ENTITY",
          "RESERVATION_ID",
          "RESOURCE_ID",
          "RIGHTSIZING_TYPE",
          "SAVINGS_PLANS_TYPE",
          "SAVINGS_PLAN_ARN",
          "PAYMENT_OPTION",
          "AGREEMENT_END_DATE_TIME_AFTER",
          "AGREEMENT_END_DATE_TIME_BEFORE",
          "INVOICING_ENTITY",
          "ANOMALY_TOTAL_IMPACT_ABSOLUTE",
          "ANOMALY_TOTAL_IMPACT_PERCENTAGE"
        ]
      },
      "Values": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Value"
        }
      },
      "Value": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "MatchOptions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MatchOption"
        }
      },
      "MatchOption": {
        "type": "string",
        "enum": [
          "EQUALS",
          "ABSENT",
          "STARTS_WITH",
          "ENDS_WITH",
          "CONTAINS",
          "CASE_SENSITIVE",
          "CASE_INSENSITIVE",
          "GREATER_THAN_OR_EQUAL"
        ]
      },
      "TagValues": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key for the tag."
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "The specific value of the tag."
              }
            ]
          },
          "MatchOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchOptions"
              },
              {
                "description": "The match options that you can use to filter your results. <code>MatchOptions</code> is only applicable for actions related to Cost Category. The default values for <code>MatchOptions</code> are <code>EQUALS</code> and <code>CASE_SENSITIVE</code>."
              }
            ]
          }
        },
        "description": "<p>The values that are available for a tag.</p> <p>If <code>Values</code> and <code>Key</code> aren't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to all tags. That is, it's filtered on resources with no tags.</p> <p>If <code>Key</code> is provided and <code>Values</code> isn't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to the tag <code>Key</code> only. That is, it's filtered on resources without the given tag key.</p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "CostCategoryValues": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/$defs/CostCategoryName"
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/Values"
              },
              {
                "description": "The specific value of the Cost Category."
              }
            ]
          },
          "MatchOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchOptions"
              },
              {
                "description": "The match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for <code>MatchOptions</code> is <code>EQUALS</code> and <code>CASE_SENSITIVE</code>. "
              }
            ]
          }
        },
        "description": "<p>The Cost Categories values used for filtering the costs.</p> <p>If <code>Values</code> and <code>Key</code> are not specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to all Cost Categories. That is, it filters on resources that aren't mapped to any Cost Categories.</p> <p>If <code>Values</code> is provided and <code>Key</code> isn't specified, the <code>ABSENT</code> <code>MatchOption</code> is applied to the Cost Categories <code>Key</code> only. That is, it filters on resources without the given Cost Categories key.</p>"
      },
      "CostCategoryName": {
        "type": "string",
        "description": "The unique name of the Cost Category.",
        "minLength": 1,
        "maxLength": 50,
        "x-pattern": "^\\(\\?! \\)[\\p\\{L\\}\\p\\{N\\}\\p\\{Z\\}-_]*$"
      },
      "MetricNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MetricName"
        }
      },
      "MetricName": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "GroupDefinitions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GroupDefinition"
        }
      },
      "GroupDefinition": {
        "type": "object",
        "properties": {
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupDefinitionType"
              },
              {
                "description": "The string that represents the type of group."
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupDefinitionKey"
              },
              {
                "description": "The string that represents a key for a specified group."
              }
            ]
          }
        },
        "description": "Represents a group when you specify a group by criteria or in the response to a query with a specific grouping."
      },
      "GroupDefinitionType": {
        "type": "string",
        "enum": [
          "DIMENSION",
          "TAG",
          "COST_CATEGORY"
        ]
      },
      "GroupDefinitionKey": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 1024
      },
      "NextPageToken": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 8192
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ce.us-east-1.amazonaws.com/#X-Amz-Target=AWSInsightsIndexService.GetCostAndUsage"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**NextPageToken**",
            "**GroupDefinitions**",
            "**ResultsByTime**",
            "**DimensionValueAttributes**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
