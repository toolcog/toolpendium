{
  "name": "SearchTables",
  "description": "<p>Searches a set of tables based on properties in the table metadata as well as on the parent database. You can search against text or filter conditions. </p> <p>You can only get tables that you have access to based on the security policies defined in Lake Formation. You need at least a read-only access to the table for it to be returned. If you do not have access to all the columns in the table, these columns will not be searched against when returning the list of tables back to you. If you have access to the columns but not the data in the columns, those columns and the associated metadata for those columns will be included in the search. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "MaxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "NextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.SearchTables"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/SearchTablesRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "SearchTablesRequest": {
        "type": "object",
        "title": "SearchTablesRequest",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "A unique identifier, consisting of <code> <i>account_id</i> </code>."
              }
            ]
          },
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/Token"
              },
              {
                "description": "A continuation token, included if this is a continuation call."
              }
            ]
          },
          "Filters": {
            "allOf": [
              {
                "$ref": "#/$defs/SearchPropertyPredicates"
              },
              {
                "description": "<p>A list of key-value pairs, and a comparator used to filter the search results. Returns all entities matching the predicate.</p> <p>The <code>Comparator</code> member of the <code>PropertyPredicate</code> struct is used only for time fields, and can be omitted for other field types. Also, when comparing string values, such as when <code>Key=Name</code>, a fuzzy match algorithm is used. The <code>Key</code> field (for example, the value of the <code>Name</code> field) is split on certain punctuation characters, for example, -, :, #, etc. into tokens. Then each token is exact-match compared with the <code>Value</code> member of <code>PropertyPredicate</code>. For example, if <code>Key=Name</code> and <code>Value=link</code>, tables named <code>customer-link</code> and <code>xx-link-yy</code> are returned, but <code>xxlinkyy</code> is not returned.</p>"
              }
            ]
          },
          "SearchText": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueString"
              },
              {
                "description": "<p>A string used for a text search.</p> <p>Specifying a value in quotes filters based on an exact match to the value.</p>"
              }
            ]
          },
          "SortCriteria": {
            "allOf": [
              {
                "$ref": "#/$defs/SortCriteria"
              },
              {
                "description": "A list of criteria for sorting the results by a field name, in an ascending or descending order."
              }
            ]
          },
          "MaxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/PageSize"
              },
              {
                "description": "The maximum number of tables to return in a single response."
              }
            ]
          },
          "ResourceShareType": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceShareType"
              },
              {
                "description": "<p>Allows you to specify that you want to search the tables shared with your account. The allowable values are <code>FOREIGN</code> or <code>ALL</code>. </p> <ul> <li> <p>If set to <code>FOREIGN</code>, will search the tables shared with your account. </p> </li> <li> <p>If set to <code>ALL</code>, will search the tables shared with your account, as well as the tables in yor local account. </p> </li> </ul>"
              }
            ]
          }
        }
      },
      "CatalogIdString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "Token": {
        "type": "string"
      },
      "SearchPropertyPredicates": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PropertyPredicate"
        }
      },
      "PropertyPredicate": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueString"
              },
              {
                "description": "The key of the property."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueString"
              },
              {
                "description": "The value of the property."
              }
            ]
          },
          "Comparator": {
            "allOf": [
              {
                "$ref": "#/$defs/Comparator"
              },
              {
                "description": "The comparator used to compare this property to others."
              }
            ]
          }
        },
        "description": "Defines a property predicate."
      },
      "ValueString": {
        "type": "string",
        "maxLength": 1024
      },
      "Comparator": {
        "type": "string",
        "enum": [
          "EQUALS",
          "GREATER_THAN",
          "LESS_THAN",
          "GREATER_THAN_EQUALS",
          "LESS_THAN_EQUALS"
        ]
      },
      "SortCriteria": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SortCriterion"
        },
        "minItems": 0,
        "maxItems": 1
      },
      "SortCriterion": {
        "type": "object",
        "properties": {
          "FieldName": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueString"
              },
              {
                "description": "The name of the field on which to sort."
              }
            ]
          },
          "Sort": {
            "allOf": [
              {
                "$ref": "#/$defs/Sort"
              },
              {
                "description": "An ascending or descending sort."
              }
            ]
          }
        },
        "description": "Specifies a field to sort by and a sort order."
      },
      "Sort": {
        "type": "string",
        "enum": [
          "ASC",
          "DESC"
        ]
      },
      "PageSize": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1000
      },
      "ResourceShareType": {
        "type": "string",
        "enum": [
          "FOREIGN",
          "ALL",
          "FEDERATED"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.SearchTables{?MaxResults,NextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**NextToken**",
            "**TableList**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
