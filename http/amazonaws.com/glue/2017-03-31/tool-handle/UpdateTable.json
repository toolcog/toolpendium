{
  "name": "UpdateTable",
  "description": "Updates a metadata table in the Data Catalog.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.UpdateTable"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateTableRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateTableRequest": {
        "type": "object",
        "required": [
          "DatabaseName",
          "TableInput"
        ],
        "title": "UpdateTableRequest",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "The ID of the Data Catalog where the table resides. If none is provided, the Amazon Web Services account ID is used by default."
              }
            ]
          },
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase."
              }
            ]
          },
          "TableInput": {
            "allOf": [
              {
                "$ref": "#/$defs/TableInput"
              },
              {
                "description": "An updated <code>TableInput</code> object to define the metadata table in the catalog."
              }
            ]
          },
          "SkipArchive": {
            "allOf": [
              {
                "$ref": "#/$defs/BooleanNullable"
              },
              {
                "description": "By default, <code>UpdateTable</code> always creates an archived version of the table before updating it. However, if <code>skipArchive</code> is set to true, <code>UpdateTable</code> does not create the archived version."
              }
            ]
          },
          "TransactionId": {
            "allOf": [
              {
                "$ref": "#/$defs/TransactionIdString"
              },
              {
                "description": "The transaction ID at which to update the table contents. "
              }
            ]
          },
          "VersionId": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionString"
              },
              {
                "description": "The version ID at which to update the table contents. "
              }
            ]
          }
        }
      },
      "CatalogIdString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "TableInput": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The table name. For Hive compatibility, this is folded to lowercase when it is stored."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/DescriptionString"
              },
              {
                "description": "A description of the table."
              }
            ]
          },
          "Owner": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The table owner. Included for Apache Hive compatibility. Not used in the normal course of Glue operations."
              }
            ]
          },
          "LastAccessTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The last time that the table was accessed."
              }
            ]
          },
          "LastAnalyzedTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The last time that column statistics were computed for this table."
              }
            ]
          },
          "Retention": {
            "allOf": [
              {
                "$ref": "#/$defs/NonNegativeInteger"
              },
              {
                "description": "The retention time for this table."
              }
            ]
          },
          "StorageDescriptor": {
            "allOf": [
              {
                "$ref": "#/$defs/StorageDescriptor"
              },
              {
                "description": "A storage descriptor containing information about the physical storage of this table."
              }
            ]
          },
          "PartitionKeys": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnList"
              },
              {
                "description": "<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p> <p>When you create a table used by Amazon Athena, and you do not specify any <code>partitionKeys</code>, you must at least set the value of <code>partitionKeys</code> to an empty list. For example:</p> <p> <code>\"PartitionKeys\": []</code> </p>"
              }
            ]
          },
          "ViewOriginalText": {
            "allOf": [
              {
                "$ref": "#/$defs/ViewTextString"
              },
              {
                "description": "Included for Apache Hive compatibility. Not used in the normal course of Glue operations. If the table is a <code>VIRTUAL_VIEW</code>, certain Athena configuration encoded in base64."
              }
            ]
          },
          "ViewExpandedText": {
            "allOf": [
              {
                "$ref": "#/$defs/ViewTextString"
              },
              {
                "description": "Included for Apache Hive compatibility. Not used in the normal course of Glue operations."
              }
            ]
          },
          "TableType": {
            "allOf": [
              {
                "$ref": "#/$defs/TableTypeString"
              },
              {
                "description": "<p>The type of this table. Glue will create tables with the <code>EXTERNAL_TABLE</code> type. Other services, such as Athena, may create tables with additional table types. </p> <p>Glue related table types:</p> <dl> <dt>EXTERNAL_TABLE</dt> <dd> <p>Hive compatible attribute - indicates a non-Hive managed table.</p> </dd> <dt>GOVERNED</dt> <dd> <p>Used by Lake Formation. The Glue Data Catalog understands <code>GOVERNED</code>.</p> </dd> </dl>"
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "These key-value pairs define properties associated with the table."
              }
            ]
          },
          "TargetTable": {
            "allOf": [
              {
                "$ref": "#/$defs/TableIdentifier"
              },
              {
                "description": "A <code>TableIdentifier</code> structure that describes a target table for resource linking."
              }
            ]
          }
        },
        "description": "A structure used to define a table."
      },
      "DescriptionString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "NonNegativeInteger": {
        "type": "integer",
        "minimum": 0
      },
      "StorageDescriptor": {
        "type": "object",
        "properties": {
          "Columns": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnList"
              },
              {
                "description": "A list of the <code>Columns</code> in the table."
              }
            ]
          },
          "Location": {
            "allOf": [
              {
                "$ref": "#/$defs/LocationString"
              },
              {
                "description": "The physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name."
              }
            ]
          },
          "AdditionalLocations": {
            "allOf": [
              {
                "$ref": "#/$defs/LocationStringList"
              },
              {
                "description": "A list of locations that point to the path where a Delta table is located."
              }
            ]
          },
          "InputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/FormatString"
              },
              {
                "description": "The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format."
              }
            ]
          },
          "OutputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/FormatString"
              },
              {
                "description": "The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format."
              }
            ]
          },
          "Compressed": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>True</code> if the data in the table is compressed, or <code>False</code> if not."
              }
            ]
          },
          "NumberOfBuckets": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Must be specified if the table contains any dimension columns."
              }
            ]
          },
          "SerdeInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/SerDeInfo"
              },
              {
                "description": "The serialization/deserialization (SerDe) information."
              }
            ]
          },
          "BucketColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/NameStringList"
              },
              {
                "description": "A list of reducer grouping columns, clustering columns, and bucketing columns in the table."
              }
            ]
          },
          "SortColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/OrderList"
              },
              {
                "description": "A list specifying the sort order of each bucket in the table."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "The user-supplied properties in key-value form."
              }
            ]
          },
          "SkewedInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/SkewedInfo"
              },
              {
                "description": "The information about values that appear frequently in a column (skewed values)."
              }
            ]
          },
          "StoredAsSubDirectories": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>True</code> if the table data is stored in subdirectories, or <code>False</code> if not."
              }
            ]
          },
          "SchemaReference": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaReference"
              },
              {
                "description": "<p>An object that references a schema stored in the Glue Schema Registry.</p> <p>When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.</p>"
              }
            ]
          }
        },
        "description": "Describes the physical storage of table data."
      },
      "ColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Column"
        }
      },
      "Column": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the <code>Column</code>."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnTypeString"
              },
              {
                "description": "The data type of the <code>Column</code>."
              }
            ]
          },
          "Comment": {
            "allOf": [
              {
                "$ref": "#/$defs/CommentString"
              },
              {
                "description": "A free-form text comment."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "These key-value pairs define properties associated with the column."
              }
            ]
          }
        },
        "description": "A column in a <code>Table</code>."
      },
      "ColumnTypeString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 131072,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "CommentString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "ParametersMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ParametersMapValue"
        }
      },
      "ParametersMapValue": {
        "type": "string",
        "maxLength": 512000
      },
      "LocationString": {
        "type": "string",
        "maxLength": 2056,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "LocationStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LocationString"
        }
      },
      "FormatString": {
        "type": "string",
        "maxLength": 128,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "Boolean": {
        "type": "boolean"
      },
      "Integer": {
        "type": "integer"
      },
      "SerDeInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Name of the SerDe."
              }
            ]
          },
          "SerializationLibrary": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "These key-value pairs define initialization parameters for the SerDe."
              }
            ]
          }
        },
        "description": "Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader."
      },
      "NameStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NameString"
        }
      },
      "OrderList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Order"
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "Column",
          "SortOrder"
        ],
        "properties": {
          "Column": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the column."
              }
            ]
          },
          "SortOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerFlag"
              },
              {
                "description": "Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>)."
              }
            ]
          }
        },
        "description": "Specifies the sort order of a sorted column."
      },
      "IntegerFlag": {
        "type": "integer",
        "minimum": 0,
        "maximum": 1
      },
      "SkewedInfo": {
        "type": "object",
        "properties": {
          "SkewedColumnNames": {
            "allOf": [
              {
                "$ref": "#/$defs/NameStringList"
              },
              {
                "description": "A list of names of columns that contain skewed values."
              }
            ]
          },
          "SkewedColumnValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnValueStringList"
              },
              {
                "description": "A list of values that appear so frequently as to be considered skewed."
              }
            ]
          },
          "SkewedColumnValueLocationMaps": {
            "allOf": [
              {
                "$ref": "#/$defs/LocationMap"
              },
              {
                "description": "A mapping of skewed values to the columns that contain them."
              }
            ]
          }
        },
        "description": "Specifies skewed values in a table. Skewed values are those that occur with very high frequency."
      },
      "ColumnValueStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ColumnValuesString"
        }
      },
      "ColumnValuesString": {
        "type": "string"
      },
      "LocationMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ColumnValuesString"
        }
      },
      "SchemaReference": {
        "type": "object",
        "properties": {
          "SchemaId": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaId"
              },
              {
                "description": "A structure that contains schema identity fields. Either this or the <code>SchemaVersionId</code> has to be provided."
              }
            ]
          },
          "SchemaVersionId": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaVersionIdString"
              },
              {
                "description": "The unique ID assigned to a version of the schema. Either this or the <code>SchemaId</code> has to be provided."
              }
            ]
          },
          "SchemaVersionNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionLongNumber"
              },
              {
                "description": "The version number of the schema."
              }
            ]
          }
        },
        "description": "An object that references a schema stored in the Glue Schema Registry."
      },
      "SchemaId": {
        "type": "object",
        "properties": {
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/GlueResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaRegistryNameString"
              },
              {
                "description": "The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided."
              }
            ]
          },
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaRegistryNameString"
              },
              {
                "description": "The name of the schema registry that contains the schema."
              }
            ]
          }
        },
        "description": "The unique ID of the schema in the Glue schema registry."
      },
      "GlueResourceArn": {
        "type": "string",
        "pattern": "arn:(aws|aws-us-gov|aws-cn):glue:.*",
        "minLength": 1,
        "maxLength": 10240
      },
      "SchemaRegistryNameString": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-_$#.]+",
        "minLength": 1,
        "maxLength": 255
      },
      "SchemaVersionIdString": {
        "type": "string",
        "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
        "minLength": 36,
        "maxLength": 36
      },
      "VersionLongNumber": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100000
      },
      "ViewTextString": {
        "type": "string",
        "maxLength": 409600
      },
      "TableTypeString": {
        "type": "string",
        "maxLength": 255
      },
      "TableIdentifier": {
        "type": "object",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "The ID of the Data Catalog in which the table resides."
              }
            ]
          },
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the catalog database that contains the target table."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the target table."
              }
            ]
          },
          "Region": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Region of the target table."
              }
            ]
          }
        },
        "description": "A structure that describes a target table for resource linking."
      },
      "BooleanNullable": {
        "type": "boolean"
      },
      "TransactionIdString": {
        "type": "string",
        "pattern": "[\\p{L}\\p{N}\\p{P}]*",
        "minLength": 1,
        "maxLength": 255
      },
      "VersionString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.UpdateTable"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
