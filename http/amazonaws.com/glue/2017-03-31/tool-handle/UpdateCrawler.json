{
  "name": "UpdateCrawler",
  "description": "Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.UpdateCrawler"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateCrawlerRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateCrawlerRequest": {
        "type": "object",
        "required": [
          "Name"
        ],
        "title": "UpdateCrawlerRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Name of the new crawler."
              }
            ]
          },
          "Role": {
            "allOf": [
              {
                "$ref": "#/$defs/Role"
              },
              {
                "description": "The IAM role or Amazon Resource Name (ARN) of an IAM role that is used by the new crawler to access customer resources."
              }
            ]
          },
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/DatabaseName"
              },
              {
                "description": "The Glue database where results are stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/DescriptionStringRemovable"
              },
              {
                "description": "A description of the new crawler."
              }
            ]
          },
          "Targets": {
            "allOf": [
              {
                "$ref": "#/$defs/CrawlerTargets"
              },
              {
                "description": "A list of targets to crawl."
              }
            ]
          },
          "Schedule": {
            "allOf": [
              {
                "$ref": "#/$defs/CronExpression"
              },
              {
                "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
              }
            ]
          },
          "Classifiers": {
            "allOf": [
              {
                "$ref": "#/$defs/ClassifierNameList"
              },
              {
                "description": "A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification."
              }
            ]
          },
          "TablePrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/TablePrefix"
              },
              {
                "description": "The table prefix used for catalog tables that are created."
              }
            ]
          },
          "SchemaChangePolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaChangePolicy"
              },
              {
                "description": "The policy for the crawler's update and deletion behavior."
              }
            ]
          },
          "RecrawlPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/RecrawlPolicy"
              },
              {
                "description": "A policy that specifies whether to crawl the entire dataset again, or to crawl only folders that were added since the last crawler run."
              }
            ]
          },
          "LineageConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/LineageConfiguration"
              },
              {
                "description": "Specifies data lineage configuration settings for the crawler."
              }
            ]
          },
          "LakeFormationConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/LakeFormationConfiguration"
              },
              {
                "description": "Specifies Lake Formation configuration settings for the crawler."
              }
            ]
          },
          "Configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/CrawlerConfiguration"
              },
              {
                "description": "Crawler configuration information. This versioned JSON string allows users to specify aspects of a crawler's behavior. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/crawler-configuration.html\">Setting crawler configuration options</a>."
              }
            ]
          },
          "CrawlerSecurityConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/CrawlerSecurityConfiguration"
              },
              {
                "description": "The name of the <code>SecurityConfiguration</code> structure to be used by this crawler."
              }
            ]
          }
        }
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "Role": {
        "type": "string"
      },
      "DatabaseName": {
        "type": "string"
      },
      "DescriptionStringRemovable": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "CrawlerTargets": {
        "type": "object",
        "properties": {
          "S3Targets": {
            "allOf": [
              {
                "$ref": "#/$defs/S3TargetList"
              },
              {
                "description": "Specifies Amazon Simple Storage Service (Amazon S3) targets."
              }
            ]
          },
          "JdbcTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/JdbcTargetList"
              },
              {
                "description": "Specifies JDBC targets."
              }
            ]
          },
          "MongoDBTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/MongoDBTargetList"
              },
              {
                "description": "Specifies Amazon DocumentDB or MongoDB targets."
              }
            ]
          },
          "DynamoDBTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/DynamoDBTargetList"
              },
              {
                "description": "Specifies Amazon DynamoDB targets."
              }
            ]
          },
          "CatalogTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogTargetList"
              },
              {
                "description": "Specifies Glue Data Catalog targets."
              }
            ]
          },
          "DeltaTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/DeltaTargetList"
              },
              {
                "description": "Specifies Delta data store targets."
              }
            ]
          },
          "IcebergTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/IcebergTargetList"
              },
              {
                "description": "Specifies Apache Iceberg data store targets."
              }
            ]
          },
          "HudiTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/HudiTargetList"
              },
              {
                "description": "Specifies Apache Hudi data store targets."
              }
            ]
          }
        },
        "description": "Specifies data stores to crawl."
      },
      "S3TargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/S3Target"
        }
      },
      "S3Target": {
        "type": "object",
        "properties": {
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The path to the Amazon S3 target."
              }
            ]
          },
          "Exclusions": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>."
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of a connection which allows a job or crawler to access data in Amazon S3 within an Amazon Virtual Private Cloud environment (Amazon VPC)."
              }
            ]
          },
          "SampleSize": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableInteger"
              },
              {
                "description": "Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249."
              }
            ]
          },
          "EventQueueArn": {
            "allOf": [
              {
                "$ref": "#/$defs/EventQueueArn"
              },
              {
                "description": "A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>."
              }
            ]
          },
          "DlqEventQueueArn": {
            "allOf": [
              {
                "$ref": "#/$defs/EventQueueArn"
              },
              {
                "description": "A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>."
              }
            ]
          }
        },
        "description": "Specifies a data store in Amazon Simple Storage Service (Amazon S3)."
      },
      "Path": {
        "type": "string"
      },
      "PathList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Path"
        }
      },
      "ConnectionName": {
        "type": "string"
      },
      "NullableInteger": {
        "type": "integer"
      },
      "EventQueueArn": {
        "type": "string"
      },
      "JdbcTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/JdbcTarget"
        }
      },
      "JdbcTarget": {
        "type": "object",
        "properties": {
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of the connection to use to connect to the JDBC target."
              }
            ]
          },
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The path of the JDBC target."
              }
            ]
          },
          "Exclusions": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>."
              }
            ]
          },
          "EnableAdditionalMetadata": {
            "allOf": [
              {
                "$ref": "#/$defs/EnableAdditionalMetadata"
              },
              {
                "description": "<p>Specify a value of <code>RAWTYPES</code> or <code>COMMENTS</code> to enable additional metadata in table responses. <code>RAWTYPES</code> provides the native-level datatype. <code>COMMENTS</code> provides comments associated with a column or table in the database.</p> <p>If you do not need additional metadata, keep the field empty.</p>"
              }
            ]
          }
        },
        "description": "Specifies a JDBC data store to crawl."
      },
      "EnableAdditionalMetadata": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/JdbcMetadataEntry"
        }
      },
      "JdbcMetadataEntry": {
        "type": "string",
        "enum": [
          "COMMENTS",
          "RAWTYPES"
        ]
      },
      "MongoDBTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/MongoDBTarget"
        }
      },
      "MongoDBTarget": {
        "type": "object",
        "properties": {
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target."
              }
            ]
          },
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The path of the Amazon DocumentDB or MongoDB target (database/collection)."
              }
            ]
          },
          "ScanAll": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p> <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>"
              }
            ]
          }
        },
        "description": "Specifies an Amazon DocumentDB or MongoDB data store to crawl."
      },
      "NullableBoolean": {
        "type": "boolean"
      },
      "DynamoDBTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DynamoDBTarget"
        }
      },
      "DynamoDBTarget": {
        "type": "object",
        "properties": {
          "Path": {
            "allOf": [
              {
                "$ref": "#/$defs/Path"
              },
              {
                "description": "The name of the DynamoDB table to crawl."
              }
            ]
          },
          "scanAll": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.</p> <p>A value of <code>true</code> means to scan all records, while a value of <code>false</code> means to sample the records. If no value is specified, the value defaults to <code>true</code>.</p>"
              }
            ]
          },
          "scanRate": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableDouble"
              },
              {
                "description": "<p>The percentage of the configured read capacity units to use by the Glue crawler. Read capacity units is a term defined by DynamoDB, and is a numeric value that acts as rate limiter for the number of reads that can be performed on that table per second.</p> <p>The valid values are null or a value between 0.1 to 1.5. A null value is used when user does not provide a value, and defaults to 0.5 of the configured Read Capacity Unit (for provisioned tables), or 0.25 of the max configured Read Capacity Unit (for tables using on-demand mode).</p>"
              }
            ]
          }
        },
        "description": "Specifies an Amazon DynamoDB table to crawl."
      },
      "NullableDouble": {
        "type": "number",
        "format": "double"
      },
      "CatalogTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CatalogTarget"
        }
      },
      "CatalogTarget": {
        "type": "object",
        "required": [
          "DatabaseName",
          "Tables"
        ],
        "properties": {
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the database to be synchronized."
              }
            ]
          },
          "Tables": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogTablesList"
              },
              {
                "description": "A list of the tables to be synchronized."
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a <code>Catalog</code> connection type paired with a <code>NETWORK</code> Connection type."
              }
            ]
          },
          "EventQueueArn": {
            "allOf": [
              {
                "$ref": "#/$defs/EventQueueArn"
              },
              {
                "description": "A valid Amazon SQS ARN. For example, <code>arn:aws:sqs:region:account:sqs</code>."
              }
            ]
          },
          "DlqEventQueueArn": {
            "allOf": [
              {
                "$ref": "#/$defs/EventQueueArn"
              },
              {
                "description": "A valid Amazon dead-letter SQS ARN. For example, <code>arn:aws:sqs:region:account:deadLetterQueue</code>."
              }
            ]
          }
        },
        "description": "Specifies an Glue Data Catalog target."
      },
      "CatalogTablesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NameString"
        },
        "minItems": 1
      },
      "DeltaTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DeltaTarget"
        }
      },
      "DeltaTarget": {
        "type": "object",
        "properties": {
          "DeltaTables": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "A list of the Amazon S3 paths to the Delta tables."
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of the connection to use to connect to the Delta table target."
              }
            ]
          },
          "WriteManifest": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "Specifies whether to write the manifest files to the Delta table path."
              }
            ]
          },
          "CreateNativeDeltaTable": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly."
              }
            ]
          }
        },
        "description": "Specifies a Delta data store to crawl one or more Delta tables."
      },
      "IcebergTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/IcebergTarget"
        }
      },
      "IcebergTarget": {
        "type": "object",
        "properties": {
          "Paths": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "One or more Amazon S3 paths that contains Iceberg metadata folders as <code>s3://bucket/prefix</code>."
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of the connection to use to connect to the Iceberg target."
              }
            ]
          },
          "Exclusions": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>."
              }
            ]
          },
          "MaximumTraversalDepth": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableInteger"
              },
              {
                "description": "The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time."
              }
            ]
          }
        },
        "description": "Specifies an Apache Iceberg data source where Iceberg tables are stored in Amazon S3."
      },
      "HudiTargetList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/HudiTarget"
        }
      },
      "HudiTarget": {
        "type": "object",
        "properties": {
          "Paths": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "<p>An array of Amazon S3 location strings for Hudi, each indicating the root folder with which the metadata files for a Hudi table resides. The Hudi folder may be located in a child folder of the root folder.</p> <p>The crawler will scan all folders underneath a path for a Hudi folder.</p>"
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/ConnectionName"
              },
              {
                "description": "The name of the connection to use to connect to the Hudi target. If your Hudi files are stored in buckets that require VPC authorization, you can set their connection properties here."
              }
            ]
          },
          "Exclusions": {
            "allOf": [
              {
                "$ref": "#/$defs/PathList"
              },
              {
                "description": "A list of glob patterns used to exclude from the crawl. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-crawler.html\">Catalog Tables with a Crawler</a>."
              }
            ]
          },
          "MaximumTraversalDepth": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableInteger"
              },
              {
                "description": "The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Hudi metadata folder in your Amazon S3 path. Used to limit the crawler run time."
              }
            ]
          }
        },
        "description": "Specifies an Apache Hudi data source."
      },
      "CronExpression": {
        "type": "string"
      },
      "ClassifierNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NameString"
        }
      },
      "TablePrefix": {
        "type": "string",
        "minLength": 0,
        "maxLength": 128
      },
      "SchemaChangePolicy": {
        "type": "object",
        "properties": {
          "UpdateBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/UpdateBehavior"
              },
              {
                "description": "The update behavior when the crawler finds a changed schema."
              }
            ]
          },
          "DeleteBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/DeleteBehavior"
              },
              {
                "description": "The deletion behavior when the crawler finds a deleted object."
              }
            ]
          }
        },
        "description": "A policy that specifies update and deletion behaviors for the crawler."
      },
      "UpdateBehavior": {
        "type": "string",
        "enum": [
          "LOG",
          "UPDATE_IN_DATABASE"
        ]
      },
      "DeleteBehavior": {
        "type": "string",
        "enum": [
          "LOG",
          "DELETE_FROM_DATABASE",
          "DEPRECATE_IN_DATABASE"
        ]
      },
      "RecrawlPolicy": {
        "type": "object",
        "properties": {
          "RecrawlBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/RecrawlBehavior"
              },
              {
                "description": "<p>Specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run.</p> <p>A value of <code>CRAWL_EVERYTHING</code> specifies crawling the entire dataset again.</p> <p>A value of <code>CRAWL_NEW_FOLDERS_ONLY</code> specifies crawling only folders that were added since the last crawler run.</p> <p>A value of <code>CRAWL_EVENT_MODE</code> specifies crawling only the changes identified by Amazon S3 events.</p>"
              }
            ]
          }
        },
        "description": "When crawling an Amazon S3 data source after the first crawl is complete, specifies whether to crawl the entire dataset again or to crawl only folders that were added since the last crawler run. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/incremental-crawls.html\">Incremental Crawls in Glue</a> in the developer guide."
      },
      "RecrawlBehavior": {
        "type": "string",
        "enum": [
          "CRAWL_EVERYTHING",
          "CRAWL_NEW_FOLDERS_ONLY",
          "CRAWL_EVENT_MODE"
        ]
      },
      "LineageConfiguration": {
        "type": "object",
        "properties": {
          "CrawlerLineageSettings": {
            "allOf": [
              {
                "$ref": "#/$defs/CrawlerLineageSettings"
              },
              {
                "description": "<p>Specifies whether data lineage is enabled for the crawler. Valid values are:</p> <ul> <li> <p>ENABLE: enables data lineage for the crawler</p> </li> <li> <p>DISABLE: disables data lineage for the crawler</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Specifies data lineage configuration settings for the crawler."
      },
      "CrawlerLineageSettings": {
        "type": "string",
        "enum": [
          "ENABLE",
          "DISABLE"
        ]
      },
      "LakeFormationConfiguration": {
        "type": "object",
        "properties": {
          "UseLakeFormationCredentials": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials."
              }
            ]
          },
          "AccountId": {
            "allOf": [
              {
                "$ref": "#/$defs/AccountId"
              },
              {
                "description": "Required for cross account crawls. For same account crawls as the target data, this can be left as null."
              }
            ]
          }
        },
        "description": "Specifies Lake Formation configuration settings for the crawler."
      },
      "AccountId": {
        "type": "string",
        "minLength": 0,
        "maxLength": 12
      },
      "CrawlerConfiguration": {
        "type": "string"
      },
      "CrawlerSecurityConfiguration": {
        "type": "string",
        "minLength": 0,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.UpdateCrawler"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
