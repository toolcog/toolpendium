{
  "name": "UpdateDatabase",
  "description": "Updates an existing database definition in a Data Catalog.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.UpdateDatabase"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateDatabaseRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateDatabaseRequest": {
        "type": "object",
        "required": [
          "Name",
          "DatabaseInput"
        ],
        "title": "UpdateDatabaseRequest",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "The ID of the Data Catalog in which the metadata database resides. If none is provided, the Amazon Web Services account ID is used by default."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase."
              }
            ]
          },
          "DatabaseInput": {
            "allOf": [
              {
                "$ref": "#/$defs/DatabaseInput"
              },
              {
                "description": "A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog."
              }
            ]
          }
        }
      },
      "CatalogIdString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "DatabaseInput": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the database. For Hive compatibility, this is folded to lowercase when it is stored."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/DescriptionString"
              },
              {
                "description": "A description of the database."
              }
            ]
          },
          "LocationUri": {
            "allOf": [
              {
                "$ref": "#/$defs/URI"
              },
              {
                "description": "The location of the database (for example, an HDFS path). "
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "<p>These key-value pairs define parameters and properties of the database.</p> <p>These key-value pairs define parameters and properties of the database.</p>"
              }
            ]
          },
          "CreateTableDefaultPermissions": {
            "allOf": [
              {
                "$ref": "#/$defs/PrincipalPermissionsList"
              },
              {
                "description": "Creates a set of default permissions on the table for principals. Used by Lake Formation. Not used in the normal course of Glue operations."
              }
            ]
          },
          "TargetDatabase": {
            "allOf": [
              {
                "$ref": "#/$defs/DatabaseIdentifier"
              },
              {
                "description": "A <code>DatabaseIdentifier</code> structure that describes a target database for resource linking."
              }
            ]
          },
          "FederatedDatabase": {
            "allOf": [
              {
                "$ref": "#/$defs/FederatedDatabase"
              },
              {
                "description": "A <code>FederatedDatabase</code> structure that references an entity outside the Glue Data Catalog."
              }
            ]
          }
        },
        "description": "The structure used to create or update a database."
      },
      "DescriptionString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "URI": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "ParametersMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ParametersMapValue"
        }
      },
      "ParametersMapValue": {
        "type": "string",
        "maxLength": 512000
      },
      "PrincipalPermissionsList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PrincipalPermissions"
        }
      },
      "PrincipalPermissions": {
        "type": "object",
        "properties": {
          "Principal": {
            "allOf": [
              {
                "$ref": "#/$defs/DataLakePrincipal"
              },
              {
                "description": "The principal who is granted permissions."
              }
            ]
          },
          "Permissions": {
            "allOf": [
              {
                "$ref": "#/$defs/PermissionList"
              },
              {
                "description": "The permissions that are granted to the principal."
              }
            ]
          }
        },
        "description": "Permissions granted to a principal."
      },
      "DataLakePrincipal": {
        "type": "object",
        "properties": {
          "DataLakePrincipalIdentifier": {
            "allOf": [
              {
                "$ref": "#/$defs/DataLakePrincipalString"
              },
              {
                "description": "An identifier for the Lake Formation principal."
              }
            ]
          }
        },
        "description": "The Lake Formation principal."
      },
      "DataLakePrincipalString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "PermissionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Permission"
        }
      },
      "Permission": {
        "type": "string",
        "enum": [
          "ALL",
          "SELECT",
          "ALTER",
          "DROP",
          "DELETE",
          "INSERT",
          "CREATE_DATABASE",
          "CREATE_TABLE",
          "DATA_LOCATION_ACCESS"
        ]
      },
      "DatabaseIdentifier": {
        "type": "object",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "The ID of the Data Catalog in which the database resides."
              }
            ]
          },
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the catalog database."
              }
            ]
          },
          "Region": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Region of the target database."
              }
            ]
          }
        },
        "description": "A structure that describes a target database for resource linking."
      },
      "FederatedDatabase": {
        "type": "object",
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FederationIdentifier"
              },
              {
                "description": "A unique identifier for the federated database."
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the connection to the external metastore."
              }
            ]
          }
        },
        "description": "A database that points to an entity outside the Glue Data Catalog."
      },
      "FederationIdentifier": {
        "type": "string",
        "minLength": 1,
        "maxLength": 512,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.UpdateDatabase"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
