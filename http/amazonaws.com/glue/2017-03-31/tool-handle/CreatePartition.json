{
  "name": "CreatePartition",
  "description": "Creates a new partition.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.CreatePartition"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreatePartitionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreatePartitionRequest": {
        "type": "object",
        "required": [
          "DatabaseName",
          "TableName",
          "PartitionInput"
        ],
        "title": "CreatePartitionRequest",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "The Amazon Web Services account ID of the catalog in which the partition is to be created."
              }
            ]
          },
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the metadata database in which the partition is to be created."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the metadata table in which the partition is to be created."
              }
            ]
          },
          "PartitionInput": {
            "allOf": [
              {
                "$ref": "#/$defs/PartitionInput"
              },
              {
                "description": "A <code>PartitionInput</code> structure defining the partition to be created."
              }
            ]
          }
        }
      },
      "CatalogIdString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "PartitionInput": {
        "type": "object",
        "properties": {
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/ValueStringList"
              },
              {
                "description": "<p>The values of the partition. Although this parameter is not required by the SDK, you must specify this parameter for a valid input.</p> <p>The values for the keys for the new partition must be passed as an array of String objects that must be ordered in the same order as the partition keys appearing in the Amazon S3 prefix. Otherwise Glue will add the values to the wrong keys.</p>"
              }
            ]
          },
          "LastAccessTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The last time at which the partition was accessed."
              }
            ]
          },
          "StorageDescriptor": {
            "allOf": [
              {
                "$ref": "#/$defs/StorageDescriptor"
              },
              {
                "description": "Provides information about the physical location where the partition is stored."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "These key-value pairs define partition parameters."
              }
            ]
          },
          "LastAnalyzedTime": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "description": "The last time at which column statistics were computed for this partition."
              }
            ]
          }
        },
        "description": "The structure used to create and update a partition."
      },
      "ValueStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ValueString"
        }
      },
      "ValueString": {
        "type": "string",
        "maxLength": 1024
      },
      "Timestamp": {
        "type": "string",
        "format": "date-time"
      },
      "StorageDescriptor": {
        "type": "object",
        "properties": {
          "Columns": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnList"
              },
              {
                "description": "A list of the <code>Columns</code> in the table."
              }
            ]
          },
          "Location": {
            "allOf": [
              {
                "$ref": "#/$defs/LocationString"
              },
              {
                "description": "The physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name."
              }
            ]
          },
          "AdditionalLocations": {
            "allOf": [
              {
                "$ref": "#/$defs/LocationStringList"
              },
              {
                "description": "A list of locations that point to the path where a Delta table is located."
              }
            ]
          },
          "InputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/FormatString"
              },
              {
                "description": "The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format."
              }
            ]
          },
          "OutputFormat": {
            "allOf": [
              {
                "$ref": "#/$defs/FormatString"
              },
              {
                "description": "The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format."
              }
            ]
          },
          "Compressed": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>True</code> if the data in the table is compressed, or <code>False</code> if not."
              }
            ]
          },
          "NumberOfBuckets": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "Must be specified if the table contains any dimension columns."
              }
            ]
          },
          "SerdeInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/SerDeInfo"
              },
              {
                "description": "The serialization/deserialization (SerDe) information."
              }
            ]
          },
          "BucketColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/NameStringList"
              },
              {
                "description": "A list of reducer grouping columns, clustering columns, and bucketing columns in the table."
              }
            ]
          },
          "SortColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/OrderList"
              },
              {
                "description": "A list specifying the sort order of each bucket in the table."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "The user-supplied properties in key-value form."
              }
            ]
          },
          "SkewedInfo": {
            "allOf": [
              {
                "$ref": "#/$defs/SkewedInfo"
              },
              {
                "description": "The information about values that appear frequently in a column (skewed values)."
              }
            ]
          },
          "StoredAsSubDirectories": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": " <code>True</code> if the table data is stored in subdirectories, or <code>False</code> if not."
              }
            ]
          },
          "SchemaReference": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaReference"
              },
              {
                "description": "<p>An object that references a schema stored in the Glue Schema Registry.</p> <p>When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference.</p>"
              }
            ]
          }
        },
        "description": "Describes the physical storage of table data."
      },
      "ColumnList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Column"
        }
      },
      "Column": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the <code>Column</code>."
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnTypeString"
              },
              {
                "description": "The data type of the <code>Column</code>."
              }
            ]
          },
          "Comment": {
            "allOf": [
              {
                "$ref": "#/$defs/CommentString"
              },
              {
                "description": "A free-form text comment."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "These key-value pairs define properties associated with the column."
              }
            ]
          }
        },
        "description": "A column in a <code>Table</code>."
      },
      "ColumnTypeString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 131072,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "CommentString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "ParametersMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ParametersMapValue"
        }
      },
      "ParametersMapValue": {
        "type": "string",
        "maxLength": 512000
      },
      "LocationString": {
        "type": "string",
        "maxLength": 2056,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "LocationStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/LocationString"
        }
      },
      "FormatString": {
        "type": "string",
        "maxLength": 128,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "Boolean": {
        "type": "boolean"
      },
      "Integer": {
        "type": "integer"
      },
      "SerDeInfo": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Name of the SerDe."
              }
            ]
          },
          "SerializationLibrary": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Usually the class that implements the SerDe. An example is <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/ParametersMap"
              },
              {
                "description": "These key-value pairs define initialization parameters for the SerDe."
              }
            ]
          }
        },
        "description": "Information about a serialization/deserialization program (SerDe) that serves as an extractor and loader."
      },
      "NameStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/NameString"
        }
      },
      "OrderList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Order"
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "Column",
          "SortOrder"
        ],
        "properties": {
          "Column": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the column."
              }
            ]
          },
          "SortOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/IntegerFlag"
              },
              {
                "description": "Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>)."
              }
            ]
          }
        },
        "description": "Specifies the sort order of a sorted column."
      },
      "IntegerFlag": {
        "type": "integer",
        "minimum": 0,
        "maximum": 1
      },
      "SkewedInfo": {
        "type": "object",
        "properties": {
          "SkewedColumnNames": {
            "allOf": [
              {
                "$ref": "#/$defs/NameStringList"
              },
              {
                "description": "A list of names of columns that contain skewed values."
              }
            ]
          },
          "SkewedColumnValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnValueStringList"
              },
              {
                "description": "A list of values that appear so frequently as to be considered skewed."
              }
            ]
          },
          "SkewedColumnValueLocationMaps": {
            "allOf": [
              {
                "$ref": "#/$defs/LocationMap"
              },
              {
                "description": "A mapping of skewed values to the columns that contain them."
              }
            ]
          }
        },
        "description": "Specifies skewed values in a table. Skewed values are those that occur with very high frequency."
      },
      "ColumnValueStringList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ColumnValuesString"
        }
      },
      "ColumnValuesString": {
        "type": "string"
      },
      "LocationMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ColumnValuesString"
        }
      },
      "SchemaReference": {
        "type": "object",
        "properties": {
          "SchemaId": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaId"
              },
              {
                "description": "A structure that contains schema identity fields. Either this or the <code>SchemaVersionId</code> has to be provided."
              }
            ]
          },
          "SchemaVersionId": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaVersionIdString"
              },
              {
                "description": "The unique ID assigned to a version of the schema. Either this or the <code>SchemaId</code> has to be provided."
              }
            ]
          },
          "SchemaVersionNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionLongNumber"
              },
              {
                "description": "The version number of the schema."
              }
            ]
          }
        },
        "description": "An object that references a schema stored in the Glue Schema Registry."
      },
      "SchemaId": {
        "type": "object",
        "properties": {
          "SchemaArn": {
            "allOf": [
              {
                "$ref": "#/$defs/GlueResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided."
              }
            ]
          },
          "SchemaName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaRegistryNameString"
              },
              {
                "description": "The name of the schema. One of <code>SchemaArn</code> or <code>SchemaName</code> has to be provided."
              }
            ]
          },
          "RegistryName": {
            "allOf": [
              {
                "$ref": "#/$defs/SchemaRegistryNameString"
              },
              {
                "description": "The name of the schema registry that contains the schema."
              }
            ]
          }
        },
        "description": "The unique ID of the schema in the Glue schema registry."
      },
      "GlueResourceArn": {
        "type": "string",
        "pattern": "arn:(aws|aws-us-gov|aws-cn):glue:.*",
        "minLength": 1,
        "maxLength": 10240
      },
      "SchemaRegistryNameString": {
        "type": "string",
        "pattern": "[a-zA-Z0-9-_$#.]+",
        "minLength": 1,
        "maxLength": 255
      },
      "SchemaVersionIdString": {
        "type": "string",
        "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}",
        "minLength": 36,
        "maxLength": 36
      },
      "VersionLongNumber": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100000
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.CreatePartition"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
