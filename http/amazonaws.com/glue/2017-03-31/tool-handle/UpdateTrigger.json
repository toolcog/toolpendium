{
  "name": "UpdateTrigger",
  "description": "Updates a trigger definition.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.UpdateTrigger"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateTriggerRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateTriggerRequest": {
        "type": "object",
        "required": [
          "Name",
          "TriggerUpdate"
        ],
        "title": "UpdateTriggerRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the trigger to update."
              }
            ]
          },
          "TriggerUpdate": {
            "allOf": [
              {
                "$ref": "#/$defs/TriggerUpdate"
              },
              {
                "description": "The new values with which to update the trigger."
              }
            ]
          }
        }
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "TriggerUpdate": {
        "type": "object",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "Reserved for future use."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/DescriptionString"
              },
              {
                "description": "A description of this trigger."
              }
            ]
          },
          "Schedule": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericString"
              },
              {
                "description": "A <code>cron</code> expression used to specify the schedule (see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html\">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>."
              }
            ]
          },
          "Actions": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionList"
              },
              {
                "description": "The actions initiated by this trigger."
              }
            ]
          },
          "Predicate": {
            "allOf": [
              {
                "$ref": "#/$defs/Predicate"
              },
              {
                "description": "The predicate of this trigger, which defines when it will fire."
              }
            ]
          },
          "EventBatchingCondition": {
            "allOf": [
              {
                "$ref": "#/$defs/EventBatchingCondition"
              },
              {
                "description": "Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires."
              }
            ]
          }
        },
        "description": "A structure used to provide information used to update a trigger. This object updates the previous trigger definition by overwriting it completely."
      },
      "DescriptionString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "GenericString": {
        "type": "string"
      },
      "ActionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Action"
        }
      },
      "Action": {
        "type": "object",
        "properties": {
          "JobName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of a job to be run."
              }
            ]
          },
          "Arguments": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericMap"
              },
              {
                "description": "<p>The job arguments used when this trigger fires. For this job run, they replace the default arguments set in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html\">Calling Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that Glue consumes to set up your job, see the <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html\">Special Parameters Used by Glue</a> topic in the developer guide.</p>"
              }
            ]
          },
          "Timeout": {
            "allOf": [
              {
                "$ref": "#/$defs/Timeout"
              },
              {
                "description": "The <code>JobRun</code> timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job."
              }
            ]
          },
          "SecurityConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the <code>SecurityConfiguration</code> structure to be used with this action."
              }
            ]
          },
          "NotificationProperty": {
            "allOf": [
              {
                "$ref": "#/$defs/NotificationProperty"
              },
              {
                "description": "Specifies configuration properties of a job run notification."
              }
            ]
          },
          "CrawlerName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the crawler to be used with this action."
              }
            ]
          }
        },
        "description": "Defines an action to be initiated by a trigger."
      },
      "GenericMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/GenericString"
        }
      },
      "Timeout": {
        "type": "integer",
        "minimum": 1
      },
      "NotificationProperty": {
        "type": "object",
        "properties": {
          "NotifyDelayAfter": {
            "allOf": [
              {
                "$ref": "#/$defs/NotifyDelayAfter"
              },
              {
                "description": "After a job run starts, the number of minutes to wait before sending a job run delay notification."
              }
            ]
          }
        },
        "description": "Specifies configuration properties of a notification."
      },
      "NotifyDelayAfter": {
        "type": "integer",
        "minimum": 1
      },
      "Predicate": {
        "type": "object",
        "properties": {
          "Logical": {
            "allOf": [
              {
                "$ref": "#/$defs/Logical"
              },
              {
                "description": "An optional field if only one condition is listed. If multiple conditions are listed, then this field is required."
              }
            ]
          },
          "Conditions": {
            "allOf": [
              {
                "$ref": "#/$defs/ConditionList"
              },
              {
                "description": "A list of the conditions that determine when the trigger will fire."
              }
            ]
          }
        },
        "description": "Defines the predicate of the trigger, which determines when it fires."
      },
      "Logical": {
        "type": "string",
        "enum": [
          "AND",
          "ANY"
        ]
      },
      "ConditionList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Condition"
        }
      },
      "Condition": {
        "type": "object",
        "properties": {
          "LogicalOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/LogicalOperator"
              },
              {
                "description": "A logical operator."
              }
            ]
          },
          "JobName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the job whose <code>JobRuns</code> this condition applies to, and on which this trigger waits."
              }
            ]
          },
          "State": {
            "allOf": [
              {
                "$ref": "#/$defs/JobRunState"
              },
              {
                "description": "The condition state. Currently, the only job states that a trigger can listen for are <code>SUCCEEDED</code>, <code>STOPPED</code>, <code>FAILED</code>, and <code>TIMEOUT</code>. The only crawler states that a trigger can listen for are <code>SUCCEEDED</code>, <code>FAILED</code>, and <code>CANCELLED</code>."
              }
            ]
          },
          "CrawlerName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the crawler to which this condition applies."
              }
            ]
          },
          "CrawlState": {
            "allOf": [
              {
                "$ref": "#/$defs/CrawlState"
              },
              {
                "description": "The state of the crawler to which this condition applies."
              }
            ]
          }
        },
        "description": "Defines a condition under which a trigger fires."
      },
      "LogicalOperator": {
        "type": "string",
        "enum": [
          "EQUALS"
        ]
      },
      "JobRunState": {
        "type": "string",
        "enum": [
          "STARTING",
          "RUNNING",
          "STOPPING",
          "STOPPED",
          "SUCCEEDED",
          "FAILED",
          "TIMEOUT",
          "ERROR",
          "WAITING"
        ]
      },
      "CrawlState": {
        "type": "string",
        "enum": [
          "RUNNING",
          "CANCELLING",
          "CANCELLED",
          "SUCCEEDED",
          "FAILED",
          "ERROR"
        ]
      },
      "EventBatchingCondition": {
        "type": "object",
        "required": [
          "BatchSize"
        ],
        "properties": {
          "BatchSize": {
            "allOf": [
              {
                "$ref": "#/$defs/BatchSize"
              },
              {
                "description": "Number of events that must be received from Amazon EventBridge before EventBridge event trigger fires."
              }
            ]
          },
          "BatchWindow": {
            "allOf": [
              {
                "$ref": "#/$defs/BatchWindow"
              },
              {
                "description": "Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received."
              }
            ]
          }
        },
        "description": "Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires."
      },
      "BatchSize": {
        "type": "integer",
        "minimum": 1,
        "maximum": 100
      },
      "BatchWindow": {
        "type": "integer",
        "minimum": 1,
        "maximum": 900
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.UpdateTrigger"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Trigger**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
