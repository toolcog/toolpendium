{
  "name": "CreateMLTransform",
  "description": "<p>Creates an Glue machine learning transform. This operation creates the transform and all the necessary parameters to train it.</p> <p>Call this operation as the first step in the process of using a machine learning transform (such as the <code>FindMatches</code> transform) for deduplicating data. You can provide an optional <code>Description</code>, in addition to the parameters that you want to use for your algorithm.</p> <p>You must also specify certain parameters for the tasks that Glue runs on your behalf as part of learning from your data and creating a high-quality machine learning transform. These parameters include <code>Role</code>, and optionally, <code>AllocatedCapacity</code>, <code>Timeout</code>, and <code>MaxRetries</code>. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-jobs-job.html\">Jobs</a>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.CreateMLTransform"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateMLTransformRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateMLTransformRequest": {
        "type": "object",
        "required": [
          "Name",
          "InputRecordTables",
          "Parameters",
          "Role"
        ],
        "title": "CreateMLTransformRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The unique name that you give the transform when you create it."
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/DescriptionString"
              },
              {
                "description": "A description of the machine learning transform that is being defined. The default is an empty string."
              }
            ]
          },
          "InputRecordTables": {
            "allOf": [
              {
                "$ref": "#/$defs/GlueTables"
              },
              {
                "description": "A list of Glue table definitions used by the transform."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformParameters"
              },
              {
                "description": "The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type."
              }
            ]
          },
          "Role": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleString"
              },
              {
                "description": "<p>The name or Amazon Resource Name (ARN) of the IAM role with the required permissions. The required permissions include both Glue service role permissions to Glue resources, and Amazon S3 permissions required by the transform. </p> <ul> <li> <p>This role needs Glue service role permissions to allow access to resources in Glue. See <a href=\"https://docs.aws.amazon.com/glue/latest/dg/attach-policy-iam-user.html\">Attach a Policy to IAM Users That Access Glue</a>.</p> </li> <li> <p>This role needs permission to your Amazon Simple Storage Service (Amazon S3) sources, targets, temporary directory, scripts, and any libraries used by the task run for this transform.</p> </li> </ul>"
              }
            ]
          },
          "GlueVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/GlueVersionString"
              },
              {
                "description": "This value determines which version of Glue this machine learning transform is compatible with. Glue 1.0 is recommended for most customers. If the value is not set, the Glue compatibility defaults to Glue 0.9. For more information, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/release-notes.html#release-notes-versions\">Glue Versions</a> in the developer guide."
              }
            ]
          },
          "MaxCapacity": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableDouble"
              },
              {
                "description": "<p>The number of Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from 2 to 100 DPUs; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href=\"https://aws.amazon.com/glue/pricing/\">Glue pricing page</a>. </p> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p> <p>When the <code>WorkerType</code> field is set to a value other than <code>Standard</code>, the <code>MaxCapacity</code> field is set automatically and becomes read-only.</p>"
              }
            ]
          },
          "WorkerType": {
            "allOf": [
              {
                "$ref": "#/$defs/WorkerType"
              },
              {
                "description": "<p>The type of predefined worker that is allocated when this task runs. Accepts a value of Standard, G.1X, or G.2X.</p> <ul> <li> <p>For the <code>Standard</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 50GB disk, and 2 executors per worker.</p> </li> <li> <p>For the <code>G.1X</code> worker type, each worker provides 4 vCPU, 16 GB of memory and a 64GB disk, and 1 executor per worker.</p> </li> <li> <p>For the <code>G.2X</code> worker type, each worker provides 8 vCPU, 32 GB of memory and a 128GB disk, and 1 executor per worker.</p> </li> </ul> <p> <code>MaxCapacity</code> is a mutually exclusive option with <code>NumberOfWorkers</code> and <code>WorkerType</code>.</p> <ul> <li> <p>If either <code>NumberOfWorkers</code> or <code>WorkerType</code> is set, then <code>MaxCapacity</code> cannot be set.</p> </li> <li> <p>If <code>MaxCapacity</code> is set then neither <code>NumberOfWorkers</code> or <code>WorkerType</code> can be set.</p> </li> <li> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p> </li> <li> <p> <code>MaxCapacity</code> and <code>NumberOfWorkers</code> must both be at least 1.</p> </li> </ul>"
              }
            ]
          },
          "NumberOfWorkers": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableInteger"
              },
              {
                "description": "<p>The number of workers of a defined <code>workerType</code> that are allocated when this task runs.</p> <p>If <code>WorkerType</code> is set, then <code>NumberOfWorkers</code> is required (and vice versa).</p>"
              }
            ]
          },
          "Timeout": {
            "allOf": [
              {
                "$ref": "#/$defs/Timeout"
              },
              {
                "description": "The timeout of the task run for this transform in minutes. This is the maximum time that a task run for this transform can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours)."
              }
            ]
          },
          "MaxRetries": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableInteger"
              },
              {
                "description": "The maximum number of times to retry a task for this transform after a task run fails."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagsMap"
              },
              {
                "description": "The tags to use with this machine learning transform. You may use tags to limit access to the machine learning transform. For more information about tags in Glue, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/monitor-tags.html\">Amazon Web Services Tags in Glue</a> in the developer guide."
              }
            ]
          },
          "TransformEncryption": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformEncryption"
              },
              {
                "description": "The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS."
              }
            ]
          }
        }
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "DescriptionString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "GlueTables": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/GlueTable"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "GlueTable": {
        "type": "object",
        "required": [
          "DatabaseName",
          "TableName"
        ],
        "properties": {
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "A database name in the Glue Data Catalog."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "A table name in the Glue Data Catalog."
              }
            ]
          },
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "A unique identifier for the Glue Data Catalog."
              }
            ]
          },
          "ConnectionName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the connection to the Glue Data Catalog."
              }
            ]
          },
          "AdditionalOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/GlueTableAdditionalOptions"
              },
              {
                "description": "<p>Additional options for the table. Currently there are two keys supported:</p> <ul> <li> <p> <code>pushDownPredicate</code>: to filter on partitions without having to list and read all the files in your dataset.</p> </li> <li> <p> <code>catalogPartitionPredicate</code>: to use server-side partition pruning using partition indexes in the Glue Data Catalog.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "The database and table in the Glue Data Catalog that is used for input or output data."
      },
      "GlueTableAdditionalOptions": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 10,
        "additionalProperties": {
          "$ref": "#/$defs/DescriptionString"
        }
      },
      "TransformParameters": {
        "type": "object",
        "required": [
          "TransformType"
        ],
        "properties": {
          "TransformType": {
            "allOf": [
              {
                "$ref": "#/$defs/TransformType"
              },
              {
                "description": "<p>The type of machine learning transform.</p> <p>For information about the types of machine learning transforms, see <a href=\"https://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html\">Creating Machine Learning Transforms</a>.</p>"
              }
            ]
          },
          "FindMatchesParameters": {
            "allOf": [
              {
                "$ref": "#/$defs/FindMatchesParameters"
              },
              {
                "description": "The parameters for the find matches algorithm."
              }
            ]
          }
        },
        "description": "The algorithm-specific parameters that are associated with the machine learning transform."
      },
      "TransformType": {
        "type": "string",
        "enum": [
          "FIND_MATCHES"
        ]
      },
      "FindMatchesParameters": {
        "type": "object",
        "properties": {
          "PrimaryKeyColumnName": {
            "allOf": [
              {
                "$ref": "#/$defs/ColumnNameString"
              },
              {
                "description": "The name of a column that uniquely identifies rows in the source table. Used to help identify matching records."
              }
            ]
          },
          "PrecisionRecallTradeoff": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericBoundedDouble"
              },
              {
                "description": "<p>The value selected when tuning your transform for a balance between precision and recall. A value of 0.5 means no preference; a value of 1.0 means a bias purely for precision, and a value of 0.0 means a bias for recall. Because this is a tradeoff, choosing values close to 1.0 means very low recall, and choosing values close to 0.0 results in very low precision.</p> <p>The precision metric indicates how often your model is correct when it predicts a match. </p> <p>The recall metric indicates that for an actual match, how often your model predicts the match.</p>"
              }
            ]
          },
          "AccuracyCostTradeoff": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericBoundedDouble"
              },
              {
                "description": "<p>The value that is selected when tuning your transform for a balance between accuracy and cost. A value of 0.5 means that the system balances accuracy and cost concerns. A value of 1.0 means a bias purely for accuracy, which typically results in a higher cost, sometimes substantially higher. A value of 0.0 means a bias purely for cost, which results in a less accurate <code>FindMatches</code> transform, sometimes with unacceptable accuracy.</p> <p>Accuracy measures how well the transform finds true positives and true negatives. Increasing accuracy requires more machine resources and cost. But it also results in increased recall. </p> <p>Cost measures how many compute resources, and thus money, are consumed to run the transform.</p>"
              }
            ]
          },
          "EnforceProvidedLabels": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>The value to switch on or off to force the output to match the provided labels from users. If the value is <code>True</code>, the <code>find matches</code> transform forces the output to match the provided labels. The results override the normal conflation results. If the value is <code>False</code>, the <code>find matches</code> transform does not ensure all the labels provided are respected, and the results rely on the trained model.</p> <p>Note that setting this value to true may increase the conflation execution time.</p>"
              }
            ]
          }
        },
        "description": "The parameters to configure the find matches transform."
      },
      "ColumnNameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "GenericBoundedDouble": {
        "type": "number",
        "format": "double",
        "minimum": 0,
        "maximum": 1
      },
      "NullableBoolean": {
        "type": "boolean"
      },
      "RoleString": {
        "type": "string"
      },
      "GlueVersionString": {
        "type": "string",
        "pattern": "^\\w+\\.\\w+$",
        "minLength": 1,
        "maxLength": 255
      },
      "NullableDouble": {
        "type": "number",
        "format": "double"
      },
      "WorkerType": {
        "type": "string",
        "enum": [
          "Standard",
          "G.1X",
          "G.2X",
          "G.025X",
          "G.4X",
          "G.8X",
          "Z.2X"
        ]
      },
      "NullableInteger": {
        "type": "integer"
      },
      "Timeout": {
        "type": "integer",
        "minimum": 1
      },
      "TagsMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/TagValue"
        }
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      },
      "TransformEncryption": {
        "type": "object",
        "properties": {
          "MlUserDataEncryption": {
            "allOf": [
              {
                "$ref": "#/$defs/MLUserDataEncryption"
              },
              {
                "description": "An <code>MLUserDataEncryption</code> object containing the encryption mode and customer-provided KMS key ID."
              }
            ]
          },
          "TaskRunSecurityConfigurationName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the security configuration."
              }
            ]
          }
        },
        "description": "<p>The encryption-at-rest settings of the transform that apply to accessing user data. Machine learning transforms can access user data encrypted in Amazon S3 using KMS.</p> <p>Additionally, imported labels and trained transforms can now be encrypted using a customer provided KMS key.</p>"
      },
      "MLUserDataEncryption": {
        "type": "object",
        "required": [
          "MlUserDataEncryptionMode"
        ],
        "properties": {
          "MlUserDataEncryptionMode": {
            "allOf": [
              {
                "$ref": "#/$defs/MLUserDataEncryptionModeString"
              },
              {
                "description": "<p>The encryption mode applied to user data. Valid values are:</p> <ul> <li> <p>DISABLED: encryption is disabled</p> </li> <li> <p>SSEKMS: use of server-side encryption with Key Management Service (SSE-KMS) for user data stored in Amazon S3.</p> </li> </ul>"
              }
            ]
          },
          "KmsKeyId": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The ID for the customer-provided KMS key."
              }
            ]
          }
        },
        "description": "The encryption-at-rest settings of the transform that apply to accessing user data."
      },
      "MLUserDataEncryptionModeString": {
        "type": "string",
        "enum": [
          "DISABLED",
          "SSE-KMS"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.CreateMLTransform"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**TransformId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
