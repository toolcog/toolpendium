{
  "name": "GetUnfilteredPartitionsMetadata",
  "description": "<p>Retrieves partition metadata from the Data Catalog that contains unfiltered metadata.</p> <p>For IAM authorization, the public IAM action associated with this API is <code>glue:GetPartitions</code>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "MaxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "NextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSGlue.GetUnfilteredPartitionsMetadata"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/GetUnfilteredPartitionsMetadataRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "GetUnfilteredPartitionsMetadataRequest": {
        "type": "object",
        "required": [
          "CatalogId",
          "DatabaseName",
          "TableName",
          "SupportedPermissionTypes"
        ],
        "title": "GetUnfilteredPartitionsMetadataRequest",
        "properties": {
          "CatalogId": {
            "allOf": [
              {
                "$ref": "#/$defs/CatalogIdString"
              },
              {
                "description": "The ID of the Data Catalog where the partitions in question reside. If none is provided, the AWS account ID is used by default. "
              }
            ]
          },
          "DatabaseName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the catalog database where the partitions reside."
              }
            ]
          },
          "TableName": {
            "allOf": [
              {
                "$ref": "#/$defs/NameString"
              },
              {
                "description": "The name of the table that contains the partition."
              }
            ]
          },
          "Expression": {
            "allOf": [
              {
                "$ref": "#/$defs/PredicateString"
              },
              {
                "description": "<p>An expression that filters the partitions to be returned.</p> <p>The expression uses SQL syntax similar to the SQL <code>WHERE</code> filter clause. The SQL statement parser <a href=\"http://jsqlparser.sourceforge.net/home.php\">JSQLParser</a> parses the expression. </p> <p> <i>Operators</i>: The following are the operators that you can use in the <code>Expression</code> API call:</p> <dl> <dt>=</dt> <dd> <p>Checks whether the values of the two operands are equal; if yes, then the condition becomes true.</p> <p>Example: Assume 'variable a' holds 10 and 'variable b' holds 20. </p> <p>(a = b) is not true.</p> </dd> <dt>&lt; &gt;</dt> <dd> <p>Checks whether the values of two operands are equal; if the values are not equal, then the condition becomes true.</p> <p>Example: (a &lt; &gt; b) is true.</p> </dd> <dt>&gt;</dt> <dd> <p>Checks whether the value of the left operand is greater than the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &gt; b) is not true.</p> </dd> <dt>&lt;</dt> <dd> <p>Checks whether the value of the left operand is less than the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &lt; b) is true.</p> </dd> <dt>&gt;=</dt> <dd> <p>Checks whether the value of the left operand is greater than or equal to the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &gt;= b) is not true.</p> </dd> <dt>&lt;=</dt> <dd> <p>Checks whether the value of the left operand is less than or equal to the value of the right operand; if yes, then the condition becomes true.</p> <p>Example: (a &lt;= b) is true.</p> </dd> <dt>AND, OR, IN, BETWEEN, LIKE, NOT, IS NULL</dt> <dd> <p>Logical operators.</p> </dd> </dl> <p> <i>Supported Partition Key Types</i>: The following are the supported partition keys.</p> <ul> <li> <p> <code>string</code> </p> </li> <li> <p> <code>date</code> </p> </li> <li> <p> <code>timestamp</code> </p> </li> <li> <p> <code>int</code> </p> </li> <li> <p> <code>bigint</code> </p> </li> <li> <p> <code>long</code> </p> </li> <li> <p> <code>tinyint</code> </p> </li> <li> <p> <code>smallint</code> </p> </li> <li> <p> <code>decimal</code> </p> </li> </ul> <p>If an type is encountered that is not valid, an exception is thrown. </p>"
              }
            ]
          },
          "AuditContext": {
            "allOf": [
              {
                "$ref": "#/$defs/AuditContext"
              },
              {
                "description": "A structure containing Lake Formation audit context information."
              }
            ]
          },
          "SupportedPermissionTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/PermissionTypeList"
              },
              {
                "description": "A list of supported permission types. "
              }
            ]
          },
          "NextToken": {
            "allOf": [
              {
                "$ref": "#/$defs/Token"
              },
              {
                "description": "A continuation token, if this is not the first call to retrieve these partitions."
              }
            ]
          },
          "Segment": {
            "allOf": [
              {
                "$ref": "#/$defs/Segment"
              },
              {
                "description": "The segment of the table's partitions to scan in this request."
              }
            ]
          },
          "MaxResults": {
            "allOf": [
              {
                "$ref": "#/$defs/PageSize"
              },
              {
                "description": "The maximum number of partitions to return in a single response."
              }
            ]
          }
        }
      },
      "CatalogIdString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "NameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "PredicateString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\r\\n\\t]*"
      },
      "AuditContext": {
        "type": "object",
        "properties": {
          "AdditionalAuditContext": {
            "allOf": [
              {
                "$ref": "#/$defs/AuditContextString"
              },
              {
                "description": "A string containing the additional audit context information."
              }
            ]
          },
          "RequestedColumns": {
            "allOf": [
              {
                "$ref": "#/$defs/AuditColumnNamesList"
              },
              {
                "description": "The requested columns for audit."
              }
            ]
          },
          "AllColumnsRequested": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "All columns request for audit."
              }
            ]
          }
        },
        "description": "A structure containing the Lake Formation audit context."
      },
      "AuditContextString": {
        "type": "string",
        "minLength": 0,
        "maxLength": 2048
      },
      "AuditColumnNamesList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ColumnNameString"
        }
      },
      "ColumnNameString": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "x-pattern": "[\\u0020-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF\\t]*"
      },
      "NullableBoolean": {
        "type": "boolean"
      },
      "PermissionTypeList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PermissionType"
        },
        "minItems": 1,
        "maxItems": 255
      },
      "PermissionType": {
        "type": "string",
        "enum": [
          "COLUMN_PERMISSION",
          "CELL_FILTER_PERMISSION",
          "NESTED_PERMISSION",
          "NESTED_CELL_PERMISSION"
        ]
      },
      "Token": {
        "type": "string"
      },
      "Segment": {
        "type": "object",
        "required": [
          "SegmentNumber",
          "TotalSegments"
        ],
        "properties": {
          "SegmentNumber": {
            "allOf": [
              {
                "$ref": "#/$defs/NonNegativeInteger"
              },
              {
                "description": "The zero-based index number of the segment. For example, if the total number of segments is 4, <code>SegmentNumber</code> values range from 0 through 3."
              }
            ]
          },
          "TotalSegments": {
            "allOf": [
              {
                "$ref": "#/$defs/TotalSegmentsInteger"
              },
              {
                "description": "The total number of segments."
              }
            ]
          }
        },
        "description": "Defines a non-overlapping region of a table's partitions, allowing multiple requests to be run in parallel."
      },
      "NonNegativeInteger": {
        "type": "integer",
        "minimum": 0
      },
      "TotalSegmentsInteger": {
        "type": "integer",
        "minimum": 1,
        "maximum": 10
      },
      "PageSize": {
        "type": "integer",
        "minimum": 1,
        "maximum": 1000
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://glue.us-east-1.amazonaws.com/#X-Amz-Target=AWSGlue.GetUnfilteredPartitionsMetadata{?MaxResults,NextToken}"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**UnfilteredPartitions**",
            "**NextToken**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
