{
  "name": "CreateBroker",
  "description": "<p>Creates a broker. Note: This API is asynchronous.</p> <p>To create a broker, you must either use the AmazonMQFullAccess IAM policy or include the following EC2 permissions in your IAM policy.</p> <ul><li><p>ec2:CreateNetworkInterface</p> <p>This permission is required to allow Amazon MQ to create an elastic network interface (ENI) on behalf of your account.</p></li> <li><p>ec2:CreateNetworkInterfacePermission</p> <p>This permission is required to attach the ENI to the broker instance.</p></li> <li><p>ec2:DeleteNetworkInterface</p></li> <li><p>ec2:DeleteNetworkInterfacePermission</p></li> <li><p>ec2:DetachNetworkInterface</p></li> <li><p>ec2:DescribeInternetGateways</p></li> <li><p>ec2:DescribeNetworkInterfaces</p></li> <li><p>ec2:DescribeNetworkInterfacePermissions</p></li> <li><p>ec2:DescribeRouteTables</p></li> <li><p>ec2:DescribeSecurityGroups</p></li> <li><p>ec2:DescribeSubnets</p></li> <li><p>ec2:DescribeVpcs</p></li></ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/amazon-mq-setting-up.html#create-iam-user\">Create an IAM User and Get Your Amazon Web Services Credentials</a> and <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/connecting-to-amazon-mq.html#never-modify-delete-elastic-network-interface\">Never Modify or Delete the Amazon MQ Elastic Network Interface</a> in the <i>Amazon MQ Developer Guide</i>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "autoMinorVersionUpgrade",
          "brokerName",
          "deploymentMode",
          "engineType",
          "engineVersion",
          "hostInstanceType",
          "publiclyAccessible",
          "users"
        ],
        "properties": {
          "authenticationStrategy": {
            "description": "Optional. The authentication strategy used to secure the broker. The default is SIMPLE.",
            "type": "string",
            "enum": [
              "SIMPLE",
              "LDAP"
            ]
          },
          "autoMinorVersionUpgrade": {
            "description": "Enables automatic upgrades to new minor versions for brokers, as new versions are released and supported by Amazon MQ. Automatic upgrades occur during the scheduled maintenance window of the broker or after a manual broker reboot. Set to true by default, if no value is specified.",
            "type": "boolean"
          },
          "brokerName": {
            "description": "<p>Required. The broker's name. This value must be unique in your Amazon Web Services account, 1-50 characters long, must contain only letters, numbers, dashes, and underscores, and must not contain white spaces, brackets, wildcard characters, or special characters.</p> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker names. Broker names are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker names are not intended to be used for private or sensitive data.</p></important>",
            "type": "string"
          },
          "configuration": {
            "description": "A list of information about the configuration.",
            "type": "object",
            "properties": {
              "Id": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "id"
                    },
                    "description": "Required. The unique ID that Amazon MQ generates for the configuration."
                  }
                ]
              },
              "Revision": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__integer"
                  },
                  {
                    "xml": {
                      "name": "revision"
                    },
                    "description": "The revision number of the configuration."
                  }
                ]
              }
            }
          },
          "creatorRequestId": {
            "description": "<p>The unique ID that the requester receives for the created broker. Amazon MQ passes your ID with the API action.</p> <note><p>We recommend using a Universally Unique Identifier (UUID) for the creatorRequestId. You may omit the creatorRequestId if your application doesn't require idempotency.</p></note>",
            "type": "string"
          },
          "deploymentMode": {
            "description": "The broker's deployment mode.",
            "type": "string",
            "enum": [
              "SINGLE_INSTANCE",
              "ACTIVE_STANDBY_MULTI_AZ",
              "CLUSTER_MULTI_AZ"
            ]
          },
          "encryptionOptions": {
            "description": "Encryption options for the broker.",
            "type": "object",
            "properties": {
              "KmsKeyId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "kmsKeyId"
                    },
                    "description": "The customer master key (CMK) to use for the A KMS (KMS). This key is used to encrypt your data at rest. If not provided, Amazon MQ will use a default CMK to encrypt your data."
                  }
                ]
              },
              "UseAwsOwnedKey": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "useAwsOwnedKey"
                    },
                    "description": "Enables the use of an Amazon Web Services owned CMK using KMS (KMS). Set to true by default, if no value is provided, for example, for RabbitMQ brokers."
                  }
                ]
              }
            }
          },
          "engineType": {
            "description": "The type of broker engine. Amazon MQ supports ActiveMQ and RabbitMQ.",
            "type": "string",
            "enum": [
              "ACTIVEMQ",
              "RABBITMQ"
            ]
          },
          "engineVersion": {
            "description": "Required. The broker engine's version. For a list of supported engine versions, see <a href=\"https://docs.aws.amazon.com//amazon-mq/latest/developer-guide/broker-engine.html\">Supported engines</a>.",
            "type": "string"
          },
          "hostInstanceType": {
            "description": "Required. The broker's instance type.",
            "type": "string"
          },
          "ldapServerMetadata": {
            "description": "<p>Optional. The metadata of the LDAP server used to authenticate and authorize connections to the broker.</p> <important><p>Does not apply to RabbitMQ brokers.</p></important>",
            "type": "object",
            "properties": {
              "Hosts": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__listOf__string"
                  },
                  {
                    "xml": {
                      "name": "hosts"
                    },
                    "description": "Specifies the location of the LDAP server such as Directory Service for Microsoft Active Directory. Optional failover server."
                  }
                ]
              },
              "RoleBase": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "roleBase"
                    },
                    "description": "The distinguished name of the node in the directory information tree (DIT) to search for roles or groups. For example, ou=group, ou=corp, dc=corp,\n                  dc=example, dc=com."
                  }
                ]
              },
              "RoleName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "roleName"
                    },
                    "description": "Specifies the LDAP attribute that identifies the group name attribute in the object returned from the group membership query."
                  }
                ]
              },
              "RoleSearchMatching": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "roleSearchMatching"
                    },
                    "description": "The LDAP search filter used to find roles within the roleBase. The distinguished name of the user matched by userSearchMatching is substituted into the {0} placeholder in the search filter. The client's username is substituted into the {1} placeholder. For example, if you set this option to (member=uid={1})for the user janedoe, the search filter becomes (member=uid=janedoe) after string substitution. It matches all role entries that have a member attribute equal to uid=janedoe under the subtree selected by the roleBase."
                  }
                ]
              },
              "RoleSearchSubtree": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "roleSearchSubtree"
                    },
                    "description": "The directory search scope for the role. If set to true, scope is to search the entire subtree."
                  }
                ]
              },
              "ServiceAccountPassword": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "serviceAccountPassword"
                    },
                    "description": "Service account password. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                  dc=com."
                  }
                ]
              },
              "ServiceAccountUsername": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "serviceAccountUsername"
                    },
                    "description": "Service account username. A service account is an account in your LDAP server that has access to initiate a connection. For example, cn=admin,dc=corp, dc=example,\n                  dc=com."
                  }
                ]
              },
              "UserBase": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "userBase"
                    },
                    "description": "Select a particular subtree of the directory information tree (DIT) to search for user entries. The subtree is specified by a DN, which specifies the base node of the subtree. For example, by setting this option to ou=Users,ou=corp, dc=corp,\n                  dc=example, dc=com, the search for user entries is restricted to the subtree beneath ou=Users, ou=corp, dc=corp, dc=example, dc=com."
                  }
                ]
              },
              "UserRoleName": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "userRoleName"
                    },
                    "description": "Specifies the name of the LDAP attribute for the user group membership."
                  }
                ]
              },
              "UserSearchMatching": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "userSearchMatching"
                    },
                    "description": "The LDAP search filter used to find users within the userBase. The client's username is substituted into the {0} placeholder in the search filter. For example, if this option is set to (uid={0}) and the received username is janedoe, the search filter becomes (uid=janedoe) after string substitution. It will result in matching an entry like uid=janedoe, ou=Users,ou=corp, dc=corp, dc=example,\n                  dc=com."
                  }
                ]
              },
              "UserSearchSubtree": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "userSearchSubtree"
                    },
                    "description": "The directory search scope for the user. If set to true, scope is to search the entire subtree."
                  }
                ]
              }
            }
          },
          "logs": {
            "description": "The list of information about logs to be enabled for the specified broker.",
            "type": "object",
            "properties": {
              "Audit": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "audit"
                    },
                    "description": "Enables audit logging. Every user management action made using JMX or the ActiveMQ Web Console is logged. Does not apply to RabbitMQ brokers."
                  }
                ]
              },
              "General": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__boolean"
                  },
                  {
                    "xml": {
                      "name": "general"
                    },
                    "description": "Enables general logging."
                  }
                ]
              }
            }
          },
          "maintenanceWindowStartTime": {
            "description": "The scheduled time period relative to UTC during which Amazon MQ begins to apply pending updates or patches to the broker.",
            "type": "object",
            "properties": {
              "DayOfWeek": {
                "allOf": [
                  {
                    "$ref": "#/$defs/DayOfWeek"
                  },
                  {
                    "xml": {
                      "name": "dayOfWeek"
                    },
                    "description": "Required. The day of the week."
                  }
                ]
              },
              "TimeOfDay": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "timeOfDay"
                    },
                    "description": "Required. The time, in 24-hour format."
                  }
                ]
              },
              "TimeZone": {
                "allOf": [
                  {
                    "$ref": "#/$defs/__string"
                  },
                  {
                    "xml": {
                      "name": "timeZone"
                    },
                    "description": "The time zone, UTC by default, in either the Country/City format, or the UTC offset format."
                  }
                ]
              }
            }
          },
          "publiclyAccessible": {
            "description": "Enables connections from applications outside of the VPC that hosts the broker's subnets. Set to false by default, if no value is provided.",
            "type": "boolean"
          },
          "securityGroups": {
            "description": "The list of rules (1 minimum, 125 maximum) that authorize connections to brokers.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/__string"
            }
          },
          "storageType": {
            "description": "<p>The broker's storage type.</p> <important><p>EFS is not supported for RabbitMQ engine type.</p></important>",
            "type": "string",
            "enum": [
              "EBS",
              "EFS"
            ]
          },
          "subnetIds": {
            "description": "<p>The list of groups that define which subnets and IP ranges the broker can use from different Availability Zones. If you specify more than one subnet, the subnets must be in different Availability Zones. Amazon MQ will not be able to create VPC endpoints for your broker with multiple subnets in the same Availability Zone. A SINGLE_INSTANCE deployment requires one subnet (for example, the default subnet). An ACTIVE_STANDBY_MULTI_AZ Amazon MQ for ActiveMQ deployment requires two subnets. A CLUSTER_MULTI_AZ Amazon MQ for RabbitMQ deployment has no subnet requirements when deployed with public accessibility. Deployment without public accessibility requires at least one subnet.</p> <important><p>If you specify subnets in a <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/vpc-sharing.html\">shared VPC</a> for a RabbitMQ broker, the associated VPC to which the specified subnets belong must be owned by your Amazon Web Services account. Amazon MQ will not be able to create VPC endpoints in VPCs that are not owned by your Amazon Web Services account.</p></important>",
            "type": "array",
            "items": {
              "$ref": "#/$defs/__string"
            }
          },
          "tags": {
            "description": "Create tags when creating the broker.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/__string"
            }
          },
          "users": {
            "description": "The list of broker users (persons or applications) who can access queues and topics. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/User"
            }
          },
          "dataReplicationMode": {
            "description": "Specifies whether a broker is a part of a data replication pair.",
            "type": "string",
            "enum": [
              "NONE",
              "CRDR"
            ]
          },
          "dataReplicationPrimaryBrokerArn": {
            "description": "The Amazon Resource Name (ARN) of the primary broker that is used to replicate data from in a data replication pair, and is applied to the replica broker. Must be set when dataReplicationMode is set to CRDR.",
            "type": "string"
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "__string": {
        "type": "string"
      },
      "__integer": {
        "type": "integer"
      },
      "__boolean": {
        "type": "boolean"
      },
      "__listOf__string": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/__string"
        }
      },
      "DayOfWeek": {
        "type": "string",
        "enum": [
          "MONDAY",
          "TUESDAY",
          "WEDNESDAY",
          "THURSDAY",
          "FRIDAY",
          "SATURDAY",
          "SUNDAY"
        ]
      },
      "User": {
        "type": "object",
        "required": [
          "Username",
          "Password"
        ],
        "properties": {
          "ConsoleAccess": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "xml": {
                  "name": "consoleAccess"
                },
                "description": "Enables access to the ActiveMQ Web Console for the ActiveMQ user. Does not apply to RabbitMQ brokers."
              }
            ]
          },
          "Groups": {
            "allOf": [
              {
                "$ref": "#/$defs/__listOf__string"
              },
              {
                "xml": {
                  "name": "groups"
                },
                "description": "The list of groups (20 maximum) to which the ActiveMQ user belongs. This value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long. Does not apply to RabbitMQ brokers."
              }
            ]
          },
          "Password": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "password"
                },
                "description": "Required. The password of the user. This value must be at least 12 characters long, must contain at least 4 unique characters, and must not contain commas, colons, or equal signs (,:=)."
              }
            ]
          },
          "Username": {
            "allOf": [
              {
                "$ref": "#/$defs/__string"
              },
              {
                "xml": {
                  "name": "username"
                },
                "description": "<p>The username of the broker user. The following restrictions apply to broker usernames:</p> <ul><li><p>For Amazon MQ for ActiveMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores, and tildes (- . _ ~). This value must be 2-100 characters long.</p></li> <li><p>para>For Amazon MQ for RabbitMQ brokers, this value can contain only alphanumeric characters, dashes, periods, underscores (- . _). This value must not contain a tilde (~) character. Amazon MQ prohibts using guest as a valid usename. This value must be 2-100 characters long.</p></para></li></ul> <important><p>Do not add personally identifiable information (PII) or other confidential or sensitive information in broker usernames. Broker usernames are accessible to other Amazon Web Services services, including CloudWatch Logs. Broker usernames are not intended to be used for private or sensitive data.</p></important>"
              }
            ]
          },
          "ReplicationUser": {
            "allOf": [
              {
                "$ref": "#/$defs/__boolean"
              },
              {
                "xml": {
                  "name": "replicationUser"
                },
                "description": "Defines if this user is intended for CRDR replication purposes."
              }
            ]
          }
        },
        "description": "A user associated with the broker. For Amazon MQ for RabbitMQ brokers, one and only one administrative user is accepted and created when a broker is first provisioned. All subsequent broker users are created by making RabbitMQ API calls directly to brokers or via the RabbitMQ web console."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://mq.us-east-1.amazonaws.com/v1/brokers"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**BrokerArn**",
            "**BrokerId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
