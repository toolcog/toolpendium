{
  "name": "CreateRoute",
  "description": "<p>Creates a new route that is associated with a virtual router.</p>\n         <p>You can use the <code>prefix</code> parameter in your route specification for path-based\n         routing of requests. For example, if your virtual router service name is\n            <code>my-service.local</code>, and you want the route to match requests to\n            <code>my-service.local/metrics</code>, then your prefix should be\n         <code>/metrics</code>.</p>\n         <p>If your route matches a request, you can distribute traffic to one or more target\n         virtual nodes with relative weighting.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "meshName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "description": "The name of the service mesh in which to create the route."
      },
      "virtualRouterName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "description": "The name of the virtual router in which to create the route."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "routeName",
          "spec"
        ],
        "properties": {
          "clientToken": {
            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the\nrequest. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
            "type": "string"
          },
          "routeName": {
            "description": "The name to use for the route.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          },
          "spec": {
            "description": "An object representing the specification of a route.",
            "type": "object",
            "properties": {
              "httpRoute": {
                "allOf": [
                  {
                    "$ref": "#/$defs/HttpRoute"
                  },
                  {
                    "description": "The HTTP routing information for the route."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "meshName",
      "virtualRouterName",
      "body"
    ],
    "$defs": {
      "HttpRoute": {
        "type": "object",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/$defs/HttpRouteAction"
              },
              {
                "description": "The action to take if a match is determined."
              }
            ]
          },
          "match": {
            "allOf": [
              {
                "$ref": "#/$defs/HttpRouteMatch"
              },
              {
                "description": "The criteria for determining an HTTP request match."
              }
            ]
          }
        },
        "description": "An object representing the HTTP routing specification for a route."
      },
      "HttpRouteAction": {
        "type": "object",
        "properties": {
          "weightedTargets": {
            "allOf": [
              {
                "$ref": "#/$defs/WeightedTargets"
              },
              {
                "description": "The targets that traffic is routed to when a request matches the route. You can specify\n         one or more targets and their relative weights with which to distribute traffic."
              }
            ]
          }
        },
        "description": "An object representing the traffic distribution requirements for matched HTTP\n         requests."
      },
      "WeightedTargets": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/WeightedTarget"
        }
      },
      "WeightedTarget": {
        "type": "object",
        "properties": {
          "virtualNode": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceName"
              },
              {
                "description": "The virtual node to associate with the weighted target."
              }
            ]
          },
          "weight": {
            "allOf": [
              {
                "$ref": "#/$defs/PercentInt"
              },
              {
                "description": "The relative weight of the weighted target."
              }
            ]
          }
        },
        "description": "An object representing a target and its relative weight. Traffic is distributed across\n         targets according to their relative weight. For example, a weighted target with a relative\n         weight of 50 receives five times as much traffic as one with a relative weight of\n         10."
      },
      "ResourceName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "PercentInt": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100
      },
      "HttpRouteMatch": {
        "type": "object",
        "properties": {
          "prefix": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Specifies the path with which to match requests. This parameter must always start with\n            <code>/</code>, which by itself matches all requests to the virtual router service name.\n         You can also match for path-based routing of requests. For example, if your virtual router\n         service name is <code>my-service.local</code>, and you want the route to match requests to\n            <code>my-service.local/metrics</code>, then your prefix should be\n         <code>/metrics</code>."
              }
            ]
          }
        },
        "description": "An object representing the requirements for a route to match HTTP requests for a virtual\n         router."
      },
      "String": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://appmesh.us-east-1.amazonaws.com/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "",
        "**Key properties:**",
        {
          "$ul": [
            "**route**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
