{
  "name": "CreateVirtualNode",
  "description": "<p>Creates a virtual node within a service mesh.</p> <p> A virtual node acts as a logical pointer to a particular task group, such as an Amazon ECS service or a Kubernetes deployment. When you create a virtual node, you can specify the service discovery information for your task group, and whether the proxy running in a task group will communicate with other proxies using Transport Layer Security (TLS).</p> <p>You define a <code>listener</code> for any inbound traffic that your virtual node expects. Any virtual service that your virtual node expects to communicate to is specified as a <code>backend</code>.</p> <p>The response metadata for your new virtual node contains the <code>arn</code> that is associated with the virtual node. Set this value to the full ARN; for example, <code>arn:aws:appmesh:us-west-2:123456789012:myMesh/default/virtualNode/myApp</code>) as the <code>APPMESH_RESOURCE_ARN</code> environment variable for your task group's Envoy proxy container in your task definition or pod spec. This is then mapped to the <code>node.id</code> and <code>node.cluster</code> Envoy parameters.</p> <note> <p>By default, App Mesh uses the name of the resource you specified in <code>APPMESH_RESOURCE_ARN</code> when Envoy is referring to itself in metrics and traces. You can override this behavior by setting the <code>APPMESH_RESOURCE_CLUSTER</code> environment variable with your own name.</p> </note> <p>For more information about virtual nodes, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/virtual_nodes.html\">Virtual nodes</a>. You must be using <code>1.15.0</code> or later of the Envoy image when setting these variables. For more information aboutApp Mesh Envoy variables, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/envoy.html\">Envoy image</a> in the App Mesh User Guide.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "meshName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "description": "The name of the service mesh to create the virtual node in."
      },
      "meshOwner": {
        "type": "string",
        "minLength": 12,
        "maxLength": 12,
        "description": "The Amazon Web Services IAM account ID of the service mesh owner. If the account ID is not your own, then the account that you specify must share the mesh with your account before you can create the resource in the service mesh. For more information about mesh sharing, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/sharing.html\">Working with shared meshes</a>."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "spec",
          "virtualNodeName"
        ],
        "properties": {
          "clientToken": {
            "description": "Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. Up to 36 letters, numbers, hyphens, and underscores are allowed.",
            "type": "string"
          },
          "spec": {
            "description": "An object that represents the specification of a virtual node.",
            "type": "object",
            "properties": {
              "backendDefaults": {
                "allOf": [
                  {
                    "$ref": "#/$defs/BackendDefaults"
                  },
                  {
                    "description": "A reference to an object that represents the defaults for backends."
                  }
                ]
              },
              "backends": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Backends"
                  },
                  {
                    "description": "The backends that the virtual node is expected to send outbound traffic to."
                  }
                ]
              },
              "listeners": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Listeners"
                  },
                  {
                    "description": "The listener that the virtual node is expected to receive inbound traffic from. You can specify one listener."
                  }
                ]
              },
              "logging": {
                "allOf": [
                  {
                    "$ref": "#/$defs/Logging"
                  },
                  {
                    "description": "The inbound and outbound access logging information for the virtual node."
                  }
                ]
              },
              "serviceDiscovery": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ServiceDiscovery"
                  },
                  {
                    "description": "The service discovery information for the virtual node. If your virtual node does not expect ingress traffic, you can omit this parameter. If you specify a <code>listener</code>, then you must specify service discovery information."
                  }
                ]
              }
            }
          },
          "tags": {
            "description": "Optional metadata that you can apply to the virtual node to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/TagRef"
            },
            "minItems": 0,
            "maxItems": 50
          },
          "virtualNodeName": {
            "description": "The name to use for the virtual node.",
            "type": "string",
            "minLength": 1,
            "maxLength": 255
          }
        }
      }
    },
    "required": [
      "meshName",
      "body"
    ],
    "$defs": {
      "BackendDefaults": {
        "type": "object",
        "properties": {
          "clientPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientPolicy"
              },
              {
                "description": "A reference to an object that represents a client policy."
              }
            ]
          }
        },
        "description": "An object that represents the default properties for a backend."
      },
      "ClientPolicy": {
        "type": "object",
        "properties": {
          "tls": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientPolicyTls"
              },
              {
                "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
              }
            ]
          }
        },
        "description": "An object that represents a client policy."
      },
      "ClientPolicyTls": {
        "type": "object",
        "required": [
          "validation"
        ],
        "properties": {
          "certificate": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientTlsCertificate"
              },
              {
                "description": "A reference to an object that represents a client's TLS certificate."
              }
            ]
          },
          "enforce": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Whether the policy is enforced. The default is <code>True</code>, if a value isn't specified."
              }
            ]
          },
          "ports": {
            "allOf": [
              {
                "$ref": "#/$defs/PortSet"
              },
              {
                "description": "One or more ports that the policy is enforced for."
              }
            ]
          },
          "validation": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContext"
              },
              {
                "description": "A reference to an object that represents a TLS validation context."
              }
            ]
          }
        },
        "description": "A reference to an object that represents a Transport Layer Security (TLS) client policy."
      },
      "ClientTlsCertificate": {
        "type": "object",
        "properties": {
          "file": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsFileCertificate"
              },
              {
                "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">Transport Layer Security (TLS)</a>."
              }
            ]
          },
          "sds": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsSdsCertificate"
              },
              {
                "description": "A reference to an object that represents a client's TLS Secret Discovery Service certificate."
              }
            ]
          }
        },
        "description": "An object that represents the client's certificate."
      },
      "ListenerTlsFileCertificate": {
        "type": "object",
        "required": [
          "certificateChain",
          "privateKey"
        ],
        "properties": {
          "certificateChain": {
            "allOf": [
              {
                "$ref": "#/$defs/FilePath"
              },
              {
                "description": "The certificate chain for the certificate."
              }
            ]
          },
          "privateKey": {
            "allOf": [
              {
                "$ref": "#/$defs/FilePath"
              },
              {
                "description": "The private key for a certificate stored on the file system of the virtual node that the proxy is running on."
              }
            ]
          }
        },
        "description": "An object that represents a local file certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
      },
      "FilePath": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255
      },
      "ListenerTlsSdsCertificate": {
        "type": "object",
        "required": [
          "secretName"
        ],
        "properties": {
          "secretName": {
            "allOf": [
              {
                "$ref": "#/$defs/SdsSecretName"
              },
              {
                "description": "A reference to an object that represents the name of the secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain."
              }
            ]
          }
        },
        "description": "An object that represents the listener's Secret Discovery Service certificate. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
      },
      "SdsSecretName": {
        "type": "string"
      },
      "Boolean": {
        "type": "boolean"
      },
      "PortSet": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PortNumber"
        }
      },
      "PortNumber": {
        "type": "integer",
        "minimum": 1,
        "maximum": 65535
      },
      "TlsValidationContext": {
        "type": "object",
        "required": [
          "trust"
        ],
        "properties": {
          "subjectAlternativeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/SubjectAlternativeNames"
              },
              {
                "description": "A reference to an object that represents the SANs for a Transport Layer Security (TLS) validation context. If you don't specify SANs on the <i>terminating</i> mesh endpoint, the Envoy proxy for that node doesn't verify the SAN on a peer client certificate. If you don't specify SANs on the <i>originating</i> mesh endpoint, the SAN on the certificate provided by the terminating endpoint must match the mesh endpoint service discovery configuration. Since SPIRE vended certificates have a SPIFFE ID as a name, you must set the SAN since the name doesn't match the service discovery name."
              }
            ]
          },
          "trust": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContextTrust"
              },
              {
                "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
              }
            ]
          }
        },
        "description": "An object that represents how the proxy will validate its peer during Transport Layer Security (TLS) negotiation."
      },
      "SubjectAlternativeNames": {
        "type": "object",
        "required": [
          "match"
        ],
        "properties": {
          "match": {
            "allOf": [
              {
                "$ref": "#/$defs/SubjectAlternativeNameMatchers"
              },
              {
                "description": "An object that represents the criteria for determining a SANs match."
              }
            ]
          }
        },
        "description": "An object that represents the subject alternative names secured by the certificate."
      },
      "SubjectAlternativeNameMatchers": {
        "type": "object",
        "required": [
          "exact"
        ],
        "properties": {
          "exact": {
            "allOf": [
              {
                "$ref": "#/$defs/SubjectAlternativeNameList"
              },
              {
                "description": "The values sent must match the specified values exactly."
              }
            ]
          }
        },
        "description": "An object that represents the methods by which a subject alternative name on a peer Transport Layer Security (TLS) certificate can be matched."
      },
      "SubjectAlternativeNameList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SubjectAlternativeName"
        }
      },
      "SubjectAlternativeName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 254
      },
      "TlsValidationContextTrust": {
        "type": "object",
        "properties": {
          "acm": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContextAcmTrust"
              },
              {
                "description": "A reference to an object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
              }
            ]
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContextFileTrust"
              },
              {
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
              }
            ]
          },
          "sds": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContextSdsTrust"
              },
              {
                "description": "A reference to an object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust."
              }
            ]
          }
        },
        "description": "An object that represents a Transport Layer Security (TLS) validation context trust."
      },
      "TlsValidationContextAcmTrust": {
        "type": "object",
        "required": [
          "certificateAuthorityArns"
        ],
        "properties": {
          "certificateAuthorityArns": {
            "allOf": [
              {
                "$ref": "#/$defs/CertificateAuthorityArns"
              },
              {
                "description": "One or more ACM Amazon Resource Name (ARN)s."
              }
            ]
          }
        },
        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for an Certificate Manager certificate."
      },
      "CertificateAuthorityArns": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Arn"
        },
        "minItems": 1,
        "maxItems": 3
      },
      "Arn": {
        "type": "string"
      },
      "TlsValidationContextFileTrust": {
        "type": "object",
        "required": [
          "certificateChain"
        ],
        "properties": {
          "certificateChain": {
            "allOf": [
              {
                "$ref": "#/$defs/FilePath"
              },
              {
                "description": "The certificate trust chain for a certificate stored on the file system of the virtual node that the proxy is running on."
              }
            ]
          }
        },
        "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
      },
      "TlsValidationContextSdsTrust": {
        "type": "object",
        "required": [
          "secretName"
        ],
        "properties": {
          "secretName": {
            "allOf": [
              {
                "$ref": "#/$defs/SdsSecretName"
              },
              {
                "description": "A reference to an object that represents the name of the secret for a Transport Layer Security (TLS) Secret Discovery Service validation context trust."
              }
            ]
          }
        },
        "description": "An object that represents a Transport Layer Security (TLS) Secret Discovery Service validation context trust. The proxy must be configured with a local SDS provider via a Unix Domain Socket. See App Mesh <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html\">TLS documentation</a> for more info."
      },
      "Backends": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Backend"
        }
      },
      "Backend": {
        "type": "object",
        "properties": {
          "virtualService": {
            "allOf": [
              {
                "$ref": "#/$defs/VirtualServiceBackend"
              },
              {
                "description": "Specifies a virtual service to use as a backend. "
              }
            ]
          }
        },
        "description": "An object that represents the backends that a virtual node is expected to send outbound traffic to."
      },
      "VirtualServiceBackend": {
        "type": "object",
        "required": [
          "virtualServiceName"
        ],
        "properties": {
          "clientPolicy": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientPolicy"
              },
              {
                "description": "A reference to an object that represents the client policy for a backend."
              }
            ]
          },
          "virtualServiceName": {
            "allOf": [
              {
                "$ref": "#/$defs/ServiceName"
              },
              {
                "description": "The name of the virtual service that is acting as a virtual node backend."
              }
            ]
          }
        },
        "description": "An object that represents a virtual service backend for a virtual node."
      },
      "ServiceName": {
        "type": "string"
      },
      "Listeners": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Listener"
        }
      },
      "Listener": {
        "type": "object",
        "required": [
          "portMapping"
        ],
        "properties": {
          "connectionPool": {
            "allOf": [
              {
                "$ref": "#/$defs/VirtualNodeConnectionPool"
              },
              {
                "description": "The connection pool information for the listener."
              }
            ]
          },
          "healthCheck": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckPolicy"
              },
              {
                "description": "The health check information for the listener."
              }
            ]
          },
          "outlierDetection": {
            "allOf": [
              {
                "$ref": "#/$defs/OutlierDetection"
              },
              {
                "description": "The outlier detection information for the listener."
              }
            ]
          },
          "portMapping": {
            "allOf": [
              {
                "$ref": "#/$defs/PortMapping"
              },
              {
                "description": "The port mapping information for the listener."
              }
            ]
          },
          "timeout": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTimeout"
              },
              {
                "description": "An object that represents timeouts for different protocols."
              }
            ]
          },
          "tls": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTls"
              },
              {
                "description": "A reference to an object that represents the Transport Layer Security (TLS) properties for a listener."
              }
            ]
          }
        },
        "description": "An object that represents a listener for a virtual node."
      },
      "VirtualNodeConnectionPool": {
        "type": "object",
        "properties": {
          "grpc": {
            "allOf": [
              {
                "$ref": "#/$defs/VirtualNodeGrpcConnectionPool"
              },
              {
                "description": "An object that represents a type of connection pool."
              }
            ]
          },
          "http": {
            "allOf": [
              {
                "$ref": "#/$defs/VirtualNodeHttpConnectionPool"
              },
              {
                "description": "An object that represents a type of connection pool."
              }
            ]
          },
          "http2": {
            "allOf": [
              {
                "$ref": "#/$defs/VirtualNodeHttp2ConnectionPool"
              },
              {
                "description": "An object that represents a type of connection pool."
              }
            ]
          },
          "tcp": {
            "allOf": [
              {
                "$ref": "#/$defs/VirtualNodeTcpConnectionPool"
              },
              {
                "description": "An object that represents a type of connection pool."
              }
            ]
          }
        },
        "description": "<p>An object that represents the type of virtual node connection pool.</p> <p>Only one protocol is used at a time and should be the same protocol as the one chosen under port mapping.</p> <p>If not present the default value for <code>maxPendingRequests</code> is <code>2147483647</code>.</p> <p/>"
      },
      "VirtualNodeGrpcConnectionPool": {
        "type": "object",
        "required": [
          "maxRequests"
        ],
        "properties": {
          "maxRequests": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxRequests"
              },
              {
                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
              }
            ]
          }
        },
        "description": "An object that represents a type of connection pool."
      },
      "MaxRequests": {
        "type": "integer",
        "minimum": 1
      },
      "VirtualNodeHttpConnectionPool": {
        "type": "object",
        "required": [
          "maxConnections"
        ],
        "properties": {
          "maxConnections": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConnections"
              },
              {
                "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
              }
            ]
          },
          "maxPendingRequests": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxPendingRequests"
              },
              {
                "description": "Number of overflowing requests after <code>max_connections</code> Envoy will queue to upstream cluster."
              }
            ]
          }
        },
        "description": "An object that represents a type of connection pool."
      },
      "MaxConnections": {
        "type": "integer",
        "minimum": 1
      },
      "MaxPendingRequests": {
        "type": "integer",
        "minimum": 1
      },
      "VirtualNodeHttp2ConnectionPool": {
        "type": "object",
        "required": [
          "maxRequests"
        ],
        "properties": {
          "maxRequests": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxRequests"
              },
              {
                "description": "Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster."
              }
            ]
          }
        },
        "description": "An object that represents a type of connection pool."
      },
      "VirtualNodeTcpConnectionPool": {
        "type": "object",
        "required": [
          "maxConnections"
        ],
        "properties": {
          "maxConnections": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConnections"
              },
              {
                "description": "Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster."
              }
            ]
          }
        },
        "description": "An object that represents a type of connection pool."
      },
      "HealthCheckPolicy": {
        "type": "object",
        "required": [
          "healthyThreshold",
          "intervalMillis",
          "protocol",
          "timeoutMillis",
          "unhealthyThreshold"
        ],
        "properties": {
          "healthyThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckThreshold"
              },
              {
                "description": "The number of consecutive successful health checks that must occur before declaring listener healthy."
              }
            ]
          },
          "intervalMillis": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckIntervalMillis"
              },
              {
                "description": "The time period in milliseconds between each health check execution."
              }
            ]
          },
          "path": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The destination path for the health check request. This value is only used if the specified protocol is HTTP or HTTP/2. For any other protocol, this value is ignored."
              }
            ]
          },
          "port": {
            "allOf": [
              {
                "$ref": "#/$defs/PortNumber"
              },
              {
                "description": "The destination port for the health check request. This port must match the port defined in the <a>PortMapping</a> for the listener."
              }
            ]
          },
          "protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/PortProtocol"
              },
              {
                "description": "The protocol for the health check request. If you specify <code>grpc</code>, then your service must conform to the <a href=\"https://github.com/grpc/grpc/blob/master/doc/health-checking.md\">GRPC Health Checking Protocol</a>."
              }
            ]
          },
          "timeoutMillis": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckTimeoutMillis"
              },
              {
                "description": "The amount of time to wait when receiving a response from the health check, in milliseconds."
              }
            ]
          },
          "unhealthyThreshold": {
            "allOf": [
              {
                "$ref": "#/$defs/HealthCheckThreshold"
              },
              {
                "description": "The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy. "
              }
            ]
          }
        },
        "description": "An object that represents the health check policy for a virtual node's listener."
      },
      "HealthCheckThreshold": {
        "type": "integer",
        "minimum": 2,
        "maximum": 10
      },
      "HealthCheckIntervalMillis": {
        "type": "integer",
        "minimum": 5000,
        "maximum": 300000
      },
      "String": {
        "type": "string"
      },
      "PortProtocol": {
        "type": "string",
        "enum": [
          "http",
          "tcp",
          "http2",
          "grpc"
        ]
      },
      "HealthCheckTimeoutMillis": {
        "type": "integer",
        "minimum": 2000,
        "maximum": 60000
      },
      "OutlierDetection": {
        "type": "object",
        "required": [
          "baseEjectionDuration",
          "interval",
          "maxEjectionPercent",
          "maxServerErrors"
        ],
        "properties": {
          "baseEjectionDuration": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "The base amount of time for which a host is ejected."
              }
            ]
          },
          "interval": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "The time interval between ejection sweep analysis."
              }
            ]
          },
          "maxEjectionPercent": {
            "allOf": [
              {
                "$ref": "#/$defs/OutlierDetectionMaxEjectionPercent"
              },
              {
                "description": "Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value."
              }
            ]
          },
          "maxServerErrors": {
            "allOf": [
              {
                "$ref": "#/$defs/OutlierDetectionMaxServerErrors"
              },
              {
                "description": "Number of consecutive <code>5xx</code> errors required for ejection. "
              }
            ]
          }
        },
        "description": "An object that represents the outlier detection for a virtual node's listener."
      },
      "Duration": {
        "type": "object",
        "properties": {
          "unit": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationUnit"
              },
              {
                "description": "A unit of time."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/DurationValue"
              },
              {
                "description": "A number of time units."
              }
            ]
          }
        },
        "description": "An object that represents a duration of time."
      },
      "DurationUnit": {
        "type": "string",
        "enum": [
          "s",
          "ms"
        ]
      },
      "DurationValue": {
        "type": "integer",
        "minimum": 0
      },
      "OutlierDetectionMaxEjectionPercent": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100
      },
      "OutlierDetectionMaxServerErrors": {
        "type": "integer",
        "minimum": 1
      },
      "PortMapping": {
        "type": "object",
        "required": [
          "port",
          "protocol"
        ],
        "properties": {
          "port": {
            "allOf": [
              {
                "$ref": "#/$defs/PortNumber"
              },
              {
                "description": "The port used for the port mapping."
              }
            ]
          },
          "protocol": {
            "allOf": [
              {
                "$ref": "#/$defs/PortProtocol"
              },
              {
                "description": "The protocol used for the port mapping. Specify one protocol."
              }
            ]
          }
        },
        "description": "An object that represents a port mapping."
      },
      "ListenerTimeout": {
        "type": "object",
        "properties": {
          "grpc": {
            "allOf": [
              {
                "$ref": "#/$defs/GrpcTimeout"
              },
              {
                "description": "An object that represents types of timeouts. "
              }
            ]
          },
          "http": {
            "allOf": [
              {
                "$ref": "#/$defs/HttpTimeout"
              },
              {
                "description": "An object that represents types of timeouts. "
              }
            ]
          },
          "http2": {
            "allOf": [
              {
                "$ref": "#/$defs/HttpTimeout"
              },
              {
                "description": "An object that represents types of timeouts. "
              }
            ]
          },
          "tcp": {
            "allOf": [
              {
                "$ref": "#/$defs/TcpTimeout"
              },
              {
                "description": "An object that represents types of timeouts. "
              }
            ]
          }
        },
        "description": "An object that represents timeouts for different protocols."
      },
      "GrpcTimeout": {
        "type": "object",
        "properties": {
          "idle": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
              }
            ]
          },
          "perRequest": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
              }
            ]
          }
        },
        "description": "An object that represents types of timeouts. "
      },
      "HttpTimeout": {
        "type": "object",
        "properties": {
          "idle": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
              }
            ]
          },
          "perRequest": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "An object that represents a per request timeout. The default value is 15 seconds. If you set a higher timeout, then make sure that the higher value is set for each App Mesh resource in a conversation. For example, if a virtual node backend uses a virtual router provider to route to another virtual node, then the timeout should be greater than 15 seconds for the source and destination virtual node and the route."
              }
            ]
          }
        },
        "description": "An object that represents types of timeouts. "
      },
      "TcpTimeout": {
        "type": "object",
        "properties": {
          "idle": {
            "allOf": [
              {
                "$ref": "#/$defs/Duration"
              },
              {
                "description": "An object that represents an idle timeout. An idle timeout bounds the amount of time that a connection may be idle. The default value is none."
              }
            ]
          }
        },
        "description": "An object that represents types of timeouts. "
      },
      "ListenerTls": {
        "type": "object",
        "required": [
          "certificate",
          "mode"
        ],
        "properties": {
          "certificate": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsCertificate"
              },
              {
                "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) certificate."
              }
            ]
          },
          "mode": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsMode"
              },
              {
                "description": "<p>Specify one of the following modes.</p> <ul> <li> <p> <b/>STRICT – Listener only accepts connections with TLS enabled. </p> </li> <li> <p> <b/>PERMISSIVE – Listener accepts connections with or without TLS enabled.</p> </li> <li> <p> <b/>DISABLED – Listener only accepts connections without TLS. </p> </li> </ul>"
              }
            ]
          },
          "validation": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsValidationContext"
              },
              {
                "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) validation context."
              }
            ]
          }
        },
        "description": "An object that represents the Transport Layer Security (TLS) properties for a listener."
      },
      "ListenerTlsCertificate": {
        "type": "object",
        "properties": {
          "acm": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsAcmCertificate"
              },
              {
                "description": "A reference to an object that represents an Certificate Manager certificate."
              }
            ]
          },
          "file": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsFileCertificate"
              },
              {
                "description": "A reference to an object that represents a local file certificate."
              }
            ]
          },
          "sds": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsSdsCertificate"
              },
              {
                "description": "A reference to an object that represents a listener's Secret Discovery Service certificate."
              }
            ]
          }
        },
        "description": "An object that represents a listener's Transport Layer Security (TLS) certificate."
      },
      "ListenerTlsAcmCertificate": {
        "type": "object",
        "required": [
          "certificateArn"
        ],
        "properties": {
          "certificateArn": {
            "allOf": [
              {
                "$ref": "#/$defs/Arn"
              },
              {
                "description": "The Amazon Resource Name (ARN) for the certificate. The certificate must meet specific requirements and you must have proxy authorization enabled. For more information, see <a href=\"https://docs.aws.amazon.com/app-mesh/latest/userguide/tls.html#virtual-node-tls-prerequisites\">Transport Layer Security (TLS)</a>."
              }
            ]
          }
        },
        "description": "An object that represents an Certificate Manager certificate."
      },
      "ListenerTlsMode": {
        "type": "string",
        "enum": [
          "STRICT",
          "PERMISSIVE",
          "DISABLED"
        ]
      },
      "ListenerTlsValidationContext": {
        "type": "object",
        "required": [
          "trust"
        ],
        "properties": {
          "subjectAlternativeNames": {
            "allOf": [
              {
                "$ref": "#/$defs/SubjectAlternativeNames"
              },
              {
                "description": "A reference to an object that represents the SANs for a listener's Transport Layer Security (TLS) validation context."
              }
            ]
          },
          "trust": {
            "allOf": [
              {
                "$ref": "#/$defs/ListenerTlsValidationContextTrust"
              },
              {
                "description": "A reference to where to retrieve the trust chain when validating a peer’s Transport Layer Security (TLS) certificate."
              }
            ]
          }
        },
        "description": "An object that represents a listener's Transport Layer Security (TLS) validation context."
      },
      "ListenerTlsValidationContextTrust": {
        "type": "object",
        "properties": {
          "file": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContextFileTrust"
              },
              {
                "description": "An object that represents a Transport Layer Security (TLS) validation context trust for a local file."
              }
            ]
          },
          "sds": {
            "allOf": [
              {
                "$ref": "#/$defs/TlsValidationContextSdsTrust"
              },
              {
                "description": "A reference to an object that represents a listener's Transport Layer Security (TLS) Secret Discovery Service validation context trust."
              }
            ]
          }
        },
        "description": "An object that represents a listener's Transport Layer Security (TLS) validation context trust."
      },
      "Logging": {
        "type": "object",
        "properties": {
          "accessLog": {
            "allOf": [
              {
                "$ref": "#/$defs/AccessLog"
              },
              {
                "description": "The access log configuration for a virtual node."
              }
            ]
          }
        },
        "description": "An object that represents the logging information for a virtual node."
      },
      "AccessLog": {
        "type": "object",
        "properties": {
          "file": {
            "allOf": [
              {
                "$ref": "#/$defs/FileAccessLog"
              },
              {
                "description": "The file object to send virtual node access logs to."
              }
            ]
          }
        },
        "description": "An object that represents the access logging information for a virtual node."
      },
      "FileAccessLog": {
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "format": {
            "allOf": [
              {
                "$ref": "#/$defs/LoggingFormat"
              },
              {
                "description": "The specified format for the logs. The format is either <code>json_format</code> or <code>text_format</code>."
              }
            ]
          },
          "path": {
            "allOf": [
              {
                "$ref": "#/$defs/FilePath"
              },
              {
                "description": "<p>The file path to write access logs to. You can use <code>/dev/stdout</code> to send access logs to standard out and configure your Envoy container to use a log driver, such as <code>awslogs</code>, to export the access logs to a log storage service such as Amazon CloudWatch Logs. You can also specify a path in the Envoy container's file system to write the files to disk.</p> <pre><code> &lt;note&gt; &lt;p&gt;The Envoy process must have write permissions to the path that you specify here. Otherwise, Envoy fails to bootstrap properly.&lt;/p&gt; &lt;/note&gt; </code></pre>"
              }
            ]
          }
        },
        "description": "An object that represents an access log file."
      },
      "LoggingFormat": {
        "type": "object",
        "properties": {
          "json": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonFormat"
              },
              {
                "description": "<p/>"
              }
            ]
          },
          "text": {
            "allOf": [
              {
                "$ref": "#/$defs/TextFormat"
              },
              {
                "description": "<p/>"
              }
            ]
          }
        },
        "description": "An object that represents the format for the logs."
      },
      "JsonFormat": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/JsonFormatRef"
        }
      },
      "JsonFormatRef": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonKey"
              },
              {
                "description": "The specified key for the JSON."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonValue"
              },
              {
                "description": "The specified value for the JSON."
              }
            ]
          }
        },
        "description": "An object that represents the key value pairs for the JSON."
      },
      "JsonKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "JsonValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "TextFormat": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "ServiceDiscovery": {
        "type": "object",
        "properties": {
          "awsCloudMap": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsCloudMapServiceDiscovery"
              },
              {
                "description": "Specifies any Cloud Map information for the virtual node."
              }
            ]
          },
          "dns": {
            "allOf": [
              {
                "$ref": "#/$defs/DnsServiceDiscovery"
              },
              {
                "description": "Specifies the DNS information for the virtual node."
              }
            ]
          }
        },
        "description": "An object that represents the service discovery information for a virtual node."
      },
      "AwsCloudMapServiceDiscovery": {
        "type": "object",
        "required": [
          "namespaceName",
          "serviceName"
        ],
        "properties": {
          "attributes": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsCloudMapInstanceAttributes"
              },
              {
                "description": "A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned."
              }
            ]
          },
          "ipPreference": {
            "allOf": [
              {
                "$ref": "#/$defs/IpPreference"
              },
              {
                "description": "The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node."
              }
            ]
          },
          "namespaceName": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsCloudMapName"
              },
              {
                "description": "The name of the Cloud Map namespace to use."
              }
            ]
          },
          "serviceName": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsCloudMapName"
              },
              {
                "description": "The name of the Cloud Map service to use."
              }
            ]
          }
        },
        "description": "<p>An object that represents the Cloud Map service discovery information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>"
      },
      "AwsCloudMapInstanceAttributes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AwsCloudMapInstanceAttribute"
        }
      },
      "AwsCloudMapInstanceAttribute": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsCloudMapInstanceAttributeKey"
              },
              {
                "description": "The name of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/AwsCloudMapInstanceAttributeValue"
              },
              {
                "description": "The value of an Cloud Map service instance attribute key. Any Cloud Map service instance that contains the specified key and value is returned."
              }
            ]
          }
        },
        "description": "<p>An object that represents the Cloud Map attribute information for your virtual node.</p> <note> <p>Cloud Map is not available in the eu-south-1 Region.</p> </note>"
      },
      "AwsCloudMapInstanceAttributeKey": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9!-~]+$",
        "minLength": 1,
        "maxLength": 255
      },
      "AwsCloudMapInstanceAttributeValue": {
        "type": "string",
        "pattern": "^([a-zA-Z0-9!-~][  a-zA-Z0-9!-~]*){0,1}[a-zA-Z0-9!-~]{0,1}$",
        "minLength": 1,
        "maxLength": 1024
      },
      "IpPreference": {
        "type": "string",
        "enum": [
          "IPv6_PREFERRED",
          "IPv4_PREFERRED",
          "IPv4_ONLY",
          "IPv6_ONLY"
        ]
      },
      "AwsCloudMapName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "DnsServiceDiscovery": {
        "type": "object",
        "required": [
          "hostname"
        ],
        "properties": {
          "hostname": {
            "allOf": [
              {
                "$ref": "#/$defs/Hostname"
              },
              {
                "description": "Specifies the DNS service discovery hostname for the virtual node. "
              }
            ]
          },
          "ipPreference": {
            "allOf": [
              {
                "$ref": "#/$defs/IpPreference"
              },
              {
                "description": "The preferred IP version that this virtual node uses. Setting the IP preference on the virtual node only overrides the IP preference set for the mesh on this specific node."
              }
            ]
          },
          "responseType": {
            "allOf": [
              {
                "$ref": "#/$defs/DnsResponseType"
              },
              {
                "description": "Specifies the DNS response type for the virtual node."
              }
            ]
          }
        },
        "description": "An object that represents the DNS service discovery information for your virtual node."
      },
      "Hostname": {
        "type": "string"
      },
      "DnsResponseType": {
        "type": "string",
        "enum": [
          "LOADBALANCER",
          "ENDPOINTS"
        ]
      },
      "TagRef": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "One part of a key-value pair that make up a tag. A <code>key</code> is a general label that acts like a category for more specific tag values."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The optional part of a key-value pair that make up a tag. A <code>value</code> acts as a descriptor within a tag category (key)."
              }
            ]
          }
        },
        "description": "Optional metadata that you apply to a resource to assist with categorization and organization. Each tag consists of a key and an optional value, both of which you define. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://appmesh.us-east-1.amazonaws.com/v20190125/meshes/{meshName}/virtualNodes{?meshOwner}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "<zonbook></zonbook><xhtml></xhtml>",
        "**Key properties:**",
        {
          "$ul": [
            "**virtualNode**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
