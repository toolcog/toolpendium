{
  "name": "UpdateActionType",
  "description": "Updates an action type that was created with any supported integration model, where the action type is to be used by customers of the action type provider. Use a JSON file with the action definition and <code>UpdateActionType</code> to provide the full structure.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodePipeline_20150709.UpdateActionType"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateActionTypeInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateActionTypeInput": {
        "type": "object",
        "required": [
          "actionType"
        ],
        "title": "UpdateActionTypeInput",
        "properties": {
          "actionType": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeDeclaration"
              },
              {
                "description": "The action type definition for the action type to be updated."
              }
            ]
          }
        }
      },
      "ActionTypeDeclaration": {
        "type": "object",
        "required": [
          "executor",
          "id",
          "inputArtifactDetails",
          "outputArtifactDetails"
        ],
        "properties": {
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeDescription"
              },
              {
                "description": "The description for the action type to be updated."
              }
            ]
          },
          "executor": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeExecutor"
              },
              {
                "description": "Information about the executor for an action type that was created with any supported integration model."
              }
            ]
          },
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeIdentifier"
              },
              {
                "description": "The action category, owner, provider, and version of the action type to be updated."
              }
            ]
          },
          "inputArtifactDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeArtifactDetails"
              },
              {
                "description": "Details for the artifacts, such as application files, to be worked on by the action. For example, the minimum and maximum number of input artifacts allowed."
              }
            ]
          },
          "outputArtifactDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeArtifactDetails"
              },
              {
                "description": "Details for the output artifacts, such as a built application, that are the result of the action. For example, the minimum and maximum number of output artifacts allowed."
              }
            ]
          },
          "permissions": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypePermissions"
              },
              {
                "description": "Details identifying the accounts with permissions to use the action type."
              }
            ]
          },
          "properties": {
            "description": "The properties of the action type to be updated."
          },
          "urls": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeUrls"
              },
              {
                "description": "The links associated with the action type to be updated."
              }
            ]
          }
        },
        "description": "The parameters for the action type definition that are provided when the action type is created or updated."
      },
      "ActionTypeDescription": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "ActionTypeExecutor": {
        "type": "object",
        "required": [
          "configuration",
          "type"
        ],
        "properties": {
          "configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutorConfiguration"
              },
              {
                "description": "The action configuration properties for the action type. These properties are specified in the action definition when the action type is created."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutorType"
              },
              {
                "description": "The integration model used to create and update the action type, <code>Lambda</code> or <code>JobWorker</code>. "
              }
            ]
          },
          "policyStatementsTemplate": {
            "allOf": [
              {
                "$ref": "#/$defs/PolicyStatementsTemplate"
              },
              {
                "description": "<p>The policy statement that specifies the permissions in the CodePipeline customer account that are needed to successfully run an action.</p> <p>To grant permission to another account, specify the account ID as the Principal, a domain-style identifier defined by the service, for example <code>codepipeline.amazonaws.com</code>.</p> <note> <p>The size of the passed JSON policy document cannot exceed 2048 characters.</p> </note>"
              }
            ]
          },
          "jobTimeout": {
            "allOf": [
              {
                "$ref": "#/$defs/JobTimeout"
              },
              {
                "description": "The timeout in seconds for the job. An action execution can have multiple jobs. This is the timeout for a single job, not the entire action execution."
              }
            ]
          }
        },
        "description": "The action engine, or executor, for an action type created for a provider, where the action is to be used by customers of the provider. The action engine is associated with the model used to create and update the action, such as the Lambda integration model."
      },
      "ExecutorConfiguration": {
        "type": "object",
        "properties": {
          "lambdaExecutorConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaExecutorConfiguration"
              },
              {
                "description": "Details about the <code>Lambda</code> executor of the action type."
              }
            ]
          },
          "jobWorkerExecutorConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/JobWorkerExecutorConfiguration"
              },
              {
                "description": "Details about the <code>JobWorker</code> executor of the action type."
              }
            ]
          }
        },
        "description": "The action engine, or executor, related to the supported integration model used to create and update the action type. The available executor types are <code>Lambda</code> and <code>JobWorker</code>."
      },
      "LambdaExecutorConfiguration": {
        "type": "object",
        "required": [
          "lambdaFunctionArn"
        ],
        "properties": {
          "lambdaFunctionArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LambdaFunctionArn"
              },
              {
                "description": "The ARN of the Lambda function used by the action engine."
              }
            ]
          }
        },
        "description": "Details about the configuration for the <code>Lambda</code> action engine, or executor."
      },
      "LambdaFunctionArn": {
        "type": "string",
        "pattern": "arn:aws(-[\\w]+)*:lambda:.+:[0-9]{12}:function:.+",
        "minLength": 1,
        "maxLength": 140
      },
      "JobWorkerExecutorConfiguration": {
        "type": "object",
        "properties": {
          "pollingAccounts": {
            "allOf": [
              {
                "$ref": "#/$defs/PollingAccountList"
              },
              {
                "description": "The accounts in which the job worker is configured and might poll for jobs as part of the action execution."
              }
            ]
          },
          "pollingServicePrincipals": {
            "allOf": [
              {
                "$ref": "#/$defs/PollingServicePrincipalList"
              },
              {
                "description": "The service Principals in which the job worker is configured and might poll for jobs as part of the action execution."
              }
            ]
          }
        },
        "description": "Details about the polling configuration for the <code>JobWorker</code> action engine, or executor."
      },
      "PollingAccountList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AccountId"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "AccountId": {
        "type": "string",
        "pattern": "[0-9]{12}"
      },
      "PollingServicePrincipalList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ServicePrincipal"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "ServicePrincipal": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "ExecutorType": {
        "type": "string",
        "enum": [
          "JobWorker",
          "Lambda"
        ]
      },
      "PolicyStatementsTemplate": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "JobTimeout": {
        "type": "integer",
        "minimum": 60,
        "maximum": 43200
      },
      "ActionTypeIdentifier": {
        "type": "object",
        "required": [
          "category",
          "owner",
          "provider",
          "version"
        ],
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionCategory"
              },
              {
                "description": "<p>Defines what kind of action can be taken in the stage, one of the following:</p> <ul> <li> <p> <code>Source</code> </p> </li> <li> <p> <code>Build</code> </p> </li> <li> <p> <code>Test</code> </p> </li> <li> <p> <code>Deploy</code> </p> </li> <li> <p> <code>Approval</code> </p> </li> <li> <p> <code>Invoke</code> </p> </li> </ul>"
              }
            ]
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeOwner"
              },
              {
                "description": "The creator of the action type being called: <code>AWS</code> or <code>ThirdParty</code>."
              }
            ]
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionProvider"
              },
              {
                "description": "The provider of the action type being called. The provider name is supplied when the action type is created."
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "A string that describes the action type version."
              }
            ]
          }
        },
        "description": "Specifies the category, owner, provider, and version of the action type."
      },
      "ActionCategory": {
        "type": "string",
        "enum": [
          "Source",
          "Build",
          "Deploy",
          "Test",
          "Invoke",
          "Approval"
        ]
      },
      "ActionTypeOwner": {
        "type": "string",
        "pattern": "AWS|ThirdParty"
      },
      "ActionProvider": {
        "type": "string",
        "pattern": "[0-9A-Za-z_-]+",
        "minLength": 1,
        "maxLength": 35
      },
      "Version": {
        "type": "string",
        "pattern": "[0-9A-Za-z_-]+",
        "minLength": 1,
        "maxLength": 9
      },
      "ActionTypeArtifactDetails": {
        "type": "object",
        "required": [
          "minimumCount",
          "maximumCount"
        ],
        "properties": {
          "minimumCount": {
            "allOf": [
              {
                "$ref": "#/$defs/MinimumActionTypeArtifactCount"
              },
              {
                "description": "The minimum number of artifacts that can be used with the action type. For example, you should specify a minimum and maximum of zero input artifacts for an action type with a category of <code>source</code>."
              }
            ]
          },
          "maximumCount": {
            "allOf": [
              {
                "$ref": "#/$defs/MaximumActionTypeArtifactCount"
              },
              {
                "description": "The maximum number of artifacts that can be used with the actiontype. For example, you should specify a minimum and maximum of zero input artifacts for an action type with a category of <code>source</code>."
              }
            ]
          }
        },
        "description": "Information about parameters for artifacts associated with the action type, such as the minimum and maximum artifacts allowed."
      },
      "MinimumActionTypeArtifactCount": {
        "type": "integer",
        "minimum": 0,
        "maximum": 10
      },
      "MaximumActionTypeArtifactCount": {
        "type": "integer",
        "minimum": 0,
        "maximum": 10
      },
      "ActionTypePermissions": {
        "type": "object",
        "required": [
          "allowedAccounts"
        ],
        "properties": {
          "allowedAccounts": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowedAccounts"
              },
              {
                "description": "A list of Amazon Web Services account IDs with access to use the action type in their pipelines."
              }
            ]
          }
        },
        "description": "Details identifying the users with permissions to use the action type."
      },
      "AllowedAccounts": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AllowedAccount"
        },
        "minItems": 1,
        "maxItems": 1000
      },
      "AllowedAccount": {
        "type": "string",
        "pattern": "[0-9]{12}|\\*"
      },
      "ActionTypeUrls": {
        "type": "object",
        "properties": {
          "configurationUrl": {
            "allOf": [
              {
                "$ref": "#/$defs/Url"
              },
              {
                "description": "The URL returned to the CodePipeline console that contains a link to the page where customers can configure the external action."
              }
            ]
          },
          "entityUrlTemplate": {
            "allOf": [
              {
                "$ref": "#/$defs/UrlTemplate"
              },
              {
                "description": "The URL returned to the CodePipeline console that provides a deep link to the resources of the external system, such as a status page. This link is provided as part of the action display in the pipeline."
              }
            ]
          },
          "executionUrlTemplate": {
            "allOf": [
              {
                "$ref": "#/$defs/UrlTemplate"
              },
              {
                "description": "The link to an execution page for the action type in progress. For example, for a CodeDeploy action, this link is shown on the pipeline view page in the CodePipeline console, and it links to a CodeDeploy status page."
              }
            ]
          },
          "revisionUrlTemplate": {
            "allOf": [
              {
                "$ref": "#/$defs/UrlTemplate"
              },
              {
                "description": "The URL returned to the CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action."
              }
            ]
          }
        },
        "description": "Returns information about URLs for web pages that display to customers as links on the pipeline view, such as an external configuration page for the action type."
      },
      "Url": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      },
      "UrlTemplate": {
        "type": "string",
        "minLength": 1,
        "maxLength": 2048
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codepipeline.us-east-1.amazonaws.com/#X-Amz-Target=CodePipeline_20150709.UpdateActionType"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
