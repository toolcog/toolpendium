{
  "name": "PutWebhook",
  "description": "Defines a webhook and returns a unique webhook URL generated by CodePipeline. This URL can be supplied to third party source hosting providers to call every time there's a code change. When CodePipeline receives a POST request on this URL, the pipeline defined in the webhook is started as long as the POST request satisfied the authentication and filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty and DeregisterWebhookWithThirdParty APIs can be used to automatically configure supported third parties to call the generated webhook URL.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodePipeline_20150709.PutWebhook"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/PutWebhookInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "PutWebhookInput": {
        "type": "object",
        "required": [
          "webhook"
        ],
        "title": "PutWebhookInput",
        "properties": {
          "webhook": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookDefinition"
              },
              {
                "description": "The detail provided in an input file to create the webhook, such as the webhook name, the pipeline name, and the action name. Give the webhook a unique name that helps you identify it. You might name the webhook after the pipeline and action it targets so that you can easily recognize what it's used for later."
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "The tags for the webhook."
              }
            ]
          }
        }
      },
      "WebhookDefinition": {
        "type": "object",
        "required": [
          "name",
          "targetPipeline",
          "targetAction",
          "filters",
          "authentication",
          "authenticationConfiguration"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookName"
              },
              {
                "description": "The name of the webhook."
              }
            ]
          },
          "targetPipeline": {
            "allOf": [
              {
                "$ref": "#/$defs/PipelineName"
              },
              {
                "description": "The name of the pipeline you want to connect to the webhook."
              }
            ]
          },
          "targetAction": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionName"
              },
              {
                "description": "The name of the action in a pipeline you want to connect to the webhook. The action must be from the source (first) stage of the pipeline."
              }
            ]
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookFilters"
              },
              {
                "description": "A list of rules applied to the body/payload sent in the POST request to a webhook URL. All defined rules must pass for the request to be accepted and the pipeline started."
              }
            ]
          },
          "authentication": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookAuthenticationType"
              },
              {
                "description": "<p>Supported options are GITHUB_HMAC, IP, and UNAUTHENTICATED.</p> <ul> <li> <p>For information about the authentication scheme implemented by GITHUB_HMAC, see <a href=\"https://developer.github.com/webhooks/securing/\">Securing your webhooks</a> on the GitHub Developer website.</p> </li> <li> <p> IP rejects webhooks trigger requests unless they originate from an IP address in the IP range whitelisted in the authentication configuration.</p> </li> <li> <p> UNAUTHENTICATED accepts all webhook trigger requests regardless of origin.</p> </li> </ul>"
              }
            ]
          },
          "authenticationConfiguration": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookAuthConfiguration"
              },
              {
                "description": "Properties that configure the authentication applied to incoming webhook trigger requests. The required properties depend on the authentication type. For GITHUB_HMAC, only the <code>SecretToken </code>property must be set. For IP, only the <code>AllowedIPRange </code>property must be set to a valid CIDR range. For UNAUTHENTICATED, no properties can be set."
              }
            ]
          }
        },
        "description": "Represents information about a webhook and its definition."
      },
      "WebhookName": {
        "type": "string",
        "pattern": "[A-Za-z0-9.@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "PipelineName": {
        "type": "string",
        "pattern": "[A-Za-z0-9.@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "ActionName": {
        "type": "string",
        "pattern": "[A-Za-z0-9.@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "WebhookFilters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/WebhookFilterRule"
        },
        "maxItems": 5
      },
      "WebhookFilterRule": {
        "type": "object",
        "required": [
          "jsonPath"
        ],
        "properties": {
          "jsonPath": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonPath"
              },
              {
                "description": "A JsonPath expression that is applied to the body/payload of the webhook. The value selected by the JsonPath expression must match the value specified in the <code>MatchEquals</code> field. Otherwise, the request is ignored. For more information, see <a href=\"https://github.com/json-path/JsonPath\">Java JsonPath implementation</a> in GitHub."
              }
            ]
          },
          "matchEquals": {
            "allOf": [
              {
                "$ref": "#/$defs/MatchEquals"
              },
              {
                "description": "The value selected by the <code>JsonPath</code> expression must match what is supplied in the <code>MatchEquals</code> field. Otherwise, the request is ignored. Properties from the target action configuration can be included as placeholders in this value by surrounding the action configuration key with curly brackets. For example, if the value supplied here is \"refs/heads/{Branch}\" and the target action has an action configuration property called \"Branch\" with a value of \"main\", the <code>MatchEquals</code> value is evaluated as \"refs/heads/main\". For a list of action configuration properties for built-in action types, see <a href=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements\">Pipeline Structure Reference Action Requirements</a>."
              }
            ]
          }
        },
        "description": "The event criteria that specify when a webhook notification is sent to your URL."
      },
      "JsonPath": {
        "type": "string",
        "minLength": 1,
        "maxLength": 150
      },
      "MatchEquals": {
        "type": "string",
        "minLength": 1,
        "maxLength": 150
      },
      "WebhookAuthenticationType": {
        "type": "string",
        "enum": [
          "GITHUB_HMAC",
          "IP",
          "UNAUTHENTICATED"
        ]
      },
      "WebhookAuthConfiguration": {
        "type": "object",
        "properties": {
          "AllowedIPRange": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookAuthConfigurationAllowedIPRange"
              },
              {
                "description": "The property used to configure acceptance of webhooks in an IP address range. For IP, only the <code>AllowedIPRange</code> property must be set. This property must be set to a valid CIDR range."
              }
            ]
          },
          "SecretToken": {
            "allOf": [
              {
                "$ref": "#/$defs/WebhookAuthConfigurationSecretToken"
              },
              {
                "description": "The property used to configure GitHub authentication. For GITHUB_HMAC, only the <code>SecretToken</code> property must be set."
              }
            ]
          }
        },
        "description": "The authentication applied to incoming webhook trigger requests."
      },
      "WebhookAuthConfigurationAllowedIPRange": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "WebhookAuthConfigurationSecretToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "properties": {
          "key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The tag's key."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The tag's value."
              }
            ]
          }
        },
        "description": "A tag is a key-value pair that is used to manage the resource."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codepipeline.us-east-1.amazonaws.com/#X-Amz-Target=CodePipeline_20150709.PutWebhook"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**webhook**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
