{
  "name": "UpdatePipeline",
  "description": "Updates a specified pipeline with edits or changes to its structure. Use a JSON file with the pipeline structure and <code>UpdatePipeline</code> to provide the full structure of the pipeline. Updating the pipeline increases the version number of the pipeline by 1.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "CodePipeline_20150709.UpdatePipeline"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdatePipelineInput"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdatePipelineInput": {
        "type": "object",
        "required": [
          "pipeline"
        ],
        "title": "UpdatePipelineInput",
        "properties": {
          "pipeline": {
            "allOf": [
              {
                "$ref": "#/$defs/PipelineDeclaration"
              },
              {
                "description": "The name of the pipeline to be updated."
              }
            ]
          }
        },
        "description": "Represents the input of an <code>UpdatePipeline</code> action."
      },
      "PipelineDeclaration": {
        "type": "object",
        "required": [
          "name",
          "roleArn",
          "stages"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/PipelineName"
              },
              {
                "description": "The name of the pipeline."
              }
            ]
          },
          "roleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) for CodePipeline to use to either perform actions with no <code>actionRoleArn</code>, or to use to assume roles for actions with an <code>actionRoleArn</code>."
              }
            ]
          },
          "artifactStore": {
            "allOf": [
              {
                "$ref": "#/$defs/ArtifactStore"
              },
              {
                "description": "<p>Represents information about the S3 bucket where artifacts are stored for the pipeline.</p> <note> <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p> </note>"
              }
            ]
          },
          "artifactStores": {
            "allOf": [
              {
                "$ref": "#/$defs/ArtifactStoreMap"
              },
              {
                "description": "<p>A mapping of <code>artifactStore</code> objects and their corresponding Amazon Web Services Regions. There must be an artifact store for the pipeline Region and for each cross-region action in the pipeline.</p> <note> <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p> </note>"
              }
            ]
          },
          "stages": {
            "allOf": [
              {
                "$ref": "#/$defs/PipelineStageDeclarationList"
              },
              {
                "description": "The stage in which to perform the action."
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/PipelineVersion"
              },
              {
                "description": "The version number of the pipeline. A new pipeline always has a version number of 1. This number is incremented when a pipeline is updated."
              }
            ]
          }
        },
        "description": "Represents the structure of actions and stages to be performed in the pipeline."
      },
      "PipelineName": {
        "type": "string",
        "pattern": "[A-Za-z0-9.@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "RoleArn": {
        "type": "string",
        "pattern": "arn:aws(-[\\w]+)*:iam::[0-9]{12}:role/.*",
        "maxLength": 1024
      },
      "ArtifactStore": {
        "type": "object",
        "required": [
          "type",
          "location"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/ArtifactStoreType"
              },
              {
                "description": "The type of the artifact store, such as S3."
              }
            ]
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/$defs/ArtifactStoreLocation"
              },
              {
                "description": "The S3 bucket used for storing the artifacts for a pipeline. You can specify the name of an S3 bucket but not a folder in the bucket. A folder to contain the pipeline artifacts is created for you based on the name of the pipeline. You can use any S3 bucket in the same Amazon Web Services Region as the pipeline to store your pipeline artifacts."
              }
            ]
          },
          "encryptionKey": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionKey"
              },
              {
                "description": "The encryption key used to encrypt the data in the artifact store, such as an Amazon Web Services Key Management Service key. If this is undefined, the default key for Amazon S3 is used."
              }
            ]
          }
        },
        "description": "<p>The S3 bucket where artifacts for the pipeline are stored.</p> <note> <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p> </note>"
      },
      "ArtifactStoreType": {
        "type": "string",
        "enum": [
          "S3"
        ]
      },
      "ArtifactStoreLocation": {
        "type": "string",
        "pattern": "[a-zA-Z0-9\\-\\.]+",
        "minLength": 3,
        "maxLength": 63
      },
      "EncryptionKey": {
        "type": "object",
        "required": [
          "id",
          "type"
        ],
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionKeyId"
              },
              {
                "description": "<p>The ID used to identify the key. For an Amazon Web Services KMS key, you can use the key ID, the key ARN, or the alias ARN.</p> <note> <p>Aliases are recognized only in the account that created the KMS key. For cross-account actions, you can only use the key ID or key ARN to identify the key. Cross-account actions involve using the role from the other account (AccountB), so specifying the key ID will use the key from the other account (AccountB).</p> </note>"
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/EncryptionKeyType"
              },
              {
                "description": "The type of encryption key, such as an Amazon Web Services KMS key. When creating or updating a pipeline, the value must be set to 'KMS'."
              }
            ]
          }
        },
        "description": "Represents information about the key used to encrypt data in the artifact store, such as an Amazon Web Services Key Management Service (Key Management Service) key."
      },
      "EncryptionKeyId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 400
      },
      "EncryptionKeyType": {
        "type": "string",
        "enum": [
          "KMS"
        ]
      },
      "ArtifactStoreMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ArtifactStore"
        }
      },
      "PipelineStageDeclarationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/StageDeclaration"
        }
      },
      "StageDeclaration": {
        "type": "object",
        "required": [
          "name",
          "actions"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/StageName"
              },
              {
                "description": "The name of the stage."
              }
            ]
          },
          "blockers": {
            "allOf": [
              {
                "$ref": "#/$defs/StageBlockerDeclarationList"
              },
              {
                "description": "Reserved for future use."
              }
            ]
          },
          "actions": {
            "allOf": [
              {
                "$ref": "#/$defs/StageActionDeclarationList"
              },
              {
                "description": "The actions included in a stage."
              }
            ]
          }
        },
        "description": "Represents information about a stage and its definition."
      },
      "StageName": {
        "type": "string",
        "pattern": "[A-Za-z0-9.@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "StageBlockerDeclarationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/BlockerDeclaration"
        }
      },
      "BlockerDeclaration": {
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/BlockerName"
              },
              {
                "description": "Reserved for future use."
              }
            ]
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/BlockerType"
              },
              {
                "description": "Reserved for future use."
              }
            ]
          }
        },
        "description": "Reserved for future use."
      },
      "BlockerName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "BlockerType": {
        "type": "string",
        "enum": [
          "Schedule"
        ]
      },
      "StageActionDeclarationList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ActionDeclaration"
        }
      },
      "ActionDeclaration": {
        "type": "object",
        "required": [
          "name",
          "actionTypeId"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionName"
              },
              {
                "description": "The action declaration's name."
              }
            ]
          },
          "actionTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionTypeId"
              },
              {
                "description": "Specifies the action type and the provider of the action."
              }
            ]
          },
          "runOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionRunOrder"
              },
              {
                "description": "The order in which actions are run."
              }
            ]
          },
          "configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionConfigurationMap"
              },
              {
                "description": "<p>The action's configuration. These are key-value pairs that specify input values for an action. For more information, see <a href=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements\">Action Structure Requirements in CodePipeline</a>. For the list of configuration properties for the CloudFormation action type in CodePipeline, see <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html\">Configuration Properties Reference</a> in the <i>CloudFormation User Guide</i>. For template snippets with examples, see <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-parameter-override-functions.html\">Using Parameter Override Functions with CodePipeline Pipelines</a> in the <i>CloudFormation User Guide</i>.</p> <p>The values can be represented in either JSON or YAML format. For example, the JSON configuration item format is as follows: </p> <p> <i>JSON:</i> </p> <p> <code>\"Configuration\" : { Key : Value },</code> </p>"
              }
            ]
          },
          "outputArtifacts": {
            "allOf": [
              {
                "$ref": "#/$defs/OutputArtifactList"
              },
              {
                "description": "The name or ID of the result of the action declaration, such as a test or build artifact."
              }
            ]
          },
          "inputArtifacts": {
            "allOf": [
              {
                "$ref": "#/$defs/InputArtifactList"
              },
              {
                "description": "The name or ID of the artifact consumed by the action, such as a test or build artifact."
              }
            ]
          },
          "roleArn": {
            "allOf": [
              {
                "$ref": "#/$defs/RoleArn"
              },
              {
                "description": "The ARN of the IAM service role that performs the declared action. This is assumed through the roleArn for the pipeline."
              }
            ]
          },
          "region": {
            "allOf": [
              {
                "$ref": "#/$defs/AWSRegionName"
              },
              {
                "description": "The action declaration's Amazon Web Services Region, such as us-east-1."
              }
            ]
          },
          "namespace": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionNamespace"
              },
              {
                "description": "The variable namespace associated with the action. All variables produced as output by this action fall under this namespace."
              }
            ]
          }
        },
        "description": "Represents information about an action declaration."
      },
      "ActionName": {
        "type": "string",
        "pattern": "[A-Za-z0-9.@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "ActionTypeId": {
        "type": "object",
        "required": [
          "category",
          "owner",
          "provider",
          "version"
        ],
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionCategory"
              },
              {
                "description": "<p>A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Valid categories are limited to one of the following values. </p> <ul> <li> <p>Source</p> </li> <li> <p>Build</p> </li> <li> <p>Test</p> </li> <li> <p>Deploy</p> </li> <li> <p>Invoke</p> </li> <li> <p>Approval</p> </li> </ul>"
              }
            ]
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionOwner"
              },
              {
                "description": "The creator of the action being called. There are three valid values for the <code>Owner</code> field in the action category section within your pipeline structure: <code>AWS</code>, <code>ThirdParty</code>, and <code>Custom</code>. For more information, see <a href=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers\">Valid Action Types and Providers in CodePipeline</a>."
              }
            ]
          },
          "provider": {
            "allOf": [
              {
                "$ref": "#/$defs/ActionProvider"
              },
              {
                "description": "The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of CodeDeploy, which would be specified as <code>CodeDeploy</code>. For more information, see <a href=\"https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#actions-valid-providers\">Valid Action Types and Providers in CodePipeline</a>."
              }
            ]
          },
          "version": {
            "allOf": [
              {
                "$ref": "#/$defs/Version"
              },
              {
                "description": "A string that describes the action version."
              }
            ]
          }
        },
        "description": "Represents information about an action type."
      },
      "ActionCategory": {
        "type": "string",
        "enum": [
          "Source",
          "Build",
          "Deploy",
          "Test",
          "Invoke",
          "Approval"
        ]
      },
      "ActionOwner": {
        "type": "string",
        "enum": [
          "AWS",
          "ThirdParty",
          "Custom"
        ]
      },
      "ActionProvider": {
        "type": "string",
        "pattern": "[0-9A-Za-z_-]+",
        "minLength": 1,
        "maxLength": 35
      },
      "Version": {
        "type": "string",
        "pattern": "[0-9A-Za-z_-]+",
        "minLength": 1,
        "maxLength": 9
      },
      "ActionRunOrder": {
        "type": "integer",
        "minimum": 1,
        "maximum": 999
      },
      "ActionConfigurationMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ActionConfigurationValue"
        }
      },
      "ActionConfigurationValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1000
      },
      "OutputArtifactList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/OutputArtifact"
        }
      },
      "OutputArtifact": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ArtifactName"
              },
              {
                "description": "<p>The name of the output of an artifact, such as \"My App\".</p> <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p> <p>Output artifact names must be unique within a pipeline.</p>"
              }
            ]
          }
        },
        "description": "Represents information about the output of an action."
      },
      "ArtifactName": {
        "type": "string",
        "pattern": "[a-zA-Z0-9_\\-]+",
        "minLength": 1,
        "maxLength": 100
      },
      "InputArtifactList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/InputArtifact"
        }
      },
      "InputArtifact": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/$defs/ArtifactName"
              },
              {
                "description": "<p>The name of the artifact to be worked on (for example, \"My App\").</p> <p>Artifacts are the files that are worked on by actions in the pipeline. See the action configuration for each action for details about artifact parameters. For example, the S3 source action input artifact is a file name (or file path), and the files are generally provided as a ZIP file. Example artifact name: SampleApp_Windows.zip</p> <p>The input artifact of an action must exactly match the output artifact declared in a preceding action, but the input artifact does not have to be the next action in strict sequence from the action that provided the output artifact. Actions in parallel can declare different output artifacts, which are in turn consumed by different following actions.</p>"
              }
            ]
          }
        },
        "description": "Represents information about an artifact to be worked on, such as a test or build artifact."
      },
      "AWSRegionName": {
        "type": "string",
        "minLength": 4,
        "maxLength": 30
      },
      "ActionNamespace": {
        "type": "string",
        "pattern": "[A-Za-z0-9@\\-_]+",
        "minLength": 1,
        "maxLength": 100
      },
      "PipelineVersion": {
        "type": "integer",
        "minimum": 1
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://codepipeline.us-east-1.amazonaws.com/#X-Amz-Target=CodePipeline_20150709.UpdatePipeline"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents the output of an <code>UpdatePipeline</code> action.",
        "**Key properties:**",
        {
          "$ul": [
            "**pipeline**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
