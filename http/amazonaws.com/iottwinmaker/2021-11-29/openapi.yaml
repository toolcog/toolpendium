openapi: 3.0.0
info:
  version: '2021-11-29'
  x-release: v4
  title: AWS IoT TwinMaker
  description: 'IoT TwinMaker is a service with which you can build operational digital twins of physical systems. IoT TwinMaker overlays measurements and analysis from real-world sensors, cameras, and enterprise applications so you can create data visualizations to monitor your physical factory, building, or industrial plant. You can use this real-world data to monitor operations and diagnose and repair errors.'
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: iottwinmaker
  x-aws-signingName: iottwinmaker
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/iottwinmaker-2021-11-29.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/iottwinmaker/'
servers:
  - url: 'http://iottwinmaker.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS IoT TwinMaker multi-region endpoint
  - url: 'https://iottwinmaker.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AWS IoT TwinMaker multi-region endpoint
  - url: 'http://iottwinmaker.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT TwinMaker endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://iottwinmaker.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AWS IoT TwinMaker endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  '/workspaces/{workspaceId}/entity-properties':
    post:
      operationId: BatchPutPropertyValues
      description: Sets values for multiple time series properties.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPutPropertyValuesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the properties to set.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entries
              properties:
                entries:
                  description: An object that maps strings to the property value entries to set. Each string in the mapping must be unique to this object.
                  type: array
                  items:
                    $ref: '#/components/schemas/PropertyValueEntry'
                  minItems: 1
                  maxItems: 10
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/component-types/{componentTypeId}':
    post:
      operationId: CreateComponentType
      description: Creates a component type.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateComponentTypeResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the component type.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: componentTypeId
          in: path
          required: true
          description: The ID of the component type.
          schema:
            type: string
            pattern: '[a-zA-Z_\.\-0-9:]+'
            minLength: 1
            maxLength: 256
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isSingleton:
                  description: A Boolean value that specifies whether an entity can have more than one component of this type.
                  type: boolean
                description:
                  description: The description of the component type.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                propertyDefinitions:
                  description: An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/PropertyDefinitionRequest'
                extendsFrom:
                  description: Specifies the parent component type to extend.
                  type: array
                  items:
                    $ref: '#/components/schemas/ComponentTypeId'
                functions:
                  description: An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/FunctionRequest'
                tags:
                  description: Metadata that you can use to manage the component type.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                propertyGroups:
                  description: <p/>
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/PropertyGroupRequest'
                componentTypeName:
                  description: A friendly name for the component type.
                  type: string
                  pattern: '.*[^\u0000-\u001F\u007F]*.*'
                  minLength: 0
                  maxLength: 256
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteComponentType
      description: Deletes a component type.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComponentTypeResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the component type.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: componentTypeId
          in: path
          required: true
          description: The ID of the component type to delete.
          schema:
            type: string
            pattern: '[a-zA-Z_\.\-0-9:]+'
            minLength: 1
            maxLength: 256
    get:
      operationId: GetComponentType
      description: Retrieves information about a component type.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetComponentTypeResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the component type.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: componentTypeId
          in: path
          required: true
          description: The ID of the component type.
          schema:
            type: string
            pattern: '[a-zA-Z_\.\-0-9:]+'
            minLength: 1
            maxLength: 256
    put:
      operationId: UpdateComponentType
      description: Updates information in a component type.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateComponentTypeResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: componentTypeId
          in: path
          required: true
          description: The ID of the component type.
          schema:
            type: string
            pattern: '[a-zA-Z_\.\-0-9:]+'
            minLength: 1
            maxLength: 256
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isSingleton:
                  description: A Boolean value that specifies whether an entity can have more than one component of this type.
                  type: boolean
                description:
                  description: The description of the component type.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                propertyDefinitions:
                  description: An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/PropertyDefinitionRequest'
                extendsFrom:
                  description: Specifies the component type that this component type extends.
                  type: array
                  items:
                    $ref: '#/components/schemas/ComponentTypeId'
                functions:
                  description: An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/FunctionRequest'
                propertyGroups:
                  description: The property groups.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/PropertyGroupRequest'
                componentTypeName:
                  description: The component type name.
                  type: string
                  pattern: '.*[^\u0000-\u001F\u007F]*.*'
                  minLength: 0
                  maxLength: 256
  '/workspaces/{workspaceId}/entities':
    post:
      operationId: CreateEntity
      description: Creates an entity.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEntityResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the entity.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - entityName
              properties:
                entityId:
                  description: The ID of the entity.
                  type: string
                  pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
                  minLength: 1
                  maxLength: 128
                entityName:
                  description: The name of the entity.
                  type: string
                  pattern: '[^\u0000-\u001F\u007F]+'
                  minLength: 1
                  maxLength: 256
                description:
                  description: The description of the entity.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                components:
                  description: An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ComponentRequest'
                parentEntityId:
                  description: The ID of the entity's parent entity.
                  type: string
                  pattern: '\$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
                  minLength: 1
                  maxLength: 128
                tags:
                  description: Metadata that you can use to manage the entity.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/scenes':
    post:
      operationId: CreateScene
      description: Creates a scene.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSceneResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the scene.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sceneId
                - contentLocation
              properties:
                sceneId:
                  description: The ID of the scene.
                  type: string
                  pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
                  minLength: 1
                  maxLength: 128
                contentLocation:
                  description: The relative path that specifies the location of the content definition file.
                  type: string
                  pattern: '[sS]3://[A-Za-z0-9._/-]+'
                  minLength: 0
                  maxLength: 256
                description:
                  description: The description for this scene.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                capabilities:
                  description: A list of capabilities that the scene uses to render itself.
                  type: array
                  items:
                    $ref: '#/components/schemas/SceneCapability'
                  minItems: 0
                  maxItems: 50
                tags:
                  description: Metadata that you can use to manage the scene.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
                sceneMetadata:
                  description: The request metadata.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/SceneMetadataValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/sync-jobs/{syncSource}':
    post:
      operationId: CreateSyncJob
      description: This action creates a SyncJob.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSyncJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The workspace ID.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: syncSource
          in: path
          required: true
          description: <p>The sync source.</p> <note> <p>Currently the only supported syncSoource is <code>SITEWISE </code>.</p> </note>
          schema:
            type: string
            pattern: '[a-zA-Z_0-9]+'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - syncRole
              properties:
                syncRole:
                  description: 'The SyncJob IAM role. This IAM role is used by the SyncJob to read from the syncSource, and create, update, or delete the corresponding resources.'
                  type: string
                  pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*'
                  minLength: 20
                  maxLength: 2048
                tags:
                  description: The SyncJob tags.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteSyncJob
      description: Delete the SyncJob.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSyncJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The workspace ID.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: syncSource
          in: path
          required: true
          description: <p>The sync source.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note>
          schema:
            type: string
            pattern: '[a-zA-Z_0-9]+'
  '/workspaces/{workspaceId}':
    post:
      operationId: CreateWorkspace
      description: Creates a workplace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWorkspaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - s3Location
                - role
              properties:
                description:
                  description: The description of the workspace.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                s3Location:
                  description: The ARN of the S3 bucket where resources associated with the workspace are stored.
                  type: string
                  pattern: '.*(^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([a-zA-Z0-9_-]+$).*'
                  minLength: 0
                  maxLength: 1024
                role:
                  description: The ARN of the execution role associated with the workspace.
                  type: string
                  pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*'
                  minLength: 20
                  maxLength: 2048
                tags:
                  description: Metadata that you can use to manage the workspace
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    delete:
      operationId: DeleteWorkspace
      description: Deletes a workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkspaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace to delete.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
    get:
      operationId: GetWorkspace
      description: Retrieves information about a workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkspaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+$|^arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_-]+'
            minLength: 1
            maxLength: 2048
    put:
      operationId: UpdateWorkspace
      description: Updates a workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateWorkspaceResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The description of the workspace.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                role:
                  description: The ARN of the execution role associated with the workspace.
                  type: string
                  pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*'
                  minLength: 20
                  maxLength: 2048
  '/workspaces/{workspaceId}/entities/{entityId}':
    delete:
      operationId: DeleteEntity
      description: Deletes an entity.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteEntityResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the entity to delete.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: entityId
          in: path
          required: true
          description: The ID of the entity to delete.
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: isRecursive
          in: query
          required: false
          description: A Boolean value that specifies whether the operation deletes child entities.
          schema:
            type: boolean
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetEntity
      description: Retrieves information about an entity.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEntityResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: entityId
          in: path
          required: true
          description: The ID of the entity.
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
    put:
      operationId: UpdateEntity
      description: Updates an entity.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEntityResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '486':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the entity.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: entityId
          in: path
          required: true
          description: The ID of the entity.
          schema:
            type: string
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                entityName:
                  description: The name of the entity.
                  type: string
                  pattern: '[^\u0000-\u001F\u007F]+'
                  minLength: 1
                  maxLength: 256
                description:
                  description: The description of the entity.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                componentUpdates:
                  description: An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ComponentUpdateRequest'
                parentEntityUpdate:
                  description: The parent entity update request.
                  type: object
                  properties:
                    updateType:
                      allOf:
                        - $ref: '#/components/schemas/ParentEntityUpdateType'
                        - description: The type of the update.
                    parentEntityId:
                      allOf:
                        - $ref: '#/components/schemas/ParentEntityId'
                        - description: The ID of the parent entity.
  '/workspaces/{workspaceId}/scenes/{sceneId}':
    delete:
      operationId: DeleteScene
      description: Deletes a scene.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSceneResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: sceneId
          in: path
          required: true
          description: The ID of the scene to delete.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetScene
      description: Retrieves information about a scene.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSceneResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the scene.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: sceneId
          in: path
          required: true
          description: The ID of the scene.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
    put:
      operationId: UpdateScene
      description: Updates a scene.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSceneResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the scene.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: sceneId
          in: path
          required: true
          description: The ID of the scene.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentLocation:
                  description: The relative path that specifies the location of the content definition file.
                  type: string
                  pattern: '[sS]3://[A-Za-z0-9._/-]+'
                  minLength: 0
                  maxLength: 256
                description:
                  description: The description of this scene.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 2048
                capabilities:
                  description: A list of capabilities that the scene uses to render.
                  type: array
                  items:
                    $ref: '#/components/schemas/SceneCapability'
                  minItems: 0
                  maxItems: 50
                sceneMetadata:
                  description: The scene metadata.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/SceneMetadataValue'
  /queries/execution:
    post:
      operationId: ExecuteQuery
      description: Run queries to access information from your knowledge graph of entities within individual workspaces.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteQueryResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: QueryTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTimeoutException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - workspaceId
                - queryStatement
              properties:
                workspaceId:
                  description: The ID of the workspace.
                  type: string
                  pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
                  minLength: 1
                  maxLength: 128
                queryStatement:
                  description: The query statement.
                  type: string
                  pattern: '[\s\S]+'
                  minLength: 1
                  maxLength: 1000
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 1
                  maximum: 100
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /pricingplan:
    get:
      operationId: GetPricingPlan
      description: Gets the pricing plan.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPricingPlanResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters: []
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: UpdatePricingPlan
      description: Update the pricing plan.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePricingPlanResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pricingMode
              properties:
                pricingMode:
                  description: The pricing mode.
                  type: string
                  enum:
                    - BASIC
                    - STANDARD
                    - TIERED_BUNDLE
                bundleNames:
                  description: The bundle names.
                  type: array
                  items:
                    $ref: '#/components/schemas/BundleName'
                  minItems: 1
                  maxItems: 10
  '/workspaces/{workspaceId}/entity-properties/value':
    post:
      operationId: GetPropertyValue
      description: '<p>Gets the property values for a component, component type, entity, or workspace.</p> <p>You must specify a value for either <code>componentName</code>, <code>componentTypeId</code>, <code>entityId</code>, or <code>workspaceId</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPropertyValueResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConnectorFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorFailureException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: ConnectorTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTimeoutException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace whose values the operation returns.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - selectedProperties
              properties:
                componentName:
                  description: The name of the component whose property values the operation returns.
                  type: string
                  pattern: '[a-zA-Z_\-0-9]+'
                  minLength: 1
                  maxLength: 256
                componentTypeId:
                  description: The ID of the component type whose property values the operation returns.
                  type: string
                  pattern: '[a-zA-Z_\.\-0-9:]+'
                  minLength: 1
                  maxLength: 256
                entityId:
                  description: The ID of the entity whose property values the operation returns.
                  type: string
                  pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
                  minLength: 1
                  maxLength: 128
                selectedProperties:
                  description: The properties whose values the operation returns.
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                  minItems: 1
                  maxItems: 10
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
                propertyGroupName:
                  description: The property group name.
                  type: string
                  pattern: '[a-zA-Z_\-0-9]+'
                  minLength: 1
                  maxLength: 256
                tabularConditions:
                  description: The tabular conditions.
                  type: object
                  properties:
                    orderBy:
                      allOf:
                        - $ref: '#/components/schemas/OrderByList'
                        - description: Filter criteria that orders the output. It can be sorted in ascending or descending order.
                    propertyFilters:
                      allOf:
                        - $ref: '#/components/schemas/PropertyFilters'
                        - description: '<p>You can filter the request using various logical operators and a key-value format. For example:</p> <p> <code>{"key": "serverType", "value": "webServer"}</code> </p>'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/entity-properties/history':
    post:
      operationId: GetPropertyValueHistory
      description: '<p>Retrieves information about the history of a time series property value for a component, component type, entity, or workspace.</p> <p>You must specify a value for <code>workspaceId</code>. For entity-specific queries, specify values for <code>componentName</code> and <code>entityId</code>. For cross-entity quries, specify a value for <code>componentTypeId</code>.</p>'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPropertyValueHistoryResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ConnectorFailureException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorFailureException'
        '482':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '483':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '484':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '485':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '486':
          description: ConnectorTimeoutException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorTimeoutException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - selectedProperties
              properties:
                entityId:
                  description: The ID of the entity.
                  type: string
                  pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
                  minLength: 1
                  maxLength: 128
                componentName:
                  description: The name of the component.
                  type: string
                  pattern: '[a-zA-Z_\-0-9]+'
                  minLength: 1
                  maxLength: 256
                componentTypeId:
                  description: The ID of the component type.
                  type: string
                  pattern: '[a-zA-Z_\.\-0-9:]+'
                  minLength: 1
                  maxLength: 256
                selectedProperties:
                  description: A list of properties whose value histories the request retrieves.
                  type: array
                  items:
                    $ref: '#/components/schemas/String'
                  minItems: 1
                  maxItems: 10
                propertyFilters:
                  description: A list of objects that filter the property value history request.
                  type: array
                  items:
                    $ref: '#/components/schemas/PropertyFilter'
                  minItems: 1
                  maxItems: 10
                startDateTime:
                  description: supports epoch seconds value
                  type: string
                  format: date-time
                endDateTime:
                  description: supports epoch seconds value
                  type: string
                  format: date-time
                interpolation:
                  description: An object that specifies how to interpolate data in a list.
                  type: object
                  properties:
                    interpolationType:
                      allOf:
                        - $ref: '#/components/schemas/InterpolationType'
                        - description: The interpolation type.
                    intervalInSeconds:
                      allOf:
                        - $ref: '#/components/schemas/IntervalInSeconds'
                        - description: The interpolation time interval in seconds.
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                orderByTime:
                  description: The time direction to use in the result order.
                  type: string
                  enum:
                    - ASCENDING
                    - DESCENDING
                startTime:
                  description: Timestamp represented in ISO 8601 format
                  type: string
                  minLength: 20
                  maxLength: 35
                endTime:
                  description: Timestamp represented in ISO 8601 format
                  type: string
                  minLength: 20
                  maxLength: 35
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/sync-jobs/{syncSource}':
    get:
      operationId: GetSyncJob
      description: Gets the SyncJob.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSyncJobResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
        '483':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '484':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '485':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: syncSource
          in: path
          required: true
          description: <p>The sync source.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note>
          schema:
            type: string
            pattern: '[a-zA-Z_0-9]+'
        - name: workspace
          in: query
          required: false
          description: The workspace ID.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/component-types-list':
    post:
      operationId: ListComponentTypes
      description: Lists all component types in a workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListComponentTypesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: A list of objects that filter the request.
                  type: array
                  items:
                    $ref: '#/components/schemas/ListComponentTypesFilter'
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/entities-list':
    post:
      operationId: ListEntities
      description: Lists all entities in a workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEntitiesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: <p>A list of objects that filter the request.</p> <note> <p>Only one object is accepted as a valid input.</p> </note>
                  type: array
                  items:
                    $ref: '#/components/schemas/ListEntitiesFilter'
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/scenes-list':
    post:
      operationId: ListScenes
      description: Lists all scenes in a workspace.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListScenesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the scenes.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  description: Specifies the maximum number of results to display.
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/sync-jobs-list':
    post:
      operationId: ListSyncJobs
      description: List all SyncJobs.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSyncJobsResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the sync job.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 50.</p> <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/workspaces/{workspaceId}/sync-jobs/{syncSource}/resources-list':
    post:
      operationId: ListSyncResources
      description: Lists the sync resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSyncResourcesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '483':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '484':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: workspaceId
          in: path
          required: true
          description: The ID of the workspace that contains the sync job.
          schema:
            type: string
            pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
            minLength: 1
            maxLength: 128
        - name: syncSource
          in: path
          required: true
          description: <p>The sync source.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note>
          schema:
            type: string
            pattern: '[a-zA-Z_0-9]+'
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  description: '<p>A list of objects that filter the request.</p> <p>The following filter combinations are supported:</p> <ul> <li> <p>Filter with state</p> </li> <li> <p>Filter with ResourceType and ResourceId</p> </li> <li> <p>Filter with ResourceType and ExternalId</p> </li> </ul>'
                  type: array
                  items:
                    $ref: '#/components/schemas/SyncResourceFilter'
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 50.</p> <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /tags-list:
    post:
      operationId: ListTagsForResource
      description: Lists all tags associated with a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceARN
              properties:
                resourceARN:
                  description: The ARN of the resource.
                  type: string
                  pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+'
                  minLength: 20
                  maxLength: 2048
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /workspaces-list:
    post:
      operationId: ListWorkspaces
      description: Retrieves information about workspaces in the current account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkspacesResponse'
        '480':
          description: InternalServerException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
        '481':
          description: ThrottlingException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
        '482':
          description: ValidationException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
        '483':
          description: ServiceQuotaExceededException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
      parameters:
        - name: maxResults
          in: query
          schema:
            type: string
          description: Pagination limit
          required: false
        - name: nextToken
          in: query
          schema:
            type: string
          description: Pagination token
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                maxResults:
                  description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
                  type: integer
                  minimum: 0
                  maximum: 200
                nextToken:
                  description: The string that specifies the next page of results.
                  type: string
                  pattern: .*
                  minLength: 0
                  maxLength: 17880
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /tags:
    post:
      operationId: TagResource
      description: Adds tags to a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: TooManyTagsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyTagsException'
        '481':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '482':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resourceARN
                - tags
              properties:
                resourceARN:
                  description: The ARN of the resource.
                  type: string
                  pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+'
                  minLength: 20
                  maxLength: 2048
                tags:
                  description: Metadata to add to this resource.
                  type: object
                  minProperties: 0
                  maxProperties: 50
                  additionalProperties:
                    $ref: '#/components/schemas/TagValue'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  /tags#resourceARN&tagKeys:
    delete:
      operationId: UntagResource
      description: Removes tags from a resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResponse'
        '480':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
        '481':
          description: ResourceNotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
      parameters:
        - name: resourceARN
          in: query
          required: true
          description: The ARN of the resource.
          schema:
            type: string
            pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+'
            minLength: 20
            maxLength: 2048
        - name: tagKeys
          in: query
          required: true
          description: A list of tag key names to remove from the resource. You don't specify the value. Both the key and its associated value are removed.
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TagKey'
            minItems: 0
            maxItems: 50
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    BatchPutPropertyValuesResponse:
      type: object
      required:
        - errorEntries
      properties:
        errorEntries:
          allOf:
            - $ref: '#/components/schemas/ErrorEntries'
            - description: Entries that caused errors in the batch put operation.
    PropertyValueEntry:
      type: object
      required:
        - entityPropertyReference
      properties:
        entityPropertyReference:
          allOf:
            - $ref: '#/components/schemas/EntityPropertyReference'
            - description: An object that contains information about the entity that has the property.
        propertyValues:
          allOf:
            - $ref: '#/components/schemas/PropertyValues'
            - description: A list of objects that specify time series property values.
      description: 'An object that specifies information about time series property values. This object is used and consumed by the <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_BatchPutPropertyValues.html">BatchPutPropertyValues</a> action.'
    InternalServerException: {}
    ResourceNotFoundException: {}
    ThrottlingException: {}
    ValidationException: {}
    CreateComponentTypeResponse:
      type: object
      required:
        - arn
        - creationDateTime
        - state
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the component type.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the entity was created.
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: The current state of the component type.
    PropertyDefinitionRequest:
      type: object
      properties:
        dataType:
          allOf:
            - $ref: '#/components/schemas/DataType'
            - description: An object that contains information about the data type.
        isRequiredInEntity:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property is required.
        isExternalId:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property ID comes from an external data store.
        isStoredExternally:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property is stored externally.
        isTimeSeries:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property consists of time series data.
        defaultValue:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: An object that contains the default value.
        configuration:
          allOf:
            - $ref: '#/components/schemas/Configuration'
            - description: A mapping that specifies configuration information about the property. Use this field to specify information that you read from and write to an external source.
        displayName:
          allOf:
            - $ref: '#/components/schemas/PropertyDisplayName'
            - description: A friendly name for the property.
      description: An object that sets information about a property.
    ComponentTypeId:
      type: string
      pattern: '[a-zA-Z_\.\-0-9:]+'
      minLength: 1
      maxLength: 256
    FunctionRequest:
      type: object
      properties:
        requiredProperties:
          allOf:
            - $ref: '#/components/schemas/RequiredProperties'
            - description: The required properties of the function.
        scope:
          allOf:
            - $ref: '#/components/schemas/Scope'
            - description: The scope of the function.
        implementedBy:
          allOf:
            - $ref: '#/components/schemas/DataConnector'
            - description: The data connector.
      description: The function request body.
    TagValue:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    PropertyGroupRequest:
      type: object
      properties:
        groupType:
          allOf:
            - $ref: '#/components/schemas/GroupType'
            - description: The group type.
        propertyNames:
          allOf:
            - $ref: '#/components/schemas/PropertyNames'
            - description: The names of properties.
      description: <p/>
    AccessDeniedException: {}
    ConflictException: {}
    ServiceQuotaExceededException: {}
    CreateEntityResponse:
      type: object
      required:
        - entityId
        - arn
        - creationDateTime
        - state
      properties:
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the entity.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the entity was created.
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: The current state of the entity.
    ComponentRequest:
      type: object
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component request.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        properties:
          description: An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        propertyGroups:
          allOf:
            - $ref: '#/components/schemas/ComponentPropertyGroupRequests'
            - description: The property groups.
      description: An object that sets information about a component type create or update request.
    CreateSceneResponse:
      type: object
      required:
        - arn
        - creationDateTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the scene.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the scene was created.
    SceneCapability:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 256
    SceneMetadataValue:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    CreateSyncJobResponse:
      type: object
      required:
        - arn
        - creationDateTime
        - state
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The SyncJob ARN.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time for the SyncJob creation.
        state:
          allOf:
            - $ref: '#/components/schemas/SyncJobState'
            - description: The SyncJob response state.
    CreateWorkspaceResponse:
      type: object
      required:
        - arn
        - creationDateTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the workspace.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the workspace was created.
    DeleteComponentTypeResponse:
      type: object
      required:
        - state
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: The current state of the component type to be deleted.
    DeleteEntityResponse:
      type: object
      required:
        - state
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: The current state of the deleted entity.
    DeleteSceneResponse:
      type: object
      properties: {}
    DeleteSyncJobResponse:
      type: object
      required:
        - state
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/SyncJobState'
            - description: The SyncJob response state.
    DeleteWorkspaceResponse:
      type: object
      properties: {}
    ExecuteQueryResponse:
      type: object
      properties:
        columnDescriptions:
          allOf:
            - $ref: '#/components/schemas/ColumnDescriptions'
            - description: A list of ColumnDescription objects.
        rows:
          allOf:
            - $ref: '#/components/schemas/Rows'
            - description: Represents a single row in the query results.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    QueryTimeoutException: {}
    GetComponentTypeResponse:
      type: object
      required:
        - workspaceId
        - componentTypeId
        - creationDateTime
        - updateDateTime
        - arn
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace that contains the component type.
        isSingleton:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether an entity can have more than one component of this type.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component type.
        propertyDefinitions:
          allOf:
            - $ref: '#/components/schemas/PropertyDefinitionsResponse'
            - description: An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
        extendsFrom:
          allOf:
            - $ref: '#/components/schemas/ExtendsFrom'
            - description: The name of the parent component type that this component type extends.
        functions:
          allOf:
            - $ref: '#/components/schemas/FunctionsResponse'
            - description: An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the component type was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the component was last updated.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the component type.
        isAbstract:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the component type is abstract.
        isSchemaInitialized:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the component type has a schema initializer and that the schema initializer has run.
        status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: The current status of the component type.
        propertyGroups:
          allOf:
            - $ref: '#/components/schemas/PropertyGroupsResponse'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        syncSource:
          allOf:
            - $ref: '#/components/schemas/SyncSource'
            - description: 'The syncSource of the SyncJob, if this entity was created by a SyncJob.'
        componentTypeName:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeName'
            - description: The component type name.
    GetEntityResponse:
      type: object
      required:
        - entityId
        - entityName
        - arn
        - status
        - workspaceId
        - parentEntityId
        - hasChildEntities
        - creationDateTime
        - updateDateTime
      properties:
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity.
        entityName:
          allOf:
            - $ref: '#/components/schemas/EntityName'
            - description: The name of the entity.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the entity.
        status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: The current status of the entity.
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the entity.
        components:
          allOf:
            - $ref: '#/components/schemas/ComponentsMap'
            - description: An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.
        parentEntityId:
          allOf:
            - $ref: '#/components/schemas/ParentEntityId'
            - description: The ID of the parent entity for this entity.
        hasChildEntities:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the entity has associated child entities.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the entity was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the entity was last updated.
        syncSource:
          allOf:
            - $ref: '#/components/schemas/SyncSource'
            - description: 'The syncSource of the sync job, if this entity was created by a sync job.'
    GetPricingPlanResponse:
      type: object
      required:
        - currentPricingPlan
      properties:
        currentPricingPlan:
          allOf:
            - $ref: '#/components/schemas/PricingPlan'
            - description: The chosen pricing plan for the current billing cycle.
        pendingPricingPlan:
          allOf:
            - $ref: '#/components/schemas/PricingPlan'
            - description: The pending pricing plan.
    GetPropertyValueResponse:
      type: object
      properties:
        propertyValues:
          allOf:
            - $ref: '#/components/schemas/PropertyLatestValueMap'
            - description: An object that maps strings to the properties and latest property values in the response. Each string in the mapping must be unique to this object.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
        tabularPropertyValues:
          allOf:
            - $ref: '#/components/schemas/TabularPropertyValues'
            - description: A table of property values.
    String:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    OrderByList:
      type: array
      items:
        $ref: '#/components/schemas/OrderBy'
      minItems: 1
      maxItems: 10
    PropertyFilters:
      type: array
      items:
        $ref: '#/components/schemas/PropertyFilter'
      minItems: 1
      maxItems: 10
    ConnectorFailureException: {}
    ConnectorTimeoutException: {}
    GetPropertyValueHistoryResponse:
      type: object
      required:
        - propertyValues
      properties:
        propertyValues:
          allOf:
            - $ref: '#/components/schemas/PropertyValueList'
            - description: An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    PropertyFilter:
      type: object
      properties:
        propertyName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The property name associated with this property filter.
        operator:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The operator associated with this property filter.
        value:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: The value associated with this property filter.
      description: An object that filters items returned by a property request.
    InterpolationType:
      type: string
      enum:
        - LINEAR
    IntervalInSeconds:
      type: integer
    GetSceneResponse:
      type: object
      required:
        - workspaceId
        - sceneId
        - contentLocation
        - arn
        - creationDateTime
        - updateDateTime
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace that contains the scene.
        sceneId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the scene.
        contentLocation:
          allOf:
            - $ref: '#/components/schemas/S3Url'
            - description: The relative path that specifies the location of the content definition file.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the scene.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the scene was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the scene was last updated.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the scene.
        capabilities:
          allOf:
            - $ref: '#/components/schemas/SceneCapabilities'
            - description: A list of capabilities that the scene uses to render.
        sceneMetadata:
          allOf:
            - $ref: '#/components/schemas/SceneMetadataMap'
            - description: The response metadata.
        generatedSceneMetadata:
          allOf:
            - $ref: '#/components/schemas/GeneratedSceneMetadataMap'
            - description: The generated scene metadata.
        error:
          allOf:
            - $ref: '#/components/schemas/SceneError'
            - description: The SceneResponse error.
    GetSyncJobResponse:
      type: object
      required:
        - arn
        - workspaceId
        - syncSource
        - syncRole
        - status
        - creationDateTime
        - updateDateTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The sync job ARN.
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace that contains the sync job.
        syncSource:
          allOf:
            - $ref: '#/components/schemas/SyncSource'
            - description: <p>The sync soucre.</p> <note> <p>Currently the only supported syncSource is <code>SITEWISE </code>.</p> </note>
        syncRole:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The sync IAM role.
        status:
          allOf:
            - $ref: '#/components/schemas/SyncJobStatus'
            - description: The SyncJob response status.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The creation date and time.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The update date and time.
    GetWorkspaceResponse:
      type: object
      required:
        - workspaceId
        - arn
        - s3Location
        - role
        - creationDateTime
        - updateDateTime
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the workspace.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the workspace.
        s3Location:
          allOf:
            - $ref: '#/components/schemas/S3Location'
            - description: The ARN of the S3 bucket where resources associated with the workspace are stored.
        role:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The ARN of the execution role associated with the workspace.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the workspace was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the workspace was last updated.
    ListComponentTypesResponse:
      type: object
      required:
        - workspaceId
        - componentTypeSummaries
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace.
        componentTypeSummaries:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeSummaries'
            - description: A list of objects that contain information about the component types.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: Specifies the maximum number of results to display.
    ListComponentTypesFilter:
      type: object
      properties:
        extendsFrom:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The component type that the component types in the list extend.
        namespace:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The namespace to which the component types in the list belong.
        isAbstract:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the component types in the list are abstract.
      description: <p>An object that filters items in a list of component types.</p> <note> <p>Only one object is accepted as a valid input.</p> </note>
    ListEntitiesResponse:
      type: object
      properties:
        entitySummaries:
          allOf:
            - $ref: '#/components/schemas/EntitySummaries'
            - description: A list of objects that contain information about the entities.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    ListEntitiesFilter:
      type: object
      properties:
        parentEntityId:
          allOf:
            - $ref: '#/components/schemas/ParentEntityId'
            - description: The parent of the entities in the list.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type in the entities in the list.
        externalId:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The external-Id property of a component. The external-Id property is the primary key of an external storage system.
      description: An object that filters items in a list of entities.
    ListScenesResponse:
      type: object
      properties:
        sceneSummaries:
          allOf:
            - $ref: '#/components/schemas/SceneSummaries'
            - description: A list of objects that contain information about the scenes.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    ListSyncJobsResponse:
      type: object
      properties:
        syncJobSummaries:
          allOf:
            - $ref: '#/components/schemas/SyncJobSummaries'
            - description: The listed SyncJob summaries.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    ListSyncResourcesResponse:
      type: object
      properties:
        syncResources:
          allOf:
            - $ref: '#/components/schemas/SyncResourceSummaries'
            - description: The sync resources.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    SyncResourceFilter:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/SyncResourceState'
            - description: The sync resource filter's state.
        resourceType:
          allOf:
            - $ref: '#/components/schemas/SyncResourceType'
            - description: The sync resource filter resource type
        resourceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The sync resource filter resource ID.
        externalId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The external ID.
      description: The sync resource filter.
    ListTagsForResourceResponse:
      type: object
      properties:
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Metadata that you can use to manage a resource.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    ListWorkspacesResponse:
      type: object
      properties:
        workspaceSummaries:
          allOf:
            - $ref: '#/components/schemas/WorkspaceSummaries'
            - description: A list of objects that contain information about the workspaces.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    TagResourceResponse:
      type: object
      properties: {}
    TooManyTagsException: {}
    UntagResourceResponse:
      type: object
      properties: {}
    TagKey:
      type: string
      pattern: '([\p{L}\p{Z}\p{N}_.:/=+\-@]*)'
      minLength: 1
      maxLength: 128
    UpdateComponentTypeResponse:
      type: object
      required:
        - workspaceId
        - arn
        - componentTypeId
        - state
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace that contains the component type.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the component type.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: The current state of the component type.
    UpdateEntityResponse:
      type: object
      required:
        - updateDateTime
        - state
      properties:
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the entity was last updated.
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: The current state of the entity update.
    ComponentUpdateRequest:
      type: object
      properties:
        updateType:
          allOf:
            - $ref: '#/components/schemas/ComponentUpdateType'
            - description: The update type of the component update request.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component type.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        propertyUpdates:
          allOf:
            - $ref: '#/components/schemas/PropertyRequests'
            - description: An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object.
        propertyGroupUpdates:
          allOf:
            - $ref: '#/components/schemas/ComponentPropertyGroupRequests'
            - description: The property group updates.
      description: The component update request.
    ParentEntityUpdateType:
      type: string
      enum:
        - UPDATE
        - DELETE
    ParentEntityId:
      type: string
      pattern: '\$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
      minLength: 1
      maxLength: 128
    UpdatePricingPlanResponse:
      type: object
      required:
        - currentPricingPlan
      properties:
        currentPricingPlan:
          allOf:
            - $ref: '#/components/schemas/PricingPlan'
            - description: Update the current pricing plan.
        pendingPricingPlan:
          allOf:
            - $ref: '#/components/schemas/PricingPlan'
            - description: Update the pending pricing plan.
    BundleName:
      type: string
      pattern: .*
      minLength: 1
      maxLength: 256
    UpdateSceneResponse:
      type: object
      required:
        - updateDateTime
      properties:
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the scene was last updated.
    UpdateWorkspaceResponse:
      type: object
      required:
        - updateDateTime
      properties:
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time of the current update.
    BatchPutPropertyError:
      type: object
      required:
        - errorCode
        - errorMessage
        - entry
      properties:
        errorCode:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The error code.
        errorMessage:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The error message.
        entry:
          allOf:
            - $ref: '#/components/schemas/PropertyValueEntry'
            - description: An object that contains information about errors returned by the <code>BatchPutProperty</code> action.
      description: An error returned by the <code>BatchPutProperty</code> action.
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/BatchPutPropertyError'
      minItems: 1
      maxItems: 10
    BatchPutPropertyErrorEntry:
      type: object
      required:
        - errors
      properties:
        errors:
          allOf:
            - $ref: '#/components/schemas/Errors'
            - description: A list of objects that contain information about errors returned by the <code>BatchPutProperty</code> action.
      description: An object that contains information about errors returned by the <code>BatchPutProperty</code> action.
    Id:
      type: string
      pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+'
      minLength: 1
      maxLength: 128
    Entries:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValueEntry'
      minItems: 1
      maxItems: 10
    BatchPutPropertyValuesRequest:
      type: object
      required:
        - entries
      title: BatchPutPropertyValuesRequest
      properties:
        entries:
          allOf:
            - $ref: '#/components/schemas/Entries'
            - description: An object that maps strings to the property value entries to set. Each string in the mapping must be unique to this object.
    ErrorEntries:
      type: array
      items:
        $ref: '#/components/schemas/BatchPutPropertyErrorEntry'
      minItems: 1
      maxItems: 10
    Boolean:
      type: boolean
    PricingBundles:
      type: array
      items:
        $ref: '#/components/schemas/BundleName'
      minItems: 1
      maxItems: 10
    PricingTier:
      type: string
      enum:
        - TIER_1
        - TIER_2
        - TIER_3
        - TIER_4
    BundleInformation:
      type: object
      required:
        - bundleNames
      properties:
        bundleNames:
          allOf:
            - $ref: '#/components/schemas/PricingBundles'
            - description: The bundle names.
        pricingTier:
          allOf:
            - $ref: '#/components/schemas/PricingTier'
            - description: The pricing tier.
      description: Information about the pricing bundle.
    ColumnName:
      type: string
      pattern: .*
    ColumnType:
      type: string
      enum:
        - NODE
        - EDGE
        - VALUE
    ColumnDescription:
      type: object
      properties:
        name:
          allOf:
            - $ref: '#/components/schemas/ColumnName'
            - description: The name of the column description.
        type:
          allOf:
            - $ref: '#/components/schemas/ColumnType'
            - description: The type of the column description.
      description: A description of the column in the query results.
    ColumnDescriptions:
      type: array
      items:
        $ref: '#/components/schemas/ColumnDescription'
    GroupType:
      type: string
      enum:
        - TABULAR
    PropertyNames:
      type: array
      items:
        $ref: '#/components/schemas/Name'
    PropertyGroupUpdateType:
      type: string
      enum:
        - UPDATE
        - DELETE
        - CREATE
    ComponentPropertyGroupRequest:
      type: object
      properties:
        groupType:
          allOf:
            - $ref: '#/components/schemas/GroupType'
            - description: The group type.
        propertyNames:
          allOf:
            - $ref: '#/components/schemas/PropertyNames'
            - description: The property names.
        updateType:
          allOf:
            - $ref: '#/components/schemas/PropertyGroupUpdateType'
            - description: The update type.
      description: The component property group request.
    ComponentPropertyGroupRequests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentPropertyGroupRequest'
    ComponentPropertyGroupResponse:
      type: object
      required:
        - groupType
        - propertyNames
        - isInherited
      properties:
        groupType:
          allOf:
            - $ref: '#/components/schemas/GroupType'
            - description: The group type.
        propertyNames:
          allOf:
            - $ref: '#/components/schemas/PropertyNames'
            - description: The names of properties
        isInherited:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property group is inherited from a parent entity
      description: The component property group response.
    ComponentPropertyGroupResponses:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentPropertyGroupResponse'
    Description:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 2048
    Name:
      type: string
      pattern: '[a-zA-Z_\-0-9]+'
      minLength: 1
      maxLength: 256
    Status:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/State'
            - description: 'The current state of the entity, component, component type, or workspace.'
        error:
          allOf:
            - $ref: '#/components/schemas/ErrorDetails'
            - description: The error message.
      description: 'An object that represents the status of an entity, component, component type, or workspace.'
    SyncSource:
      type: string
      pattern: '[a-zA-Z_0-9]+'
    ComponentResponse:
      type: object
      properties:
        componentName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The name of the component.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component type.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: The status of the component type.
        definedIn:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The name of the property definition set in the request.
        properties:
          description: An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        propertyGroups:
          allOf:
            - $ref: '#/components/schemas/ComponentPropertyGroupResponses'
            - description: The property groups.
        syncSource:
          allOf:
            - $ref: '#/components/schemas/SyncSource'
            - description: 'The syncSource of the sync job, if this entity was created by a sync job.'
      description: An object that returns information about a component type create or update request.
    ComponentTypeName:
      type: string
      pattern: '.*[^\u0000-\u001F\u007F]*.*'
      minLength: 0
      maxLength: 256
    ComponentTypeSummary:
      type: object
      required:
        - arn
        - componentTypeId
        - creationDateTime
        - updateDateTime
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the component type.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the component type was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the component type was last updated.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component type.
        status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: The current status of the component type.
        componentTypeName:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeName'
            - description: The component type name.
      description: An object that contains information about a component type.
    ComponentTypeSummaries:
      type: array
      items:
        $ref: '#/components/schemas/ComponentTypeSummary'
    TwinMakerArn:
      type: string
      pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_\-\.:]+'
      minLength: 20
      maxLength: 2048
    Timestamp:
      type: string
      description: supports epoch seconds value
      format: date-time
    ComponentUpdateType:
      type: string
      enum:
        - CREATE
        - UPDATE
        - DELETE
    PropertyRequests:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyRequest'
    ComponentUpdatesMapRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentUpdateRequest'
    ComponentsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentResponse'
    ComponentsMapRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ComponentRequest'
    Value:
      type: string
      pattern: .*
    Configuration:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Value'
    PropertyDefinitionsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyDefinitionRequest'
    ExtendsFrom:
      type: array
      items:
        $ref: '#/components/schemas/ComponentTypeId'
    FunctionsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FunctionRequest'
    TagMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
    PropertyGroupsRequest:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyGroupRequest'
    CreateComponentTypeRequest:
      type: object
      title: CreateComponentTypeRequest
      properties:
        isSingleton:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether an entity can have more than one component of this type.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component type.
        propertyDefinitions:
          allOf:
            - $ref: '#/components/schemas/PropertyDefinitionsRequest'
            - description: An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
        extendsFrom:
          allOf:
            - $ref: '#/components/schemas/ExtendsFrom'
            - description: Specifies the parent component type to extend.
        functions:
          allOf:
            - $ref: '#/components/schemas/FunctionsRequest'
            - description: An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Metadata that you can use to manage the component type.
        propertyGroups:
          allOf:
            - $ref: '#/components/schemas/PropertyGroupsRequest'
            - description: <p/>
        componentTypeName:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeName'
            - description: A friendly name for the component type.
    State:
      type: string
      enum:
        - CREATING
        - UPDATING
        - DELETING
        - ACTIVE
        - ERROR
    EntityId:
      type: string
      pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\-0-9.:]*[a-zA-Z0-9]+'
      minLength: 1
      maxLength: 128
    EntityName:
      type: string
      pattern: '[^\u0000-\u001F\u007F]+'
      minLength: 1
      maxLength: 256
    CreateEntityRequest:
      type: object
      required:
        - entityName
      title: CreateEntityRequest
      properties:
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity.
        entityName:
          allOf:
            - $ref: '#/components/schemas/EntityName'
            - description: The name of the entity.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the entity.
        components:
          allOf:
            - $ref: '#/components/schemas/ComponentsMapRequest'
            - description: An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.
        parentEntityId:
          allOf:
            - $ref: '#/components/schemas/ParentEntityId'
            - description: The ID of the entity's parent entity.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Metadata that you can use to manage the entity.
    S3Url:
      type: string
      pattern: '[sS]3://[A-Za-z0-9._/-]+'
      minLength: 0
      maxLength: 256
    SceneCapabilities:
      type: array
      items:
        $ref: '#/components/schemas/SceneCapability'
      minItems: 0
      maxItems: 50
    SceneMetadataMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/SceneMetadataValue'
    CreateSceneRequest:
      type: object
      required:
        - sceneId
        - contentLocation
      title: CreateSceneRequest
      properties:
        sceneId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the scene.
        contentLocation:
          allOf:
            - $ref: '#/components/schemas/S3Url'
            - description: The relative path that specifies the location of the content definition file.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description for this scene.
        capabilities:
          allOf:
            - $ref: '#/components/schemas/SceneCapabilities'
            - description: A list of capabilities that the scene uses to render itself.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Metadata that you can use to manage the scene.
        sceneMetadata:
          allOf:
            - $ref: '#/components/schemas/SceneMetadataMap'
            - description: The request metadata.
    RoleArn:
      type: string
      pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):iam::[0-9]{12}:role/.*'
      minLength: 20
      maxLength: 2048
    CreateSyncJobRequest:
      type: object
      required:
        - syncRole
      title: CreateSyncJobRequest
      properties:
        syncRole:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: 'The SyncJob IAM role. This IAM role is used by the SyncJob to read from the syncSource, and create, update, or delete the corresponding resources.'
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: The SyncJob tags.
    SyncJobState:
      type: string
      enum:
        - CREATING
        - INITIALIZING
        - ACTIVE
        - DELETING
        - ERROR
    S3Location:
      type: string
      pattern: '.*(^arn:((aws)|(aws-cn)|(aws-us-gov)):s3:::)([a-zA-Z0-9_-]+$).*'
      minLength: 0
      maxLength: 1024
    CreateWorkspaceRequest:
      type: object
      required:
        - s3Location
        - role
      title: CreateWorkspaceRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the workspace.
        s3Location:
          allOf:
            - $ref: '#/components/schemas/S3Location'
            - description: The ARN of the S3 bucket where resources associated with the workspace are stored.
        role:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The ARN of the execution role associated with the workspace.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Metadata that you can use to manage the workspace
    LambdaFunction:
      type: object
      required:
        - arn
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/LambdaArn'
            - description: The ARN of the Lambda function.
      description: The Lambda function.
    DataConnector:
      type: object
      properties:
        lambda:
          allOf:
            - $ref: '#/components/schemas/LambdaFunction'
            - description: The Lambda function associated with this data connector.
        isNative:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
      description: The data connector.
    Type:
      type: string
      enum:
        - RELATIONSHIP
        - STRING
        - LONG
        - BOOLEAN
        - INTEGER
        - DOUBLE
        - LIST
        - MAP
    DataType:
      type: object
      required:
        - type
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/Type'
            - description: The underlying type of the data type.
        nestedType:
          allOf:
            - $ref: '#/components/schemas/DataType'
            - description: The nested type in the data type.
        allowedValues:
          allOf:
            - $ref: '#/components/schemas/DataValueList'
            - description: The allowed values for this data type.
        unitOfMeasure:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The unit of measure used in this data type.
        relationship:
          allOf:
            - $ref: '#/components/schemas/Relationship'
            - description: A relationship that associates a component with another component.
      description: An object that specifies the data type of a property.
    DataValueList:
      type: array
      items:
        $ref: '#/components/schemas/DataValue'
      minItems: 0
      maxItems: 50
    Relationship:
      type: object
      properties:
        targetComponentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the target component type associated with this relationship.
        relationshipType:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The type of the relationship.
      description: An object that specifies a relationship with another component type.
    Double:
      type: number
      format: double
    Integer:
      type: integer
    Long:
      type: integer
    DataValueMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/DataValue'
    RelationshipValue:
      type: object
      properties:
        targetEntityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the target entity associated with this relationship value.
        targetComponentName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The name of the target component associated with the relationship value.
      description: A value that associates a component and an entity.
    Expression:
      type: string
      pattern: '(^\$\{Parameters\.[a-zA-z]+([a-zA-z_0-9]*)}$)'
      minLength: 1
      maxLength: 316
    DataValue:
      type: object
      properties:
        booleanValue:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value.
        doubleValue:
          allOf:
            - $ref: '#/components/schemas/Double'
            - description: A double value.
        integerValue:
          allOf:
            - $ref: '#/components/schemas/Integer'
            - description: An integer value.
        longValue:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: A long value.
        stringValue:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: A string value.
        listValue:
          allOf:
            - $ref: '#/components/schemas/DataValueList'
            - description: A list of multiple values.
        mapValue:
          allOf:
            - $ref: '#/components/schemas/DataValueMap'
            - description: An object that maps strings to multiple <code>DataValue</code> objects.
        relationshipValue:
          allOf:
            - $ref: '#/components/schemas/RelationshipValue'
            - description: A value that relates a component to another component.
        expression:
          allOf:
            - $ref: '#/components/schemas/Expression'
            - description: An expression that produces the value.
      description: An object that specifies a value for a property.
    DeleteComponentTypeRequest:
      type: object
      title: DeleteComponentTypeRequest
      properties: {}
    DeleteEntityRequest:
      type: object
      title: DeleteEntityRequest
      properties: {}
    DeleteSceneRequest:
      type: object
      title: DeleteSceneRequest
      properties: {}
    DeleteSyncJobRequest:
      type: object
      title: DeleteSyncJobRequest
      properties: {}
    DeleteWorkspaceRequest:
      type: object
      title: DeleteWorkspaceRequest
      properties: {}
    ExternalIdProperty:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/String'
    EntityPropertyReference:
      type: object
      required:
        - propertyName
      properties:
        componentName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The name of the component.
        externalIdProperty:
          allOf:
            - $ref: '#/components/schemas/ExternalIdProperty'
            - description: A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores.
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity.
        propertyName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The name of the property.
      description: An object that uniquely identifies an entity property.
    EntitySummary:
      type: object
      required:
        - entityId
        - entityName
        - arn
        - status
        - creationDateTime
        - updateDateTime
      properties:
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity.
        entityName:
          allOf:
            - $ref: '#/components/schemas/EntityName'
            - description: The name of the entity.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the entity.
        parentEntityId:
          allOf:
            - $ref: '#/components/schemas/ParentEntityId'
            - description: The ID of the parent entity.
        status:
          allOf:
            - $ref: '#/components/schemas/Status'
            - description: The current status of the entity.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the entity.
        hasChildEntities:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the entity has child entities or not.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the entity was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The last date and time when the entity was updated.
      description: An object that contains information about an entity.
    EntitySummaries:
      type: array
      items:
        $ref: '#/components/schemas/EntitySummary'
    ErrorCode:
      type: string
      enum:
        - VALIDATION_ERROR
        - INTERNAL_FAILURE
        - SYNC_INITIALIZING_ERROR
        - SYNC_CREATING_ERROR
        - SYNC_PROCESSING_ERROR
    ErrorMessage:
      type: string
      minLength: 0
      maxLength: 2048
    ErrorDetails:
      type: object
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/ErrorCode'
            - description: The error code.
        message:
          allOf:
            - $ref: '#/components/schemas/ErrorMessage'
            - description: The error message.
      description: The error details.
    QueryStatement:
      type: string
      pattern: '[\s\S]+'
      minLength: 1
      maxLength: 1000
    QueryServiceMaxResults:
      type: integer
      minimum: 1
      maximum: 100
    NextToken:
      type: string
      pattern: .*
      minLength: 0
      maxLength: 17880
    ExecuteQueryRequest:
      type: object
      required:
        - workspaceId
        - queryStatement
      title: ExecuteQueryRequest
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace.
        queryStatement:
          allOf:
            - $ref: '#/components/schemas/QueryStatement'
            - description: The query statement.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/QueryServiceMaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    Rows:
      type: array
      items:
        $ref: '#/components/schemas/Row'
    RequiredProperties:
      type: array
      items:
        $ref: '#/components/schemas/Name'
    Scope:
      type: string
      enum:
        - ENTITY
        - WORKSPACE
    FunctionResponse:
      type: object
      properties:
        requiredProperties:
          allOf:
            - $ref: '#/components/schemas/RequiredProperties'
            - description: The required properties of the function.
        scope:
          allOf:
            - $ref: '#/components/schemas/Scope'
            - description: The scope of the function.
        implementedBy:
          allOf:
            - $ref: '#/components/schemas/DataConnector'
            - description: The data connector.
        isInherited:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: Indicates whether this function is inherited.
      description: The function response.
    FunctionsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/FunctionResponse'
    GeneratedSceneMetadataMap:
      type: object
      minProperties: 0
      maxProperties: 50
      additionalProperties:
        $ref: '#/components/schemas/SceneMetadataValue'
    GetComponentTypeRequest:
      type: object
      title: GetComponentTypeRequest
      properties: {}
    PropertyDefinitionsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyDefinitionResponse'
    PropertyGroupsResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyGroupResponse'
    GetEntityRequest:
      type: object
      title: GetEntityRequest
      properties: {}
    GetPricingPlanRequest:
      type: object
      title: GetPricingPlanRequest
      properties: {}
    PricingPlan:
      type: object
      required:
        - effectiveDateTime
        - pricingMode
        - updateDateTime
        - updateReason
      properties:
        billableEntityCount:
          allOf:
            - $ref: '#/components/schemas/Long'
            - description: The billable entity count.
        bundleInformation:
          allOf:
            - $ref: '#/components/schemas/BundleInformation'
            - description: The pricing plan's bundle information.
        effectiveDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The effective date and time of the pricing plan.
        pricingMode:
          allOf:
            - $ref: '#/components/schemas/PricingMode'
            - description: The pricing mode.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The set date and time for updating a pricing plan.
        updateReason:
          allOf:
            - $ref: '#/components/schemas/UpdateReason'
            - description: The update reason for changing a pricing plan.
      description: The pricing plan.
    SelectedPropertyList:
      type: array
      items:
        $ref: '#/components/schemas/String'
      minItems: 1
      maxItems: 10
    InterpolationParameters:
      type: object
      properties:
        interpolationType:
          allOf:
            - $ref: '#/components/schemas/InterpolationType'
            - description: The interpolation type.
        intervalInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntervalInSeconds'
            - description: The interpolation time interval in seconds.
      description: An object that specifies how to interpolate data in a list.
    MaxResults:
      type: integer
      minimum: 0
      maximum: 200
    OrderByTime:
      type: string
      enum:
        - ASCENDING
        - DESCENDING
    Time:
      type: string
      description: Timestamp represented in ISO 8601 format
      minLength: 20
      maxLength: 35
    GetPropertyValueHistoryRequest:
      type: object
      required:
        - selectedProperties
      title: GetPropertyValueHistoryRequest
      properties:
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity.
        componentName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The name of the component.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type.
        selectedProperties:
          allOf:
            - $ref: '#/components/schemas/SelectedPropertyList'
            - description: A list of properties whose value histories the request retrieves.
        propertyFilters:
          allOf:
            - $ref: '#/components/schemas/PropertyFilters'
            - description: A list of objects that filter the property value history request.
        startDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - deprecated: true
              description: The date and time of the earliest property value to return.This field is deprecated and will throw an error in the future. Use startTime instead.
        endDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - deprecated: true
              description: The date and time of the latest property value to return.This field is deprecated and will throw an error in the future. Use endTime instead.
        interpolation:
          allOf:
            - $ref: '#/components/schemas/InterpolationParameters'
            - description: An object that specifies the interpolation type and the interval over which to interpolate data.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        orderByTime:
          allOf:
            - $ref: '#/components/schemas/OrderByTime'
            - description: The time direction to use in the result order.
        startTime:
          allOf:
            - $ref: '#/components/schemas/Time'
            - description: '<p>The ISO8601 DateTime of the earliest property value to return.</p> <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>'
        endTime:
          allOf:
            - $ref: '#/components/schemas/Time'
            - description: '<p>The ISO8601 DateTime of the latest property value to return.</p> <p>For more information about the ISO8601 DateTime format, see the data type <a href="https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_PropertyValue.html">PropertyValue</a>.</p>'
    PropertyValueList:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValueHistory'
    TabularConditions:
      type: object
      properties:
        orderBy:
          allOf:
            - $ref: '#/components/schemas/OrderByList'
            - description: Filter criteria that orders the output. It can be sorted in ascending or descending order.
        propertyFilters:
          allOf:
            - $ref: '#/components/schemas/PropertyFilters'
            - description: '<p>You can filter the request using various logical operators and a key-value format. For example:</p> <p> <code>{"key": "serverType", "value": "webServer"}</code> </p>'
      description: The tabular conditions.
    GetPropertyValueRequest:
      type: object
      required:
        - selectedProperties
      title: GetPropertyValueRequest
      properties:
        componentName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The name of the component whose property values the operation returns.
        componentTypeId:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeId'
            - description: The ID of the component type whose property values the operation returns.
        entityId:
          allOf:
            - $ref: '#/components/schemas/EntityId'
            - description: The ID of the entity whose property values the operation returns.
        selectedProperties:
          allOf:
            - $ref: '#/components/schemas/SelectedPropertyList'
            - description: The properties whose values the operation returns.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
        propertyGroupName:
          allOf:
            - $ref: '#/components/schemas/Name'
            - description: The property group name.
        tabularConditions:
          allOf:
            - $ref: '#/components/schemas/TabularConditions'
            - description: The tabular conditions.
    PropertyLatestValueMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyLatestValue'
    TabularPropertyValues:
      type: array
      items:
        $ref: '#/components/schemas/TabularPropertyValue'
    GetSceneRequest:
      type: object
      title: GetSceneRequest
      properties: {}
    SceneError:
      type: object
      properties:
        code:
          allOf:
            - $ref: '#/components/schemas/SceneErrorCode'
            - description: The SceneError code.
        message:
          allOf:
            - $ref: '#/components/schemas/ErrorMessage'
            - description: The SceneError message.
      description: The scene error.
    GetSyncJobRequest:
      type: object
      title: GetSyncJobRequest
      properties: {}
    SyncJobStatus:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/SyncJobState'
            - description: The SyncJob status state.
        error:
          allOf:
            - $ref: '#/components/schemas/ErrorDetails'
            - description: The SyncJob error.
      description: The SyncJob status.
    IdOrArn:
      type: string
      pattern: '[a-zA-Z_0-9][a-zA-Z_\-0-9]*[a-zA-Z0-9]+$|^arn:((aws)|(aws-cn)|(aws-us-gov)):iottwinmaker:[a-z0-9-]+:[0-9]{12}:[\/a-zA-Z0-9_-]+'
      minLength: 1
      maxLength: 2048
    GetWorkspaceRequest:
      type: object
      title: GetWorkspaceRequest
      properties: {}
    LambdaArn:
      type: string
      pattern: 'arn:((aws)|(aws-cn)|(aws-us-gov)):lambda:[a-z0-9-]+:[0-9]{12}:function:[\/a-zA-Z0-9_-]+'
      minLength: 20
      maxLength: 2048
    ListComponentTypesFilters:
      type: array
      items:
        $ref: '#/components/schemas/ListComponentTypesFilter'
    ListComponentTypesRequest:
      type: object
      title: ListComponentTypesRequest
      properties:
        filters:
          allOf:
            - $ref: '#/components/schemas/ListComponentTypesFilters'
            - description: A list of objects that filter the request.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
    ListEntitiesFilters:
      type: array
      items:
        $ref: '#/components/schemas/ListEntitiesFilter'
    ListEntitiesRequest:
      type: object
      title: ListEntitiesRequest
      properties:
        filters:
          allOf:
            - $ref: '#/components/schemas/ListEntitiesFilters'
            - description: <p>A list of objects that filter the request.</p> <note> <p>Only one object is accepted as a valid input.</p> </note>
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    ListScenesRequest:
      type: object
      title: ListScenesRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: Specifies the maximum number of results to display.
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    SceneSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SceneSummary'
    ListSyncJobsRequest:
      type: object
      title: ListSyncJobsRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 50.</p> <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    SyncJobSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SyncJobSummary'
    SyncResourceFilters:
      type: array
      items:
        $ref: '#/components/schemas/SyncResourceFilter'
    ListSyncResourcesRequest:
      type: object
      title: ListSyncResourcesRequest
      properties:
        filters:
          allOf:
            - $ref: '#/components/schemas/SyncResourceFilters'
            - description: '<p>A list of objects that filter the request.</p> <p>The following filter combinations are supported:</p> <ul> <li> <p>Filter with state</p> </li> <li> <p>Filter with ResourceType and ResourceId</p> </li> <li> <p>Filter with ResourceType and ExternalId</p> </li> </ul>'
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 50.</p> <p>Valid Range: Minimum value of 0. Maximum value of 200.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    SyncResourceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/SyncResourceSummary'
    ListTagsForResourceRequest:
      type: object
      required:
        - resourceARN
      title: ListTagsForResourceRequest
      properties:
        resourceARN:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the resource.
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    ListWorkspacesRequest:
      type: object
      title: ListWorkspacesRequest
      properties:
        maxResults:
          allOf:
            - $ref: '#/components/schemas/MaxResults'
            - description: '<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>'
        nextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - description: The string that specifies the next page of results.
    WorkspaceSummaries:
      type: array
      items:
        $ref: '#/components/schemas/WorkspaceSummary'
    Order:
      type: string
      enum:
        - ASCENDING
        - DESCENDING
    OrderBy:
      type: object
      required:
        - propertyName
      properties:
        order:
          allOf:
            - $ref: '#/components/schemas/Order'
            - description: The set order that filters results.
        propertyName:
          allOf:
            - $ref: '#/components/schemas/String'
            - description: The property name.
      description: Filter criteria that orders the return output. It can be sorted in ascending or descending order.
    ParentEntityUpdateRequest:
      type: object
      required:
        - updateType
      properties:
        updateType:
          allOf:
            - $ref: '#/components/schemas/ParentEntityUpdateType'
            - description: The type of the update.
        parentEntityId:
          allOf:
            - $ref: '#/components/schemas/ParentEntityId'
            - description: The ID of the parent entity.
      description: The parent entity update request.
    PricingMode:
      type: string
      enum:
        - BASIC
        - STANDARD
        - TIERED_BUNDLE
    UpdateReason:
      type: string
      enum:
        - DEFAULT
        - PRICING_TIER_UPDATE
        - ENTITY_COUNT_UPDATE
        - PRICING_MODE_UPDATE
        - OVERWRITTEN
    PropertyDisplayName:
      type: string
      pattern: '.*[^\u0000-\u001F\u007F]*.*'
      minLength: 0
      maxLength: 256
    PropertyDefinitionResponse:
      type: object
      required:
        - dataType
        - isTimeSeries
        - isRequiredInEntity
        - isExternalId
        - isStoredExternally
        - isImported
        - isFinal
        - isInherited
      properties:
        dataType:
          allOf:
            - $ref: '#/components/schemas/DataType'
            - description: An object that contains information about the data type.
        isTimeSeries:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property consists of time series data.
        isRequiredInEntity:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property is required in an entity.
        isExternalId:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property ID comes from an external data store.
        isStoredExternally:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property is stored externally.
        isImported:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property definition is imported from an external data store.
        isFinal:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property definition can be updated.
        isInherited:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property definition is inherited from a parent entity.
        defaultValue:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: An object that contains the default value.
        configuration:
          allOf:
            - $ref: '#/components/schemas/Configuration'
            - description: A mapping that specifies configuration information about the property.
        displayName:
          allOf:
            - $ref: '#/components/schemas/PropertyDisplayName'
            - description: A friendly name for the property.
      description: An object that contains response data from a property definition request.
    PropertyGroupResponse:
      type: object
      required:
        - groupType
        - propertyNames
        - isInherited
      properties:
        groupType:
          allOf:
            - $ref: '#/components/schemas/GroupType'
            - description: The group types.
        propertyNames:
          allOf:
            - $ref: '#/components/schemas/PropertyNames'
            - description: The names of properties.
        isInherited:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether the property group is inherited from a parent entity
      description: The property group response
    PropertyLatestValue:
      type: object
      required:
        - propertyReference
      properties:
        propertyReference:
          allOf:
            - $ref: '#/components/schemas/EntityPropertyReference'
            - description: An object that specifies information about a property.
        propertyValue:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: The value of the property.
      description: The latest value of the property.
    PropertyUpdateType:
      type: string
      enum:
        - UPDATE
        - DELETE
        - CREATE
    PropertyRequest:
      type: object
      properties:
        definition:
          allOf:
            - $ref: '#/components/schemas/PropertyDefinitionRequest'
            - description: An object that specifies information about a property.
        value:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: The value of the property.
        updateType:
          allOf:
            - $ref: '#/components/schemas/PropertyUpdateType'
            - description: The update type of the update property request.
      description: An object that sets information about a property.
    PropertyResponse:
      type: object
      properties:
        definition:
          allOf:
            - $ref: '#/components/schemas/PropertyDefinitionResponse'
            - description: An object that specifies information about a property.
        value:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: The value of the property.
      description: An object that contains information about a property response.
    PropertyResponses:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/PropertyResponse'
    PropertyTableValue:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/DataValue'
    PropertyValue:
      type: object
      required:
        - value
      properties:
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - deprecated: true
              description: The timestamp of a value for a time series property.This field is deprecated and will throw an error in the future. Use time instead.
        value:
          allOf:
            - $ref: '#/components/schemas/DataValue'
            - description: An object that specifies a value for a time series property.
        time:
          allOf:
            - $ref: '#/components/schemas/Time'
            - description: '<p>ISO8601 DateTime of a value for a time series property.</p> <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p> <ul> <li> <p> <i>[YYYY]</i>: year</p> </li> <li> <p> <i>[MM]</i>: month</p> </li> <li> <p> <i>[DD]</i>: day</p> </li> <li> <p> <i>[hh]</i>: hour</p> </li> <li> <p> <i>[mm]</i>: minute</p> </li> <li> <p> <i>[ss]</i>: seconds</p> </li> <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li> <li> <p> <i>Z</i>: default timezone UTC</p> </li> <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li> </ul> <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>'
      description: An object that contains information about a value for a time series property.
    PropertyValues:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValue'
      minItems: 1
      maxItems: 10
    Values:
      type: array
      items:
        $ref: '#/components/schemas/PropertyValue'
    PropertyValueHistory:
      type: object
      required:
        - entityPropertyReference
      properties:
        entityPropertyReference:
          allOf:
            - $ref: '#/components/schemas/EntityPropertyReference'
            - description: An object that uniquely identifies an entity property.
        values:
          allOf:
            - $ref: '#/components/schemas/Values'
            - description: A list of objects that contain information about the values in the history of a time series property.
      description: The history of values for a time series property.
    QueryResultValue:
      type: object
      properties: {}
    RowData:
      type: array
      items:
        $ref: '#/components/schemas/QueryResultValue'
    Row:
      type: object
      properties:
        rowData:
          allOf:
            - $ref: '#/components/schemas/RowData'
            - description: The data in a row of query results.
      description: Represents a single row in the query results.
    SceneErrorCode:
      type: string
      enum:
        - MATTERPORT_ERROR
    SceneSummary:
      type: object
      required:
        - sceneId
        - contentLocation
        - arn
        - creationDateTime
        - updateDateTime
      properties:
        sceneId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the scene.
        contentLocation:
          allOf:
            - $ref: '#/components/schemas/S3Url'
            - description: The relative path that specifies the location of the content definition file.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the scene.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the scene was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the scene was last updated.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The scene description.
      description: An object that contains information about a scene.
    SyncJobSummary:
      type: object
      properties:
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The SyncJob summary ARN.
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace that contains the sync job.
        syncSource:
          allOf:
            - $ref: '#/components/schemas/SyncSource'
            - description: The sync source.
        status:
          allOf:
            - $ref: '#/components/schemas/SyncJobStatus'
            - description: The SyncJob summaries status.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The creation date and time.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The update date and time.
      description: The SyncJob summary.
    SyncResourceState:
      type: string
      enum:
        - INITIALIZING
        - PROCESSING
        - DELETED
        - IN_SYNC
        - ERROR
    SyncResourceType:
      type: string
      enum:
        - ENTITY
        - COMPONENT_TYPE
    SyncResourceStatus:
      type: object
      properties:
        state:
          allOf:
            - $ref: '#/components/schemas/SyncResourceState'
            - description: The sync resource status state.
        error:
          allOf:
            - $ref: '#/components/schemas/ErrorDetails'
            - description: The status error.
      description: The sync resource status.
    SyncResourceSummary:
      type: object
      properties:
        resourceType:
          allOf:
            - $ref: '#/components/schemas/SyncResourceType'
            - description: The resource type.
        externalId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The external ID.
        resourceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The resource ID.
        status:
          allOf:
            - $ref: '#/components/schemas/SyncResourceStatus'
            - description: The sync resource summary status.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The update date and time.
      description: The sync resource summary.
    TabularPropertyValue:
      type: array
      items:
        $ref: '#/components/schemas/PropertyTableValue'
    TagKeyList:
      type: array
      items:
        $ref: '#/components/schemas/TagKey'
      minItems: 0
      maxItems: 50
    TagResourceRequest:
      type: object
      required:
        - resourceARN
        - tags
      title: TagResourceRequest
      properties:
        resourceARN:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the resource.
        tags:
          allOf:
            - $ref: '#/components/schemas/TagMap'
            - description: Metadata to add to this resource.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateComponentTypeRequest:
      type: object
      title: UpdateComponentTypeRequest
      properties:
        isSingleton:
          allOf:
            - $ref: '#/components/schemas/Boolean'
            - description: A Boolean value that specifies whether an entity can have more than one component of this type.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the component type.
        propertyDefinitions:
          allOf:
            - $ref: '#/components/schemas/PropertyDefinitionsRequest'
            - description: An object that maps strings to the property definitions in the component type. Each string in the mapping must be unique to this object.
        extendsFrom:
          allOf:
            - $ref: '#/components/schemas/ExtendsFrom'
            - description: Specifies the component type that this component type extends.
        functions:
          allOf:
            - $ref: '#/components/schemas/FunctionsRequest'
            - description: An object that maps strings to the functions in the component type. Each string in the mapping must be unique to this object.
        propertyGroups:
          allOf:
            - $ref: '#/components/schemas/PropertyGroupsRequest'
            - description: The property groups.
        componentTypeName:
          allOf:
            - $ref: '#/components/schemas/ComponentTypeName'
            - description: The component type name.
    UpdateEntityRequest:
      type: object
      title: UpdateEntityRequest
      properties:
        entityName:
          allOf:
            - $ref: '#/components/schemas/EntityName'
            - description: The name of the entity.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the entity.
        componentUpdates:
          allOf:
            - $ref: '#/components/schemas/ComponentUpdatesMapRequest'
            - description: An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.
        parentEntityUpdate:
          allOf:
            - $ref: '#/components/schemas/ParentEntityUpdateRequest'
            - description: An object that describes the update request for a parent entity.
    UpdatePricingPlanRequest:
      type: object
      required:
        - pricingMode
      title: UpdatePricingPlanRequest
      properties:
        pricingMode:
          allOf:
            - $ref: '#/components/schemas/PricingMode'
            - description: The pricing mode.
        bundleNames:
          allOf:
            - $ref: '#/components/schemas/PricingBundles'
            - description: The bundle names.
    UpdateSceneRequest:
      type: object
      title: UpdateSceneRequest
      properties:
        contentLocation:
          allOf:
            - $ref: '#/components/schemas/S3Url'
            - description: The relative path that specifies the location of the content definition file.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of this scene.
        capabilities:
          allOf:
            - $ref: '#/components/schemas/SceneCapabilities'
            - description: A list of capabilities that the scene uses to render.
        sceneMetadata:
          allOf:
            - $ref: '#/components/schemas/SceneMetadataMap'
            - description: The scene metadata.
    UpdateWorkspaceRequest:
      type: object
      title: UpdateWorkspaceRequest
      properties:
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the workspace.
        role:
          allOf:
            - $ref: '#/components/schemas/RoleArn'
            - description: The ARN of the execution role associated with the workspace.
    WorkspaceSummary:
      type: object
      required:
        - workspaceId
        - arn
        - creationDateTime
        - updateDateTime
      properties:
        workspaceId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - description: The ID of the workspace.
        arn:
          allOf:
            - $ref: '#/components/schemas/TwinMakerArn'
            - description: The ARN of the workspace.
        description:
          allOf:
            - $ref: '#/components/schemas/Description'
            - description: The description of the workspace.
        creationDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the workspace was created.
        updateDateTime:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
            - description: The date and time when the workspace was last updated.
      description: An object that contains information about a workspace.
security:
  - hmac: []
