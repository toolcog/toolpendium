{
  "name": "CreateEntity",
  "description": "Creates an entity.",
  "parameters": {
    "type": "object",
    "properties": {
      "workspaceId": {
        "type": "string",
        "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128,
        "description": "The ID of the workspace that contains the entity."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "entityName"
        ],
        "properties": {
          "entityId": {
            "description": "The ID of the entity.",
            "type": "string",
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
            "minLength": 1,
            "maxLength": 128
          },
          "entityName": {
            "description": "The name of the entity.",
            "type": "string",
            "pattern": "[^\\u0000-\\u001F\\u007F]+",
            "minLength": 1,
            "maxLength": 256
          },
          "description": {
            "description": "The description of the entity.",
            "type": "string",
            "pattern": ".*",
            "minLength": 0,
            "maxLength": 2048
          },
          "components": {
            "description": "An object that maps strings to the components in the entity. Each string in the mapping must be unique to this object.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/ComponentRequest"
            }
          },
          "parentEntityId": {
            "description": "The ID of the entity's parent entity.",
            "type": "string",
            "pattern": "\\$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
            "minLength": 1,
            "maxLength": 128
          },
          "tags": {
            "description": "Metadata that you can use to manage the entity.",
            "type": "object",
            "minProperties": 0,
            "maxProperties": 50,
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "workspaceId",
      "body"
    ],
    "$defs": {
      "ComponentRequest": {
        "type": "object",
        "properties": {
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "The description of the component request."
              }
            ]
          },
          "componentTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentTypeId"
              },
              {
                "description": "The ID of the component type."
              }
            ]
          },
          "properties": {
            "description": "An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object."
          },
          "propertyGroups": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentPropertyGroupRequests"
              },
              {
                "description": "The property groups."
              }
            ]
          }
        },
        "description": "An object that sets information about a component type create or update request."
      },
      "Description": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 2048
      },
      "ComponentTypeId": {
        "type": "string",
        "pattern": "[a-zA-Z_\\.\\-0-9:]+",
        "minLength": 1,
        "maxLength": 256
      },
      "ComponentPropertyGroupRequests": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ComponentPropertyGroupRequest"
        }
      },
      "ComponentPropertyGroupRequest": {
        "type": "object",
        "properties": {
          "groupType": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupType"
              },
              {
                "description": "The group type."
              }
            ]
          },
          "propertyNames": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyNames"
              },
              {
                "description": "The property names."
              }
            ]
          },
          "updateType": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyGroupUpdateType"
              },
              {
                "description": "The update type."
              }
            ]
          }
        },
        "description": "The component property group request."
      },
      "GroupType": {
        "type": "string",
        "enum": [
          "TABULAR"
        ]
      },
      "PropertyNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Name"
        }
      },
      "Name": {
        "type": "string",
        "pattern": "[a-zA-Z_\\-0-9]+",
        "minLength": 1,
        "maxLength": 256
      },
      "PropertyGroupUpdateType": {
        "type": "string",
        "enum": [
          "UPDATE",
          "DELETE",
          "CREATE"
        ]
      },
      "TagValue": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iottwinmaker.us-east-1.amazonaws.com/workspaces/{workspaceId}/entities"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**entityId**",
            "**arn**",
            "**creationDateTime**",
            "**state**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
