{
  "name": "GetPropertyValue",
  "description": "<p>Gets the property values for a component, component type, entity, or workspace.</p> <p>You must specify a value for either <code>componentName</code>, <code>componentTypeId</code>, <code>entityId</code>, or <code>workspaceId</code>.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "workspaceId": {
        "type": "string",
        "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128,
        "description": "The ID of the workspace whose values the operation returns."
      },
      "maxResults": {
        "type": "string",
        "description": "Pagination limit"
      },
      "nextToken": {
        "type": "string",
        "description": "Pagination token"
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "selectedProperties"
        ],
        "properties": {
          "componentName": {
            "description": "The name of the component whose property values the operation returns.",
            "type": "string",
            "pattern": "[a-zA-Z_\\-0-9]+",
            "minLength": 1,
            "maxLength": 256
          },
          "componentTypeId": {
            "description": "The ID of the component type whose property values the operation returns.",
            "type": "string",
            "pattern": "[a-zA-Z_\\.\\-0-9:]+",
            "minLength": 1,
            "maxLength": 256
          },
          "entityId": {
            "description": "The ID of the entity whose property values the operation returns.",
            "type": "string",
            "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
            "minLength": 1,
            "maxLength": 128
          },
          "selectedProperties": {
            "description": "The properties whose values the operation returns.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/String"
            },
            "minItems": 1,
            "maxItems": 10
          },
          "maxResults": {
            "description": "<p>The maximum number of results to return at one time. The default is 25.</p> <p>Valid Range: Minimum value of 1. Maximum value of 250.</p>",
            "type": "integer",
            "minimum": 0,
            "maximum": 200
          },
          "nextToken": {
            "description": "The string that specifies the next page of results.",
            "type": "string",
            "pattern": ".*",
            "minLength": 0,
            "maxLength": 17880
          },
          "propertyGroupName": {
            "description": "The property group name.",
            "type": "string",
            "pattern": "[a-zA-Z_\\-0-9]+",
            "minLength": 1,
            "maxLength": 256
          },
          "tabularConditions": {
            "description": "The tabular conditions.",
            "type": "object",
            "properties": {
              "orderBy": {
                "allOf": [
                  {
                    "$ref": "#/$defs/OrderByList"
                  },
                  {
                    "description": "Filter criteria that orders the output. It can be sorted in ascending or descending order."
                  }
                ]
              },
              "propertyFilters": {
                "allOf": [
                  {
                    "$ref": "#/$defs/PropertyFilters"
                  },
                  {
                    "description": "<p>You can filter the request using various logical operators and a key-value format. For example:</p> <p> <code>{\"key\": \"serverType\", \"value\": \"webServer\"}</code> </p>"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "workspaceId",
      "body"
    ],
    "$defs": {
      "String": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 256
      },
      "OrderByList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/OrderBy"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "OrderBy": {
        "type": "object",
        "required": [
          "propertyName"
        ],
        "properties": {
          "order": {
            "allOf": [
              {
                "$ref": "#/$defs/Order"
              },
              {
                "description": "The set order that filters results."
              }
            ]
          },
          "propertyName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The property name."
              }
            ]
          }
        },
        "description": "Filter criteria that orders the return output. It can be sorted in ascending or descending order."
      },
      "Order": {
        "type": "string",
        "enum": [
          "ASCENDING",
          "DESCENDING"
        ]
      },
      "PropertyFilters": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PropertyFilter"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "PropertyFilter": {
        "type": "object",
        "properties": {
          "propertyName": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The property name associated with this property filter."
              }
            ]
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The operator associated with this property filter."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValue"
              },
              {
                "description": "The value associated with this property filter."
              }
            ]
          }
        },
        "description": "An object that filters items returned by a property request."
      },
      "DataValue": {
        "type": "object",
        "properties": {
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "A double value."
              }
            ]
          },
          "integerValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "An integer value."
              }
            ]
          },
          "longValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "A long value."
              }
            ]
          },
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A string value."
              }
            ]
          },
          "listValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueList"
              },
              {
                "description": "A list of multiple values."
              }
            ]
          },
          "mapValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueMap"
              },
              {
                "description": "An object that maps strings to multiple <code>DataValue</code> objects."
              }
            ]
          },
          "relationshipValue": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationshipValue"
              },
              {
                "description": "A value that relates a component to another component."
              }
            ]
          },
          "expression": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "An expression that produces the value."
              }
            ]
          }
        },
        "description": "An object that specifies a value for a property."
      },
      "Boolean": {
        "type": "boolean"
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "Integer": {
        "type": "integer"
      },
      "Long": {
        "type": "integer"
      },
      "DataValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataValue"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "DataValueMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/DataValue"
        }
      },
      "RelationshipValue": {
        "type": "object",
        "properties": {
          "targetEntityId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "The ID of the target entity associated with this relationship value."
              }
            ]
          },
          "targetComponentName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the target component associated with the relationship value."
              }
            ]
          }
        },
        "description": "A value that associates a component and an entity."
      },
      "EntityId": {
        "type": "string",
        "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128
      },
      "Name": {
        "type": "string",
        "pattern": "[a-zA-Z_\\-0-9]+",
        "minLength": 1,
        "maxLength": 256
      },
      "Expression": {
        "type": "string",
        "pattern": "(^\\$\\{Parameters\\.[a-zA-z]+([a-zA-z_0-9]*)}$)",
        "minLength": 1,
        "maxLength": 316
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iottwinmaker.us-east-1.amazonaws.com/workspaces/{workspaceId}/entity-properties/value{?maxResults,nextToken}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**propertyValues**",
            "**nextToken**",
            "**tabularPropertyValues**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
