{
  "name": "BatchPutPropertyValues",
  "description": "Sets values for multiple time series properties.",
  "parameters": {
    "type": "object",
    "properties": {
      "workspaceId": {
        "type": "string",
        "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128,
        "description": "The ID of the workspace that contains the properties to set."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "entries"
        ],
        "properties": {
          "entries": {
            "description": "An object that maps strings to the property value entries to set. Each string in the mapping must be unique to this object.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/PropertyValueEntry"
            },
            "minItems": 1,
            "maxItems": 10
          }
        }
      }
    },
    "required": [
      "workspaceId",
      "body"
    ],
    "$defs": {
      "PropertyValueEntry": {
        "type": "object",
        "required": [
          "entityPropertyReference"
        ],
        "properties": {
          "entityPropertyReference": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityPropertyReference"
              },
              {
                "description": "An object that contains information about the entity that has the property."
              }
            ]
          },
          "propertyValues": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyValues"
              },
              {
                "description": "A list of objects that specify time series property values."
              }
            ]
          }
        },
        "description": "An object that specifies information about time series property values. This object is used and consumed by the <a href=\"https://docs.aws.amazon.com/iot-twinmaker/latest/apireference/API_BatchPutPropertyValues.html\">BatchPutPropertyValues</a> action."
      },
      "EntityPropertyReference": {
        "type": "object",
        "required": [
          "propertyName"
        ],
        "properties": {
          "componentName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the component."
              }
            ]
          },
          "externalIdProperty": {
            "allOf": [
              {
                "$ref": "#/$defs/ExternalIdProperty"
              },
              {
                "description": "A mapping of external IDs to property names. External IDs uniquely identify properties from external data stores."
              }
            ]
          },
          "entityId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "The ID of the entity."
              }
            ]
          },
          "propertyName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the property."
              }
            ]
          }
        },
        "description": "An object that uniquely identifies an entity property."
      },
      "Name": {
        "type": "string",
        "pattern": "[a-zA-Z_\\-0-9]+",
        "minLength": 1,
        "maxLength": 256
      },
      "ExternalIdProperty": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 256
      },
      "EntityId": {
        "type": "string",
        "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128
      },
      "PropertyValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PropertyValue"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "PropertyValue": {
        "type": "object",
        "required": [
          "value"
        ],
        "properties": {
          "timestamp": {
            "allOf": [
              {
                "$ref": "#/$defs/Timestamp"
              },
              {
                "deprecated": true,
                "description": "The timestamp of a value for a time series property.This field is deprecated and will throw an error in the future. Use time instead."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValue"
              },
              {
                "description": "An object that specifies a value for a time series property."
              }
            ]
          },
          "time": {
            "allOf": [
              {
                "$ref": "#/$defs/Time"
              },
              {
                "description": "<p>ISO8601 DateTime of a value for a time series property.</p> <p>The time for when the property value was recorded in ISO 8601 format: <i>YYYY-MM-DDThh:mm:ss[.SSSSSSSSS][Z/±HH:mm]</i>.</p> <ul> <li> <p> <i>[YYYY]</i>: year</p> </li> <li> <p> <i>[MM]</i>: month</p> </li> <li> <p> <i>[DD]</i>: day</p> </li> <li> <p> <i>[hh]</i>: hour</p> </li> <li> <p> <i>[mm]</i>: minute</p> </li> <li> <p> <i>[ss]</i>: seconds</p> </li> <li> <p> <i>[.SSSSSSSSS]</i>: additional precision, where precedence is maintained. For example: [.573123] is equal to 573123000 nanoseconds.</p> </li> <li> <p> <i>Z</i>: default timezone UTC</p> </li> <li> <p> <i>± HH:mm</i>: time zone offset in Hours and Minutes.</p> </li> </ul> <p> <i>Required sub-fields</i>: YYYY-MM-DDThh:mm:ss and [Z/±HH:mm]</p>"
              }
            ]
          }
        },
        "description": "An object that contains information about a value for a time series property."
      },
      "Timestamp": {
        "type": "string",
        "description": "supports epoch seconds value",
        "format": "date-time"
      },
      "DataValue": {
        "type": "object",
        "properties": {
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "A double value."
              }
            ]
          },
          "integerValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "An integer value."
              }
            ]
          },
          "longValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "A long value."
              }
            ]
          },
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A string value."
              }
            ]
          },
          "listValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueList"
              },
              {
                "description": "A list of multiple values."
              }
            ]
          },
          "mapValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueMap"
              },
              {
                "description": "An object that maps strings to multiple <code>DataValue</code> objects."
              }
            ]
          },
          "relationshipValue": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationshipValue"
              },
              {
                "description": "A value that relates a component to another component."
              }
            ]
          },
          "expression": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "An expression that produces the value."
              }
            ]
          }
        },
        "description": "An object that specifies a value for a property."
      },
      "Boolean": {
        "type": "boolean"
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "Integer": {
        "type": "integer"
      },
      "Long": {
        "type": "integer"
      },
      "DataValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataValue"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "DataValueMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/DataValue"
        }
      },
      "RelationshipValue": {
        "type": "object",
        "properties": {
          "targetEntityId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "The ID of the target entity associated with this relationship value."
              }
            ]
          },
          "targetComponentName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the target component associated with the relationship value."
              }
            ]
          }
        },
        "description": "A value that associates a component and an entity."
      },
      "Expression": {
        "type": "string",
        "pattern": "(^\\$\\{Parameters\\.[a-zA-z]+([a-zA-z_0-9]*)}$)",
        "minLength": 1,
        "maxLength": 316
      },
      "Time": {
        "type": "string",
        "description": "Timestamp represented in ISO 8601 format",
        "minLength": 20,
        "maxLength": 35
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://iottwinmaker.us-east-1.amazonaws.com/workspaces/{workspaceId}/entity-properties"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**errorEntries**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
