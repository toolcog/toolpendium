{
  "name": "UpdateEntity",
  "description": "Updates an entity.",
  "parameters": {
    "type": "object",
    "properties": {
      "workspaceId": {
        "type": "string",
        "pattern": "[a-zA-Z_0-9][a-zA-Z_\\-0-9]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128,
        "description": "The ID of the workspace that contains the entity."
      },
      "entityId": {
        "type": "string",
        "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128,
        "description": "The ID of the entity."
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "properties": {
          "entityName": {
            "description": "The name of the entity.",
            "type": "string",
            "pattern": "[^\\u0000-\\u001F\\u007F]+",
            "minLength": 1,
            "maxLength": 256
          },
          "description": {
            "description": "The description of the entity.",
            "type": "string",
            "pattern": ".*",
            "minLength": 0,
            "maxLength": 2048
          },
          "componentUpdates": {
            "description": "An object that maps strings to the component updates in the request. Each string in the mapping must be unique to this object.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/ComponentUpdateRequest"
            }
          },
          "parentEntityUpdate": {
            "description": "The parent entity update request.",
            "type": "object",
            "properties": {
              "updateType": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ParentEntityUpdateType"
                  },
                  {
                    "description": "The type of the update."
                  }
                ]
              },
              "parentEntityId": {
                "allOf": [
                  {
                    "$ref": "#/$defs/ParentEntityId"
                  },
                  {
                    "description": "The ID of the parent entity."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "workspaceId",
      "entityId",
      "body"
    ],
    "$defs": {
      "ComponentUpdateRequest": {
        "type": "object",
        "properties": {
          "updateType": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentUpdateType"
              },
              {
                "description": "The update type of the component update request."
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/$defs/Description"
              },
              {
                "description": "The description of the component type."
              }
            ]
          },
          "componentTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentTypeId"
              },
              {
                "description": "The ID of the component type."
              }
            ]
          },
          "propertyUpdates": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyRequests"
              },
              {
                "description": "An object that maps strings to the properties to set in the component type update. Each string in the mapping must be unique to this object."
              }
            ]
          },
          "propertyGroupUpdates": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentPropertyGroupRequests"
              },
              {
                "description": "The property group updates."
              }
            ]
          }
        },
        "description": "The component update request."
      },
      "ComponentUpdateType": {
        "type": "string",
        "enum": [
          "CREATE",
          "UPDATE",
          "DELETE"
        ]
      },
      "Description": {
        "type": "string",
        "pattern": ".*",
        "minLength": 0,
        "maxLength": 2048
      },
      "ComponentTypeId": {
        "type": "string",
        "pattern": "[a-zA-Z_\\.\\-0-9:]+",
        "minLength": 1,
        "maxLength": 256
      },
      "PropertyRequests": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/PropertyRequest"
        }
      },
      "PropertyRequest": {
        "type": "object",
        "properties": {
          "definition": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyDefinitionRequest"
              },
              {
                "description": "An object that specifies information about a property."
              }
            ]
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValue"
              },
              {
                "description": "The value of the property."
              }
            ]
          },
          "updateType": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyUpdateType"
              },
              {
                "description": "The update type of the update property request."
              }
            ]
          }
        },
        "description": "An object that sets information about a property."
      },
      "PropertyDefinitionRequest": {
        "type": "object",
        "properties": {
          "dataType": {
            "allOf": [
              {
                "$ref": "#/$defs/DataType"
              },
              {
                "description": "An object that contains information about the data type."
              }
            ]
          },
          "isRequiredInEntity": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that specifies whether the property is required."
              }
            ]
          },
          "isExternalId": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that specifies whether the property ID comes from an external data store."
              }
            ]
          },
          "isStoredExternally": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that specifies whether the property is stored externally."
              }
            ]
          },
          "isTimeSeries": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value that specifies whether the property consists of time series data."
              }
            ]
          },
          "defaultValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValue"
              },
              {
                "description": "An object that contains the default value."
              }
            ]
          },
          "configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/Configuration"
              },
              {
                "description": "A mapping that specifies configuration information about the property. Use this field to specify information that you read from and write to an external source."
              }
            ]
          },
          "displayName": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyDisplayName"
              },
              {
                "description": "A friendly name for the property."
              }
            ]
          }
        },
        "description": "An object that sets information about a property."
      },
      "DataType": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/Type"
              },
              {
                "description": "The underlying type of the data type."
              }
            ]
          },
          "nestedType": {
            "allOf": [
              {
                "$ref": "#/$defs/DataType"
              },
              {
                "description": "The nested type in the data type."
              }
            ]
          },
          "allowedValues": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueList"
              },
              {
                "description": "The allowed values for this data type."
              }
            ]
          },
          "unitOfMeasure": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The unit of measure used in this data type."
              }
            ]
          },
          "relationship": {
            "allOf": [
              {
                "$ref": "#/$defs/Relationship"
              },
              {
                "description": "A relationship that associates a component with another component."
              }
            ]
          }
        },
        "description": "An object that specifies the data type of a property."
      },
      "Type": {
        "type": "string",
        "enum": [
          "RELATIONSHIP",
          "STRING",
          "LONG",
          "BOOLEAN",
          "INTEGER",
          "DOUBLE",
          "LIST",
          "MAP"
        ]
      },
      "DataValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DataValue"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "DataValue": {
        "type": "object",
        "properties": {
          "booleanValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "A Boolean value."
              }
            ]
          },
          "doubleValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "A double value."
              }
            ]
          },
          "integerValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Integer"
              },
              {
                "description": "An integer value."
              }
            ]
          },
          "longValue": {
            "allOf": [
              {
                "$ref": "#/$defs/Long"
              },
              {
                "description": "A long value."
              }
            ]
          },
          "stringValue": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "A string value."
              }
            ]
          },
          "listValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueList"
              },
              {
                "description": "A list of multiple values."
              }
            ]
          },
          "mapValue": {
            "allOf": [
              {
                "$ref": "#/$defs/DataValueMap"
              },
              {
                "description": "An object that maps strings to multiple <code>DataValue</code> objects."
              }
            ]
          },
          "relationshipValue": {
            "allOf": [
              {
                "$ref": "#/$defs/RelationshipValue"
              },
              {
                "description": "A value that relates a component to another component."
              }
            ]
          },
          "expression": {
            "allOf": [
              {
                "$ref": "#/$defs/Expression"
              },
              {
                "description": "An expression that produces the value."
              }
            ]
          }
        },
        "description": "An object that specifies a value for a property."
      },
      "Boolean": {
        "type": "boolean"
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "Integer": {
        "type": "integer"
      },
      "Long": {
        "type": "integer"
      },
      "String": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 256
      },
      "DataValueMap": {
        "type": "object",
        "minProperties": 0,
        "maxProperties": 50,
        "additionalProperties": {
          "$ref": "#/$defs/DataValue"
        }
      },
      "RelationshipValue": {
        "type": "object",
        "properties": {
          "targetEntityId": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityId"
              },
              {
                "description": "The ID of the target entity associated with this relationship value."
              }
            ]
          },
          "targetComponentName": {
            "allOf": [
              {
                "$ref": "#/$defs/Name"
              },
              {
                "description": "The name of the target component associated with the relationship value."
              }
            ]
          }
        },
        "description": "A value that associates a component and an entity."
      },
      "EntityId": {
        "type": "string",
        "pattern": "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128
      },
      "Name": {
        "type": "string",
        "pattern": "[a-zA-Z_\\-0-9]+",
        "minLength": 1,
        "maxLength": 256
      },
      "Expression": {
        "type": "string",
        "pattern": "(^\\$\\{Parameters\\.[a-zA-z]+([a-zA-z_0-9]*)}$)",
        "minLength": 1,
        "maxLength": 316
      },
      "Relationship": {
        "type": "object",
        "properties": {
          "targetComponentTypeId": {
            "allOf": [
              {
                "$ref": "#/$defs/ComponentTypeId"
              },
              {
                "description": "The ID of the target component type associated with this relationship."
              }
            ]
          },
          "relationshipType": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "The type of the relationship."
              }
            ]
          }
        },
        "description": "An object that specifies a relationship with another component type."
      },
      "Configuration": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Value"
        }
      },
      "Value": {
        "type": "string",
        "pattern": ".*"
      },
      "PropertyDisplayName": {
        "type": "string",
        "pattern": ".*[^\\u0000-\\u001F\\u007F]*.*",
        "minLength": 0,
        "maxLength": 256
      },
      "PropertyUpdateType": {
        "type": "string",
        "enum": [
          "UPDATE",
          "DELETE",
          "CREATE"
        ]
      },
      "ComponentPropertyGroupRequests": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ComponentPropertyGroupRequest"
        }
      },
      "ComponentPropertyGroupRequest": {
        "type": "object",
        "properties": {
          "groupType": {
            "allOf": [
              {
                "$ref": "#/$defs/GroupType"
              },
              {
                "description": "The group type."
              }
            ]
          },
          "propertyNames": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyNames"
              },
              {
                "description": "The property names."
              }
            ]
          },
          "updateType": {
            "allOf": [
              {
                "$ref": "#/$defs/PropertyGroupUpdateType"
              },
              {
                "description": "The update type."
              }
            ]
          }
        },
        "description": "The component property group request."
      },
      "GroupType": {
        "type": "string",
        "enum": [
          "TABULAR"
        ]
      },
      "PropertyNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Name"
        }
      },
      "PropertyGroupUpdateType": {
        "type": "string",
        "enum": [
          "UPDATE",
          "DELETE",
          "CREATE"
        ]
      },
      "ParentEntityUpdateType": {
        "type": "string",
        "enum": [
          "UPDATE",
          "DELETE"
        ]
      },
      "ParentEntityId": {
        "type": "string",
        "pattern": "\\$ROOT|^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|^[a-zA-Z0-9][a-zA-Z_\\-0-9.:]*[a-zA-Z0-9]+",
        "minLength": 1,
        "maxLength": 128
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "http://iottwinmaker.us-east-1.amazonaws.com/workspaces/{workspaceId}/entities/{entityId}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**updateDateTime**",
            "**state**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
