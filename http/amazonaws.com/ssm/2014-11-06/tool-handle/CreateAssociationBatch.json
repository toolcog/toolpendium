{
  "name": "CreateAssociationBatch",
  "description": "<p>Associates the specified Amazon Web Services Systems Manager document (SSM document) with the specified managed nodes or targets.</p> <p>When you associate a document with one or more managed nodes using IDs or tags, Amazon Web Services Systems Manager Agent (SSM Agent) running on the managed node processes the document and configures the node as specified.</p> <p>If you associate a document with a managed node that already has an associated document, the system returns the AssociationAlreadyExists exception.</p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonSSM.CreateAssociationBatch"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateAssociationBatchRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateAssociationBatchRequest": {
        "type": "object",
        "required": [
          "Entries"
        ],
        "title": "CreateAssociationBatchRequest",
        "properties": {
          "Entries": {
            "allOf": [
              {
                "$ref": "#/$defs/CreateAssociationBatchRequestEntries"
              },
              {
                "description": "One or more associations."
              }
            ]
          }
        }
      },
      "CreateAssociationBatchRequestEntries": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CreateAssociationBatchRequestEntry"
        },
        "minItems": 1
      },
      "CreateAssociationBatchRequestEntry": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentARN"
              },
              {
                "description": "<p>The name of the SSM document that contains the configuration information for the managed node. You can specify Command or Automation runbooks.</p> <p>You can specify Amazon Web Services-predefined documents, documents you created, or a document that is shared with you from another account.</p> <p>For SSM documents that are shared with you from other Amazon Web Services accounts, you must specify the complete SSM document ARN, in the following format:</p> <p> <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i> </code> </p> <p>For example:</p> <p> <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code> </p> <p>For Amazon Web Services-predefined documents and SSM documents you created in your account, you only need to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or <code>My-Document</code>.</p>"
              }
            ]
          },
          "InstanceId": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceId"
              },
              {
                "description": "<p>The managed node ID.</p> <note> <p> <code>InstanceId</code> has been deprecated. To specify a managed node ID for an association, use the <code>Targets</code> parameter. Requests that include the parameter <code>InstanceID</code> with Systems Manager documents (SSM documents) that use schema version 2.0 or later will fail. In addition, if you use the parameter <code>InstanceId</code>, you can't use the parameters <code>AssociationName</code>, <code>DocumentVersion</code>, <code>MaxErrors</code>, <code>MaxConcurrency</code>, <code>OutputLocation</code>, or <code>ScheduleExpression</code>. To use these parameters, you must use the <code>Targets</code> parameter.</p> </note>"
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/Parameters"
              },
              {
                "description": "A description of the parameters for a document. "
              }
            ]
          },
          "AutomationTargetParameterName": {
            "allOf": [
              {
                "$ref": "#/$defs/AutomationTargetParameterName"
              },
              {
                "description": "Specify the target for the association. This target is required for associations that use an Automation runbook and target resources by using rate controls. Automation is a capability of Amazon Web Services Systems Manager."
              }
            ]
          },
          "DocumentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentVersion"
              },
              {
                "description": "The document version."
              }
            ]
          },
          "Targets": {
            "allOf": [
              {
                "$ref": "#/$defs/Targets"
              },
              {
                "description": "The managed nodes targeted by the request."
              }
            ]
          },
          "ScheduleExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleExpression"
              },
              {
                "description": "A cron expression that specifies a schedule when the association runs."
              }
            ]
          },
          "OutputLocation": {
            "allOf": [
              {
                "$ref": "#/$defs/InstanceAssociationOutputLocation"
              },
              {
                "description": "An S3 bucket where you want to store the results of this request."
              }
            ]
          },
          "AssociationName": {
            "allOf": [
              {
                "$ref": "#/$defs/AssociationName"
              },
              {
                "description": "Specify a descriptive name for the association."
              }
            ]
          },
          "MaxErrors": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxErrors"
              },
              {
                "description": "<p>The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify either an absolute number of errors, for example 10, or a percentage of the target set, for example 10%. If you specify 3, for example, the system stops sending requests when the fourth error is received. If you specify 0, then the system stops sending requests after the first error is returned. If you run an association on 50 managed nodes and set <code>MaxError</code> to 10%, then the system stops sending the request when the sixth error is received.</p> <p>Executions that are already running an association when <code>MaxErrors</code> is reached are allowed to complete, but some of these executions may fail as well. If you need to ensure that there won't be more than max-errors failed executions, set <code>MaxConcurrency</code> to 1 so that executions proceed one at a time.</p>"
              }
            ]
          },
          "MaxConcurrency": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrency"
              },
              {
                "description": "<p>The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%. The default value is 100%, which means all targets run the association at the same time.</p> <p>If a new managed node starts and attempts to run an association while Systems Manager is running <code>MaxConcurrency</code> associations, the association is allowed to run. During the next association interval, the new managed node will process its association within the limit specified for <code>MaxConcurrency</code>.</p>"
              }
            ]
          },
          "ComplianceSeverity": {
            "allOf": [
              {
                "$ref": "#/$defs/AssociationComplianceSeverity"
              },
              {
                "description": "The severity level to assign to the association."
              }
            ]
          },
          "SyncCompliance": {
            "allOf": [
              {
                "$ref": "#/$defs/AssociationSyncCompliance"
              },
              {
                "description": "<p>The mode for generating association compliance. You can specify <code>AUTO</code> or <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association execution to determine the compliance status. If the association execution runs successfully, then the association is <code>COMPLIANT</code>. If the association execution doesn't run successfully, the association is <code>NON-COMPLIANT</code>. </p> <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter for the <a>PutComplianceItems</a> API operation. In this case, compliance data isn't managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API operation.</p> <p>By default, all associations use <code>AUTO</code> mode.</p>"
              }
            ]
          },
          "ApplyOnlyAtCronInterval": {
            "allOf": [
              {
                "$ref": "#/$defs/ApplyOnlyAtCronInterval"
              },
              {
                "description": "By default, when you create a new associations, the system runs it immediately after it is created and then according to the schedule you specified. Specify this option if you don't want an association to run immediately after you create it. This parameter isn't supported for rate expressions."
              }
            ]
          },
          "CalendarNames": {
            "allOf": [
              {
                "$ref": "#/$defs/CalendarNameOrARNList"
              },
              {
                "description": "The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your associations are gated under. The associations only run when that Change Calendar is open. For more information, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar\">Amazon Web Services Systems Manager Change Calendar</a>."
              }
            ]
          },
          "TargetLocations": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetLocations"
              },
              {
                "description": "Use this action to create an association in multiple Regions and multiple accounts."
              }
            ]
          },
          "ScheduleOffset": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleOffset"
              },
              {
                "description": "Number of days to wait after the scheduled day to run an association."
              }
            ]
          },
          "TargetMaps": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetMaps"
              },
              {
                "description": "A key-value mapping of document parameters to target resources. Both Targets and TargetMaps can't be specified together."
              }
            ]
          },
          "AlarmConfiguration": {
            "$ref": "#/$defs/AlarmConfiguration"
          }
        },
        "description": "Describes the association of a Amazon Web Services Systems Manager document (SSM document) and a managed node."
      },
      "DocumentARN": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-.:/]{3,128}$"
      },
      "InstanceId": {
        "type": "string",
        "pattern": "(^i-(\\w{8}|\\w{17})$)|(^mi-\\w{17}$)"
      },
      "Parameters": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/ParameterValueList"
        }
      },
      "ParameterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ParameterValue"
        }
      },
      "ParameterValue": {
        "type": "string"
      },
      "AutomationTargetParameterName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "DocumentVersion": {
        "type": "string",
        "pattern": "([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)"
      },
      "Targets": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Target"
        },
        "minItems": 0,
        "maxItems": 5
      },
      "Target": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetKey"
              },
              {
                "description": "User-defined criteria for sending commands that target managed nodes that meet the criteria."
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetValues"
              },
              {
                "description": "<p>User-defined criteria that maps to <code>Key</code>. For example, if you specified <code>tag:ServerRole</code>, you could specify <code>value:WebServer</code> to run a command on instances that include EC2 tags of <code>ServerRole,WebServer</code>. </p> <p>Depending on the type of target, the maximum number of values for a key might be lower than the global maximum of 50.</p>"
              }
            ]
          }
        },
        "description": "<p>An array of search criteria that targets managed nodes using a key-value pair that you specify.</p> <note> <p> One or more targets must be specified for maintenance window Run Command-type tasks. Depending on the task, targets are optional for other maintenance window task types (Automation, Lambda, and Step Functions). For more information about running tasks that don't specify targets, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html\">Registering maintenance window tasks without targets</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </note> <p>Supported formats include the following.</p> <ul> <li> <p> <code>Key=InstanceIds,Values=&lt;instance-id-1&gt;,&lt;instance-id-2&gt;,&lt;instance-id-3&gt;</code> </p> </li> <li> <p> <code>Key=tag:&lt;my-tag-key&gt;,Values=&lt;my-tag-value-1&gt;,&lt;my-tag-value-2&gt;</code> </p> </li> <li> <p> <code>Key=tag-key,Values=&lt;my-tag-key-1&gt;,&lt;my-tag-key-2&gt;</code> </p> </li> <li> <p> <b>Run Command and Maintenance window targets only</b>: <code>Key=resource-groups:Name,Values=&lt;resource-group-name&gt;</code> </p> </li> <li> <p> <b>Maintenance window targets only</b>: <code>Key=resource-groups:ResourceTypeFilters,Values=&lt;resource-type-1&gt;,&lt;resource-type-2&gt;</code> </p> </li> <li> <p> <b>Automation targets only</b>: <code>Key=ResourceGroup;Values=&lt;resource-group-name&gt;</code> </p> </li> </ul> <p>For example:</p> <ul> <li> <p> <code>Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE</code> </p> </li> <li> <p> <code>Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3</code> </p> </li> <li> <p> <code>Key=tag-key,Values=Name,Instance-Type,CostCenter</code> </p> </li> <li> <p> <b>Run Command and Maintenance window targets only</b>: <code>Key=resource-groups:Name,Values=ProductionResourceGroup</code> </p> <p>This example demonstrates how to target all resources in the resource group <b>ProductionResourceGroup</b> in your maintenance window.</p> </li> <li> <p> <b>Maintenance window targets only</b>: <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code> </p> <p>This example demonstrates how to target only Amazon Elastic Compute Cloud (Amazon EC2) instances and VPCs in your maintenance window.</p> </li> <li> <p> <b>Automation targets only</b>: <code>Key=ResourceGroup,Values=MyResourceGroup</code> </p> </li> <li> <p> <b>State Manager association targets only</b>: <code>Key=InstanceIds,Values=*</code> </p> <p>This example demonstrates how to target all managed instances in the Amazon Web Services Region where the association was created.</p> </li> </ul> <p>For more information about how to send commands that target managed nodes using <code>Key,Value</code> parameters, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting\">Targeting multiple instances</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>"
      },
      "TargetKey": {
        "type": "string",
        "pattern": "^[\\p{L}\\p{Z}\\p{N}_.:/=\\-@]*$|resource-groups:ResourceTypeFilters|resource-groups:Name",
        "minLength": 1,
        "maxLength": 163
      },
      "TargetValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetValue"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "TargetValue": {
        "type": "string"
      },
      "ScheduleExpression": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256
      },
      "InstanceAssociationOutputLocation": {
        "type": "object",
        "properties": {
          "S3Location": {
            "allOf": [
              {
                "$ref": "#/$defs/S3OutputLocation"
              },
              {
                "description": "An S3 bucket where you want to store the results of this request."
              }
            ]
          }
        },
        "description": "<p>An S3 bucket where you want to store the results of this request.</p> <p>For the minimal permissions required to enable Amazon S3 output for an association, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-state-assoc.html\">Creating associations</a> in the <i>Systems Manager User Guide</i>. </p>"
      },
      "S3OutputLocation": {
        "type": "object",
        "properties": {
          "OutputS3Region": {
            "allOf": [
              {
                "$ref": "#/$defs/S3Region"
              },
              {
                "description": "The Amazon Web Services Region of the S3 bucket."
              }
            ]
          },
          "OutputS3BucketName": {
            "allOf": [
              {
                "$ref": "#/$defs/S3BucketName"
              },
              {
                "description": "The name of the S3 bucket."
              }
            ]
          },
          "OutputS3KeyPrefix": {
            "allOf": [
              {
                "$ref": "#/$defs/S3KeyPrefix"
              },
              {
                "description": "The S3 bucket subfolder."
              }
            ]
          }
        },
        "description": "An S3 bucket where you want to store the results of this request."
      },
      "S3Region": {
        "type": "string",
        "minLength": 3,
        "maxLength": 20
      },
      "S3BucketName": {
        "type": "string",
        "minLength": 3,
        "maxLength": 63
      },
      "S3KeyPrefix": {
        "type": "string",
        "maxLength": 500
      },
      "AssociationName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$"
      },
      "MaxErrors": {
        "type": "string",
        "pattern": "^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$",
        "minLength": 1,
        "maxLength": 7
      },
      "MaxConcurrency": {
        "type": "string",
        "pattern": "^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$",
        "minLength": 1,
        "maxLength": 7
      },
      "AssociationComplianceSeverity": {
        "type": "string",
        "enum": [
          "CRITICAL",
          "HIGH",
          "MEDIUM",
          "LOW",
          "UNSPECIFIED"
        ]
      },
      "AssociationSyncCompliance": {
        "type": "string",
        "enum": [
          "AUTO",
          "MANUAL"
        ]
      },
      "ApplyOnlyAtCronInterval": {
        "type": "boolean"
      },
      "CalendarNameOrARNList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CalendarNameOrARN"
        }
      },
      "CalendarNameOrARN": {
        "type": "string"
      },
      "TargetLocations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetLocation"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "TargetLocation": {
        "type": "object",
        "properties": {
          "Accounts": {
            "allOf": [
              {
                "$ref": "#/$defs/Accounts"
              },
              {
                "description": "The Amazon Web Services accounts targeted by the current Automation execution."
              }
            ]
          },
          "Regions": {
            "allOf": [
              {
                "$ref": "#/$defs/Regions"
              },
              {
                "description": "The Amazon Web Services Regions targeted by the current Automation execution."
              }
            ]
          },
          "TargetLocationMaxConcurrency": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrency"
              },
              {
                "description": "The maximum number of Amazon Web Services Regions and Amazon Web Services accounts allowed to run the Automation concurrently."
              }
            ]
          },
          "TargetLocationMaxErrors": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxErrors"
              },
              {
                "description": "The maximum number of errors allowed before the system stops queueing additional Automation executions for the currently running Automation."
              }
            ]
          },
          "ExecutionRoleName": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutionRoleName"
              },
              {
                "description": "The Automation execution role used by the currently running Automation. If not specified, the default value is <code>AWS-SystemsManager-AutomationExecutionRole</code>."
              }
            ]
          },
          "TargetLocationAlarmConfiguration": {
            "$ref": "#/$defs/AlarmConfiguration"
          }
        },
        "description": "The combination of Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Automation execution."
      },
      "Accounts": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Account"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Account": {
        "type": "string"
      },
      "Regions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Region"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Region": {
        "type": "string"
      },
      "ExecutionRoleName": {
        "type": "string",
        "pattern": "[\\w+=,.@/-]+",
        "minLength": 1,
        "maxLength": 64
      },
      "AlarmConfiguration": {
        "type": "object",
        "required": [
          "Alarms"
        ],
        "properties": {
          "IgnorePollAlarmFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "When this value is <i>true</i>, your automation or command continues to run in cases where we can’t retrieve alarm status information from CloudWatch. In cases where we successfully retrieve an alarm status of OK or INSUFFICIENT_DATA, the automation or command continues to run, regardless of this value. Default is <i>false</i>."
              }
            ]
          },
          "Alarms": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmList"
              },
              {
                "description": "The name of the CloudWatch alarm specified in the configuration."
              }
            ]
          }
        },
        "description": "The details for the CloudWatch alarm you want to apply to an automation or command."
      },
      "Boolean": {
        "type": "boolean"
      },
      "AlarmList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Alarm"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "Alarm": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmName"
              },
              {
                "description": "The name of your CloudWatch alarm."
              }
            ]
          }
        },
        "description": "A CloudWatch alarm you apply to an automation or command."
      },
      "AlarmName": {
        "type": "string",
        "pattern": "^(?!\\s*$).+",
        "minLength": 1,
        "maxLength": 255
      },
      "ScheduleOffset": {
        "type": "integer",
        "minimum": 1,
        "maximum": 6
      },
      "TargetMaps": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetMap"
        },
        "minItems": 0,
        "maxItems": 300
      },
      "TargetMap": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 20,
        "additionalProperties": {
          "$ref": "#/$defs/TargetMapValueList"
        }
      },
      "TargetMapValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetMapValue"
        },
        "minItems": 0,
        "maxItems": 25
      },
      "TargetMapValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ssm.us-east-1.amazonaws.com/#X-Amz-Target=AmazonSSM.CreateAssociationBatch"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Successful**",
            "**Failed**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "491": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
