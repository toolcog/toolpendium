{
  "name": "CreatePatchBaseline",
  "description": "<p>Creates a patch baseline.</p> <note> <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported operating system type, see <a>PatchFilter</a>.</p> </note>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonSSM.CreatePatchBaseline"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreatePatchBaselineRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreatePatchBaselineRequest": {
        "type": "object",
        "required": [
          "Name"
        ],
        "title": "CreatePatchBaselineRequest",
        "properties": {
          "OperatingSystem": {
            "allOf": [
              {
                "$ref": "#/$defs/OperatingSystem"
              },
              {
                "description": "Defines the operating system the patch baseline applies to. The default value is <code>WINDOWS</code>."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/BaselineName"
              },
              {
                "description": "The name of the patch baseline."
              }
            ]
          },
          "GlobalFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchFilterGroup"
              },
              {
                "description": "A set of global filters used to include patches in the baseline."
              }
            ]
          },
          "ApprovalRules": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchRuleGroup"
              },
              {
                "description": "A set of rules used to include patches in the baseline."
              }
            ]
          },
          "ApprovedPatches": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchIdList"
              },
              {
                "description": "<p>A list of explicitly approved patches for the baseline.</p> <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html\">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>"
              }
            ]
          },
          "ApprovedPatchesComplianceLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchComplianceLevel"
              },
              {
                "description": "Defines the compliance level for approved patches. When an approved patch is reported as missing, this value describes the severity of the compliance violation. The default value is <code>UNSPECIFIED</code>."
              }
            ]
          },
          "ApprovedPatchesEnableNonSecurity": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether the list of approved patches includes non-security updates that should be applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed nodes only."
              }
            ]
          },
          "RejectedPatches": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchIdList"
              },
              {
                "description": "<p>A list of explicitly rejected patches for the baseline.</p> <p>For information about accepted formats for lists of approved patches and rejected patches, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html\">About package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>"
              }
            ]
          },
          "RejectedPatchesAction": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchAction"
              },
              {
                "description": "<p>The action for Patch Manager to take on patches included in the <code>RejectedPackages</code> list.</p> <ul> <li> <p> <b> <code>ALLOW_AS_DEPENDENCY</code> </b>: A package in the <code>Rejected</code> patches list is installed only if it is a dependency of another package. It is considered compliant with the patch baseline, and its status is reported as <code>InstalledOther</code>. This is the default action if no option is specified.</p> </li> <li> <p> <b> <code>BLOCK</code> </b>: Packages in the <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't installed under any circumstances. If a package was installed before it was added to the Rejected patches list, it is considered non-compliant with the patch baseline, and its status is reported as <code>InstalledRejected</code>.</p> </li> </ul>"
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/BaselineDescription"
              },
              {
                "description": "A description of the patch baseline."
              }
            ]
          },
          "Sources": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchSourceList"
              },
              {
                "description": "Information about the patches to use to update the managed nodes, including target operating systems and source repositories. Applies to Linux managed nodes only."
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/ClientToken"
              },
              {
                "description": "User-provided idempotency token."
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "<p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a patch baseline to identify the severity level of patches it specifies and the operating system family it applies to. In this case, you could specify the following key-value pairs:</p> <ul> <li> <p> <code>Key=PatchSeverity,Value=Critical</code> </p> </li> <li> <p> <code>Key=OS,Value=Windows</code> </p> </li> </ul> <note> <p>To add tags to an existing patch baseline, use the <a>AddTagsToResource</a> operation.</p> </note>"
              }
            ]
          }
        }
      },
      "OperatingSystem": {
        "type": "string",
        "enum": [
          "WINDOWS",
          "AMAZON_LINUX",
          "AMAZON_LINUX_2",
          "AMAZON_LINUX_2022",
          "UBUNTU",
          "REDHAT_ENTERPRISE_LINUX",
          "SUSE",
          "CENTOS",
          "ORACLE_LINUX",
          "DEBIAN",
          "MACOS",
          "RASPBIAN",
          "ROCKY_LINUX",
          "ALMA_LINUX",
          "AMAZON_LINUX_2023"
        ]
      },
      "BaselineName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-.]{3,128}$",
        "minLength": 3,
        "maxLength": 128
      },
      "PatchFilterGroup": {
        "type": "object",
        "required": [
          "PatchFilters"
        ],
        "properties": {
          "PatchFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchFilterList"
              },
              {
                "description": "The set of patch filters that make up the group."
              }
            ]
          }
        },
        "description": "A set of patch filters, typically used for approval rules."
      },
      "PatchFilterList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PatchFilter"
        },
        "minItems": 0,
        "maxItems": 4
      },
      "PatchFilter": {
        "type": "object",
        "required": [
          "Key",
          "Values"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchFilterKey"
              },
              {
                "description": "<p>The key for the filter.</p> <p>Run the <a>DescribePatchProperties</a> command to view lists of valid keys for each operating system type.</p>"
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchFilterValueList"
              },
              {
                "description": "<p>The value for the filter key.</p> <p>Run the <a>DescribePatchProperties</a> command to view lists of valid values for each key based on operating system type.</p>"
              }
            ]
          }
        },
        "description": "<p> Defines which patches should be included in a patch baseline.</p> <p>A patch filter consists of a key and a set of values. The filter key is a patch property. For example, the available filter keys for <code>WINDOWS</code> are <code>PATCH_SET</code>, <code>PRODUCT</code>, <code>PRODUCT_FAMILY</code>, <code>CLASSIFICATION</code>, and <code>MSRC_SEVERITY</code>.</p> <p>The filter values define a matching criterion for the patch property indicated by the key. For example, if the filter key is <code>PRODUCT</code> and the filter values are <code>[\"Office 2013\", \"Office 2016\"]</code>, then the filter accepts all patches where product name is either \"Office 2013\" or \"Office 2016\". The filter values can be exact values for the patch property given as a key, or a wildcard (*), which matches all values.</p> <p>You can view lists of valid values for the patch properties by running the <code>DescribePatchProperties</code> command. For information about which patch properties can be used with each major operating system, see <a>DescribePatchProperties</a>.</p>"
      },
      "PatchFilterKey": {
        "type": "string",
        "enum": [
          "ARCH",
          "ADVISORY_ID",
          "BUGZILLA_ID",
          "PATCH_SET",
          "PRODUCT",
          "PRODUCT_FAMILY",
          "CLASSIFICATION",
          "CVE_ID",
          "EPOCH",
          "MSRC_SEVERITY",
          "NAME",
          "PATCH_ID",
          "SECTION",
          "PRIORITY",
          "REPOSITORY",
          "RELEASE",
          "SEVERITY",
          "SECURITY",
          "VERSION"
        ]
      },
      "PatchFilterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PatchFilterValue"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "PatchFilterValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "PatchRuleGroup": {
        "type": "object",
        "required": [
          "PatchRules"
        ],
        "properties": {
          "PatchRules": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchRuleList"
              },
              {
                "description": "The rules that make up the rule group."
              }
            ]
          }
        },
        "description": "A set of rules defining the approval rules for a patch baseline."
      },
      "PatchRuleList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PatchRule"
        },
        "minItems": 0,
        "maxItems": 10
      },
      "PatchRule": {
        "type": "object",
        "required": [
          "PatchFilterGroup"
        ],
        "properties": {
          "PatchFilterGroup": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchFilterGroup"
              },
              {
                "description": "The patch filter group that defines the criteria for the rule."
              }
            ]
          },
          "ComplianceLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchComplianceLevel"
              },
              {
                "description": "A compliance severity level for all approved patches in a patch baseline."
              }
            ]
          },
          "ApproveAfterDays": {
            "allOf": [
              {
                "$ref": "#/$defs/ApproveAfterDays"
              },
              {
                "description": "The number of days after the release date of each patch matched by the rule that the patch is marked as approved in the patch baseline. For example, a value of <code>7</code> means that patches are approved seven days after they are released. Not supported on Debian Server or Ubuntu Server."
              }
            ]
          },
          "ApproveUntilDate": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchStringDateTime"
              },
              {
                "description": "<p>The cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Not supported on Debian Server or Ubuntu Server.</p> <p>Enter dates in the format <code>YYYY-MM-DD</code>. For example, <code>2021-12-31</code>.</p>"
              }
            ]
          },
          "EnableNonSecurity": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "For managed nodes identified by the approval rule filters, enables a patch baseline to apply non-security updates available in the specified repository. The default value is <code>false</code>. Applies to Linux managed nodes only."
              }
            ]
          }
        },
        "description": "Defines an approval rule for a patch baseline."
      },
      "PatchComplianceLevel": {
        "type": "string",
        "enum": [
          "CRITICAL",
          "HIGH",
          "MEDIUM",
          "LOW",
          "INFORMATIONAL",
          "UNSPECIFIED"
        ]
      },
      "ApproveAfterDays": {
        "type": "integer",
        "minimum": 0,
        "maximum": 360
      },
      "PatchStringDateTime": {
        "type": "string",
        "minLength": 1,
        "maxLength": 10
      },
      "Boolean": {
        "type": "boolean"
      },
      "PatchIdList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PatchId"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "PatchId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 100
      },
      "PatchAction": {
        "type": "string",
        "enum": [
          "ALLOW_AS_DEPENDENCY",
          "BLOCK"
        ]
      },
      "BaselineDescription": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "PatchSourceList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PatchSource"
        },
        "minItems": 0,
        "maxItems": 20
      },
      "PatchSource": {
        "type": "object",
        "required": [
          "Name",
          "Products",
          "Configuration"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchSourceName"
              },
              {
                "description": "The name specified to identify the patch source."
              }
            ]
          },
          "Products": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchSourceProductList"
              },
              {
                "description": "The specific operating system versions a patch repository applies to, such as \"Ubuntu16.04\", \"AmazonLinux2016.09\", \"RedhatEnterpriseLinux7.2\" or \"Suse12.7\". For lists of supported product values, see <a>PatchFilter</a>."
              }
            ]
          },
          "Configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/PatchSourceConfiguration"
              },
              {
                "description": "<p>The value of the yum repo configuration. For example:</p> <p> <code>[main]</code> </p> <p> <code>name=MyCustomRepository</code> </p> <p> <code>baseurl=https://my-custom-repository</code> </p> <p> <code>enabled=1</code> </p> <note> <p>For information about other options available for your yum repository configuration, see <a href=\"https://man7.org/linux/man-pages/man5/dnf.conf.5.html\">dnf.conf(5)</a>.</p> </note>"
              }
            ]
          }
        },
        "description": "Information about the patches to use to update the managed nodes, including target operating systems and source repository. Applies to Linux managed nodes only."
      },
      "PatchSourceName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-.]{3,50}$"
      },
      "PatchSourceProductList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PatchSourceProduct"
        },
        "minItems": 1,
        "maxItems": 20
      },
      "PatchSourceProduct": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128
      },
      "PatchSourceConfiguration": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024,
        "format": "password"
      },
      "ClientToken": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "maxItems": 1000
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The name of the tag."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the tag."
              }
            ]
          }
        },
        "description": "Metadata that you assign to your Amazon Web Services resources. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. In Amazon Web Services Systems Manager, you can apply tags to Systems Manager documents (SSM documents), managed nodes, maintenance windows, parameters, patch baselines, OpsItems, and OpsMetadata."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ssm.us-east-1.amazonaws.com/#X-Amz-Target=AmazonSSM.CreatePatchBaseline"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**BaselineId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
