{
  "name": "StartChangeRequestExecution",
  "description": "Creates a change request for Change Manager. The Automation runbooks specified in the change request run only after all required approvals for the change request have been received.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AmazonSSM.StartChangeRequestExecution"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/StartChangeRequestExecutionRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "StartChangeRequestExecutionRequest": {
        "type": "object",
        "required": [
          "DocumentName",
          "Runbooks"
        ],
        "title": "StartChangeRequestExecutionRequest",
        "properties": {
          "ScheduledTime": {
            "allOf": [
              {
                "$ref": "#/$defs/DateTime"
              },
              {
                "description": "<p>The date and time specified in the change request to run the Automation runbooks.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
              }
            ]
          },
          "DocumentName": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentARN"
              },
              {
                "description": "The name of the change template document to run during the runbook workflow."
              }
            ]
          },
          "DocumentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentVersion"
              },
              {
                "description": "The version of the change template document to run during the runbook workflow."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AutomationParameterMap"
              },
              {
                "description": "A key-value map of parameters that match the declared parameters in the change template document."
              }
            ]
          },
          "ChangeRequestName": {
            "allOf": [
              {
                "$ref": "#/$defs/ChangeRequestName"
              },
              {
                "description": "The name of the change request associated with the runbook workflow to be run."
              }
            ]
          },
          "ClientToken": {
            "allOf": [
              {
                "$ref": "#/$defs/IdempotencyToken"
              },
              {
                "description": "The user-provided idempotency token. The token must be unique, is case insensitive, enforces the UUID format, and can't be reused."
              }
            ]
          },
          "AutoApprove": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p>Indicates whether the change request can be approved automatically without the need for manual approvals.</p> <p>If <code>AutoApprovable</code> is enabled in a change template, then setting <code>AutoApprove</code> to <code>true</code> in <code>StartChangeRequestExecution</code> creates a change request that bypasses approver review.</p> <note> <p>Change Calendar restrictions are not bypassed in this scenario. If the state of an associated calendar is <code>CLOSED</code>, change freeze approvers must still grant permission for this change request to run. If they don't, the change won't be processed until the calendar state is again <code>OPEN</code>. </p> </note>"
              }
            ]
          },
          "Runbooks": {
            "allOf": [
              {
                "$ref": "#/$defs/Runbooks"
              },
              {
                "description": "<p>Information about the Automation runbooks that are run during the runbook workflow.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "<p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for a change request. Tags enable you to categorize a resource in different ways, such as by purpose, owner, or environment. For example, you might want to tag a change request to identify an environment or target Amazon Web Services Region. In this case, you could specify the following key-value pairs:</p> <ul> <li> <p> <code>Key=Environment,Value=Production</code> </p> </li> <li> <p> <code>Key=Region,Value=us-east-2</code> </p> </li> </ul>"
              }
            ]
          },
          "ScheduledEndTime": {
            "allOf": [
              {
                "$ref": "#/$defs/DateTime"
              },
              {
                "description": "The time that the requester expects the runbook workflow related to the change request to complete. The time is an estimate only that the requester provides for reviewers."
              }
            ]
          },
          "ChangeDetails": {
            "allOf": [
              {
                "$ref": "#/$defs/ChangeDetailsValue"
              },
              {
                "description": "User-provided details about the change. If no details are provided, content specified in the <b>Template information</b> section of the associated change template is added."
              }
            ]
          }
        }
      },
      "DateTime": {
        "type": "string",
        "format": "date-time"
      },
      "DocumentARN": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_\\-.:/]{3,128}$"
      },
      "DocumentVersion": {
        "type": "string",
        "pattern": "([$]LATEST|[$]DEFAULT|^[1-9][0-9]*$)"
      },
      "AutomationParameterMap": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 200,
        "additionalProperties": {
          "$ref": "#/$defs/AutomationParameterValueList"
        }
      },
      "AutomationParameterValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AutomationParameterValue"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "AutomationParameterValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 512
      },
      "ChangeRequestName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 1024
      },
      "IdempotencyToken": {
        "type": "string",
        "pattern": "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}",
        "minLength": 36,
        "maxLength": 36
      },
      "Boolean": {
        "type": "boolean"
      },
      "Runbooks": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Runbook"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "Runbook": {
        "type": "object",
        "required": [
          "DocumentName"
        ],
        "properties": {
          "DocumentName": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentARN"
              },
              {
                "description": "The name of the Automation runbook used in a runbook workflow."
              }
            ]
          },
          "DocumentVersion": {
            "allOf": [
              {
                "$ref": "#/$defs/DocumentVersion"
              },
              {
                "description": "The version of the Automation runbook used in a runbook workflow."
              }
            ]
          },
          "Parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/AutomationParameterMap"
              },
              {
                "description": "The key-value map of execution parameters, which were supplied when calling <code>StartChangeRequestExecution</code>."
              }
            ]
          },
          "TargetParameterName": {
            "allOf": [
              {
                "$ref": "#/$defs/AutomationParameterKey"
              },
              {
                "description": "The name of the parameter used as the target resource for the rate-controlled runbook workflow. Required if you specify <code>Targets</code>. "
              }
            ]
          },
          "Targets": {
            "allOf": [
              {
                "$ref": "#/$defs/Targets"
              },
              {
                "description": "A key-value mapping to target resources that the runbook operation performs tasks on. Required if you specify <code>TargetParameterName</code>."
              }
            ]
          },
          "TargetMaps": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetMaps"
              },
              {
                "description": "A key-value mapping of runbook parameters to target resources. Both Targets and TargetMaps can't be specified together."
              }
            ]
          },
          "MaxConcurrency": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrency"
              },
              {
                "description": "The <code>MaxConcurrency</code> value specified by the user when the operation started, indicating the maximum number of resources that the runbook operation can run on at the same time."
              }
            ]
          },
          "MaxErrors": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxErrors"
              },
              {
                "description": "The <code>MaxErrors</code> value specified by the user when the execution started, indicating the maximum number of errors that can occur during the operation before the updates are stopped or rolled back."
              }
            ]
          },
          "TargetLocations": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetLocations"
              },
              {
                "description": "Information about the Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Runbook operation."
              }
            ]
          }
        },
        "description": "<p>Information about an Automation runbook used in a runbook workflow in Change Manager.</p> <note> <p>The Automation runbooks specified for the runbook workflow can't run until all required approvals for the change request have been received.</p> </note>"
      },
      "AutomationParameterKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "Targets": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Target"
        },
        "minItems": 0,
        "maxItems": 5
      },
      "Target": {
        "type": "object",
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetKey"
              },
              {
                "description": "User-defined criteria for sending commands that target managed nodes that meet the criteria."
              }
            ]
          },
          "Values": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetValues"
              },
              {
                "description": "<p>User-defined criteria that maps to <code>Key</code>. For example, if you specified <code>tag:ServerRole</code>, you could specify <code>value:WebServer</code> to run a command on instances that include EC2 tags of <code>ServerRole,WebServer</code>. </p> <p>Depending on the type of target, the maximum number of values for a key might be lower than the global maximum of 50.</p>"
              }
            ]
          }
        },
        "description": "<p>An array of search criteria that targets managed nodes using a key-value pair that you specify.</p> <note> <p> One or more targets must be specified for maintenance window Run Command-type tasks. Depending on the task, targets are optional for other maintenance window task types (Automation, Lambda, and Step Functions). For more information about running tasks that don't specify targets, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html\">Registering maintenance window tasks without targets</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p> </note> <p>Supported formats include the following.</p> <ul> <li> <p> <code>Key=InstanceIds,Values=&lt;instance-id-1&gt;,&lt;instance-id-2&gt;,&lt;instance-id-3&gt;</code> </p> </li> <li> <p> <code>Key=tag:&lt;my-tag-key&gt;,Values=&lt;my-tag-value-1&gt;,&lt;my-tag-value-2&gt;</code> </p> </li> <li> <p> <code>Key=tag-key,Values=&lt;my-tag-key-1&gt;,&lt;my-tag-key-2&gt;</code> </p> </li> <li> <p> <b>Run Command and Maintenance window targets only</b>: <code>Key=resource-groups:Name,Values=&lt;resource-group-name&gt;</code> </p> </li> <li> <p> <b>Maintenance window targets only</b>: <code>Key=resource-groups:ResourceTypeFilters,Values=&lt;resource-type-1&gt;,&lt;resource-type-2&gt;</code> </p> </li> <li> <p> <b>Automation targets only</b>: <code>Key=ResourceGroup;Values=&lt;resource-group-name&gt;</code> </p> </li> </ul> <p>For example:</p> <ul> <li> <p> <code>Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE</code> </p> </li> <li> <p> <code>Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3</code> </p> </li> <li> <p> <code>Key=tag-key,Values=Name,Instance-Type,CostCenter</code> </p> </li> <li> <p> <b>Run Command and Maintenance window targets only</b>: <code>Key=resource-groups:Name,Values=ProductionResourceGroup</code> </p> <p>This example demonstrates how to target all resources in the resource group <b>ProductionResourceGroup</b> in your maintenance window.</p> </li> <li> <p> <b>Maintenance window targets only</b>: <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code> </p> <p>This example demonstrates how to target only Amazon Elastic Compute Cloud (Amazon EC2) instances and VPCs in your maintenance window.</p> </li> <li> <p> <b>Automation targets only</b>: <code>Key=ResourceGroup,Values=MyResourceGroup</code> </p> </li> <li> <p> <b>State Manager association targets only</b>: <code>Key=InstanceIds,Values=*</code> </p> <p>This example demonstrates how to target all managed instances in the Amazon Web Services Region where the association was created.</p> </li> </ul> <p>For more information about how to send commands that target managed nodes using <code>Key,Value</code> parameters, see <a href=\"https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting\">Targeting multiple instances</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>"
      },
      "TargetKey": {
        "type": "string",
        "pattern": "^[\\p{L}\\p{Z}\\p{N}_.:/=\\-@]*$|resource-groups:ResourceTypeFilters|resource-groups:Name",
        "minLength": 1,
        "maxLength": 163
      },
      "TargetValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetValue"
        },
        "minItems": 0,
        "maxItems": 50
      },
      "TargetValue": {
        "type": "string"
      },
      "TargetMaps": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetMap"
        },
        "minItems": 0,
        "maxItems": 300
      },
      "TargetMap": {
        "type": "object",
        "minProperties": 1,
        "maxProperties": 20,
        "additionalProperties": {
          "$ref": "#/$defs/TargetMapValueList"
        }
      },
      "TargetMapValueList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetMapValue"
        },
        "minItems": 0,
        "maxItems": 25
      },
      "TargetMapValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 50
      },
      "MaxConcurrency": {
        "type": "string",
        "pattern": "^([1-9][0-9]*|[1-9][0-9]%|[1-9]%|100%)$",
        "minLength": 1,
        "maxLength": 7
      },
      "MaxErrors": {
        "type": "string",
        "pattern": "^([1-9][0-9]*|[0]|[1-9][0-9]%|[0-9]%|100%)$",
        "minLength": 1,
        "maxLength": 7
      },
      "TargetLocations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TargetLocation"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "TargetLocation": {
        "type": "object",
        "properties": {
          "Accounts": {
            "allOf": [
              {
                "$ref": "#/$defs/Accounts"
              },
              {
                "description": "The Amazon Web Services accounts targeted by the current Automation execution."
              }
            ]
          },
          "Regions": {
            "allOf": [
              {
                "$ref": "#/$defs/Regions"
              },
              {
                "description": "The Amazon Web Services Regions targeted by the current Automation execution."
              }
            ]
          },
          "TargetLocationMaxConcurrency": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxConcurrency"
              },
              {
                "description": "The maximum number of Amazon Web Services Regions and Amazon Web Services accounts allowed to run the Automation concurrently."
              }
            ]
          },
          "TargetLocationMaxErrors": {
            "allOf": [
              {
                "$ref": "#/$defs/MaxErrors"
              },
              {
                "description": "The maximum number of errors allowed before the system stops queueing additional Automation executions for the currently running Automation."
              }
            ]
          },
          "ExecutionRoleName": {
            "allOf": [
              {
                "$ref": "#/$defs/ExecutionRoleName"
              },
              {
                "description": "The Automation execution role used by the currently running Automation. If not specified, the default value is <code>AWS-SystemsManager-AutomationExecutionRole</code>."
              }
            ]
          },
          "TargetLocationAlarmConfiguration": {
            "$ref": "#/$defs/AlarmConfiguration"
          }
        },
        "description": "The combination of Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Automation execution."
      },
      "Accounts": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Account"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Account": {
        "type": "string"
      },
      "Regions": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Region"
        },
        "minItems": 1,
        "maxItems": 50
      },
      "Region": {
        "type": "string"
      },
      "ExecutionRoleName": {
        "type": "string",
        "pattern": "[\\w+=,.@/-]+",
        "minLength": 1,
        "maxLength": 64
      },
      "AlarmConfiguration": {
        "type": "object",
        "required": [
          "Alarms"
        ],
        "properties": {
          "IgnorePollAlarmFailure": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "When this value is <i>true</i>, your automation or command continues to run in cases where we can’t retrieve alarm status information from CloudWatch. In cases where we successfully retrieve an alarm status of OK or INSUFFICIENT_DATA, the automation or command continues to run, regardless of this value. Default is <i>false</i>."
              }
            ]
          },
          "Alarms": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmList"
              },
              {
                "description": "The name of the CloudWatch alarm specified in the configuration."
              }
            ]
          }
        },
        "description": "The details for the CloudWatch alarm you want to apply to an automation or command."
      },
      "AlarmList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Alarm"
        },
        "minItems": 1,
        "maxItems": 1
      },
      "Alarm": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/AlarmName"
              },
              {
                "description": "The name of your CloudWatch alarm."
              }
            ]
          }
        },
        "description": "A CloudWatch alarm you apply to an automation or command."
      },
      "AlarmName": {
        "type": "string",
        "pattern": "^(?!\\s*$).+",
        "minLength": 1,
        "maxLength": 255
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "maxItems": 1000
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The name of the tag."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value of the tag."
              }
            ]
          }
        },
        "description": "Metadata that you assign to your Amazon Web Services resources. Tags enable you to categorize your resources in different ways, for example, by purpose, owner, or environment. In Amazon Web Services Systems Manager, you can apply tags to Systems Manager documents (SSM documents), managed nodes, maintenance windows, parameters, patch baselines, OpsItems, and OpsMetadata."
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      },
      "ChangeDetailsValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 32768
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://ssm.us-east-1.amazonaws.com/#X-Amz-Target=AmazonSSM.StartChangeRequestExecution"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AutomationExecutionId**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
