{
  "name": "UpdateBudget",
  "description": "<p>Updates a budget. You can change every part of a budget except for the <code>budgetName</code> and the <code>calculatedSpend</code>. When you modify a budget, the <code>calculatedSpend</code> drops to zero until Amazon Web Services has new usage data to use for forecasting.</p> <important> <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href=\"https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_UpdateBudget.html#API_UpdateBudget_Examples\">Examples</a> section. </p> </important>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSBudgetServiceGateway.UpdateBudget"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/UpdateBudgetRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "UpdateBudgetRequest": {
        "type": "object",
        "required": [
          "AccountId",
          "NewBudget"
        ],
        "title": "UpdateBudgetRequest",
        "properties": {
          "AccountId": {
            "allOf": [
              {
                "$ref": "#/$defs/AccountId"
              },
              {
                "description": "The <code>accountId</code> that is associated with the budget that you want to update."
              }
            ]
          },
          "NewBudget": {
            "allOf": [
              {
                "$ref": "#/$defs/Budget"
              },
              {
                "description": "The budget that you want to update your budget to."
              }
            ]
          }
        },
        "description": " Request of UpdateBudget "
      },
      "AccountId": {
        "type": "string",
        "pattern": "\\d{12}",
        "description": "The account ID of the user. It's a 12-digit number.",
        "minLength": 12,
        "maxLength": 12
      },
      "Budget": {
        "type": "object",
        "required": [
          "BudgetName",
          "TimeUnit",
          "BudgetType"
        ],
        "properties": {
          "BudgetName": {
            "allOf": [
              {
                "$ref": "#/$defs/BudgetName"
              },
              {
                "description": "The name of a budget. The name must be unique within an account. The <code>:</code> and <code>\\</code> characters, and the \"/action/\" substring, aren't allowed in <code>BudgetName</code>."
              }
            ]
          },
          "BudgetLimit": {
            "allOf": [
              {
                "$ref": "#/$defs/Spend"
              },
              {
                "description": "<p>The total amount of cost, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage that you want to track with your budget.</p> <p> <code>BudgetLimit</code> is required for cost or usage budgets, but optional for RI or Savings Plans utilization or coverage budgets. RI and Savings Plans utilization or coverage budgets default to <code>100</code>. This is the only valid value for RI or Savings Plans utilization or coverage budgets. You can't use <code>BudgetLimit</code> with <code>PlannedBudgetLimits</code> for <code>CreateBudget</code> and <code>UpdateBudget</code> actions. </p>"
              }
            ]
          },
          "PlannedBudgetLimits": {
            "allOf": [
              {
                "$ref": "#/$defs/PlannedBudgetLimits"
              },
              {
                "description": "<p>A map containing multiple <code>BudgetLimit</code>, including current or future limits.</p> <p> <code>PlannedBudgetLimits</code> is available for cost or usage budget and supports both monthly and quarterly <code>TimeUnit</code>. </p> <p>For monthly budgets, provide 12 months of <code>PlannedBudgetLimits</code> values. This must start from the current month and include the next 11 months. The <code>key</code> is the start of the month, <code>UTC</code> in epoch seconds. </p> <p>For quarterly budgets, provide four quarters of <code>PlannedBudgetLimits</code> value entries in standard calendar quarter increments. This must start from the current quarter and include the next three quarters. The <code>key</code> is the start of the quarter, <code>UTC</code> in epoch seconds. </p> <p>If the planned budget expires before 12 months for monthly or four quarters for quarterly, provide the <code>PlannedBudgetLimits</code> values only for the remaining periods.</p> <p>If the budget begins at a date in the future, provide <code>PlannedBudgetLimits</code> values from the start date of the budget. </p> <p>After all of the <code>BudgetLimit</code> values in <code>PlannedBudgetLimits</code> are used, the budget continues to use the last limit as the <code>BudgetLimit</code>. At that point, the planned budget provides the same experience as a fixed budget. </p> <p> <code>DescribeBudget</code> and <code>DescribeBudgets</code> response along with <code>PlannedBudgetLimits</code> also contain <code>BudgetLimit</code> representing the current month or quarter limit present in <code>PlannedBudgetLimits</code>. This only applies to budgets that are created with <code>PlannedBudgetLimits</code>. Budgets that are created without <code>PlannedBudgetLimits</code> only contain <code>BudgetLimit</code>. They don't contain <code>PlannedBudgetLimits</code>.</p>"
              }
            ]
          },
          "CostFilters": {
            "allOf": [
              {
                "$ref": "#/$defs/CostFilters"
              },
              {
                "description": "<p>The cost filters, such as <code>Region</code>, <code>Service</code>, <code>member account</code>, <code>Tag</code>, or <code>Cost Category</code>, that are applied to a budget.</p> <p>Amazon Web Services Budgets supports the following services as a <code>Service</code> filter for RI budgets:</p> <ul> <li> <p>Amazon EC2</p> </li> <li> <p>Amazon Redshift</p> </li> <li> <p>Amazon Relational Database Service</p> </li> <li> <p>Amazon ElastiCache</p> </li> <li> <p>Amazon OpenSearch Service</p> </li> </ul>"
              }
            ]
          },
          "CostTypes": {
            "allOf": [
              {
                "$ref": "#/$defs/CostTypes"
              },
              {
                "description": "<p>The types of costs that are included in this <code>COST</code> budget.</p> <p> <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code> budgets do not have <code>CostTypes</code>.</p>"
              }
            ]
          },
          "TimeUnit": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeUnit"
              },
              {
                "description": "The length of time until a budget resets the actual and forecasted spend."
              }
            ]
          },
          "TimePeriod": {
            "allOf": [
              {
                "$ref": "#/$defs/TimePeriod"
              },
              {
                "description": "<p>The period of time that's covered by a budget. You setthe start date and end date. The start date must come before the end date. The end date must come before <code>06/15/87 00:00 UTC</code>. </p> <p>If you create your budget and don't specify a start date, Amazon Web Services defaults to the start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example, if you created your budget on January 24, 2018, chose <code>DAILY</code>, and didn't set a start date, Amazon Web Services set your start date to <code>01/24/18 00:00 UTC</code>. If you chose <code>MONTHLY</code>, Amazon Web Services set your start date to <code>01/01/18 00:00 UTC</code>. If you didn't specify an end date, Amazon Web Services set your end date to <code>06/15/87 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API. </p> <p>You can change either date with the <code>UpdateBudget</code> operation.</p> <p>After the end date, Amazon Web Services deletes the budget and all the associated notifications and subscribers.</p>"
              }
            ]
          },
          "CalculatedSpend": {
            "allOf": [
              {
                "$ref": "#/$defs/CalculatedSpend"
              },
              {
                "description": "The actual and forecasted cost or usage that the budget tracks."
              }
            ]
          },
          "BudgetType": {
            "allOf": [
              {
                "$ref": "#/$defs/BudgetType"
              },
              {
                "description": "Specifies whether this budget tracks costs, usage, RI utilization, RI coverage, Savings Plans utilization, or Savings Plans coverage."
              }
            ]
          },
          "LastUpdatedTime": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericTimestamp"
              },
              {
                "description": "The last time that you updated this budget."
              }
            ]
          },
          "AutoAdjustData": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoAdjustData"
              },
              {
                "description": "The parameters that determine the budget amount for an auto-adjusting budget."
              }
            ]
          }
        },
        "description": "<p>Represents the output of the <code>CreateBudget</code> operation. The content consists of the detailed metadata and data file information, and the current status of the <code>budget</code> object.</p> <p>This is the Amazon Resource Name (ARN) pattern for a budget: </p> <p> <code>arn:aws:budgets::AccountId:budget/budgetName</code> </p>"
      },
      "BudgetName": {
        "type": "string",
        "pattern": "^(?![^:\\\\]*/action/)[^:\\\\]+$",
        "description": " A string that represents the budget name. The \":\" and \"\\\" characters, and the \"/action/\" substring, aren't allowed.",
        "minLength": 1,
        "maxLength": 100
      },
      "Spend": {
        "type": "object",
        "required": [
          "Amount",
          "Unit"
        ],
        "properties": {
          "Amount": {
            "allOf": [
              {
                "$ref": "#/$defs/NumericValue"
              },
              {
                "description": "The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold."
              }
            ]
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/$defs/UnitValue"
              },
              {
                "description": "The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP."
              }
            ]
          }
        },
        "description": "<p>The amount of cost or usage that's measured for a budget.</p> <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage has the following parameters:</p> <ul> <li> <p>An <code>Amount</code> of <code>3</code> </p> </li> <li> <p>A <code>unit</code> of <code>GB</code> </p> </li> </ul>"
      },
      "NumericValue": {
        "type": "string",
        "pattern": "([0-9]*\\.)?[0-9]+",
        "description": " A string that represents a numeric value.",
        "minLength": 1,
        "maxLength": 2147483647
      },
      "UnitValue": {
        "type": "string",
        "pattern": ".*",
        "description": " A string that represents the spend unit of a budget. It can't be null or empty.",
        "minLength": 1,
        "maxLength": 2147483647
      },
      "PlannedBudgetLimits": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/Spend"
        }
      },
      "CostFilters": {
        "type": "object",
        "description": " A map that represents the cost filters that are applied to the budget.",
        "additionalProperties": {
          "$ref": "#/$defs/DimensionValues"
        }
      },
      "DimensionValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/DimensionValue"
        }
      },
      "DimensionValue": {
        "type": "string",
        "pattern": "[\\S\\s]*",
        "minLength": 0,
        "maxLength": 2147483647
      },
      "CostTypes": {
        "type": "object",
        "properties": {
          "IncludeTax": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes taxes.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeSubscription": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes subscriptions.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "UseBlended": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget uses a blended rate.</p> <p>The default value is <code>false</code>.</p>"
              }
            ]
          },
          "IncludeRefund": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes refunds.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeCredit": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes credits.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeUpfront": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes upfront RI costs.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeRecurring": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes recurring fees such as monthly RI fees.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeOtherSubscription": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes non-RI subscription costs.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeSupport": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes support subscription fees.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "IncludeDiscount": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget includes discounts.</p> <p>The default value is <code>true</code>.</p>"
              }
            ]
          },
          "UseAmortized": {
            "allOf": [
              {
                "$ref": "#/$defs/NullableBoolean"
              },
              {
                "description": "<p>Specifies whether a budget uses the amortized rate.</p> <p>The default value is <code>false</code>.</p>"
              }
            ]
          }
        },
        "description": "<p>The types of cost that are included in a <code>COST</code> budget, such as tax and subscriptions.</p> <p> <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, and <code>SAVINGS_PLANS_COVERAGE</code> budgets don't have <code>CostTypes</code>.</p>"
      },
      "NullableBoolean": {
        "type": "boolean"
      },
      "TimeUnit": {
        "type": "string",
        "enum": [
          "DAILY",
          "MONTHLY",
          "QUARTERLY",
          "ANNUALLY"
        ],
        "description": " The time unit of the budget, such as MONTHLY or QUARTERLY."
      },
      "TimePeriod": {
        "type": "object",
        "properties": {
          "Start": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericTimestamp"
              },
              {
                "description": "<p>The start date for a budget. If you created your budget and didn't specify a start date, Amazon Web Services defaults to the start of your chosen time period (DAILY, MONTHLY, QUARTERLY, or ANNUALLY). For example, if you created your budget on January 24, 2018, chose <code>DAILY</code>, and didn't set a start date, Amazon Web Services set your start date to <code>01/24/18 00:00 UTC</code>. If you chose <code>MONTHLY</code>, Amazon Web Services set your start date to <code>01/01/18 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API.</p> <p>You can change your start date with the <code>UpdateBudget</code> operation.</p>"
              }
            ]
          },
          "End": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericTimestamp"
              },
              {
                "description": "<p>The end date for a budget. If you didn't specify an end date, Amazon Web Services set your end date to <code>06/15/87 00:00 UTC</code>. The defaults are the same for the Billing and Cost Management console and the API.</p> <p>After the end date, Amazon Web Services deletes the budget and all the associated notifications and subscribers. You can change your end date with the <code>UpdateBudget</code> operation.</p>"
              }
            ]
          }
        },
        "description": "The period of time that's covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. "
      },
      "GenericTimestamp": {
        "type": "string",
        "description": " A generic time stamp. In Java, it's transformed to a <code>Date</code> object.",
        "format": "date-time"
      },
      "CalculatedSpend": {
        "type": "object",
        "required": [
          "ActualSpend"
        ],
        "properties": {
          "ActualSpend": {
            "allOf": [
              {
                "$ref": "#/$defs/Spend"
              },
              {
                "description": "The amount of cost, usage, RI units, or Savings Plans units that you used."
              }
            ]
          },
          "ForecastedSpend": {
            "allOf": [
              {
                "$ref": "#/$defs/Spend"
              },
              {
                "description": "The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to use."
              }
            ]
          }
        },
        "description": "<p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks how much you've used, cost, usage, RI units, or Savings Plans units and the <code>forecastedSpend</code> tracks how much that you're predicted to spend based on your historical usage profile.</p> <p>For example, if it's the 20th of the month and you have spent <code>50</code> dollars on Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your <code>forecastedSpend</code> is <code>75 USD</code>.</p>"
      },
      "BudgetType": {
        "type": "string",
        "enum": [
          "USAGE",
          "COST",
          "RI_UTILIZATION",
          "RI_COVERAGE",
          "SAVINGS_PLANS_UTILIZATION",
          "SAVINGS_PLANS_COVERAGE"
        ],
        "description": "<p> The type of a budget. It must be one of the following types: </p> <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>"
      },
      "AutoAdjustData": {
        "type": "object",
        "required": [
          "AutoAdjustType"
        ],
        "properties": {
          "AutoAdjustType": {
            "allOf": [
              {
                "$ref": "#/$defs/AutoAdjustType"
              },
              {
                "description": "The string that defines whether your budget auto-adjusts based on historical or forecasted data."
              }
            ]
          },
          "HistoricalOptions": {
            "allOf": [
              {
                "$ref": "#/$defs/HistoricalOptions"
              },
              {
                "description": "The parameters that define or describe the historical data that your auto-adjusting budget is based on."
              }
            ]
          },
          "LastAutoAdjustTime": {
            "allOf": [
              {
                "$ref": "#/$defs/GenericTimestamp"
              },
              {
                "description": "The last time that your budget was auto-adjusted."
              }
            ]
          }
        },
        "description": "The parameters that determine the budget amount for an auto-adjusting budget."
      },
      "AutoAdjustType": {
        "type": "string",
        "enum": [
          "HISTORICAL",
          "FORECAST"
        ]
      },
      "HistoricalOptions": {
        "type": "object",
        "required": [
          "BudgetAdjustmentPeriod"
        ],
        "properties": {
          "BudgetAdjustmentPeriod": {
            "allOf": [
              {
                "$ref": "#/$defs/AdjustmentPeriod"
              },
              {
                "description": "<p>The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount. The maximum value depends on the <code>TimeUnit</code> granularity of the budget:</p> <ul> <li> <p>For the <code>DAILY</code> granularity, the maximum value is <code>60</code>.</p> </li> <li> <p>For the <code>MONTHLY</code> granularity, the maximum value is <code>12</code>.</p> </li> <li> <p>For the <code>QUARTERLY</code> granularity, the maximum value is <code>4</code>.</p> </li> <li> <p>For the <code>ANNUALLY</code> granularity, the maximum value is <code>1</code>.</p> </li> </ul>"
              }
            ]
          },
          "LookBackAvailablePeriods": {
            "allOf": [
              {
                "$ref": "#/$defs/AdjustmentPeriod"
              },
              {
                "description": "<p>The integer that describes how many budget periods in your <code>BudgetAdjustmentPeriod</code> are included in the calculation of your current <code>BudgetLimit</code>. If the first budget period in your <code>BudgetAdjustmentPeriod</code> has no cost data, then that budget period isn’t included in the average that determines your budget limit. </p> <p>For example, if you set <code>BudgetAdjustmentPeriod</code> as <code>4</code> quarters, but your account had no cost data in the first quarter, then only the last three quarters are included in the calculation. In this scenario, <code>LookBackAvailablePeriods</code> returns <code>3</code>. </p> <p>You can’t set your own <code>LookBackAvailablePeriods</code>. The value is automatically calculated from the <code>BudgetAdjustmentPeriod</code> and your historical cost data.</p>"
              }
            ]
          }
        },
        "description": "The parameters that define or describe the historical data that your auto-adjusting budget is based on."
      },
      "AdjustmentPeriod": {
        "type": "integer",
        "minimum": 1,
        "maximum": 60
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://budgets.amazonaws.com/#X-Amz-Target=AWSBudgetServiceGateway.UpdateBudget"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        " Response of UpdateBudget ",
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
