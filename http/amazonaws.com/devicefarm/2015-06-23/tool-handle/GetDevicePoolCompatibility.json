{
  "name": "GetDevicePoolCompatibility",
  "description": "Gets information about compatibility with a device pool.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "DeviceFarm_20150623.GetDevicePoolCompatibility"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/GetDevicePoolCompatibilityRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "GetDevicePoolCompatibilityRequest": {
        "type": "object",
        "required": [
          "devicePoolArn"
        ],
        "title": "GetDevicePoolCompatibilityRequest",
        "properties": {
          "devicePoolArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The device pool's ARN."
              }
            ]
          },
          "appArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the app that is associated with the specified device pool."
              }
            ]
          },
          "testType": {
            "allOf": [
              {
                "$ref": "#/$defs/TestType"
              },
              {
                "description": "<p>The test type for the specified device pool.</p> <p>Allowed values include the following:</p> <ul> <li> <p>BUILTIN_FUZZ.</p> </li> <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT.</p> </li> <li> <p>APPIUM_JAVA_TESTNG.</p> </li> <li> <p>APPIUM_PYTHON.</p> </li> <li> <p>APPIUM_NODE.</p> </li> <li> <p>APPIUM_RUBY.</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT.</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG.</p> </li> <li> <p>APPIUM_WEB_PYTHON.</p> </li> <li> <p>APPIUM_WEB_NODE.</p> </li> <li> <p>APPIUM_WEB_RUBY.</p> </li> <li> <p>CALABASH.</p> </li> <li> <p>INSTRUMENTATION.</p> </li> <li> <p>UIAUTOMATION.</p> </li> <li> <p>UIAUTOMATOR.</p> </li> <li> <p>XCTEST.</p> </li> <li> <p>XCTEST_UI.</p> </li> </ul>"
              }
            ]
          },
          "test": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleRunTest"
              },
              {
                "description": "Information about the uploaded test to be run against the device pool."
              }
            ]
          },
          "configuration": {
            "allOf": [
              {
                "$ref": "#/$defs/ScheduleRunConfiguration"
              },
              {
                "description": "An object that contains information about the settings for a run."
              }
            ]
          }
        },
        "description": "Represents a request to the get device pool compatibility operation."
      },
      "AmazonResourceName": {
        "type": "string",
        "pattern": "^arn:.+",
        "minLength": 32,
        "maxLength": 1011
      },
      "TestType": {
        "type": "string",
        "enum": [
          "BUILTIN_FUZZ",
          "BUILTIN_EXPLORER",
          "WEB_PERFORMANCE_PROFILE",
          "APPIUM_JAVA_JUNIT",
          "APPIUM_JAVA_TESTNG",
          "APPIUM_PYTHON",
          "APPIUM_NODE",
          "APPIUM_RUBY",
          "APPIUM_WEB_JAVA_JUNIT",
          "APPIUM_WEB_JAVA_TESTNG",
          "APPIUM_WEB_PYTHON",
          "APPIUM_WEB_NODE",
          "APPIUM_WEB_RUBY",
          "CALABASH",
          "INSTRUMENTATION",
          "UIAUTOMATION",
          "UIAUTOMATOR",
          "XCTEST",
          "XCTEST_UI",
          "REMOTE_ACCESS_RECORD",
          "REMOTE_ACCESS_REPLAY"
        ]
      },
      "ScheduleRunTest": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/$defs/TestType"
              },
              {
                "description": "<p>The test's type.</p> <p>Must be one of the following values:</p> <ul> <li> <p>BUILTIN_FUZZ</p> </li> <li> <p>BUILTIN_EXPLORER. For Android, an app explorer that traverses an Android app, interacting with it and capturing screenshots at the same time.</p> </li> <li> <p>APPIUM_JAVA_JUNIT</p> </li> <li> <p>APPIUM_JAVA_TESTNG</p> </li> <li> <p>APPIUM_PYTHON</p> </li> <li> <p>APPIUM_NODE</p> </li> <li> <p>APPIUM_RUBY</p> </li> <li> <p>APPIUM_WEB_JAVA_JUNIT</p> </li> <li> <p>APPIUM_WEB_JAVA_TESTNG</p> </li> <li> <p>APPIUM_WEB_PYTHON</p> </li> <li> <p>APPIUM_WEB_NODE</p> </li> <li> <p>APPIUM_WEB_RUBY</p> </li> <li> <p>CALABASH</p> </li> <li> <p>INSTRUMENTATION</p> </li> <li> <p>UIAUTOMATION</p> </li> <li> <p>UIAUTOMATOR</p> </li> <li> <p>XCTEST</p> </li> <li> <p>XCTEST_UI</p> </li> </ul>"
              }
            ]
          },
          "testPackageArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the uploaded test to be run."
              }
            ]
          },
          "testSpecArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the YAML-formatted test specification."
              }
            ]
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/$defs/Filter"
              },
              {
                "description": "The test's filter."
              }
            ]
          },
          "parameters": {
            "allOf": [
              {
                "$ref": "#/$defs/TestParameters"
              },
              {
                "description": "<p>The test's parameters, such as test framework parameters and fixture settings. Parameters are represented by name-value pairs of strings.</p> <p>For all tests:</p> <ul> <li> <p> <code>app_performance_monitoring</code>: Performance monitoring is enabled by default. Set this parameter to false to disable it.</p> </li> </ul> <p>For Calabash tests:</p> <ul> <li> <p>profile: A cucumber profile (for example, <code>my_profile_name</code>).</p> </li> <li> <p>tags: You can limit execution to features or scenarios that have (or don't have) certain tags (for example, @smoke or @smoke,~@wip).</p> </li> </ul> <p>For Appium tests (all types):</p> <ul> <li> <p>appium_version: The Appium version. Currently supported values are 1.6.5 (and later), latest, and default.</p> <ul> <li> <p>latest runs the latest Appium version supported by Device Farm (1.9.1).</p> </li> <li> <p>For default, Device Farm selects a compatible version of Appium for the device. The current behavior is to run 1.7.2 on Android devices and iOS 9 and earlier and 1.7.2 for iOS 10 and later.</p> </li> <li> <p>This behavior is subject to change.</p> </li> </ul> </li> </ul> <p>For fuzz tests (Android only):</p> <ul> <li> <p>event_count: The number of events, between 1 and 10000, that the UI fuzz test should perform.</p> </li> <li> <p>throttle: The time, in ms, between 0 and 1000, that the UI fuzz test should wait between events.</p> </li> <li> <p>seed: A seed to use for randomizing the UI fuzz test. Using the same seed value between tests ensures identical event sequences.</p> </li> </ul> <p>For Explorer tests:</p> <ul> <li> <p>username: A user name to use if the Explorer encounters a login form. If not supplied, no user name is inserted.</p> </li> <li> <p>password: A password to use if the Explorer encounters a login form. If not supplied, no password is inserted.</p> </li> </ul> <p>For Instrumentation:</p> <ul> <li> <p>filter: A test filter string. Examples:</p> <ul> <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li> <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li> <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li> </ul> </li> </ul> <p>For XCTest and XCTestUI:</p> <ul> <li> <p>filter: A test filter string. Examples:</p> <ul> <li> <p>Running a single test class: <code>LoginTests</code> </p> </li> <li> <p>Running a multiple test classes: <code>LoginTests,SmokeTests</code> </p> </li> <li> <p>Running a single test: <code>LoginTests/testValid</code> </p> </li> <li> <p>Running multiple tests: <code>LoginTests/testValid,LoginTests/testInvalid</code> </p> </li> </ul> </li> </ul> <p>For UIAutomator:</p> <ul> <li> <p>filter: A test filter string. Examples:</p> <ul> <li> <p>Running a single test case: <code>com.android.abc.Test1</code> </p> </li> <li> <p>Running a single test: <code>com.android.abc.Test1#smoke</code> </p> </li> <li> <p>Running multiple tests: <code>com.android.abc.Test1,com.android.abc.Test2</code> </p> </li> </ul> </li> </ul>"
              }
            ]
          }
        },
        "description": "Represents test settings. This data structure is passed in as the test parameter to ScheduleRun. For an example of the JSON request syntax, see <a>ScheduleRun</a>."
      },
      "Filter": {
        "type": "string",
        "minLength": 0,
        "maxLength": 8192
      },
      "TestParameters": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/$defs/String"
        }
      },
      "String": {
        "type": "string"
      },
      "ScheduleRunConfiguration": {
        "type": "object",
        "properties": {
          "extraDataPackageArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "The ARN of the extra data for the run. The extra data is a .zip file that AWS Device Farm extracts to external data for Android or the app's sandbox for iOS."
              }
            ]
          },
          "networkProfileArn": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceName"
              },
              {
                "description": "Reserved for internal use."
              }
            ]
          },
          "locale": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Information about the locale that is used for the run."
              }
            ]
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/$defs/Location"
              },
              {
                "description": "Information about the location that is used for the run."
              }
            ]
          },
          "vpceConfigurationArns": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceNames"
              },
              {
                "description": "An array of ARNs for your VPC endpoint configurations."
              }
            ]
          },
          "customerArtifactPaths": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomerArtifactPaths"
              },
              {
                "description": "Input <code>CustomerArtifactPaths</code> object for the scheduled run configuration."
              }
            ]
          },
          "radios": {
            "allOf": [
              {
                "$ref": "#/$defs/Radios"
              },
              {
                "description": "Information about the radio states for the run."
              }
            ]
          },
          "auxiliaryApps": {
            "allOf": [
              {
                "$ref": "#/$defs/AmazonResourceNames"
              },
              {
                "description": "A list of upload ARNs for app packages to be installed with your app."
              }
            ]
          },
          "billingMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/BillingMethod"
              },
              {
                "description": "<p>Specifies the billing method for a test run: <code>metered</code> or <code>unmetered</code>. If the parameter is not specified, the default value is <code>metered</code>.</p> <note> <p>If you have purchased unmetered device slots, you must set this parameter to <code>unmetered</code> to make use of them. Otherwise, your run counts against your metered time.</p> </note>"
              }
            ]
          }
        },
        "description": "Represents the settings for a run. Includes things like location, radio states, auxiliary apps, and network profiles."
      },
      "Location": {
        "type": "object",
        "required": [
          "latitude",
          "longitude"
        ],
        "properties": {
          "latitude": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "The latitude."
              }
            ]
          },
          "longitude": {
            "allOf": [
              {
                "$ref": "#/$defs/Double"
              },
              {
                "description": "The longitude."
              }
            ]
          }
        },
        "description": "<p>Represents a latitude and longitude pair, expressed in geographic coordinate system degrees (for example, 47.6204, -122.3491).</p> <p>Elevation is currently not supported.</p>"
      },
      "Double": {
        "type": "number",
        "format": "double"
      },
      "AmazonResourceNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AmazonResourceName"
        }
      },
      "CustomerArtifactPaths": {
        "type": "object",
        "properties": {
          "iosPaths": {
            "allOf": [
              {
                "$ref": "#/$defs/IosPaths"
              },
              {
                "description": "Comma-separated list of paths on the iOS device where the artifacts generated by the customer's tests are pulled from."
              }
            ]
          },
          "androidPaths": {
            "allOf": [
              {
                "$ref": "#/$defs/AndroidPaths"
              },
              {
                "description": "Comma-separated list of paths on the Android device where the artifacts generated by the customer's tests are pulled from."
              }
            ]
          },
          "deviceHostPaths": {
            "allOf": [
              {
                "$ref": "#/$defs/DeviceHostPaths"
              },
              {
                "description": "Comma-separated list of paths in the test execution environment where the artifacts generated by the customer's tests are pulled from."
              }
            ]
          }
        },
        "description": "<p>A JSON object that specifies the paths where the artifacts generated by the customer's tests, on the device or in the test environment, are pulled from.</p> <p>Specify <code>deviceHostPaths</code> and optionally specify either <code>iosPaths</code> or <code>androidPaths</code>.</p> <p>For web app tests, you can specify both <code>iosPaths</code> and <code>androidPaths</code>.</p>"
      },
      "IosPaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "AndroidPaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "DeviceHostPaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/String"
        }
      },
      "Radios": {
        "type": "object",
        "properties": {
          "wifi": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "True if Wi-Fi is enabled at the beginning of the test. Otherwise, false."
              }
            ]
          },
          "bluetooth": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "True if Bluetooth is enabled at the beginning of the test. Otherwise, false."
              }
            ]
          },
          "nfc": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "True if NFC is enabled at the beginning of the test. Otherwise, false."
              }
            ]
          },
          "gps": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "True if GPS is enabled at the beginning of the test. Otherwise, false."
              }
            ]
          }
        },
        "description": "Represents the set of radios and their states on a device. Examples of radios include Wi-Fi, GPS, Bluetooth, and NFC."
      },
      "Boolean": {
        "type": "boolean"
      },
      "BillingMethod": {
        "type": "string",
        "enum": [
          "METERED",
          "UNMETERED"
        ]
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://devicefarm.us-east-1.amazonaws.com/#X-Amz-Target=DeviceFarm_20150623.GetDevicePoolCompatibility"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents the result of describe device pool compatibility request.",
        "**Key properties:**",
        {
          "$ul": [
            "**compatibleDevices**",
            "**incompatibleDevices**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
