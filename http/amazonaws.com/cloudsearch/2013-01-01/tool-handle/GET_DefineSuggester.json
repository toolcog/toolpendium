{
  "name": "GET_DefineSuggester",
  "description": "Configures a suggester for a domain. A suggester enables you to display possible matches before users finish typing their queries. When you configure a suggester, you must specify the name of the text field you want to search for possible matches and a unique name for the suggester. For more information, see <a href=\"http://docs.aws.amazon.com/cloudsearch/latest/developerguide/getting-suggestions.html\" target=\"_blank\">Getting Search Suggestions</a> in the <i>Amazon CloudSearch Developer Guide</i>.",
  "parameters": {
    "type": "object",
    "properties": {
      "DomainName": {
        "type": "string",
        "pattern": "[a-z][a-z0-9\\-]+",
        "description": "",
        "minLength": 3,
        "maxLength": 28
      },
      "Suggester": {
        "type": "object",
        "required": [
          "SuggesterName",
          "DocumentSuggesterOptions"
        ],
        "properties": {
          "SuggesterName": {
            "$ref": "#/$defs/StandardName"
          },
          "DocumentSuggesterOptions": {
            "$ref": "#/$defs/DocumentSuggesterOptions"
          }
        },
        "description": ""
      },
      "Action": {
        "type": "string",
        "enum": [
          "DefineSuggester"
        ]
      },
      "Version": {
        "type": "string",
        "enum": [
          "2013-01-01"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      }
    },
    "required": [
      "DomainName",
      "Suggester",
      "Action",
      "Version"
    ],
    "$defs": {
      "StandardName": {
        "type": "string",
        "pattern": "[a-z][a-z0-9_]*",
        "description": "Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).",
        "minLength": 1,
        "maxLength": 64
      },
      "DocumentSuggesterOptions": {
        "type": "object",
        "required": [
          "SourceField"
        ],
        "properties": {
          "SourceField": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldName"
              },
              {
                "description": "The name of the index field you want to use for suggestions. "
              }
            ]
          },
          "FuzzyMatching": {
            "allOf": [
              {
                "$ref": "#/$defs/SuggesterFuzzyMatching"
              },
              {
                "description": "The level of fuzziness allowed when suggesting matches for a string: <code>none</code>, <code>low</code>, or <code>high</code>. With none, the specified string is treated as an exact prefix. With low, suggestions must differ from the specified string by no more than one character. With high, suggestions can differ by up to two characters. The default is none. "
              }
            ]
          },
          "SortExpression": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "An expression that computes a score for each suggestion to control how they are sorted. The scores are rounded to the nearest integer, with a floor of 0 and a ceiling of 2^31-1. A document's relevance score is not computed for suggestions, so sort expressions cannot reference the <code>_score</code> value. To sort suggestions using a numeric field or existing expression, simply specify the name of the field or expression. If no expression is configured for the suggester, the suggestions are sorted with the closest matches listed first."
              }
            ]
          }
        },
        "description": "Options for a search suggester."
      },
      "FieldName": {
        "type": "string",
        "pattern": "[a-z][a-z0-9_]*",
        "description": "<p>A string that represents the name of an index field. CloudSearch supports regular index fields as well as dynamic fields. A dynamic field's name defines a pattern that begins or ends with a wildcard. Any document fields that don't map to a regular index field but do match a dynamic field's pattern are configured with the dynamic field's indexing options. </p> <p>Regular field names begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore). Dynamic field names must begin or end with a wildcard (*). The wildcard can also be the only character in a dynamic field name. Multiple wildcards, and wildcards embedded within a string are not supported. </p> <p>The name <code>score</code> is reserved and cannot be used as a field name. To reference a document's ID, you can use the name <code>_id</code>. </p>",
        "minLength": 1,
        "maxLength": 64
      },
      "SuggesterFuzzyMatching": {
        "type": "string",
        "enum": [
          "none",
          "low",
          "high"
        ]
      },
      "String": {
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "http://cloudsearch.us-east-1.amazonaws.com/#Action=DefineSuggester{?DomainName,Suggester,Action,Version}"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The result of a <code>DefineSuggester</code> request. Contains the status of the newly-configured suggester.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**Suggester**: The value of a <code>Suggester</code> and its current status.",
              {
                "$ul": [
                  [
                    "**Options**: Configuration information for a search suggester. Each suggester has a unique name and specifies the text field you want to use for suggestions. The following options can be configured for a suggester: <code>FuzzyMatching</code>, <code>SortExpression</code>. ",
                    {
                      "$ul": [
                        "**SuggesterName**: Names must begin with a letter and can contain the following characters: a-z (lowercase), 0-9, and _ (underscore).",
                        [
                          "**DocumentSuggesterOptions**: Options for a search suggester.",
                          {
                            "$ul": [
                              "**SourceField**",
                              "**FuzzyMatching**",
                              "**SortExpression**"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**Status**: The status of domain configuration option.",
                    {
                      "$ul": [
                        "**CreationDate**",
                        "**UpdateDate**",
                        "**UpdateVersion**",
                        "**State**",
                        "**PendingDeletion**"
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
