{
  "name": "CreateAppInstanceBot",
  "description": "Creates a bot under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>Configuration</code> and <code>Name</code> for that bot.",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "AppInstanceArn",
          "ClientRequestToken",
          "Configuration"
        ],
        "properties": {
          "AppInstanceArn": {
            "description": "The ARN of the <code>AppInstance</code> request.",
            "type": "string",
            "pattern": "arn:[a-z0-9-\\.]{1,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[a-z0-9-\\.]{0,63}:[^/].{0,1023}",
            "minLength": 5,
            "maxLength": 1600
          },
          "Name": {
            "description": "The user's name.",
            "type": "string",
            "pattern": "[\\u0009\\u000A\\u000D\\u0020-\\u007E\\u0085\\u00A0-\\uD7FF\\uE000-\\uFFFD\\u10000-\\u10FFFF]*",
            "minLength": 0,
            "maxLength": 256,
            "format": "password"
          },
          "Metadata": {
            "description": "The request metadata. Limited to a 1KB string in UTF-8.",
            "type": "string",
            "pattern": ".*",
            "minLength": 0,
            "maxLength": 1024,
            "format": "password"
          },
          "ClientRequestToken": {
            "description": "The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.",
            "type": "string",
            "pattern": "[-_a-zA-Z0-9]*",
            "minLength": 2,
            "maxLength": 64
          },
          "Tags": {
            "description": "The tags assigned to the <code>AppInstanceBot</code>.",
            "type": "array",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "minItems": 1,
            "maxItems": 50
          },
          "Configuration": {
            "description": "A structure that contains configuration data.",
            "type": "object",
            "properties": {
              "Lex": {
                "allOf": [
                  {
                    "$ref": "#/$defs/LexConfiguration"
                  },
                  {
                    "description": "The configuration for an Amazon Lex V2 bot."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "required": [
      "body"
    ],
    "$defs": {
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "The key in a tag."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "The value in a tag."
              }
            ]
          }
        },
        "description": "A tag object containing a key-value pair."
      },
      "TagKey": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "format": "password"
      },
      "TagValue": {
        "type": "string",
        "minLength": 1,
        "maxLength": 256,
        "format": "password"
      },
      "LexConfiguration": {
        "type": "object",
        "required": [
          "LexBotAliasArn",
          "LocaleId"
        ],
        "properties": {
          "RespondsTo": {
            "allOf": [
              {
                "$ref": "#/$defs/RespondsTo"
              },
              {
                "description": "<important> <p> <b>Deprecated</b>. Use <code>InvokedBy</code> instead.</p> </important> <p>Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.</p>"
              }
            ]
          },
          "InvokedBy": {
            "allOf": [
              {
                "$ref": "#/$defs/InvokedBy"
              },
              {
                "description": "Specifies the type of message that triggers a bot."
              }
            ]
          },
          "LexBotAliasArn": {
            "allOf": [
              {
                "$ref": "#/$defs/LexBotAliasArn"
              },
              {
                "description": "The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: <code>arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS</code> "
              }
            ]
          },
          "LocaleId": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href=\"https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html\">Supported languages</a> in the <i>Amazon Lex V2 Developer Guide</i>."
              }
            ]
          },
          "WelcomeIntent": {
            "allOf": [
              {
                "$ref": "#/$defs/LexIntentName"
              },
              {
                "description": "The name of the welcome intent configured in the Amazon Lex V2 bot."
              }
            ]
          }
        },
        "description": "The configuration for an Amazon Lex V2 bot."
      },
      "RespondsTo": {
        "type": "string",
        "enum": [
          "STANDARD_MESSAGES"
        ]
      },
      "InvokedBy": {
        "type": "object",
        "required": [
          "StandardMessages",
          "TargetedMessages"
        ],
        "properties": {
          "StandardMessages": {
            "allOf": [
              {
                "$ref": "#/$defs/StandardMessages"
              },
              {
                "description": "<p>Sets standard messages as the bot trigger. For standard messages:</p> <ul> <li> <p> <code>ALL</code>: The bot processes all standard messages.</p> </li> <li> <p> <code>AUTO</code>: The bot responds to ALL messages when the channel has one other non-hidden member, and responds to MENTIONS when the channel has more than one other non-hidden member.</p> </li> <li> <p> <code>MENTIONS</code>: The bot processes all standard messages that have a message attribute with <code>CHIME.mentions</code> and a value of the bot ARN.</p> </li> <li> <p> <code>NONE</code>: The bot processes no standard messages.</p> </li> </ul>"
              }
            ]
          },
          "TargetedMessages": {
            "allOf": [
              {
                "$ref": "#/$defs/TargetedMessages"
              },
              {
                "description": "<p>Sets targeted messages as the bot trigger. For targeted messages:</p> <ul> <li> <p> <code>ALL</code>: The bot processes all <code>TargetedMessages</code> sent to it. The bot then responds with a targeted message back to the sender. </p> </li> <li> <p> <code>NONE</code>: The bot processes no targeted messages.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Specifies the type of message that triggers a bot."
      },
      "StandardMessages": {
        "type": "string",
        "enum": [
          "AUTO",
          "ALL",
          "MENTIONS",
          "NONE"
        ]
      },
      "TargetedMessages": {
        "type": "string",
        "enum": [
          "ALL",
          "NONE"
        ]
      },
      "LexBotAliasArn": {
        "type": "string",
        "pattern": "arn:aws:lex:[a-z]{2}-[a-z]+-\\d{1}:\\d{12}:bot-alias/[A-Z0-9]{10}/[A-Z0-9]{10}",
        "minLength": 15,
        "maxLength": 2048
      },
      "String": {
        "type": "string"
      },
      "LexIntentName": {
        "type": "string",
        "pattern": "^([A-Za-z]_?)+$",
        "minLength": 1,
        "maxLength": 100
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://identity-chime.us-east-1.amazonaws.com/app-instance-bots"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**AppInstanceBotArn**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
