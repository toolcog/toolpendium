{
  "name": "CreateRuleGroup",
  "description": "<p>Creates a <a>RuleGroup</a> per the specifications provided. </p> <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>",
  "parameters": {
    "type": "object",
    "properties": {
      "X-Amz-Target": {
        "type": "string",
        "enum": [
          "AWSWAF_20190729.CreateRuleGroup"
        ]
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "$ref": "#/$defs/CreateRuleGroupRequest"
      }
    },
    "required": [
      "X-Amz-Target",
      "body"
    ],
    "$defs": {
      "CreateRuleGroupRequest": {
        "type": "object",
        "required": [
          "Name",
          "Scope",
          "Capacity",
          "VisibilityConfig"
        ],
        "title": "CreateRuleGroupRequest",
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the rule group. You cannot change the name of a rule group after you create it."
              }
            ]
          },
          "Scope": {
            "allOf": [
              {
                "$ref": "#/$defs/Scope"
              },
              {
                "description": "<p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, an AppSync GraphQL API, an Amazon Cognito user pool, an App Runner service, or an Amazon Web Services Verified Access instance. </p> <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p> <ul> <li> <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p> </li> <li> <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p> </li> </ul>"
              }
            ]
          },
          "Capacity": {
            "allOf": [
              {
                "$ref": "#/$defs/CapacityUnit"
              },
              {
                "description": "<p>The web ACL capacity units (WCUs) required for this rule group.</p> <p>When you create your own rule group, you define this, and you cannot change it after creation. When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity for a set of rules using <a>CheckCapacity</a>.</p> <p>WAF uses WCUs to calculate and control the operating resources that are used to run your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule type, to reflect the relative cost of each rule. Simple rules that cost little to run use fewer WCUs than more complex rules that use more processing power. Rule group capacity is fixed at creation, which helps users plan their web ACL WCU usage when they use a rule group. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/aws-waf-capacity-units.html\">WAF web ACL capacity units (WCU)</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          },
          "Description": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityDescription"
              },
              {
                "description": "A description of the rule group that helps with identification. "
              }
            ]
          },
          "Rules": {
            "allOf": [
              {
                "$ref": "#/$defs/Rules"
              },
              {
                "description": "The <a>Rule</a> statements used to identify the web requests that you want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. "
              }
            ]
          },
          "VisibilityConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/VisibilityConfig"
              },
              {
                "description": "Defines and enables Amazon CloudWatch metrics and web request sample collection. "
              }
            ]
          },
          "Tags": {
            "allOf": [
              {
                "$ref": "#/$defs/TagList"
              },
              {
                "description": "An array of key:value pairs to associate with the resource."
              }
            ]
          },
          "CustomResponseBodies": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomResponseBodies"
              },
              {
                "description": "<p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p> <p>For information about the limits on count and size for custom request and response settings, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/limits.html\">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        }
      },
      "EntityName": {
        "type": "string",
        "pattern": "^[\\w\\-]+$",
        "minLength": 1,
        "maxLength": 128
      },
      "Scope": {
        "type": "string",
        "enum": [
          "CLOUDFRONT",
          "REGIONAL"
        ]
      },
      "CapacityUnit": {
        "type": "integer",
        "minimum": 1
      },
      "EntityDescription": {
        "type": "string",
        "pattern": "^[\\w+=:#@/\\-,\\.][\\w+=:#@/\\-,\\.\\s]+[\\w+=:#@/\\-,\\.]$",
        "minLength": 1,
        "maxLength": 256
      },
      "Rules": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Rule"
        }
      },
      "Rule": {
        "type": "object",
        "required": [
          "Name",
          "Priority",
          "Statement",
          "VisibilityConfig"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the rule. You can't change the name of a <code>Rule</code> after you create it. "
              }
            ]
          },
          "Priority": {
            "allOf": [
              {
                "$ref": "#/$defs/RulePriority"
              },
              {
                "description": "If you define more than one <code>Rule</code> in a <code>WebACL</code>, WAF evaluates each request against the <code>Rules</code> in order based on the value of <code>Priority</code>. WAF processes rules with lower priority first. The priorities don't need to be consecutive, but they must all be different."
              }
            ]
          },
          "Statement": {
            "allOf": [
              {
                "$ref": "#/$defs/Statement"
              },
              {
                "description": "The WAF processing statement for the rule, for example <a>ByteMatchStatement</a> or <a>SizeConstraintStatement</a>. "
              }
            ]
          },
          "Action": {
            "allOf": [
              {
                "$ref": "#/$defs/RuleAction"
              },
              {
                "description": "<p>The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. </p> <p>This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p> <p>You must specify either this <code>Action</code> setting or the rule <code>OverrideAction</code> setting, but not both:</p> <ul> <li> <p>If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting. </p> </li> <li> <p>If the rule statement references a rule group, use the override action setting and not this action setting. </p> </li> </ul>"
              }
            ]
          },
          "OverrideAction": {
            "allOf": [
              {
                "$ref": "#/$defs/OverrideAction"
              },
              {
                "description": "<p>The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. </p> <p>You can only use this for rule statements that reference a rule group, like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p> <note> <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p> </note>"
              }
            ]
          },
          "RuleLabels": {
            "allOf": [
              {
                "$ref": "#/$defs/Labels"
              },
              {
                "description": "<p>Labels to apply to web requests that match the rule match statement. WAF applies fully qualified labels to matching web requests. A fully qualified label is the concatenation of a label namespace and a rule label. The rule's rule group or web ACL defines the label namespace. </p> <p>Rules that run after this rule in the web ACL can match against these labels using a <code>LabelMatchStatement</code>.</p> <p>For each label, provide a case-sensitive string containing optional namespaces and a label name, according to the following guidelines:</p> <ul> <li> <p>Separate each component of the label with a colon. </p> </li> <li> <p>Each namespace or name can have up to 128 characters.</p> </li> <li> <p>You can specify up to 5 namespaces in a label.</p> </li> <li> <p>Don't use the following reserved words in your label specification: <code>aws</code>, <code>waf</code>, <code>managed</code>, <code>rulegroup</code>, <code>webacl</code>, <code>regexpatternset</code>, or <code>ipset</code>.</p> </li> </ul> <p>For example, <code>myLabelName</code> or <code>nameSpace1:nameSpace2:myLabelName</code>. </p>"
              }
            ]
          },
          "VisibilityConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/VisibilityConfig"
              },
              {
                "description": "Defines and enables Amazon CloudWatch metrics and web request sample collection. "
              }
            ]
          },
          "CaptchaConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/CaptchaConfig"
              },
              {
                "description": "Specifies how WAF should handle <code>CAPTCHA</code> evaluations. If you don't specify this, WAF uses the <code>CAPTCHA</code> configuration that's defined for the web ACL. "
              }
            ]
          },
          "ChallengeConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/ChallengeConfig"
              },
              {
                "description": "Specifies how WAF should handle <code>Challenge</code> evaluations. If you don't specify this, WAF uses the challenge configuration that's defined for the web ACL. "
              }
            ]
          }
        },
        "description": "A single rule, which you can use in a <a>WebACL</a> or <a>RuleGroup</a> to identify web requests that you want to allow, block, or count. Each rule includes one top-level <a>Statement</a> that WAF uses to identify matching web requests, and parameters that govern how WAF handles them. "
      },
      "RulePriority": {
        "type": "integer",
        "minimum": 0
      },
      "Statement": {
        "type": "object",
        "properties": {
          "ByteMatchStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/ByteMatchStatement"
              },
              {
                "description": "A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement."
              }
            ]
          },
          "SqliMatchStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/SqliMatchStatement"
              },
              {
                "description": "A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it. "
              }
            ]
          },
          "XssMatchStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/XssMatchStatement"
              },
              {
                "description": "A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. "
              }
            ]
          },
          "SizeConstraintStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/SizeConstraintStatement"
              },
              {
                "description": "<p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p> <p>If you configure WAF to inspect the request body, WAF inspects only the number of bytes of the body up to the limit for the web ACL. By default, for regional web ACLs, this limit is 8 KB (8,192 kilobytes) and for CloudFront web ACLs, this limit is 16 KB (16,384 kilobytes). For CloudFront web ACLs, you can increase the limit in the web ACL <code>AssociationConfig</code>, for additional fees. If you know that the request body for your web requests should never exceed the inspection limit, you could use a size constraint statement to block requests that have a larger request body size.</p> <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>"
              }
            ]
          },
          "GeoMatchStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/GeoMatchStatement"
              },
              {
                "description": "<p>A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.</p> <ul> <li> <p>To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the <code>CountryCodes</code> array. </p> </li> <li> <p>Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed. </p> </li> </ul> <p>WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match <code>ForwardedIPConfig</code>. </p> <p>If you use the web request origin, the label formats are <code>awswaf:clientip:geo:region:&lt;ISO country code&gt;-&lt;ISO region code&gt;</code> and <code>awswaf:clientip:geo:country:&lt;ISO country code&gt;</code>.</p> <p>If you use a forwarded IP address, the label formats are <code>awswaf:forwardedip:geo:region:&lt;ISO country code&gt;-&lt;ISO region code&gt;</code> and <code>awswaf:forwardedip:geo:country:&lt;ISO country code&gt;</code>.</p> <p>For additional details, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html\">Geographic match rule statement</a> in the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">WAF Developer Guide</a>. </p>"
              }
            ]
          },
          "RuleGroupReferenceStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/RuleGroupReferenceStatement"
              },
              {
                "description": "<p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p> <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You can only use a rule group reference statement at the top level inside a web ACL. </p>"
              }
            ]
          },
          "IPSetReferenceStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/IPSetReferenceStatement"
              },
              {
                "description": "<p>A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an <a>IPSet</a> that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see <a>CreateIPSet</a>.</p> <p>Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>"
              }
            ]
          },
          "RegexPatternSetReferenceStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/RegexPatternSetReferenceStatement"
              },
              {
                "description": "<p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <a>RegexPatternSet</a> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <a>CreateRegexPatternSet</a>.</p> <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>"
              }
            ]
          },
          "RateBasedStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/RateBasedStatement"
              },
              {
                "description": "<p>A rate-based rule counts incoming requests and rate limits requests when they are coming at too fast a rate. The rule categorizes requests according to your aggregation criteria, collects them into aggregation instances, and counts and rate limits the requests for each instance. </p> <p>You can specify individual aggregation keys, like IP address or HTTP method. You can also specify aggregation key combinations, like IP address and HTTP method, or HTTP method, query argument, and cookie. </p> <p>Each unique set of values for the aggregation keys that you specify is a separate aggregation instance, with the value from each key contributing to the aggregation instance definition. </p> <p>For example, assume the rule evaluates web requests with the following IP address and HTTP method values: </p> <ul> <li> <p>IP address 10.1.1.1, HTTP method POST</p> </li> <li> <p>IP address 10.1.1.1, HTTP method GET</p> </li> <li> <p>IP address 127.0.0.0, HTTP method POST</p> </li> <li> <p>IP address 10.1.1.1, HTTP method GET</p> </li> </ul> <p>The rule would create different aggregation instances according to your aggregation criteria, for example: </p> <ul> <li> <p>If the aggregation criteria is just the IP address, then each individual address is an aggregation instance, and WAF counts requests separately for each. The aggregation instances and request counts for our example would be the following: </p> <ul> <li> <p>IP address 10.1.1.1: count 3</p> </li> <li> <p>IP address 127.0.0.0: count 1</p> </li> </ul> </li> <li> <p>If the aggregation criteria is HTTP method, then each individual HTTP method is an aggregation instance. The aggregation instances and request counts for our example would be the following: </p> <ul> <li> <p>HTTP method POST: count 2</p> </li> <li> <p>HTTP method GET: count 2</p> </li> </ul> </li> <li> <p>If the aggregation criteria is IP address and HTTP method, then each IP address and each HTTP method would contribute to the combined aggregation instance. The aggregation instances and request counts for our example would be the following: </p> <ul> <li> <p>IP address 10.1.1.1, HTTP method POST: count 1</p> </li> <li> <p>IP address 10.1.1.1, HTTP method GET: count 2</p> </li> <li> <p>IP address 127.0.0.0, HTTP method POST: count 1</p> </li> </ul> </li> </ul> <p>For any n-tuple of aggregation keys, each unique combination of values for the keys defines a separate aggregation instance, which WAF counts and rate-limits individually. </p> <p>You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts and rate limits requests that match the nested statement. You can use this nested scope-down statement in conjunction with your aggregation key specifications or you can just count and rate limit all requests that match the scope-down statement, without additional aggregation. When you choose to just manage all requests that match a scope-down statement, the aggregation instance is singular for the rule. </p> <p>You cannot nest a <code>RateBasedStatement</code> inside another statement, for example inside a <code>NotStatement</code> or <code>OrStatement</code>. You can define a <code>RateBasedStatement</code> inside a web ACL and inside a rule group. </p> <p>For additional information about the options, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-rate-based-rules.html\">Rate limiting web requests using rate-based rules</a> in the <i>WAF Developer Guide</i>. </p> <p>If you only aggregate on the individual IP address or forwarded IP address, you can retrieve the list of IP addresses that WAF is currently rate limiting for a rule through the API call <code>GetRateBasedStatementManagedKeys</code>. This option is not available for other aggregation configurations.</p> <p>WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF. </p>"
              }
            ]
          },
          "AndStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/AndStatement"
              },
              {
                "description": "A logical rule statement used to combine other rule statements with AND logic. You provide more than one <a>Statement</a> within the <code>AndStatement</code>. "
              }
            ]
          },
          "OrStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/OrStatement"
              },
              {
                "description": "A logical rule statement used to combine other rule statements with OR logic. You provide more than one <a>Statement</a> within the <code>OrStatement</code>. "
              }
            ]
          },
          "NotStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/NotStatement"
              },
              {
                "description": "A logical rule statement used to negate the results of another rule statement. You provide one <a>Statement</a> within the <code>NotStatement</code>."
              }
            ]
          },
          "ManagedRuleGroupStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/ManagedRuleGroupStatement"
              },
              {
                "description": "<p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p> <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p> <note> <p>You are charged additional fees when you use the WAF Bot Control managed rule group <code>AWSManagedRulesBotControlRuleSet</code>, the WAF Fraud Control account takeover prevention (ATP) managed rule group <code>AWSManagedRulesATPRuleSet</code>, or the WAF Fraud Control account creation fraud prevention (ACFP) managed rule group <code>AWSManagedRulesACFPRuleSet</code>. For more information, see <a href=\"http://aws.amazon.com/waf/pricing/\">WAF Pricing</a>.</p> </note>"
              }
            ]
          },
          "LabelMatchStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelMatchStatement"
              },
              {
                "description": "<p>A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. </p> <p>The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. </p>"
              }
            ]
          },
          "RegexMatchStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/RegexMatchStatement"
              },
              {
                "description": "A rule statement used to search web request components for a match against a single regular expression. "
              }
            ]
          }
        },
        "description": "<p>The processing guidance for a <a>Rule</a>, used by WAF to determine whether a web request matches the rule. </p> <p>For example specifications, see the examples section of <a>CreateWebACL</a>.</p>"
      },
      "ByteMatchStatement": {
        "type": "object",
        "required": [
          "SearchString",
          "FieldToMatch",
          "TextTransformations",
          "PositionalConstraint"
        ],
        "properties": {
          "SearchString": {
            "allOf": [
              {
                "$ref": "#/$defs/SearchString"
              },
              {
                "description": "<p>A string value that you want WAF to search for. WAF searches only in the part of web requests that you designate for inspection in <a>FieldToMatch</a>. The maximum length of the value is 200 bytes.</p> <p>Valid values depend on the component that you specify for inspection in <code>FieldToMatch</code>:</p> <ul> <li> <p> <code>Method</code>: The HTTP method that you want WAF to search for. This indicates the type of operation specified in the request. </p> </li> <li> <p> <code>UriPath</code>: The value that you want WAF to search for in the URI path, for example, <code>/images/daily-ad.jpg</code>. </p> </li> <li> <p> <code>HeaderOrder</code>: The comma-separated list of header names to match for. WAF creates a string that contains the ordered list of header names, from the headers in the web request, and then matches against that string. </p> </li> </ul> <p>If <code>SearchString</code> includes alphabetic characters A-Z and a-z, note that the value is case sensitive.</p> <p> <b>If you're using the WAF API</b> </p> <p>Specify a base64-encoded version of the value. The maximum length of the value before you base64-encode it is 200 bytes.</p> <p>For example, suppose the value of <code>Type</code> is <code>HEADER</code> and the value of <code>Data</code> is <code>User-Agent</code>. If you want to search the <code>User-Agent</code> header for the value <code>BadBot</code>, you base64-encode <code>BadBot</code> using MIME base64-encoding and include the resulting value, <code>QmFkQm90</code>, in the value of <code>SearchString</code>.</p> <p> <b>If you're using the CLI or one of the Amazon Web Services SDKs</b> </p> <p>The value that you want WAF to search for. The SDK automatically base64 encodes the value.</p>"
              }
            ]
          },
          "FieldToMatch": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatch"
              },
              {
                "description": "The part of the web request that you want WAF to inspect. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          },
          "PositionalConstraint": {
            "allOf": [
              {
                "$ref": "#/$defs/PositionalConstraint"
              },
              {
                "description": "<p>The area within the portion of the web request that you want WAF to search for <code>SearchString</code>. Valid values include the following:</p> <p> <b>CONTAINS</b> </p> <p>The specified part of the web request must include the value of <code>SearchString</code>, but the location doesn't matter.</p> <p> <b>CONTAINS_WORD</b> </p> <p>The specified part of the web request must include the value of <code>SearchString</code>, and <code>SearchString</code> must contain only alphanumeric characters or underscore (A-Z, a-z, 0-9, or _). In addition, <code>SearchString</code> must be a word, which means that both of the following are true:</p> <ul> <li> <p> <code>SearchString</code> is at the beginning of the specified part of the web request or is preceded by a character other than an alphanumeric character or underscore (_). Examples include the value of a header and <code>;BadBot</code>.</p> </li> <li> <p> <code>SearchString</code> is at the end of the specified part of the web request or is followed by a character other than an alphanumeric character or underscore (_), for example, <code>BadBot;</code> and <code>-BadBot;</code>.</p> </li> </ul> <p> <b>EXACTLY</b> </p> <p>The value of the specified part of the web request must exactly match the value of <code>SearchString</code>.</p> <p> <b>STARTS_WITH</b> </p> <p>The value of <code>SearchString</code> must appear at the beginning of the specified part of the web request.</p> <p> <b>ENDS_WITH</b> </p> <p>The value of <code>SearchString</code> must appear at the end of the specified part of the web request.</p>"
              }
            ]
          }
        },
        "description": "A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement."
      },
      "SearchString": {
        "type": "string"
      },
      "FieldToMatch": {
        "type": "object",
        "properties": {
          "SingleHeader": {
            "allOf": [
              {
                "$ref": "#/$defs/SingleHeader"
              },
              {
                "description": "<p>Inspect a single header. Provide the name of the header to inspect, for example, <code>User-Agent</code> or <code>Referer</code>. This setting isn't case sensitive.</p> <p>Example JSON: <code>\"SingleHeader\": { \"Name\": \"haystack\" }</code> </p> <p>Alternately, you can filter and inspect all headers with the <code>Headers</code> <code>FieldToMatch</code> setting. </p>"
              }
            ]
          },
          "SingleQueryArgument": {
            "allOf": [
              {
                "$ref": "#/$defs/SingleQueryArgument"
              },
              {
                "description": "<p>Inspect a single query argument. Provide the name of the query argument to inspect, such as <i>UserName</i> or <i>SalesRegion</i>. The name can be up to 30 characters long and isn't case sensitive. </p> <p>Example JSON: <code>\"SingleQueryArgument\": { \"Name\": \"myArgument\" }</code> </p>"
              }
            ]
          },
          "AllQueryArguments": {
            "allOf": [
              {
                "$ref": "#/$defs/AllQueryArguments"
              },
              {
                "description": "Inspect all query arguments. "
              }
            ]
          },
          "UriPath": {
            "allOf": [
              {
                "$ref": "#/$defs/UriPath"
              },
              {
                "description": "Inspect the request URI path. This is the part of the web request that identifies a resource, for example, <code>/images/daily-ad.jpg</code>."
              }
            ]
          },
          "QueryString": {
            "allOf": [
              {
                "$ref": "#/$defs/QueryString"
              },
              {
                "description": "Inspect the query string. This is the part of a URL that appears after a <code>?</code> character, if any."
              }
            ]
          },
          "Body": {
            "allOf": [
              {
                "$ref": "#/$defs/Body"
              },
              {
                "description": "<p>Inspect the request body as plain text. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. </p> <p>A limited amount of the request body is forwarded to WAF for inspection by the underlying host service. For regional resources, the limit is 8 KB (8,192 kilobytes) and for CloudFront distributions, the limit is 16 KB (16,384 kilobytes). For CloudFront distributions, you can increase the limit in the web ACL's <code>AssociationConfig</code>, for additional processing fees. </p> <p>For information about how to handle oversized request bodies, see the <code>Body</code> object configuration. </p>"
              }
            ]
          },
          "Method": {
            "allOf": [
              {
                "$ref": "#/$defs/Method"
              },
              {
                "description": "Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform. "
              }
            ]
          },
          "JsonBody": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonBody"
              },
              {
                "description": "<p>Inspect the request body as JSON. The request body immediately follows the request headers. This is the part of a request that contains any additional data that you want to send to your web server as the HTTP request body, such as data from a form. </p> <p>A limited amount of the request body is forwarded to WAF for inspection by the underlying host service. For regional resources, the limit is 8 KB (8,192 kilobytes) and for CloudFront distributions, the limit is 16 KB (16,384 kilobytes). For CloudFront distributions, you can increase the limit in the web ACL's <code>AssociationConfig</code>, for additional processing fees. </p> <p>For information about how to handle oversized request bodies, see the <code>JsonBody</code> object configuration. </p>"
              }
            ]
          },
          "Headers": {
            "allOf": [
              {
                "$ref": "#/$defs/Headers"
              },
              {
                "description": "<p>Inspect the request headers. You must configure scope and pattern matching filters in the <code>Headers</code> object, to define the set of headers to and the parts of the headers that WAF inspects. </p> <p>Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize header content in the <code>Headers</code> object. WAF applies the pattern matching filters to the headers that it receives from the underlying host service. </p>"
              }
            ]
          },
          "Cookies": {
            "allOf": [
              {
                "$ref": "#/$defs/Cookies"
              },
              {
                "description": "<p>Inspect the request cookies. You must configure scope and pattern matching filters in the <code>Cookies</code> object, to define the set of cookies and the parts of the cookies that WAF inspects. </p> <p>Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies are forwarded to WAF for inspection by the underlying host service. You must configure how to handle any oversize cookie content in the <code>Cookies</code> object. WAF applies the pattern matching filters to the cookies that it receives from the underlying host service. </p>"
              }
            ]
          },
          "HeaderOrder": {
            "allOf": [
              {
                "$ref": "#/$defs/HeaderOrder"
              },
              {
                "description": "Inspect a string containing the list of the request's header names, ordered as they appear in the web request that WAF receives for inspection. WAF generates the string and then uses that as the field to match component in its inspection. WAF separates the header names in the string using colons and no added spaces, for example <code>host:user-agent:accept:authorization:referer</code>."
              }
            ]
          }
        },
        "description": "<p>The part of the web request that you want WAF to inspect. Include the single <code>FieldToMatch</code> type that you want to inspect, with additional specifications as needed, according to the type. You specify a single request component in <code>FieldToMatch</code> for each rule statement that requires it. To inspect more than one component of the web request, create a separate rule statement for each component.</p> <p>Example JSON for a <code>QueryString</code> field to match: </p> <p> <code> \"FieldToMatch\": { \"QueryString\": {} }</code> </p> <p>Example JSON for a <code>Method</code> field to match specification:</p> <p> <code> \"FieldToMatch\": { \"Method\": { \"Name\": \"DELETE\" } }</code> </p>"
      },
      "SingleHeader": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatchData"
              },
              {
                "description": "The name of the query header to inspect."
              }
            ]
          }
        },
        "description": "<p>Inspect one of the headers in the web request, identified by name, for example, <code>User-Agent</code> or <code>Referer</code>. The name isn't case sensitive.</p> <p>You can filter and inspect all headers with the <code>FieldToMatch</code> setting <code>Headers</code>.</p> <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p> <p>Example JSON: <code>\"SingleHeader\": { \"Name\": \"haystack\" }</code> </p>"
      },
      "FieldToMatchData": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 64
      },
      "SingleQueryArgument": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatchData"
              },
              {
                "description": "The name of the query argument to inspect."
              }
            ]
          }
        },
        "description": "<p>Inspect one query argument in the web request, identified by name, for example <i>UserName</i> or <i>SalesRegion</i>. The name isn't case sensitive. </p> <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p> <p>Example JSON: <code>\"SingleQueryArgument\": { \"Name\": \"myArgument\" }</code> </p>"
      },
      "AllQueryArguments": {
        "type": "object",
        "properties": {},
        "description": "<p>Inspect all query arguments of the web request. </p> <p>This is used in the <a>FieldToMatch</a> specification for some web request component types. </p> <p>JSON specification: <code>\"AllQueryArguments\": {}</code> </p>"
      },
      "UriPath": {
        "type": "object",
        "properties": {},
        "description": "<p>Inspect the path component of the URI of the web request. This is the part of the web request that identifies a resource. For example, <code>/images/daily-ad.jpg</code>.</p> <p>This is used in the <a>FieldToMatch</a> specification for some web request component types. </p> <p>JSON specification: <code>\"UriPath\": {}</code> </p>"
      },
      "QueryString": {
        "type": "object",
        "properties": {},
        "description": "<p>Inspect the query string of the web request. This is the part of a URL that appears after a <code>?</code> character, if any.</p> <p>This is used in the <a>FieldToMatch</a> specification for some web request component types. </p> <p>JSON specification: <code>\"QueryString\": {}</code> </p>"
      },
      "Body": {
        "type": "object",
        "properties": {
          "OversizeHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/OversizeHandling"
              },
              {
                "description": "<p>What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. If the body is larger than the limit, the underlying host service only forwards the contents that are below the limit to WAF for inspection. </p> <p>The default limit is 8 KB (8,192 kilobytes) for regional resources and 16 KB (16,384 kilobytes) for CloudFront distributions. For CloudFront distributions, you can increase the limit in the web ACL <code>AssociationConfig</code>, for additional processing fees. </p> <p>The options for oversize handling are the following:</p> <ul> <li> <p> <code>CONTINUE</code> - Inspect the available body contents normally, according to the rule inspection criteria. </p> </li> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul> <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code> settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. </p> <p>Default: <code>CONTINUE</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Inspect the body of the web request. The body immediately follows the request headers.</p> <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>"
      },
      "OversizeHandling": {
        "type": "string",
        "enum": [
          "CONTINUE",
          "MATCH",
          "NO_MATCH"
        ]
      },
      "Method": {
        "type": "object",
        "properties": {},
        "description": "<p>Inspect the HTTP method of the web request. The method indicates the type of operation that the request is asking the origin to perform. </p> <p>This is used in the <a>FieldToMatch</a> specification for some web request component types. </p> <p>JSON specification: <code>\"Method\": {}</code> </p>"
      },
      "JsonBody": {
        "type": "object",
        "required": [
          "MatchPattern",
          "MatchScope"
        ],
        "properties": {
          "MatchPattern": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonMatchPattern"
              },
              {
                "description": "The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. "
              }
            ]
          },
          "MatchScope": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonMatchScope"
              },
              {
                "description": "The parts of the JSON to match against using the <code>MatchPattern</code>. If you specify <code>All</code>, WAF matches against keys and values. "
              }
            ]
          },
          "InvalidFallbackBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/BodyParsingFallbackBehavior"
              },
              {
                "description": "<p>What WAF should do if it fails to completely parse the JSON body. The options are the following:</p> <ul> <li> <p> <code>EVALUATE_AS_STRING</code> - Inspect the body as plain text. WAF applies the text transformations and inspection criteria that you defined for the JSON inspection to the body text string.</p> </li> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul> <p>If you don't provide this setting, WAF parses and evaluates the content only up to the first parsing failure that it encounters. </p> <p>WAF does its best to parse the entire JSON body, but might be forced to stop for reasons such as invalid characters, duplicate keys, truncation, and any content whose root node isn't an object or an array. </p> <p>WAF parses the JSON in the following examples as two valid key, value pairs: </p> <ul> <li> <p>Missing comma: <code>{\"key1\":\"value1\"\"key2\":\"value2\"}</code> </p> </li> <li> <p>Missing colon: <code>{\"key1\":\"value1\",\"key2\"\"value2\"}</code> </p> </li> <li> <p>Extra colons: <code>{\"key1\"::\"value1\",\"key2\"\"value2\"}</code> </p> </li> </ul>"
              }
            ]
          },
          "OversizeHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/OversizeHandling"
              },
              {
                "description": "<p>What WAF should do if the body is larger than WAF can inspect. WAF does not support inspecting the entire contents of the web request body if the body exceeds the limit for the resource type. If the body is larger than the limit, the underlying host service only forwards the contents that are below the limit to WAF for inspection. </p> <p>The default limit is 8 KB (8,192 kilobytes) for regional resources and 16 KB (16,384 kilobytes) for CloudFront distributions. For CloudFront distributions, you can increase the limit in the web ACL <code>AssociationConfig</code>, for additional processing fees. </p> <p>The options for oversize handling are the following:</p> <ul> <li> <p> <code>CONTINUE</code> - Inspect the available body contents normally, according to the rule inspection criteria. </p> </li> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul> <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code> settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over the limit. </p> <p>Default: <code>CONTINUE</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Inspect the body of the web request as JSON. The body immediately follows the request headers. </p> <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p> <p>Use the specifications in this object to indicate which parts of the JSON body to inspect using the rule's inspection criteria. WAF inspects only the parts of the JSON that result from the matches that you indicate. </p> <p>Example JSON: <code>\"JsonBody\": { \"MatchPattern\": { \"All\": {} }, \"MatchScope\": \"ALL\" }</code> </p>"
      },
      "JsonMatchPattern": {
        "type": "object",
        "properties": {
          "All": {
            "allOf": [
              {
                "$ref": "#/$defs/All"
              },
              {
                "description": "<p>Match all of the elements. See also <code>MatchScope</code> in <a>JsonBody</a>. </p> <p>You must specify either this setting or the <code>IncludedPaths</code> setting, but not both.</p>"
              }
            ]
          },
          "IncludedPaths": {
            "allOf": [
              {
                "$ref": "#/$defs/JsonPointerPaths"
              },
              {
                "description": "<p>Match only the specified include paths. See also <code>MatchScope</code> in <a>JsonBody</a>. </p> <p>Provide the include paths using JSON Pointer syntax. For example, <code>\"IncludedPaths\": [\"/dogs/0/name\", \"/dogs/1/name\"]</code>. For information about this syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>You must specify either this setting or the <code>All</code> setting, but not both.</p> <note> <p>Don't use this option to include all paths. Instead, use the <code>All</code> setting. </p> </note>"
              }
            ]
          }
        },
        "description": "The patterns to look for in the JSON body. WAF inspects the results of these pattern matches against the rule inspection criteria. This is used with the <a>FieldToMatch</a> option <code>JsonBody</code>. "
      },
      "All": {
        "type": "object",
        "properties": {},
        "description": "<p>Inspect all of the elements that WAF has parsed and extracted from the web request component that you've identified in your <a>FieldToMatch</a> specifications. </p> <p>This is used in the <a>FieldToMatch</a> specification for some web request component types. </p> <p>JSON specification: <code>\"All\": {}</code> </p>"
      },
      "JsonPointerPaths": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/JsonPointerPath"
        },
        "minItems": 1
      },
      "JsonPointerPath": {
        "type": "string",
        "pattern": "([/])|([/](([^~])|(~[01]))+)",
        "minLength": 1,
        "maxLength": 512
      },
      "JsonMatchScope": {
        "type": "string",
        "enum": [
          "ALL",
          "KEY",
          "VALUE"
        ]
      },
      "BodyParsingFallbackBehavior": {
        "type": "string",
        "enum": [
          "MATCH",
          "NO_MATCH",
          "EVALUATE_AS_STRING"
        ]
      },
      "Headers": {
        "type": "object",
        "required": [
          "MatchPattern",
          "MatchScope",
          "OversizeHandling"
        ],
        "properties": {
          "MatchPattern": {
            "allOf": [
              {
                "$ref": "#/$defs/HeaderMatchPattern"
              },
              {
                "description": "<p>The filter to use to identify the subset of headers to inspect in a web request. </p> <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedHeaders</code>, or <code>ExcludedHeaders</code>.</p> <p>Example JSON: <code>\"MatchPattern\": { \"ExcludedHeaders\": [ \"KeyToExclude1\", \"KeyToExclude2\" ] }</code> </p>"
              }
            ]
          },
          "MatchScope": {
            "allOf": [
              {
                "$ref": "#/$defs/MapMatchScope"
              },
              {
                "description": "The parts of the headers to match with the rule inspection criteria. If you specify <code>All</code>, WAF inspects both keys and values. "
              }
            ]
          },
          "OversizeHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/OversizeHandling"
              },
              {
                "description": "<p>What WAF should do if the headers of the request are more numerous or larger than WAF can inspect. WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to WAF. </p> <p>The options for oversize handling are the following:</p> <ul> <li> <p> <code>CONTINUE</code> - Inspect the available headers normally, according to the rule inspection criteria. </p> </li> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>Inspect all headers in the web request. You can specify the parts of the headers to inspect and you can narrow the set of headers to inspect by including or excluding specific keys.</p> <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p> <p>If you want to inspect just the value of a single header, use the <code>SingleHeader</code> <code>FieldToMatch</code> setting instead.</p> <p>Example JSON: <code>\"Headers\": { \"MatchPattern\": { \"All\": {} }, \"MatchScope\": \"KEY\", \"OversizeHandling\": \"MATCH\" }</code> </p>"
      },
      "HeaderMatchPattern": {
        "type": "object",
        "properties": {
          "All": {
            "allOf": [
              {
                "$ref": "#/$defs/All"
              },
              {
                "description": "Inspect all headers. "
              }
            ]
          },
          "IncludedHeaders": {
            "allOf": [
              {
                "$ref": "#/$defs/HeaderNames"
              },
              {
                "description": "Inspect only the headers that have a key that matches one of the strings specified here. "
              }
            ]
          },
          "ExcludedHeaders": {
            "allOf": [
              {
                "$ref": "#/$defs/HeaderNames"
              },
              {
                "description": "Inspect only the headers whose keys don't match any of the strings specified here. "
              }
            ]
          }
        },
        "description": "<p>The filter to use to identify the subset of headers to inspect in a web request. </p> <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedHeaders</code>, or <code>ExcludedHeaders</code>.</p> <p>Example JSON: <code>\"MatchPattern\": { \"ExcludedHeaders\": [ \"KeyToExclude1\", \"KeyToExclude2\" ] }</code> </p>"
      },
      "HeaderNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FieldToMatchData"
        },
        "minItems": 1,
        "maxItems": 199
      },
      "MapMatchScope": {
        "type": "string",
        "enum": [
          "ALL",
          "KEY",
          "VALUE"
        ]
      },
      "Cookies": {
        "type": "object",
        "required": [
          "MatchPattern",
          "MatchScope",
          "OversizeHandling"
        ],
        "properties": {
          "MatchPattern": {
            "allOf": [
              {
                "$ref": "#/$defs/CookieMatchPattern"
              },
              {
                "description": "<p>The filter to use to identify the subset of cookies to inspect in a web request. </p> <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedCookies</code>, or <code>ExcludedCookies</code>.</p> <p>Example JSON: <code>\"MatchPattern\": { \"IncludedCookies\": [ \"session-id-time\", \"session-id\" ] }</code> </p>"
              }
            ]
          },
          "MatchScope": {
            "allOf": [
              {
                "$ref": "#/$defs/MapMatchScope"
              },
              {
                "description": "The parts of the cookies to inspect with the rule inspection criteria. If you specify <code>All</code>, WAF inspects both keys and values. "
              }
            ]
          },
          "OversizeHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/OversizeHandling"
              },
              {
                "description": "<p>What WAF should do if the cookies of the request are more numerous or larger than WAF can inspect. WAF does not support inspecting the entire contents of request cookies when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies and at most 8 KB of cookie contents to WAF. </p> <p>The options for oversize handling are the following:</p> <ul> <li> <p> <code>CONTINUE</code> - Inspect the available cookies normally, according to the rule inspection criteria. </p> </li> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>Inspect the cookies in the web request. You can specify the parts of the cookies to inspect and you can narrow the set of cookies to inspect by including or excluding specific keys.</p> <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p> <p>Example JSON: <code>\"Cookies\": { \"MatchPattern\": { \"All\": {} }, \"MatchScope\": \"KEY\", \"OversizeHandling\": \"MATCH\" }</code> </p>"
      },
      "CookieMatchPattern": {
        "type": "object",
        "properties": {
          "All": {
            "allOf": [
              {
                "$ref": "#/$defs/All"
              },
              {
                "description": "Inspect all cookies. "
              }
            ]
          },
          "IncludedCookies": {
            "allOf": [
              {
                "$ref": "#/$defs/CookieNames"
              },
              {
                "description": "Inspect only the cookies that have a key that matches one of the strings specified here. "
              }
            ]
          },
          "ExcludedCookies": {
            "allOf": [
              {
                "$ref": "#/$defs/CookieNames"
              },
              {
                "description": "Inspect only the cookies whose keys don't match any of the strings specified here. "
              }
            ]
          }
        },
        "description": "<p>The filter to use to identify the subset of cookies to inspect in a web request. </p> <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedCookies</code>, or <code>ExcludedCookies</code>.</p> <p>Example JSON: <code>\"MatchPattern\": { \"IncludedCookies\": [ \"session-id-time\", \"session-id\" ] }</code> </p>"
      },
      "CookieNames": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SingleCookieName"
        },
        "minItems": 1,
        "maxItems": 199
      },
      "SingleCookieName": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 60
      },
      "HeaderOrder": {
        "type": "object",
        "required": [
          "OversizeHandling"
        ],
        "properties": {
          "OversizeHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/OversizeHandling"
              },
              {
                "description": "<p>What WAF should do if the headers of the request are more numerous or larger than WAF can inspect. WAF does not support inspecting the entire contents of request headers when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers and at most 8 KB of header contents to WAF. </p> <p>The options for oversize handling are the following:</p> <ul> <li> <p> <code>CONTINUE</code> - Inspect the available headers normally, according to the rule inspection criteria. </p> </li> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "Inspect a string containing the list of the request's header names, ordered as they appear in the web request that WAF receives for inspection. WAF generates the string and then uses that as the field to match component in its inspection. WAF separates the header names in the string using colons and no added spaces, for example <code>host:user-agent:accept:authorization:referer</code>."
      },
      "TextTransformations": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/TextTransformation"
        },
        "minItems": 1
      },
      "TextTransformation": {
        "type": "object",
        "required": [
          "Priority",
          "Type"
        ],
        "properties": {
          "Priority": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformationPriority"
              },
              {
                "description": "Sets the relative processing order for multiple transformations. WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content. The priorities don't need to be consecutive, but they must all be different. "
              }
            ]
          },
          "Type": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformationType"
              },
              {
                "description": "<p>You can specify the following transformation types:</p> <p> <b>BASE64_DECODE</b> - Decode a <code>Base64</code>-encoded string.</p> <p> <b>BASE64_DECODE_EXT</b> - Decode a <code>Base64</code>-encoded string, but use a forgiving implementation that ignores characters that aren't valid.</p> <p> <b>CMD_LINE</b> - Command-line transformations. These are helpful in reducing effectiveness of attackers who inject an operating system command-line command and use unusual formatting to disguise some or all of the command. </p> <ul> <li> <p>Delete the following characters: <code>\\ \" ' ^</code> </p> </li> <li> <p>Delete spaces before the following characters: <code>/ (</code> </p> </li> <li> <p>Replace the following characters with a space: <code>, ;</code> </p> </li> <li> <p>Replace multiple spaces with one space</p> </li> <li> <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p> </li> </ul> <p> <b>COMPRESS_WHITE_SPACE</b> - Replace these characters with a space character (decimal 32): </p> <ul> <li> <p> <code>\\f</code>, formfeed, decimal 12</p> </li> <li> <p> <code>\\t</code>, tab, decimal 9</p> </li> <li> <p> <code>\\n</code>, newline, decimal 10</p> </li> <li> <p> <code>\\r</code>, carriage return, decimal 13</p> </li> <li> <p> <code>\\v</code>, vertical tab, decimal 11</p> </li> <li> <p>Non-breaking space, decimal 160</p> </li> </ul> <p> <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p> <p> <b>CSS_DECODE</b> - Decode characters that were encoded using CSS 2.x escape rules <code>syndata.html#characters</code>. This function uses up to two bytes in the decoding process, so it can help to uncover ASCII characters that were encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in countering evasion, which is a combination of a backslash and non-hexadecimal characters. For example, <code>ja\\vascript</code> for javascript. </p> <p> <b>ESCAPE_SEQ_DECODE</b> - Decode the following ANSI C escape sequences: <code>\\a</code>, <code>\\b</code>, <code>\\f</code>, <code>\\n</code>, <code>\\r</code>, <code>\\t</code>, <code>\\v</code>, <code>\\\\</code>, <code>\\?</code>, <code>\\'</code>, <code>\\\"</code>, <code>\\xHH</code> (hexadecimal), <code>\\0OOO</code> (octal). Encodings that aren't valid remain in the output. </p> <p> <b>HEX_DECODE</b> - Decode a string of hexadecimal characters into a binary.</p> <p> <b>HTML_ENTITY_DECODE</b> - Replace HTML-encoded characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs these operations: </p> <ul> <li> <p>Replaces <code>(ampersand)quot;</code> with <code>\"</code> </p> </li> <li> <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal 160</p> </li> <li> <p>Replaces <code>(ampersand)lt;</code> with a \"less than\" symbol</p> </li> <li> <p>Replaces <code>(ampersand)gt;</code> with <code>&gt;</code> </p> </li> <li> <p>Replaces characters that are represented in hexadecimal format, <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p> </li> <li> <p>Replaces characters that are represented in decimal format, <code>(ampersand)#nnnn;</code>, with the corresponding characters</p> </li> </ul> <p> <b>JS_DECODE</b> - Decode JavaScript escape sequences. If a <code>\\</code> <code>u</code> <code>HHHH</code> code is in the full-width ASCII code range of <code>FF01-FF5E</code>, then the higher byte is used to detect and adjust the lower byte. If not, only the lower byte is used and the higher byte is zeroed, causing a possible loss of information. </p> <p> <b>LOWERCASE</b> - Convert uppercase letters (A-Z) to lowercase (a-z). </p> <p> <b>MD5</b> - Calculate an MD5 hash from the data in the input. The computed hash is in a raw binary form. </p> <p> <b>NONE</b> - Specify <code>NONE</code> if you don't want any text transformations. </p> <p> <b>NORMALIZE_PATH</b> - Remove multiple slashes, directory self-references, and directory back-references that are not at the beginning of the input from an input string. </p> <p> <b>NORMALIZE_PATH_WIN</b> - This is the same as <code>NORMALIZE_PATH</code>, but first converts backslash characters to forward slashes. </p> <p> <b>REMOVE_NULLS</b> - Remove all <code>NULL</code> bytes from the input. </p> <p> <b>REPLACE_COMMENTS</b> - Replace each occurrence of a C-style comment (<code>/* ... */</code>) with a single space. Multiple consecutive occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII 0x20). However, a standalone termination of a comment (<code>*/</code>) is not acted upon. </p> <p> <b>REPLACE_NULLS</b> - Replace NULL bytes in the input with space characters (ASCII <code>0x20</code>). </p> <p> <b>SQL_HEX_DECODE</b> - Decode SQL hex data. Example (<code>0x414243</code>) will be decoded to (<code>ABC</code>).</p> <p> <b>URL_DECODE</b> - Decode a URL-encoded value. </p> <p> <b>URL_DECODE_UNI</b> - Like <code>URL_DECODE</code>, but with support for Microsoft-specific <code>%u</code> encoding. If the code is in the full-width ASCII code range of <code>FF01-FF5E</code>, the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is zeroed. </p> <p> <b>UTF8_TO_UNICODE</b> - Convert all UTF-8 character sequences to Unicode. This helps input normalization, and minimizing false-positives and false-negatives for non-English languages.</p>"
              }
            ]
          }
        },
        "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. "
      },
      "TextTransformationPriority": {
        "type": "integer",
        "minimum": 0
      },
      "TextTransformationType": {
        "type": "string",
        "enum": [
          "NONE",
          "COMPRESS_WHITE_SPACE",
          "HTML_ENTITY_DECODE",
          "LOWERCASE",
          "CMD_LINE",
          "URL_DECODE",
          "BASE64_DECODE",
          "HEX_DECODE",
          "MD5",
          "REPLACE_COMMENTS",
          "ESCAPE_SEQ_DECODE",
          "SQL_HEX_DECODE",
          "CSS_DECODE",
          "JS_DECODE",
          "NORMALIZE_PATH",
          "NORMALIZE_PATH_WIN",
          "REMOVE_NULLS",
          "REPLACE_NULLS",
          "BASE64_DECODE_EXT",
          "URL_DECODE_UNI",
          "UTF8_TO_UNICODE"
        ]
      },
      "PositionalConstraint": {
        "type": "string",
        "enum": [
          "EXACTLY",
          "STARTS_WITH",
          "ENDS_WITH",
          "CONTAINS",
          "CONTAINS_WORD"
        ]
      },
      "SqliMatchStatement": {
        "type": "object",
        "required": [
          "FieldToMatch",
          "TextTransformations"
        ],
        "properties": {
          "FieldToMatch": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatch"
              },
              {
                "description": "The part of the web request that you want WAF to inspect. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          },
          "SensitivityLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/SensitivityLevel"
              },
              {
                "description": "<p>The sensitivity that you want WAF to use to inspect for SQL injection attacks. </p> <p> <code>HIGH</code> detects more attacks, but might generate more false positives, especially if your web requests frequently contain unusual strings. For information about identifying and mitigating false positives, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html\">Testing and tuning</a> in the <i>WAF Developer Guide</i>.</p> <p> <code>LOW</code> is generally a better choice for resources that already have other protections against SQL injection attacks or that have a low tolerance for false positives. </p> <p>Default: <code>LOW</code> </p>"
              }
            ]
          }
        },
        "description": "A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it. "
      },
      "SensitivityLevel": {
        "type": "string",
        "enum": [
          "LOW",
          "HIGH"
        ]
      },
      "XssMatchStatement": {
        "type": "object",
        "required": [
          "FieldToMatch",
          "TextTransformations"
        ],
        "properties": {
          "FieldToMatch": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatch"
              },
              {
                "description": "The part of the web request that you want WAF to inspect. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. "
      },
      "SizeConstraintStatement": {
        "type": "object",
        "required": [
          "FieldToMatch",
          "ComparisonOperator",
          "Size",
          "TextTransformations"
        ],
        "properties": {
          "FieldToMatch": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatch"
              },
              {
                "description": "The part of the web request that you want WAF to inspect. "
              }
            ]
          },
          "ComparisonOperator": {
            "allOf": [
              {
                "$ref": "#/$defs/ComparisonOperator"
              },
              {
                "description": "The operator to use to compare the request part to the size setting. "
              }
            ]
          },
          "Size": {
            "allOf": [
              {
                "$ref": "#/$defs/Size"
              },
              {
                "description": "The size, in byte, to compare to the request part, after any transformations."
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "<p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (&gt;) or less than (&lt;). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p> <p>If you configure WAF to inspect the request body, WAF inspects only the number of bytes of the body up to the limit for the web ACL. By default, for regional web ACLs, this limit is 8 KB (8,192 kilobytes) and for CloudFront web ACLs, this limit is 16 KB (16,384 kilobytes). For CloudFront web ACLs, you can increase the limit in the web ACL <code>AssociationConfig</code>, for additional fees. If you know that the request body for your web requests should never exceed the inspection limit, you could use a size constraint statement to block requests that have a larger request body size.</p> <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>"
      },
      "ComparisonOperator": {
        "type": "string",
        "enum": [
          "EQ",
          "NE",
          "LE",
          "LT",
          "GE",
          "GT"
        ]
      },
      "Size": {
        "type": "integer",
        "minimum": 0,
        "maximum": 21474836480
      },
      "GeoMatchStatement": {
        "type": "object",
        "properties": {
          "CountryCodes": {
            "allOf": [
              {
                "$ref": "#/$defs/CountryCodes"
              },
              {
                "description": "<p>An array of two-character country codes that you want to match against, for example, <code>[ \"US\", \"CN\" ]</code>, from the alpha-2 country ISO codes of the ISO 3166 international standard. </p> <p>When you use a geo match statement just for the region and country labels that it adds to requests, you still have to supply a country code for the rule to evaluate. In this case, you configure the rule to only count matching requests, but it will still generate logging and count metrics for any matches. You can reduce the logging and metrics that the rule produces by specifying a country that's unlikely to be a source of traffic to your site.</p>"
              }
            ]
          },
          "ForwardedIPConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/ForwardedIPConfig"
              },
              {
                "description": "<p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>A rule statement that labels web requests by country and region and that matches against web requests based on country code. A geo match rule labels every request that it inspects regardless of whether it finds a match.</p> <ul> <li> <p>To manage requests only by country, you can use this statement by itself and specify the countries that you want to match against in the <code>CountryCodes</code> array. </p> </li> <li> <p>Otherwise, configure your geo match rule with Count action so that it only labels requests. Then, add one or more label match rules to run after the geo match rule and configure them to match against the geographic labels and handle the requests as needed. </p> </li> </ul> <p>WAF labels requests using the alpha-2 country and region codes from the International Organization for Standardization (ISO) 3166 standard. WAF determines the codes using either the IP address in the web request origin or, if you specify it, the address in the geo match <code>ForwardedIPConfig</code>. </p> <p>If you use the web request origin, the label formats are <code>awswaf:clientip:geo:region:&lt;ISO country code&gt;-&lt;ISO region code&gt;</code> and <code>awswaf:clientip:geo:country:&lt;ISO country code&gt;</code>.</p> <p>If you use a forwarded IP address, the label formats are <code>awswaf:forwardedip:geo:region:&lt;ISO country code&gt;-&lt;ISO region code&gt;</code> and <code>awswaf:forwardedip:geo:country:&lt;ISO country code&gt;</code>.</p> <p>For additional details, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-statement-type-geo-match.html\">Geographic match rule statement</a> in the <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html\">WAF Developer Guide</a>. </p>"
      },
      "CountryCodes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CountryCode"
        },
        "minItems": 1
      },
      "CountryCode": {
        "type": "string",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "KH",
          "CM",
          "CA",
          "CV",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KP",
          "KR",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MK",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SZ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "US",
          "UM",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW",
          "XK"
        ]
      },
      "ForwardedIPConfig": {
        "type": "object",
        "required": [
          "HeaderName",
          "FallbackBehavior"
        ],
        "properties": {
          "HeaderName": {
            "allOf": [
              {
                "$ref": "#/$defs/ForwardedIPHeaderName"
              },
              {
                "description": "<p>The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to <code>X-Forwarded-For</code>.</p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note>"
              }
            ]
          },
          "FallbackBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/FallbackBehavior"
              },
              {
                "description": "<p>The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.</p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note> <p>You can specify the following fallback behaviors:</p> <ul> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note> <p>This configuration is used for <a>GeoMatchStatement</a> and <a>RateBasedStatement</a>. For <a>IPSetReferenceStatement</a>, use <a>IPSetForwardedIPConfig</a> instead. </p> <p>WAF only evaluates the first IP address found in the specified HTTP header. </p>"
      },
      "ForwardedIPHeaderName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9-]+$",
        "minLength": 1,
        "maxLength": 255
      },
      "FallbackBehavior": {
        "type": "string",
        "enum": [
          "MATCH",
          "NO_MATCH"
        ]
      },
      "RuleGroupReferenceStatement": {
        "type": "object",
        "required": [
          "ARN"
        ],
        "properties": {
          "ARN": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the entity."
              }
            ]
          },
          "ExcludedRules": {
            "allOf": [
              {
                "$ref": "#/$defs/ExcludedRules"
              },
              {
                "description": "<p>Rules in the referenced rule group whose actions are set to <code>Count</code>. </p> <note> <p>Instead of this option, use <code>RuleActionOverrides</code>. It accepts any valid action setting, including <code>Count</code>.</p> </note>"
              }
            ]
          },
          "RuleActionOverrides": {
            "allOf": [
              {
                "$ref": "#/$defs/RuleActionOverrides"
              },
              {
                "description": "<p>Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. </p> <p>You can use overrides for testing, for example you can override all of rule actions to <code>Count</code> and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.</p>"
              }
            ]
          }
        },
        "description": "<p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p> <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You can only use a rule group reference statement at the top level inside a web ACL. </p>"
      },
      "ResourceArn": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 20,
        "maxLength": 2048
      },
      "ExcludedRules": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ExcludedRule"
        },
        "maxItems": 100
      },
      "ExcludedRule": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the rule whose action you want to override to <code>Count</code>."
              }
            ]
          }
        },
        "description": "<p>Specifies a single rule in a rule group whose action you want to override to <code>Count</code>. </p> <note> <p>Instead of this option, use <code>RuleActionOverrides</code>. It accepts any valid action setting, including <code>Count</code>.</p> </note>"
      },
      "RuleActionOverrides": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RuleActionOverride"
        },
        "minItems": 1,
        "maxItems": 100
      },
      "RuleActionOverride": {
        "type": "object",
        "required": [
          "Name",
          "ActionToUse"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the rule to override."
              }
            ]
          },
          "ActionToUse": {
            "allOf": [
              {
                "$ref": "#/$defs/RuleAction"
              },
              {
                "description": "The override action to use, in place of the configured action of the rule in the rule group. "
              }
            ]
          }
        },
        "description": "<p>Action setting to use in the place of a rule action that is configured inside the rule group. You specify one override for each rule whose action you want to change. </p> <p>You can use overrides for testing, for example you can override all of rule actions to <code>Count</code> and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.</p>"
      },
      "RuleAction": {
        "type": "object",
        "properties": {
          "Block": {
            "allOf": [
              {
                "$ref": "#/$defs/BlockAction"
              },
              {
                "description": "Instructs WAF to block the web request."
              }
            ]
          },
          "Allow": {
            "allOf": [
              {
                "$ref": "#/$defs/AllowAction"
              },
              {
                "description": "Instructs WAF to allow the web request."
              }
            ]
          },
          "Count": {
            "allOf": [
              {
                "$ref": "#/$defs/CountAction"
              },
              {
                "description": "Instructs WAF to count the web request and then continue evaluating the request using the remaining rules in the web ACL."
              }
            ]
          },
          "Captcha": {
            "allOf": [
              {
                "$ref": "#/$defs/CaptchaAction"
              },
              {
                "description": "Instructs WAF to run a <code>CAPTCHA</code> check against the web request."
              }
            ]
          },
          "Challenge": {
            "allOf": [
              {
                "$ref": "#/$defs/ChallengeAction"
              },
              {
                "description": "Instructs WAF to run a <code>Challenge</code> check against the web request."
              }
            ]
          }
        },
        "description": "The action that WAF should take on a web request when it matches a rule's statement. Settings at the web ACL level can override the rule action setting. "
      },
      "BlockAction": {
        "type": "object",
        "properties": {
          "CustomResponse": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomResponse"
              },
              {
                "description": "<p>Defines a custom response for the web request.</p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>Specifies that WAF should block the request and optionally defines additional custom handling for the response to the web request.</p> <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>"
      },
      "CustomResponse": {
        "type": "object",
        "required": [
          "ResponseCode"
        ],
        "properties": {
          "ResponseCode": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseStatusCode"
              },
              {
                "description": "<p>The HTTP status code to return to the client. </p> <p>For a list of status codes that you can use in your custom responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html\">Supported status codes for custom response</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          },
          "CustomResponseBodyKey": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "References the response body that you want WAF to return to the web request client. You can define a custom response for a rule action or a default web ACL action that is set to block. To do this, you first define the response body key and value in the <code>CustomResponseBodies</code> setting for the <a>WebACL</a> or <a>RuleGroup</a> where you want to use it. Then, in the rule action or web ACL default action <code>BlockAction</code> setting, you reference the response body using this key. "
              }
            ]
          },
          "ResponseHeaders": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomHTTPHeaders"
              },
              {
                "description": "<p>The HTTP headers to use in the response. Duplicate header names are not allowed. </p> <p>For information about the limits on count and size for custom request and response settings, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/limits.html\">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>A custom response to send to the client. You can define a custom response for rule actions and default web ACL actions that are set to <a>BlockAction</a>. </p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
      },
      "ResponseStatusCode": {
        "type": "integer",
        "minimum": 200,
        "maximum": 599
      },
      "CustomHTTPHeaders": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/CustomHTTPHeader"
        },
        "minItems": 1
      },
      "CustomHTTPHeader": {
        "type": "object",
        "required": [
          "Name",
          "Value"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomHTTPHeaderName"
              },
              {
                "description": "<p>The name of the custom header. </p> <p>For custom request header insertion, when WAF inserts the header into the request, it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that are already in the request. For example, for the header name <code>sample</code>, WAF inserts the header <code>x-amzn-waf-sample</code>.</p>"
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomHTTPHeaderValue"
              },
              {
                "description": "The value of the custom header."
              }
            ]
          }
        },
        "description": "A custom header for custom request and response handling. This is used in <a>CustomResponse</a> and <a>CustomRequestHandling</a>."
      },
      "CustomHTTPHeaderName": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9._$-]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "CustomHTTPHeaderValue": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 255
      },
      "AllowAction": {
        "type": "object",
        "properties": {
          "CustomRequestHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomRequestHandling"
              },
              {
                "description": "<p>Defines custom handling for the web request.</p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>Specifies that WAF should allow the request and optionally defines additional custom handling for the request.</p> <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>"
      },
      "CustomRequestHandling": {
        "type": "object",
        "required": [
          "InsertHeaders"
        ],
        "properties": {
          "InsertHeaders": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomHTTPHeaders"
              },
              {
                "description": "<p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p> <p>For information about the limits on count and size for custom request and response settings, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/limits.html\">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>Custom request handling behavior that inserts custom headers into a web request. You can add custom request handling for WAF to use when the rule action doesn't block the request. For example, <code>CaptchaAction</code> for requests with valid t okens, and <code>AllowAction</code>. </p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
      },
      "CountAction": {
        "type": "object",
        "properties": {
          "CustomRequestHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomRequestHandling"
              },
              {
                "description": "<p>Defines custom handling for the web request.</p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>Specifies that WAF should count the request. Optionally defines additional custom handling for the request.</p> <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>"
      },
      "CaptchaAction": {
        "type": "object",
        "properties": {
          "CustomRequestHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomRequestHandling"
              },
              {
                "description": "<p>Defines custom handling for the web request, used when the <code>CAPTCHA</code> inspection determines that the request's token is valid and unexpired.</p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>Specifies that WAF should run a <code>CAPTCHA</code> check against the request: </p> <ul> <li> <p>If the request includes a valid, unexpired <code>CAPTCHA</code> token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a <code>CountAction</code>. </p> </li> <li> <p>If the request doesn't include a valid, unexpired token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.</p> <p>WAF generates a response that it sends back to the client, which includes the following: </p> <ul> <li> <p>The header <code>x-amzn-waf-action</code> with a value of <code>captcha</code>. </p> </li> <li> <p>The HTTP status code <code>405 Method Not Allowed</code>. </p> </li> <li> <p>If the request contains an <code>Accept</code> header with a value of <code>text/html</code>, the response includes a <code>CAPTCHA</code> JavaScript page interstitial. </p> </li> </ul> </li> </ul> <p>You can configure the expiration time in the <code>CaptchaConfig</code> <code>ImmunityTimeProperty</code> setting at the rule and web ACL level. The rule setting overrides the web ACL setting. </p> <p>This action option is available for rules. It isn't available for web ACL default actions. </p>"
      },
      "ChallengeAction": {
        "type": "object",
        "properties": {
          "CustomRequestHandling": {
            "allOf": [
              {
                "$ref": "#/$defs/CustomRequestHandling"
              },
              {
                "description": "<p>Defines custom handling for the web request, used when the challenge inspection determines that the request's token is valid and unexpired.</p> <p>For information about customizing web requests and responses, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html\">Customizing web requests and responses in WAF</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "<p>Specifies that WAF should run a <code>Challenge</code> check against the request to verify that the request is coming from a legitimate client session: </p> <ul> <li> <p>If the request includes a valid, unexpired challenge token, WAF applies any custom request handling and labels that you've configured and then allows the web request inspection to proceed to the next rule, similar to a <code>CountAction</code>. </p> </li> <li> <p>If the request doesn't include a valid, unexpired challenge token, WAF discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.</p> <p>WAF then generates a challenge response that it sends back to the client, which includes the following: </p> <ul> <li> <p>The header <code>x-amzn-waf-action</code> with a value of <code>challenge</code>. </p> </li> <li> <p>The HTTP status code <code>202 Request Accepted</code>. </p> </li> <li> <p>If the request contains an <code>Accept</code> header with a value of <code>text/html</code>, the response includes a JavaScript page interstitial with a challenge script. </p> </li> </ul> <p>Challenges run silent browser interrogations in the background, and don't generally affect the end user experience. </p> <p>A challenge enforces token acquisition using an interstitial JavaScript challenge that inspects the client session for legitimate behavior. The challenge blocks bots or at least increases the cost of operating sophisticated bots. </p> <p>After the client session successfully responds to the challenge, it receives a new token from WAF, which the challenge script uses to resubmit the original request. </p> </li> </ul> <p>You can configure the expiration time in the <code>ChallengeConfig</code> <code>ImmunityTimeProperty</code> setting at the rule and web ACL level. The rule setting overrides the web ACL setting. </p> <p>This action option is available for rules. It isn't available for web ACL default actions. </p>"
      },
      "IPSetReferenceStatement": {
        "type": "object",
        "required": [
          "ARN"
        ],
        "properties": {
          "ARN": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the <a>IPSet</a> that this statement references."
              }
            ]
          },
          "IPSetForwardedIPConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/IPSetForwardedIPConfig"
              },
              {
                "description": "<p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note>"
              }
            ]
          }
        },
        "description": "<p>A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an <a>IPSet</a> that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see <a>CreateIPSet</a>.</p> <p>Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>"
      },
      "IPSetForwardedIPConfig": {
        "type": "object",
        "required": [
          "HeaderName",
          "FallbackBehavior",
          "Position"
        ],
        "properties": {
          "HeaderName": {
            "allOf": [
              {
                "$ref": "#/$defs/ForwardedIPHeaderName"
              },
              {
                "description": "<p>The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to <code>X-Forwarded-For</code>.</p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note>"
              }
            ]
          },
          "FallbackBehavior": {
            "allOf": [
              {
                "$ref": "#/$defs/FallbackBehavior"
              },
              {
                "description": "<p>The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.</p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note> <p>You can specify the following fallback behaviors:</p> <ul> <li> <p> <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p> </li> <li> <p> <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p> </li> </ul>"
              }
            ]
          },
          "Position": {
            "allOf": [
              {
                "$ref": "#/$defs/ForwardedIPPosition"
              },
              {
                "description": "<p>The position in the header to search for the IP address. The header can contain IP addresses of the original client and also of proxies. For example, the header value could be <code>10.1.1.1, 127.0.0.0, 10.10.10.10</code> where the first IP address identifies the original client and the rest identify proxies that the request went through. </p> <p>The options for this setting are the following: </p> <ul> <li> <p>FIRST - Inspect the first IP address in the list of IP addresses in the header. This is usually the client's original IP.</p> </li> <li> <p>LAST - Inspect the last IP address in the list of IP addresses in the header.</p> </li> <li> <p>ANY - Inspect all IP addresses in the header for a match. If the header contains more than 10 IP addresses, WAF inspects the last 10.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note> <p>This configuration is used only for <a>IPSetReferenceStatement</a>. For <a>GeoMatchStatement</a> and <a>RateBasedStatement</a>, use <a>ForwardedIPConfig</a> instead. </p>"
      },
      "ForwardedIPPosition": {
        "type": "string",
        "enum": [
          "FIRST",
          "LAST",
          "ANY"
        ]
      },
      "RegexPatternSetReferenceStatement": {
        "type": "object",
        "required": [
          "ARN",
          "FieldToMatch",
          "TextTransformations"
        ],
        "properties": {
          "ARN": {
            "allOf": [
              {
                "$ref": "#/$defs/ResourceArn"
              },
              {
                "description": "The Amazon Resource Name (ARN) of the <a>RegexPatternSet</a> that this statement references."
              }
            ]
          },
          "FieldToMatch": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatch"
              },
              {
                "description": "The part of the web request that you want WAF to inspect. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "<p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <a>RegexPatternSet</a> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <a>CreateRegexPatternSet</a>.</p> <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>"
      },
      "RateBasedStatement": {
        "type": "object",
        "required": [
          "Limit",
          "AggregateKeyType"
        ],
        "properties": {
          "Limit": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimit"
              },
              {
                "description": "<p>The limit on requests per 5-minute period for a single aggregation instance for the rate-based rule. If the rate-based statement includes a <code>ScopeDownStatement</code>, this limit is applied only to the requests that match the statement.</p> <p>Examples: </p> <ul> <li> <p>If you aggregate on just the IP address, this is the limit on requests from any single IP address. </p> </li> <li> <p>If you aggregate on the HTTP method and the query argument name \"city\", then this is the limit on requests for any single method, city pair. </p> </li> </ul>"
              }
            ]
          },
          "AggregateKeyType": {
            "allOf": [
              {
                "$ref": "#/$defs/RateBasedStatementAggregateKeyType"
              },
              {
                "description": "<p>Setting that indicates how to aggregate the request counts. </p> <note> <p>Web requests that are missing any of the components specified in the aggregation keys are omitted from the rate-based rule evaluation and handling. </p> </note> <ul> <li> <p> <code>CONSTANT</code> - Count and limit the requests that match the rate-based rule's scope-down statement. With this option, the counted requests aren't further aggregated. The scope-down statement is the only specification used. When the count of all requests that satisfy the scope-down statement goes over the limit, WAF applies the rule action to all requests that satisfy the scope-down statement. </p> <p>With this option, you must configure the <code>ScopeDownStatement</code> property. </p> </li> <li> <p> <code>CUSTOM_KEYS</code> - Aggregate the request counts using one or more web request components as the aggregate keys.</p> <p>With this option, you must specify the aggregate keys in the <code>CustomKeys</code> property. </p> <p>To aggregate on only the IP address or only the forwarded IP address, don't use custom keys. Instead, set the aggregate key type to <code>IP</code> or <code>FORWARDED_IP</code>.</p> </li> <li> <p> <code>FORWARDED_IP</code> - Aggregate the request counts on the first IP address in an HTTP header. </p> <p>With this option, you must specify the header to use in the <code>ForwardedIPConfig</code> property. </p> <p>To aggregate on a combination of the forwarded IP address with other aggregate keys, use <code>CUSTOM_KEYS</code>. </p> </li> <li> <p> <code>IP</code> - Aggregate the request counts on the IP address from the web request origin.</p> <p>To aggregate on a combination of the IP address with other aggregate keys, use <code>CUSTOM_KEYS</code>. </p> </li> </ul>"
              }
            ]
          },
          "ScopeDownStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/Statement"
              },
              {
                "description": "An optional nested statement that narrows the scope of the web requests that are evaluated and managed by the rate-based statement. When you use a scope-down statement, the rate-based rule only tracks and rate limits requests that match the scope-down statement. You can use any nestable <a>Statement</a> in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. "
              }
            ]
          },
          "ForwardedIPConfig": {
            "allOf": [
              {
                "$ref": "#/$defs/ForwardedIPConfig"
              },
              {
                "description": "<p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p> <note> <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p> </note> <p>This is required if you specify a forwarded IP in the rule's aggregate key settings. </p>"
              }
            ]
          },
          "CustomKeys": {
            "allOf": [
              {
                "$ref": "#/$defs/RateBasedStatementCustomKeys"
              },
              {
                "description": "Specifies the aggregate keys to use in a rate-base rule. "
              }
            ]
          }
        },
        "description": "<p>A rate-based rule counts incoming requests and rate limits requests when they are coming at too fast a rate. The rule categorizes requests according to your aggregation criteria, collects them into aggregation instances, and counts and rate limits the requests for each instance. </p> <p>You can specify individual aggregation keys, like IP address or HTTP method. You can also specify aggregation key combinations, like IP address and HTTP method, or HTTP method, query argument, and cookie. </p> <p>Each unique set of values for the aggregation keys that you specify is a separate aggregation instance, with the value from each key contributing to the aggregation instance definition. </p> <p>For example, assume the rule evaluates web requests with the following IP address and HTTP method values: </p> <ul> <li> <p>IP address 10.1.1.1, HTTP method POST</p> </li> <li> <p>IP address 10.1.1.1, HTTP method GET</p> </li> <li> <p>IP address 127.0.0.0, HTTP method POST</p> </li> <li> <p>IP address 10.1.1.1, HTTP method GET</p> </li> </ul> <p>The rule would create different aggregation instances according to your aggregation criteria, for example: </p> <ul> <li> <p>If the aggregation criteria is just the IP address, then each individual address is an aggregation instance, and WAF counts requests separately for each. The aggregation instances and request counts for our example would be the following: </p> <ul> <li> <p>IP address 10.1.1.1: count 3</p> </li> <li> <p>IP address 127.0.0.0: count 1</p> </li> </ul> </li> <li> <p>If the aggregation criteria is HTTP method, then each individual HTTP method is an aggregation instance. The aggregation instances and request counts for our example would be the following: </p> <ul> <li> <p>HTTP method POST: count 2</p> </li> <li> <p>HTTP method GET: count 2</p> </li> </ul> </li> <li> <p>If the aggregation criteria is IP address and HTTP method, then each IP address and each HTTP method would contribute to the combined aggregation instance. The aggregation instances and request counts for our example would be the following: </p> <ul> <li> <p>IP address 10.1.1.1, HTTP method POST: count 1</p> </li> <li> <p>IP address 10.1.1.1, HTTP method GET: count 2</p> </li> <li> <p>IP address 127.0.0.0, HTTP method POST: count 1</p> </li> </ul> </li> </ul> <p>For any n-tuple of aggregation keys, each unique combination of values for the keys defines a separate aggregation instance, which WAF counts and rate-limits individually. </p> <p>You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts and rate limits requests that match the nested statement. You can use this nested scope-down statement in conjunction with your aggregation key specifications or you can just count and rate limit all requests that match the scope-down statement, without additional aggregation. When you choose to just manage all requests that match a scope-down statement, the aggregation instance is singular for the rule. </p> <p>You cannot nest a <code>RateBasedStatement</code> inside another statement, for example inside a <code>NotStatement</code> or <code>OrStatement</code>. You can define a <code>RateBasedStatement</code> inside a web ACL and inside a rule group. </p> <p>For additional information about the options, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-rate-based-rules.html\">Rate limiting web requests using rate-based rules</a> in the <i>WAF Developer Guide</i>. </p> <p>If you only aggregate on the individual IP address or forwarded IP address, you can retrieve the list of IP addresses that WAF is currently rate limiting for a rule through the API call <code>GetRateBasedStatementManagedKeys</code>. This option is not available for other aggregation configurations.</p> <p>WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF. </p>"
      },
      "RateLimit": {
        "type": "integer",
        "minimum": 100,
        "maximum": 2000000000
      },
      "RateBasedStatementAggregateKeyType": {
        "type": "string",
        "enum": [
          "IP",
          "FORWARDED_IP",
          "CUSTOM_KEYS",
          "CONSTANT"
        ]
      },
      "RateBasedStatementCustomKeys": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/RateBasedStatementCustomKey"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "RateBasedStatementCustomKey": {
        "type": "object",
        "properties": {
          "Header": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitHeader"
              },
              {
                "description": "Use the value of a header in the request as an aggregate key. Each distinct value in the header contributes to the aggregation instance. If you use a single header as your custom key, then each value fully defines an aggregation instance. "
              }
            ]
          },
          "Cookie": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitCookie"
              },
              {
                "description": "Use the value of a cookie in the request as an aggregate key. Each distinct value in the cookie contributes to the aggregation instance. If you use a single cookie as your custom key, then each value fully defines an aggregation instance. "
              }
            ]
          },
          "QueryArgument": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitQueryArgument"
              },
              {
                "description": "Use the specified query argument as an aggregate key. Each distinct value for the named query argument contributes to the aggregation instance. If you use a single query argument as your custom key, then each value fully defines an aggregation instance. "
              }
            ]
          },
          "QueryString": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitQueryString"
              },
              {
                "description": "Use the request's query string as an aggregate key. Each distinct string contributes to the aggregation instance. If you use just the query string as your custom key, then each string fully defines an aggregation instance. "
              }
            ]
          },
          "HTTPMethod": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitHTTPMethod"
              },
              {
                "description": "Use the request's HTTP method as an aggregate key. Each distinct HTTP method contributes to the aggregation instance. If you use just the HTTP method as your custom key, then each method fully defines an aggregation instance. "
              }
            ]
          },
          "ForwardedIP": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitForwardedIP"
              },
              {
                "description": "<p>Use the first IP address in an HTTP header as an aggregate key. Each distinct forwarded IP address contributes to the aggregation instance.</p> <p>When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the forwarded IP address by specifying <code>FORWARDED_IP</code> in your rate-based statement's <code>AggregateKeyType</code>. </p> <p>With this option, you must specify the header to use in the rate-based rule's <code>ForwardedIPConfig</code> property. </p>"
              }
            ]
          },
          "IP": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitIP"
              },
              {
                "description": "<p>Use the request's originating IP address as an aggregate key. Each distinct IP address contributes to the aggregation instance.</p> <p>When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the IP address by specifying <code>IP</code> in your rate-based statement's <code>AggregateKeyType</code>. </p>"
              }
            ]
          },
          "LabelNamespace": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitLabelNamespace"
              },
              {
                "description": "<p>Use the specified label namespace as an aggregate key. Each distinct fully qualified label name that has the specified label namespace contributes to the aggregation instance. If you use just one label namespace as your custom key, then each label name fully defines an aggregation instance. </p> <p>This uses only labels that have been added to the request by rules that are evaluated before this rate-based rule in the web ACL. </p> <p>For information about label namespaces and names, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-label-requirements.html\">Label syntax and naming requirements</a> in the <i>WAF Developer Guide</i>.</p>"
              }
            ]
          },
          "UriPath": {
            "allOf": [
              {
                "$ref": "#/$defs/RateLimitUriPath"
              },
              {
                "description": "Use the request's URI path as an aggregate key. Each distinct URI path contributes to the aggregation instance. If you use just the URI path as your custom key, then each URI path fully defines an aggregation instance. "
              }
            ]
          }
        },
        "description": "<p>Specifies a single custom aggregate key for a rate-base rule. </p> <note> <p>Web requests that are missing any of the components specified in the aggregation keys are omitted from the rate-based rule evaluation and handling. </p> </note>"
      },
      "RateLimitHeader": {
        "type": "object",
        "required": [
          "Name",
          "TextTransformations"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatchData"
              },
              {
                "description": "The name of the header to use. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "Specifies a header as an aggregate key for a rate-based rule. Each distinct value in the header contributes to the aggregation instance. If you use a single header as your custom key, then each value fully defines an aggregation instance. "
      },
      "RateLimitCookie": {
        "type": "object",
        "required": [
          "Name",
          "TextTransformations"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatchData"
              },
              {
                "description": "The name of the cookie to use. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "Specifies a cookie as an aggregate key for a rate-based rule. Each distinct value in the cookie contributes to the aggregation instance. If you use a single cookie as your custom key, then each value fully defines an aggregation instance. "
      },
      "RateLimitQueryArgument": {
        "type": "object",
        "required": [
          "Name",
          "TextTransformations"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatchData"
              },
              {
                "description": "The name of the query argument to use. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "Specifies a query argument in the request as an aggregate key for a rate-based rule. Each distinct value for the named query argument contributes to the aggregation instance. If you use a single query argument as your custom key, then each value fully defines an aggregation instance. "
      },
      "RateLimitQueryString": {
        "type": "object",
        "required": [
          "TextTransformations"
        ],
        "properties": {
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "Specifies the request's query string as an aggregate key for a rate-based rule. Each distinct string contributes to the aggregation instance. If you use just the query string as your custom key, then each string fully defines an aggregation instance. "
      },
      "RateLimitHTTPMethod": {
        "type": "object",
        "properties": {},
        "description": "<p>Specifies the request's HTTP method as an aggregate key for a rate-based rule. Each distinct HTTP method contributes to the aggregation instance. If you use just the HTTP method as your custom key, then each method fully defines an aggregation instance. </p> <p>JSON specification: <code>\"RateLimitHTTPMethod\": {}</code> </p>"
      },
      "RateLimitForwardedIP": {
        "type": "object",
        "properties": {},
        "description": "<p>Specifies the first IP address in an HTTP header as an aggregate key for a rate-based rule. Each distinct forwarded IP address contributes to the aggregation instance.</p> <p>This setting is used only in the <code>RateBasedStatementCustomKey</code> specification of a rate-based rule statement. When you specify an IP or forwarded IP in the custom key settings, you must also specify at least one other key to use. You can aggregate on only the forwarded IP address by specifying <code>FORWARDED_IP</code> in your rate-based statement's <code>AggregateKeyType</code>. </p> <p>This data type supports using the forwarded IP address in the web request aggregation for a rate-based rule, in <code>RateBasedStatementCustomKey</code>. The JSON specification for using the forwarded IP address doesn't explicitly use this data type. </p> <p>JSON specification: <code>\"ForwardedIP\": {}</code> </p> <p>When you use this specification, you must also configure the forwarded IP address in the rate-based statement's <code>ForwardedIPConfig</code>. </p>"
      },
      "RateLimitIP": {
        "type": "object",
        "properties": {},
        "description": "<p>Specifies the IP address in the web request as an aggregate key for a rate-based rule. Each distinct IP address contributes to the aggregation instance. </p> <p>This setting is used only in the <code>RateBasedStatementCustomKey</code> specification of a rate-based rule statement. To use this in the custom key settings, you must specify at least one other key to use, along with the IP address. To aggregate on only the IP address, in your rate-based statement's <code>AggregateKeyType</code>, specify <code>IP</code>.</p> <p>JSON specification: <code>\"RateLimitIP\": {}</code> </p>"
      },
      "RateLimitLabelNamespace": {
        "type": "object",
        "required": [
          "Namespace"
        ],
        "properties": {
          "Namespace": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelNamespace"
              },
              {
                "description": "The namespace to use for aggregation. "
              }
            ]
          }
        },
        "description": "<p>Specifies a label namespace to use as an aggregate key for a rate-based rule. Each distinct fully qualified label name that has the specified label namespace contributes to the aggregation instance. If you use just one label namespace as your custom key, then each label name fully defines an aggregation instance. </p> <p>This uses only labels that have been added to the request by rules that are evaluated before this rate-based rule in the web ACL. </p> <p>For information about label namespaces and names, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-rule-label-requirements.html\">Label syntax and naming requirements</a> in the <i>WAF Developer Guide</i>.</p>"
      },
      "LabelNamespace": {
        "type": "string",
        "pattern": "^[0-9A-Za-z_\\-:]+:$",
        "minLength": 1,
        "maxLength": 1024
      },
      "RateLimitUriPath": {
        "type": "object",
        "required": [
          "TextTransformations"
        ],
        "properties": {
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "Specifies the request's URI path as an aggregate key for a rate-based rule. Each distinct URI path contributes to the aggregation instance. If you use just the URI path as your custom key, then each URI path fully defines an aggregation instance. "
      },
      "AndStatement": {
        "type": "object",
        "required": [
          "Statements"
        ],
        "properties": {
          "Statements": {
            "allOf": [
              {
                "$ref": "#/$defs/Statements"
              },
              {
                "description": "The statements to combine with AND logic. You can use any statements that can be nested. "
              }
            ]
          }
        },
        "description": "A logical rule statement used to combine other rule statements with AND logic. You provide more than one <a>Statement</a> within the <code>AndStatement</code>. "
      },
      "Statements": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Statement"
        }
      },
      "OrStatement": {
        "type": "object",
        "required": [
          "Statements"
        ],
        "properties": {
          "Statements": {
            "allOf": [
              {
                "$ref": "#/$defs/Statements"
              },
              {
                "description": "The statements to combine with OR logic. You can use any statements that can be nested."
              }
            ]
          }
        },
        "description": "A logical rule statement used to combine other rule statements with OR logic. You provide more than one <a>Statement</a> within the <code>OrStatement</code>. "
      },
      "NotStatement": {
        "type": "object",
        "required": [
          "Statement"
        ],
        "properties": {
          "Statement": {
            "allOf": [
              {
                "$ref": "#/$defs/Statement"
              },
              {
                "description": "The statement to negate. You can use any statement that can be nested."
              }
            ]
          }
        },
        "description": "A logical rule statement used to negate the results of another rule statement. You provide one <a>Statement</a> within the <code>NotStatement</code>."
      },
      "ManagedRuleGroupStatement": {
        "type": "object",
        "required": [
          "VendorName",
          "Name"
        ],
        "properties": {
          "VendorName": {
            "allOf": [
              {
                "$ref": "#/$defs/VendorName"
              },
              {
                "description": "The name of the managed rule group vendor. You use this, along with the rule group name, to identify a rule group."
              }
            ]
          },
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/EntityName"
              },
              {
                "description": "The name of the managed rule group. You use this, along with the vendor name, to identify the rule group."
              }
            ]
          },
          "Version": {
            "allOf": [
              {
                "$ref": "#/$defs/VersionKeyString"
              },
              {
                "description": "The version of the managed rule group to use. If you specify this, the version setting is fixed until you change it. If you don't specify this, WAF uses the vendor's default version, and then keeps the version at the vendor's default when the vendor updates the managed rule group settings. "
              }
            ]
          },
          "ExcludedRules": {
            "allOf": [
              {
                "$ref": "#/$defs/ExcludedRules"
              },
              {
                "description": "<p>Rules in the referenced rule group whose actions are set to <code>Count</code>. </p> <note> <p>Instead of this option, use <code>RuleActionOverrides</code>. It accepts any valid action setting, including <code>Count</code>.</p> </note>"
              }
            ]
          },
          "ScopeDownStatement": {
            "allOf": [
              {
                "$ref": "#/$defs/Statement"
              },
              {
                "description": "An optional nested statement that narrows the scope of the web requests that are evaluated by the managed rule group. Requests are only evaluated by the rule group if they match the scope-down statement. You can use any nestable <a>Statement</a> in the scope-down statement, and you can nest statements at any level, the same as you can for a rule statement. "
              }
            ]
          },
          "ManagedRuleGroupConfigs": {
            "allOf": [
              {
                "$ref": "#/$defs/ManagedRuleGroupConfigs"
              },
              {
                "description": "<p>Additional information that's used by a managed rule group. Many managed rule groups don't require this.</p> <p>The rule groups used for intelligent threat mitigation require additional configuration: </p> <ul> <li> <p>Use the <code>AWSManagedRulesACFPRuleSet</code> configuration object to configure the account creation fraud prevention managed rule group. The configuration includes the registration and sign-up pages of your application and the locations in the account creation request payload of data, such as the user email and phone number fields. </p> </li> <li> <p>Use the <code>AWSManagedRulesATPRuleSet</code> configuration object to configure the account takeover prevention managed rule group. The configuration includes the sign-in page of your application and the locations in the login request payload of data such as the username and password. </p> </li> <li> <p>Use the <code>AWSManagedRulesBotControlRuleSet</code> configuration object to configure the protection level that you want the Bot Control rule group to use. </p> </li> </ul>"
              }
            ]
          },
          "RuleActionOverrides": {
            "allOf": [
              {
                "$ref": "#/$defs/RuleActionOverrides"
              },
              {
                "description": "<p>Action settings to use in the place of the rule actions that are configured inside the rule group. You specify one override for each rule whose action you want to change. </p> <p>You can use overrides for testing, for example you can override all of rule actions to <code>Count</code> and then monitor the resulting count metrics to understand how the rule group would handle your web traffic. You can also permanently override some or all actions, to modify how the rule group manages your web traffic.</p>"
              }
            ]
          }
        },
        "description": "<p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p> <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p> <note> <p>You are charged additional fees when you use the WAF Bot Control managed rule group <code>AWSManagedRulesBotControlRuleSet</code>, the WAF Fraud Control account takeover prevention (ATP) managed rule group <code>AWSManagedRulesATPRuleSet</code>, or the WAF Fraud Control account creation fraud prevention (ACFP) managed rule group <code>AWSManagedRulesACFPRuleSet</code>. For more information, see <a href=\"http://aws.amazon.com/waf/pricing/\">WAF Pricing</a>.</p> </note>"
      },
      "VendorName": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 128
      },
      "VersionKeyString": {
        "type": "string",
        "pattern": "^[\\w#:\\.\\-/]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "ManagedRuleGroupConfigs": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/ManagedRuleGroupConfig"
        }
      },
      "ManagedRuleGroupConfig": {
        "type": "object",
        "properties": {
          "LoginPath": {
            "allOf": [
              {
                "$ref": "#/$defs/LoginPathString"
              },
              {
                "deprecated": true,
                "description": "<note> <p>Instead of this setting, provide your configuration under <code>AWSManagedRulesATPRuleSet</code>. </p> </note>Deprecated. Use AWSManagedRulesATPRuleSet LoginPath"
              }
            ]
          },
          "PayloadType": {
            "allOf": [
              {
                "$ref": "#/$defs/PayloadType"
              },
              {
                "deprecated": true,
                "description": "<note> <p>Instead of this setting, provide your configuration under the request inspection configuration for <code>AWSManagedRulesATPRuleSet</code> or <code>AWSManagedRulesACFPRuleSet</code>. </p> </note>Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PayloadType"
              }
            ]
          },
          "UsernameField": {
            "allOf": [
              {
                "$ref": "#/$defs/UsernameField"
              },
              {
                "deprecated": true,
                "description": "<note> <p>Instead of this setting, provide your configuration under the request inspection configuration for <code>AWSManagedRulesATPRuleSet</code> or <code>AWSManagedRulesACFPRuleSet</code>. </p> </note>Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection UsernameField"
              }
            ]
          },
          "PasswordField": {
            "allOf": [
              {
                "$ref": "#/$defs/PasswordField"
              },
              {
                "deprecated": true,
                "description": "<note> <p>Instead of this setting, provide your configuration under the request inspection configuration for <code>AWSManagedRulesATPRuleSet</code> or <code>AWSManagedRulesACFPRuleSet</code>. </p> </note>Deprecated. Use AWSManagedRulesATPRuleSet RequestInspection PasswordField"
              }
            ]
          },
          "AWSManagedRulesBotControlRuleSet": {
            "allOf": [
              {
                "$ref": "#/$defs/AWSManagedRulesBotControlRuleSet"
              },
              {
                "description": "Additional configuration for using the Bot Control managed rule group. Use this to specify the inspection level that you want to use. For information about using the Bot Control managed rule group, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html\">WAF Bot Control rule group</a> and <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-bot-control.html\">WAF Bot Control</a> in the <i>WAF Developer Guide</i>."
              }
            ]
          },
          "AWSManagedRulesATPRuleSet": {
            "allOf": [
              {
                "$ref": "#/$defs/AWSManagedRulesATPRuleSet"
              },
              {
                "description": "<p>Additional configuration for using the account takeover prevention (ATP) managed rule group, <code>AWSManagedRulesATPRuleSet</code>. Use this to provide login request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to login requests. </p> <p>This configuration replaces the individual configuration fields in <code>ManagedRuleGroupConfig</code> and provides additional feature configuration. </p> <p>For information about using the ATP managed rule group, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-atp.html\">WAF Fraud Control account takeover prevention (ATP) rule group</a> and <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-atp.html\">WAF Fraud Control account takeover prevention (ATP)</a> in the <i>WAF Developer Guide</i>.</p>"
              }
            ]
          },
          "AWSManagedRulesACFPRuleSet": {
            "allOf": [
              {
                "$ref": "#/$defs/AWSManagedRulesACFPRuleSet"
              },
              {
                "description": "<p>Additional configuration for using the account creation fraud prevention (ACFP) managed rule group, <code>AWSManagedRulesACFPRuleSet</code>. Use this to provide account creation request information to the rule group. For web ACLs that protect CloudFront distributions, use this to also provide the information about how your distribution responds to account creation requests. </p> <p>For information about using the ACFP managed rule group, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-acfp.html\">WAF Fraud Control account creation fraud prevention (ACFP) rule group</a> and <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/waf-acfp.html\">WAF Fraud Control account creation fraud prevention (ACFP)</a> in the <i>WAF Developer Guide</i>.</p>"
              }
            ]
          }
        },
        "description": "<p>Additional information that's used by a managed rule group. Many managed rule groups don't require this.</p> <p>The rule groups used for intelligent threat mitigation require additional configuration: </p> <ul> <li> <p>Use the <code>AWSManagedRulesACFPRuleSet</code> configuration object to configure the account creation fraud prevention managed rule group. The configuration includes the registration and sign-up pages of your application and the locations in the account creation request payload of data, such as the user email and phone number fields. </p> </li> <li> <p>Use the <code>AWSManagedRulesATPRuleSet</code> configuration object to configure the account takeover prevention managed rule group. The configuration includes the sign-in page of your application and the locations in the login request payload of data such as the username and password. </p> </li> <li> <p>Use the <code>AWSManagedRulesBotControlRuleSet</code> configuration object to configure the protection level that you want the Bot Control rule group to use. </p> </li> </ul> <p>For example specifications, see the examples section of <a>CreateWebACL</a>.</p>"
      },
      "LoginPathString": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 256
      },
      "PayloadType": {
        "type": "string",
        "enum": [
          "JSON",
          "FORM_ENCODED"
        ]
      },
      "UsernameField": {
        "type": "object",
        "required": [
          "Identifier"
        ],
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldIdentifier"
              },
              {
                "description": "<p>The name of the username field. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"username\": \"THE_USERNAME\" } }</code>, the username field specification is <code>/form/username</code>. </p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The name of the field in the request payload that contains your customer's username. </p> <p>This data type is used in the <code>RequestInspection</code> and <code>RequestInspectionACFP</code> data types. </p>"
      },
      "FieldIdentifier": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 512
      },
      "PasswordField": {
        "type": "object",
        "required": [
          "Identifier"
        ],
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldIdentifier"
              },
              {
                "description": "<p>The name of the password field. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"password\": \"THE_PASSWORD\" } }</code>, the password field specification is <code>/form/password</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The name of the field in the request payload that contains your customer's password. </p> <p>This data type is used in the <code>RequestInspection</code> and <code>RequestInspectionACFP</code> data types. </p>"
      },
      "AWSManagedRulesBotControlRuleSet": {
        "type": "object",
        "required": [
          "InspectionLevel"
        ],
        "properties": {
          "InspectionLevel": {
            "allOf": [
              {
                "$ref": "#/$defs/InspectionLevel"
              },
              {
                "description": "The inspection level to use for the Bot Control rule group. The common level is the least expensive. The targeted level includes all common level rules and adds rules with more advanced inspection criteria. For details, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html\">WAF Bot Control rule group</a> in the <i>WAF Developer Guide</i>."
              }
            ]
          }
        },
        "description": "Details for your use of the Bot Control managed rule group, <code>AWSManagedRulesBotControlRuleSet</code>. This configuration is used in <code>ManagedRuleGroupConfig</code>. "
      },
      "InspectionLevel": {
        "type": "string",
        "enum": [
          "COMMON",
          "TARGETED"
        ]
      },
      "AWSManagedRulesATPRuleSet": {
        "type": "object",
        "required": [
          "LoginPath"
        ],
        "properties": {
          "LoginPath": {
            "allOf": [
              {
                "$ref": "#/$defs/String"
              },
              {
                "description": "<p>The path of the login endpoint for your application. For example, for the URL <code>https://example.com/web/login</code>, you would provide the path <code>/web/login</code>.</p> <p>The rule group inspects only HTTP <code>POST</code> requests to your specified login endpoint.</p>"
              }
            ]
          },
          "RequestInspection": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestInspection"
              },
              {
                "description": "The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. "
              }
            ]
          },
          "ResponseInspection": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspection"
              },
              {
                "description": "<p>The criteria for inspecting responses to login requests, used by the ATP rule group to track login failure rates. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note> <p>The ATP rule group evaluates the responses that your protected resources send back to client login attempts, keeping count of successful and failed attempts for each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many failed login attempts in a short amount of time. </p>"
              }
            ]
          },
          "EnableRegexInPath": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Allow the use of regular expressions in the login page path. "
              }
            ]
          }
        },
        "description": "Details for your use of the account takeover prevention managed rule group, <code>AWSManagedRulesATPRuleSet</code>. This configuration is used in <code>ManagedRuleGroupConfig</code>. "
      },
      "String": {
        "type": "string"
      },
      "RequestInspection": {
        "type": "object",
        "required": [
          "PayloadType",
          "UsernameField",
          "PasswordField"
        ],
        "properties": {
          "PayloadType": {
            "allOf": [
              {
                "$ref": "#/$defs/PayloadType"
              },
              {
                "description": "The payload type for your login endpoint, either JSON or form encoded."
              }
            ]
          },
          "UsernameField": {
            "allOf": [
              {
                "$ref": "#/$defs/UsernameField"
              },
              {
                "description": "<p>The name of the field in the request payload that contains your customer's username. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"username\": \"THE_USERNAME\" } }</code>, the username field specification is <code>/form/username</code>. </p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li> </ul>"
              }
            ]
          },
          "PasswordField": {
            "allOf": [
              {
                "$ref": "#/$defs/PasswordField"
              },
              {
                "description": "<p>The name of the field in the request payload that contains your customer's password. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"password\": \"THE_PASSWORD\" } }</code>, the password field specification is <code>/form/password</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The criteria for inspecting login requests, used by the ATP rule group to validate credentials usage. </p> <p>This is part of the <code>AWSManagedRulesATPRuleSet</code> configuration in <code>ManagedRuleGroupConfig</code>.</p> <p>In these settings, you specify how your application accepts login attempts by providing the request payload type and the names of the fields within the request body where the username and password are provided. </p>"
      },
      "ResponseInspection": {
        "type": "object",
        "properties": {
          "StatusCode": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionStatusCode"
              },
              {
                "description": "Configures inspection of the response status code for success and failure indicators. "
              }
            ]
          },
          "Header": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionHeader"
              },
              {
                "description": "Configures inspection of the response header for success and failure indicators. "
              }
            ]
          },
          "BodyContains": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionBodyContains"
              },
              {
                "description": "Configures inspection of the response body for success and failure indicators. WAF can inspect the first 65,536 bytes (64 KB) of the response body. "
              }
            ]
          },
          "Json": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionJson"
              },
              {
                "description": "Configures inspection of the response JSON for success and failure indicators. WAF can inspect the first 65,536 bytes (64 KB) of the response JSON. "
              }
            ]
          }
        },
        "description": "<p>The criteria for inspecting responses to login requests and account creation requests, used by the ATP and ACFP rule groups to track login and account creation success and failure rates. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note> <p>The rule groups evaluates the responses that your protected resources send back to client login and account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses with too much suspicious activity in a short amount of time. </p> <p>This is part of the <code>AWSManagedRulesATPRuleSet</code> and <code>AWSManagedRulesACFPRuleSet</code> configurations in <code>ManagedRuleGroupConfig</code>.</p> <p>Enable response inspection by configuring exactly one component of the response to inspect, for example, <code>Header</code> or <code>StatusCode</code>. You can't configure more than one component for inspection. If you don't configure any of the response inspection options, response inspection is disabled. </p>"
      },
      "ResponseInspectionStatusCode": {
        "type": "object",
        "required": [
          "SuccessCodes",
          "FailureCodes"
        ],
        "properties": {
          "SuccessCodes": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionStatusCodeSuccessCodes"
              },
              {
                "description": "<p>Status codes in the response that indicate a successful login or account creation attempt. To be counted as a success, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p> <p>JSON example: <code>\"SuccessCodes\": [ 200, 201 ]</code> </p>"
              }
            ]
          },
          "FailureCodes": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionStatusCodeFailureCodes"
              },
              {
                "description": "<p>Status codes in the response that indicate a failed login or account creation attempt. To be counted as a failure, the response status code must match one of these. Each code must be unique among the success and failure status codes. </p> <p>JSON example: <code>\"FailureCodes\": [ 400, 404 ]</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Configures inspection of the response status code. This is part of the <code>ResponseInspection</code> configuration for <code>AWSManagedRulesATPRuleSet</code> and <code>AWSManagedRulesACFPRuleSet</code>. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note>"
      },
      "ResponseInspectionStatusCodeSuccessCodes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SuccessCode"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "SuccessCode": {
        "type": "integer",
        "minimum": 0,
        "maximum": 999
      },
      "ResponseInspectionStatusCodeFailureCodes": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FailureCode"
        },
        "minItems": 1,
        "maxItems": 10
      },
      "FailureCode": {
        "type": "integer",
        "minimum": 0,
        "maximum": 999
      },
      "ResponseInspectionHeader": {
        "type": "object",
        "required": [
          "Name",
          "SuccessValues",
          "FailureValues"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionHeaderName"
              },
              {
                "description": "<p>The name of the header to match against. The name must be an exact match, including case.</p> <p>JSON example: <code>\"Name\": [ \"RequestResult\" ]</code> </p>"
              }
            ]
          },
          "SuccessValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionHeaderSuccessValues"
              },
              {
                "description": "<p>Values in the response header with the specified name that indicate a successful login or account creation attempt. To be counted as a success, the value must be an exact match, including case. Each value must be unique among the success and failure values. </p> <p>JSON examples: <code>\"SuccessValues\": [ \"LoginPassed\", \"Successful login\" ]</code> and <code>\"SuccessValues\": [ \"AccountCreated\", \"Successful account creation\" ]</code> </p>"
              }
            ]
          },
          "FailureValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionHeaderFailureValues"
              },
              {
                "description": "<p>Values in the response header with the specified name that indicate a failed login or account creation attempt. To be counted as a failure, the value must be an exact match, including case. Each value must be unique among the success and failure values. </p> <p>JSON examples: <code>\"FailureValues\": [ \"LoginFailed\", \"Failed login\" ]</code> and <code>\"FailureValues\": [ \"AccountCreationFailed\" ]</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Configures inspection of the response header. This is part of the <code>ResponseInspection</code> configuration for <code>AWSManagedRulesATPRuleSet</code> and <code>AWSManagedRulesACFPRuleSet</code>. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note>"
      },
      "ResponseInspectionHeaderName": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 200
      },
      "ResponseInspectionHeaderSuccessValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SuccessValue"
        },
        "minItems": 1,
        "maxItems": 3
      },
      "SuccessValue": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 100
      },
      "ResponseInspectionHeaderFailureValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FailureValue"
        },
        "minItems": 1,
        "maxItems": 3
      },
      "FailureValue": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 100
      },
      "ResponseInspectionBodyContains": {
        "type": "object",
        "required": [
          "SuccessStrings",
          "FailureStrings"
        ],
        "properties": {
          "SuccessStrings": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionBodyContainsSuccessStrings"
              },
              {
                "description": "<p>Strings in the body of the response that indicate a successful login or account creation attempt. To be counted as a success, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. </p> <p>JSON examples: <code>\"SuccessStrings\": [ \"Login successful\" ]</code> and <code>\"SuccessStrings\": [ \"Account creation successful\", \"Welcome to our site!\" ]</code> </p>"
              }
            ]
          },
          "FailureStrings": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionBodyContainsFailureStrings"
              },
              {
                "description": "<p>Strings in the body of the response that indicate a failed login or account creation attempt. To be counted as a failure, the string can be anywhere in the body and must be an exact match, including case. Each string must be unique among the success and failure strings. </p> <p>JSON example: <code>\"FailureStrings\": [ \"Request failed\" ]</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Configures inspection of the response body. WAF can inspect the first 65,536 bytes (64 KB) of the response body. This is part of the <code>ResponseInspection</code> configuration for <code>AWSManagedRulesATPRuleSet</code> and <code>AWSManagedRulesACFPRuleSet</code>. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note>"
      },
      "ResponseInspectionBodyContainsSuccessStrings": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SuccessValue"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "ResponseInspectionBodyContainsFailureStrings": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FailureValue"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "ResponseInspectionJson": {
        "type": "object",
        "required": [
          "Identifier",
          "SuccessValues",
          "FailureValues"
        ],
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldIdentifier"
              },
              {
                "description": "<p>The identifier for the value to match against in the JSON. The identifier must be an exact match, including case.</p> <p>JSON examples: <code>\"Identifier\": [ \"/login/success\" ]</code> and <code>\"Identifier\": [ \"/sign-up/success\" ]</code> </p>"
              }
            ]
          },
          "SuccessValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionJsonSuccessValues"
              },
              {
                "description": "<p>Values for the specified identifier in the response JSON that indicate a successful login or account creation attempt. To be counted as a success, the value must be an exact match, including case. Each value must be unique among the success and failure values. </p> <p>JSON example: <code>\"SuccessValues\": [ \"True\", \"Succeeded\" ]</code> </p>"
              }
            ]
          },
          "FailureValues": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspectionJsonFailureValues"
              },
              {
                "description": "<p>Values for the specified identifier in the response JSON that indicate a failed login or account creation attempt. To be counted as a failure, the value must be an exact match, including case. Each value must be unique among the success and failure values. </p> <p>JSON example: <code>\"FailureValues\": [ \"False\", \"Failed\" ]</code> </p>"
              }
            ]
          }
        },
        "description": "<p>Configures inspection of the response JSON. WAF can inspect the first 65,536 bytes (64 KB) of the response JSON. This is part of the <code>ResponseInspection</code> configuration for <code>AWSManagedRulesATPRuleSet</code> and <code>AWSManagedRulesACFPRuleSet</code>. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note>"
      },
      "ResponseInspectionJsonSuccessValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/SuccessValue"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "ResponseInspectionJsonFailureValues": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/FailureValue"
        },
        "minItems": 1,
        "maxItems": 5
      },
      "Boolean": {
        "type": "boolean"
      },
      "AWSManagedRulesACFPRuleSet": {
        "type": "object",
        "required": [
          "CreationPath",
          "RegistrationPagePath",
          "RequestInspection"
        ],
        "properties": {
          "CreationPath": {
            "allOf": [
              {
                "$ref": "#/$defs/CreationPathString"
              },
              {
                "description": "<p>The path of the account creation endpoint for your application. This is the page on your website that accepts the completed registration form for a new user. This page must accept <code>POST</code> requests.</p> <p>For example, for the URL <code>https://example.com/web/signup</code>, you would provide the path <code>/web/signup</code>.</p>"
              }
            ]
          },
          "RegistrationPagePath": {
            "allOf": [
              {
                "$ref": "#/$defs/RegistrationPagePathString"
              },
              {
                "description": "<p>The path of the account registration endpoint for your application. This is the page on your website that presents the registration form to new users. </p> <note> <p>This page must accept <code>GET</code> text/html requests.</p> </note> <p>For example, for the URL <code>https://example.com/web/register</code>, you would provide the path <code>/web/register</code>.</p>"
              }
            ]
          },
          "RequestInspection": {
            "allOf": [
              {
                "$ref": "#/$defs/RequestInspectionACFP"
              },
              {
                "description": "The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. "
              }
            ]
          },
          "ResponseInspection": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseInspection"
              },
              {
                "description": "<p>The criteria for inspecting responses to account creation requests, used by the ACFP rule group to track account creation success rates. </p> <note> <p>Response inspection is available only in web ACLs that protect Amazon CloudFront distributions.</p> </note> <p>The ACFP rule group evaluates the responses that your protected resources send back to client account creation attempts, keeping count of successful and failed attempts from each IP address and client session. Using this information, the rule group labels and mitigates requests from client sessions and IP addresses that have had too many successful account creation attempts in a short amount of time. </p>"
              }
            ]
          },
          "EnableRegexInPath": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Allow the use of regular expressions in the registration page path and the account creation path. "
              }
            ]
          }
        },
        "description": "Details for your use of the account creation fraud prevention managed rule group, <code>AWSManagedRulesACFPRuleSet</code>. This configuration is used in <code>ManagedRuleGroupConfig</code>. "
      },
      "CreationPathString": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 256
      },
      "RegistrationPagePathString": {
        "type": "string",
        "pattern": ".*\\S.*",
        "minLength": 1,
        "maxLength": 256
      },
      "RequestInspectionACFP": {
        "type": "object",
        "required": [
          "PayloadType"
        ],
        "properties": {
          "PayloadType": {
            "allOf": [
              {
                "$ref": "#/$defs/PayloadType"
              },
              {
                "description": "The payload type for your account creation endpoint, either JSON or form encoded."
              }
            ]
          },
          "UsernameField": {
            "allOf": [
              {
                "$ref": "#/$defs/UsernameField"
              },
              {
                "description": "<p>The name of the field in the request payload that contains your customer's username. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"username\": \"THE_USERNAME\" } }</code>, the username field specification is <code>/form/username</code>. </p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>username1</code>, the username field specification is <code>username1</code> </p> </li> </ul>"
              }
            ]
          },
          "PasswordField": {
            "allOf": [
              {
                "$ref": "#/$defs/PasswordField"
              },
              {
                "description": "<p>The name of the field in the request payload that contains your customer's password. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"password\": \"THE_PASSWORD\" } }</code>, the password field specification is <code>/form/password</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>password1</code>, the password field specification is <code>password1</code>.</p> </li> </ul>"
              }
            ]
          },
          "EmailField": {
            "allOf": [
              {
                "$ref": "#/$defs/EmailField"
              },
              {
                "description": "<p>The name of the field in the request payload that contains your customer's email. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"email\": \"THE_EMAIL\" } }</code>, the email field specification is <code>/form/email</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li> </ul>"
              }
            ]
          },
          "PhoneNumberFields": {
            "allOf": [
              {
                "$ref": "#/$defs/PhoneNumberFields"
              },
              {
                "description": "<p>The names of the fields in the request payload that contain your customer's primary phone number. </p> <p>Order the phone number fields in the array exactly as they are ordered in the request payload. </p> <p>How you specify the phone number fields depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"primaryphoneline1\": \"THE_PHONE1\", \"primaryphoneline2\": \"THE_PHONE2\", \"primaryphoneline3\": \"THE_PHONE3\" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li> </ul>"
              }
            ]
          },
          "AddressFields": {
            "allOf": [
              {
                "$ref": "#/$defs/AddressFields"
              },
              {
                "description": "<p>The names of the fields in the request payload that contain your customer's primary physical address. </p> <p>Order the address fields in the array exactly as they are ordered in the request payload. </p> <p>How you specify the address fields depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"primaryaddressline1\": \"THE_ADDRESS1\", \"primaryaddressline2\": \"THE_ADDRESS2\", \"primaryaddressline3\": \"THE_ADDRESS3\" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The criteria for inspecting account creation requests, used by the ACFP rule group to validate and track account creation attempts. </p> <p>This is part of the <code>AWSManagedRulesACFPRuleSet</code> configuration in <code>ManagedRuleGroupConfig</code>.</p> <p>In these settings, you specify how your application accepts account creation attempts by providing the request payload type and the names of the fields within the request body where the username, password, email, and primary address and phone number fields are provided. </p>"
      },
      "EmailField": {
        "type": "object",
        "required": [
          "Identifier"
        ],
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldIdentifier"
              },
              {
                "description": "<p>The name of the email field. </p> <p>How you specify this depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field name in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"email\": \"THE_EMAIL\" } }</code>, the email field specification is <code>/form/email</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with the input element named <code>email1</code>, the email field specification is <code>email1</code>.</p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The name of the field in the request payload that contains your customer's email. </p> <p>This data type is used in the <code>RequestInspectionACFP</code> data type. </p>"
      },
      "PhoneNumberFields": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/PhoneNumberField"
        }
      },
      "PhoneNumberField": {
        "type": "object",
        "required": [
          "Identifier"
        ],
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldIdentifier"
              },
              {
                "description": "<p>The name of a single primary phone number field. </p> <p>How you specify the phone number fields depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"primaryphoneline1\": \"THE_PHONE1\", \"primaryphoneline2\": \"THE_PHONE2\", \"primaryphoneline3\": \"THE_PHONE3\" } }</code>, the phone number field identifiers are <code>/form/primaryphoneline1</code>, <code>/form/primaryphoneline2</code>, and <code>/form/primaryphoneline3</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>, the phone number field identifiers are <code>primaryphoneline1</code>, <code>primaryphoneline2</code>, and <code>primaryphoneline3</code>. </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The name of a field in the request payload that contains part or all of your customer's primary phone number. </p> <p>This data type is used in the <code>RequestInspectionACFP</code> data type. </p>"
      },
      "AddressFields": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/AddressField"
        }
      },
      "AddressField": {
        "type": "object",
        "required": [
          "Identifier"
        ],
        "properties": {
          "Identifier": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldIdentifier"
              },
              {
                "description": "<p>The name of a single primary address field. </p> <p>How you specify the address fields depends on the request inspection payload type.</p> <ul> <li> <p>For JSON payloads, specify the field identifiers in JSON pointer syntax. For information about the JSON Pointer syntax, see the Internet Engineering Task Force (IETF) documentation <a href=\"https://tools.ietf.org/html/rfc6901\">JavaScript Object Notation (JSON) Pointer</a>. </p> <p>For example, for the JSON payload <code>{ \"form\": { \"primaryaddressline1\": \"THE_ADDRESS1\", \"primaryaddressline2\": \"THE_ADDRESS2\", \"primaryaddressline3\": \"THE_ADDRESS3\" } }</code>, the address field idenfiers are <code>/form/primaryaddressline1</code>, <code>/form/primaryaddressline2</code>, and <code>/form/primaryaddressline3</code>.</p> </li> <li> <p>For form encoded payload types, use the HTML form names.</p> <p>For example, for an HTML form with input elements named <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>, the address fields identifiers are <code>primaryaddressline1</code>, <code>primaryaddressline2</code>, and <code>primaryaddressline3</code>. </p> </li> </ul>"
              }
            ]
          }
        },
        "description": "<p>The name of a field in the request payload that contains part or all of your customer's primary physical address. </p> <p>This data type is used in the <code>RequestInspectionACFP</code> data type. </p>"
      },
      "LabelMatchStatement": {
        "type": "object",
        "required": [
          "Scope",
          "Key"
        ],
        "properties": {
          "Scope": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelMatchScope"
              },
              {
                "description": "Specify whether you want to match using the label name or just the namespace. "
              }
            ]
          },
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelMatchKey"
              },
              {
                "description": "<p>The string to match against. The setting you provide for this depends on the match statement's <code>Scope</code> setting: </p> <ul> <li> <p>If the <code>Scope</code> indicates <code>LABEL</code>, then this specification must include the name and can include any number of preceding namespace specifications and prefix up to providing the fully qualified label name. </p> </li> <li> <p>If the <code>Scope</code> indicates <code>NAMESPACE</code>, then this specification can include any number of contiguous namespace strings, and can include the entire label namespace prefix from the rule group or web ACL where the label originates.</p> </li> </ul> <p>Labels are case sensitive and components of a label must be separated by colon, for example <code>NS1:NS2:name</code>.</p>"
              }
            ]
          }
        },
        "description": "<p>A rule statement to match against labels that have been added to the web request by rules that have already run in the web ACL. </p> <p>The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label. If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. </p>"
      },
      "LabelMatchScope": {
        "type": "string",
        "enum": [
          "LABEL",
          "NAMESPACE"
        ]
      },
      "LabelMatchKey": {
        "type": "string",
        "pattern": "^[0-9A-Za-z_\\-:]+$",
        "minLength": 1,
        "maxLength": 1024
      },
      "RegexMatchStatement": {
        "type": "object",
        "required": [
          "RegexString",
          "FieldToMatch",
          "TextTransformations"
        ],
        "properties": {
          "RegexString": {
            "allOf": [
              {
                "$ref": "#/$defs/RegexPatternString"
              },
              {
                "description": "The string representing the regular expression."
              }
            ]
          },
          "FieldToMatch": {
            "allOf": [
              {
                "$ref": "#/$defs/FieldToMatch"
              },
              {
                "description": "The part of the web request that you want WAF to inspect. "
              }
            ]
          },
          "TextTransformations": {
            "allOf": [
              {
                "$ref": "#/$defs/TextTransformations"
              },
              {
                "description": "Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. Text transformations are used in rule match statements, to transform the <code>FieldToMatch</code> request component before inspecting it, and they're used in rate-based rule statements, to transform request components before using them as custom aggregation keys. If you specify one or more transformations to apply, WAF performs all transformations on the specified content, starting from the lowest priority setting, and then uses the component contents. "
              }
            ]
          }
        },
        "description": "A rule statement used to search web request components for a match against a single regular expression. "
      },
      "RegexPatternString": {
        "type": "string",
        "pattern": ".*",
        "minLength": 1,
        "maxLength": 512
      },
      "OverrideAction": {
        "type": "object",
        "properties": {
          "Count": {
            "allOf": [
              {
                "$ref": "#/$defs/CountAction"
              },
              {
                "description": "<p>Override the rule group evaluation result to count only. </p> <note> <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p> </note>"
              }
            ]
          },
          "None": {
            "allOf": [
              {
                "$ref": "#/$defs/NoneAction"
              },
              {
                "description": "Don't override the rule group evaluation result. This is the most common setting."
              }
            ]
          }
        },
        "description": "<p>The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. </p> <p>You can only use this for rule statements that reference a rule group, like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p> <note> <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count matches, do not use this and instead use the rule action override option, with <code>Count</code> action, in your rule group reference statement settings. </p> </note>"
      },
      "NoneAction": {
        "type": "object",
        "properties": {},
        "description": "<p>Specifies that WAF should do nothing. This is used for the <code>OverrideAction</code> setting on a <a>Rule</a> when the rule uses a rule group reference statement. </p> <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p> <p>JSON specification: <code>\"None\": {}</code> </p>"
      },
      "Labels": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Label"
        }
      },
      "Label": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "allOf": [
              {
                "$ref": "#/$defs/LabelName"
              },
              {
                "description": "The label string. "
              }
            ]
          }
        },
        "description": "A single label container. This is used as an element of a label array in multiple contexts, for example, in <code>RuleLabels</code> inside a <a>Rule</a> and in <code>Labels</code> inside a <a>SampledHTTPRequest</a>. "
      },
      "LabelName": {
        "type": "string",
        "pattern": "^[0-9A-Za-z_\\-:]+$",
        "minLength": 1,
        "maxLength": 1024
      },
      "VisibilityConfig": {
        "type": "object",
        "required": [
          "SampledRequestsEnabled",
          "CloudWatchMetricsEnabled",
          "MetricName"
        ],
        "properties": {
          "SampledRequestsEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "Indicates whether WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the WAF console. "
              }
            ]
          },
          "CloudWatchMetricsEnabled": {
            "allOf": [
              {
                "$ref": "#/$defs/Boolean"
              },
              {
                "description": "<p>Indicates whether the associated resource sends metrics to Amazon CloudWatch. For the list of available metrics, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics\">WAF Metrics</a> in the <i>WAF Developer Guide</i>.</p> <p>For web ACLs, the metrics are for web requests that have the web ACL default action applied. WAF applies the default action to web requests that pass the inspection of all rules in the web ACL without being either allowed or blocked. For more information, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-default-action.html\">The web ACL default action</a> in the <i>WAF Developer Guide</i>.</p>"
              }
            ]
          },
          "MetricName": {
            "allOf": [
              {
                "$ref": "#/$defs/MetricName"
              },
              {
                "description": "A name of the Amazon CloudWatch metric dimension. The name can contain only the characters: A-Z, a-z, 0-9, - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't contain whitespace or metric names that are reserved for WAF, for example <code>All</code> and <code>Default_Action</code>. "
              }
            ]
          }
        },
        "description": "Defines and enables Amazon CloudWatch metrics and web request sample collection. "
      },
      "MetricName": {
        "type": "string",
        "pattern": "^[\\w#:\\.\\-/]+$",
        "minLength": 1,
        "maxLength": 255
      },
      "CaptchaConfig": {
        "type": "object",
        "properties": {
          "ImmunityTimeProperty": {
            "allOf": [
              {
                "$ref": "#/$defs/ImmunityTimeProperty"
              },
              {
                "description": "Determines how long a <code>CAPTCHA</code> timestamp in the token remains valid after the client successfully solves a <code>CAPTCHA</code> puzzle. "
              }
            ]
          }
        },
        "description": "Specifies how WAF should handle <code>CAPTCHA</code> evaluations. This is available at the web ACL level and in each rule. "
      },
      "ImmunityTimeProperty": {
        "type": "object",
        "required": [
          "ImmunityTime"
        ],
        "properties": {
          "ImmunityTime": {
            "allOf": [
              {
                "$ref": "#/$defs/TimeWindowSecond"
              },
              {
                "description": "<p>The amount of time, in seconds, that a <code>CAPTCHA</code> or challenge timestamp is considered valid by WAF. The default setting is 300. </p> <p>For the Challenge action, the minimum setting is 300. </p>"
              }
            ]
          }
        },
        "description": "Used for CAPTCHA and challenge token settings. Determines how long a <code>CAPTCHA</code> or challenge timestamp remains valid after WAF updates it for a successful <code>CAPTCHA</code> or challenge response. "
      },
      "TimeWindowSecond": {
        "type": "integer",
        "minimum": 60,
        "maximum": 259200
      },
      "ChallengeConfig": {
        "type": "object",
        "properties": {
          "ImmunityTimeProperty": {
            "allOf": [
              {
                "$ref": "#/$defs/ImmunityTimeProperty"
              },
              {
                "description": "Determines how long a challenge timestamp in the token remains valid after the client successfully responds to a challenge. "
              }
            ]
          }
        },
        "description": "Specifies how WAF should handle <code>Challenge</code> evaluations. This is available at the web ACL level and in each rule. "
      },
      "TagList": {
        "type": "array",
        "items": {
          "$ref": "#/$defs/Tag"
        },
        "minItems": 1
      },
      "Tag": {
        "type": "object",
        "required": [
          "Key",
          "Value"
        ],
        "properties": {
          "Key": {
            "allOf": [
              {
                "$ref": "#/$defs/TagKey"
              },
              {
                "description": "Part of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as \"customer.\" Tag keys are case-sensitive."
              }
            ]
          },
          "Value": {
            "allOf": [
              {
                "$ref": "#/$defs/TagValue"
              },
              {
                "description": "Part of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as \"companyA\" or \"companyB.\" Tag values are case-sensitive."
              }
            ]
          }
        },
        "description": "<p>A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to categorize and manage your resources, for purposes like billing or other management. Typically, the tag key represents a category, such as \"environment\", and the tag value represents a specific value within that category, such as \"test,\" \"development,\" or \"production\". Or you might set the tag key to \"customer\" and the value to the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p> <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF console. </p>"
      },
      "TagKey": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 1,
        "maxLength": 128
      },
      "TagValue": {
        "type": "string",
        "pattern": "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$",
        "minLength": 0,
        "maxLength": 256
      },
      "CustomResponseBodies": {
        "type": "object",
        "minProperties": 1,
        "additionalProperties": {
          "$ref": "#/$defs/CustomResponseBody"
        }
      },
      "CustomResponseBody": {
        "type": "object",
        "required": [
          "ContentType",
          "Content"
        ],
        "properties": {
          "ContentType": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseContentType"
              },
              {
                "description": "The type of content in the payload that you are defining in the <code>Content</code> string."
              }
            ]
          },
          "Content": {
            "allOf": [
              {
                "$ref": "#/$defs/ResponseContent"
              },
              {
                "description": "<p>The payload of the custom response. </p> <p>You can use JSON escape strings in JSON content. To do this, you must specify JSON content in the <code>ContentType</code> setting. </p> <p>For information about the limits on count and size for custom request and response settings, see <a href=\"https://docs.aws.amazon.com/waf/latest/developerguide/limits.html\">WAF quotas</a> in the <i>WAF Developer Guide</i>. </p>"
              }
            ]
          }
        },
        "description": "The response body to use in a custom response to a web request. This is referenced by key from <a>CustomResponse</a> <code>CustomResponseBodyKey</code>."
      },
      "ResponseContentType": {
        "type": "string",
        "enum": [
          "TEXT_PLAIN",
          "TEXT_HTML",
          "APPLICATION_JSON"
        ]
      },
      "ResponseContent": {
        "type": "string",
        "pattern": "[\\s\\S]*",
        "minLength": 1,
        "maxLength": 10240
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://wafv2.us-east-1.amazonaws.com/#X-Amz-Target=AWSWAF_20190729.CreateRuleGroup"
    },
    "headers": {
      "X-Amz-Target": {
        "$": "X-Amz-Target"
      },
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**Summary**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "488": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "489": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "490": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
