{
  "name": "CreateMultipartReadSetUpload",
  "description": " Begins a multipart read set upload. ",
  "parameters": {
    "type": "object",
    "properties": {
      "sequenceStoreId": {
        "type": "string",
        "pattern": "[0-9]+",
        "minLength": 10,
        "maxLength": 36,
        "description": " The sequence store ID for the store that is the destination of the multipart uploads. "
      },
      "X-Amz-Content-Sha256": {
        "type": "string"
      },
      "X-Amz-Date": {
        "type": "string"
      },
      "X-Amz-Algorithm": {
        "type": "string"
      },
      "X-Amz-Credential": {
        "type": "string"
      },
      "X-Amz-Security-Token": {
        "type": "string"
      },
      "X-Amz-Signature": {
        "type": "string"
      },
      "X-Amz-SignedHeaders": {
        "type": "string"
      },
      "body": {
        "type": "object",
        "required": [
          "sourceFileType",
          "subjectId",
          "sampleId",
          "referenceArn",
          "name"
        ],
        "properties": {
          "clientToken": {
            "description": " An idempotency token that can be used to avoid triggering multiple multipart uploads. ",
            "type": "string",
            "pattern": "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+",
            "minLength": 1,
            "maxLength": 127
          },
          "sourceFileType": {
            "description": " The type of file being uploaded. ",
            "type": "string",
            "enum": [
              "FASTQ",
              "BAM",
              "CRAM"
            ]
          },
          "subjectId": {
            "description": " The source's subject ID. ",
            "type": "string",
            "pattern": "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+",
            "minLength": 1,
            "maxLength": 127
          },
          "sampleId": {
            "description": " The source's sample ID. ",
            "type": "string",
            "pattern": "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+",
            "minLength": 1,
            "maxLength": 127
          },
          "generatedFrom": {
            "description": " Where the source originated. ",
            "type": "string",
            "pattern": "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+",
            "minLength": 1,
            "maxLength": 127
          },
          "referenceArn": {
            "description": " The ARN of the reference. ",
            "type": "string",
            "pattern": "arn:.+",
            "minLength": 1,
            "maxLength": 127
          },
          "name": {
            "description": " The name of the read set. ",
            "type": "string",
            "pattern": "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+",
            "minLength": 1,
            "maxLength": 127
          },
          "description": {
            "description": " The description of the read set. ",
            "type": "string",
            "pattern": "[\\p{L}||\\p{M}||\\p{Z}||\\p{S}||\\p{N}||\\p{P}]+",
            "minLength": 1,
            "maxLength": 255
          },
          "tags": {
            "description": " Any tags to add to the read set. ",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/$defs/TagValue"
            }
          }
        }
      }
    },
    "required": [
      "sequenceStoreId",
      "body"
    ],
    "$defs": {
      "TagValue": {
        "type": "string",
        "minLength": 0,
        "maxLength": 256
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "http://omics.us-east-1.amazonaws.com/sequencestore/{sequenceStoreId}/upload"
    },
    "headers": {
      "X-Amz-Content-Sha256": {
        "$": "X-Amz-Content-Sha256"
      },
      "X-Amz-Date": {
        "$": "X-Amz-Date"
      },
      "X-Amz-Algorithm": {
        "$": "X-Amz-Algorithm"
      },
      "X-Amz-Credential": {
        "$": "X-Amz-Credential"
      },
      "X-Amz-Security-Token": {
        "$": "X-Amz-Security-Token"
      },
      "X-Amz-Signature": {
        "$": "X-Amz-Signature"
      },
      "X-Amz-SignedHeaders": {
        "$": "X-Amz-SignedHeaders"
      }
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**sequenceStoreId**",
            "**uploadId**",
            "**sourceFileType**",
            "**subjectId**",
            "**sampleId**",
            "**generatedFrom**",
            "**referenceArn**",
            "**name**",
            "**description**",
            "**tags**",
            "**creationTime**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "480": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "481": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "482": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "483": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "484": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "485": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "486": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    },
    "487": {
      "$encode": "markdown",
      "$lang": "json",
      "$code": {
        "$encode": "json",
        "$indent": true,
        "$content": {
          "$": "$.body"
        }
      }
    }
  }
}
