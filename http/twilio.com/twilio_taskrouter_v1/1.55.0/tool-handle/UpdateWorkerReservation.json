{
  "name": "UpdateWorkerReservation",
  "description": "",
  "parameters": {
    "type": "object",
    "properties": {
      "WorkspaceSid": {
        "maxLength": 34,
        "minLength": 34,
        "pattern": "^WS[0-9a-fA-F]{32}$",
        "type": "string",
        "description": "The SID of the Workspace with the WorkerReservation resources to update."
      },
      "WorkerSid": {
        "maxLength": 34,
        "minLength": 34,
        "pattern": "^WK[0-9a-fA-F]{32}$",
        "type": "string",
        "description": "The SID of the reserved Worker resource with the WorkerReservation resources to update."
      },
      "Sid": {
        "maxLength": 34,
        "minLength": 34,
        "pattern": "^WR[0-9a-fA-F]{32}$",
        "type": "string",
        "description": "The SID of the WorkerReservation resource to update."
      },
      "If-Match": {
        "type": "string",
        "description": "The If-Match HTTP request header"
      },
      "body": {
        "properties": {
          "Beep": {
            "description": "Whether to play a notification beep when the participant joins or when to play a beep. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.",
            "type": "string"
          },
          "BeepOnCustomerEntrance": {
            "description": "Whether to play a notification beep when the customer joins.",
            "type": "boolean"
          },
          "CallAccept": {
            "description": "Whether to accept a reservation when executing a Call instruction.",
            "type": "boolean"
          },
          "CallFrom": {
            "description": "The Caller ID of the outbound call when executing a Call instruction.",
            "type": "string"
          },
          "CallRecord": {
            "description": "Whether to record both legs of a call when executing a Call instruction.",
            "type": "string"
          },
          "CallStatusCallbackUrl": {
            "description": "The URL to call for the completed call event when executing a Call instruction.",
            "format": "uri",
            "type": "string"
          },
          "CallTimeout": {
            "description": "The timeout for a call when executing a Call instruction.",
            "type": "integer"
          },
          "CallTo": {
            "description": "The contact URI of the worker when executing a Call instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.",
            "type": "string"
          },
          "CallUrl": {
            "description": "TwiML URI executed on answering the worker's leg as a result of the Call instruction.",
            "format": "uri",
            "type": "string"
          },
          "ConferenceRecord": {
            "description": "Whether to record the conference the participant is joining or when to record the conference. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.",
            "type": "string"
          },
          "ConferenceRecordingStatusCallback": {
            "description": "The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.",
            "format": "uri",
            "type": "string"
          },
          "ConferenceRecordingStatusCallbackMethod": {
            "description": "The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "ConferenceStatusCallback": {
            "description": "The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.",
            "format": "uri",
            "type": "string"
          },
          "ConferenceStatusCallbackEvent": {
            "description": "The conference status events that we will send to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `speaker`.",
            "items": {
              "$ref": "#/$defs/worker_reservation_enum_conference_event"
            },
            "type": "array"
          },
          "ConferenceStatusCallbackMethod": {
            "description": "The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "ConferenceTrim": {
            "description": "Whether to trim leading and trailing silence from your recorded conference audio files. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.",
            "type": "string"
          },
          "DequeueFrom": {
            "description": "The caller ID of the call to the worker when executing a Dequeue instruction.",
            "type": "string"
          },
          "DequeuePostWorkActivitySid": {
            "description": "The SID of the Activity resource to start after executing a Dequeue instruction.",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^WA[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "DequeueRecord": {
            "description": "Whether to record both legs of a call when executing a Dequeue instruction or which leg to record.",
            "type": "string"
          },
          "DequeueStatusCallbackEvent": {
            "description": "The call progress events sent via webhooks as a result of a Dequeue instruction.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "DequeueStatusCallbackUrl": {
            "description": "The callback URL for completed call event when executing a Dequeue instruction.",
            "format": "uri",
            "type": "string"
          },
          "DequeueTimeout": {
            "description": "The timeout for call when executing a Dequeue instruction.",
            "type": "integer"
          },
          "DequeueTo": {
            "description": "The contact URI of the worker when executing a Dequeue instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.",
            "type": "string"
          },
          "EarlyMedia": {
            "description": "Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. The default is `true`.",
            "type": "boolean"
          },
          "EndConferenceOnCustomerExit": {
            "description": "Whether to end the conference when the customer leaves.",
            "type": "boolean"
          },
          "EndConferenceOnExit": {
            "description": "Whether to end the conference when the agent leaves.",
            "type": "boolean"
          },
          "From": {
            "description": "The caller ID of the call to the worker when executing a Conference instruction.",
            "type": "string"
          },
          "Instruction": {
            "description": "The assignment instruction for the reservation.",
            "type": "string"
          },
          "JitterBufferSize": {
            "description": "The jitter buffer size for conference. Can be: `small`, `medium`, `large`, `off`.",
            "type": "string"
          },
          "MaxParticipants": {
            "description": "The maximum number of participants allowed in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.",
            "type": "integer"
          },
          "Muted": {
            "description": "Whether the agent is muted in the conference. Defaults to `false`.",
            "type": "boolean"
          },
          "PostWorkActivitySid": {
            "description": "The new worker activity SID after executing a Conference instruction.",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^WA[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "Record": {
            "description": "Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.",
            "type": "boolean"
          },
          "RecordingChannels": {
            "description": "The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.",
            "type": "string"
          },
          "RecordingStatusCallback": {
            "description": "The URL that we should call using the `recording_status_callback_method` when the recording status changes.",
            "format": "uri",
            "type": "string"
          },
          "RecordingStatusCallbackMethod": {
            "description": "The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "RedirectAccept": {
            "description": "Whether the reservation should be accepted when executing a Redirect instruction.",
            "type": "boolean"
          },
          "RedirectCallSid": {
            "description": "The Call SID of the call parked in the queue when executing a Redirect instruction.",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^CA[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "RedirectUrl": {
            "description": "TwiML URI to redirect the call to when executing the Redirect instruction.",
            "format": "uri",
            "type": "string"
          },
          "Region": {
            "description": "The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.",
            "type": "string"
          },
          "ReservationStatus": {
            "$ref": "#/$defs/worker_reservation_enum_status"
          },
          "SipAuthPassword": {
            "description": "The SIP password for authentication.",
            "type": "string"
          },
          "SipAuthUsername": {
            "description": "The SIP username used for authentication.",
            "type": "string"
          },
          "StartConferenceOnEnter": {
            "description": "Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.",
            "type": "boolean"
          },
          "StatusCallback": {
            "description": "The URL we should call using the `status_callback_method` to send status information to your application.",
            "format": "uri",
            "type": "string"
          },
          "StatusCallbackEvent": {
            "description": "The call progress events that we will send to `status_callback`. Can be: `initiated`, `ringing`, `answered`, or `completed`.",
            "items": {
              "$ref": "#/$defs/worker_reservation_enum_call_status"
            },
            "type": "array"
          },
          "StatusCallbackMethod": {
            "description": "The HTTP method we should use to call `status_callback`. Can be: `POST` or `GET` and the default is `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "Timeout": {
            "description": "The timeout for a call when executing a Conference instruction.",
            "type": "integer"
          },
          "To": {
            "description": "The Contact URI of the worker when executing a Conference instruction. Can be the URI of the Twilio Client, the SIP URI for Programmable SIP, or the [E.164](https://www.twilio.com/docs/glossary/what-e164) formatted phone number, depending on the destination.",
            "type": "string"
          },
          "WaitMethod": {
            "description": "The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "WaitUrl": {
            "description": "The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).",
            "format": "uri",
            "type": "string"
          },
          "WorkerActivitySid": {
            "description": "The new worker activity SID if rejecting a reservation.",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^WA[0-9a-fA-F]{32}$",
            "type": "string"
          }
        },
        "title": "UpdateWorkerReservationRequest",
        "type": "object"
      }
    },
    "required": [
      "WorkspaceSid",
      "WorkerSid",
      "Sid"
    ],
    "$defs": {
      "worker_reservation_enum_conference_event": {
        "enum": [
          "start",
          "end",
          "join",
          "leave",
          "mute",
          "hold",
          "speaker"
        ],
        "type": "string"
      },
      "worker_reservation_enum_status": {
        "enum": [
          "pending",
          "accepted",
          "rejected",
          "timeout",
          "canceled",
          "rescinded",
          "wrapping",
          "completed"
        ],
        "type": "string"
      },
      "worker_reservation_enum_call_status": {
        "enum": [
          "initiated",
          "ringing",
          "answered",
          "completed"
        ],
        "type": "string"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://taskrouter.twilio.com/v1/Workspaces/{WorkspaceSid}/Workers/{WorkerSid}/Reservations/{Sid}"
    },
    "headers": {
      "If-Match": {
        "$": "If-Match"
      }
    },
    "body": {
      "$": "body",
      "encode": "urlencoded"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**account_sid**: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the WorkerReservation resource.",
            "**date_created**: The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
            "**date_updated**: The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.",
            "**links**: The URLs of related resources.",
            "**reservation_status**",
            "**sid**: The unique string that we created to identify the WorkerReservation resource.",
            "**task_sid**: The SID of the reserved Task resource.",
            "**url**: The absolute URL of the WorkerReservation resource.",
            "**worker_name**: The `friendly_name` of the Worker that is reserved.",
            "**worker_sid**: The SID of the reserved Worker resource.",
            "**workspace_sid**: The SID of the Workspace that this worker is contained within."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
