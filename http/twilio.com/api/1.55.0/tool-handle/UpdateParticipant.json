{
  "name": "UpdateParticipant",
  "description": "Update the properties of the participant",
  "parameters": {
    "type": "object",
    "properties": {
      "AccountSid": {
        "maxLength": 34,
        "minLength": 34,
        "pattern": "^AC[0-9a-fA-F]{32}$",
        "type": "string",
        "description": "The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update."
      },
      "ConferenceSid": {
        "maxLength": 34,
        "minLength": 34,
        "pattern": "^CF[0-9a-fA-F]{32}$",
        "type": "string",
        "description": "The SID of the conference with the participant to update."
      },
      "CallSid": {
        "type": "string",
        "description": "The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20."
      },
      "body": {
        "properties": {
          "AnnounceMethod": {
            "description": "The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "AnnounceUrl": {
            "description": "The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.",
            "format": "uri",
            "type": "string"
          },
          "BeepOnExit": {
            "description": "Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.",
            "type": "boolean"
          },
          "CallSidToCoach": {
            "description": "The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^CA[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "Coaching": {
            "description": "Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.",
            "type": "boolean"
          },
          "EndConferenceOnExit": {
            "description": "Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.",
            "type": "boolean"
          },
          "Hold": {
            "description": "Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.",
            "type": "boolean"
          },
          "HoldMethod": {
            "description": "The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "HoldUrl": {
            "description": "The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.",
            "format": "uri",
            "type": "string"
          },
          "Muted": {
            "description": "Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.",
            "type": "boolean"
          },
          "WaitMethod": {
            "description": "The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "WaitUrl": {
            "description": "The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).",
            "format": "uri",
            "type": "string"
          }
        },
        "title": "UpdateParticipantRequest",
        "type": "object"
      }
    },
    "required": [
      "AccountSid",
      "ConferenceSid",
      "CallSid"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.twilio.com/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json"
    },
    "body": {
      "$": "body",
      "encode": "urlencoded"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**account_sid**: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource.",
            "**call_sid**: The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with.",
            "**call_sid_to_coach**: The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.",
            "**coaching**: Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.",
            "**conference_sid**: The SID of the conference the participant is in.",
            "**date_created**: The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
            "**date_updated**: The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
            "**end_conference_on_exit**: Whether the conference ends when the participant leaves. Can be: `true` or `false` and the default is `false`. If `true`, the conference ends and all other participants drop out when the participant leaves.",
            "**hold**: Whether the participant is on hold. Can be `true` or `false`.",
            "**label**: The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant.",
            "**muted**: Whether the participant is muted. Can be `true` or `false`.",
            "**start_conference_on_enter**: Whether the conference starts when the participant joins the conference, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.",
            "**status**",
            "**uri**: The URI of the resource, relative to `https://api.twilio.com`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
