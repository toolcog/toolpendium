{
  "name": "CreateParticipant",
  "description": "",
  "parameters": {
    "type": "object",
    "properties": {
      "AccountSid": {
        "maxLength": 34,
        "minLength": 34,
        "pattern": "^AC[0-9a-fA-F]{32}$",
        "type": "string",
        "description": "The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource."
      },
      "ConferenceSid": {
        "type": "string",
        "description": "The SID of the participant's conference."
      },
      "body": {
        "properties": {
          "AmdStatusCallback": {
            "description": "The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.",
            "format": "uri",
            "type": "string"
          },
          "AmdStatusCallbackMethod": {
            "description": "The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "Beep": {
            "description": "Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.",
            "type": "string"
          },
          "Byoc": {
            "description": "The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^BY[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "CallReason": {
            "description": "The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)",
            "type": "string"
          },
          "CallSidToCoach": {
            "description": "The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.",
            "maxLength": 34,
            "minLength": 34,
            "pattern": "^CA[0-9a-fA-F]{32}$",
            "type": "string"
          },
          "CallToken": {
            "description": "A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.",
            "type": "string"
          },
          "CallerId": {
            "description": "The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.",
            "type": "string"
          },
          "Coaching": {
            "description": "Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.",
            "type": "boolean"
          },
          "ConferenceRecord": {
            "description": "Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.",
            "type": "string"
          },
          "ConferenceRecordingStatusCallback": {
            "description": "The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.",
            "format": "uri",
            "type": "string"
          },
          "ConferenceRecordingStatusCallbackEvent": {
            "description": "The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ConferenceRecordingStatusCallbackMethod": {
            "description": "The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "ConferenceStatusCallback": {
            "description": "The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.",
            "format": "uri",
            "type": "string"
          },
          "ConferenceStatusCallbackEvent": {
            "description": "The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ConferenceStatusCallbackMethod": {
            "description": "The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "ConferenceTrim": {
            "description": "Whether to trim leading and trailing silence from the conference recording. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.",
            "type": "string"
          },
          "EarlyMedia": {
            "description": "Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.",
            "type": "boolean"
          },
          "EndConferenceOnExit": {
            "description": "Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.",
            "type": "boolean"
          },
          "From": {
            "description": "The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.",
            "format": "endpoint",
            "type": "string"
          },
          "JitterBufferSize": {
            "description": "Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.",
            "type": "string"
          },
          "Label": {
            "description": "A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.",
            "type": "string"
          },
          "MachineDetection": {
            "description": "Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).",
            "type": "string"
          },
          "MachineDetectionSilenceTimeout": {
            "description": "The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.",
            "type": "integer"
          },
          "MachineDetectionSpeechEndThreshold": {
            "description": "The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.",
            "type": "integer"
          },
          "MachineDetectionSpeechThreshold": {
            "description": "The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.",
            "type": "integer"
          },
          "MachineDetectionTimeout": {
            "description": "The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.",
            "type": "integer"
          },
          "MaxParticipants": {
            "description": "The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.",
            "type": "integer"
          },
          "Muted": {
            "description": "Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.",
            "type": "boolean"
          },
          "Record": {
            "description": "Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.",
            "type": "boolean"
          },
          "RecordingChannels": {
            "description": "The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.",
            "type": "string"
          },
          "RecordingStatusCallback": {
            "description": "The URL that we should call using the `recording_status_callback_method` when the recording status changes.",
            "format": "uri",
            "type": "string"
          },
          "RecordingStatusCallbackEvent": {
            "description": "The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "RecordingStatusCallbackMethod": {
            "description": "The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "RecordingTrack": {
            "description": "The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.",
            "type": "string"
          },
          "Region": {
            "description": "The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.",
            "type": "string"
          },
          "SipAuthPassword": {
            "description": "The SIP password for authentication.",
            "type": "string"
          },
          "SipAuthUsername": {
            "description": "The SIP username used for authentication.",
            "type": "string"
          },
          "StartConferenceOnEnter": {
            "description": "Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.",
            "type": "boolean"
          },
          "StatusCallback": {
            "description": "The URL we should call using the `status_callback_method` to send status information to your application.",
            "format": "uri",
            "type": "string"
          },
          "StatusCallbackEvent": {
            "description": "The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "StatusCallbackMethod": {
            "description": "The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "TimeLimit": {
            "description": "The maximum duration of the call in seconds. Constraints depend on account and configuration.",
            "type": "integer"
          },
          "Timeout": {
            "description": "The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.",
            "type": "integer"
          },
          "To": {
            "description": "The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.",
            "format": "endpoint",
            "type": "string"
          },
          "Trim": {
            "description": "Whether to trim any leading and trailing silence from the participant recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.",
            "type": "string"
          },
          "WaitMethod": {
            "description": "The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.",
            "enum": [
              "HEAD",
              "GET",
              "POST",
              "PATCH",
              "PUT",
              "DELETE"
            ],
            "format": "http-method",
            "type": "string"
          },
          "WaitUrl": {
            "description": "The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).",
            "format": "uri",
            "type": "string"
          }
        },
        "required": [
          "From",
          "To"
        ],
        "title": "CreateParticipantRequest",
        "type": "object"
      }
    },
    "required": [
      "AccountSid",
      "ConferenceSid"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://api.twilio.com/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json"
    },
    "body": {
      "$": "body",
      "encode": "urlencoded"
    }
  },
  "responses": {
    "201": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**account_sid**: The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource.",
            "**call_sid**: The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Participant resource is associated with.",
            "**call_sid_to_coach**: The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.",
            "**coaching**: Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.",
            "**conference_sid**: The SID of the conference the participant is in.",
            "**date_created**: The date and time in GMT that the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
            "**date_updated**: The date and time in GMT that the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.",
            "**end_conference_on_exit**: Whether the conference ends when the participant leaves. Can be: `true` or `false` and the default is `false`. If `true`, the conference ends and all other participants drop out when the participant leaves.",
            "**hold**: Whether the participant is on hold. Can be `true` or `false`.",
            "**label**: The user-specified label of this participant, if one was given when the participant was created. This may be used to fetch, update or delete the participant.",
            "**muted**: Whether the participant is muted. Can be `true` or `false`.",
            "**start_conference_on_enter**: Whether the conference starts when the participant joins the conference, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.",
            "**status**",
            "**uri**: The URI of the resource, relative to `https://api.twilio.com`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
