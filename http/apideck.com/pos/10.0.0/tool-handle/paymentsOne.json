{
  "name": "paymentsOne",
  "description": "Get Payment",
  "parameters": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "ID of the record you are acting upon."
      },
      "x-apideck-consumer-id": {
        "type": "string",
        "description": "ID of the consumer which you want to get or push data from"
      },
      "x-apideck-app-id": {
        "type": "string",
        "description": "The ID of your Unify application"
      },
      "x-apideck-service-id": {
        "type": "string",
        "description": "Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API."
      },
      "raw": {
        "default": false,
        "type": "boolean",
        "description": "Include raw response. Mostly used for debugging purposes"
      },
      "fields": {
        "nullable": true,
        "type": "string",
        "description": "The 'fields' parameter allows API users to specify the fields they want to include in the API response. If this parameter is not present, the API will return all available fields. If this parameter is present, only the fields specified in the comma-separated string will be included in the response. Nested properties can also be requested by using a dot notation. <br /><br />Example: `fields=name,email,addresses.city`<br /><br />In the example above, the response will only include the fields \"name\", \"email\" and \"addresses.city\". If any other fields are available, they will be excluded."
      }
    },
    "required": [
      "id",
      "x-apideck-consumer-id",
      "x-apideck-app-id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://unify.apideck.com/pos/payments/{id}{?raw,fields}"
    },
    "headers": {
      "x-apideck-consumer-id": {
        "$": "x-apideck-consumer-id"
      },
      "x-apideck-app-id": {
        "$": "x-apideck-app-id"
      },
      "x-apideck-service-id": {
        "$": "x-apideck-service-id"
      }
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**data**",
              {
                "$ul": [
                  "**amount**",
                  "**app_fee**: The amount the developer is taking as a fee for facilitating the payment on behalf of the seller.",
                  "**approved**: The initial amount of money approved for this payment.",
                  [
                    "**bank_account**: Card details for this payment. This field is currently not available. Reach out to our team for more info.",
                    {
                      "$ul": [
                        "**account_ownership_type**: The ownership type of the bank account performing the transfer.",
                        [
                          "**ach_details**: ACH-specific details about `BANK_ACCOUNT` type payments with the `transfer_type` of `ACH`.",
                          {
                            "$ul": [
                              "**account_number_suffix**: The last few digits of the bank account number.",
                              "**account_type**: The type of the bank account performing the transfer. The account type can be `CHECKING`,",
                              "**routing_number**: The routing number for the bank account."
                            ]
                          }
                        ],
                        "**bank_name**: The name of the bank associated with the bank account.",
                        "**country**: Country code according to ISO 3166-1 alpha-2.",
                        "**fingerprint**: Uniquely identifies the bank account for this seller and can be used",
                        "**statement_description**: The statement description as sent to the bank.",
                        "**transfer_type**: The type of the bank transfer. The type can be `ACH` or `UNKNOWN`."
                      ]
                    }
                  ],
                  [
                    "**card_details**",
                    {
                      "$ul": [
                        [
                          "**card**: A card's non-confidential details.",
                          {
                            "$ul": [
                              [
                                "**billing_address**",
                                {
                                  "$ul": [
                                    "**city**: Name of city.",
                                    "**contact_name**: Name of the contact person at the address",
                                    "**country**: country code according to ISO 3166-1 alpha-2.",
                                    "**county**: Address field that holds a sublocality, such as a county",
                                    "**email**: Email address of the address",
                                    "**fax**: Fax number of the address",
                                    "**id**: Unique identifier for the address.",
                                    "**latitude**: Latitude of the address",
                                    "**line1**: Line 1 of the address e.g. number, street, suite, apt #, etc.",
                                    "**line2**: Line 2 of the address",
                                    "**line3**: Line 3 of the address",
                                    "**line4**: Line 4 of the address",
                                    "**longitude**: Longitude of the address",
                                    "**name**: The name of the address.",
                                    "**notes**: Additional notes",
                                    "**phone_number**: Phone number of the address",
                                    "**postal_code**: Zip code or equivalent.",
                                    "**row_version**: A binary value used to detect updates to a object and prevent data conflicts. It is incremented each time an update is made to the object.",
                                    "**salutation**: Salutation of the contact person at the address",
                                    "**state**: Name of state",
                                    "**street_number**: Street number",
                                    "**string**: The address string. Some APIs don't provide structured address data.",
                                    "**type**: The type of address.",
                                    "**website**: Website of the address"
                                  ]
                                }
                              ],
                              "**bin**: The first six digits of the card number, known as the Bank Identification Number (BIN).",
                              "**card_brand**: The first six digits of the card number, known as the Bank Identification Number (BIN).",
                              "**card_type**",
                              "**cardholder_name**",
                              "**customer_id**",
                              "**enabled**: Indicates whether or not a card can be used for payments.",
                              "**exp_month**: The expiration month of the associated card as an integer between 1 and 12.",
                              "**exp_year**: The four-digit year of the card's expiration date.",
                              "**fingerprint**",
                              "**id**: A unique identifier for an object.",
                              "**last_4**",
                              "**merchant_id**",
                              "**prepaid_type**",
                              "**reference_id**: An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.",
                              "**version**"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**cash**: Cash details for this payment",
                    {
                      "$ul": [
                        "**amount**: The amount of cash given by the customer.",
                        "**charge_back_amount**: The amount of change due back to the buyer. For Square: this read-only field is calculated from the amount_money and buyer_supplied_money fields."
                      ]
                    }
                  ],
                  "**change_back_cash_amount**",
                  "**created_at**: The date and time when the object was created.",
                  "**created_by**: The user who created the object.",
                  "**currency**: Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).",
                  "**custom_mappings**: When custom mappings are configured on the resource, the result is included here.",
                  "**customer_id**",
                  "**device_id**",
                  "**employee_id**",
                  [
                    "**external_details**: Details about an external payment.",
                    {
                      "$ul": [
                        "**source**: A description of the external payment source. For example, ",
                        "**source_fee_amount**: The fees paid to the source. The amount minus this field is the net amount seller receives.",
                        "**source_id**: An ID to associate the payment to its originating source.",
                        "**type**: The type of external payment the seller received. It can be one of the following:"
                      ]
                    }
                  ],
                  "**external_payment_id**",
                  "**id**: A unique identifier for an object.",
                  "**idempotency_key**: A value you specify that uniquely identifies this request among requests you have sent.",
                  "**location_id**",
                  "**merchant_id**",
                  "**order_id**",
                  "**processing_fees**",
                  "**refunded**: The initial amount of money approved for this payment.",
                  "**service_charges**: Optional service charges or gratuity tip applied to the order.",
                  "**source**: Source of this payment.",
                  "**source_id**: The ID for the source of funds for this payment. Square-only: This can be a payment token (card nonce) generated by the payment form or a card on file made linked to the customer. if recording a payment that the seller received outside of Square, specify either `CASH` or `EXTERNAL`.",
                  "**status**: Status of this payment.",
                  "**tax**",
                  "**tender_id**",
                  "**tip**",
                  "**total**",
                  "**updated_at**: The date and time when the object was last updated.",
                  "**updated_by**: The user who last updated the object.",
                  [
                    "**wallet**: Wallet details for this payment. This field is currently not available. Reach out to our team for more info.",
                    {
                      "$ul": [
                        "**status**: The status of the wallet payment. The status can be AUTHORIZED, CAPTURED, VOIDED, or FAILED."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**operation**: Operation performed",
            "**resource**: Unified API resource name",
            "**service**: Apideck ID of service provider",
            "**status**: HTTP Response Status",
            "**status_code**: HTTP Response Status Code"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "400": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Contains parameter or domain specific information related to the error and why it occurred.",
            "**error**: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
            "**message**: A human-readable message providing more details about the error.",
            "**ref**: Link to documentation of error type",
            "**status_code**: HTTP status code",
            "**type_name**: The type of error returned"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "401": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Contains parameter or domain specific information related to the error and why it occurred.",
            "**error**: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
            "**message**: A human-readable message providing more details about the error.",
            "**ref**: Link to documentation of error type",
            "**status_code**: HTTP status code",
            "**type_name**: The type of error returned"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "402": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Contains parameter or domain specific information related to the error and why it occurred.",
            "**error**: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
            "**message**: A human-readable message providing more details about the error.",
            "**ref**: Link to documentation of error type",
            "**status_code**: HTTP status code",
            "**type_name**: The type of error returned"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "404": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Contains parameter or domain specific information related to the error and why it occurred.",
            "**error**: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
            "**message**: A human-readable message providing more details about the error.",
            "**ref**: Link to documentation of error type",
            "**status_code**: HTTP status code",
            "**type_name**: The type of error returned"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "422": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Contains parameter or domain specific information related to the error and why it occurred.",
            "**error**: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
            "**message**: A human-readable message providing more details about the error.",
            "**ref**: Link to documentation of error type",
            "**status_code**: HTTP status code",
            "**type_name**: The type of error returned"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**detail**: Contains parameter or domain specific information related to the error and why it occurred.",
            "**error**: Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)",
            "**message**: A human-readable message providing more details about the error.",
            "**ref**: Link to documentation of error type",
            "**status_code**: HTTP status code",
            "**type_name**: The type of error returned"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
