{
  "name": "getVcdHierarchyObjectV1",
  "description": "Retrieve details for the specified object in the vCD hierarchy.",
  "parameters": {
    "type": "object",
    "properties": {
      "id": {
        "type": "string",
        "description": "ID of the vCD hierarchy object."
      }
    },
    "required": [
      "id"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "/api/v1/vcd/hierarchy/{id}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**configuredSlaDomainId**: The ID of the SLA Domain configured directly on the Rubrik object.",
            "**configuredSlaDomainName**: The name of the SLA Domain configured directly on the Rubrik object.",
            "**configuredSlaDomainType**: Specifies whether the SLA Domain is used for protection or retention.",
            "**id**: The ID of the Rubrik object.",
            "**isConfiguredSlaDomainRetentionLocked**: Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.",
            "**name**: The name of the Rubrik object.",
            "**primaryClusterId**: The ID of the cluster that manages the Rubrik object.",
            "**slaLastUpdateTime**: The UTC time when the SLA Domain was last updated.",
            "**effectiveSlaDomainId**: The ID of the SLA Domain that controls the protection of the Rubrik object.",
            "**effectiveSlaDomainName**: The name of the SLA Domain that controls the protection of the Rubrik object.",
            "**effectiveSlaDomainPolarisManagedId**: Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.",
            "**effectiveSlaSourceObjectId**: The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.",
            "**effectiveSlaSourceObjectName**: The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.",
            "**isEffectiveSlaDomainRetentionLocked**: Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.",
            "**retentionSlaDomainId**: The ID of the SLA Domain whose retention policy is in use.",
            "**slaAssignment**: The SLA assignment type. Direct SLA assignment means that a SLA Domain was configured directly on the Rubrik object by the user. Derived SLA assignment means that the Rubrik object inherits an SLA Domain from its parent Rubrik object.",
            "**infraPath**",
            "**isDeleted**: Indicates whether the vCD hierarchy object is deleted.",
            "**isRelic**: Whether this managed object is a relic (an archived snappable with unexpired snapshots).",
            "**slaPath**",
            [
              "**connectionStatus**",
              {
                "$ul": [
                  "**message**: Status details for a specified vCD Cluster object. Empty except when the status of the vCD Cluster object is 'BadlyConfigured'.",
                  "**status**: Status of the refreshable object. Possible values are \"Disconnected\" (no communication possible with object), \"Refreshing\" (able to communicate with object but has not refreshed yet), \"Connected\" (refreshed the metadata for the object), \"BadlyConfigured\" (object not configured correctly), \"Deleting\" (in process of removing the object), and \"Remote\" (replicated object that we should not connect to)."
                ]
              }
            ],
            [
              "**descendantCount**",
              {
                "$ul": [
                  "**catalog**: Number of descendant vCD catalog objects in a specified; hierarchy.",
                  "**connectedVimServer**: Number of descendant VIM Server objects that are linked to a vCenter Server object.",
                  "**disconnectedVimServer**: Number of descendant VIM Server objects that are not linked to a vCenter Server object.",
                  "**org**: Number of descendant Organization objects in a specified hierarchy.",
                  "**orgVdc**: Number of descendant virtual data center objects in a specified hierarchy.",
                  "**vApp**: Number of descendant vApp objects in a specified hierarchy.",
                  "**vcdCluster**: Number of descendant vCD cluster objects in a specified hierarchy."
                ]
              }
            ],
            [
              "**extendedAttributes**: attributes pertaining to each vCD hierarchy object.",
              {
                "$ul": [
                  [
                    "**vappAtributes**",
                    {
                      "$ul": [
                        "**isVappTemplate**: Indicates whether the vCD hierarchy object is a vApp template object."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**ipAddress**: IPv4 address for a vCD cluster or vCenter Server that is managed through a VIM Server.",
            "**objectType**: Types of object that can be present in the vCD hierarchy.",
            [
              "**pendingSlaDomain**",
              {
                "$ul": [
                  "**isPendingSlaDomainRetentionLocked**",
                  "**objectId**: Managed ID of the object.",
                  "**pendingSlaDomainId**",
                  "**pendingSlaDomainName**"
                ]
              }
            ],
            "**vcenterId**: ID assigned to a vCenter Server instance that is managed through a VIM Server."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
