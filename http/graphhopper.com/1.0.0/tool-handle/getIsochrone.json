{
  "name": "getIsochrone",
  "description": "### Example\nYou can get an example response via:\n\n```\ncurl \"https://graphhopper.com/api/1/isochrone?point=51.131108,12.414551&key=[YOUR_KEY]\"\n```\n\nDon't forget to replace the placeholder with your own key.\n\n### Introduction\n![Isochrone screenshot](./img/isochrone-example.png)\n\nAn isochrone of a location is ''a line connecting points at which a vehicle arrives at the same time'', see Wikipedia.\nWith the same API you can also calculate isodistances, just use the parameter distance_limit instead of time_limit`.\n\n### Use Cases\nSome possible areas in which this API may be useful to you:\n\n- real estate analysis\n- realtors\n- vehicle scheduling\n- geomarketing\n- reach of electric vehicles\n- transport planning\n- logistics (distribution and retail network planning)\n\n### API Clients and Examples\nSee the [clients](#section/API-Clients) section in the main documentation, and [live examples](https://graphhopper.com/api/1/examples/#isochrone).\n",
  "parameters": {
    "type": "object",
    "properties": {
      "point": {
        "type": "string",
        "description": "Specify the start coordinate"
      },
      "time_limit": {
        "default": 600,
        "format": "int32",
        "type": "integer",
        "description": "Specify which time the vehicle should travel. In seconds."
      },
      "distance_limit": {
        "format": "int32",
        "type": "integer",
        "description": "Specify which distance the vehicle should travel. In meters."
      },
      "vehicle": {
        "$ref": "#/components/schemas/VehicleProfileId",
        "description": "The vehicle profile for which the route should be calculated.\n"
      },
      "buckets": {
        "default": 1,
        "format": "int32",
        "type": "integer",
        "description": "Number by which to divide the given `time_limit` to create `buckets` nested isochrones of time intervals `time_limit-n*time_limit/buckets`. Applies analogously to `distance_limit`."
      },
      "reverse_flow": {
        "default": false,
        "type": "boolean",
        "description": "If `false` the flow goes from point to the polygon, if `true` the flow goes from the polygon \"inside\" to the point.\nExample use case for `false`&#58; *How many potential customer can be reached within 30min travel time from your store* vs. `true`&#58; *How many customers can reach your store within 30min travel time.*\n"
      },
      "weighting": {
        "default": "fastest",
        "enum": [
          "fastest",
          "shortest"
        ],
        "type": "string",
        "description": "Use `\"shortest\"` to get an isodistance line instead of an isochrone."
      }
    },
    "required": [
      "point"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://graphhopper.com/api/1/isochrone{?point,time_limit,distance_limit,vehicle,buckets,reverse_flow,weighting}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**copyrights**",
            "**polygons**: The list of polygons in GeoJson format. It can be used e.g. in the Leaflet framework:"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    },
    "default": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**hints**: Optional error information.",
            "**message**"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
