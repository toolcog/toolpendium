{
  "name": "monitoring_projects_alertPolicies_create",
  "description": "Creates a new alerting policy.Design your application to single-thread API calls that modify the state of alerting policies in a single project. This includes calls to CreateAlertPolicy, DeleteAlertPolicy and UpdateAlertPolicy.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The project (https://cloud.google.com/monitoring/api/v3#project_name) in which to create the alerting policy. The format is: projects/[PROJECT_ID_OR_NUMBER] Note that this field names the parent container in which the alerting policy will be written, not the name of the created policy. |name| must be a host project of a Metrics Scope, otherwise INVALID_ARGUMENT error will return. The alerting policy that is returned will have a name that contains a normalized representation of this name as a prefix but adds a suffix of the form /alertPolicies/[ALERT_POLICY_ID], identifying the policy in the container."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/AlertPolicy"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "AlertPolicy": {
        "description": "A description of the conditions under which some aspect of your system is considered to be \"unhealthy\" and the ways to notify people or services about this state. For an overview of alert policies, see Introduction to Alerting (https://cloud.google.com/monitoring/alerts/).",
        "properties": {
          "alertStrategy": {
            "$ref": "#/$defs/AlertStrategy"
          },
          "combiner": {
            "description": "How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.",
            "enum": [
              "COMBINE_UNSPECIFIED",
              "AND",
              "OR",
              "AND_WITH_MATCHING_RESOURCE"
            ],
            "type": "string"
          },
          "conditions": {
            "description": "A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions. If condition_time_series_query_language is present, it must be the only condition. If condition_monitoring_query_language is present, it must be the only condition.",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "creationRecord": {
            "$ref": "#/$defs/MutationRecord"
          },
          "displayName": {
            "description": "A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode characters.The convention for the display_name of a PrometheusQueryLanguageCondition is \"{rule group name}/{alert name}\", where the {rule group name} and {alert name} should be taken from the corresponding Prometheus configuration file. This convention is not enforced. In any case the display_name is not a unique key of the AlertPolicy.",
            "type": "string"
          },
          "documentation": {
            "$ref": "#/$defs/Documentation"
          },
          "enabled": {
            "description": "Whether or not the policy is enabled. On write, the default interpretation if unset is that the policy is enabled. On read, clients should not make any assumption about the state if it has not been populated. The field should always be populated on List and Get operations, unless a field projection has been specified that strips it out.",
            "type": "boolean"
          },
          "mutationRecord": {
            "$ref": "#/$defs/MutationRecord"
          },
          "name": {
            "description": "Required if the policy exists. The resource name for this policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] [ALERT_POLICY_ID] is assigned by Cloud Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.",
            "type": "string"
          },
          "notificationChannels": {
            "description": "Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The format of the entries in this field is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] ",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "description": "Optional. The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will be displayed on the Incident detail page and in notifications.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "CRITICAL",
              "ERROR",
              "WARNING"
            ],
            "type": "string"
          },
          "userLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-supplied key/value data to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.Note that Prometheus {alert name} is a valid Prometheus label names (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels), whereas Prometheus {rule group} is an unrestricted UTF-8 string. This means that they cannot be stored as-is in user labels, because they may contain characters that are not allowed in user-label values.",
            "type": "object"
          },
          "validity": {
            "$ref": "#/$defs/Status"
          }
        },
        "type": "object"
      },
      "AlertStrategy": {
        "description": "Control over how the notification channels in notification_channels are notified when this alert fires.",
        "properties": {
          "autoClose": {
            "description": "If an alert policy that was active has no data for this long, any open incidents will close",
            "format": "google-duration",
            "type": "string"
          },
          "notificationChannelStrategy": {
            "description": "Control how notifications will be sent out, on a per-channel basis.",
            "items": {
              "$ref": "#/$defs/NotificationChannelStrategy"
            },
            "type": "array"
          },
          "notificationRateLimit": {
            "$ref": "#/$defs/NotificationRateLimit"
          }
        },
        "type": "object"
      },
      "NotificationChannelStrategy": {
        "description": "Control over how the notification channels in notification_channels are notified when this alert fires, on a per-channel basis.",
        "properties": {
          "notificationChannelNames": {
            "description": "The full REST resource name for the notification channels that these settings apply to. Each of these correspond to the name field in one of the NotificationChannel objects referenced in the notification_channels field of this AlertPolicy. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] ",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "renotifyInterval": {
            "description": "The frequency at which to send reminder notifications for open incidents.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationRateLimit": {
        "description": "Control over the rate of notifications sent to this alert policy's notification channels.",
        "properties": {
          "period": {
            "description": "Not more than one notification per period.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Condition": {
        "description": "A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.",
        "properties": {
          "conditionAbsent": {
            "$ref": "#/$defs/MetricAbsence"
          },
          "conditionMatchedLog": {
            "$ref": "#/$defs/LogMatch"
          },
          "conditionMonitoringQueryLanguage": {
            "$ref": "#/$defs/MonitoringQueryLanguageCondition"
          },
          "conditionPrometheusQueryLanguage": {
            "$ref": "#/$defs/PrometheusQueryLanguageCondition"
          },
          "conditionThreshold": {
            "$ref": "#/$defs/MetricThreshold"
          },
          "displayName": {
            "description": "A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.",
            "type": "string"
          },
          "name": {
            "description": "Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricAbsence": {
        "description": "A condition type that checks that monitored resources are reporting data. The configuration defines a metric and a set of monitored resources. The predicate is considered in violation when a time series for the specified metric of a monitored resource does not include any data in the specified duration.",
        "properties": {
          "aggregations": {
            "description": "Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.",
            "items": {
              "$ref": "#/$defs/Aggregation"
            },
            "type": "array"
          },
          "duration": {
            "description": "The amount of time that a time series must fail to report new data to be considered failing. The minimum value of this field is 120 seconds. Larger values that are a multiple of a minute--for example, 240 or 300 seconds--are supported. If an invalid value is given, an error will be returned. The Duration.nanos field is ignored.",
            "format": "google-duration",
            "type": "string"
          },
          "filter": {
            "description": "Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.",
            "type": "string"
          },
          "trigger": {
            "$ref": "#/$defs/Trigger"
          }
        },
        "type": "object"
      },
      "Aggregation": {
        "description": "Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example \"the 95% latency across the average of all tasks in a cluster\". This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).",
        "properties": {
          "alignmentPeriod": {
            "description": "The alignment_period specifies a time interval, in seconds, that is used to divide the data in all the time series into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.The value must be at least 60 seconds. If a per-series aligner other than ALIGN_NONE is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner ALIGN_NONE is specified, then this field is ignored.The maximum value of the alignment_period is 104 weeks (2 years) for charts, and 90,000 seconds (25 hours) for alerting policies.",
            "format": "google-duration",
            "type": "string"
          },
          "crossSeriesReducer": {
            "description": "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.",
            "enum": [
              "REDUCE_NONE",
              "REDUCE_MEAN",
              "REDUCE_MIN",
              "REDUCE_MAX",
              "REDUCE_SUM",
              "REDUCE_STDDEV",
              "REDUCE_COUNT",
              "REDUCE_COUNT_TRUE",
              "REDUCE_COUNT_FALSE",
              "REDUCE_FRACTION_TRUE",
              "REDUCE_PERCENTILE_99",
              "REDUCE_PERCENTILE_95",
              "REDUCE_PERCENTILE_50",
              "REDUCE_PERCENTILE_05"
            ],
            "type": "string"
          },
          "groupByFields": {
            "description": "The set of fields to preserve when cross_series_reducer is specified. The group_by_fields determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The cross_series_reducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in group_by_fields are aggregated away. If group_by_fields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If cross_series_reducer is not defined, this field is ignored.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "perSeriesAligner": {
            "description": "An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.",
            "enum": [
              "ALIGN_NONE",
              "ALIGN_DELTA",
              "ALIGN_RATE",
              "ALIGN_INTERPOLATE",
              "ALIGN_NEXT_OLDER",
              "ALIGN_MIN",
              "ALIGN_MAX",
              "ALIGN_MEAN",
              "ALIGN_COUNT",
              "ALIGN_SUM",
              "ALIGN_STDDEV",
              "ALIGN_COUNT_TRUE",
              "ALIGN_COUNT_FALSE",
              "ALIGN_FRACTION_TRUE",
              "ALIGN_PERCENTILE_99",
              "ALIGN_PERCENTILE_95",
              "ALIGN_PERCENTILE_50",
              "ALIGN_PERCENTILE_05",
              "ALIGN_PERCENT_CHANGE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trigger": {
        "description": "Specifies how many time series must fail a predicate to trigger a condition. If not specified, then a {count: 1} trigger is used.",
        "properties": {
          "count": {
            "description": "The absolute number of time series that must fail the predicate for the condition to be triggered.",
            "format": "int32",
            "type": "integer"
          },
          "percent": {
            "description": "The percentage of time series that must fail the predicate for the condition to be triggered.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "LogMatch": {
        "description": "A condition type that checks whether a log message in the scoping project (https://cloud.google.com/monitoring/api/v3#project_name) satisfies the given filter. Logs from other projects in the metrics scope are not evaluated.",
        "properties": {
          "filter": {
            "description": "Required. A logs-based filter. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries) for how this filter should be constructed.",
            "type": "string"
          },
          "labelExtractors": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. A map from a label key to an extractor expression, which is used to extract the value for this label key. Each entry in this map is a specification for how data should be extracted from log entries that match filter. Each combination of extracted values is treated as a separate rule for the purposes of triggering notifications. Label keys and corresponding values can be used in notifications generated by this condition.Please see the documentation on logs-based metric valueExtractors (https://cloud.google.com/logging/docs/reference/v2/rest/v2/projects.metrics#LogMetric.FIELDS.value_extractor) for syntax and examples.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "MonitoringQueryLanguageCondition": {
        "description": "A condition type that allows alert policies to be defined using Monitoring Query Language (https://cloud.google.com/monitoring/mql).",
        "properties": {
          "duration": {
            "description": "The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.",
            "format": "google-duration",
            "type": "string"
          },
          "evaluationMissingData": {
            "description": "A condition control that determines how metric-threshold conditions are evaluated when data stops arriving.",
            "enum": [
              "EVALUATION_MISSING_DATA_UNSPECIFIED",
              "EVALUATION_MISSING_DATA_INACTIVE",
              "EVALUATION_MISSING_DATA_ACTIVE",
              "EVALUATION_MISSING_DATA_NO_OP"
            ],
            "type": "string"
          },
          "query": {
            "description": "Monitoring Query Language (https://cloud.google.com/monitoring/mql) query that outputs a boolean stream.",
            "type": "string"
          },
          "trigger": {
            "$ref": "#/$defs/Trigger"
          }
        },
        "type": "object"
      },
      "PrometheusQueryLanguageCondition": {
        "description": "A condition type that allows alert policies to be defined using Prometheus Query Language (PromQL) (https://prometheus.io/docs/prometheus/latest/querying/basics/).The PrometheusQueryLanguageCondition message contains information from a Prometheus alerting rule and its associated rule group.A Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/). The semantics of a Prometheus alerting rule is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule).A Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/). The semantics of a Prometheus rule group is described here (https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#rule_group).Because Cloud Alerting has no representation of a Prometheus rule group resource, we must embed the information of the parent rule group inside each of the conditions that refer to it. We must also update the contents of all Prometheus alerts in case the information of their rule group changes.The PrometheusQueryLanguageCondition protocol buffer combines the information of the corresponding rule group and alerting rule. The structure of the PrometheusQueryLanguageCondition protocol buffer does NOT mimic the structure of the Prometheus rule group and alerting rule YAML declarations. The PrometheusQueryLanguageCondition protocol buffer may change in the future to support future rule group and/or alerting rule features. There are no new such features at the present time (2023-06-26).",
        "properties": {
          "alertRule": {
            "description": "Optional. The alerting rule name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must be a valid Prometheus label name (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). This field may not exceed 2048 Unicode characters in length.",
            "type": "string"
          },
          "duration": {
            "description": "Optional. Alerts are considered firing once their PromQL expression was evaluated to be \"true\" for this long. Alerts whose PromQL expression was not evaluated to be \"true\" for long enough are considered pending. Must be a non-negative duration or missing. This field is optional. Its default value is zero.",
            "format": "google-duration",
            "type": "string"
          },
          "evaluationInterval": {
            "description": "Optional. How often this rule should be evaluated. Must be a positive multiple of 30 seconds or missing. This field is optional. Its default value is 30 seconds. If this PrometheusQueryLanguageCondition was generated from a Prometheus alerting rule, then this value should be taken from the enclosing rule group.",
            "format": "google-duration",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels to add to or overwrite in the PromQL query result. Label names must be valid (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels). Label values can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). The only available variable names are the names of the labels in the PromQL result, including \"__name__\" and \"value\". \"labels\" may be empty.",
            "type": "object"
          },
          "query": {
            "description": "Required. The PromQL expression to evaluate. Every evaluation cycle this expression is evaluated at the current time, and all resultant time series become pending/firing alerts. This field must not be empty.",
            "type": "string"
          },
          "ruleGroup": {
            "description": "Optional. The rule group name of this alert in the corresponding Prometheus configuration file.Some external tools may require this field to be populated correctly in order to refer to the original Prometheus configuration file. The rule group name and the alert name are necessary to update the relevant AlertPolicies in case the definition of the rule group changes in the future.This field is optional. If this field is not empty, then it must contain a valid UTF-8 string. This field may not exceed 2048 Unicode characters in length.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricThreshold": {
        "description": "A condition type that compares a collection of time series against a threshold.",
        "properties": {
          "aggregations": {
            "description": "Specifies the alignment of data points in individual time series as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources). Multiple aggregations are applied in the order specified.This field is similar to the one in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list). It is advisable to use the ListTimeSeries method when debugging this field.",
            "items": {
              "$ref": "#/$defs/Aggregation"
            },
            "type": "array"
          },
          "comparison": {
            "description": "The comparison to apply between the time series (indicated by filter and aggregation) and the threshold (indicated by threshold_value). The comparison is applied on each time series, with the time series on the left-hand side and the threshold on the right-hand side.Only COMPARISON_LT and COMPARISON_GT are supported currently.",
            "enum": [
              "COMPARISON_UNSPECIFIED",
              "COMPARISON_GT",
              "COMPARISON_GE",
              "COMPARISON_LT",
              "COMPARISON_LE",
              "COMPARISON_EQ",
              "COMPARISON_NE"
            ],
            "type": "string"
          },
          "denominatorAggregations": {
            "description": "Specifies the alignment of data points in individual time series selected by denominatorFilter as well as how to combine the retrieved time series together (such as when aggregating multiple streams on each resource to a single stream for each resource or when aggregating streams across all members of a group of resources).When computing ratios, the aggregations and denominator_aggregations fields must use the same alignment period and produce time series that have the same periodicity and labels.",
            "items": {
              "$ref": "#/$defs/Aggregation"
            },
            "type": "array"
          },
          "denominatorFilter": {
            "description": "A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies a time series that should be used as the denominator of a ratio that will be compared with the threshold. If a denominator_filter is specified, the time series specified by the filter field will be used as the numerator.The filter must specify the metric type and optionally may contain restrictions on resource type, resource labels, and metric labels. This field may not exceed 2048 Unicode characters in length.",
            "type": "string"
          },
          "duration": {
            "description": "The amount of time that a time series must violate the threshold to be considered failing. Currently, only values that are a multiple of a minute--e.g., 0, 60, 120, or 300 seconds--are supported. If an invalid value is given, an error will be returned. When choosing a duration, it is useful to keep in mind the frequency of the underlying time series data (which may also be affected by any alignments specified in the aggregations field); a good duration is long enough so that a single outlier does not generate spurious alerts, but short enough that unhealthy states are detected and alerted on quickly.",
            "format": "google-duration",
            "type": "string"
          },
          "evaluationMissingData": {
            "description": "A condition control that determines how metric-threshold conditions are evaluated when data stops arriving. To use this control, the value of the duration field must be greater than or equal to 60 seconds.",
            "enum": [
              "EVALUATION_MISSING_DATA_UNSPECIFIED",
              "EVALUATION_MISSING_DATA_INACTIVE",
              "EVALUATION_MISSING_DATA_ACTIVE",
              "EVALUATION_MISSING_DATA_NO_OP"
            ],
            "type": "string"
          },
          "filter": {
            "description": "Required. A filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies which time series should be compared with the threshold.The filter is similar to the one that is specified in the ListTimeSeries request (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) (that call is useful to verify the time series that will be retrieved / processed). The filter must specify the metric type and the resource type. Optionally, it can specify resource labels and metric labels. This field must not exceed 2048 Unicode characters in length.",
            "type": "string"
          },
          "forecastOptions": {
            "$ref": "#/$defs/ForecastOptions"
          },
          "thresholdValue": {
            "description": "A value against which to compare the time series.",
            "format": "double",
            "type": "number"
          },
          "trigger": {
            "$ref": "#/$defs/Trigger"
          }
        },
        "type": "object"
      },
      "ForecastOptions": {
        "description": "Options used when forecasting the time series and testing the predicted value against the threshold.",
        "properties": {
          "forecastHorizon": {
            "description": "Required. The length of time into the future to forecast whether a time series will violate the threshold. If the predicted value is found to violate the threshold, and the violation is observed in all forecasts made for the configured duration, then the time series is considered to be failing. The forecast horizon can range from 1 hour to 60 hours.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MutationRecord": {
        "description": "Describes a change made to a configuration.",
        "properties": {
          "mutateTime": {
            "description": "When the change occurred.",
            "format": "google-datetime",
            "type": "string"
          },
          "mutatedBy": {
            "description": "The email address of the user making the change.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Documentation": {
        "description": "A content string and a MIME type that describes the content string's format.",
        "properties": {
          "content": {
            "description": "The body of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).",
            "type": "string"
          },
          "mimeType": {
            "description": "The format of the content field. Presently, only the value \"text/markdown\" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.",
            "type": "string"
          },
          "subject": {
            "description": "Optional. The subject line of the notification. The subject line may not exceed 10,240 bytes. In notifications generated by this policy, the contents of the subject line after variable expansion will be truncated to 255 bytes or shorter at the latest UTF-8 character boundary. The 255-byte limit is recommended by this thread (https://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit). It is both the limit imposed by some third-party ticketing products and it is common to define textual fields in databases as VARCHAR(255).The contents of the subject line can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). If this field is missing or empty, a default subject line will be generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://monitoring.googleapis.com//v3/{name}/alertPolicies{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A description of the conditions under which some aspect of your system is considered to be \"unhealthy\" and the ways to notify people or services about this state. For an overview of alert policies, see Introduction to Alerting (https://cloud.google.com/monitoring/alerts/).",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**alertStrategy**: Control over how the notification channels in notification_channels are notified when this alert fires.",
              {
                "$ul": [
                  "**autoClose**: If an alert policy that was active has no data for this long, any open incidents will close",
                  "**notificationChannelStrategy**: Control how notifications will be sent out, on a per-channel basis.",
                  [
                    "**notificationRateLimit**: Control over the rate of notifications sent to this alert policy's notification channels.",
                    {
                      "$ul": [
                        "**period**: Not more than one notification per period."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**combiner**: How to combine the results of multiple conditions to determine if an incident should be opened. If condition_time_series_query_language is present, this must be COMBINE_UNSPECIFIED.",
            "**conditions**: A list of conditions for the policy. The conditions are combined by AND or OR according to the combiner field. If the combined conditions evaluate to true, then an incident is created. A policy can have from one to six conditions. If condition_time_series_query_language is present, it must be the only condition. If condition_monitoring_query_language is present, it must be the only condition.",
            [
              "**creationRecord**: Describes a change made to a configuration.",
              {
                "$ul": [
                  "**mutateTime**: When the change occurred.",
                  "**mutatedBy**: The email address of the user making the change."
                ]
              }
            ],
            "**displayName**: A short name or phrase used to identify the policy in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple policies in the same project. The name is limited to 512 Unicode characters.The convention for the display_name of a PrometheusQueryLanguageCondition is \"{rule group name}/{alert name}\", where the {rule group name} and {alert name} should be taken from the corresponding Prometheus configuration file. This convention is not enforced. In any case the display_name is not a unique key of the AlertPolicy.",
            [
              "**documentation**: A content string and a MIME type that describes the content string's format.",
              {
                "$ul": [
                  "**content**: The body of the documentation, interpreted according to mime_type. The content may not exceed 8,192 Unicode characters and may not exceed more than 10,240 bytes when encoded in UTF-8 format, whichever is smaller. This text can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables).",
                  "**mimeType**: The format of the content field. Presently, only the value \"text/markdown\" is supported. See Markdown (https://en.wikipedia.org/wiki/Markdown) for more information.",
                  "**subject**: Optional. The subject line of the notification. The subject line may not exceed 10,240 bytes. In notifications generated by this policy, the contents of the subject line after variable expansion will be truncated to 255 bytes or shorter at the latest UTF-8 character boundary. The 255-byte limit is recommended by this thread (https://stackoverflow.com/questions/1592291/what-is-the-email-subject-length-limit). It is both the limit imposed by some third-party ticketing products and it is common to define textual fields in databases as VARCHAR(255).The contents of the subject line can be templatized by using variables (https://cloud.google.com/monitoring/alerts/doc-variables). If this field is missing or empty, a default subject line will be generated."
                ]
              }
            ],
            "**enabled**: Whether or not the policy is enabled. On write, the default interpretation if unset is that the policy is enabled. On read, clients should not make any assumption about the state if it has not been populated. The field should always be populated on List and Get operations, unless a field projection has been specified that strips it out.",
            [
              "**mutationRecord**: Describes a change made to a configuration.",
              {
                "$ul": [
                  "**mutateTime**: When the change occurred.",
                  "**mutatedBy**: The email address of the user making the change."
                ]
              }
            ],
            "**name**: Required if the policy exists. The resource name for this policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] [ALERT_POLICY_ID] is assigned by Cloud Monitoring when the policy is created. When calling the alertPolicies.create method, do not include the name field in the alerting policy passed as part of the request.",
            "**notificationChannels**: Identifies the notification channels to which notifications should be sent when incidents are opened or closed or when new violations occur on an already opened incident. Each element of this array corresponds to the name field in each of the NotificationChannel objects that are returned from the ListNotificationChannels method. The format of the entries in this field is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannels/[CHANNEL_ID] ",
            "**severity**: Optional. The severity of an alert policy indicates how important incidents generated by that policy are. The severity level will be displayed on the Incident detail page and in notifications.",
            "**userLabels**: User-supplied key/value data to be used for organizing and identifying the AlertPolicy objects.The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.Note that Prometheus {alert name} is a valid Prometheus label names (https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels), whereas Prometheus {rule group} is an unrestricted UTF-8 string. This means that they cannot be stored as-is in user labels, because they may contain characters that are not allowed in user-label values.",
            [
              "**validity**: The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
