{
  "name": "monitoring_projects_dashboards_create",
  "description": "Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see Managing dashboards by API (https://cloud.google.com/monitoring/dashboards/api-dashboard). This method requires the monitoring.dashboards.create permission on the specified project. For more information about permissions, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The project on which to execute the request. The format is: projects/[PROJECT_ID_OR_NUMBER] The [PROJECT_ID_OR_NUMBER] must match the dashboard resource name."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "If set, validate the request and preview the review, but do not actually save it."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Dashboard"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Dashboard": {
        "description": "A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.",
        "properties": {
          "columnLayout": {
            "$ref": "#/$defs/ColumnLayout"
          },
          "dashboardFilters": {
            "description": "Filters to reduce the amount of data charted based on the filter criteria.",
            "items": {
              "$ref": "#/$defs/DashboardFilter"
            },
            "type": "array"
          },
          "displayName": {
            "description": "Required. The mutable, human-readable name.",
            "type": "string"
          },
          "etag": {
            "description": "etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.",
            "type": "string"
          },
          "gridLayout": {
            "$ref": "#/$defs/GridLayout"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels applied to the dashboard",
            "type": "object"
          },
          "mosaicLayout": {
            "$ref": "#/$defs/MosaicLayout"
          },
          "name": {
            "description": "Identifier. The resource name of the dashboard.",
            "type": "string"
          },
          "rowLayout": {
            "$ref": "#/$defs/RowLayout"
          }
        },
        "type": "object"
      },
      "ColumnLayout": {
        "description": "A simplified layout that divides the available space into vertical columns and arranges a set of widgets vertically in each column.",
        "properties": {
          "columns": {
            "description": "The columns of content to display.",
            "items": {
              "$ref": "#/$defs/Column"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Column": {
        "description": "Defines the layout properties and content for a column.",
        "properties": {
          "weight": {
            "description": "The relative weight of this column. The column weight is used to adjust the width of columns on the screen (relative to peers). Greater the weight, greater the width of the column on the screen. If omitted, a value of 1 is used while rendering.",
            "format": "int64",
            "type": "string"
          },
          "widgets": {
            "description": "The display widgets arranged vertically in this column.",
            "items": {
              "$ref": "#/$defs/Widget"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Widget": {
        "description": "Widget contains a single dashboard component and configuration of how to present the component in the dashboard.",
        "properties": {
          "alertChart": {
            "$ref": "#/$defs/AlertChart"
          },
          "blank": {
            "$ref": "#/$defs/Empty"
          },
          "collapsibleGroup": {
            "$ref": "#/$defs/CollapsibleGroup"
          },
          "errorReportingPanel": {
            "$ref": "#/$defs/ErrorReportingPanel"
          },
          "id": {
            "description": "Optional. The widget id. Ids may be made up of alphanumerics, dashes and underscores. Widget ids are optional.",
            "type": "string"
          },
          "incidentList": {
            "$ref": "#/$defs/IncidentList"
          },
          "logsPanel": {
            "$ref": "#/$defs/LogsPanel"
          },
          "pieChart": {
            "$ref": "#/$defs/PieChart"
          },
          "scorecard": {
            "$ref": "#/$defs/Scorecard"
          },
          "sectionHeader": {
            "$ref": "#/$defs/SectionHeader"
          },
          "singleViewGroup": {
            "$ref": "#/$defs/SingleViewGroup"
          },
          "text": {
            "$ref": "#/$defs/Text"
          },
          "timeSeriesTable": {
            "$ref": "#/$defs/TimeSeriesTable"
          },
          "title": {
            "description": "Optional. The title of the widget.",
            "type": "string"
          },
          "xyChart": {
            "$ref": "#/$defs/XyChart"
          }
        },
        "type": "object"
      },
      "AlertChart": {
        "description": "A chart that displays alert policy data.",
        "properties": {
          "name": {
            "description": "Required. The resource name of the alert policy. The format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[ALERT_POLICY_ID] ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Empty": {
        "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } ",
        "properties": {},
        "type": "object"
      },
      "CollapsibleGroup": {
        "description": "A widget that groups the other widgets. All widgets that are within the area spanned by the grouping widget are considered member widgets.",
        "properties": {
          "collapsed": {
            "description": "The collapsed state of the widget on first page load.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ErrorReportingPanel": {
        "description": "A widget that displays a list of error groups.",
        "properties": {
          "projectNames": {
            "description": "The resource name of the Google Cloud Platform project. Written as projects/{projectID} or projects/{projectNumber}, where {projectID} and {projectNumber} can be found in the Google Cloud console (https://support.google.com/cloud/answer/6158840).Examples: projects/my-project-123, projects/5551234.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "services": {
            "description": "An identifier of the service, such as the name of the executable, job, or Google App Engine service name. This field is expected to have a low number of values that are relatively stable over time, as opposed to version, which can be changed whenever new code is deployed.Contains the service name for error reports extracted from Google App Engine logs or default if the App Engine default service is used.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "versions": {
            "description": "Represents the source code version that the developer provided, which could represent a version label or a Git SHA-1 hash, for example. For App Engine standard environment, the version is set to the version of the app.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IncidentList": {
        "description": "A widget that displays a list of incidents",
        "properties": {
          "monitoredResources": {
            "description": "Optional. The monitored resource for which incidents are listed. The resource doesn't need to be fully specified. That is, you can specify the resource type but not the values of the resource labels. The resource type and labels are used for filtering.",
            "items": {
              "$ref": "#/$defs/MonitoredResource"
            },
            "type": "array"
          },
          "policyNames": {
            "description": "Optional. A list of alert policy names to filter the incident list by. Don't include the project ID prefix in the policy name. For example, use alertPolicies/utilization.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MonitoredResource": {
        "description": "An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource's schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for \"gce_instance\" has labels \"project_id\", \"instance_id\" and \"zone\": { \"type\": \"gce_instance\", \"labels\": { \"project_id\": \"my-project\", \"instance_id\": \"12345678901234\", \"zone\": \"us-central1-a\" }} ",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Required. Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels \"project_id\", \"instance_id\", and \"zone\".",
            "type": "object"
          },
          "type": {
            "description": "Required. The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types (https://cloud.google.com/monitoring/api/resources) and Logging resource types (https://cloud.google.com/logging/docs/api/v2/resource-list).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogsPanel": {
        "description": "A widget that displays a stream of log.",
        "properties": {
          "filter": {
            "description": "A filter that chooses which log entries to return. See Advanced Logs Queries (https://cloud.google.com/logging/docs/view/advanced-queries). Only log entries that match the filter are returned. An empty filter matches all log entries.",
            "type": "string"
          },
          "resourceNames": {
            "description": "The names of logging resources to collect logs for. Currently only projects are supported. If empty, the widget will default to the host project.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PieChart": {
        "description": "A widget that displays timeseries data as a pie or a donut.",
        "properties": {
          "chartType": {
            "description": "Required. Indicates the visualization type for the PieChart.",
            "enum": [
              "PIE_CHART_TYPE_UNSPECIFIED",
              "PIE",
              "DONUT"
            ],
            "type": "string"
          },
          "dataSets": {
            "description": "Required. The queries for the chart's data.",
            "items": {
              "$ref": "#/$defs/PieChartDataSet"
            },
            "type": "array"
          },
          "showLabels": {
            "description": "Optional. Indicates whether or not the pie chart should show slices' labels",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PieChartDataSet": {
        "description": "Groups a time series query definition.",
        "properties": {
          "dimensions": {
            "description": "A dimension is a structured label, class, or category for a set of measurements in your data.",
            "items": {
              "$ref": "#/$defs/Dimension"
            },
            "type": "array"
          },
          "measures": {
            "description": "A measure is a measured value of a property in your data. For example, rainfall in inches, number of units sold, revenue gained, etc.",
            "items": {
              "$ref": "#/$defs/Measure"
            },
            "type": "array"
          },
          "minAlignmentPeriod": {
            "description": "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
            "format": "google-duration",
            "type": "string"
          },
          "sliceNameTemplate": {
            "description": "Optional. A template for the name of the slice. This name will be displayed in the legend and the tooltip of the pie chart. It replaces the auto-generated names for the slices. For example, if the template is set to ${resource.labels.zone}, the zone's value will be used for the name instead of the default name.",
            "type": "string"
          },
          "timeSeriesQuery": {
            "$ref": "#/$defs/TimeSeriesQuery"
          }
        },
        "type": "object"
      },
      "Dimension": {
        "description": "A chart dimension. Dimensions are a structured label, class, or category for a set of measurements in your data.",
        "properties": {
          "column": {
            "description": "Required. The name of the column in the source SQL query that is used to chart the dimension.",
            "type": "string"
          },
          "columnType": {
            "description": "Optional. The type of the dimension column. This is relevant only if one of the bin_size fields is set. If it is empty, the type TIMESTAMP or INT64 will be assumed based on which bin_size field is set. If populated, this should be set to one of the following types: DATE, TIME, DATETIME, TIMESTAMP, BIGNUMERIC, INT64, NUMERIC, FLOAT64.",
            "type": "string"
          },
          "floatBinSize": {
            "description": "Optional. float_bin_size is used when the column type used for a dimension is a floating point numeric column.",
            "format": "double",
            "type": "number"
          },
          "maxBinCount": {
            "description": "A limit to the number of bins generated. When 0 is specified, the maximum count is not enforced.",
            "format": "int32",
            "type": "integer"
          },
          "numericBinSize": {
            "description": "numeric_bin_size is used when the column type used for a dimension is numeric or string.",
            "format": "int32",
            "type": "integer"
          },
          "sortColumn": {
            "description": "The column name to sort on for binning. This column can be the same column as this dimension or any other column used as a measure in the results. If sort_order is set to NONE, then this value is not used.",
            "type": "string"
          },
          "sortOrder": {
            "description": "The sort order applied to the sort column.",
            "enum": [
              "SORT_ORDER_UNSPECIFIED",
              "SORT_ORDER_NONE",
              "SORT_ORDER_ASCENDING",
              "SORT_ORDER_DESCENDING"
            ],
            "type": "string"
          },
          "timeBinSize": {
            "description": "time_bin_size is used when the data type specified by column is a time type and the bin size is determined by a time duration. If column_type is DATE, this must be a whole value multiple of 1 day. If column_type is TIME, this must be less than or equal to 24 hours.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Measure": {
        "description": "A chart measure. Measures represent a measured property in your chart data such as rainfall in inches, number of units sold, revenue gained, etc.",
        "properties": {
          "aggregationFunction": {
            "$ref": "#/$defs/AggregationFunction"
          },
          "column": {
            "description": "Required. The column name within in the dataset used for the measure.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AggregationFunction": {
        "description": "Preview: An identifier for an aggregation function. Aggregation functions are SQL functions that group or transform data from multiple points to a single point. This is a preview feature and may be subject to change before final release.",
        "properties": {
          "parameters": {
            "description": "Optional. Parameters applied to the aggregation function. Only used for functions that require them.",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "Required. The type of aggregation function, must be one of the following: \"none\" - no function. \"percentile\" - APPROX_QUANTILES() - 1 parameter numeric value \"average\" - AVG() \"count\" - COUNT() \"count-distinct\" - COUNT(DISTINCT) \"count-distinct-approx\" - APPROX_COUNT_DISTINCT() \"max\" - MAX() \"min\" - MIN() \"sum\" - SUM()",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Parameter": {
        "description": "Preview: Parameter value applied to the aggregation function. This is a preview feature and may be subject to change before final release.",
        "properties": {
          "doubleValue": {
            "description": "A floating-point parameter value.",
            "format": "double",
            "type": "number"
          },
          "intValue": {
            "description": "An integer parameter value.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeSeriesQuery": {
        "description": "TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.",
        "properties": {
          "opsAnalyticsQuery": {
            "$ref": "#/$defs/OpsAnalyticsQuery"
          },
          "outputFullDuration": {
            "description": "Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard's spark chart",
            "type": "boolean"
          },
          "prometheusQuery": {
            "description": "A query used to fetch time series with PromQL.",
            "type": "string"
          },
          "timeSeriesFilter": {
            "$ref": "#/$defs/TimeSeriesFilter"
          },
          "timeSeriesFilterRatio": {
            "$ref": "#/$defs/TimeSeriesFilterRatio"
          },
          "timeSeriesQueryLanguage": {
            "description": "A query used to fetch time series with MQL.",
            "type": "string"
          },
          "unitOverride": {
            "description": "The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OpsAnalyticsQuery": {
        "description": "Preview: A query that produces an aggregated response and supporting data. This is a preview feature and may be subject to change before final release.",
        "properties": {
          "sql": {
            "description": "A SQL query to fetch time series, category series, or numeric series data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeSeriesFilter": {
        "description": "A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method.",
        "properties": {
          "aggregation": {
            "$ref": "#/$defs/Aggregation"
          },
          "filter": {
            "description": "Required. The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
            "type": "string"
          },
          "pickTimeSeriesFilter": {
            "$ref": "#/$defs/PickTimeSeriesFilter"
          },
          "secondaryAggregation": {
            "$ref": "#/$defs/Aggregation"
          },
          "statisticalTimeSeriesFilter": {
            "$ref": "#/$defs/StatisticalTimeSeriesFilter"
          }
        },
        "type": "object"
      },
      "Aggregation": {
        "description": "Describes how to combine multiple time series to provide a different view of the data. Aggregation of time series is done in two steps. First, each time series in the set is aligned to the same time interval boundaries, then the set of time series is optionally reduced in number.Alignment consists of applying the per_series_aligner operation to each time series after its data has been divided into regular alignment_period time intervals. This process takes all of the data points in an alignment period, applies a mathematical transformation such as averaging, minimum, maximum, delta, etc., and converts them into a single data point per period.Reduction is when the aligned and transformed time series can optionally be combined, reducing the number of time series through similar mathematical transformations. Reduction involves applying a cross_series_reducer to all the time series, optionally sorting the time series into subsets with group_by_fields, and applying the reducer to each subset.The raw time series data can contain a huge amount of information from multiple sources. Alignment and reduction transforms this mass of data into a more manageable and representative collection of data, for example \"the 95% latency across the average of all tasks in a cluster\". This representative data can be more easily graphed and comprehended, and the individual time series data is still available for later drilldown. For more details, see Filtering and aggregation (https://cloud.google.com/monitoring/api/v3/aggregation).",
        "properties": {
          "alignmentPeriod": {
            "description": "The alignment_period specifies a time interval, in seconds, that is used to divide the data in all the time series into consistent blocks of time. This will be done before the per-series aligner can be applied to the data.The value must be at least 60 seconds. If a per-series aligner other than ALIGN_NONE is specified, this field is required or an error is returned. If no per-series aligner is specified, or the aligner ALIGN_NONE is specified, then this field is ignored.The maximum value of the alignment_period is 2 years, or 104 weeks.",
            "format": "google-duration",
            "type": "string"
          },
          "crossSeriesReducer": {
            "description": "The reduction operation to be used to combine time series into a single time series, where the value of each data point in the resulting series is a function of all the already aligned values in the input time series.Not all reducer operations can be applied to all time series. The valid choices depend on the metric_kind and the value_type of the original time series. Reduction can yield a time series with a different metric_kind or value_type than the input time series.Time series data must first be aligned (see per_series_aligner) in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified, and must not be ALIGN_NONE. An alignment_period must also be specified; otherwise, an error is returned.",
            "enum": [
              "REDUCE_NONE",
              "REDUCE_MEAN",
              "REDUCE_MIN",
              "REDUCE_MAX",
              "REDUCE_SUM",
              "REDUCE_STDDEV",
              "REDUCE_COUNT",
              "REDUCE_COUNT_TRUE",
              "REDUCE_COUNT_FALSE",
              "REDUCE_FRACTION_TRUE",
              "REDUCE_PERCENTILE_99",
              "REDUCE_PERCENTILE_95",
              "REDUCE_PERCENTILE_50",
              "REDUCE_PERCENTILE_05"
            ],
            "type": "string"
          },
          "groupByFields": {
            "description": "The set of fields to preserve when cross_series_reducer is specified. The group_by_fields determine how the time series are partitioned into subsets prior to applying the aggregation operation. Each subset contains time series that have the same value for each of the grouping fields. Each individual time series is a member of exactly one subset. The cross_series_reducer is applied to each subset of time series. It is not possible to reduce across different resource types, so this field implicitly contains resource.type. Fields not specified in group_by_fields are aggregated away. If group_by_fields is not specified and all the time series have the same resource type, then the time series are aggregated into a single output time series. If cross_series_reducer is not defined, this field is ignored.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "perSeriesAligner": {
            "description": "An Aligner describes how to bring the data points in a single time series into temporal alignment. Except for ALIGN_NONE, all alignments cause all the data points in an alignment_period to be mathematically grouped together, resulting in a single data point for each alignment_period with end timestamp at the end of the period.Not all alignment operations may be applied to all time series. The valid choices depend on the metric_kind and value_type of the original time series. Alignment can change the metric_kind or the value_type of the time series.Time series data must be aligned in order to perform cross-time series reduction. If cross_series_reducer is specified, then per_series_aligner must be specified and not equal to ALIGN_NONE and alignment_period must be specified; otherwise, an error is returned.",
            "enum": [
              "ALIGN_NONE",
              "ALIGN_DELTA",
              "ALIGN_RATE",
              "ALIGN_INTERPOLATE",
              "ALIGN_NEXT_OLDER",
              "ALIGN_MIN",
              "ALIGN_MAX",
              "ALIGN_MEAN",
              "ALIGN_COUNT",
              "ALIGN_SUM",
              "ALIGN_STDDEV",
              "ALIGN_COUNT_TRUE",
              "ALIGN_COUNT_FALSE",
              "ALIGN_FRACTION_TRUE",
              "ALIGN_PERCENTILE_99",
              "ALIGN_PERCENTILE_95",
              "ALIGN_PERCENTILE_50",
              "ALIGN_PERCENTILE_05",
              "ALIGN_PERCENT_CHANGE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PickTimeSeriesFilter": {
        "description": "Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.",
        "properties": {
          "direction": {
            "description": "How to use the ranking to select time series that pass through the filter.",
            "enum": [
              "DIRECTION_UNSPECIFIED",
              "TOP",
              "BOTTOM"
            ],
            "type": "string"
          },
          "interval": {
            "$ref": "#/$defs/Interval"
          },
          "numTimeSeries": {
            "description": "How many time series to allow to pass through the filter.",
            "format": "int32",
            "type": "integer"
          },
          "rankingMethod": {
            "description": "ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.",
            "enum": [
              "METHOD_UNSPECIFIED",
              "METHOD_MEAN",
              "METHOD_MAX",
              "METHOD_MIN",
              "METHOD_SUM",
              "METHOD_LATEST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Interval": {
        "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive).The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
        "properties": {
          "endTime": {
            "description": "Optional. Exclusive end of the interval.If specified, a Timestamp matching this interval will have to be before the end.",
            "format": "google-datetime",
            "type": "string"
          },
          "startTime": {
            "description": "Optional. Inclusive start of the interval.If specified, a Timestamp matching this interval will have to be the same or after the start.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatisticalTimeSeriesFilter": {
        "description": "A filter that ranks streams based on their statistical relation to other streams in a request. Note: This field is deprecated and completely ignored by the API.",
        "properties": {
          "numTimeSeries": {
            "description": "How many time series to output.",
            "format": "int32",
            "type": "integer"
          },
          "rankingMethod": {
            "description": "rankingMethod is applied to a set of time series, and then the produced value for each individual time series is used to compare a given time series to others. These are methods that cannot be applied stream-by-stream, but rather require the full context of a request to evaluate time series.",
            "enum": [
              "METHOD_UNSPECIFIED",
              "METHOD_CLUSTER_OUTLIER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeSeriesFilterRatio": {
        "description": "A pair of time series filters that define a ratio computation. The output time series is the pair-wise division of each aligned element from the numerator and denominator time series.",
        "properties": {
          "denominator": {
            "$ref": "#/$defs/RatioPart"
          },
          "numerator": {
            "$ref": "#/$defs/RatioPart"
          },
          "pickTimeSeriesFilter": {
            "$ref": "#/$defs/PickTimeSeriesFilter"
          },
          "secondaryAggregation": {
            "$ref": "#/$defs/Aggregation"
          },
          "statisticalTimeSeriesFilter": {
            "$ref": "#/$defs/StatisticalTimeSeriesFilter"
          }
        },
        "type": "object"
      },
      "RatioPart": {
        "description": "Describes a query to build the numerator or denominator of a TimeSeriesFilterRatio.",
        "properties": {
          "aggregation": {
            "$ref": "#/$defs/Aggregation"
          },
          "filter": {
            "description": "Required. The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Scorecard": {
        "description": "A widget showing the latest value of a metric, and how this value relates to one or more thresholds.",
        "properties": {
          "blankView": {
            "$ref": "#/$defs/Empty"
          },
          "gaugeView": {
            "$ref": "#/$defs/GaugeView"
          },
          "sparkChartView": {
            "$ref": "#/$defs/SparkChartView"
          },
          "thresholds": {
            "description": "The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)As an example, consider a scorecard with the following four thresholds: { value: 90, category: 'DANGER', trigger: 'ABOVE', }, { value: 70, category: 'WARNING', trigger: 'ABOVE', }, { value: 10, category: 'DANGER', trigger: 'BELOW', }, { value: 20, category: 'WARNING', trigger: 'BELOW', } Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.",
            "items": {
              "$ref": "#/$defs/Threshold"
            },
            "type": "array"
          },
          "timeSeriesQuery": {
            "$ref": "#/$defs/TimeSeriesQuery"
          }
        },
        "type": "object"
      },
      "GaugeView": {
        "description": "A gauge chart shows where the current value sits within a pre-defined range. The upper and lower bounds should define the possible range of values for the scorecard's query (inclusive).",
        "properties": {
          "lowerBound": {
            "description": "The lower bound for this gauge chart. The value of the chart should always be greater than or equal to this.",
            "format": "double",
            "type": "number"
          },
          "upperBound": {
            "description": "The upper bound for this gauge chart. The value of the chart should always be less than or equal to this.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SparkChartView": {
        "description": "A sparkChart is a small chart suitable for inclusion in a table-cell or inline in text. This message contains the configuration for a sparkChart to show up on a Scorecard, showing recent trends of the scorecard's timeseries.",
        "properties": {
          "minAlignmentPeriod": {
            "description": "The lower bound on data point frequency in the chart implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes it would not make sense to fetch and align data at one minute intervals. This field is optional and exists only as a hint.",
            "format": "google-duration",
            "type": "string"
          },
          "sparkChartType": {
            "description": "Required. The type of sparkchart to show in this chartView.",
            "enum": [
              "SPARK_CHART_TYPE_UNSPECIFIED",
              "SPARK_LINE",
              "SPARK_BAR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Threshold": {
        "description": "Defines a threshold for categorizing time series values.",
        "properties": {
          "color": {
            "description": "The state color for this threshold. Color is not allowed in a XyChart.",
            "enum": [
              "COLOR_UNSPECIFIED",
              "YELLOW",
              "RED"
            ],
            "type": "string"
          },
          "direction": {
            "description": "The direction for the current threshold. Direction is not allowed in a XyChart.",
            "enum": [
              "DIRECTION_UNSPECIFIED",
              "ABOVE",
              "BELOW"
            ],
            "type": "string"
          },
          "label": {
            "description": "A label for the threshold.",
            "type": "string"
          },
          "targetAxis": {
            "description": "The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.",
            "enum": [
              "TARGET_AXIS_UNSPECIFIED",
              "Y1",
              "Y2"
            ],
            "type": "string"
          },
          "value": {
            "description": "The value of the threshold. The value should be defined in the native scale of the metric.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "SectionHeader": {
        "description": "A widget that defines a new section header. Sections populate a table of contents and allow easier navigation of long-form content.",
        "properties": {
          "dividerBelow": {
            "description": "Whether to insert a divider below the section in the table of contents",
            "type": "boolean"
          },
          "subtitle": {
            "description": "The subtitle of the section",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SingleViewGroup": {
        "description": "A widget that groups the other widgets by using a dropdown menu. All widgets that are within the area spanned by the grouping widget are considered member widgets.",
        "properties": {},
        "type": "object"
      },
      "Text": {
        "description": "A widget that displays textual content.",
        "properties": {
          "content": {
            "description": "The text content to be displayed.",
            "type": "string"
          },
          "format": {
            "description": "How the text content is formatted.",
            "enum": [
              "FORMAT_UNSPECIFIED",
              "MARKDOWN",
              "RAW"
            ],
            "type": "string"
          },
          "style": {
            "$ref": "#/$defs/TextStyle"
          }
        },
        "type": "object"
      },
      "TextStyle": {
        "description": "Properties that determine how the title and content are styled",
        "properties": {
          "backgroundColor": {
            "description": "The background color as a hex string. \"#RRGGBB\" or \"#RGB\"",
            "type": "string"
          },
          "fontSize": {
            "description": "Font sizes for both the title and content. The title will still be larger relative to the content.",
            "enum": [
              "FONT_SIZE_UNSPECIFIED",
              "FS_EXTRA_SMALL",
              "FS_SMALL",
              "FS_MEDIUM",
              "FS_LARGE",
              "FS_EXTRA_LARGE"
            ],
            "type": "string"
          },
          "horizontalAlignment": {
            "description": "The horizontal alignment of both the title and content",
            "enum": [
              "HORIZONTAL_ALIGNMENT_UNSPECIFIED",
              "H_LEFT",
              "H_CENTER",
              "H_RIGHT"
            ],
            "type": "string"
          },
          "padding": {
            "description": "The amount of padding around the widget",
            "enum": [
              "PADDING_SIZE_UNSPECIFIED",
              "P_EXTRA_SMALL",
              "P_SMALL",
              "P_MEDIUM",
              "P_LARGE",
              "P_EXTRA_LARGE"
            ],
            "type": "string"
          },
          "pointerLocation": {
            "description": "The pointer location for this widget (also sometimes called a \"tail\")",
            "enum": [
              "POINTER_LOCATION_UNSPECIFIED",
              "PL_TOP",
              "PL_RIGHT",
              "PL_BOTTOM",
              "PL_LEFT",
              "PL_TOP_LEFT",
              "PL_TOP_RIGHT",
              "PL_RIGHT_TOP",
              "PL_RIGHT_BOTTOM",
              "PL_BOTTOM_RIGHT",
              "PL_BOTTOM_LEFT",
              "PL_LEFT_BOTTOM",
              "PL_LEFT_TOP"
            ],
            "type": "string"
          },
          "textColor": {
            "description": "The text color as a hex string. \"#RRGGBB\" or \"#RGB\"",
            "type": "string"
          },
          "verticalAlignment": {
            "description": "The vertical alignment of both the title and content",
            "enum": [
              "VERTICAL_ALIGNMENT_UNSPECIFIED",
              "V_TOP",
              "V_CENTER",
              "V_BOTTOM"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeSeriesTable": {
        "description": "A table that displays time series data.",
        "properties": {
          "columnSettings": {
            "description": "Optional. The list of the persistent column settings for the table.",
            "items": {
              "$ref": "#/$defs/ColumnSettings"
            },
            "type": "array"
          },
          "dataSets": {
            "description": "Required. The data displayed in this table.",
            "items": {
              "$ref": "#/$defs/TableDataSet"
            },
            "type": "array"
          },
          "metricVisualization": {
            "description": "Optional. Store rendering strategy",
            "enum": [
              "METRIC_VISUALIZATION_UNSPECIFIED",
              "NUMBER",
              "BAR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ColumnSettings": {
        "description": "The persistent settings for a table's columns.",
        "properties": {
          "column": {
            "description": "Required. The id of the column.",
            "type": "string"
          },
          "visible": {
            "description": "Required. Whether the column should be visible on page load.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TableDataSet": {
        "description": "Groups a time series query definition with table options.",
        "properties": {
          "minAlignmentPeriod": {
            "description": "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
            "format": "google-duration",
            "type": "string"
          },
          "tableDisplayOptions": {
            "$ref": "#/$defs/TableDisplayOptions"
          },
          "tableTemplate": {
            "description": "Optional. A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value i.e. \"${resource.labels.project_id}.\"",
            "type": "string"
          },
          "timeSeriesQuery": {
            "$ref": "#/$defs/TimeSeriesQuery"
          }
        },
        "type": "object"
      },
      "TableDisplayOptions": {
        "description": "Table display options that can be reused.",
        "properties": {
          "shownColumns": {
            "deprecated": true,
            "description": "Optional. This field is unused and has been replaced by TimeSeriesTable.column_settings",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "XyChart": {
        "description": "A chart that displays data on a 2D (X and Y axes) plane.",
        "properties": {
          "chartOptions": {
            "$ref": "#/$defs/ChartOptions"
          },
          "dataSets": {
            "description": "Required. The data displayed in this chart.",
            "items": {
              "$ref": "#/$defs/DataSet"
            },
            "type": "array"
          },
          "thresholds": {
            "description": "Threshold lines drawn horizontally across the chart.",
            "items": {
              "$ref": "#/$defs/Threshold"
            },
            "type": "array"
          },
          "timeshiftDuration": {
            "description": "The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.",
            "format": "google-duration",
            "type": "string"
          },
          "xAxis": {
            "$ref": "#/$defs/Axis"
          },
          "y2Axis": {
            "$ref": "#/$defs/Axis"
          },
          "yAxis": {
            "$ref": "#/$defs/Axis"
          }
        },
        "type": "object"
      },
      "ChartOptions": {
        "description": "Options to control visual rendering of a chart.",
        "properties": {
          "displayHorizontal": {
            "description": "Preview: Configures whether the charted values are shown on the horizontal or vertical axis. By default, values are represented the vertical axis. This is a preview feature and may be subject to change before final release.",
            "type": "boolean"
          },
          "mode": {
            "description": "The chart mode.",
            "enum": [
              "MODE_UNSPECIFIED",
              "COLOR",
              "X_RAY",
              "STATS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataSet": {
        "description": "Groups a time series query definition with charting options.",
        "properties": {
          "breakdowns": {
            "description": "Optional. The collection of breakdowns to be applied to the dataset.",
            "items": {
              "$ref": "#/$defs/Breakdown"
            },
            "type": "array"
          },
          "dimensions": {
            "description": "Optional. A collection of dimension columns.",
            "items": {
              "$ref": "#/$defs/Dimension"
            },
            "type": "array"
          },
          "legendTemplate": {
            "description": "A template string for naming TimeSeries in the resulting data set. This should be a string with interpolations of the form ${label_name}, which will resolve to the label's value.",
            "type": "string"
          },
          "measures": {
            "description": "Optional. A collection of measures.",
            "items": {
              "$ref": "#/$defs/Measure"
            },
            "type": "array"
          },
          "minAlignmentPeriod": {
            "description": "Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.",
            "format": "google-duration",
            "type": "string"
          },
          "plotType": {
            "description": "How this data should be plotted on the chart.",
            "enum": [
              "PLOT_TYPE_UNSPECIFIED",
              "LINE",
              "STACKED_AREA",
              "STACKED_BAR",
              "HEATMAP"
            ],
            "type": "string"
          },
          "targetAxis": {
            "description": "Optional. The target axis to use for plotting the metric.",
            "enum": [
              "TARGET_AXIS_UNSPECIFIED",
              "Y1",
              "Y2"
            ],
            "type": "string"
          },
          "timeSeriesQuery": {
            "$ref": "#/$defs/TimeSeriesQuery"
          }
        },
        "type": "object"
      },
      "Breakdown": {
        "description": "Preview: A breakdown is an aggregation applied to the measures over a specified column. A breakdown can result in multiple series across a category for the provided measure. This is a preview feature and may be subject to change before final release.",
        "properties": {
          "aggregationFunction": {
            "$ref": "#/$defs/AggregationFunction"
          },
          "column": {
            "description": "Required. The name of the column in the dataset containing the breakdown values.",
            "type": "string"
          },
          "limit": {
            "description": "Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are applied. The list of breakdowns is dependent on the value of the sort_order field.",
            "format": "int32",
            "type": "integer"
          },
          "sortOrder": {
            "description": "Required. The sort order is applied to the values of the breakdown column.",
            "enum": [
              "SORT_ORDER_UNSPECIFIED",
              "SORT_ORDER_NONE",
              "SORT_ORDER_ASCENDING",
              "SORT_ORDER_DESCENDING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Axis": {
        "description": "A chart axis.",
        "properties": {
          "label": {
            "description": "The label of the axis.",
            "type": "string"
          },
          "scale": {
            "description": "The axis scale. By default, a linear scale is used.",
            "enum": [
              "SCALE_UNSPECIFIED",
              "LINEAR",
              "LOG10"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashboardFilter": {
        "description": "A filter to reduce the amount of data charted in relevant widgets.",
        "properties": {
          "filterType": {
            "description": "The specified filter type",
            "enum": [
              "FILTER_TYPE_UNSPECIFIED",
              "RESOURCE_LABEL",
              "METRIC_LABEL",
              "USER_METADATA_LABEL",
              "SYSTEM_METADATA_LABEL",
              "GROUP"
            ],
            "type": "string"
          },
          "labelKey": {
            "description": "Required. The key for the label",
            "type": "string"
          },
          "stringValue": {
            "description": "A variable-length string value.",
            "type": "string"
          },
          "templateVariable": {
            "description": "The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GridLayout": {
        "description": "A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.",
        "properties": {
          "columns": {
            "description": "The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.",
            "format": "int64",
            "type": "string"
          },
          "widgets": {
            "description": "The informational elements that are arranged into the columns row-first.",
            "items": {
              "$ref": "#/$defs/Widget"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MosaicLayout": {
        "description": "A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.",
        "properties": {
          "columns": {
            "description": "The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.",
            "format": "int32",
            "type": "integer"
          },
          "tiles": {
            "description": "The tiles to display.",
            "items": {
              "$ref": "#/$defs/Tile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Tile": {
        "description": "A single tile in the mosaic. The placement and size of the tile are configurable.",
        "properties": {
          "height": {
            "description": "The height of the tile, measured in grid blocks. Tiles must have a minimum height of 1.",
            "format": "int32",
            "type": "integer"
          },
          "widget": {
            "$ref": "#/$defs/Widget"
          },
          "width": {
            "description": "The width of the tile, measured in grid blocks. Tiles must have a minimum width of 1.",
            "format": "int32",
            "type": "integer"
          },
          "xPos": {
            "description": "The zero-indexed position of the tile in grid blocks relative to the left edge of the grid. Tiles must be contained within the specified number of columns. x_pos cannot be negative.",
            "format": "int32",
            "type": "integer"
          },
          "yPos": {
            "description": "The zero-indexed position of the tile in grid blocks relative to the top edge of the grid. y_pos cannot be negative.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "RowLayout": {
        "description": "A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.",
        "properties": {
          "rows": {
            "description": "The rows of content to display.",
            "items": {
              "$ref": "#/$defs/Row"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Row": {
        "description": "Defines the layout properties and content for a row.",
        "properties": {
          "weight": {
            "description": "The relative weight of this row. The row weight is used to adjust the height of rows on the screen (relative to peers). Greater the weight, greater the height of the row on the screen. If omitted, a value of 1 is used while rendering.",
            "format": "int64",
            "type": "string"
          },
          "widgets": {
            "description": "The display widgets arranged horizontally in this row.",
            "items": {
              "$ref": "#/$defs/Widget"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://monitoring.googleapis.com//v1/{parent}/dashboards{?validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**columnLayout**: A simplified layout that divides the available space into vertical columns and arranges a set of widgets vertically in each column.",
              {
                "$ul": [
                  "**columns**: The columns of content to display."
                ]
              }
            ],
            "**dashboardFilters**: Filters to reduce the amount of data charted based on the filter criteria.",
            "**displayName**: Required. The mutable, human-readable name.",
            "**etag**: etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.",
            [
              "**gridLayout**: A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.",
              {
                "$ul": [
                  "**columns**: The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.",
                  "**widgets**: The informational elements that are arranged into the columns row-first."
                ]
              }
            ],
            "**labels**: Labels applied to the dashboard",
            [
              "**mosaicLayout**: A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.",
              {
                "$ul": [
                  "**columns**: The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.",
                  "**tiles**: The tiles to display."
                ]
              }
            ],
            "**name**: Identifier. The resource name of the dashboard.",
            [
              "**rowLayout**: A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.",
              {
                "$ul": [
                  "**rows**: The rows of content to display."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
