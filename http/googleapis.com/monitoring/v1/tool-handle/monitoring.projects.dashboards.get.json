{
  "name": "monitoring_projects_dashboards_get",
  "description": "Fetches a specific dashboard.This method requires the monitoring.dashboards.get permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The resource name of the Dashboard. The format is one of: dashboards/[DASHBOARD_ID] (for system dashboards) projects/[PROJECT_ID_OR_NUMBER]/dashboards/[DASHBOARD_ID] (for custom dashboards)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://monitoring.googleapis.com//v1/{name}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Google Stackdriver dashboard. Dashboards define the content and layout of pages in the Stackdriver web application.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**columnLayout**: A simplified layout that divides the available space into vertical columns and arranges a set of widgets vertically in each column.",
              {
                "$ul": [
                  "**columns**: The columns of content to display."
                ]
              }
            ],
            "**dashboardFilters**: Filters to reduce the amount of data charted based on the filter criteria.",
            "**displayName**: Required. The mutable, human-readable name.",
            "**etag**: etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. An etag is returned in the response to GetDashboard, and users are expected to put that etag in the request to UpdateDashboard to ensure that their change will be applied to the same version of the Dashboard configuration. The field should not be passed during dashboard creation.",
            [
              "**gridLayout**: A basic layout divides the available space into vertical columns of equal width and arranges a list of widgets using a row-first strategy.",
              {
                "$ul": [
                  "**columns**: The number of columns into which the view's width is divided. If omitted or set to zero, a system default will be used while rendering.",
                  "**widgets**: The informational elements that are arranged into the columns row-first."
                ]
              }
            ],
            "**labels**: Labels applied to the dashboard",
            [
              "**mosaicLayout**: A mosaic layout divides the available space into a grid of blocks, and overlays the grid with tiles. Unlike GridLayout, tiles may span multiple grid blocks and can be placed at arbitrary locations in the grid.",
              {
                "$ul": [
                  "**columns**: The number of columns in the mosaic grid. The number of columns must be between 1 and 12, inclusive.",
                  "**tiles**: The tiles to display."
                ]
              }
            ],
            "**name**: Identifier. The resource name of the dashboard.",
            [
              "**rowLayout**: A simplified layout that divides the available space into rows and arranges a set of widgets horizontally in each row.",
              {
                "$ul": [
                  "**rows**: The rows of content to display."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
