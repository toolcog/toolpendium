{
  "name": "container_projects_zones_clusters_get",
  "description": "Gets the details of a specific cluster.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field."
      },
      "zone": {
        "type": "string",
        "description": "Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field."
      },
      "clusterId": {
        "type": "string",
        "description": "Deprecated. The name of the cluster to retrieve. This field has been deprecated and replaced by the name field."
      },
      "name": {
        "type": "string",
        "description": "The name (project, location, cluster) of the cluster to retrieve. Specified in the format `projects/*/locations/*/clusters/*`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "projectId",
      "zone",
      "clusterId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://container.googleapis.com//v1/projects/{projectId}/zones/{zone}/clusters/{clusterId}{?name,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Google Kubernetes Engine cluster.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**addonsConfig**: Configuration for the addons that can be automatically spun up in the cluster, enabling additional functionality.",
              {
                "$ul": [
                  [
                    "**cloudRunConfig**: Configuration options for the Cloud Run feature.",
                    {
                      "$ul": [
                        "**disabled**: Whether Cloud Run addon is enabled for this cluster.",
                        "**loadBalancerType**: Which load balancer type is installed for Cloud Run."
                      ]
                    }
                  ],
                  [
                    "**configConnectorConfig**: Configuration options for the Config Connector add-on.",
                    {
                      "$ul": [
                        "**enabled**: Whether Cloud Connector is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**dnsCacheConfig**: Configuration for NodeLocal DNSCache",
                    {
                      "$ul": [
                        "**enabled**: Whether NodeLocal DNSCache is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**gcePersistentDiskCsiDriverConfig**: Configuration for the Compute Engine PD CSI driver.",
                    {
                      "$ul": [
                        "**enabled**: Whether the Compute Engine PD CSI driver is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**gcpFilestoreCsiDriverConfig**: Configuration for the GCP Filestore CSI driver.",
                    {
                      "$ul": [
                        "**enabled**: Whether the GCP Filestore CSI driver is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**gcsFuseCsiDriverConfig**: Configuration for the Cloud Storage Fuse CSI driver.",
                    {
                      "$ul": [
                        "**enabled**: Whether the Cloud Storage Fuse CSI driver is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**gkeBackupAgentConfig**: Configuration for the Backup for GKE Agent.",
                    {
                      "$ul": [
                        "**enabled**: Whether the Backup for GKE agent is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**horizontalPodAutoscaling**: Configuration options for the horizontal pod autoscaling feature, which increases or decreases the number of replica pods a replication controller has based on the resource usage of the existing pods.",
                    {
                      "$ul": [
                        "**disabled**: Whether the Horizontal Pod Autoscaling feature is enabled in the cluster. When enabled, it ensures that metrics are collected into Stackdriver Monitoring."
                      ]
                    }
                  ],
                  [
                    "**httpLoadBalancing**: Configuration options for the HTTP (L7) load balancing controller addon, which makes it easy to set up HTTP load balancers for services in a cluster.",
                    {
                      "$ul": [
                        "**disabled**: Whether the HTTP Load Balancing controller is enabled in the cluster. When enabled, it runs a small pod in the cluster that manages the load balancers."
                      ]
                    }
                  ],
                  [
                    "**kubernetesDashboard**: Configuration for the Kubernetes Dashboard.",
                    {
                      "$ul": [
                        "**disabled**: Whether the Kubernetes Dashboard is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**networkPolicyConfig**: Configuration for NetworkPolicy. This only tracks whether the addon is enabled or not on the Master, it does not track whether network policy is enabled for the nodes.",
                    {
                      "$ul": [
                        "**disabled**: Whether NetworkPolicy is enabled for this cluster."
                      ]
                    }
                  ],
                  [
                    "**statefulHaConfig**: Configuration for the Stateful HA add-on.",
                    {
                      "$ul": [
                        "**enabled**: Whether the Stateful HA add-on is enabled for this cluster."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**authenticatorGroupsConfig**: Configuration for returning group information from authenticators.",
              {
                "$ul": [
                  "**enabled**: Whether this cluster should return group membership lookups during authentication using a group of security groups.",
                  "**securityGroup**: The name of the security group-of-groups to be used. Only relevant if enabled = true."
                ]
              }
            ],
            [
              "**autopilot**: Autopilot is the configuration for Autopilot settings on the cluster.",
              {
                "$ul": [
                  "**enabled**: Enable Autopilot",
                  [
                    "**workloadPolicyConfig**: WorkloadPolicyConfig is the configuration of workload policy for autopilot clusters.",
                    {
                      "$ul": [
                        "**allowNetAdmin**: If true, workloads can use NET_ADMIN capability."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**autoscaling**: ClusterAutoscaling contains global, per-cluster information required by Cluster Autoscaler to automatically adjust the size of the cluster and create/delete node pools based on the current needs.",
              {
                "$ul": [
                  "**autoprovisioningLocations**: The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes can be created by NAP.",
                  [
                    "**autoprovisioningNodePoolDefaults**: AutoprovisioningNodePoolDefaults contains defaults for a node pool created by NAP.",
                    {
                      "$ul": [
                        "**bootDiskKmsKey**: The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption",
                        "**diskSizeGb**: Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.",
                        "**diskType**: Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'",
                        "**imageType**: The image type to use for NAP created node. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.",
                        "**insecureKubeletReadonlyPortEnabled**: Enable or disable Kubelet read only port.",
                        [
                          "**management**: NodeManagement defines the set of node management services turned on for the node pool.",
                          {
                            "$ul": [
                              "**autoRepair**: A flag that specifies whether the node auto-repair is enabled for the node pool. If enabled, the nodes in this node pool will be monitored and, if they fail health checks too many times, an automatic repair action will be triggered.",
                              "**autoUpgrade**: A flag that specifies whether node auto-upgrade is enabled for the node pool. If enabled, node auto-upgrade helps keep the nodes in your node pool up to date with the latest release version of Kubernetes.",
                              [
                                "**upgradeOptions**: AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.",
                                {
                                  "$ul": [
                                    "**autoUpgradeStartTime**: [Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
                                    "**description**: [Output only] This field is set when upgrades are about to commence with the description of the upgrade."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**minCpuPlatform**: Deprecated. Minimum CPU platform to be used for NAP created node pools. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as minCpuPlatform: Intel Haswell or minCpuPlatform: Intel Sandy Bridge. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform). This field is deprecated, min_cpu_platform should be specified using `cloud.google.com/requested-min-cpu-platform` label selector on the pod. To unset the min cpu platform field pass \"automatic\" as field value.",
                        "**oauthScopes**: Scopes that are used by NAP when creating node pools.",
                        "**serviceAccount**: The Google Cloud Platform Service Account to be used by the node VMs.",
                        [
                          "**shieldedInstanceConfig**: A set of Shielded Instance options.",
                          {
                            "$ul": [
                              "**enableIntegrityMonitoring**: Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.",
                              "**enableSecureBoot**: Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails."
                            ]
                          }
                        ],
                        [
                          "**upgradeSettings**: These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is ROLLING, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.",
                          {
                            "$ul": [
                              [
                                "**blueGreenSettings**: Settings for blue-green upgrade.",
                                {
                                  "$ul": [
                                    "**nodePoolSoakDuration**: Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.",
                                    [
                                      "**standardRolloutPolicy**: Standard rollout policy is the default policy for blue-green.",
                                      {
                                        "$ul": [
                                          "**batchNodeCount**: Number of blue nodes to drain in a batch.",
                                          "**batchPercentage**: Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].",
                                          "**batchSoakDuration**: Soak time after each batch gets drained. Default to zero."
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "**maxSurge**: The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.",
                              "**maxUnavailable**: The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.",
                              "**strategy**: Update strategy of the node pool."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**autoscalingProfile**: Defines autoscaling behaviour.",
                  "**enableNodeAutoprovisioning**: Enables automatic node pool creation and deletion.",
                  "**resourceLimits**: Contains global constraints regarding minimum and maximum amount of resources in the cluster."
                ]
              }
            ],
            [
              "**binaryAuthorization**: Configuration for Binary Authorization.",
              {
                "$ul": [
                  "**enabled**: This field is deprecated. Leave this unset and instead configure BinaryAuthorization using evaluation_mode. If evaluation_mode is set to anything other than EVALUATION_MODE_UNSPECIFIED, this field is ignored.",
                  "**evaluationMode**: Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED."
                ]
              }
            ],
            "**clusterIpv4Cidr**: The IP address range of the container pods in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`). Leave blank to have one automatically chosen or specify a `/14` block in `10.0.0.0/8`.",
            "**conditions**: Which conditions caused the current cluster state.",
            [
              "**confidentialNodes**: ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.",
              {
                "$ul": [
                  "**enabled**: Whether Confidential Nodes feature is enabled."
                ]
              }
            ],
            [
              "**costManagementConfig**: Configuration for fine-grained cost management feature.",
              {
                "$ul": [
                  "**enabled**: Whether the feature is enabled or not."
                ]
              }
            ],
            "**createTime**: [Output only] The time the cluster was created, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            "**currentMasterVersion**: [Output only] The current software version of the master endpoint.",
            "**currentNodeCount**: [Output only] The number of nodes currently in the cluster. Deprecated. Call Kubernetes API directly to retrieve node information.",
            "**currentNodeVersion**: [Output only] Deprecated, use [NodePools.version](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools) instead. The current version of the node software components. If they are currently at multiple versions because they're in the process of being upgraded, this reflects the minimum version of all nodes.",
            [
              "**databaseEncryption**: Configuration of etcd encryption.",
              {
                "$ul": [
                  "**keyName**: Name of CloudKMS key to use for the encryption of secrets in etcd. Ex. projects/my-project/locations/global/keyRings/my-ring/cryptoKeys/my-key",
                  "**state**: The desired state of etcd encryption."
                ]
              }
            ],
            [
              "**defaultMaxPodsConstraint**: Constraints applied to pods.",
              {
                "$ul": [
                  "**maxPodsPerNode**: Constraint enforced on the max num of pods per node."
                ]
              }
            ],
            "**description**: An optional description of this cluster.",
            [
              "**enableK8sBetaApis**: K8sBetaAPIConfig , configuration for beta APIs",
              {
                "$ul": [
                  "**enabledApis**: Enabled k8s beta APIs."
                ]
              }
            ],
            "**enableKubernetesAlpha**: Kubernetes alpha features are enabled on this cluster. This includes alpha API groups (e.g. v1alpha1) and features that may not be production ready in the kubernetes version of the master and nodes. The cluster has no SLA for uptime and master/node upgrades are disabled. Alpha enabled clusters are automatically deleted thirty days after creation.",
            "**enableTpu**: Enable the ability to use Cloud TPUs in this cluster.",
            "**endpoint**: [Output only] The IP address of this cluster's master endpoint. The endpoint can be accessed from the internet at `https://username:password@endpoint/`. See the `masterAuth` property of this resource for username and password information.",
            [
              "**enterpriseConfig**: EnterpriseConfig is the cluster enterprise configuration.",
              {
                "$ul": [
                  "**clusterTier**: Output only. [Output only] cluster_tier specifies the premium tier of the cluster."
                ]
              }
            ],
            "**etag**: This checksum is computed by the server based on the value of cluster fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.",
            "**expireTime**: [Output only] The time the cluster will be automatically deleted in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            [
              "**fleet**: Fleet is the fleet configuration for the cluster.",
              {
                "$ul": [
                  "**membership**: [Output only] The full resource name of the registered fleet membership of the cluster, in the format `//gkehub.googleapis.com/projects/*/locations/*/memberships/*`.",
                  "**preRegistered**: [Output only] Whether the cluster has been registered through the fleet API.",
                  "**project**: The Fleet host project(project ID or project number) where this cluster will be registered to. This field cannot be changed after the cluster has been registered."
                ]
              }
            ],
            "**id**: Output only. Unique id for the cluster.",
            [
              "**identityServiceConfig**: IdentityServiceConfig is configuration for Identity Service which allows customers to use external identity providers with the K8S API",
              {
                "$ul": [
                  "**enabled**: Whether to enable the Identity Service component"
                ]
              }
            ],
            "**initialClusterVersion**: The initial Kubernetes version for this cluster. Valid versions are those found in validMasterVersions returned by getServerConfig. The version can be upgraded over time; such upgrades are reflected in currentMasterVersion and currentNodeVersion. Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"\",\"-\": picks the default Kubernetes version",
            "**initialNodeCount**: The number of nodes to create in this cluster. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota. For requests, this field should only be used in lieu of a \"node_pool\" object, since this configuration (along with the \"node_config\") will be used to create a \"NodePool\" object with an auto-generated name. Do not use this and a node_pool at the same time. This field is deprecated, use node_pool.initial_node_count instead.",
            "**instanceGroupUrls**: Deprecated. Use node_pools.instance_group_urls.",
            [
              "**ipAllocationPolicy**: Configuration for controlling how IPs are allocated in the cluster.",
              {
                "$ul": [
                  [
                    "**additionalPodRangesConfig**: AdditionalPodRangesConfig is the configuration for additional pod secondary ranges supporting the ClusterUpdate message.",
                    {
                      "$ul": [
                        "**podRangeInfo**: Output only. [Output only] Information for additional pod range.",
                        "**podRangeNames**: Name for pod secondary ipv4 range which has the actual range defined ahead."
                      ]
                    }
                  ],
                  "**clusterIpv4Cidr**: This field is deprecated, use cluster_ipv4_cidr_block.",
                  "**clusterIpv4CidrBlock**: The IP address range for the cluster pod IPs. If this field is set, then `cluster.cluster_ipv4_cidr` must be left blank. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.",
                  "**clusterSecondaryRangeName**: The name of the secondary range to be used for the cluster CIDR block. The secondary range will be used for pod IP addresses. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.",
                  "**createSubnetwork**: Whether a new subnetwork will be created automatically for the cluster. This field is only applicable when `use_ip_aliases` is true.",
                  "**defaultPodIpv4RangeUtilization**: Output only. [Output only] The utilization of the cluster default IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.",
                  "**ipv6AccessType**: The ipv6 access type (internal or external) when create_subnetwork is true",
                  "**nodeIpv4Cidr**: This field is deprecated, use node_ipv4_cidr_block.",
                  "**nodeIpv4CidrBlock**: The IP address range of the instance IPs in this cluster. This is applicable only if `create_subnetwork` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.",
                  [
                    "**podCidrOverprovisionConfig**: [PRIVATE FIELD] Config for pod CIDR size overprovisioning.",
                    {
                      "$ul": [
                        "**disable**: Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default."
                      ]
                    }
                  ],
                  "**servicesIpv4Cidr**: This field is deprecated, use services_ipv4_cidr_block.",
                  "**servicesIpv4CidrBlock**: The IP address range of the services IPs in this cluster. If blank, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.",
                  "**servicesIpv6CidrBlock**: Output only. [Output only] The services IPv6 CIDR block for the cluster.",
                  "**servicesSecondaryRangeName**: The name of the secondary range to be used as for the services CIDR block. The secondary range will be used for service ClusterIPs. This must be an existing secondary range associated with the cluster subnetwork. This field is only applicable with use_ip_aliases is true and create_subnetwork is false.",
                  "**stackType**: The IP stack type of the cluster",
                  "**subnetIpv6CidrBlock**: Output only. [Output only] The subnet's IPv6 CIDR block used by nodes and pods.",
                  "**subnetworkName**: A custom subnetwork name to be used if `create_subnetwork` is true. If this field is empty, then an automatic name will be chosen for the new subnetwork.",
                  "**tpuIpv4CidrBlock**: The IP address range of the Cloud TPUs in this cluster. If unspecified, a range will be automatically chosen with the default size. This field is only applicable when `use_ip_aliases` is true. If unspecified, the range will use the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.",
                  "**useIpAliases**: Whether alias IPs will be used for pod IPs in the cluster. This is used in conjunction with use_routes. It cannot be true if use_routes is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode",
                  "**useRoutes**: Whether routes will be used for pod IPs in the cluster. This is used in conjunction with use_ip_aliases. It cannot be true if use_ip_aliases is true. If both use_ip_aliases and use_routes are false, then the server picks the default IP allocation mode"
                ]
              }
            ],
            "**labelFingerprint**: The fingerprint of the set of labels for this cluster.",
            [
              "**legacyAbac**: Configuration for the legacy Attribute Based Access Control authorization mode.",
              {
                "$ul": [
                  "**enabled**: Whether the ABAC authorizer is enabled for this cluster. When enabled, identities in the system, including service accounts, nodes, and controllers, will have statically granted permissions beyond those provided by the RBAC configuration or IAM."
                ]
              }
            ],
            "**location**: [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.",
            "**locations**: The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the cluster's nodes should be located. This field provides a default value if [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) are not specified during node pool creation. Warning: changing cluster locations will update the [NodePool.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters.nodePools#NodePool.FIELDS.locations) of all node pools and will result in nodes being added and/or removed.",
            [
              "**loggingConfig**: LoggingConfig is cluster logging configuration.",
              {
                "$ul": [
                  [
                    "**componentConfig**: LoggingComponentConfig is cluster logging component configuration.",
                    {
                      "$ul": [
                        "**enableComponents**: Select components to collect logs. An empty set would disable all logging."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**loggingService**: The logging service the cluster should use to write logs. Currently available options: * `logging.googleapis.com/kubernetes` - The Cloud Logging service with a Kubernetes-native resource model * `logging.googleapis.com` - The legacy Cloud Logging service (no longer available as of GKE 1.15). * `none` - no logs will be exported from the cluster. If left as an empty string,`logging.googleapis.com/kubernetes` will be used for GKE 1.14+ or `logging.googleapis.com` for earlier versions.",
            [
              "**maintenancePolicy**: MaintenancePolicy defines the maintenance policy to be used for the cluster.",
              {
                "$ul": [
                  "**resourceVersion**: A hash identifying the version of this policy, so that updates to fields of the policy won't accidentally undo intermediate changes (and so that users of the API unaware of some fields won't accidentally remove other fields). Make a `get()` request to the cluster to get the current resource version and include it with requests to set the policy.",
                  [
                    "**window**: MaintenanceWindow defines the maintenance window to be used for the cluster.",
                    {
                      "$ul": [
                        [
                          "**dailyMaintenanceWindow**: Time window specified for daily maintenance operations.",
                          {
                            "$ul": [
                              "**duration**: [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario. Duration will be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format \"PTnHnMnS\".",
                              "**startTime**: Time within the maintenance window to start the maintenance operations. Time format should be in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format \"HH:MM\", where HH : [00-23] and MM : [00-59] GMT."
                            ]
                          }
                        ],
                        "**maintenanceExclusions**: Exceptions to maintenance window. Non-emergency maintenance should not occur in these windows.",
                        [
                          "**recurringWindow**: Represents an arbitrary window of time that recurs.",
                          {
                            "$ul": [
                              "**recurrence**: An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how this window reccurs. They go on for the span of time between the start and end time. For example, to have something repeat every weekday, you'd use: `FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR` To repeat some window daily (equivalent to the DailyMaintenanceWindow): `FREQ=DAILY` For the first weekend of every month: `FREQ=MONTHLY;BYSETPOS=1;BYDAY=SA,SU` This specifies how frequently the window starts. Eg, if you wanted to have a 9-5 UTC-4 window every weekday, you'd use something like: ``` start time = 2019-01-01T09:00:00-0400 end time = 2019-01-01T17:00:00-0400 recurrence = FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR ``` Windows can span multiple days. Eg, to make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC: ``` start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA ``` Note the start and end time's specific dates are largely arbitrary except to specify duration of the window and when it first starts. The FREQ values of HOURLY, MINUTELY, and SECONDLY are not supported.",
                              [
                                "**window**: Represents an arbitrary window of time.",
                                {
                                  "$ul": [
                                    "**endTime**: The time that the window ends. The end time should take place after the start time.",
                                    [
                                      "**maintenanceExclusionOptions**: Represents the Maintenance exclusion option.",
                                      {
                                        "$ul": [
                                          "**scope**: Scope specifies the upgrade scope which upgrades are blocked by the exclusion."
                                        ]
                                      }
                                    ],
                                    "**startTime**: The time that the window first starts."
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**masterAuth**: The authentication information for accessing the master endpoint. Authentication can be done using HTTP basic auth or using client certificates.",
              {
                "$ul": [
                  "**clientCertificate**: [Output only] Base64-encoded public certificate used by clients to authenticate to the cluster endpoint.",
                  [
                    "**clientCertificateConfig**: Configuration for client certificates on the cluster.",
                    {
                      "$ul": [
                        "**issueClientCertificate**: Issue a client certificate."
                      ]
                    }
                  ],
                  "**clientKey**: [Output only] Base64-encoded private key used by clients to authenticate to the cluster endpoint.",
                  "**clusterCaCertificate**: [Output only] Base64-encoded public certificate that is the root of trust for the cluster.",
                  "**password**: The password to use for HTTP basic authentication to the master endpoint. Because the master endpoint is open to the Internet, you should create a strong password. If a password is provided for cluster creation, username must be non-empty. Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication",
                  "**username**: The username to use for HTTP basic authentication to the master endpoint. For clusters v1.6.0 and later, basic authentication can be disabled by leaving username unspecified (or setting it to the empty string). Warning: basic authentication is deprecated, and will be removed in GKE control plane versions 1.19 and newer. For a list of recommended authentication methods, see: https://cloud.google.com/kubernetes-engine/docs/how-to/api-server-authentication"
                ]
              }
            ],
            [
              "**masterAuthorizedNetworksConfig**: Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.",
              {
                "$ul": [
                  "**cidrBlocks**: cidr_blocks define up to 50 external networks that could access Kubernetes master through HTTPS.",
                  "**enabled**: Whether or not master authorized networks is enabled.",
                  "**gcpPublicCidrsAccessEnabled**: Whether master is accessbile via Google Compute Engine Public IP addresses."
                ]
              }
            ],
            [
              "**meshCertificates**: Configuration for issuance of mTLS keys and certificates to Kubernetes pods.",
              {
                "$ul": [
                  "**enableCertificates**: enable_certificates controls issuance of workload mTLS certificates. If set, the GKE Workload Identity Certificates controller and node agent will be deployed in the cluster, which can then be configured by creating a WorkloadCertificateConfig Custom Resource. Requires Workload Identity (workload_pool must be non-empty)."
                ]
              }
            ],
            [
              "**monitoringConfig**: MonitoringConfig is cluster monitoring configuration.",
              {
                "$ul": [
                  [
                    "**advancedDatapathObservabilityConfig**: AdvancedDatapathObservabilityConfig specifies configuration of observability features of advanced datapath.",
                    {
                      "$ul": [
                        "**enableMetrics**: Expose flow metrics on nodes",
                        "**enableRelay**: Enable Relay component",
                        "**relayMode**: Method used to make Relay available"
                      ]
                    }
                  ],
                  [
                    "**componentConfig**: MonitoringComponentConfig is cluster monitoring component configuration.",
                    {
                      "$ul": [
                        "**enableComponents**: Select components to collect metrics. An empty set would disable all monitoring."
                      ]
                    }
                  ],
                  [
                    "**managedPrometheusConfig**: ManagedPrometheusConfig defines the configuration for Google Cloud Managed Service for Prometheus.",
                    {
                      "$ul": [
                        "**enabled**: Enable Managed Collection."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**monitoringService**: The monitoring service the cluster should use to write metrics. Currently available options: * \"monitoring.googleapis.com/kubernetes\" - The Cloud Monitoring service with a Kubernetes-native resource model * `monitoring.googleapis.com` - The legacy Cloud Monitoring service (no longer available as of GKE 1.15). * `none` - No metrics will be exported from the cluster. If left as an empty string,`monitoring.googleapis.com/kubernetes` will be used for GKE 1.14+ or `monitoring.googleapis.com` for earlier versions.",
            "**name**: The name of this cluster. The name must be unique within this project and location (e.g. zone or region), and can be up to 40 characters with the following restrictions: * Lowercase letters, numbers, and hyphens only. * Must start with a letter. * Must end with a number or a letter.",
            "**network**: The name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. If left unspecified, the `default` network will be used.",
            [
              "**networkConfig**: NetworkConfig reports the relative names of network & subnetwork.",
              {
                "$ul": [
                  "**datapathProvider**: The desired datapath provider for this cluster. By default, uses the IPTables-based kube-proxy implementation.",
                  [
                    "**defaultSnatStatus**: DefaultSnatStatus contains the desired state of whether default sNAT should be disabled on the cluster.",
                    {
                      "$ul": [
                        "**disabled**: Disables cluster default sNAT rules."
                      ]
                    }
                  ],
                  [
                    "**dnsConfig**: DNSConfig contains the desired set of options for configuring clusterDNS.",
                    {
                      "$ul": [
                        "**clusterDns**: cluster_dns indicates which in-cluster DNS provider should be used.",
                        "**clusterDnsDomain**: cluster_dns_domain is the suffix used for all cluster service records.",
                        "**clusterDnsScope**: cluster_dns_scope indicates the scope of access to cluster DNS records."
                      ]
                    }
                  ],
                  "**enableFqdnNetworkPolicy**: Whether FQDN Network Policy is enabled on this cluster.",
                  "**enableIntraNodeVisibility**: Whether Intra-node visibility is enabled for this cluster. This makes same node pod to pod traffic visible for VPC network.",
                  "**enableL4ilbSubsetting**: Whether L4ILB Subsetting is enabled for this cluster.",
                  "**enableMultiNetworking**: Whether multi-networking is enabled for this cluster.",
                  [
                    "**gatewayApiConfig**: GatewayAPIConfig contains the desired config of Gateway API on this cluster.",
                    {
                      "$ul": [
                        "**channel**: The Gateway API release channel to use for Gateway API."
                      ]
                    }
                  ],
                  "**inTransitEncryptionConfig**: Specify the details of in-transit encryption.",
                  "**network**: Output only. The relative name of the Google Compute Engine network(https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the cluster is connected. Example: projects/my-project/global/networks/my-network",
                  [
                    "**networkPerformanceConfig**: Configuration of network bandwidth tiers",
                    {
                      "$ul": [
                        "**totalEgressBandwidthTier**: Specifies the total network bandwidth tier for NodePools in the cluster."
                      ]
                    }
                  ],
                  "**privateIpv6GoogleAccess**: The desired state of IPv6 connectivity to Google Services. By default, no private IPv6 access to or from Google Services (all access will be via IPv4)",
                  [
                    "**serviceExternalIpsConfig**: Config to block services with externalIPs field.",
                    {
                      "$ul": [
                        "**enabled**: Whether Services with ExternalIPs field are allowed or not."
                      ]
                    }
                  ],
                  "**subnetwork**: Output only. The relative name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/vpc) to which the cluster is connected. Example: projects/my-project/regions/us-central1/subnetworks/my-subnet"
                ]
              }
            ],
            [
              "**networkPolicy**: Configuration options for the NetworkPolicy feature. https://kubernetes.io/docs/concepts/services-networking/networkpolicies/",
              {
                "$ul": [
                  "**enabled**: Whether network policy is enabled on the cluster.",
                  "**provider**: The selected network policy provider."
                ]
              }
            ],
            [
              "**nodeConfig**: Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.",
              {
                "$ul": [
                  "**accelerators**: A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.",
                  [
                    "**advancedMachineFeatures**: Specifies options for controlling advanced machine features.",
                    {
                      "$ul": [
                        "**threadsPerCore**: The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed."
                      ]
                    }
                  ],
                  "**bootDiskKmsKey**:  The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption",
                  [
                    "**confidentialNodes**: ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.",
                    {
                      "$ul": [
                        "**enabled**: Whether Confidential Nodes feature is enabled."
                      ]
                    }
                  ],
                  "**diskSizeGb**: Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.",
                  "**diskType**: Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'",
                  "**enableConfidentialStorage**: Optional. Reserved for future use.",
                  [
                    "**ephemeralStorageLocalSsdConfig**: EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.",
                    {
                      "$ul": [
                        "**localSsdCount**: Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info."
                      ]
                    }
                  ],
                  [
                    "**fastSocket**: Configuration of Fast Socket feature.",
                    {
                      "$ul": [
                        "**enabled**: Whether Fast Socket features are enabled in the node pool."
                      ]
                    }
                  ],
                  [
                    "**gcfsConfig**: GcfsConfig contains configurations of Google Container File System (image streaming).",
                    {
                      "$ul": [
                        "**enabled**: Whether to use GCFS."
                      ]
                    }
                  ],
                  [
                    "**gvnic**: Configuration of gVNIC feature.",
                    {
                      "$ul": [
                        "**enabled**: Whether gVNIC features are enabled in the node pool."
                      ]
                    }
                  ],
                  "**imageType**: The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.",
                  [
                    "**kubeletConfig**: Node kubelet configs.",
                    {
                      "$ul": [
                        "**cpuCfsQuota**: Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.",
                        "**cpuCfsQuotaPeriod**: Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration.",
                        "**cpuManagerPolicy**: Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * \"none\": the default, which represents the existing scheduling behavior. * \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.",
                        "**insecureKubeletReadonlyPortEnabled**: Enable or disable Kubelet read only port.",
                        "**podPidsLimit**: Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304."
                      ]
                    }
                  ],
                  "**labels**: The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
                  [
                    "**linuxNodeConfig**: Parameters that can be configured on Linux nodes.",
                    {
                      "$ul": [
                        "**cgroupMode**: cgroup_mode specifies the cgroup mode to be used on the node.",
                        "**sysctls**: The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse"
                      ]
                    }
                  ],
                  [
                    "**localNvmeSsdBlockConfig**: LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs",
                    {
                      "$ul": [
                        "**localSsdCount**: Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info."
                      ]
                    }
                  ],
                  "**localSsdCount**: The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.",
                  [
                    "**loggingConfig**: NodePoolLoggingConfig specifies logging configuration for nodepools.",
                    {
                      "$ul": [
                        [
                          "**variantConfig**: LoggingVariantConfig specifies the behaviour of the logging component.",
                          {
                            "$ul": [
                              "**variant**: Logging variant deployed on nodes."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**machineType**: The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types) If unspecified, the default machine type is `e2-medium`.",
                  "**metadata**: The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-os-login\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.",
                  "**minCpuPlatform**: Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform)",
                  "**nodeGroup**: Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).",
                  "**oauthScopes**: The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.",
                  "**preemptible**: Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.",
                  [
                    "**reservationAffinity**: [ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.",
                    {
                      "$ul": [
                        "**consumeReservationType**: Corresponds to the type of reservation consumption.",
                        "**key**: Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify \"compute.googleapis.com/reservation-name\" as the key and specify the name of your reservation as its value.",
                        "**values**: Corresponds to the label value(s) of reservation resource(s)."
                      ]
                    }
                  ],
                  "**resourceLabels**: The resource labels for the node pool to use to annotate any related Google Compute Engine resources.",
                  [
                    "**resourceManagerTags**: A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.",
                    {
                      "$ul": [
                        "**tags**: TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`"
                      ]
                    }
                  ],
                  [
                    "**sandboxConfig**: SandboxConfig contains configurations of the sandbox to use for the node.",
                    {
                      "$ul": [
                        "**type**: Type of the sandbox to use for the node."
                      ]
                    }
                  ],
                  "**secondaryBootDisks**: List of secondary boot disks attached to the nodes.",
                  "**serviceAccount**: The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.",
                  [
                    "**shieldedInstanceConfig**: A set of Shielded Instance options.",
                    {
                      "$ul": [
                        "**enableIntegrityMonitoring**: Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.",
                        "**enableSecureBoot**: Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails."
                      ]
                    }
                  ],
                  [
                    "**soleTenantConfig**: SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.",
                    {
                      "$ul": [
                        "**nodeAffinities**: NodeAffinities used to match to a shared sole tenant node group."
                      ]
                    }
                  ],
                  "**spot**: Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.",
                  "**tags**: The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.",
                  "**taints**: List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
                  [
                    "**windowsNodeConfig**: Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings",
                    {
                      "$ul": [
                        "**osVersion**: OSVersion specifies the Windows node config to be used on the node"
                      ]
                    }
                  ],
                  [
                    "**workloadMetadataConfig**: WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.",
                    {
                      "$ul": [
                        "**mode**: Mode is the configuration for how to expose metadata to workloads running on the node pool."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**nodeIpv4CidrSize**: [Output only] The size of the address space on each node for hosting containers. This is provisioned from within the `container_ipv4_cidr` range. This field will only be set when cluster is in route-based network mode.",
            [
              "**nodePoolAutoConfig**: Node pool configs that apply to all auto-provisioned node pools in autopilot clusters and node auto-provisioning enabled clusters.",
              {
                "$ul": [
                  [
                    "**networkTags**: Collection of Compute Engine network tags that can be applied to a node's underlying VM instance.",
                    {
                      "$ul": [
                        "**tags**: List of network tags."
                      ]
                    }
                  ],
                  [
                    "**resourceManagerTags**: A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.",
                    {
                      "$ul": [
                        "**tags**: TagKeyValue must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**nodePoolDefaults**: Subset of Nodepool message that has defaults.",
              {
                "$ul": [
                  [
                    "**nodeConfigDefaults**: Subset of NodeConfig message that has defaults.",
                    {
                      "$ul": [
                        [
                          "**gcfsConfig**: GcfsConfig contains configurations of Google Container File System (image streaming).",
                          {
                            "$ul": [
                              "**enabled**: Whether to use GCFS."
                            ]
                          }
                        ],
                        [
                          "**loggingConfig**: NodePoolLoggingConfig specifies logging configuration for nodepools.",
                          {
                            "$ul": [
                              [
                                "**variantConfig**: LoggingVariantConfig specifies the behaviour of the logging component.",
                                {
                                  "$ul": [
                                    "**variant**: Logging variant deployed on nodes."
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**nodePools**: The node pools associated with this cluster. This field should not be set if \"node_config\" or \"initial_node_count\" are specified.",
            [
              "**notificationConfig**: NotificationConfig is the configuration of notifications.",
              {
                "$ul": [
                  [
                    "**pubsub**: Pub/Sub specific notification config.",
                    {
                      "$ul": [
                        "**enabled**: Enable notifications for Pub/Sub.",
                        [
                          "**filter**: Allows filtering to one or more specific event types. If event types are present, those and only those event types will be transmitted to the cluster. Other types will be skipped. If no filter is specified, or no event types are present, all event types will be sent",
                          {
                            "$ul": [
                              "**eventType**: Event types to allowlist."
                            ]
                          }
                        ],
                        "**topic**: The desired Pub/Sub topic to which notifications will be sent by GKE. Format is `projects/{project}/topics/{topic}`."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**parentProductConfig**: ParentProductConfig is the configuration of the parent product of the cluster. This field is used by Google internal products that are built on top of a GKE cluster and take the ownership of the cluster.",
              {
                "$ul": [
                  "**labels**: Labels contain the configuration of the parent product.",
                  "**productName**: Name of the parent product associated with the cluster."
                ]
              }
            ],
            [
              "**privateClusterConfig**: Configuration options for private clusters.",
              {
                "$ul": [
                  "**enablePrivateEndpoint**: Whether the master's internal IP address is used as the cluster endpoint.",
                  "**enablePrivateNodes**: Whether nodes have internal IP addresses only. If enabled, all nodes are given only RFC 1918 private addresses and communicate with the master via private networking.",
                  [
                    "**masterGlobalAccessConfig**: Configuration for controlling master global access settings.",
                    {
                      "$ul": [
                        "**enabled**: Whenever master is accessible globally or not."
                      ]
                    }
                  ],
                  "**masterIpv4CidrBlock**: The IP range in CIDR notation to use for the hosted master network. This range will be used for assigning internal IP addresses to the master or set of masters, as well as the ILB VIP. This range must not overlap with any other ranges in use within the cluster's network.",
                  "**peeringName**: Output only. The peering name in the customer VPC used by this cluster.",
                  "**privateEndpoint**: Output only. The internal IP address of this cluster's master endpoint.",
                  "**privateEndpointSubnetwork**: Subnet to provision the master's private endpoint during cluster creation. Specified in projects/*/regions/*/subnetworks/* format.",
                  "**publicEndpoint**: Output only. The external IP address of this cluster's master endpoint."
                ]
              }
            ],
            [
              "**releaseChannel**: ReleaseChannel indicates which release channel a cluster is subscribed to. Release channels are arranged in order of risk. When a cluster is subscribed to a release channel, Google maintains both the master version and the node version. Node auto-upgrade defaults to true and cannot be disabled.",
              {
                "$ul": [
                  "**channel**: channel specifies which release channel the cluster is subscribed to."
                ]
              }
            ],
            "**resourceLabels**: The resource labels for the cluster to use to annotate any related Google Compute Engine resources.",
            [
              "**resourceUsageExportConfig**: Configuration for exporting cluster resource usages.",
              {
                "$ul": [
                  [
                    "**bigqueryDestination**: Parameters for using BigQuery as the destination of resource usage export.",
                    {
                      "$ul": [
                        "**datasetId**: The ID of a BigQuery Dataset."
                      ]
                    }
                  ],
                  [
                    "**consumptionMeteringConfig**: Parameters for controlling consumption metering.",
                    {
                      "$ul": [
                        "**enabled**: Whether to enable consumption metering for this cluster. If enabled, a second BigQuery table will be created to hold resource consumption records."
                      ]
                    }
                  ],
                  "**enableNetworkEgressMetering**: Whether to enable network egress metering for this cluster. If enabled, a daemonset will be created in the cluster to meter network egress traffic."
                ]
              }
            ],
            [
              "**securityPostureConfig**: SecurityPostureConfig defines the flags needed to enable/disable features for the Security Posture API.",
              {
                "$ul": [
                  "**mode**: Sets which mode to use for Security Posture features.",
                  "**vulnerabilityMode**: Sets which mode to use for vulnerability scanning."
                ]
              }
            ],
            "**selfLink**: [Output only] Server-defined URL for the resource.",
            "**servicesIpv4Cidr**: [Output only] The IP address range of the Kubernetes services in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`). Service addresses are typically put in the last `/16` from the container CIDR.",
            [
              "**shieldedNodes**: Configuration of Shielded Nodes feature.",
              {
                "$ul": [
                  "**enabled**: Whether Shielded Nodes features are enabled on all nodes in this cluster."
                ]
              }
            ],
            "**status**: [Output only] The current status of this cluster.",
            "**statusMessage**: [Output only] Deprecated. Use conditions instead. Additional information about the current status of this cluster, if available.",
            "**subnetwork**: The name of the Google Compute Engine [subnetwork](https://cloud.google.com/compute/docs/subnetworks) to which the cluster is connected.",
            "**tpuIpv4CidrBlock**: [Output only] The IP address range of the Cloud TPUs in this cluster, in [CIDR](http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `1.2.3.4/29`).",
            [
              "**verticalPodAutoscaling**: VerticalPodAutoscaling contains global, per-cluster information required by Vertical Pod Autoscaler to automatically adjust the resources of pods controlled by it.",
              {
                "$ul": [
                  "**enabled**: Enables vertical pod autoscaling."
                ]
              }
            ],
            [
              "**workloadIdentityConfig**: Configuration for the use of Kubernetes Service Accounts in GCP IAM policies.",
              {
                "$ul": [
                  "**workloadPool**: The workload pool to attach all Kubernetes service accounts to."
                ]
              }
            ],
            "**zone**: [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field is deprecated, use location instead."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
