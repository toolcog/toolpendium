{
  "name": "container_projects_locations_clusters_nodePools_update",
  "description": "Updates the version and/or image type of a specific node pool.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/UpdateNodePoolRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "UpdateNodePoolRequest": {
        "description": "SetNodePoolVersionRequest updates the version of a node pool.",
        "properties": {
          "clusterId": {
            "deprecated": true,
            "description": "Required. Deprecated. The name of the cluster to upgrade. This field has been deprecated and replaced by the name field.",
            "type": "string"
          },
          "confidentialNodes": {
            "$ref": "#/$defs/ConfidentialNodes"
          },
          "diskSizeGb": {
            "description": "Optional. The desired disk size for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk size.",
            "format": "int64",
            "type": "string"
          },
          "diskType": {
            "description": "Optional. The desired disk type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified disk type.",
            "type": "string"
          },
          "etag": {
            "description": "The current etag of the node pool. If an etag is provided and does not match the current etag of the node pool, update will be blocked and an ABORTED error will be returned.",
            "type": "string"
          },
          "fastSocket": {
            "$ref": "#/$defs/FastSocket"
          },
          "gcfsConfig": {
            "$ref": "#/$defs/GcfsConfig"
          },
          "gvnic": {
            "$ref": "#/$defs/VirtualNIC"
          },
          "imageType": {
            "description": "Required. The desired image type for the node pool. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.",
            "type": "string"
          },
          "kubeletConfig": {
            "$ref": "#/$defs/NodeKubeletConfig"
          },
          "labels": {
            "$ref": "#/$defs/NodeLabels"
          },
          "linuxNodeConfig": {
            "$ref": "#/$defs/LinuxNodeConfig"
          },
          "locations": {
            "description": "The desired list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the node pool's nodes should be located. Changing the locations for a node pool will result in nodes being either created or removed from the node pool, depending on whether locations are being added or removed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "loggingConfig": {
            "$ref": "#/$defs/NodePoolLoggingConfig"
          },
          "machineType": {
            "description": "Optional. The desired machine type for nodes in the node pool. Initiates an upgrade operation that migrates the nodes in the node pool to the specified machine type.",
            "type": "string"
          },
          "name": {
            "description": "The name (project, location, cluster, node pool) of the node pool to update. Specified in the format `projects/*/locations/*/clusters/*/nodePools/*`.",
            "type": "string"
          },
          "nodeNetworkConfig": {
            "$ref": "#/$defs/NodeNetworkConfig"
          },
          "nodePoolId": {
            "deprecated": true,
            "description": "Required. Deprecated. The name of the node pool to upgrade. This field has been deprecated and replaced by the name field.",
            "type": "string"
          },
          "nodeVersion": {
            "description": "Required. The Kubernetes version to change the nodes to (typically an upgrade). Users may specify either explicit versions offered by Kubernetes Engine or version aliases, which have the following behavior: - \"latest\": picks the highest valid Kubernetes version - \"1.X\": picks the highest valid patch+gke.N patch in the 1.X version - \"1.X.Y\": picks the highest valid gke.N patch in the 1.X.Y version - \"1.X.Y-gke.N\": picks an explicit Kubernetes version - \"-\": picks the Kubernetes master version",
            "type": "string"
          },
          "projectId": {
            "deprecated": true,
            "description": "Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the name field.",
            "type": "string"
          },
          "queuedProvisioning": {
            "$ref": "#/$defs/QueuedProvisioning"
          },
          "resourceLabels": {
            "$ref": "#/$defs/ResourceLabels"
          },
          "resourceManagerTags": {
            "$ref": "#/$defs/ResourceManagerTags"
          },
          "tags": {
            "$ref": "#/$defs/NetworkTags"
          },
          "taints": {
            "$ref": "#/$defs/NodeTaints"
          },
          "upgradeSettings": {
            "$ref": "#/$defs/UpgradeSettings"
          },
          "windowsNodeConfig": {
            "$ref": "#/$defs/WindowsNodeConfig"
          },
          "workloadMetadataConfig": {
            "$ref": "#/$defs/WorkloadMetadataConfig"
          },
          "zone": {
            "deprecated": true,
            "description": "Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the name field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfidentialNodes": {
        "description": "ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.",
        "properties": {
          "enabled": {
            "description": "Whether Confidential Nodes feature is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FastSocket": {
        "description": "Configuration of Fast Socket feature.",
        "properties": {
          "enabled": {
            "description": "Whether Fast Socket features are enabled in the node pool.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GcfsConfig": {
        "description": "GcfsConfig contains configurations of Google Container File System.",
        "properties": {
          "enabled": {
            "description": "Whether to use GCFS.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VirtualNIC": {
        "description": "Configuration of gVNIC feature.",
        "properties": {
          "enabled": {
            "description": "Whether gVNIC features are enabled in the node pool.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NodeKubeletConfig": {
        "description": "Node kubelet configs.",
        "properties": {
          "cpuCfsQuota": {
            "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.",
            "type": "boolean"
          },
          "cpuCfsQuotaPeriod": {
            "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration.",
            "type": "string"
          },
          "cpuManagerPolicy": {
            "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * \"none\": the default, which represents the existing scheduling behavior. * \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.",
            "type": "string"
          },
          "insecureKubeletReadonlyPortEnabled": {
            "description": "Enable or disable Kubelet read only port.",
            "type": "boolean"
          },
          "podPidsLimit": {
            "description": "Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeLabels": {
        "description": "Collection of node-level [Kubernetes labels](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels).",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of node label keys and node label values.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LinuxNodeConfig": {
        "description": "Parameters that can be configured on Linux nodes.",
        "properties": {
          "cgroupMode": {
            "description": "cgroup_mode specifies the cgroup mode to be used on the node.",
            "enum": [
              "CGROUP_MODE_UNSPECIFIED",
              "CGROUP_MODE_V1",
              "CGROUP_MODE_V2"
            ],
            "type": "string"
          },
          "sysctls": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
            "type": "object"
          }
        },
        "type": "object"
      },
      "NodePoolLoggingConfig": {
        "description": "NodePoolLoggingConfig specifies logging configuration for nodepools.",
        "properties": {
          "variantConfig": {
            "$ref": "#/$defs/LoggingVariantConfig"
          }
        },
        "type": "object"
      },
      "LoggingVariantConfig": {
        "description": "LoggingVariantConfig specifies the behaviour of the logging component.",
        "properties": {
          "variant": {
            "description": "Logging variant deployed on nodes.",
            "enum": [
              "VARIANT_UNSPECIFIED",
              "DEFAULT",
              "MAX_THROUGHPUT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeNetworkConfig": {
        "description": "Parameters for node pool-level network config.",
        "properties": {
          "additionalNodeNetworkConfigs": {
            "description": "We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface",
            "items": {
              "$ref": "#/$defs/AdditionalNodeNetworkConfig"
            },
            "type": "array"
          },
          "additionalPodNetworkConfigs": {
            "description": "We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node",
            "items": {
              "$ref": "#/$defs/AdditionalPodNetworkConfig"
            },
            "type": "array"
          },
          "createPodRange": {
            "description": "Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.",
            "type": "boolean"
          },
          "enablePrivateNodes": {
            "description": "Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes",
            "type": "boolean"
          },
          "networkPerformanceConfig": {
            "$ref": "#/$defs/NetworkPerformanceConfig"
          },
          "podCidrOverprovisionConfig": {
            "$ref": "#/$defs/PodCIDROverprovisionConfig"
          },
          "podIpv4CidrBlock": {
            "description": "The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.",
            "type": "string"
          },
          "podIpv4RangeUtilization": {
            "description": "Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "podRange": {
            "description": "The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdditionalNodeNetworkConfig": {
        "description": "AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message",
        "properties": {
          "network": {
            "description": "Name of the VPC where the additional interface belongs",
            "type": "string"
          },
          "subnetwork": {
            "description": "Name of the subnetwork where the additional interface belongs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdditionalPodNetworkConfig": {
        "description": "AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message",
        "properties": {
          "maxPodsPerNode": {
            "$ref": "#/$defs/MaxPodsConstraint"
          },
          "secondaryPodRange": {
            "description": "The name of the secondary range on the subnet which provides IP address for this pod range",
            "type": "string"
          },
          "subnetwork": {
            "description": "Name of the subnetwork where the additional pod network belongs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaxPodsConstraint": {
        "description": "Constraints applied to pods.",
        "properties": {
          "maxPodsPerNode": {
            "description": "Constraint enforced on the max num of pods per node.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkPerformanceConfig": {
        "description": "Configuration of all network bandwidth tiers",
        "properties": {
          "externalIpEgressBandwidthTier": {
            "description": "Specifies the network bandwidth tier for the NodePool for traffic to external/public IP addresses.",
            "enum": [
              "TIER_UNSPECIFIED",
              "TIER_1"
            ],
            "type": "string"
          },
          "totalEgressBandwidthTier": {
            "description": "Specifies the total network bandwidth tier for the NodePool.",
            "enum": [
              "TIER_UNSPECIFIED",
              "TIER_1"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PodCIDROverprovisionConfig": {
        "description": "[PRIVATE FIELD] Config for pod CIDR size overprovisioning.",
        "properties": {
          "disable": {
            "description": "Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "QueuedProvisioning": {
        "description": "QueuedProvisioning defines the queued provisioning used by the node pool.",
        "properties": {
          "enabled": {
            "description": "Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ResourceLabels": {
        "description": "Collection of [GCP labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels).",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map of node label keys and node label values.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "ResourceManagerTags": {
        "description": "A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`",
            "type": "object"
          }
        },
        "type": "object"
      },
      "NetworkTags": {
        "description": "Collection of Compute Engine network tags that can be applied to a node's underlying VM instance. (See `tags` field in [`NodeConfig`](/kubernetes-engine/docs/reference/rest/v1/NodeConfig)).",
        "properties": {
          "tags": {
            "description": "List of network tags.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeTaints": {
        "description": "Collection of Kubernetes [node taints](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration).",
        "properties": {
          "taints": {
            "description": "List of node taints.",
            "items": {
              "$ref": "#/$defs/NodeTaint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeTaint": {
        "description": "Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.",
        "properties": {
          "effect": {
            "description": "Effect for taint.",
            "enum": [
              "EFFECT_UNSPECIFIED",
              "NO_SCHEDULE",
              "PREFER_NO_SCHEDULE",
              "NO_EXECUTE"
            ],
            "type": "string"
          },
          "key": {
            "description": "Key for taint.",
            "type": "string"
          },
          "value": {
            "description": "Value for taint.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeSettings": {
        "description": "These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is SURGE, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.",
        "properties": {
          "blueGreenSettings": {
            "$ref": "#/$defs/BlueGreenSettings"
          },
          "maxSurge": {
            "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.",
            "format": "int32",
            "type": "integer"
          },
          "maxUnavailable": {
            "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.",
            "format": "int32",
            "type": "integer"
          },
          "strategy": {
            "description": "Update strategy of the node pool.",
            "enum": [
              "NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED",
              "BLUE_GREEN",
              "SURGE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BlueGreenSettings": {
        "description": "Settings for blue-green upgrade.",
        "properties": {
          "autoscaledRolloutPolicy": {
            "$ref": "#/$defs/AutoscaledRolloutPolicy"
          },
          "nodePoolSoakDuration": {
            "description": "Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.",
            "format": "google-duration",
            "type": "string"
          },
          "standardRolloutPolicy": {
            "$ref": "#/$defs/StandardRolloutPolicy"
          }
        },
        "type": "object"
      },
      "AutoscaledRolloutPolicy": {
        "description": "Autoscaled rollout policy uses cluster autoscaler during blue-green upgrades to scale both the green and blue pools.",
        "properties": {},
        "type": "object"
      },
      "StandardRolloutPolicy": {
        "description": "Standard rollout policy is the default policy for blue-green.",
        "properties": {
          "batchNodeCount": {
            "description": "Number of blue nodes to drain in a batch.",
            "format": "int32",
            "type": "integer"
          },
          "batchPercentage": {
            "description": "Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].",
            "format": "float",
            "type": "number"
          },
          "batchSoakDuration": {
            "description": "Soak time after each batch gets drained. Default to zero.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WindowsNodeConfig": {
        "description": "Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings",
        "properties": {
          "osVersion": {
            "description": "OSVersion specifies the Windows node config to be used on the node",
            "enum": [
              "OS_VERSION_UNSPECIFIED",
              "OS_VERSION_LTSC2019",
              "OS_VERSION_LTSC2022"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkloadMetadataConfig": {
        "description": "WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.",
        "properties": {
          "mode": {
            "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
            "enum": [
              "MODE_UNSPECIFIED",
              "GCE_METADATA",
              "GKE_METADATA"
            ],
            "type": "string"
          },
          "nodeMetadata": {
            "deprecated": true,
            "description": "NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.",
            "enum": [
              "UNSPECIFIED",
              "SECURE",
              "EXPOSE",
              "GKE_METADATA_SERVER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://container.googleapis.com//v1beta1/{name}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only.",
        "**Key properties:**",
        {
          "$ul": [
            "**clusterConditions**: Which conditions caused the current cluster state. Deprecated. Use field error instead.",
            "**detail**: Detailed operation progress, if available.",
            "**endTime**: [Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**location**: [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.",
            "**name**: The server-assigned ID for the operation.",
            "**nodepoolConditions**: Which conditions caused the current node pool state. Deprecated. Use field error instead.",
            "**operationType**: The operation type.",
            [
              "**progress**: Information about operation (or operation stage) progress.",
              {
                "$ul": [
                  "**metrics**: Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]",
                  "**name**: A non-parameterized string describing an operation stage. Unset for single-stage operations.",
                  "**stages**: Substages of an operation or a stage.",
                  "**status**: Status of an operation stage. Unset for single-stage operations."
                ]
              }
            ],
            "**selfLink**: Server-defined URI for the operation. Example: `https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123`.",
            "**startTime**: [Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            "**status**: The current status of the operation.",
            "**statusMessage**: Output only. If an error has occurred, a textual description of the error. Deprecated. Use field error instead.",
            "**targetLink**: Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## `https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster` ## `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np` `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node`",
            "**zone**: The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
