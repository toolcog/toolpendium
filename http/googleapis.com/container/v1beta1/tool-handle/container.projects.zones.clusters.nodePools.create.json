{
  "name": "container_projects_zones_clusters_nodePools_create",
  "description": "Creates a node pool for a cluster.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field."
      },
      "zone": {
        "type": "string",
        "description": "Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field."
      },
      "clusterId": {
        "type": "string",
        "description": "Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CreateNodePoolRequest"
      }
    },
    "required": [
      "projectId",
      "zone",
      "clusterId"
    ],
    "$defs": {
      "CreateNodePoolRequest": {
        "description": "CreateNodePoolRequest creates a node pool for a cluster.",
        "properties": {
          "clusterId": {
            "deprecated": true,
            "description": "Required. Deprecated. The name of the cluster. This field has been deprecated and replaced by the parent field.",
            "type": "string"
          },
          "nodePool": {
            "$ref": "#/$defs/NodePool"
          },
          "parent": {
            "description": "The parent (project, location, cluster name) where the node pool will be created. Specified in the format `projects/*/locations/*/clusters/*`.",
            "type": "string"
          },
          "projectId": {
            "deprecated": true,
            "description": "Required. Deprecated. The Google Developers Console [project ID or project number](https://cloud.google.com/resource-manager/docs/creating-managing-projects). This field has been deprecated and replaced by the parent field.",
            "type": "string"
          },
          "zone": {
            "deprecated": true,
            "description": "Required. Deprecated. The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the cluster resides. This field has been deprecated and replaced by the parent field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodePool": {
        "description": "NodePool contains the name and configuration for a cluster's node pool. Node pools are a set of nodes (i.e. VM's), with a common configuration and specification, under the control of the cluster master. They may have a set of Kubernetes labels applied to them, which may be used to reference them during pod scheduling. They may also be resized up or down, to accommodate the workload.",
        "properties": {
          "autoscaling": {
            "$ref": "#/$defs/NodePoolAutoscaling"
          },
          "bestEffortProvisioning": {
            "$ref": "#/$defs/BestEffortProvisioning"
          },
          "conditions": {
            "description": "Which conditions caused the current node pool state.",
            "items": {
              "$ref": "#/$defs/StatusCondition"
            },
            "type": "array"
          },
          "config": {
            "$ref": "#/$defs/NodeConfig"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of node pool fields, and may be sent on update requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "initialNodeCount": {
            "description": "The initial node count for the pool. You must ensure that your Compute Engine [resource quota](https://cloud.google.com/compute/quotas) is sufficient for this number of instances. You must also have available firewall and routes quota.",
            "format": "int32",
            "type": "integer"
          },
          "instanceGroupUrls": {
            "description": "[Output only] The resource URLs of the [managed instance groups](https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with this node pool. During the node pool blue-green upgrade operation, the URLs contain both blue and green resources.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "locations": {
            "description": "The list of Google Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) in which the NodePool's nodes should be located. If this value is unspecified during node pool creation, the [Cluster.Locations](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters#Cluster.FIELDS.locations) value will be used, instead. Warning: changing node pool locations will result in nodes being added and/or removed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "management": {
            "$ref": "#/$defs/NodeManagement"
          },
          "maxPodsConstraint": {
            "$ref": "#/$defs/MaxPodsConstraint"
          },
          "name": {
            "description": "The name of the node pool.",
            "type": "string"
          },
          "networkConfig": {
            "$ref": "#/$defs/NodeNetworkConfig"
          },
          "placementPolicy": {
            "$ref": "#/$defs/PlacementPolicy"
          },
          "podIpv4CidrSize": {
            "description": "[Output only] The pod CIDR block size per node in this node pool.",
            "format": "int32",
            "type": "integer"
          },
          "queuedProvisioning": {
            "$ref": "#/$defs/QueuedProvisioning"
          },
          "selfLink": {
            "description": "[Output only] Server-defined URL for the resource.",
            "type": "string"
          },
          "status": {
            "description": "[Output only] The status of the nodes in this pool instance.",
            "enum": [
              "STATUS_UNSPECIFIED",
              "PROVISIONING",
              "RUNNING",
              "RUNNING_WITH_ERROR",
              "RECONCILING",
              "STOPPING",
              "ERROR"
            ],
            "type": "string"
          },
          "statusMessage": {
            "deprecated": true,
            "description": "[Output only] Deprecated. Use conditions instead. Additional information about the current status of this node pool instance, if available.",
            "type": "string"
          },
          "updateInfo": {
            "$ref": "#/$defs/UpdateInfo"
          },
          "upgradeSettings": {
            "$ref": "#/$defs/UpgradeSettings"
          },
          "version": {
            "description": "The version of Kubernetes running on this NodePool's nodes. If unspecified, it defaults as described [here](https://cloud.google.com/kubernetes-engine/versioning#specifying_node_version).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodePoolAutoscaling": {
        "description": "NodePoolAutoscaling contains information required by cluster autoscaler to adjust the size of the node pool to the current cluster usage.",
        "properties": {
          "autoprovisioned": {
            "description": "Can this node pool be deleted automatically.",
            "type": "boolean"
          },
          "enabled": {
            "description": "Is autoscaling enabled for this node pool.",
            "type": "boolean"
          },
          "locationPolicy": {
            "description": "Location policy used when scaling up a nodepool.",
            "enum": [
              "LOCATION_POLICY_UNSPECIFIED",
              "BALANCED",
              "ANY"
            ],
            "type": "string"
          },
          "maxNodeCount": {
            "description": "Maximum number of nodes for one location in the NodePool. Must be >= min_node_count. There has to be enough quota to scale up the cluster.",
            "format": "int32",
            "type": "integer"
          },
          "minNodeCount": {
            "description": "Minimum number of nodes for one location in the NodePool. Must be >= 1 and <= max_node_count.",
            "format": "int32",
            "type": "integer"
          },
          "totalMaxNodeCount": {
            "description": "Maximum number of nodes in the node pool. Must be greater than total_min_node_count. There has to be enough quota to scale up the cluster. The total_*_node_count fields are mutually exclusive with the *_node_count fields.",
            "format": "int32",
            "type": "integer"
          },
          "totalMinNodeCount": {
            "description": "Minimum number of nodes in the node pool. Must be greater than 1 less than total_max_node_count. The total_*_node_count fields are mutually exclusive with the *_node_count fields.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BestEffortProvisioning": {
        "description": "Best effort provisioning.",
        "properties": {
          "enabled": {
            "description": "When this is enabled, cluster/node pool creations will ignore non-fatal errors like stockout to best provision as many nodes as possible right now and eventually bring up all target number of nodes",
            "type": "boolean"
          },
          "minProvisionNodes": {
            "description": "Minimum number of nodes to be provisioned to be considered as succeeded, and the rest of nodes will be provisioned gradually and eventually when stockout issue has been resolved.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StatusCondition": {
        "description": "StatusCondition describes why a cluster or a node pool has a certain status (e.g., ERROR or DEGRADED).",
        "properties": {
          "canonicalCode": {
            "description": "Canonical code of the condition.",
            "enum": [
              "OK",
              "CANCELLED",
              "UNKNOWN",
              "INVALID_ARGUMENT",
              "DEADLINE_EXCEEDED",
              "NOT_FOUND",
              "ALREADY_EXISTS",
              "PERMISSION_DENIED",
              "UNAUTHENTICATED",
              "RESOURCE_EXHAUSTED",
              "FAILED_PRECONDITION",
              "ABORTED",
              "OUT_OF_RANGE",
              "UNIMPLEMENTED",
              "INTERNAL",
              "UNAVAILABLE",
              "DATA_LOSS"
            ],
            "type": "string"
          },
          "code": {
            "deprecated": true,
            "description": "Machine-friendly representation of the condition Deprecated. Use canonical_code instead.",
            "enum": [
              "UNKNOWN",
              "GCE_STOCKOUT",
              "GKE_SERVICE_ACCOUNT_DELETED",
              "GCE_QUOTA_EXCEEDED",
              "SET_BY_OPERATOR",
              "CLOUD_KMS_KEY_ERROR",
              "CA_EXPIRING"
            ],
            "type": "string"
          },
          "message": {
            "description": "Human-friendly representation of the condition",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeConfig": {
        "description": "Parameters that describe the nodes in a cluster. GKE Autopilot clusters do not recognize parameters in `NodeConfig`. Use AutoprovisioningNodePoolDefaults instead.",
        "properties": {
          "accelerators": {
            "description": "A list of hardware accelerators to be attached to each node. See https://cloud.google.com/compute/docs/gpus for more information about support for GPUs.",
            "items": {
              "$ref": "#/$defs/AcceleratorConfig"
            },
            "type": "array"
          },
          "advancedMachineFeatures": {
            "$ref": "#/$defs/AdvancedMachineFeatures"
          },
          "bootDiskKmsKey": {
            "description": " The Customer Managed Encryption Key used to encrypt the boot disk attached to each node in the node pool. This should be of the form projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]. For more information about protecting resources with Cloud KMS Keys please see: https://cloud.google.com/compute/docs/disks/customer-managed-encryption",
            "type": "string"
          },
          "confidentialNodes": {
            "$ref": "#/$defs/ConfidentialNodes"
          },
          "diskSizeGb": {
            "description": "Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB. If unspecified, the default disk size is 100GB.",
            "format": "int32",
            "type": "integer"
          },
          "diskType": {
            "description": "Type of the disk attached to each node (e.g. 'pd-standard', 'pd-ssd' or 'pd-balanced') If unspecified, the default disk type is 'pd-standard'",
            "type": "string"
          },
          "enableConfidentialStorage": {
            "description": "Optional. Reserved for future use.",
            "type": "boolean"
          },
          "ephemeralStorageConfig": {
            "$ref": "#/$defs/EphemeralStorageConfig"
          },
          "ephemeralStorageLocalSsdConfig": {
            "$ref": "#/$defs/EphemeralStorageLocalSsdConfig"
          },
          "fastSocket": {
            "$ref": "#/$defs/FastSocket"
          },
          "gcfsConfig": {
            "$ref": "#/$defs/GcfsConfig"
          },
          "gvnic": {
            "$ref": "#/$defs/VirtualNIC"
          },
          "hostMaintenancePolicy": {
            "$ref": "#/$defs/HostMaintenancePolicy"
          },
          "imageType": {
            "description": "The image type to use for this node. Note that for a given image type, the latest version of it will be used. Please see https://cloud.google.com/kubernetes-engine/docs/concepts/node-images for available image types.",
            "type": "string"
          },
          "kubeletConfig": {
            "$ref": "#/$defs/NodeKubeletConfig"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
            "type": "object"
          },
          "linuxNodeConfig": {
            "$ref": "#/$defs/LinuxNodeConfig"
          },
          "localNvmeSsdBlockConfig": {
            "$ref": "#/$defs/LocalNvmeSsdBlockConfig"
          },
          "localSsdCount": {
            "description": "The number of local SSD disks to be attached to the node. The limit for this value is dependent upon the maximum number of disks available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information.",
            "format": "int32",
            "type": "integer"
          },
          "loggingConfig": {
            "$ref": "#/$defs/NodePoolLoggingConfig"
          },
          "machineType": {
            "description": "The name of a Google Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types). If unspecified, the default machine type is `e2-medium`.",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The metadata key/value pairs assigned to instances in the cluster. Keys must conform to the regexp `[a-zA-Z0-9-_]+` and be less than 128 bytes in length. These are reflected as part of a URL in the metadata server. Additionally, to avoid ambiguity, keys must not conflict with any other metadata keys for the project or be one of the reserved keys: - \"cluster-location\" - \"cluster-name\" - \"cluster-uid\" - \"configure-sh\" - \"containerd-configure-sh\" - \"enable-oslogin\" - \"gci-ensure-gke-docker\" - \"gci-metrics-enabled\" - \"gci-update-strategy\" - \"instance-template\" - \"kube-env\" - \"startup-script\" - \"user-data\" - \"disable-address-manager\" - \"windows-startup-script-ps1\" - \"common-psm1\" - \"k8s-node-setup-psm1\" - \"install-ssh-psm1\" - \"user-profile-psm1\" Values are free-form strings, and only have meaning as interpreted by the image running in the instance. The only restriction placed on them is that each value's size must be less than or equal to 32 KB. The total size of all keys and values must be less than 512 KB.",
            "type": "object"
          },
          "minCpuPlatform": {
            "description": "Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform. Applicable values are the friendly names of CPU platforms, such as `minCpuPlatform: \"Intel Haswell\"` or `minCpuPlatform: \"Intel Sandy Bridge\"`. For more information, read [how to specify min CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform).",
            "type": "string"
          },
          "nodeGroup": {
            "description": "Setting this field will assign instances of this pool to run on the specified node group. This is useful for running workloads on [sole tenant nodes](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes).",
            "type": "string"
          },
          "oauthScopes": {
            "description": "The set of Google API scopes to be made available on all of the node VMs under the \"default\" service account. The following scopes are recommended, but not required, and by default are not included: * `https://www.googleapis.com/auth/compute` is required for mounting persistent storage on your nodes. * `https://www.googleapis.com/auth/devstorage.read_only` is required for communicating with **gcr.io** (the [Google Container Registry](https://cloud.google.com/container-registry/)). If unspecified, no scopes are added, unless Cloud Logging or Cloud Monitoring are enabled, in which case their required scopes will be added.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "preemptible": {
            "description": "Whether the nodes are created as preemptible VM instances. See: https://cloud.google.com/compute/docs/instances/preemptible for more information about preemptible VM instances.",
            "type": "boolean"
          },
          "reservationAffinity": {
            "$ref": "#/$defs/ReservationAffinity"
          },
          "resourceLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The resource labels for the node pool to use to annotate any related Google Compute Engine resources.",
            "type": "object"
          },
          "resourceManagerTags": {
            "$ref": "#/$defs/ResourceManagerTags"
          },
          "sandboxConfig": {
            "$ref": "#/$defs/SandboxConfig"
          },
          "secondaryBootDisks": {
            "description": "List of secondary boot disks attached to the nodes.",
            "items": {
              "$ref": "#/$defs/SecondaryBootDisk"
            },
            "type": "array"
          },
          "serviceAccount": {
            "description": "The Google Cloud Platform Service Account to be used by the node VMs. Specify the email address of the Service Account; otherwise, if no Service Account is specified, the \"default\" service account is used.",
            "type": "string"
          },
          "shieldedInstanceConfig": {
            "$ref": "#/$defs/ShieldedInstanceConfig"
          },
          "soleTenantConfig": {
            "$ref": "#/$defs/SoleTenantConfig"
          },
          "spot": {
            "description": "Spot flag for enabling Spot VM, which is a rebrand of the existing preemptible flag.",
            "type": "boolean"
          },
          "tags": {
            "description": "The list of instance tags applied to all nodes. Tags are used to identify valid sources or targets for network firewalls and are specified by the client during cluster or node pool creation. Each tag within the list must comply with RFC1035.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "taints": {
            "description": "List of kubernetes taints to be applied to each node. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/",
            "items": {
              "$ref": "#/$defs/NodeTaint"
            },
            "type": "array"
          },
          "windowsNodeConfig": {
            "$ref": "#/$defs/WindowsNodeConfig"
          },
          "workloadMetadataConfig": {
            "$ref": "#/$defs/WorkloadMetadataConfig"
          }
        },
        "type": "object"
      },
      "AcceleratorConfig": {
        "description": "AcceleratorConfig represents a Hardware Accelerator request.",
        "properties": {
          "acceleratorCount": {
            "description": "The number of the accelerator cards exposed to an instance.",
            "format": "int64",
            "type": "string"
          },
          "acceleratorType": {
            "description": "The accelerator type resource name. List of supported accelerators [here](https://cloud.google.com/compute/docs/gpus)",
            "type": "string"
          },
          "gpuDriverInstallationConfig": {
            "$ref": "#/$defs/GPUDriverInstallationConfig"
          },
          "gpuPartitionSize": {
            "description": "Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).",
            "type": "string"
          },
          "gpuSharingConfig": {
            "$ref": "#/$defs/GPUSharingConfig"
          },
          "maxTimeSharedClientsPerGpu": {
            "deprecated": true,
            "description": "The number of time-shared GPU resources to expose for each physical GPU.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GPUDriverInstallationConfig": {
        "description": "GPUDriverInstallationConfig specifies the version of GPU driver to be auto installed.",
        "properties": {
          "gpuDriverVersion": {
            "description": "Mode for how the GPU driver is installed.",
            "enum": [
              "GPU_DRIVER_VERSION_UNSPECIFIED",
              "INSTALLATION_DISABLED",
              "DEFAULT",
              "LATEST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GPUSharingConfig": {
        "description": "GPUSharingConfig represents the GPU sharing configuration for Hardware Accelerators.",
        "properties": {
          "gpuSharingStrategy": {
            "description": "The type of GPU sharing strategy to enable on the GPU node.",
            "enum": [
              "GPU_SHARING_STRATEGY_UNSPECIFIED",
              "TIME_SHARING"
            ],
            "type": "string"
          },
          "maxSharedClientsPerGpu": {
            "description": "The max number of containers that can share a physical GPU.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdvancedMachineFeatures": {
        "description": "Specifies options for controlling advanced machine features.",
        "properties": {
          "threadsPerCore": {
            "description": "The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfidentialNodes": {
        "description": "ConfidentialNodes is configuration for the confidential nodes feature, which makes nodes run on confidential VMs.",
        "properties": {
          "enabled": {
            "description": "Whether Confidential Nodes feature is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "EphemeralStorageConfig": {
        "description": "EphemeralStorageConfig contains configuration for the ephemeral storage filesystem.",
        "properties": {
          "localSsdCount": {
            "description": "Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EphemeralStorageLocalSsdConfig": {
        "description": "EphemeralStorageLocalSsdConfig contains configuration for the node ephemeral storage using Local SSDs.",
        "properties": {
          "localSsdCount": {
            "description": "Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FastSocket": {
        "description": "Configuration of Fast Socket feature.",
        "properties": {
          "enabled": {
            "description": "Whether Fast Socket features are enabled in the node pool.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GcfsConfig": {
        "description": "GcfsConfig contains configurations of Google Container File System.",
        "properties": {
          "enabled": {
            "description": "Whether to use GCFS.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VirtualNIC": {
        "description": "Configuration of gVNIC feature.",
        "properties": {
          "enabled": {
            "description": "Whether gVNIC features are enabled in the node pool.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HostMaintenancePolicy": {
        "description": "HostMaintenancePolicy contains the maintenance policy for the hosts on which the GKE VMs run on.",
        "properties": {
          "maintenanceInterval": {
            "description": "Specifies the frequency of planned maintenance events.",
            "enum": [
              "MAINTENANCE_INTERVAL_UNSPECIFIED",
              "AS_NEEDED",
              "PERIODIC"
            ],
            "type": "string"
          },
          "opportunisticMaintenanceStrategy": {
            "$ref": "#/$defs/OpportunisticMaintenanceStrategy"
          }
        },
        "type": "object"
      },
      "OpportunisticMaintenanceStrategy": {
        "description": "Strategy that will trigger maintenance on behalf of the customer.",
        "properties": {
          "maintenanceAvailabilityWindow": {
            "description": "The window of time that opportunistic maintenance can run. Example: A setting of 14 days implies that opportunistic maintenance can only be ran in the 2 weeks leading up to the scheduled maintenance date. Setting 28 days allows opportunistic maintenance to run at any time in the scheduled maintenance window (all `PERIODIC` maintenance is set 28 days in advance).",
            "format": "google-duration",
            "type": "string"
          },
          "minNodesPerPool": {
            "description": "The minimum nodes required to be available in a pool. Blocks maintenance if it would cause the number of running nodes to dip below this value.",
            "format": "int64",
            "type": "string"
          },
          "nodeIdleTimeWindow": {
            "description": "The amount of time that a node can remain idle (no customer owned workloads running), before triggering maintenance.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeKubeletConfig": {
        "description": "Node kubelet configs.",
        "properties": {
          "cpuCfsQuota": {
            "description": "Enable CPU CFS quota enforcement for containers that specify CPU limits. This option is enabled by default which makes kubelet use CFS quota (https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt) to enforce container CPU limits. Otherwise, CPU limits will not be enforced at all. Disable this option to mitigate CPU throttling problems while still having your pods to be in Guaranteed QoS class by specifying the CPU limits. The default value is 'true' if unspecified.",
            "type": "boolean"
          },
          "cpuCfsQuotaPeriod": {
            "description": "Set the CPU CFS quota period value 'cpu.cfs_period_us'. The string must be a sequence of decimal numbers, each with optional fraction and a unit suffix, such as \"300ms\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\". The value must be a positive duration.",
            "type": "string"
          },
          "cpuManagerPolicy": {
            "description": "Control the CPU management policy on the node. See https://kubernetes.io/docs/tasks/administer-cluster/cpu-management-policies/ The following values are allowed. * \"none\": the default, which represents the existing scheduling behavior. * \"static\": allows pods with certain resource characteristics to be granted increased CPU affinity and exclusivity on the node. The default value is 'none' if unspecified.",
            "type": "string"
          },
          "insecureKubeletReadonlyPortEnabled": {
            "description": "Enable or disable Kubelet read only port.",
            "type": "boolean"
          },
          "podPidsLimit": {
            "description": "Set the Pod PID limits. See https://kubernetes.io/docs/concepts/policy/pid-limiting/#pod-pid-limits Controls the maximum number of processes allowed to run in a pod. The value must be greater than or equal to 1024 and less than 4194304.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinuxNodeConfig": {
        "description": "Parameters that can be configured on Linux nodes.",
        "properties": {
          "cgroupMode": {
            "description": "cgroup_mode specifies the cgroup mode to be used on the node.",
            "enum": [
              "CGROUP_MODE_UNSPECIFIED",
              "CGROUP_MODE_V1",
              "CGROUP_MODE_V2"
            ],
            "type": "string"
          },
          "sysctls": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The Linux kernel parameters to be applied to the nodes and all pods running on the nodes. The following parameters are supported. net.core.busy_poll net.core.busy_read net.core.netdev_max_backlog net.core.rmem_max net.core.wmem_default net.core.wmem_max net.core.optmem_max net.core.somaxconn net.ipv4.tcp_rmem net.ipv4.tcp_wmem net.ipv4.tcp_tw_reuse",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LocalNvmeSsdBlockConfig": {
        "description": "LocalNvmeSsdBlockConfig contains configuration for using raw-block local NVMe SSDs",
        "properties": {
          "localSsdCount": {
            "description": "Number of local NVMe SSDs to use. The limit for this value is dependent upon the maximum number of disk available on a machine per zone. See: https://cloud.google.com/compute/docs/disks/local-ssd for more information. A zero (or unset) value has different meanings depending on machine type being used: 1. For pre-Gen3 machines, which support flexible numbers of local ssds, zero (or unset) means to disable using local SSDs as ephemeral storage. 2. For Gen3 machines which dictate a specific number of local ssds, zero (or unset) means to use the default number of local ssds that goes with that machine type. For example, for a c3-standard-8-lssd machine, 2 local ssds would be provisioned. For c3-standard-8 (which doesn't support local ssds), 0 will be provisioned. See https://cloud.google.com/compute/docs/disks/local-ssd#choose_number_local_ssds for more info.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NodePoolLoggingConfig": {
        "description": "NodePoolLoggingConfig specifies logging configuration for nodepools.",
        "properties": {
          "variantConfig": {
            "$ref": "#/$defs/LoggingVariantConfig"
          }
        },
        "type": "object"
      },
      "LoggingVariantConfig": {
        "description": "LoggingVariantConfig specifies the behaviour of the logging component.",
        "properties": {
          "variant": {
            "description": "Logging variant deployed on nodes.",
            "enum": [
              "VARIANT_UNSPECIFIED",
              "DEFAULT",
              "MAX_THROUGHPUT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReservationAffinity": {
        "description": "[ReservationAffinity](https://cloud.google.com/compute/docs/instances/reserving-zonal-resources) is the configuration of desired reservation which instances could take capacity from.",
        "properties": {
          "consumeReservationType": {
            "description": "Corresponds to the type of reservation consumption.",
            "enum": [
              "UNSPECIFIED",
              "NO_RESERVATION",
              "ANY_RESERVATION",
              "SPECIFIC_RESERVATION"
            ],
            "type": "string"
          },
          "key": {
            "description": "Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify \"compute.googleapis.com/reservation-name\" as the key and specify the name of your reservation as its value.",
            "type": "string"
          },
          "values": {
            "description": "Corresponds to the label value(s) of reservation resource(s).",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceManagerTags": {
        "description": "A map of resource manager tag keys and values to be attached to the nodes for managing Compute Engine firewalls using Network Firewall Policies. Tags must be according to specifications in https://cloud.google.com/vpc/docs/tags-firewalls-overview#specifications. A maximum of 5 tag key-value pairs can be specified. Existing tags will be replaced with new values.",
        "properties": {
          "tags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Tags must be in one of the following formats ([KEY]=[VALUE]) 1. `tagKeys/{tag_key_id}=tagValues/{tag_value_id}` 2. `{org_id}/{tag_key_name}={tag_value_name}` 3. `{project_id}/{tag_key_name}={tag_value_name}`",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SandboxConfig": {
        "description": "SandboxConfig contains configurations of the sandbox to use for the node.",
        "properties": {
          "sandboxType": {
            "deprecated": true,
            "description": "Type of the sandbox to use for the node (e.g. 'gvisor')",
            "type": "string"
          },
          "type": {
            "description": "Type of the sandbox to use for the node.",
            "enum": [
              "UNSPECIFIED",
              "GVISOR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecondaryBootDisk": {
        "description": "SecondaryBootDisk represents a persistent disk attached to a node with special configurations based on its mode.",
        "properties": {
          "diskImage": {
            "description": "Fully-qualified resource ID for an existing disk image.",
            "type": "string"
          },
          "mode": {
            "description": "Disk mode (container image cache, etc.)",
            "enum": [
              "MODE_UNSPECIFIED",
              "CONTAINER_IMAGE_CACHE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ShieldedInstanceConfig": {
        "description": "A set of Shielded Instance options.",
        "properties": {
          "enableIntegrityMonitoring": {
            "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created.",
            "type": "boolean"
          },
          "enableSecureBoot": {
            "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SoleTenantConfig": {
        "description": "SoleTenantConfig contains the NodeAffinities to specify what shared sole tenant node groups should back the node pool.",
        "properties": {
          "nodeAffinities": {
            "description": "NodeAffinities used to match to a shared sole tenant node group.",
            "items": {
              "$ref": "#/$defs/NodeAffinity"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeAffinity": {
        "description": "Specifies the NodeAffinity key, values, and affinity operator according to [shared sole tenant node group affinities](https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes#node_affinity_and_anti-affinity).",
        "properties": {
          "key": {
            "description": "Key for NodeAffinity.",
            "type": "string"
          },
          "operator": {
            "description": "Operator for NodeAffinity.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "IN",
              "NOT_IN"
            ],
            "type": "string"
          },
          "values": {
            "description": "Values for NodeAffinity.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeTaint": {
        "description": "Kubernetes taint is composed of three fields: key, value, and effect. Effect can only be one of three types: NoSchedule, PreferNoSchedule or NoExecute. See [here](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration) for more information, including usage and the valid values.",
        "properties": {
          "effect": {
            "description": "Effect for taint.",
            "enum": [
              "EFFECT_UNSPECIFIED",
              "NO_SCHEDULE",
              "PREFER_NO_SCHEDULE",
              "NO_EXECUTE"
            ],
            "type": "string"
          },
          "key": {
            "description": "Key for taint.",
            "type": "string"
          },
          "value": {
            "description": "Value for taint.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WindowsNodeConfig": {
        "description": "Parameters that can be configured on Windows nodes. Windows Node Config that define the parameters that will be used to configure the Windows node pool settings",
        "properties": {
          "osVersion": {
            "description": "OSVersion specifies the Windows node config to be used on the node",
            "enum": [
              "OS_VERSION_UNSPECIFIED",
              "OS_VERSION_LTSC2019",
              "OS_VERSION_LTSC2022"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkloadMetadataConfig": {
        "description": "WorkloadMetadataConfig defines the metadata configuration to expose to workloads on the node pool.",
        "properties": {
          "mode": {
            "description": "Mode is the configuration for how to expose metadata to workloads running on the node pool.",
            "enum": [
              "MODE_UNSPECIFIED",
              "GCE_METADATA",
              "GKE_METADATA"
            ],
            "type": "string"
          },
          "nodeMetadata": {
            "deprecated": true,
            "description": "NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.",
            "enum": [
              "UNSPECIFIED",
              "SECURE",
              "EXPOSE",
              "GKE_METADATA_SERVER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeManagement": {
        "description": "NodeManagement defines the set of node management services turned on for the node pool.",
        "properties": {
          "autoRepair": {
            "description": "Whether the nodes will be automatically repaired.",
            "type": "boolean"
          },
          "autoUpgrade": {
            "description": "Whether the nodes will be automatically upgraded.",
            "type": "boolean"
          },
          "upgradeOptions": {
            "$ref": "#/$defs/AutoUpgradeOptions"
          }
        },
        "type": "object"
      },
      "AutoUpgradeOptions": {
        "description": "AutoUpgradeOptions defines the set of options for the user to control how the Auto Upgrades will proceed.",
        "properties": {
          "autoUpgradeStartTime": {
            "description": "[Output only] This field is set when upgrades are about to commence with the approximate start time for the upgrades, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            "type": "string"
          },
          "description": {
            "description": "[Output only] This field is set when upgrades are about to commence with the description of the upgrade.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaxPodsConstraint": {
        "description": "Constraints applied to pods.",
        "properties": {
          "maxPodsPerNode": {
            "description": "Constraint enforced on the max num of pods per node.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeNetworkConfig": {
        "description": "Parameters for node pool-level network config.",
        "properties": {
          "additionalNodeNetworkConfigs": {
            "description": "We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface",
            "items": {
              "$ref": "#/$defs/AdditionalNodeNetworkConfig"
            },
            "type": "array"
          },
          "additionalPodNetworkConfigs": {
            "description": "We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node",
            "items": {
              "$ref": "#/$defs/AdditionalPodNetworkConfig"
            },
            "type": "array"
          },
          "createPodRange": {
            "description": "Input only. Whether to create a new range for pod IPs in this node pool. Defaults are provided for `pod_range` and `pod_ipv4_cidr_block` if they are not specified. If neither `create_pod_range` or `pod_range` are specified, the cluster-level default (`ip_allocation_policy.cluster_ipv4_cidr_block`) is used. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.",
            "type": "boolean"
          },
          "enablePrivateNodes": {
            "description": "Whether nodes have internal IP addresses only. If enable_private_nodes is not specified, then the value is derived from cluster.privateClusterConfig.enablePrivateNodes",
            "type": "boolean"
          },
          "networkPerformanceConfig": {
            "$ref": "#/$defs/NetworkPerformanceConfig"
          },
          "podCidrOverprovisionConfig": {
            "$ref": "#/$defs/PodCIDROverprovisionConfig"
          },
          "podIpv4CidrBlock": {
            "description": "The IP address range for pod IPs in this node pool. Only applicable if `create_pod_range` is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. `/14`) to have a range chosen with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) to pick a specific range to use. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.",
            "type": "string"
          },
          "podIpv4RangeUtilization": {
            "description": "Output only. [Output only] The utilization of the IPv4 range for the pod. The ratio is Usage/[Total number of IPs in the secondary range], Usage=numNodes*numZones*podIPsPerNode.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "podRange": {
            "description": "The ID of the secondary range for pod IPs. If `create_pod_range` is true, this ID is used for the new range. If `create_pod_range` is false, uses an existing secondary range with this ID. Only applicable if `ip_allocation_policy.use_ip_aliases` is true. This field cannot be changed after the node pool has been created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdditionalNodeNetworkConfig": {
        "description": "AdditionalNodeNetworkConfig is the configuration for additional node networks within the NodeNetworkConfig message",
        "properties": {
          "network": {
            "description": "Name of the VPC where the additional interface belongs",
            "type": "string"
          },
          "subnetwork": {
            "description": "Name of the subnetwork where the additional interface belongs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdditionalPodNetworkConfig": {
        "description": "AdditionalPodNetworkConfig is the configuration for additional pod networks within the NodeNetworkConfig message",
        "properties": {
          "maxPodsPerNode": {
            "$ref": "#/$defs/MaxPodsConstraint"
          },
          "secondaryPodRange": {
            "description": "The name of the secondary range on the subnet which provides IP address for this pod range",
            "type": "string"
          },
          "subnetwork": {
            "description": "Name of the subnetwork where the additional pod network belongs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkPerformanceConfig": {
        "description": "Configuration of all network bandwidth tiers",
        "properties": {
          "externalIpEgressBandwidthTier": {
            "description": "Specifies the network bandwidth tier for the NodePool for traffic to external/public IP addresses.",
            "enum": [
              "TIER_UNSPECIFIED",
              "TIER_1"
            ],
            "type": "string"
          },
          "totalEgressBandwidthTier": {
            "description": "Specifies the total network bandwidth tier for the NodePool.",
            "enum": [
              "TIER_UNSPECIFIED",
              "TIER_1"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PodCIDROverprovisionConfig": {
        "description": "[PRIVATE FIELD] Config for pod CIDR size overprovisioning.",
        "properties": {
          "disable": {
            "description": "Whether Pod CIDR overprovisioning is disabled. Note: Pod CIDR overprovisioning is enabled by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PlacementPolicy": {
        "description": "PlacementPolicy defines the placement policy used by the node pool.",
        "properties": {
          "policyName": {
            "description": "If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.",
            "type": "string"
          },
          "tpuTopology": {
            "description": "TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies",
            "type": "string"
          },
          "type": {
            "description": "The type of placement.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "COMPACT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "QueuedProvisioning": {
        "description": "QueuedProvisioning defines the queued provisioning used by the node pool.",
        "properties": {
          "enabled": {
            "description": "Denotes that this nodepool is QRM specific, meaning nodes can be only obtained through queuing via the Cluster Autoscaler ProvisioningRequest API.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UpdateInfo": {
        "description": "UpdateInfo contains resource (instance groups, etc), status and other intermediate information relevant to a node pool upgrade.",
        "properties": {
          "blueGreenInfo": {
            "$ref": "#/$defs/BlueGreenInfo"
          }
        },
        "type": "object"
      },
      "BlueGreenInfo": {
        "description": "Information relevant to blue-green upgrade.",
        "properties": {
          "blueInstanceGroupUrls": {
            "description": "The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with blue pool.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "bluePoolDeletionStartTime": {
            "description": "Time to start deleting blue pool to complete blue-green upgrade, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            "type": "string"
          },
          "greenInstanceGroupUrls": {
            "description": "The resource URLs of the [managed instance groups] (/compute/docs/instance-groups/creating-groups-of-managed-instances) associated with green pool.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "greenPoolVersion": {
            "description": "Version of green pool.",
            "type": "string"
          },
          "phase": {
            "description": "Current blue-green upgrade phase.",
            "enum": [
              "PHASE_UNSPECIFIED",
              "UPDATE_STARTED",
              "CREATING_GREEN_POOL",
              "CORDONING_BLUE_POOL",
              "WAITING_TO_DRAIN_BLUE_POOL",
              "DRAINING_BLUE_POOL",
              "NODE_POOL_SOAKING",
              "DELETING_BLUE_POOL",
              "ROLLBACK_STARTED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeSettings": {
        "description": "These upgrade settings control the level of parallelism and the level of disruption caused by an upgrade. maxUnavailable controls the number of nodes that can be simultaneously unavailable. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). Note: upgrades inevitably introduce some disruption since workloads need to be moved from old nodes to new, upgraded ones. Even if maxUnavailable=0, this holds true. (Disruption stays within the limits of PodDisruptionBudget, if it is configured.) Consider a hypothetical node pool with 5 nodes having maxSurge=2, maxUnavailable=1. This means the upgrade process upgrades 3 nodes simultaneously. It creates 2 additional (upgraded) nodes, then it brings down 3 old (not yet upgraded) nodes at the same time. This ensures that there are always at least 4 nodes available. These upgrade settings configure the upgrade strategy for the node pool. Use strategy to switch between the strategies applied to the node pool. If the strategy is SURGE, use max_surge and max_unavailable to control the level of parallelism and the level of disruption caused by upgrade. 1. maxSurge controls the number of additional nodes that can be added to the node pool temporarily for the time of the upgrade to increase the number of available nodes. 2. maxUnavailable controls the number of nodes that can be simultaneously unavailable. 3. (maxUnavailable + maxSurge) determines the level of parallelism (how many nodes are being upgraded at the same time). If the strategy is BLUE_GREEN, use blue_green_settings to configure the blue-green upgrade related settings. 1. standard_rollout_policy is the default policy. The policy is used to control the way blue pool gets drained. The draining is executed in the batch mode. The batch size could be specified as either percentage of the node pool size or the number of nodes. batch_soak_duration is the soak time after each batch gets drained. 2. node_pool_soak_duration is the soak time after all blue nodes are drained. After this period, the blue pool nodes will be deleted.",
        "properties": {
          "blueGreenSettings": {
            "$ref": "#/$defs/BlueGreenSettings"
          },
          "maxSurge": {
            "description": "The maximum number of nodes that can be created beyond the current size of the node pool during the upgrade process.",
            "format": "int32",
            "type": "integer"
          },
          "maxUnavailable": {
            "description": "The maximum number of nodes that can be simultaneously unavailable during the upgrade process. A node is considered available if its status is Ready.",
            "format": "int32",
            "type": "integer"
          },
          "strategy": {
            "description": "Update strategy of the node pool.",
            "enum": [
              "NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED",
              "BLUE_GREEN",
              "SURGE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BlueGreenSettings": {
        "description": "Settings for blue-green upgrade.",
        "properties": {
          "autoscaledRolloutPolicy": {
            "$ref": "#/$defs/AutoscaledRolloutPolicy"
          },
          "nodePoolSoakDuration": {
            "description": "Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.",
            "format": "google-duration",
            "type": "string"
          },
          "standardRolloutPolicy": {
            "$ref": "#/$defs/StandardRolloutPolicy"
          }
        },
        "type": "object"
      },
      "AutoscaledRolloutPolicy": {
        "description": "Autoscaled rollout policy uses cluster autoscaler during blue-green upgrades to scale both the green and blue pools.",
        "properties": {},
        "type": "object"
      },
      "StandardRolloutPolicy": {
        "description": "Standard rollout policy is the default policy for blue-green.",
        "properties": {
          "batchNodeCount": {
            "description": "Number of blue nodes to drain in a batch.",
            "format": "int32",
            "type": "integer"
          },
          "batchPercentage": {
            "description": "Percentage of the blue pool nodes to drain in a batch. The range of this field should be (0.0, 1.0].",
            "format": "float",
            "type": "number"
          },
          "batchSoakDuration": {
            "description": "Soak time after each batch gets drained. Default to zero.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://container.googleapis.com//v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This operation resource represents operations that may have happened or are happening on the cluster. All fields are output only.",
        "**Key properties:**",
        {
          "$ul": [
            "**clusterConditions**: Which conditions caused the current cluster state. Deprecated. Use field error instead.",
            "**detail**: Detailed operation progress, if available.",
            "**endTime**: [Output only] The time the operation completed, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**location**: [Output only] The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) or [region](https://cloud.google.com/compute/docs/regions-zones/regions-zones#available) in which the cluster resides.",
            "**name**: The server-assigned ID for the operation.",
            "**nodepoolConditions**: Which conditions caused the current node pool state. Deprecated. Use field error instead.",
            "**operationType**: The operation type.",
            [
              "**progress**: Information about operation (or operation stage) progress.",
              {
                "$ul": [
                  "**metrics**: Progress metric bundle, for example: metrics: [{name: \"nodes done\", int_value: 15}, {name: \"nodes total\", int_value: 32}] or metrics: [{name: \"progress\", double_value: 0.56}, {name: \"progress scale\", double_value: 1.0}]",
                  "**name**: A non-parameterized string describing an operation stage. Unset for single-stage operations.",
                  "**stages**: Substages of an operation or a stage.",
                  "**status**: Status of an operation stage. Unset for single-stage operations."
                ]
              }
            ],
            "**selfLink**: Server-defined URI for the operation. Example: `https://container.googleapis.com/v1alpha1/projects/123/locations/us-central1/operations/operation-123`.",
            "**startTime**: [Output only] The time the operation started, in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.",
            "**status**: The current status of the operation.",
            "**statusMessage**: Output only. If an error has occurred, a textual description of the error. Deprecated. Use field error instead.",
            "**targetLink**: Server-defined URI for the target of the operation. The format of this is a URI to the resource being modified (such as a cluster, node pool, or node). For node pool repairs, there may be multiple nodes being repaired, but only one will be the target. Examples: - ## `https://container.googleapis.com/v1/projects/123/locations/us-central1/clusters/my-cluster` ## `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np` `https://container.googleapis.com/v1/projects/123/zones/us-central1-c/clusters/my-cluster/nodePools/my-np/node/my-node`",
            "**zone**: The name of the Google Compute Engine [zone](https://cloud.google.com/compute/docs/zones#available) in which the operation is taking place. This field is deprecated, use location instead."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
