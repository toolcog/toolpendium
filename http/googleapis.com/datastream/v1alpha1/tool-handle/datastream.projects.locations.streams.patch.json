{
  "name": "datastream_projects_locations_streams_patch",
  "description": "Use this method to update the configuration of a stream.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Output only. The stream's name."
      },
      "force": {
        "type": "boolean",
        "description": "Optional. Execute the update without validating it."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "updateMask": {
        "type": "string",
        "description": "Optional. Field mask is used to specify the fields to be overwritten in the stream resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all fields will be overwritten."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. Only validate the stream with the changes, without actually updating it. The default is false."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Stream"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Stream": {
        "properties": {
          "backfillAll": {
            "$ref": "#/$defs/BackfillAllStrategy"
          },
          "backfillNone": {
            "$ref": "#/$defs/BackfillNoneStrategy"
          },
          "createTime": {
            "description": "Output only. The creation time of the stream.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "customerManagedEncryptionKey": {
            "description": "Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.",
            "type": "string"
          },
          "destinationConfig": {
            "$ref": "#/$defs/DestinationConfig"
          },
          "displayName": {
            "description": "Required. Display name.",
            "type": "string"
          },
          "errors": {
            "description": "Output only. Errors on the Stream.",
            "items": {
              "$ref": "#/$defs/Error"
            },
            "readOnly": true,
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The stream's name.",
            "readOnly": true,
            "type": "string"
          },
          "sourceConfig": {
            "$ref": "#/$defs/SourceConfig"
          },
          "state": {
            "description": "The state of the stream.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATED",
              "RUNNING",
              "PAUSED",
              "MAINTENANCE",
              "FAILED",
              "FAILED_PERMANENTLY",
              "STARTING",
              "DRAINING"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last update time of the stream.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackfillAllStrategy": {
        "description": "Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.",
        "properties": {
          "mysqlExcludedObjects": {
            "$ref": "#/$defs/MysqlRdbms"
          },
          "oracleExcludedObjects": {
            "$ref": "#/$defs/OracleRdbms"
          }
        },
        "type": "object"
      },
      "MysqlRdbms": {
        "description": "MySQL database structure",
        "properties": {
          "mysqlDatabases": {
            "description": "Mysql databases on the server",
            "items": {
              "$ref": "#/$defs/MysqlDatabase"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MysqlDatabase": {
        "description": "MySQL database.",
        "properties": {
          "databaseName": {
            "description": "Database name.",
            "type": "string"
          },
          "mysqlTables": {
            "description": "Tables in the database.",
            "items": {
              "$ref": "#/$defs/MysqlTable"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MysqlTable": {
        "description": "MySQL table.",
        "properties": {
          "mysqlColumns": {
            "description": "MySQL columns in the database. When unspecified as part of include/exclude lists, includes/excludes everything.",
            "items": {
              "$ref": "#/$defs/MysqlColumn"
            },
            "type": "array"
          },
          "tableName": {
            "description": "Table name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MysqlColumn": {
        "description": "MySQL Column.",
        "properties": {
          "collation": {
            "description": "Column collation.",
            "type": "string"
          },
          "columnName": {
            "description": "Column name.",
            "type": "string"
          },
          "dataType": {
            "description": "The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html",
            "type": "string"
          },
          "length": {
            "description": "Column length.",
            "format": "int32",
            "type": "integer"
          },
          "nullable": {
            "description": "Whether or not the column can accept a null value.",
            "type": "boolean"
          },
          "ordinalPosition": {
            "description": "The ordinal position of the column in the table.",
            "format": "int32",
            "type": "integer"
          },
          "primaryKey": {
            "description": "Whether or not the column represents a primary key.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "OracleRdbms": {
        "description": "Oracle database structure.",
        "properties": {
          "oracleSchemas": {
            "description": "Oracle schemas/databases in the database server.",
            "items": {
              "$ref": "#/$defs/OracleSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OracleSchema": {
        "description": "Oracle schema.",
        "properties": {
          "oracleTables": {
            "description": "Tables in the schema.",
            "items": {
              "$ref": "#/$defs/OracleTable"
            },
            "type": "array"
          },
          "schemaName": {
            "description": "Schema name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OracleTable": {
        "description": "Oracle table.",
        "properties": {
          "oracleColumns": {
            "description": "Oracle columns in the schema. When unspecified as part of inclue/exclude lists, includes/excludes everything.",
            "items": {
              "$ref": "#/$defs/OracleColumn"
            },
            "type": "array"
          },
          "tableName": {
            "description": "Table name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OracleColumn": {
        "description": "Oracle Column.",
        "properties": {
          "columnName": {
            "description": "Column name.",
            "type": "string"
          },
          "dataType": {
            "description": "The Oracle data type.",
            "type": "string"
          },
          "encoding": {
            "description": "Column encoding.",
            "type": "string"
          },
          "length": {
            "description": "Column length.",
            "format": "int32",
            "type": "integer"
          },
          "nullable": {
            "description": "Whether or not the column can accept a null value.",
            "type": "boolean"
          },
          "ordinalPosition": {
            "description": "The ordinal position of the column in the table.",
            "format": "int32",
            "type": "integer"
          },
          "precision": {
            "description": "Column precision.",
            "format": "int32",
            "type": "integer"
          },
          "primaryKey": {
            "description": "Whether or not the column represents a primary key.",
            "type": "boolean"
          },
          "scale": {
            "description": "Column scale.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BackfillNoneStrategy": {
        "description": "Backfill strategy to disable automatic backfill for the Stream's objects.",
        "properties": {},
        "type": "object"
      },
      "DestinationConfig": {
        "description": "The configuration of the stream destination.",
        "properties": {
          "destinationConnectionProfileName": {
            "description": "Required. Destination connection profile identifier.",
            "type": "string"
          },
          "gcsDestinationConfig": {
            "$ref": "#/$defs/GcsDestinationConfig"
          }
        },
        "type": "object"
      },
      "GcsDestinationConfig": {
        "description": "Google Cloud Storage destination configuration",
        "properties": {
          "avroFileFormat": {
            "$ref": "#/$defs/AvroFileFormat"
          },
          "fileRotationInterval": {
            "description": "The maximum duration for which new events are added before a file is closed and a new file is created.",
            "format": "google-duration",
            "type": "string"
          },
          "fileRotationMb": {
            "description": "The maximum file size to be saved in the bucket.",
            "format": "int32",
            "type": "integer"
          },
          "gcsFileFormat": {
            "deprecated": true,
            "description": "File format that data should be written in. Deprecated field (b/169501737) - use file_format instead.",
            "enum": [
              "GCS_FILE_FORMAT_UNSPECIFIED",
              "AVRO"
            ],
            "type": "string"
          },
          "jsonFileFormat": {
            "$ref": "#/$defs/JsonFileFormat"
          },
          "path": {
            "description": "Path inside the Cloud Storage bucket to write data to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AvroFileFormat": {
        "description": "AVRO file format configuration.",
        "properties": {},
        "type": "object"
      },
      "JsonFileFormat": {
        "description": "JSON file format configuration.",
        "properties": {
          "compression": {
            "description": "Compression of the loaded JSON file.",
            "enum": [
              "JSON_COMPRESSION_UNSPECIFIED",
              "NO_COMPRESSION",
              "GZIP"
            ],
            "type": "string"
          },
          "schemaFileFormat": {
            "description": "The schema file format along JSON data files.",
            "enum": [
              "SCHEMA_FILE_FORMAT_UNSPECIFIED",
              "NO_SCHEMA_FILE",
              "AVRO_SCHEMA_FILE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "Represent a user-facing Error.",
        "properties": {
          "details": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional information about the error.",
            "type": "object"
          },
          "errorTime": {
            "description": "The time when the error occurred.",
            "format": "google-datetime",
            "type": "string"
          },
          "errorUuid": {
            "description": "A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.",
            "type": "string"
          },
          "message": {
            "description": "A message containing more information about the error that occurred.",
            "type": "string"
          },
          "reason": {
            "description": "A title that explains the reason for the error.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SourceConfig": {
        "description": "The configuration of the stream source.",
        "properties": {
          "mysqlSourceConfig": {
            "$ref": "#/$defs/MysqlSourceConfig"
          },
          "oracleSourceConfig": {
            "$ref": "#/$defs/OracleSourceConfig"
          },
          "sourceConnectionProfileName": {
            "description": "Required. Source connection profile identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MysqlSourceConfig": {
        "description": "MySQL source configuration",
        "properties": {
          "allowlist": {
            "$ref": "#/$defs/MysqlRdbms"
          },
          "rejectlist": {
            "$ref": "#/$defs/MysqlRdbms"
          }
        },
        "type": "object"
      },
      "OracleSourceConfig": {
        "description": "Oracle data source configuration",
        "properties": {
          "allowlist": {
            "$ref": "#/$defs/OracleRdbms"
          },
          "dropLargeObjects": {
            "$ref": "#/$defs/DropLargeObjects"
          },
          "rejectlist": {
            "$ref": "#/$defs/OracleRdbms"
          }
        },
        "type": "object"
      },
      "DropLargeObjects": {
        "description": "Configuration to drop large object values.",
        "properties": {},
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://datastream.googleapis.com//v1alpha1/{name}{?force,requestId,updateMask,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
