{
  "name": "notebooks_projects_locations_instances_create",
  "description": "Creates a new Instance in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`"
      },
      "instanceId": {
        "type": "string",
        "description": "Required. User-defined unique ID of this instance."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. Idempotent request UUID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Instance"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Instance": {
        "description": "The definition of a notebook instance.",
        "properties": {
          "createTime": {
            "description": "Output only. Instance creation time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "creator": {
            "description": "Output only. Email address of entity that sent original CreateInstance request.",
            "readOnly": true,
            "type": "string"
          },
          "disableProxyAccess": {
            "description": "Optional. If true, the notebook instance will not register with the proxy.",
            "type": "boolean"
          },
          "gceSetup": {
            "$ref": "#/$defs/GceSetup"
          },
          "healthInfo": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. Additional information about instance health. Example: healthInfo\": { \"docker_proxy_agent_status\": \"1\", \"docker_status\": \"1\", \"jupyterlab_api_status\": \"-1\", \"jupyterlab_status\": \"-1\", \"updated\": \"2020-10-18 09:40:03.573409\" }",
            "readOnly": true,
            "type": "object"
          },
          "healthState": {
            "description": "Output only. Instance health_state.",
            "enum": [
              "HEALTH_STATE_UNSPECIFIED",
              "HEALTHY",
              "UNHEALTHY",
              "AGENT_NOT_INSTALLED",
              "AGENT_NOT_RUNNING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Output only. Unique ID of the resource.",
            "readOnly": true,
            "type": "string"
          },
          "instanceOwners": {
            "description": "Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`",
            "readOnly": true,
            "type": "string"
          },
          "proxyUri": {
            "description": "Output only. The proxy endpoint that is used to access the Jupyter notebook.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of this instance.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STARTING",
              "PROVISIONING",
              "ACTIVE",
              "STOPPING",
              "STOPPED",
              "DELETED",
              "UPGRADING",
              "INITIALIZING",
              "SUSPENDING",
              "SUSPENDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "thirdPartyProxyUrl": {
            "description": "Output only. The workforce pools proxy endpoint that is used to access the Jupyter notebook.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Instance update time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upgradeHistory": {
            "description": "Output only. The upgrade history of this instance.",
            "items": {
              "$ref": "#/$defs/UpgradeHistoryEntry"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GceSetup": {
        "description": "The definition of how to configure a VM instance outside of Resources and Identity.",
        "properties": {
          "acceleratorConfigs": {
            "description": "Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.",
            "items": {
              "$ref": "#/$defs/AcceleratorConfig"
            },
            "type": "array"
          },
          "bootDisk": {
            "$ref": "#/$defs/BootDisk"
          },
          "containerImage": {
            "$ref": "#/$defs/ContainerImage"
          },
          "dataDisks": {
            "description": "Optional. Data disks attached to the VM instance. Currently supports only one data disk.",
            "items": {
              "$ref": "#/$defs/DataDisk"
            },
            "type": "array"
          },
          "disablePublicIp": {
            "description": "Optional. If true, no external IP will be assigned to this VM instance.",
            "type": "boolean"
          },
          "enableIpForwarding": {
            "description": "Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward",
            "type": "boolean"
          },
          "gpuDriverConfig": {
            "$ref": "#/$defs/GPUDriverConfig"
          },
          "machineType": {
            "description": "Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Custom metadata to apply to this instance.",
            "type": "object"
          },
          "networkInterfaces": {
            "description": "Optional. The network interfaces for the VM. Supports only one interface.",
            "items": {
              "$ref": "#/$defs/NetworkInterface"
            },
            "type": "array"
          },
          "serviceAccounts": {
            "description": "Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.",
            "items": {
              "$ref": "#/$defs/ServiceAccount"
            },
            "type": "array"
          },
          "shieldedInstanceConfig": {
            "$ref": "#/$defs/ShieldedInstanceConfig"
          },
          "tags": {
            "description": "Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vmImage": {
            "$ref": "#/$defs/VmImage"
          }
        },
        "type": "object"
      },
      "AcceleratorConfig": {
        "description": "An accelerator configuration for a VM instance Definition of a hardware accelerator. Note that there is no check on `type` and `core_count` combinations. TPUs are not supported. See [GPUs on Compute Engine](https://cloud.google.com/compute/docs/gpus/#gpus-list) to find a valid combination.",
        "properties": {
          "coreCount": {
            "description": "Optional. Count of cores of this accelerator.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "Optional. Type of this accelerator.",
            "enum": [
              "ACCELERATOR_TYPE_UNSPECIFIED",
              "NVIDIA_TESLA_P100",
              "NVIDIA_TESLA_V100",
              "NVIDIA_TESLA_P4",
              "NVIDIA_TESLA_T4",
              "NVIDIA_TESLA_A100",
              "NVIDIA_A100_80GB",
              "NVIDIA_L4",
              "NVIDIA_TESLA_T4_VWS",
              "NVIDIA_TESLA_P100_VWS",
              "NVIDIA_TESLA_P4_VWS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BootDisk": {
        "description": "The definition of a boot disk.",
        "properties": {
          "diskEncryption": {
            "description": "Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.",
            "enum": [
              "DISK_ENCRYPTION_UNSPECIFIED",
              "GMEK",
              "CMEK"
            ],
            "type": "string"
          },
          "diskSizeGb": {
            "description": "Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.",
            "format": "int64",
            "type": "string"
          },
          "diskType": {
            "description": "Optional. Indicates the type of the disk.",
            "enum": [
              "DISK_TYPE_UNSPECIFIED",
              "PD_STANDARD",
              "PD_SSD",
              "PD_BALANCED",
              "PD_EXTREME"
            ],
            "type": "string"
          },
          "kmsKey": {
            "description": "Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContainerImage": {
        "description": "Definition of a container image for starting a notebook instance with the environment installed in a container.",
        "properties": {
          "repository": {
            "description": "Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`",
            "type": "string"
          },
          "tag": {
            "description": "Optional. The tag of the container image. If not specified, this defaults to the latest tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataDisk": {
        "description": "An instance-attached disk resource.",
        "properties": {
          "diskEncryption": {
            "description": "Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.",
            "enum": [
              "DISK_ENCRYPTION_UNSPECIFIED",
              "GMEK",
              "CMEK"
            ],
            "type": "string"
          },
          "diskSizeGb": {
            "description": "Optional. The size of the disk in GB attached to this VM instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to 100.",
            "format": "int64",
            "type": "string"
          },
          "diskType": {
            "description": "Optional. Input only. Indicates the type of the disk.",
            "enum": [
              "DISK_TYPE_UNSPECIFIED",
              "PD_STANDARD",
              "PD_SSD",
              "PD_BALANCED",
              "PD_EXTREME"
            ],
            "type": "string"
          },
          "kmsKey": {
            "description": "Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GPUDriverConfig": {
        "description": "A GPU driver configuration",
        "properties": {
          "customGpuDriverPath": {
            "description": "Optional. Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.",
            "type": "string"
          },
          "enableGpuDriver": {
            "description": "Optional. Whether the end user authorizes Google Cloud to install GPU driver on this VM instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NetworkInterface": {
        "description": "The definition of a network interface resource attached to a VM.",
        "properties": {
          "network": {
            "description": "Optional. The name of the VPC that this VM instance is in. Format: `projects/{project_id}/global/networks/{network_id}`",
            "type": "string"
          },
          "nicType": {
            "description": "Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.",
            "enum": [
              "NIC_TYPE_UNSPECIFIED",
              "VIRTIO_NET",
              "GVNIC"
            ],
            "type": "string"
          },
          "subnet": {
            "description": "Optional. The name of the subnet that this VM instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceAccount": {
        "description": "A service account that acts as an identity.",
        "properties": {
          "email": {
            "description": "Optional. Email address of the service account.",
            "type": "string"
          },
          "scopes": {
            "description": "Output only. The list of scopes to be made available for this service account. Set by the CLH to https://www.googleapis.com/auth/cloud-platform",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ShieldedInstanceConfig": {
        "description": "A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.",
        "properties": {
          "enableIntegrityMonitoring": {
            "description": "Optional. Defines whether the VM instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the VM instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the VM instance is created. Enabled by default.",
            "type": "boolean"
          },
          "enableSecureBoot": {
            "description": "Optional. Defines whether the VM instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.",
            "type": "boolean"
          },
          "enableVtpm": {
            "description": "Optional. Defines whether the VM instance has the vTPM enabled. Enabled by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VmImage": {
        "description": "Definition of a custom Compute Engine virtual machine image for starting a notebook instance with the environment installed directly on the VM.",
        "properties": {
          "family": {
            "description": "Optional. Use this VM image family to find the image; the newest image in this family will be used.",
            "type": "string"
          },
          "name": {
            "description": "Optional. Use VM image name to find the image.",
            "type": "string"
          },
          "project": {
            "description": "Required. The name of the Google Cloud project that this VM image belongs to. Format: `{project_id}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeHistoryEntry": {
        "description": "The entry of VM image upgrade history.",
        "properties": {
          "action": {
            "description": "Optional. Action. Rolloback or Upgrade.",
            "enum": [
              "ACTION_UNSPECIFIED",
              "UPGRADE",
              "ROLLBACK"
            ],
            "type": "string"
          },
          "containerImage": {
            "description": "Optional. The container image before this instance upgrade.",
            "type": "string"
          },
          "createTime": {
            "description": "Immutable. The time that this instance upgrade history entry is created.",
            "format": "google-datetime",
            "type": "string"
          },
          "framework": {
            "description": "Optional. The framework of this notebook instance.",
            "type": "string"
          },
          "snapshot": {
            "description": "Optional. The snapshot of the boot disk of this notebook instance before upgrade.",
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of this instance upgrade history entry.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STARTED",
              "SUCCEEDED",
              "FAILED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "targetVersion": {
            "description": "Optional. Target VM Version, like m63.",
            "type": "string"
          },
          "version": {
            "description": "Optional. The version of the notebook instance before this upgrade.",
            "type": "string"
          },
          "vmImage": {
            "description": "Optional. The VM image before this instance upgrade.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://notebooks.googleapis.com//v2/{parent}/instances{?instanceId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
