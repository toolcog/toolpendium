{
  "name": "notebooks_projects_locations_runtimes_create",
  "description": "Creates a new Runtime in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Format: `parent=projects/{project_id}/locations/{location}`"
      },
      "requestId": {
        "type": "string",
        "description": "Idempotent request UUID."
      },
      "runtimeId": {
        "type": "string",
        "description": "Required. User-defined unique ID of this Runtime."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Runtime"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Runtime": {
        "description": "The definition of a Runtime for a managed notebook instance.",
        "properties": {
          "accessConfig": {
            "$ref": "#/$defs/RuntimeAccessConfig"
          },
          "createTime": {
            "description": "Output only. Runtime creation time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "healthState": {
            "description": "Output only. Runtime health_state.",
            "enum": [
              "HEALTH_STATE_UNSPECIFIED",
              "HEALTHY",
              "UNHEALTHY",
              "AGENT_NOT_INSTALLED",
              "AGENT_NOT_RUNNING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.",
            "type": "object"
          },
          "metrics": {
            "$ref": "#/$defs/RuntimeMetrics"
          },
          "migrated": {
            "description": "Output only. Bool indicating whether this notebook has been migrated to a Workbench Instance",
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "description": "Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`",
            "readOnly": true,
            "type": "string"
          },
          "runtimeMigrationEligibility": {
            "$ref": "#/$defs/RuntimeMigrationEligibility"
          },
          "softwareConfig": {
            "$ref": "#/$defs/RuntimeSoftwareConfig"
          },
          "state": {
            "description": "Output only. Runtime state.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STARTING",
              "PROVISIONING",
              "ACTIVE",
              "STOPPING",
              "STOPPED",
              "DELETING",
              "UPGRADING",
              "INITIALIZING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Runtime update time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "virtualMachine": {
            "$ref": "#/$defs/VirtualMachine"
          }
        },
        "type": "object"
      },
      "RuntimeAccessConfig": {
        "description": "Specifies the login configuration for Runtime",
        "properties": {
          "accessType": {
            "description": "The type of access mode this instance.",
            "enum": [
              "RUNTIME_ACCESS_TYPE_UNSPECIFIED",
              "SINGLE_USER",
              "SERVICE_ACCOUNT"
            ],
            "type": "string"
          },
          "proxyUri": {
            "description": "Output only. The proxy endpoint that is used to access the runtime.",
            "readOnly": true,
            "type": "string"
          },
          "runtimeOwner": {
            "description": "The owner of this runtime after creation. Format: `alias@example.com` Currently supports one owner only.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuntimeMetrics": {
        "description": "Contains runtime daemon metrics, such as OS and kernels and sessions stats.",
        "properties": {
          "systemMetrics": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. The system metrics.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "RuntimeMigrationEligibility": {
        "description": "RuntimeMigrationEligibility represents the feasibility information of a migration from GmN to WbI.",
        "properties": {
          "errors": {
            "description": "Output only. Certain configurations make the GmN ineligible for an automatic migration. A manual migration is required.",
            "items": {
              "enum": [
                "ERROR_UNSPECIFIED",
                "CUSTOM_CONTAINER"
              ],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "warnings": {
            "description": "Output only. Certain configurations will be defaulted during the migration.",
            "items": {
              "enum": [
                "WARNING_UNSPECIFIED",
                "UNSUPPORTED_ACCELERATOR_TYPE",
                "UNSUPPORTED_OS",
                "RESERVED_IP_RANGE",
                "GOOGLE_MANAGED_NETWORK",
                "POST_STARTUP_SCRIPT",
                "SINGLE_USER"
              ],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "RuntimeSoftwareConfig": {
        "description": "Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`",
        "properties": {
          "customGpuDriverPath": {
            "description": "Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.",
            "type": "string"
          },
          "disableTerminal": {
            "description": "Bool indicating whether JupyterLab terminal will be available or not. Default: False",
            "type": "boolean"
          },
          "enableHealthMonitoring": {
            "description": "Verifies core internal services are running. Default: True",
            "type": "boolean"
          },
          "idleShutdown": {
            "description": "Runtime will automatically shutdown after idle_shutdown_time. Default: True",
            "type": "boolean"
          },
          "idleShutdownTimeout": {
            "description": "Time in minutes to wait before shutting down runtime. Default: 180 minutes",
            "format": "int32",
            "type": "integer"
          },
          "installGpuDriver": {
            "description": "Install Nvidia Driver automatically. Default: True",
            "type": "boolean"
          },
          "kernels": {
            "description": "Optional. Use a list of container images to use as Kernels in the notebook instance.",
            "items": {
              "$ref": "#/$defs/ContainerImage"
            },
            "type": "array"
          },
          "mixerDisabled": {
            "description": "Bool indicating whether mixer client should be disabled. Default: False",
            "type": "boolean"
          },
          "notebookUpgradeSchedule": {
            "description": "Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).",
            "type": "string"
          },
          "postStartupScript": {
            "description": "Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).",
            "type": "string"
          },
          "postStartupScriptBehavior": {
            "description": "Behavior for the post startup script.",
            "enum": [
              "POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED",
              "RUN_EVERY_START",
              "DOWNLOAD_AND_RUN_EVERY_START"
            ],
            "type": "string"
          },
          "upgradeable": {
            "description": "Output only. Bool indicating whether an newer image is available in an image family.",
            "readOnly": true,
            "type": "boolean"
          },
          "version": {
            "description": "Output only. version of boot image such as M100, from release label of the image.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContainerImage": {
        "description": "Definition of a container image for starting a notebook instance with the environment installed in a container.",
        "properties": {
          "repository": {
            "description": "Required. The path to the container image repository. For example: `gcr.io/{project_id}/{image_name}`",
            "type": "string"
          },
          "tag": {
            "description": "The tag of the container image. If not specified, this defaults to the latest tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VirtualMachine": {
        "description": "Runtime using Virtual Machine for computing.",
        "properties": {
          "instanceId": {
            "description": "Output only. The unique identifier of the Managed Compute Engine instance.",
            "readOnly": true,
            "type": "string"
          },
          "instanceName": {
            "description": "Output only. The user-friendly name of the Managed Compute Engine instance.",
            "readOnly": true,
            "type": "string"
          },
          "virtualMachineConfig": {
            "$ref": "#/$defs/VirtualMachineConfig"
          }
        },
        "type": "object"
      },
      "VirtualMachineConfig": {
        "description": "The config settings for virtual machine.",
        "properties": {
          "acceleratorConfig": {
            "$ref": "#/$defs/RuntimeAcceleratorConfig"
          },
          "bootImage": {
            "$ref": "#/$defs/BootImage"
          },
          "containerImages": {
            "description": "Optional. Use a list of container images to use as Kernels in the notebook instance.",
            "items": {
              "$ref": "#/$defs/ContainerImage"
            },
            "type": "array"
          },
          "dataDisk": {
            "$ref": "#/$defs/LocalDisk"
          },
          "encryptionConfig": {
            "$ref": "#/$defs/EncryptionConfig"
          },
          "guestAttributes": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. The Compute Engine guest attributes. (see [Project and instance guest attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).",
            "readOnly": true,
            "type": "object"
          },
          "internalIpOnly": {
            "description": "Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.",
            "type": "object"
          },
          "machineType": {
            "description": "Required. The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).",
            "type": "object"
          },
          "network": {
            "description": "Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the \"default\" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.",
            "type": "string"
          },
          "nicType": {
            "description": "Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.",
            "enum": [
              "UNSPECIFIED_NIC_TYPE",
              "VIRTIO_NET",
              "GVNIC"
            ],
            "type": "string"
          },
          "reservedIpRange": {
            "description": "Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \\ --global \\ --prefix-length=24 \\ --description=\"Google Cloud Managed Notebooks Range 24 c\" \\ --network=$NETWORK \\ --addresses=192.168.0.0 \\ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`",
            "type": "string"
          },
          "shieldedInstanceConfig": {
            "$ref": "#/$defs/RuntimeShieldedInstanceConfig"
          },
          "subnet": {
            "description": "Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`",
            "type": "string"
          },
          "tags": {
            "description": "Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "zone": {
            "description": "Output only. The zone where the virtual machine is located. If using regional request, the notebooks service will pick a location in the corresponding runtime region. On a get request, zone will always be present. Example: * `us-central1-b`",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuntimeAcceleratorConfig": {
        "description": "Definition of the types of hardware accelerators that can be used. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `nvidia-tesla-k80` * `nvidia-tesla-p100` * `nvidia-tesla-v100` * `nvidia-tesla-p4` * `nvidia-tesla-t4` * `nvidia-tesla-a100`",
        "properties": {
          "coreCount": {
            "description": "Count of cores of this accelerator.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "Accelerator model.",
            "enum": [
              "ACCELERATOR_TYPE_UNSPECIFIED",
              "NVIDIA_TESLA_K80",
              "NVIDIA_TESLA_P100",
              "NVIDIA_TESLA_V100",
              "NVIDIA_TESLA_P4",
              "NVIDIA_TESLA_T4",
              "NVIDIA_TESLA_A100",
              "NVIDIA_L4",
              "TPU_V2",
              "TPU_V3",
              "NVIDIA_TESLA_T4_VWS",
              "NVIDIA_TESLA_P100_VWS",
              "NVIDIA_TESLA_P4_VWS"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              true,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false,
              false
            ]
          }
        },
        "type": "object"
      },
      "BootImage": {
        "description": "Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.",
        "properties": {},
        "type": "object"
      },
      "LocalDisk": {
        "description": "A Local attached disk resource.",
        "properties": {
          "autoDelete": {
            "description": "Optional. Output only. Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).",
            "readOnly": true,
            "type": "boolean"
          },
          "boot": {
            "description": "Optional. Output only. Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.",
            "readOnly": true,
            "type": "boolean"
          },
          "deviceName": {
            "description": "Optional. Output only. Specifies a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.",
            "readOnly": true,
            "type": "string"
          },
          "guestOsFeatures": {
            "description": "Output only. Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.",
            "items": {
              "$ref": "#/$defs/RuntimeGuestOsFeature"
            },
            "readOnly": true,
            "type": "array"
          },
          "index": {
            "description": "Output only. A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "initializeParams": {
            "$ref": "#/$defs/LocalDiskInitializeParams"
          },
          "interface": {
            "description": "Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`",
            "type": "string"
          },
          "kind": {
            "description": "Output only. Type of the resource. Always compute#attachedDisk for attached disks.",
            "readOnly": true,
            "type": "string"
          },
          "licenses": {
            "description": "Output only. Any valid publicly visible licenses.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "mode": {
            "description": "The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`",
            "type": "string"
          },
          "source": {
            "description": "Specifies a valid partial or full URL to an existing Persistent Disk resource.",
            "type": "string"
          },
          "type": {
            "description": "Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuntimeGuestOsFeature": {
        "description": "Optional. A list of features to enable on the guest operating system. Applicable only for bootable images. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Guest OS features for boot disk.",
        "properties": {
          "type": {
            "description": "The ID of a supported feature. Read [Enabling guest operating system features](https://cloud.google.com/compute/docs/images/create-delete-deprecate-private-images#guest-os-features) to see a list of available options. Valid values: * `FEATURE_TYPE_UNSPECIFIED` * `MULTI_IP_SUBNET` * `SECURE_BOOT` * `UEFI_COMPATIBLE` * `VIRTIO_SCSI_MULTIQUEUE` * `WINDOWS`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocalDiskInitializeParams": {
        "description": "Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.",
        "properties": {
          "description": {
            "description": "Optional. Provide this property when creating the disk.",
            "type": "string"
          },
          "diskName": {
            "description": "Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.",
            "type": "string"
          },
          "diskSizeGb": {
            "description": "Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.",
            "format": "int64",
            "type": "string"
          },
          "diskType": {
            "description": "Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).",
            "enum": [
              "DISK_TYPE_UNSPECIFIED",
              "PD_STANDARD",
              "PD_SSD",
              "PD_BALANCED",
              "PD_EXTREME"
            ],
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "EncryptionConfig": {
        "description": "Represents a custom encryption key configuration that can be applied to a resource. This will encrypt all disks in Virtual Machine.",
        "properties": {
          "kmsKey": {
            "description": "The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a disks. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RuntimeShieldedInstanceConfig": {
        "description": "A set of Shielded Instance options. See [Images using supported Shielded VM features](https://cloud.google.com/compute/docs/instances/modifying-shielded-vm). Not all combinations are valid.",
        "properties": {
          "enableIntegrityMonitoring": {
            "description": "Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the boot integrity of the instance. The attestation is performed against the integrity policy baseline. This baseline is initially derived from the implicitly trusted boot image when the instance is created. Enabled by default.",
            "type": "boolean"
          },
          "enableSecureBoot": {
            "description": "Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs authentic software by verifying the digital signature of all boot components, and halting the boot process if signature verification fails. Disabled by default.",
            "type": "boolean"
          },
          "enableVtpm": {
            "description": "Defines whether the instance has the vTPM enabled. Enabled by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://notebooks.googleapis.com//v1/{parent}/runtimes{?requestId,runtimeId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
