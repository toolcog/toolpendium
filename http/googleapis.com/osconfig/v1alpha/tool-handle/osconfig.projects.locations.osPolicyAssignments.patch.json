{
  "name": "osconfig_projects_locations_osPolicyAssignments_patch",
  "description": "Update an existing OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment."
      },
      "updateMask": {
        "type": "string",
        "description": "Optional. Field mask that controls which fields of the assignment should be updated."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/OSPolicyAssignment"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "OSPolicyAssignment": {
        "description": "OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).",
        "properties": {
          "baseline": {
            "description": "Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.",
            "readOnly": true,
            "type": "boolean"
          },
          "deleted": {
            "description": "Output only. Indicates that this revision deletes the OS policy assignment.",
            "readOnly": true,
            "type": "boolean"
          },
          "description": {
            "description": "OS policy assignment description. Length of the description is limited to 1024 characters.",
            "type": "string"
          },
          "etag": {
            "description": "The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.",
            "type": "string"
          },
          "instanceFilter": {
            "$ref": "#/$defs/OSPolicyAssignmentInstanceFilter"
          },
          "name": {
            "description": "Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.",
            "type": "string"
          },
          "osPolicies": {
            "description": "Required. List of OS policies to be applied to the VMs.",
            "items": {
              "$ref": "#/$defs/OSPolicy"
            },
            "type": "array"
          },
          "reconciling": {
            "description": "Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING",
            "readOnly": true,
            "type": "boolean"
          },
          "revisionCreateTime": {
            "description": "Output only. The timestamp that the revision was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "revisionId": {
            "description": "Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment",
            "readOnly": true,
            "type": "string"
          },
          "rollout": {
            "$ref": "#/$defs/OSPolicyAssignmentRollout"
          },
          "rolloutState": {
            "description": "Output only. OS policy assignment rollout state",
            "enum": [
              "ROLLOUT_STATE_UNSPECIFIED",
              "IN_PROGRESS",
              "CANCELLING",
              "CANCELLED",
              "SUCCEEDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uid": {
            "description": "Output only. Server generated unique id for the OS policy assignment resource.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyAssignmentInstanceFilter": {
        "description": "Filters to select target VMs for an assignment. If more than one filter criteria is specified below, a VM will be selected if and only if it satisfies all of them.",
        "properties": {
          "all": {
            "description": "Target all VMs in the project. If true, no other criteria is permitted.",
            "type": "boolean"
          },
          "exclusionLabels": {
            "description": "List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.",
            "items": {
              "$ref": "#/$defs/OSPolicyAssignmentLabelSet"
            },
            "type": "array"
          },
          "inclusionLabels": {
            "description": "List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.",
            "items": {
              "$ref": "#/$defs/OSPolicyAssignmentLabelSet"
            },
            "type": "array"
          },
          "inventories": {
            "description": "List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.",
            "items": {
              "$ref": "#/$defs/OSPolicyAssignmentInstanceFilterInventory"
            },
            "type": "array"
          },
          "osShortNames": {
            "deprecated": true,
            "description": "Deprecated. Use the `inventories` field instead. A VM is selected if it's OS short name matches with any of the values provided in this list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OSPolicyAssignmentLabelSet": {
        "description": "Message representing label set. * A label is a key value pair set for a VM. * A LabelSet is a set of labels. * Labels within a LabelSet are ANDed. In other words, a LabelSet is applicable for a VM only if it matches all the labels in the LabelSet. * Example: A LabelSet with 2 labels: `env=prod` and `type=webserver` will only be applicable for those VMs with both labels present.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "OSPolicyAssignmentInstanceFilterInventory": {
        "description": "VM inventory details.",
        "properties": {
          "osShortName": {
            "description": "Required. The OS short name",
            "type": "string"
          },
          "osVersion": {
            "description": "The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicy": {
        "description": "An OS policy defines the desired state configuration for a VM.",
        "properties": {
          "allowNoResourceGroupMatch": {
            "description": "This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.",
            "type": "boolean"
          },
          "description": {
            "description": "Policy description. Length of the description is limited to 1024 characters.",
            "type": "string"
          },
          "id": {
            "description": "Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.",
            "type": "string"
          },
          "mode": {
            "description": "Required. Policy mode",
            "enum": [
              "MODE_UNSPECIFIED",
              "VALIDATION",
              "ENFORCEMENT"
            ],
            "type": "string"
          },
          "resourceGroups": {
            "description": "Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`",
            "items": {
              "$ref": "#/$defs/OSPolicyResourceGroup"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceGroup": {
        "description": "Resource groups provide a mechanism to group OS policy resources. Resource groups enable OS policy authors to create a single OS policy to be applied to VMs running different operating Systems. When the OS policy is applied to a target VM, the appropriate resource group within the OS policy is selected based on the `OSFilter` specified within the resource group.",
        "properties": {
          "inventoryFilters": {
            "description": "List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.",
            "items": {
              "$ref": "#/$defs/OSPolicyInventoryFilter"
            },
            "type": "array"
          },
          "osFilter": {
            "$ref": "#/$defs/OSPolicyOSFilter"
          },
          "resources": {
            "description": "Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.",
            "items": {
              "$ref": "#/$defs/OSPolicyResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OSPolicyInventoryFilter": {
        "description": "Filtering criteria to select VMs based on inventory details.",
        "properties": {
          "osShortName": {
            "description": "Required. The OS short name",
            "type": "string"
          },
          "osVersion": {
            "description": "The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyOSFilter": {
        "description": "Filtering criteria to select VMs based on OS details.",
        "properties": {
          "osShortName": {
            "description": "This should match OS short name emitted by the OS inventory agent. An empty value matches any OS.",
            "type": "string"
          },
          "osVersion": {
            "description": "This value should match the version emitted by the OS inventory agent. Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResource": {
        "description": "An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.",
        "properties": {
          "exec": {
            "$ref": "#/$defs/OSPolicyResourceExecResource"
          },
          "file": {
            "$ref": "#/$defs/OSPolicyResourceFileResource"
          },
          "id": {
            "description": "Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.",
            "type": "string"
          },
          "pkg": {
            "$ref": "#/$defs/OSPolicyResourcePackageResource"
          },
          "repository": {
            "$ref": "#/$defs/OSPolicyResourceRepositoryResource"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceExecResource": {
        "description": "A resource that allows executing scripts on the VM. The `ExecResource` has 2 stages: `validate` and `enforce` and both stages accept a script as an argument to execute. When the `ExecResource` is applied by the agent, it first executes the script in the `validate` stage. The `validate` stage can signal that the `ExecResource` is already in the desired state by returning an exit code of `100`. If the `ExecResource` is not in the desired state, it should return an exit code of `101`. Any other exit code returned by this stage is considered an error. If the `ExecResource` is not in the desired state based on the exit code from the `validate` stage, the agent proceeds to execute the script from the `enforce` stage. If the `ExecResource` is already in the desired state, the `enforce` stage will not be run. Similar to `validate` stage, the `enforce` stage should return an exit code of `100` to indicate that the resource in now in its desired state. Any other exit code is considered an error. NOTE: An exit code of `100` was chosen over `0` (and `101` vs `1`) to have an explicit indicator of `in desired state`, `not in desired state` and errors. Because, for example, Powershell will always return an exit code of `0` unless an `exit` statement is provided in the script. So, for reasons of consistency and being explicit, exit codes `100` and `101` were chosen.",
        "properties": {
          "enforce": {
            "$ref": "#/$defs/OSPolicyResourceExecResourceExec"
          },
          "validate": {
            "$ref": "#/$defs/OSPolicyResourceExecResourceExec"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceExecResourceExec": {
        "description": "A file or script to execute.",
        "properties": {
          "args": {
            "description": "Optional arguments to pass to the source during execution.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "file": {
            "$ref": "#/$defs/OSPolicyResourceFile"
          },
          "interpreter": {
            "description": "Required. The script interpreter to use.",
            "enum": [
              "INTERPRETER_UNSPECIFIED",
              "NONE",
              "SHELL",
              "POWERSHELL"
            ],
            "type": "string"
          },
          "outputFilePath": {
            "description": "Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.",
            "type": "string"
          },
          "script": {
            "description": "An inline script. The size of the script is limited to 32KiB.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceFile": {
        "description": "A remote or local file.",
        "properties": {
          "allowInsecure": {
            "description": "Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.",
            "type": "boolean"
          },
          "gcs": {
            "$ref": "#/$defs/OSPolicyResourceFileGcs"
          },
          "localPath": {
            "description": "A local path within the VM to use.",
            "type": "string"
          },
          "remote": {
            "$ref": "#/$defs/OSPolicyResourceFileRemote"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceFileGcs": {
        "description": "Specifies a file available as a Cloud Storage Object.",
        "properties": {
          "bucket": {
            "description": "Required. Bucket of the Cloud Storage object.",
            "type": "string"
          },
          "generation": {
            "description": "Generation number of the Cloud Storage object.",
            "format": "int64",
            "type": "string"
          },
          "object": {
            "description": "Required. Name of the Cloud Storage object.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceFileRemote": {
        "description": "Specifies a file available via some URI.",
        "properties": {
          "sha256Checksum": {
            "description": "SHA256 checksum of the remote file.",
            "type": "string"
          },
          "uri": {
            "description": "Required. URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceFileResource": {
        "description": "A resource that manages the state of a file.",
        "properties": {
          "content": {
            "description": "A a file with this content. The size of the content is limited to 32KiB.",
            "type": "string"
          },
          "file": {
            "$ref": "#/$defs/OSPolicyResourceFile"
          },
          "path": {
            "description": "Required. The absolute path of the file within the VM.",
            "type": "string"
          },
          "permissions": {
            "description": "Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4",
            "type": "string"
          },
          "state": {
            "description": "Required. Desired state of the file.",
            "enum": [
              "DESIRED_STATE_UNSPECIFIED",
              "PRESENT",
              "ABSENT",
              "CONTENTS_MATCH"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResource": {
        "description": "A resource that manages a system package.",
        "properties": {
          "apt": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceAPT"
          },
          "deb": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceDeb"
          },
          "desiredState": {
            "description": "Required. The desired state the agent should maintain for this package.",
            "enum": [
              "DESIRED_STATE_UNSPECIFIED",
              "INSTALLED",
              "REMOVED"
            ],
            "type": "string"
          },
          "googet": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceGooGet"
          },
          "msi": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceMSI"
          },
          "rpm": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceRPM"
          },
          "yum": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceYUM"
          },
          "zypper": {
            "$ref": "#/$defs/OSPolicyResourcePackageResourceZypper"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceAPT": {
        "description": "A package managed by APT. - install: `apt-get update && apt-get -y install [name]` - remove: `apt-get -y remove [name]`",
        "properties": {
          "name": {
            "description": "Required. Package name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceDeb": {
        "description": "A deb package file. dpkg packages only support INSTALLED state.",
        "properties": {
          "pullDeps": {
            "description": "Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`",
            "type": "boolean"
          },
          "source": {
            "$ref": "#/$defs/OSPolicyResourceFile"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceGooGet": {
        "description": "A package managed by GooGet. - install: `googet -noconfirm install package` - remove: `googet -noconfirm remove package`",
        "properties": {
          "name": {
            "description": "Required. Package name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceMSI": {
        "description": "An MSI package. MSI packages only support INSTALLED state.",
        "properties": {
          "properties": {
            "description": "Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "source": {
            "$ref": "#/$defs/OSPolicyResourceFile"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceRPM": {
        "description": "An RPM package file. RPM packages only support INSTALLED state.",
        "properties": {
          "pullDeps": {
            "description": "Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`",
            "type": "boolean"
          },
          "source": {
            "$ref": "#/$defs/OSPolicyResourceFile"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceYUM": {
        "description": "A package managed by YUM. - install: `yum -y install package` - remove: `yum -y remove package`",
        "properties": {
          "name": {
            "description": "Required. Package name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourcePackageResourceZypper": {
        "description": "A package managed by Zypper. - install: `zypper -y install package` - remove: `zypper -y rm package`",
        "properties": {
          "name": {
            "description": "Required. Package name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceRepositoryResource": {
        "description": "A resource that manages a package repository.",
        "properties": {
          "apt": {
            "$ref": "#/$defs/OSPolicyResourceRepositoryResourceAptRepository"
          },
          "goo": {
            "$ref": "#/$defs/OSPolicyResourceRepositoryResourceGooRepository"
          },
          "yum": {
            "$ref": "#/$defs/OSPolicyResourceRepositoryResourceYumRepository"
          },
          "zypper": {
            "$ref": "#/$defs/OSPolicyResourceRepositoryResourceZypperRepository"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceRepositoryResourceAptRepository": {
        "description": "Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.",
        "properties": {
          "archiveType": {
            "description": "Required. Type of archive files in this repository.",
            "enum": [
              "ARCHIVE_TYPE_UNSPECIFIED",
              "DEB",
              "DEB_SRC"
            ],
            "type": "string"
          },
          "components": {
            "description": "Required. List of components for this repository. Must contain at least one item.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "distribution": {
            "description": "Required. Distribution of this repository.",
            "type": "string"
          },
          "gpgKey": {
            "description": "URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.",
            "type": "string"
          },
          "uri": {
            "description": "Required. URI for this repository.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceRepositoryResourceGooRepository": {
        "description": "Represents a Goo package repository. These are added to a repo file that is managed at `C:/ProgramData/GooGet/repos/google_osconfig.repo`.",
        "properties": {
          "name": {
            "description": "Required. The name of the repository.",
            "type": "string"
          },
          "url": {
            "description": "Required. The url of the repository.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceRepositoryResourceYumRepository": {
        "description": "Represents a single yum package repository. These are added to a repo file that is managed at `/etc/yum.repos.d/google_osconfig.repo`.",
        "properties": {
          "baseUrl": {
            "description": "Required. The location of the repository directory.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the repository.",
            "type": "string"
          },
          "gpgKeys": {
            "description": "URIs of GPG keys.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Required. A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyResourceRepositoryResourceZypperRepository": {
        "description": "Represents a single zypper package repository. These are added to a repo file that is managed at `/etc/zypp/repos.d/google_osconfig.repo`.",
        "properties": {
          "baseUrl": {
            "description": "Required. The location of the repository directory.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the repository.",
            "type": "string"
          },
          "gpgKeys": {
            "description": "URIs of GPG keys.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OSPolicyAssignmentRollout": {
        "description": "Message to configure the rollout at the zonal level for the OS policy assignment.",
        "properties": {
          "disruptionBudget": {
            "$ref": "#/$defs/FixedOrPercent"
          },
          "minWaitDuration": {
            "description": "Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FixedOrPercent": {
        "description": "Message encapsulating a value that can be either absolute (\"fixed\") or relative (\"percent\") to a value.",
        "properties": {
          "fixed": {
            "description": "Specifies a fixed value.",
            "format": "int32",
            "type": "integer"
          },
          "percent": {
            "description": "Specifies the relative value defined as a percentage, which will be multiplied by a reference value.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://osconfig.googleapis.com//v1alpha/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
