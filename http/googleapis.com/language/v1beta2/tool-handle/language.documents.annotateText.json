{
  "name": "language_documents_annotateText",
  "description": "A convenience method that provides all syntax, sentiment, entity, and classification features in one call.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/AnnotateTextRequest"
      }
    },
    "$defs": {
      "AnnotateTextRequest": {
        "description": "The request message for the text annotation API, which can perform multiple analysis types (sentiment, entities, and syntax) in one call.",
        "properties": {
          "document": {
            "$ref": "#/$defs/Document"
          },
          "encodingType": {
            "description": "The encoding type used by the API to calculate offsets.",
            "enum": [
              "NONE",
              "UTF8",
              "UTF16",
              "UTF32"
            ],
            "type": "string"
          },
          "features": {
            "$ref": "#/$defs/AnnotateTextRequestFeatures"
          }
        },
        "type": "object"
      },
      "Document": {
        "description": "Represents the input to API methods.",
        "properties": {
          "boilerplateHandling": {
            "description": "Indicates how detected boilerplate(e.g. advertisements, copyright declarations, banners) should be handled for this document. If not specified, boilerplate will be treated the same as content.",
            "enum": [
              "BOILERPLATE_HANDLING_UNSPECIFIED",
              "SKIP_BOILERPLATE",
              "KEEP_BOILERPLATE"
            ],
            "type": "string"
          },
          "content": {
            "description": "The content of the input in string format. Cloud audit logging exempt since it is based on user data.",
            "type": "string"
          },
          "gcsContentUri": {
            "description": "The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.",
            "type": "string"
          },
          "language": {
            "description": "The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.",
            "type": "string"
          },
          "referenceWebUri": {
            "description": "The web URI where the document comes from. This URI is not used for fetching the content, but as a hint for analyzing the document.",
            "type": "string"
          },
          "type": {
            "description": "Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "PLAIN_TEXT",
              "HTML"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnnotateTextRequestFeatures": {
        "description": "All available features for sentiment, syntax, and semantic analysis. Setting each one to true will enable that specific analysis for the input. Next ID: 12",
        "properties": {
          "classificationModelOptions": {
            "$ref": "#/$defs/ClassificationModelOptions"
          },
          "classifyText": {
            "description": "Classify the full document into categories. If this is true, the API will use the default model which classifies into a [predefined taxonomy](https://cloud.google.com/natural-language/docs/categories).",
            "type": "boolean"
          },
          "extractDocumentSentiment": {
            "description": "Extract document-level sentiment.",
            "type": "boolean"
          },
          "extractEntities": {
            "description": "Extract entities.",
            "type": "boolean"
          },
          "extractEntitySentiment": {
            "description": "Extract entities and their associated sentiment.",
            "type": "boolean"
          },
          "extractSyntax": {
            "description": "Extract syntax information.",
            "type": "boolean"
          },
          "moderateText": {
            "description": "Moderate the document for harmful and sensitive categories.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ClassificationModelOptions": {
        "description": "Model options available for classification requests.",
        "properties": {
          "v1Model": {
            "$ref": "#/$defs/ClassificationModelOptionsV1Model"
          },
          "v2Model": {
            "$ref": "#/$defs/ClassificationModelOptionsV2Model"
          }
        },
        "type": "object"
      },
      "ClassificationModelOptionsV1Model": {
        "description": "Options for the V1 model.",
        "properties": {},
        "type": "object"
      },
      "ClassificationModelOptionsV2Model": {
        "description": "Options for the V2 model.",
        "properties": {
          "contentCategoriesVersion": {
            "description": "The content categories used for classification.",
            "enum": [
              "CONTENT_CATEGORIES_VERSION_UNSPECIFIED",
              "V1",
              "V2"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://language.googleapis.com//v1beta2/documents:annotateText{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The text annotations response message.",
        "**Key properties:**",
        {
          "$ul": [
            "**categories**: Categories identified in the input document.",
            [
              "**documentSentiment**: Represents the feeling associated with the entire text or entities in the text. Next ID: 6",
              {
                "$ul": [
                  "**magnitude**: A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).",
                  "**score**: Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment)."
                ]
              }
            ],
            "**entities**: Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities.",
            "**language**: The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.",
            "**moderationCategories**: Harmful and sensitive categories identified in the input document.",
            "**sentences**: Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax.",
            "**tokens**: Tokens, along with their syntactic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_syntax."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
