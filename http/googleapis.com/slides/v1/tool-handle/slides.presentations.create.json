{
  "name": "slides_presentations_create",
  "description": "Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Presentation"
      }
    },
    "$defs": {
      "Presentation": {
        "description": "A Google Slides presentation.",
        "properties": {
          "layouts": {
            "description": "The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.",
            "items": {
              "$ref": "#/$defs/Page"
            },
            "type": "array"
          },
          "locale": {
            "description": "The locale of the presentation, as an IETF BCP 47 language tag.",
            "type": "string"
          },
          "masters": {
            "description": "The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.",
            "items": {
              "$ref": "#/$defs/Page"
            },
            "type": "array"
          },
          "notesMaster": {
            "$ref": "#/$defs/Page"
          },
          "pageSize": {
            "$ref": "#/$defs/Size"
          },
          "presentationId": {
            "description": "The ID of the presentation.",
            "type": "string"
          },
          "revisionId": {
            "description": "Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.",
            "type": "string"
          },
          "slides": {
            "description": "The slides in the presentation. A slide inherits properties from a slide layout.",
            "items": {
              "$ref": "#/$defs/Page"
            },
            "type": "array"
          },
          "title": {
            "description": "The title of the presentation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Page": {
        "description": "A page in a presentation.",
        "properties": {
          "layoutProperties": {
            "$ref": "#/$defs/LayoutProperties"
          },
          "masterProperties": {
            "$ref": "#/$defs/MasterProperties"
          },
          "notesProperties": {
            "$ref": "#/$defs/NotesProperties"
          },
          "objectId": {
            "description": "The object ID for this page. Object IDs used by Page and PageElement share the same namespace.",
            "type": "string"
          },
          "pageElements": {
            "description": "The page elements rendered on the page.",
            "items": {
              "$ref": "#/$defs/PageElement"
            },
            "type": "array"
          },
          "pageProperties": {
            "$ref": "#/$defs/PageProperties"
          },
          "pageType": {
            "description": "The type of the page.",
            "enum": [
              "SLIDE",
              "MASTER",
              "LAYOUT",
              "NOTES",
              "NOTES_MASTER"
            ],
            "type": "string"
          },
          "revisionId": {
            "description": "Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.",
            "type": "string"
          },
          "slideProperties": {
            "$ref": "#/$defs/SlideProperties"
          }
        },
        "type": "object"
      },
      "LayoutProperties": {
        "description": "The properties of Page are only relevant for pages with page_type LAYOUT.",
        "properties": {
          "displayName": {
            "description": "The human-readable name of the layout.",
            "type": "string"
          },
          "masterObjectId": {
            "description": "The object ID of the master that this layout is based on.",
            "type": "string"
          },
          "name": {
            "description": "The name of the layout.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MasterProperties": {
        "description": "The properties of Page that are only relevant for pages with page_type MASTER.",
        "properties": {
          "displayName": {
            "description": "The human-readable name of the master.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotesProperties": {
        "description": "The properties of Page that are only relevant for pages with page_type NOTES.",
        "properties": {
          "speakerNotesObjectId": {
            "description": "The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `GetPresentation` or `GetPage` action will always return the latest object ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PageElement": {
        "description": "A visual element rendered on a page.",
        "properties": {
          "description": {
            "description": "The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.",
            "type": "string"
          },
          "elementGroup": {
            "$ref": "#/$defs/Group"
          },
          "image": {
            "$ref": "#/$defs/Image"
          },
          "line": {
            "$ref": "#/$defs/Line"
          },
          "objectId": {
            "description": "The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.",
            "type": "string"
          },
          "shape": {
            "$ref": "#/$defs/Shape"
          },
          "sheetsChart": {
            "$ref": "#/$defs/SheetsChart"
          },
          "size": {
            "$ref": "#/$defs/Size"
          },
          "table": {
            "$ref": "#/$defs/Table"
          },
          "title": {
            "description": "The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.",
            "type": "string"
          },
          "transform": {
            "$ref": "#/$defs/AffineTransform"
          },
          "video": {
            "$ref": "#/$defs/Video"
          },
          "wordArt": {
            "$ref": "#/$defs/WordArt"
          }
        },
        "type": "object"
      },
      "Group": {
        "description": "A PageElement kind representing a joined collection of PageElements.",
        "properties": {
          "children": {
            "description": "The collection of elements in the group. The minimum size of a group is 2.",
            "items": {
              "$ref": "#/$defs/PageElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Image": {
        "description": "A PageElement kind representing an image.",
        "properties": {
          "contentUrl": {
            "description": "An URL to an image with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.",
            "type": "string"
          },
          "imageProperties": {
            "$ref": "#/$defs/ImageProperties"
          },
          "placeholder": {
            "$ref": "#/$defs/Placeholder"
          },
          "sourceUrl": {
            "description": "The source URL is the URL used to insert the image. The source URL can be empty.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImageProperties": {
        "description": "The properties of the Image.",
        "properties": {
          "brightness": {
            "description": "The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.",
            "format": "float",
            "type": "number"
          },
          "contrast": {
            "description": "The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.",
            "format": "float",
            "type": "number"
          },
          "cropProperties": {
            "$ref": "#/$defs/CropProperties"
          },
          "link": {
            "$ref": "#/$defs/Link"
          },
          "outline": {
            "$ref": "#/$defs/Outline"
          },
          "recolor": {
            "$ref": "#/$defs/Recolor"
          },
          "shadow": {
            "$ref": "#/$defs/Shadow"
          },
          "transparency": {
            "description": "The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "CropProperties": {
        "description": "The crop properties of an object enclosed in a container. For example, an Image. The crop properties is represented by the offsets of four edges which define a crop rectangle. The offsets are measured in percentage from the corresponding edges of the object's original bounding rectangle towards inside, relative to the object's original dimensions. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the object's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the object's original bounding rectangle. - If the left edge of the crop rectangle is on the right side of its right edge, the object will be flipped horizontally. - If the top edge of the crop rectangle is below its bottom edge, the object will be flipped vertically. - If all offsets and rotation angle is 0, the object is not cropped. After cropping, the content in the crop rectangle will be stretched to fit its container.",
        "properties": {
          "angle": {
            "description": "The rotation angle of the crop window around its center, in radians. Rotation angle is applied after the offset.",
            "format": "float",
            "type": "number"
          },
          "bottomOffset": {
            "description": "The offset specifies the bottom edge of the crop rectangle that is located above the original bounding rectangle bottom edge, relative to the object's original height.",
            "format": "float",
            "type": "number"
          },
          "leftOffset": {
            "description": "The offset specifies the left edge of the crop rectangle that is located to the right of the original bounding rectangle left edge, relative to the object's original width.",
            "format": "float",
            "type": "number"
          },
          "rightOffset": {
            "description": "The offset specifies the right edge of the crop rectangle that is located to the left of the original bounding rectangle right edge, relative to the object's original width.",
            "format": "float",
            "type": "number"
          },
          "topOffset": {
            "description": "The offset specifies the top edge of the crop rectangle that is located below the original bounding rectangle top edge, relative to the object's original height.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Link": {
        "description": "A hypertext link.",
        "properties": {
          "pageObjectId": {
            "description": "If set, indicates this is a link to the specific page in this presentation with this ID. A page with this ID may not exist.",
            "type": "string"
          },
          "relativeLink": {
            "description": "If set, indicates this is a link to a slide in this presentation, addressed by its position.",
            "enum": [
              "RELATIVE_SLIDE_LINK_UNSPECIFIED",
              "NEXT_SLIDE",
              "PREVIOUS_SLIDE",
              "FIRST_SLIDE",
              "LAST_SLIDE"
            ],
            "type": "string"
          },
          "slideIndex": {
            "description": "If set, indicates this is a link to the slide at this zero-based index in the presentation. There may not be a slide at this index.",
            "format": "int32",
            "type": "integer"
          },
          "url": {
            "description": "If set, indicates this is a link to the external web page at this URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Outline": {
        "description": "The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.",
        "properties": {
          "dashStyle": {
            "description": "The dash style of the outline.",
            "enum": [
              "DASH_STYLE_UNSPECIFIED",
              "SOLID",
              "DOT",
              "DASH",
              "DASH_DOT",
              "LONG_DASH",
              "LONG_DASH_DOT"
            ],
            "type": "string"
          },
          "outlineFill": {
            "$ref": "#/$defs/OutlineFill"
          },
          "propertyState": {
            "description": "The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.",
            "enum": [
              "RENDERED",
              "NOT_RENDERED",
              "INHERIT"
            ],
            "type": "string"
          },
          "weight": {
            "$ref": "#/$defs/Dimension"
          }
        },
        "type": "object"
      },
      "OutlineFill": {
        "description": "The fill of the outline.",
        "properties": {
          "solidFill": {
            "$ref": "#/$defs/SolidFill"
          }
        },
        "type": "object"
      },
      "SolidFill": {
        "description": "A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.",
        "properties": {
          "alpha": {
            "description": "The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.",
            "format": "float",
            "type": "number"
          },
          "color": {
            "$ref": "#/$defs/OpaqueColor"
          }
        },
        "type": "object"
      },
      "OpaqueColor": {
        "description": "A themeable solid color value.",
        "properties": {
          "rgbColor": {
            "$ref": "#/$defs/RgbColor"
          },
          "themeColor": {
            "description": "An opaque theme color.",
            "enum": [
              "THEME_COLOR_TYPE_UNSPECIFIED",
              "DARK1",
              "LIGHT1",
              "DARK2",
              "LIGHT2",
              "ACCENT1",
              "ACCENT2",
              "ACCENT3",
              "ACCENT4",
              "ACCENT5",
              "ACCENT6",
              "HYPERLINK",
              "FOLLOWED_HYPERLINK",
              "TEXT1",
              "BACKGROUND1",
              "TEXT2",
              "BACKGROUND2"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RgbColor": {
        "description": "An RGB color.",
        "properties": {
          "blue": {
            "description": "The blue component of the color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          },
          "green": {
            "description": "The green component of the color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          },
          "red": {
            "description": "The red component of the color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Dimension": {
        "description": "A magnitude in a single direction in the specified units.",
        "properties": {
          "magnitude": {
            "description": "The magnitude.",
            "format": "double",
            "type": "number"
          },
          "unit": {
            "description": "The units for magnitude.",
            "enum": [
              "UNIT_UNSPECIFIED",
              "EMU",
              "PT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Recolor": {
        "description": "A recolor effect applied on an image.",
        "properties": {
          "name": {
            "description": "The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.",
            "enum": [
              "NONE",
              "LIGHT1",
              "LIGHT2",
              "LIGHT3",
              "LIGHT4",
              "LIGHT5",
              "LIGHT6",
              "LIGHT7",
              "LIGHT8",
              "LIGHT9",
              "LIGHT10",
              "DARK1",
              "DARK2",
              "DARK3",
              "DARK4",
              "DARK5",
              "DARK6",
              "DARK7",
              "DARK8",
              "DARK9",
              "DARK10",
              "GRAYSCALE",
              "NEGATIVE",
              "SEPIA",
              "CUSTOM"
            ],
            "type": "string"
          },
          "recolorStops": {
            "description": "The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.",
            "items": {
              "$ref": "#/$defs/ColorStop"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ColorStop": {
        "description": "A color and position in a gradient band.",
        "properties": {
          "alpha": {
            "description": "The alpha value of this color in the gradient band. Defaults to 1.0, fully opaque.",
            "format": "float",
            "type": "number"
          },
          "color": {
            "$ref": "#/$defs/OpaqueColor"
          },
          "position": {
            "description": "The relative position of the color stop in the gradient band measured in percentage. The value should be in the interval [0.0, 1.0].",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Shadow": {
        "description": "The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.",
        "properties": {
          "alignment": {
            "description": "The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.",
            "enum": [
              "RECTANGLE_POSITION_UNSPECIFIED",
              "TOP_LEFT",
              "TOP_CENTER",
              "TOP_RIGHT",
              "LEFT_CENTER",
              "CENTER",
              "RIGHT_CENTER",
              "BOTTOM_LEFT",
              "BOTTOM_CENTER",
              "BOTTOM_RIGHT"
            ],
            "type": "string"
          },
          "alpha": {
            "description": "The alpha of the shadow's color, from 0.0 to 1.0.",
            "format": "float",
            "type": "number"
          },
          "blurRadius": {
            "$ref": "#/$defs/Dimension"
          },
          "color": {
            "$ref": "#/$defs/OpaqueColor"
          },
          "propertyState": {
            "description": "The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.",
            "enum": [
              "RENDERED",
              "NOT_RENDERED",
              "INHERIT"
            ],
            "type": "string"
          },
          "rotateWithShape": {
            "description": "Whether the shadow should rotate with the shape. This property is read-only.",
            "type": "boolean"
          },
          "transform": {
            "$ref": "#/$defs/AffineTransform"
          },
          "type": {
            "description": "The type of the shadow. This property is read-only.",
            "enum": [
              "SHADOW_TYPE_UNSPECIFIED",
              "OUTER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AffineTransform": {
        "description": "AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.",
        "properties": {
          "scaleX": {
            "description": "The X coordinate scaling element.",
            "format": "double",
            "type": "number"
          },
          "scaleY": {
            "description": "The Y coordinate scaling element.",
            "format": "double",
            "type": "number"
          },
          "shearX": {
            "description": "The X coordinate shearing element.",
            "format": "double",
            "type": "number"
          },
          "shearY": {
            "description": "The Y coordinate shearing element.",
            "format": "double",
            "type": "number"
          },
          "translateX": {
            "description": "The X coordinate translation element.",
            "format": "double",
            "type": "number"
          },
          "translateY": {
            "description": "The Y coordinate translation element.",
            "format": "double",
            "type": "number"
          },
          "unit": {
            "description": "The units for translate elements.",
            "enum": [
              "UNIT_UNSPECIFIED",
              "EMU",
              "PT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Placeholder": {
        "description": "The placeholder information that uniquely identifies a placeholder shape.",
        "properties": {
          "index": {
            "description": "The index of the placeholder. If the same placeholder types are present in the same page, they would have different index values.",
            "format": "int32",
            "type": "integer"
          },
          "parentObjectId": {
            "description": "The object ID of this shape's parent placeholder. If unset, the parent placeholder shape does not exist, so the shape does not inherit properties from any other shape.",
            "type": "string"
          },
          "type": {
            "description": "The type of the placeholder.",
            "enum": [
              "NONE",
              "BODY",
              "CHART",
              "CLIP_ART",
              "CENTERED_TITLE",
              "DIAGRAM",
              "DATE_AND_TIME",
              "FOOTER",
              "HEADER",
              "MEDIA",
              "OBJECT",
              "PICTURE",
              "SLIDE_NUMBER",
              "SUBTITLE",
              "TABLE",
              "TITLE",
              "SLIDE_IMAGE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Line": {
        "description": "A PageElement kind representing a non-connector line, straight connector, curved connector, or bent connector.",
        "properties": {
          "lineCategory": {
            "description": "The category of the line. It matches the `category` specified in CreateLineRequest, and can be updated with UpdateLineCategoryRequest.",
            "enum": [
              "LINE_CATEGORY_UNSPECIFIED",
              "STRAIGHT",
              "BENT",
              "CURVED"
            ],
            "type": "string"
          },
          "lineProperties": {
            "$ref": "#/$defs/LineProperties"
          },
          "lineType": {
            "description": "The type of the line.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "STRAIGHT_CONNECTOR_1",
              "BENT_CONNECTOR_2",
              "BENT_CONNECTOR_3",
              "BENT_CONNECTOR_4",
              "BENT_CONNECTOR_5",
              "CURVED_CONNECTOR_2",
              "CURVED_CONNECTOR_3",
              "CURVED_CONNECTOR_4",
              "CURVED_CONNECTOR_5",
              "STRAIGHT_LINE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "LineProperties": {
        "description": "The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.",
        "properties": {
          "dashStyle": {
            "description": "The dash style of the line.",
            "enum": [
              "DASH_STYLE_UNSPECIFIED",
              "SOLID",
              "DOT",
              "DASH",
              "DASH_DOT",
              "LONG_DASH",
              "LONG_DASH_DOT"
            ],
            "type": "string"
          },
          "endArrow": {
            "description": "The style of the arrow at the end of the line.",
            "enum": [
              "ARROW_STYLE_UNSPECIFIED",
              "NONE",
              "STEALTH_ARROW",
              "FILL_ARROW",
              "FILL_CIRCLE",
              "FILL_SQUARE",
              "FILL_DIAMOND",
              "OPEN_ARROW",
              "OPEN_CIRCLE",
              "OPEN_SQUARE",
              "OPEN_DIAMOND"
            ],
            "type": "string"
          },
          "endConnection": {
            "$ref": "#/$defs/LineConnection"
          },
          "lineFill": {
            "$ref": "#/$defs/LineFill"
          },
          "link": {
            "$ref": "#/$defs/Link"
          },
          "startArrow": {
            "description": "The style of the arrow at the beginning of the line.",
            "enum": [
              "ARROW_STYLE_UNSPECIFIED",
              "NONE",
              "STEALTH_ARROW",
              "FILL_ARROW",
              "FILL_CIRCLE",
              "FILL_SQUARE",
              "FILL_DIAMOND",
              "OPEN_ARROW",
              "OPEN_CIRCLE",
              "OPEN_SQUARE",
              "OPEN_DIAMOND"
            ],
            "type": "string"
          },
          "startConnection": {
            "$ref": "#/$defs/LineConnection"
          },
          "weight": {
            "$ref": "#/$defs/Dimension"
          }
        },
        "type": "object"
      },
      "LineConnection": {
        "description": "The properties for one end of a Line connection.",
        "properties": {
          "connectedObjectId": {
            "description": "The object ID of the connected page element. Some page elements, such as groups, tables, and lines do not have connection sites and therefore cannot be connected to a connector line.",
            "type": "string"
          },
          "connectionSiteIndex": {
            "description": "The index of the connection site on the connected page element. In most cases, it corresponds to the predefined connection site index from the ECMA-376 standard. More information on those connection sites can be found in the description of the \"cnx\" attribute in section 20.1.9.9 and Annex H. \"Predefined DrawingML Shape and Text Geometries\" of \"Office Open XML File Formats-Fundamentals and Markup Language Reference\", part 1 of [ECMA-376 5th edition] (http://www.ecma-international.org/publications/standards/Ecma-376.htm). The position of each connection site can also be viewed from Slides editor.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LineFill": {
        "description": "The fill of the line.",
        "properties": {
          "solidFill": {
            "$ref": "#/$defs/SolidFill"
          }
        },
        "type": "object"
      },
      "Shape": {
        "description": "A PageElement kind representing a generic shape that does not have a more specific classification.",
        "properties": {
          "placeholder": {
            "$ref": "#/$defs/Placeholder"
          },
          "shapeProperties": {
            "$ref": "#/$defs/ShapeProperties"
          },
          "shapeType": {
            "description": "The type of the shape.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "TEXT_BOX",
              "RECTANGLE",
              "ROUND_RECTANGLE",
              "ELLIPSE",
              "ARC",
              "BENT_ARROW",
              "BENT_UP_ARROW",
              "BEVEL",
              "BLOCK_ARC",
              "BRACE_PAIR",
              "BRACKET_PAIR",
              "CAN",
              "CHEVRON",
              "CHORD",
              "CLOUD",
              "CORNER",
              "CUBE",
              "CURVED_DOWN_ARROW",
              "CURVED_LEFT_ARROW",
              "CURVED_RIGHT_ARROW",
              "CURVED_UP_ARROW",
              "DECAGON",
              "DIAGONAL_STRIPE",
              "DIAMOND",
              "DODECAGON",
              "DONUT",
              "DOUBLE_WAVE",
              "DOWN_ARROW",
              "DOWN_ARROW_CALLOUT",
              "FOLDED_CORNER",
              "FRAME",
              "HALF_FRAME",
              "HEART",
              "HEPTAGON",
              "HEXAGON",
              "HOME_PLATE",
              "HORIZONTAL_SCROLL",
              "IRREGULAR_SEAL_1",
              "IRREGULAR_SEAL_2",
              "LEFT_ARROW",
              "LEFT_ARROW_CALLOUT",
              "LEFT_BRACE",
              "LEFT_BRACKET",
              "LEFT_RIGHT_ARROW",
              "LEFT_RIGHT_ARROW_CALLOUT",
              "LEFT_RIGHT_UP_ARROW",
              "LEFT_UP_ARROW",
              "LIGHTNING_BOLT",
              "MATH_DIVIDE",
              "MATH_EQUAL",
              "MATH_MINUS",
              "MATH_MULTIPLY",
              "MATH_NOT_EQUAL",
              "MATH_PLUS",
              "MOON",
              "NO_SMOKING",
              "NOTCHED_RIGHT_ARROW",
              "OCTAGON",
              "PARALLELOGRAM",
              "PENTAGON",
              "PIE",
              "PLAQUE",
              "PLUS",
              "QUAD_ARROW",
              "QUAD_ARROW_CALLOUT",
              "RIBBON",
              "RIBBON_2",
              "RIGHT_ARROW",
              "RIGHT_ARROW_CALLOUT",
              "RIGHT_BRACE",
              "RIGHT_BRACKET",
              "ROUND_1_RECTANGLE",
              "ROUND_2_DIAGONAL_RECTANGLE",
              "ROUND_2_SAME_RECTANGLE",
              "RIGHT_TRIANGLE",
              "SMILEY_FACE",
              "SNIP_1_RECTANGLE",
              "SNIP_2_DIAGONAL_RECTANGLE",
              "SNIP_2_SAME_RECTANGLE",
              "SNIP_ROUND_RECTANGLE",
              "STAR_10",
              "STAR_12",
              "STAR_16",
              "STAR_24",
              "STAR_32",
              "STAR_4",
              "STAR_5",
              "STAR_6",
              "STAR_7",
              "STAR_8",
              "STRIPED_RIGHT_ARROW",
              "SUN",
              "TRAPEZOID",
              "TRIANGLE",
              "UP_ARROW",
              "UP_ARROW_CALLOUT",
              "UP_DOWN_ARROW",
              "UTURN_ARROW",
              "VERTICAL_SCROLL",
              "WAVE",
              "WEDGE_ELLIPSE_CALLOUT",
              "WEDGE_RECTANGLE_CALLOUT",
              "WEDGE_ROUND_RECTANGLE_CALLOUT",
              "FLOW_CHART_ALTERNATE_PROCESS",
              "FLOW_CHART_COLLATE",
              "FLOW_CHART_CONNECTOR",
              "FLOW_CHART_DECISION",
              "FLOW_CHART_DELAY",
              "FLOW_CHART_DISPLAY",
              "FLOW_CHART_DOCUMENT",
              "FLOW_CHART_EXTRACT",
              "FLOW_CHART_INPUT_OUTPUT",
              "FLOW_CHART_INTERNAL_STORAGE",
              "FLOW_CHART_MAGNETIC_DISK",
              "FLOW_CHART_MAGNETIC_DRUM",
              "FLOW_CHART_MAGNETIC_TAPE",
              "FLOW_CHART_MANUAL_INPUT",
              "FLOW_CHART_MANUAL_OPERATION",
              "FLOW_CHART_MERGE",
              "FLOW_CHART_MULTIDOCUMENT",
              "FLOW_CHART_OFFLINE_STORAGE",
              "FLOW_CHART_OFFPAGE_CONNECTOR",
              "FLOW_CHART_ONLINE_STORAGE",
              "FLOW_CHART_OR",
              "FLOW_CHART_PREDEFINED_PROCESS",
              "FLOW_CHART_PREPARATION",
              "FLOW_CHART_PROCESS",
              "FLOW_CHART_PUNCHED_CARD",
              "FLOW_CHART_PUNCHED_TAPE",
              "FLOW_CHART_SORT",
              "FLOW_CHART_SUMMING_JUNCTION",
              "FLOW_CHART_TERMINATOR",
              "ARROW_EAST",
              "ARROW_NORTH_EAST",
              "ARROW_NORTH",
              "SPEECH",
              "STARBURST",
              "TEARDROP",
              "ELLIPSE_RIBBON",
              "ELLIPSE_RIBBON_2",
              "CLOUD_CALLOUT",
              "CUSTOM"
            ],
            "type": "string"
          },
          "text": {
            "$ref": "#/$defs/TextContent"
          }
        },
        "type": "object"
      },
      "ShapeProperties": {
        "description": "The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.",
        "properties": {
          "autofit": {
            "$ref": "#/$defs/Autofit"
          },
          "contentAlignment": {
            "description": "The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.",
            "enum": [
              "CONTENT_ALIGNMENT_UNSPECIFIED",
              "CONTENT_ALIGNMENT_UNSUPPORTED",
              "TOP",
              "MIDDLE",
              "BOTTOM"
            ],
            "type": "string"
          },
          "link": {
            "$ref": "#/$defs/Link"
          },
          "outline": {
            "$ref": "#/$defs/Outline"
          },
          "shadow": {
            "$ref": "#/$defs/Shadow"
          },
          "shapeBackgroundFill": {
            "$ref": "#/$defs/ShapeBackgroundFill"
          }
        },
        "type": "object"
      },
      "Autofit": {
        "description": "The autofit properties of a Shape.",
        "properties": {
          "autofitType": {
            "description": "The autofit type of the shape. If the autofit type is AUTOFIT_TYPE_UNSPECIFIED, the autofit type is inherited from a parent placeholder if it exists. The field is automatically set to NONE if a request is made that might affect text fitting within its bounding text box. In this case the font_scale is applied to the font_size and the line_spacing_reduction is applied to the line_spacing. Both properties are also reset to default values.",
            "enum": [
              "AUTOFIT_TYPE_UNSPECIFIED",
              "NONE",
              "TEXT_AUTOFIT",
              "SHAPE_AUTOFIT"
            ],
            "type": "string"
          },
          "fontScale": {
            "description": "The font scale applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 1. For TEXT_AUTOFIT, this value multiplied by the font_size gives the font size that is rendered in the editor. This property is read-only.",
            "format": "float",
            "type": "number"
          },
          "lineSpacingReduction": {
            "description": "The line spacing reduction applied to the shape. For shapes with autofit_type NONE or SHAPE_AUTOFIT, this value is the default value of 0. For TEXT_AUTOFIT, this value subtracted from the line_spacing gives the line spacing that is rendered in the editor. This property is read-only.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ShapeBackgroundFill": {
        "description": "The shape background fill.",
        "properties": {
          "propertyState": {
            "description": "The background fill property state. Updating the fill on a shape will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a shape, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.",
            "enum": [
              "RENDERED",
              "NOT_RENDERED",
              "INHERIT"
            ],
            "type": "string"
          },
          "solidFill": {
            "$ref": "#/$defs/SolidFill"
          }
        },
        "type": "object"
      },
      "TextContent": {
        "description": "The general text content. The text must reside in a compatible shape (e.g. text box or rectangle) or a table cell in a page.",
        "properties": {
          "lists": {
            "additionalProperties": {
              "$ref": "#/$defs/List"
            },
            "description": "The bulleted lists contained in this text, keyed by list ID.",
            "type": "object"
          },
          "textElements": {
            "description": "The text contents broken down into its component parts, including styling information. This property is read-only.",
            "items": {
              "$ref": "#/$defs/TextElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "List": {
        "description": "A List describes the look and feel of bullets belonging to paragraphs associated with a list. A paragraph that is part of a list has an implicit reference to that list's ID.",
        "properties": {
          "listId": {
            "description": "The ID of the list.",
            "type": "string"
          },
          "nestingLevel": {
            "additionalProperties": {
              "$ref": "#/$defs/NestingLevel"
            },
            "description": "A map of nesting levels to the properties of bullets at the associated level. A list has at most nine levels of nesting, so the possible values for the keys of this map are 0 through 8, inclusive.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "NestingLevel": {
        "description": "Contains properties describing the look and feel of a list bullet at a given level of nesting.",
        "properties": {
          "bulletStyle": {
            "$ref": "#/$defs/TextStyle"
          }
        },
        "type": "object"
      },
      "TextStyle": {
        "description": "Represents the styling that can be applied to a TextRun. If this text is contained in a shape with a parent placeholder, then these text styles may be inherited from the parent. Which text styles are inherited depend on the nesting level of lists: * A text run in a paragraph that is not in a list will inherit its text style from the the newline character in the paragraph at the 0 nesting level of the list inside the parent placeholder. * A text run in a paragraph that is in a list will inherit its text style from the newline character in the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited text styles are represented as unset fields in this message. If text is contained in a shape without a parent placeholder, unsetting these fields will revert the style to a value matching the defaults in the Slides editor.",
        "properties": {
          "backgroundColor": {
            "$ref": "#/$defs/OptionalColor"
          },
          "baselineOffset": {
            "description": "The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. The `font_size` itself is not affected by changes in this field.",
            "enum": [
              "BASELINE_OFFSET_UNSPECIFIED",
              "NONE",
              "SUPERSCRIPT",
              "SUBSCRIPT"
            ],
            "type": "string"
          },
          "bold": {
            "description": "Whether or not the text is rendered as bold.",
            "type": "boolean"
          },
          "fontFamily": {
            "description": "The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`. Some fonts can affect the weight of the text. If an update request specifies values for both `font_family` and `bold`, the explicitly-set `bold` value is used.",
            "type": "string"
          },
          "fontSize": {
            "$ref": "#/$defs/Dimension"
          },
          "foregroundColor": {
            "$ref": "#/$defs/OptionalColor"
          },
          "italic": {
            "description": "Whether or not the text is italicized.",
            "type": "boolean"
          },
          "link": {
            "$ref": "#/$defs/Link"
          },
          "smallCaps": {
            "description": "Whether or not the text is in small capital letters.",
            "type": "boolean"
          },
          "strikethrough": {
            "description": "Whether or not the text is struck through.",
            "type": "boolean"
          },
          "underline": {
            "description": "Whether or not the text is underlined.",
            "type": "boolean"
          },
          "weightedFontFamily": {
            "$ref": "#/$defs/WeightedFontFamily"
          }
        },
        "type": "object"
      },
      "OptionalColor": {
        "description": "A color that can either be fully opaque or fully transparent.",
        "properties": {
          "opaqueColor": {
            "$ref": "#/$defs/OpaqueColor"
          }
        },
        "type": "object"
      },
      "WeightedFontFamily": {
        "description": "Represents a font family and weight used to style a TextRun.",
        "properties": {
          "fontFamily": {
            "description": "The font family of the text. The font family can be any font from the Font menu in Slides or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.",
            "type": "string"
          },
          "weight": {
            "description": "The rendered weight of the text. This field can have any value that is a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. Weights greater than or equal to `700` are considered bold, and weights less than `700`are not bold. The default value is `400` (\"normal\").",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TextElement": {
        "description": "A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.",
        "properties": {
          "autoText": {
            "$ref": "#/$defs/AutoText"
          },
          "endIndex": {
            "description": "The zero-based end index of this text element, exclusive, in Unicode code units.",
            "format": "int32",
            "type": "integer"
          },
          "paragraphMarker": {
            "$ref": "#/$defs/ParagraphMarker"
          },
          "startIndex": {
            "description": "The zero-based start index of this text element, in Unicode code units.",
            "format": "int32",
            "type": "integer"
          },
          "textRun": {
            "$ref": "#/$defs/TextRun"
          }
        },
        "type": "object"
      },
      "AutoText": {
        "description": "A TextElement kind that represents auto text.",
        "properties": {
          "content": {
            "description": "The rendered content of this auto text, if available.",
            "type": "string"
          },
          "style": {
            "$ref": "#/$defs/TextStyle"
          },
          "type": {
            "description": "The type of this auto text.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "SLIDE_NUMBER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ParagraphMarker": {
        "description": "A TextElement kind that represents the beginning of a new paragraph.",
        "properties": {
          "bullet": {
            "$ref": "#/$defs/Bullet"
          },
          "style": {
            "$ref": "#/$defs/ParagraphStyle"
          }
        },
        "type": "object"
      },
      "Bullet": {
        "description": "Describes the bullet of a paragraph.",
        "properties": {
          "bulletStyle": {
            "$ref": "#/$defs/TextStyle"
          },
          "glyph": {
            "description": "The rendered bullet glyph for this paragraph.",
            "type": "string"
          },
          "listId": {
            "description": "The ID of the list this paragraph belongs to.",
            "type": "string"
          },
          "nestingLevel": {
            "description": "The nesting level of this paragraph in the list.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ParagraphStyle": {
        "description": "Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.",
        "properties": {
          "alignment": {
            "description": "The text alignment for this paragraph.",
            "enum": [
              "ALIGNMENT_UNSPECIFIED",
              "START",
              "CENTER",
              "END",
              "JUSTIFIED"
            ],
            "type": "string"
          },
          "direction": {
            "description": "The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.",
            "enum": [
              "TEXT_DIRECTION_UNSPECIFIED",
              "LEFT_TO_RIGHT",
              "RIGHT_TO_LEFT"
            ],
            "type": "string"
          },
          "indentEnd": {
            "$ref": "#/$defs/Dimension"
          },
          "indentFirstLine": {
            "$ref": "#/$defs/Dimension"
          },
          "indentStart": {
            "$ref": "#/$defs/Dimension"
          },
          "lineSpacing": {
            "description": "The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.",
            "format": "float",
            "type": "number"
          },
          "spaceAbove": {
            "$ref": "#/$defs/Dimension"
          },
          "spaceBelow": {
            "$ref": "#/$defs/Dimension"
          },
          "spacingMode": {
            "description": "The spacing mode for the paragraph.",
            "enum": [
              "SPACING_MODE_UNSPECIFIED",
              "NEVER_COLLAPSE",
              "COLLAPSE_LISTS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TextRun": {
        "description": "A TextElement kind that represents a run of text that all has the same styling.",
        "properties": {
          "content": {
            "description": "The text of this run.",
            "type": "string"
          },
          "style": {
            "$ref": "#/$defs/TextStyle"
          }
        },
        "type": "object"
      },
      "SheetsChart": {
        "description": "A PageElement kind representing a linked chart embedded from Google Sheets.",
        "properties": {
          "chartId": {
            "description": "The ID of the specific chart in the Google Sheets spreadsheet that is embedded.",
            "format": "int32",
            "type": "integer"
          },
          "contentUrl": {
            "description": "The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.",
            "type": "string"
          },
          "sheetsChartProperties": {
            "$ref": "#/$defs/SheetsChartProperties"
          },
          "spreadsheetId": {
            "description": "The ID of the Google Sheets spreadsheet that contains the source chart.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SheetsChartProperties": {
        "description": "The properties of the SheetsChart.",
        "properties": {
          "chartImageProperties": {
            "$ref": "#/$defs/ImageProperties"
          }
        },
        "type": "object"
      },
      "Size": {
        "description": "A width and height.",
        "properties": {
          "height": {
            "$ref": "#/$defs/Dimension"
          },
          "width": {
            "$ref": "#/$defs/Dimension"
          }
        },
        "type": "object"
      },
      "Table": {
        "description": "A PageElement kind representing a table.",
        "properties": {
          "columns": {
            "description": "Number of columns in the table.",
            "format": "int32",
            "type": "integer"
          },
          "horizontalBorderRows": {
            "description": "Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.",
            "items": {
              "$ref": "#/$defs/TableBorderRow"
            },
            "type": "array"
          },
          "rows": {
            "description": "Number of rows in the table.",
            "format": "int32",
            "type": "integer"
          },
          "tableColumns": {
            "description": "Properties of each column.",
            "items": {
              "$ref": "#/$defs/TableColumnProperties"
            },
            "type": "array"
          },
          "tableRows": {
            "description": "Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.",
            "items": {
              "$ref": "#/$defs/TableRow"
            },
            "type": "array"
          },
          "verticalBorderRows": {
            "description": "Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.",
            "items": {
              "$ref": "#/$defs/TableBorderRow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TableBorderRow": {
        "description": "Contents of each border row in a table.",
        "properties": {
          "tableBorderCells": {
            "description": "Properties of each border cell. When a border's adjacent table cells are merged, it is not included in the response.",
            "items": {
              "$ref": "#/$defs/TableBorderCell"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TableBorderCell": {
        "description": "The properties of each border cell.",
        "properties": {
          "location": {
            "$ref": "#/$defs/TableCellLocation"
          },
          "tableBorderProperties": {
            "$ref": "#/$defs/TableBorderProperties"
          }
        },
        "type": "object"
      },
      "TableCellLocation": {
        "description": "A location of a single table cell within a table.",
        "properties": {
          "columnIndex": {
            "description": "The 0-based column index.",
            "format": "int32",
            "type": "integer"
          },
          "rowIndex": {
            "description": "The 0-based row index.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TableBorderProperties": {
        "description": "The border styling properties of the TableBorderCell.",
        "properties": {
          "dashStyle": {
            "description": "The dash style of the border.",
            "enum": [
              "DASH_STYLE_UNSPECIFIED",
              "SOLID",
              "DOT",
              "DASH",
              "DASH_DOT",
              "LONG_DASH",
              "LONG_DASH_DOT"
            ],
            "type": "string"
          },
          "tableBorderFill": {
            "$ref": "#/$defs/TableBorderFill"
          },
          "weight": {
            "$ref": "#/$defs/Dimension"
          }
        },
        "type": "object"
      },
      "TableBorderFill": {
        "description": "The fill of the border.",
        "properties": {
          "solidFill": {
            "$ref": "#/$defs/SolidFill"
          }
        },
        "type": "object"
      },
      "TableColumnProperties": {
        "description": "Properties of each column in a table.",
        "properties": {
          "columnWidth": {
            "$ref": "#/$defs/Dimension"
          }
        },
        "type": "object"
      },
      "TableRow": {
        "description": "Properties and contents of each row in a table.",
        "properties": {
          "rowHeight": {
            "$ref": "#/$defs/Dimension"
          },
          "tableCells": {
            "description": "Properties and contents of each cell. Cells that span multiple columns are represented only once with a column_span greater than 1. As a result, the length of this collection does not always match the number of columns of the entire table.",
            "items": {
              "$ref": "#/$defs/TableCell"
            },
            "type": "array"
          },
          "tableRowProperties": {
            "$ref": "#/$defs/TableRowProperties"
          }
        },
        "type": "object"
      },
      "TableCell": {
        "description": "Properties and contents of each table cell.",
        "properties": {
          "columnSpan": {
            "description": "Column span of the cell.",
            "format": "int32",
            "type": "integer"
          },
          "location": {
            "$ref": "#/$defs/TableCellLocation"
          },
          "rowSpan": {
            "description": "Row span of the cell.",
            "format": "int32",
            "type": "integer"
          },
          "tableCellProperties": {
            "$ref": "#/$defs/TableCellProperties"
          },
          "text": {
            "$ref": "#/$defs/TextContent"
          }
        },
        "type": "object"
      },
      "TableCellProperties": {
        "description": "The properties of the TableCell.",
        "properties": {
          "contentAlignment": {
            "description": "The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Slides editor.",
            "enum": [
              "CONTENT_ALIGNMENT_UNSPECIFIED",
              "CONTENT_ALIGNMENT_UNSUPPORTED",
              "TOP",
              "MIDDLE",
              "BOTTOM"
            ],
            "type": "string"
          },
          "tableCellBackgroundFill": {
            "$ref": "#/$defs/TableCellBackgroundFill"
          }
        },
        "type": "object"
      },
      "TableCellBackgroundFill": {
        "description": "The table cell background fill.",
        "properties": {
          "propertyState": {
            "description": "The background fill property state. Updating the fill on a table cell will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a table cell, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.",
            "enum": [
              "RENDERED",
              "NOT_RENDERED",
              "INHERIT"
            ],
            "type": "string"
          },
          "solidFill": {
            "$ref": "#/$defs/SolidFill"
          }
        },
        "type": "object"
      },
      "TableRowProperties": {
        "description": "Properties of each row in a table.",
        "properties": {
          "minRowHeight": {
            "$ref": "#/$defs/Dimension"
          }
        },
        "type": "object"
      },
      "Video": {
        "description": "A PageElement kind representing a video.",
        "properties": {
          "id": {
            "description": "The video source's unique identifier for this video.",
            "type": "string"
          },
          "source": {
            "description": "The video source.",
            "enum": [
              "SOURCE_UNSPECIFIED",
              "YOUTUBE",
              "DRIVE"
            ],
            "type": "string"
          },
          "url": {
            "description": "An URL to a video. The URL is valid as long as the source video exists and sharing settings do not change.",
            "type": "string"
          },
          "videoProperties": {
            "$ref": "#/$defs/VideoProperties"
          }
        },
        "type": "object"
      },
      "VideoProperties": {
        "description": "The properties of the Video.",
        "properties": {
          "autoPlay": {
            "description": "Whether to enable video autoplay when the page is displayed in present mode. Defaults to false.",
            "type": "boolean"
          },
          "end": {
            "description": "The time at which to end playback, measured in seconds from the beginning of the video. If set, the end time should be after the start time. If not set or if you set this to a value that exceeds the video's length, the video will be played until its end.",
            "format": "uint32",
            "type": "integer"
          },
          "mute": {
            "description": "Whether to mute the audio during video playback. Defaults to false.",
            "type": "boolean"
          },
          "outline": {
            "$ref": "#/$defs/Outline"
          },
          "start": {
            "description": "The time at which to start playback, measured in seconds from the beginning of the video. If set, the start time should be before the end time. If you set this to a value that exceeds the video's length in seconds, the video will be played from the last second. If not set, the video will be played from the beginning.",
            "format": "uint32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "WordArt": {
        "description": "A PageElement kind representing word art.",
        "properties": {
          "renderedText": {
            "description": "The text rendered as word art.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PageProperties": {
        "description": "The properties of the Page. The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either SlideProperties or LayoutProperties.",
        "properties": {
          "colorScheme": {
            "$ref": "#/$defs/ColorScheme"
          },
          "pageBackgroundFill": {
            "$ref": "#/$defs/PageBackgroundFill"
          }
        },
        "type": "object"
      },
      "ColorScheme": {
        "description": "The palette of predefined colors for a page.",
        "properties": {
          "colors": {
            "description": "The ThemeColorType and corresponding concrete color pairs.",
            "items": {
              "$ref": "#/$defs/ThemeColorPair"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ThemeColorPair": {
        "description": "A pair mapping a theme color type to the concrete color it represents.",
        "properties": {
          "color": {
            "$ref": "#/$defs/RgbColor"
          },
          "type": {
            "description": "The type of the theme color.",
            "enum": [
              "THEME_COLOR_TYPE_UNSPECIFIED",
              "DARK1",
              "LIGHT1",
              "DARK2",
              "LIGHT2",
              "ACCENT1",
              "ACCENT2",
              "ACCENT3",
              "ACCENT4",
              "ACCENT5",
              "ACCENT6",
              "HYPERLINK",
              "FOLLOWED_HYPERLINK",
              "TEXT1",
              "BACKGROUND1",
              "TEXT2",
              "BACKGROUND2"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PageBackgroundFill": {
        "description": "The page background fill.",
        "properties": {
          "propertyState": {
            "description": "The background fill property state. Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.",
            "enum": [
              "RENDERED",
              "NOT_RENDERED",
              "INHERIT"
            ],
            "type": "string"
          },
          "solidFill": {
            "$ref": "#/$defs/SolidFill"
          },
          "stretchedPictureFill": {
            "$ref": "#/$defs/StretchedPictureFill"
          }
        },
        "type": "object"
      },
      "StretchedPictureFill": {
        "description": "The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.",
        "properties": {
          "contentUrl": {
            "description": "Reading the content_url: An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change. Writing the content_url: The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length.",
            "type": "string"
          },
          "size": {
            "$ref": "#/$defs/Size"
          }
        },
        "type": "object"
      },
      "SlideProperties": {
        "description": "The properties of Page that are only relevant for pages with page_type SLIDE.",
        "properties": {
          "isSkipped": {
            "description": "Whether the slide is skipped in the presentation mode. Defaults to false.",
            "type": "boolean"
          },
          "layoutObjectId": {
            "description": "The object ID of the layout that this slide is based on. This property is read-only.",
            "type": "string"
          },
          "masterObjectId": {
            "description": "The object ID of the master that this slide is based on. This property is read-only.",
            "type": "string"
          },
          "notesPage": {
            "$ref": "#/$defs/Page"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://slides.googleapis.com//v1/presentations{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Google Slides presentation.",
        "**Key properties:**",
        {
          "$ul": [
            "**layouts**: The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.",
            "**locale**: The locale of the presentation, as an IETF BCP 47 language tag.",
            "**masters**: The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.",
            [
              "**notesMaster**: A page in a presentation.",
              {
                "$ul": [
                  [
                    "**layoutProperties**: The properties of Page are only relevant for pages with page_type LAYOUT.",
                    {
                      "$ul": [
                        "**displayName**: The human-readable name of the layout.",
                        "**masterObjectId**: The object ID of the master that this layout is based on.",
                        "**name**: The name of the layout."
                      ]
                    }
                  ],
                  [
                    "**masterProperties**: The properties of Page that are only relevant for pages with page_type MASTER.",
                    {
                      "$ul": [
                        "**displayName**: The human-readable name of the master."
                      ]
                    }
                  ],
                  [
                    "**notesProperties**: The properties of Page that are only relevant for pages with page_type NOTES.",
                    {
                      "$ul": [
                        "**speakerNotesObjectId**: The object ID of the shape on this notes page that contains the speaker notes for the corresponding slide. The actual shape may not always exist on the notes page. Inserting text using this object ID will automatically create the shape. In this case, the actual shape may have different object ID. The `GetPresentation` or `GetPage` action will always return the latest object ID."
                      ]
                    }
                  ],
                  "**objectId**: The object ID for this page. Object IDs used by Page and PageElement share the same namespace.",
                  "**pageElements**: The page elements rendered on the page.",
                  [
                    "**pageProperties**: The properties of the Page. The page will inherit properties from the parent page. Depending on the page type the hierarchy is defined in either SlideProperties or LayoutProperties.",
                    {
                      "$ul": [
                        [
                          "**colorScheme**: The palette of predefined colors for a page.",
                          {
                            "$ul": [
                              "**colors**: The ThemeColorType and corresponding concrete color pairs."
                            ]
                          }
                        ],
                        [
                          "**pageBackgroundFill**: The page background fill.",
                          {
                            "$ul": [
                              "**propertyState**: The background fill property state. Updating the fill on a page will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no fill on a page, set this field to `NOT_RENDERED`. In this case, any other fill fields set in the same request will be ignored.",
                              [
                                "**solidFill**: A solid color fill. The page or page element is filled entirely with the specified color value. If any field is unset, its value may be inherited from a parent placeholder if it exists.",
                                {
                                  "$ul": [
                                    "**alpha**: The fraction of this `color` that should be applied to the pixel. That is, the final pixel color is defined by the equation: pixel color = alpha * (color) + (1.0 - alpha) * (background color) This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color.",
                                    [
                                      "**color**: A themeable solid color value.",
                                      {
                                        "$ul": [
                                          [
                                            "**rgbColor**: An RGB color.",
                                            {
                                              "$ul": [
                                                "**blue**: The blue component of the color, from 0.0 to 1.0.",
                                                "**green**: The green component of the color, from 0.0 to 1.0.",
                                                "**red**: The red component of the color, from 0.0 to 1.0."
                                              ]
                                            }
                                          ],
                                          "**themeColor**: An opaque theme color."
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              [
                                "**stretchedPictureFill**: The stretched picture fill. The page or page element is filled entirely with the specified picture. The picture is stretched to fit its container.",
                                {
                                  "$ul": [
                                    "**contentUrl**: Reading the content_url: An URL to a picture with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the picture as the original requester. Access to the picture may be lost if the presentation's sharing settings change. Writing the content_url: The picture is fetched once at insertion time and a copy is stored for display inside the presentation. Pictures must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length.",
                                    [
                                      "**size**: A width and height.",
                                      {
                                        "$ul": [
                                          [
                                            "**height**: A magnitude in a single direction in the specified units.",
                                            {
                                              "$ul": [
                                                "**magnitude**: The magnitude.",
                                                "**unit**: The units for magnitude."
                                              ]
                                            }
                                          ],
                                          [
                                            "**width**: A magnitude in a single direction in the specified units.",
                                            {
                                              "$ul": [
                                                "**magnitude**: The magnitude.",
                                                "**unit**: The units for magnitude."
                                              ]
                                            }
                                          ]
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**pageType**: The type of the page.",
                  "**revisionId**: Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.",
                  [
                    "**slideProperties**: The properties of Page that are only relevant for pages with page_type SLIDE.",
                    {
                      "$ul": [
                        "**isSkipped**: Whether the slide is skipped in the presentation mode. Defaults to false.",
                        "**layoutObjectId**: The object ID of the layout that this slide is based on. This property is read-only.",
                        "**masterObjectId**: The object ID of the master that this slide is based on. This property is read-only.",
                        "**notesPage**"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**pageSize**: A width and height.",
              {
                "$ul": [
                  [
                    "**height**: A magnitude in a single direction in the specified units.",
                    {
                      "$ul": [
                        "**magnitude**: The magnitude.",
                        "**unit**: The units for magnitude."
                      ]
                    }
                  ],
                  [
                    "**width**: A magnitude in a single direction in the specified units.",
                    {
                      "$ul": [
                        "**magnitude**: The magnitude.",
                        "**unit**: The units for magnitude."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**presentationId**: The ID of the presentation.",
            "**revisionId**: Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.",
            "**slides**: The slides in the presentation. A slide inherits properties from a slide layout.",
            "**title**: The title of the presentation."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
