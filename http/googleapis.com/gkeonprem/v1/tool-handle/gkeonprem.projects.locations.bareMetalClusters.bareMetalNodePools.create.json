{
  "name": "gkeonprem_projects_locations_bareMetalClusters_bareMetalNodePools_create",
  "description": "Creates a new bare metal node pool in a given project, location and Bare Metal cluster.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource where this node pool will be created. projects/{project}/locations/{location}/bareMetalClusters/{cluster}"
      },
      "bareMetalNodePoolId": {
        "type": "string",
        "description": "The ID to use for the node pool, which will become the final component of the node pool's resource name. This value must be up to 63 characters, and valid characters are /a-z-/. The value must not be permitted to be a UUID (or UUID-like: anything matching /^[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$/i)."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "If set, only validate the request, but do not actually create the node pool."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BareMetalNodePool"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "BareMetalNodePool": {
        "description": "Resource that represents a bare metal node pool.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations on the bare metal node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.",
            "type": "object"
          },
          "createTime": {
            "description": "Output only. The time at which this bare metal node pool was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. The time at which this bare metal node pool was deleted. If the resource is not deleted, this must be empty",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "The display name for the bare metal node pool.",
            "type": "string"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.",
            "type": "string"
          },
          "name": {
            "description": "Immutable. The bare metal node pool resource name.",
            "type": "string"
          },
          "nodePoolConfig": {
            "$ref": "#/$defs/BareMetalNodePoolConfig"
          },
          "reconciling": {
            "description": "Output only. If set, there are currently changes in flight to the bare metal node pool.",
            "readOnly": true,
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The current state of the bare metal node pool.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PROVISIONING",
              "RUNNING",
              "RECONCILING",
              "STOPPING",
              "ERROR",
              "DEGRADED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ResourceStatus"
          },
          "uid": {
            "description": "Output only. The unique identifier of the bare metal node pool.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which this bare metal node pool was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upgradePolicy": {
            "$ref": "#/$defs/BareMetalNodePoolUpgradePolicy"
          }
        },
        "type": "object"
      },
      "BareMetalNodePoolConfig": {
        "description": "BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.",
        "properties": {
          "kubeletConfig": {
            "$ref": "#/$defs/BareMetalKubeletConfig"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.",
            "type": "object"
          },
          "nodeConfigs": {
            "description": "Required. The list of machine addresses in the bare metal node pool.",
            "items": {
              "$ref": "#/$defs/BareMetalNodeConfig"
            },
            "type": "array"
          },
          "operatingSystem": {
            "description": "Specifies the nodes operating system (default: LINUX).",
            "enum": [
              "OPERATING_SYSTEM_UNSPECIFIED",
              "LINUX"
            ],
            "type": "string"
          },
          "taints": {
            "description": "The initial taints assigned to nodes of this node pool.",
            "items": {
              "$ref": "#/$defs/NodeTaint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BareMetalKubeletConfig": {
        "description": "KubeletConfig defines the modifiable kubelet configurations for bare metal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).",
        "properties": {
          "registryBurst": {
            "description": "The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.",
            "format": "int32",
            "type": "integer"
          },
          "registryPullQps": {
            "description": "The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.",
            "format": "int32",
            "type": "integer"
          },
          "serializeImagePullsDisabled": {
            "description": "Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BareMetalNodeConfig": {
        "description": "BareMetalNodeConfig lists machine addresses to access Nodes.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.",
            "type": "object"
          },
          "nodeIp": {
            "description": "The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeTaint": {
        "description": "NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.",
        "properties": {
          "effect": {
            "description": "The taint effect.",
            "enum": [
              "EFFECT_UNSPECIFIED",
              "NO_SCHEDULE",
              "PREFER_NO_SCHEDULE",
              "NO_EXECUTE"
            ],
            "type": "string"
          },
          "key": {
            "description": "Key associated with the effect.",
            "type": "string"
          },
          "value": {
            "description": "Value associated with the effect.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceStatus": {
        "description": "ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).",
        "properties": {
          "conditions": {
            "description": "ResourceCondition provide a standard mechanism for higher-level status reporting from controller.",
            "items": {
              "$ref": "#/$defs/ResourceCondition"
            },
            "type": "array"
          },
          "errorMessage": {
            "description": "Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceCondition": {
        "description": "ResourceCondition provides a standard mechanism for higher-level status reporting from controller.",
        "properties": {
          "lastTransitionTime": {
            "description": "Last time the condition transit from one status to another.",
            "format": "google-datetime",
            "type": "string"
          },
          "message": {
            "description": "Human-readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "Machine-readable message indicating details about last transition.",
            "type": "string"
          },
          "state": {
            "description": "state of the condition.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_TRUE",
              "STATE_FALSE",
              "STATE_UNKNOWN"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalNodePoolUpgradePolicy": {
        "description": "BareMetalNodePoolUpgradePolicy defines the node pool upgrade policy.",
        "properties": {
          "parallelUpgradeConfig": {
            "$ref": "#/$defs/BareMetalParallelUpgradeConfig"
          }
        },
        "type": "object"
      },
      "BareMetalParallelUpgradeConfig": {
        "description": "BareMetalParallelUpgradeConfig defines the parallel upgrade settings for worker node pools.",
        "properties": {
          "concurrentNodes": {
            "description": "The maximum number of nodes that can be upgraded at once.",
            "format": "int32",
            "type": "integer"
          },
          "minimumAvailableNodes": {
            "description": "The minimum number of nodes that should be healthy and available during an upgrade. If set to the default value of 0, it is possible that none of the nodes will be available during an upgrade.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://gkeonprem.googleapis.com//v1/{parent}/bareMetalNodePools{?bareMetalNodePoolId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
