{
  "name": "gkeonprem_projects_locations_vmwareClusters_vmwareNodePools_patch",
  "description": "Updates the parameters of a single VMware node pool.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Immutable. The resource name of this node pool."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. Field mask is used to specify the fields to be overwritten in the VMwareNodePool resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. A field will be overwritten if it is in the mask. If the user does not provide a mask then all populated fields in the VMwareNodePool message will be updated. Empty fields will be ignored unless a field mask is used."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Validate the request without actually doing any updates."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/VmwareNodePool"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "VmwareNodePool": {
        "description": "Resource VmwareNodePool represents a VMware node pool. ##",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations on the node pool. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.",
            "type": "object"
          },
          "config": {
            "$ref": "#/$defs/VmwareNodeConfig"
          },
          "createTime": {
            "description": "Output only. The time at which this node pool was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. The time at which this node pool was deleted. If the resource is not deleted, this must be empty",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "The display name for the node pool.",
            "type": "string"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.",
            "type": "string"
          },
          "name": {
            "description": "Immutable. The resource name of this node pool.",
            "type": "string"
          },
          "nodePoolAutoscaling": {
            "$ref": "#/$defs/VmwareNodePoolAutoscalingConfig"
          },
          "onPremVersion": {
            "description": "Anthos version for the node pool. Defaults to the user cluster version.",
            "type": "string"
          },
          "reconciling": {
            "description": "Output only. If set, there are currently changes in flight to the node pool.",
            "readOnly": true,
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The current state of the node pool.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PROVISIONING",
              "RUNNING",
              "RECONCILING",
              "STOPPING",
              "ERROR",
              "DEGRADED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ResourceStatus"
          },
          "uid": {
            "description": "Output only. The unique identifier of the node pool.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which this node pool was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareNodeConfig": {
        "description": "Parameters that describe the configuration of all nodes within a given node pool.",
        "properties": {
          "bootDiskSizeGb": {
            "description": "VMware disk size to be used during creation.",
            "format": "int64",
            "type": "string"
          },
          "cpus": {
            "description": "The number of CPUs for each node in the node pool.",
            "format": "int64",
            "type": "string"
          },
          "enableLoadBalancer": {
            "description": "Allow node pool traffic to be load balanced. Only works for clusters with MetalLB load balancers.",
            "type": "boolean"
          },
          "image": {
            "description": "The OS image name in vCenter, only valid when using Windows.",
            "type": "string"
          },
          "imageType": {
            "description": "Required. The OS image to be used for each node in a node pool. Currently `cos`, `ubuntu`, `ubuntu_containerd` and `windows` are supported.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node. In case of conflict in label keys, the applied set may differ depending on the Kubernetes version -- it's best to assume the behavior is undefined and conflicts should be avoided. For more information, including usage and the valid values, see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",
            "type": "object"
          },
          "memoryMb": {
            "description": "The megabytes of memory for each node in the node pool.",
            "format": "int64",
            "type": "string"
          },
          "replicas": {
            "description": "The number of nodes in the node pool.",
            "format": "int64",
            "type": "string"
          },
          "taints": {
            "description": "The initial taints assigned to nodes of this node pool.",
            "items": {
              "$ref": "#/$defs/NodeTaint"
            },
            "type": "array"
          },
          "vsphereConfig": {
            "$ref": "#/$defs/VmwareVsphereConfig"
          }
        },
        "type": "object"
      },
      "NodeTaint": {
        "description": "NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.",
        "properties": {
          "effect": {
            "description": "The taint effect.",
            "enum": [
              "EFFECT_UNSPECIFIED",
              "NO_SCHEDULE",
              "PREFER_NO_SCHEDULE",
              "NO_EXECUTE"
            ],
            "type": "string"
          },
          "key": {
            "description": "Key associated with the effect.",
            "type": "string"
          },
          "value": {
            "description": "Value associated with the effect.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareVsphereConfig": {
        "description": "VmwareVsphereConfig represents configuration for the VMware VCenter for node pool.",
        "properties": {
          "datastore": {
            "description": "The name of the vCenter datastore. Inherited from the user cluster.",
            "type": "string"
          },
          "hostGroups": {
            "description": "Vsphere host groups to apply to all VMs in the node pool",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tags": {
            "description": "Tags to apply to VMs.",
            "items": {
              "$ref": "#/$defs/VmwareVsphereTag"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VmwareVsphereTag": {
        "description": "VmwareVsphereTag describes a vSphere tag to be placed on VMs in the node pool. For more information, see https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.vsphere.vcenterhost.doc/GUID-E8E854DD-AA97-4E0C-8419-CE84F93C4058.html",
        "properties": {
          "category": {
            "description": "The Vsphere tag category.",
            "type": "string"
          },
          "tag": {
            "description": "The Vsphere tag name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareNodePoolAutoscalingConfig": {
        "description": "NodePoolAutoscaling config for the NodePool to allow for the kubernetes to scale NodePool.",
        "properties": {
          "maxReplicas": {
            "description": "Maximum number of replicas in the NodePool.",
            "format": "int32",
            "type": "integer"
          },
          "minReplicas": {
            "description": "Minimum number of replicas in the NodePool.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResourceStatus": {
        "description": "ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).",
        "properties": {
          "conditions": {
            "description": "ResourceCondition provide a standard mechanism for higher-level status reporting from controller.",
            "items": {
              "$ref": "#/$defs/ResourceCondition"
            },
            "type": "array"
          },
          "errorMessage": {
            "description": "Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceCondition": {
        "description": "ResourceCondition provides a standard mechanism for higher-level status reporting from controller.",
        "properties": {
          "lastTransitionTime": {
            "description": "Last time the condition transit from one status to another.",
            "format": "google-datetime",
            "type": "string"
          },
          "message": {
            "description": "Human-readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "Machine-readable message indicating details about last transition.",
            "type": "string"
          },
          "state": {
            "description": "state of the condition.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_TRUE",
              "STATE_FALSE",
              "STATE_UNKNOWN"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://gkeonprem.googleapis.com//v1/{name}{?updateMask,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
