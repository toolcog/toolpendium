{
  "name": "gkeonprem_projects_locations_vmwareClusters_create",
  "description": "Creates a new VMware user cluster in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent of the project and location where this cluster is created in. Format: \"projects/{project}/locations/{location}\""
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Validate the request without actually doing any updates."
      },
      "vmwareClusterId": {
        "type": "string",
        "description": "User provided identifier that is used as part of the resource name; This value must be up to 40 characters and follow RFC-1123 (https://tools.ietf.org/html/rfc1123) format."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/VmwareCluster"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "VmwareCluster": {
        "description": "Resource that represents a VMware user cluster. ##",
        "properties": {
          "adminClusterMembership": {
            "description": "Required. The admin cluster this VMware user cluster belongs to. This is the full resource name of the admin cluster's fleet membership. In the future, references to other resource types might be allowed if admin clusters are modeled as their own resources.",
            "type": "string"
          },
          "adminClusterName": {
            "description": "Output only. The resource name of the VMware admin cluster hosting this user cluster.",
            "readOnly": true,
            "type": "string"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations on the VMware user cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.",
            "type": "object"
          },
          "antiAffinityGroups": {
            "$ref": "#/$defs/VmwareAAGConfig"
          },
          "authorization": {
            "$ref": "#/$defs/Authorization"
          },
          "autoRepairConfig": {
            "$ref": "#/$defs/VmwareAutoRepairConfig"
          },
          "binaryAuthorization": {
            "$ref": "#/$defs/BinaryAuthorization"
          },
          "controlPlaneNode": {
            "$ref": "#/$defs/VmwareControlPlaneNodeConfig"
          },
          "createTime": {
            "description": "Output only. The time at which VMware user cluster was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dataplaneV2": {
            "$ref": "#/$defs/VmwareDataplaneV2Config"
          },
          "deleteTime": {
            "description": "Output only. The time at which VMware user cluster was deleted.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "A human readable description of this VMware user cluster.",
            "type": "string"
          },
          "disableBundledIngress": {
            "description": "Disable bundled ingress.",
            "type": "boolean"
          },
          "enableControlPlaneV2": {
            "description": "Enable control plane V2. Default to false.",
            "type": "boolean"
          },
          "endpoint": {
            "description": "Output only. The DNS name of VMware user cluster's API server.",
            "readOnly": true,
            "type": "string"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.",
            "type": "string"
          },
          "fleet": {
            "$ref": "#/$defs/Fleet"
          },
          "loadBalancer": {
            "$ref": "#/$defs/VmwareLoadBalancerConfig"
          },
          "localName": {
            "description": "Output only. The object name of the VMware OnPremUserCluster custom resource on the associated admin cluster. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Immutable. The VMware user cluster resource name.",
            "type": "string"
          },
          "networkConfig": {
            "$ref": "#/$defs/VmwareNetworkConfig"
          },
          "onPremVersion": {
            "description": "Required. The Anthos clusters on the VMware version for your user cluster.",
            "type": "string"
          },
          "reconciling": {
            "description": "Output only. If set, there are currently changes in flight to the VMware user cluster.",
            "readOnly": true,
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The current state of VMware user cluster.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PROVISIONING",
              "RUNNING",
              "RECONCILING",
              "STOPPING",
              "ERROR",
              "DEGRADED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ResourceStatus"
          },
          "storage": {
            "$ref": "#/$defs/VmwareStorageConfig"
          },
          "uid": {
            "description": "Output only. The unique identifier of the VMware user cluster.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which VMware user cluster was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upgradePolicy": {
            "$ref": "#/$defs/VmwareClusterUpgradePolicy"
          },
          "validationCheck": {
            "$ref": "#/$defs/ValidationCheck"
          },
          "vcenter": {
            "$ref": "#/$defs/VmwareVCenterConfig"
          },
          "vmTrackingEnabled": {
            "description": "Enable VM tracking.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VmwareAAGConfig": {
        "description": "Specifies anti affinity group config for the VMware user cluster.",
        "properties": {
          "aagConfigDisabled": {
            "description": "Spread nodes across at least three physical hosts (requires at least three hosts). Enabled by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Authorization": {
        "description": "Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.",
        "properties": {
          "adminUsers": {
            "description": "For VMware and bare metal user clusters, users will be granted the cluster-admin role on the cluster, which provides full administrative access to the cluster. For bare metal admin clusters, users will be granted the cluster-view role, which limits users to read-only access.",
            "items": {
              "$ref": "#/$defs/ClusterUser"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClusterUser": {
        "description": "ClusterUser configures user principals for an RBAC policy.",
        "properties": {
          "username": {
            "description": "Required. The name of the user, e.g. `my-gcp-id@gmail.com`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareAutoRepairConfig": {
        "description": "Specifies config to enable/disable auto repair. The cluster-health-controller is deployed only if Enabled is true.",
        "properties": {
          "enabled": {
            "description": "Whether auto repair is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BinaryAuthorization": {
        "description": "Configuration for Binary Authorization.",
        "properties": {
          "evaluationMode": {
            "description": "Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.",
            "enum": [
              "EVALUATION_MODE_UNSPECIFIED",
              "DISABLED",
              "PROJECT_SINGLETON_POLICY_ENFORCE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareControlPlaneNodeConfig": {
        "description": "Specifies control plane node config for the VMware user cluster.",
        "properties": {
          "autoResizeConfig": {
            "$ref": "#/$defs/VmwareAutoResizeConfig"
          },
          "cpus": {
            "description": "The number of CPUs for each admin cluster node that serve as control planes for this VMware user cluster. (default: 4 CPUs)",
            "format": "int64",
            "type": "string"
          },
          "memory": {
            "description": "The megabytes of memory for each admin cluster node that serves as a control plane for this VMware user cluster (default: 8192 MB memory).",
            "format": "int64",
            "type": "string"
          },
          "replicas": {
            "description": "The number of control plane nodes for this VMware user cluster. (default: 1 replica).",
            "format": "int64",
            "type": "string"
          },
          "vsphereConfig": {
            "$ref": "#/$defs/VmwareControlPlaneVsphereConfig"
          }
        },
        "type": "object"
      },
      "VmwareAutoResizeConfig": {
        "description": "Represents auto resizing configurations for the VMware user cluster.",
        "properties": {
          "enabled": {
            "description": "Whether to enable controle plane node auto resizing.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VmwareControlPlaneVsphereConfig": {
        "description": "Specifies control plane node config.",
        "properties": {
          "datastore": {
            "description": "The Vsphere datastore used by the control plane Node.",
            "type": "string"
          },
          "storagePolicyName": {
            "description": "The Vsphere storage policy used by the control plane Node.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareDataplaneV2Config": {
        "description": "Contains configurations for Dataplane V2, which is optimized dataplane for Kubernetes networking. For more information, see: https://cloud.google.com/kubernetes-engine/docs/concepts/dataplane-v2",
        "properties": {
          "advancedNetworking": {
            "description": "Enable advanced networking which requires dataplane_v2_enabled to be set true.",
            "type": "boolean"
          },
          "dataplaneV2Enabled": {
            "description": "Enables Dataplane V2.",
            "type": "boolean"
          },
          "forwardMode": {
            "description": "Configure ForwardMode for Dataplane v2.",
            "type": "string"
          },
          "windowsDataplaneV2Enabled": {
            "description": "Enable Dataplane V2 for clusters with Windows nodes.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Fleet": {
        "description": "Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##",
        "properties": {
          "membership": {
            "description": "Output only. The name of the managed fleet Membership resource associated to this cluster. Membership names are formatted as `projects//locations//memberships/`.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareLoadBalancerConfig": {
        "description": "Specifies the locad balancer config for the VMware user cluster.",
        "properties": {
          "f5Config": {
            "$ref": "#/$defs/VmwareF5BigIpConfig"
          },
          "manualLbConfig": {
            "$ref": "#/$defs/VmwareManualLbConfig"
          },
          "metalLbConfig": {
            "$ref": "#/$defs/VmwareMetalLbConfig"
          },
          "seesawConfig": {
            "$ref": "#/$defs/VmwareSeesawConfig"
          },
          "vipConfig": {
            "$ref": "#/$defs/VmwareVipConfig"
          }
        },
        "type": "object"
      },
      "VmwareF5BigIpConfig": {
        "description": "Represents configuration parameters for an F5 BIG-IP load balancer.",
        "properties": {
          "address": {
            "description": "The load balancer's IP address.",
            "type": "string"
          },
          "partition": {
            "description": "The preexisting partition to be used by the load balancer. This partition is usually created for the admin cluster for example: 'my-f5-admin-partition'.",
            "type": "string"
          },
          "snatPool": {
            "description": "The pool name. Only necessary, if using SNAT.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareManualLbConfig": {
        "description": "Represents configuration parameters for an already existing manual load balancer. Given the nature of manual load balancers it is expected that said load balancer will be fully managed by users. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update ManualLB configurations it can only bind a pre-existing configuration to a new VMware user cluster.",
        "properties": {
          "controlPlaneNodePort": {
            "description": "NodePort for control plane service. The Kubernetes API server in the admin cluster is implemented as a Service of type NodePort (ex. 30968).",
            "format": "int32",
            "type": "integer"
          },
          "ingressHttpNodePort": {
            "description": "NodePort for ingress service's http. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 32527).",
            "format": "int32",
            "type": "integer"
          },
          "ingressHttpsNodePort": {
            "description": "NodePort for ingress service's https. The ingress service in the admin cluster is implemented as a Service of type NodePort (ex. 30139).",
            "format": "int32",
            "type": "integer"
          },
          "konnectivityServerNodePort": {
            "description": "NodePort for konnectivity server service running as a sidecar in each kube-apiserver pod (ex. 30564).",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VmwareMetalLbConfig": {
        "description": "Represents configuration parameters for the MetalLB load balancer.",
        "properties": {
          "addressPools": {
            "description": "Required. AddressPools is a list of non-overlapping IP pools used by load balancer typed services. All addresses must be routable to load balancer nodes. IngressVIP must be included in the pools.",
            "items": {
              "$ref": "#/$defs/VmwareAddressPool"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VmwareAddressPool": {
        "description": "Represents an IP pool used by the load balancer.",
        "properties": {
          "addresses": {
            "description": "Required. The addresses that are part of this pool. Each address must be either in the CIDR form (1.2.3.0/24) or range form (1.2.3.1-1.2.3.5).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "avoidBuggyIps": {
            "description": "If true, avoid using IPs ending in .0 or .255. This avoids buggy consumer devices mistakenly dropping IPv4 traffic for those special IP addresses.",
            "type": "boolean"
          },
          "manualAssign": {
            "description": "If true, prevent IP addresses from being automatically assigned.",
            "type": "boolean"
          },
          "pool": {
            "description": "Required. The name of the address pool.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareSeesawConfig": {
        "description": "VmwareSeesawConfig represents configuration parameters for an already existing Seesaw load balancer. IMPORTANT: Please note that the Anthos On-Prem API will not generate or update Seesaw configurations it can only bind a pre-existing configuration to a new user cluster. IMPORTANT: When attempting to create a user cluster with a pre-existing Seesaw load balancer you will need to follow some preparation steps before calling the 'CreateVmwareCluster' API method. First you will need to create the user cluster's namespace via kubectl. The namespace will need to use the following naming convention : -gke-onprem-mgmt or -gke-onprem-mgmt depending on whether you used the 'VmwareCluster.local_name' to disambiguate collisions; for more context see the documentation of 'VmwareCluster.local_name'. Once the namespace is created you will need to create a secret resource via kubectl. This secret will contain copies of your Seesaw credentials. The Secret must be called 'user-cluster-creds' and contain Seesaw's SSH and Cert credentials. The credentials must be keyed with the following names: 'seesaw-ssh-private-key', 'seesaw-ssh-public-key', 'seesaw-ssh-ca-key', 'seesaw-ssh-ca-cert'.",
        "properties": {
          "enableHa": {
            "description": "Enable two load balancer VMs to achieve a highly-available Seesaw load balancer.",
            "type": "boolean"
          },
          "group": {
            "description": "Required. In general the following format should be used for the Seesaw group name: seesaw-for-[cluster_name].",
            "type": "string"
          },
          "ipBlocks": {
            "description": "Required. The IP Blocks to be used by the Seesaw load balancer",
            "items": {
              "$ref": "#/$defs/VmwareIpBlock"
            },
            "type": "array"
          },
          "masterIp": {
            "description": "Required. MasterIP is the IP announced by the master of Seesaw group.",
            "type": "string"
          },
          "stackdriverName": {
            "description": "Name to be used by Stackdriver.",
            "type": "string"
          },
          "vms": {
            "description": "Names of the VMs created for this Seesaw group.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VmwareIpBlock": {
        "description": "Represents a collection of IP addresses to assign to nodes.",
        "properties": {
          "gateway": {
            "description": "The network gateway used by the VMware user cluster.",
            "type": "string"
          },
          "ips": {
            "description": "The node's network configurations used by the VMware user cluster.",
            "items": {
              "$ref": "#/$defs/VmwareHostIp"
            },
            "type": "array"
          },
          "netmask": {
            "description": "The netmask used by the VMware user cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareHostIp": {
        "description": "Represents VMware user cluster node's network configuration.",
        "properties": {
          "hostname": {
            "description": "Hostname of the machine. VM's name will be used if this field is empty.",
            "type": "string"
          },
          "ip": {
            "description": "IP could be an IP address (like 1.2.3.4) or a CIDR (like 1.2.3.0/24).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareVipConfig": {
        "description": "Specifies the VIP config for the VMware user cluster load balancer.",
        "properties": {
          "controlPlaneVip": {
            "description": "The VIP which you previously set aside for the Kubernetes API of this cluster.",
            "type": "string"
          },
          "ingressVip": {
            "description": "The VIP which you previously set aside for ingress traffic into this cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareNetworkConfig": {
        "description": "Specifies network config for the VMware user cluster.",
        "properties": {
          "controlPlaneV2Config": {
            "$ref": "#/$defs/VmwareControlPlaneV2Config"
          },
          "dhcpIpConfig": {
            "$ref": "#/$defs/VmwareDhcpIpConfig"
          },
          "hostConfig": {
            "$ref": "#/$defs/VmwareHostConfig"
          },
          "podAddressCidrBlocks": {
            "description": "Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serviceAddressCidrBlocks": {
            "description": "Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. Only a single range is supported. This field cannot be changed after creation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "staticIpConfig": {
            "$ref": "#/$defs/VmwareStaticIpConfig"
          },
          "vcenterNetwork": {
            "description": "vcenter_network specifies vCenter network name. Inherited from the admin cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareControlPlaneV2Config": {
        "description": "Specifies control plane V2 config.",
        "properties": {
          "controlPlaneIpBlock": {
            "$ref": "#/$defs/VmwareIpBlock"
          }
        },
        "type": "object"
      },
      "VmwareDhcpIpConfig": {
        "description": "Represents the network configuration required for the VMware user clusters with DHCP IP configurations.",
        "properties": {
          "enabled": {
            "description": "enabled is a flag to mark if DHCP IP allocation is used for VMware user clusters.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VmwareHostConfig": {
        "description": "Represents the common parameters for all the hosts irrespective of their IP address.",
        "properties": {
          "dnsSearchDomains": {
            "description": "DNS search domains.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dnsServers": {
            "description": "DNS servers.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ntpServers": {
            "description": "NTP servers.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VmwareStaticIpConfig": {
        "description": "Represents the network configuration required for the VMware user clusters with Static IP configurations.",
        "properties": {
          "ipBlocks": {
            "description": "Represents the configuration values for static IP allocation to nodes.",
            "items": {
              "$ref": "#/$defs/VmwareIpBlock"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceStatus": {
        "description": "ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).",
        "properties": {
          "conditions": {
            "description": "ResourceCondition provide a standard mechanism for higher-level status reporting from controller.",
            "items": {
              "$ref": "#/$defs/ResourceCondition"
            },
            "type": "array"
          },
          "errorMessage": {
            "description": "Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceCondition": {
        "description": "ResourceCondition provides a standard mechanism for higher-level status reporting from controller.",
        "properties": {
          "lastTransitionTime": {
            "description": "Last time the condition transit from one status to another.",
            "format": "google-datetime",
            "type": "string"
          },
          "message": {
            "description": "Human-readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "Machine-readable message indicating details about last transition.",
            "type": "string"
          },
          "state": {
            "description": "state of the condition.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_TRUE",
              "STATE_FALSE",
              "STATE_UNKNOWN"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareStorageConfig": {
        "description": "Specifies vSphere CSI components deployment config in the VMware user cluster.",
        "properties": {
          "vsphereCsiDisabled": {
            "description": "Whether or not to deploy vSphere CSI components in the VMware user cluster. Enabled by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VmwareClusterUpgradePolicy": {
        "description": "VmwareClusterUpgradePolicy defines the cluster upgrade policy.",
        "properties": {
          "controlPlaneOnly": {
            "description": "Controls whether the upgrade applies to the control plane only.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ValidationCheck": {
        "description": "ValidationCheck represents the result of preflight check.",
        "properties": {
          "option": {
            "description": "Options used for the validation check",
            "enum": [
              "OPTIONS_UNSPECIFIED",
              "SKIP_VALIDATION_CHECK_BLOCKING",
              "SKIP_VALIDATION_ALL"
            ],
            "type": "string"
          },
          "scenario": {
            "description": "Output only. The scenario when the preflight checks were run.",
            "enum": [
              "SCENARIO_UNSPECIFIED",
              "CREATE",
              "UPDATE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ValidationCheckStatus"
          }
        },
        "type": "object"
      },
      "ValidationCheckStatus": {
        "description": "ValidationCheckStatus defines the detailed validation check status.",
        "properties": {
          "result": {
            "description": "Individual checks which failed as part of the Preflight check execution.",
            "items": {
              "$ref": "#/$defs/ValidationCheckResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ValidationCheckResult": {
        "description": "ValidationCheckResult defines the details about the validation check.",
        "properties": {
          "category": {
            "description": "The category of the validation.",
            "type": "string"
          },
          "description": {
            "description": "The description of the validation check.",
            "type": "string"
          },
          "details": {
            "description": "Detailed failure information, which might be unformatted.",
            "type": "string"
          },
          "reason": {
            "description": "A human-readable message of the check failure.",
            "type": "string"
          },
          "state": {
            "description": "The validation check state.",
            "enum": [
              "STATE_UNKNOWN",
              "STATE_FAILURE",
              "STATE_SKIPPED",
              "STATE_FATAL",
              "STATE_WARNING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareVCenterConfig": {
        "description": "Represents configuration for the VMware VCenter for the user cluster.",
        "properties": {
          "address": {
            "description": "Output only. The vCenter IP address.",
            "readOnly": true,
            "type": "string"
          },
          "caCertData": {
            "description": "Contains the vCenter CA certificate public key for SSL verification.",
            "type": "string"
          },
          "cluster": {
            "description": "The name of the vCenter cluster for the user cluster.",
            "type": "string"
          },
          "datacenter": {
            "description": "The name of the vCenter datacenter for the user cluster.",
            "type": "string"
          },
          "datastore": {
            "description": "The name of the vCenter datastore for the user cluster.",
            "type": "string"
          },
          "folder": {
            "description": "The name of the vCenter folder for the user cluster.",
            "type": "string"
          },
          "resourcePool": {
            "description": "The name of the vCenter resource pool for the user cluster.",
            "type": "string"
          },
          "storagePolicyName": {
            "description": "The name of the vCenter storage policy for the user cluster.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://gkeonprem.googleapis.com//v1/{parent}/vmwareClusters{?validateOnly,vmwareClusterId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
