{
  "name": "gkeonprem_projects_locations_bareMetalAdminClusters_create",
  "description": "Creates a new bare metal admin cluster in a given project and location. The API needs to be combined with creating a bootstrap cluster to work. See: https://cloud.google.com/anthos/clusters/docs/bare-metal/latest/installing/creating-clusters/create-admin-cluster-api#prepare_bootstrap_environment",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent of the project and location where the cluster is created in. Format: \"projects/{project}/locations/{location}\""
      },
      "bareMetalAdminClusterId": {
        "type": "string",
        "description": "Required. User provided identifier that is used as part of the resource name; must conform to RFC-1034 and additionally restrict to lower-cased letters. This comes out roughly to: /^a-z+[a-z0-9]$/"
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Validate the request without actually doing any updates."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BareMetalAdminCluster"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "BareMetalAdminCluster": {
        "description": "Resource that represents a bare metal admin cluster.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations on the bare metal admin cluster. This field has the same restrictions as Kubernetes annotations. The total size of all keys and values combined is limited to 256k. Key can have 2 segments: prefix (optional) and name (required), separated by a slash (/). Prefix must be a DNS subdomain. Name must be 63 characters or less, begin and end with alphanumerics, with dashes (-), underscores (_), dots (.), and alphanumerics between.",
            "type": "object"
          },
          "bareMetalVersion": {
            "description": "The Anthos clusters on bare metal version for the bare metal admin cluster.",
            "type": "string"
          },
          "binaryAuthorization": {
            "$ref": "#/$defs/BinaryAuthorization"
          },
          "clusterOperations": {
            "$ref": "#/$defs/BareMetalAdminClusterOperationsConfig"
          },
          "controlPlane": {
            "$ref": "#/$defs/BareMetalAdminControlPlaneConfig"
          },
          "createTime": {
            "description": "Output only. The time at which this bare metal admin cluster was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. The time at which this bare metal admin cluster was deleted. If the resource is not deleted, this must be empty",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "A human readable description of this bare metal admin cluster.",
            "type": "string"
          },
          "endpoint": {
            "description": "Output only. The IP address name of bare metal admin cluster's API server.",
            "readOnly": true,
            "type": "string"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Allows clients to perform consistent read-modify-writes through optimistic concurrency control.",
            "type": "string"
          },
          "fleet": {
            "$ref": "#/$defs/Fleet"
          },
          "loadBalancer": {
            "$ref": "#/$defs/BareMetalAdminLoadBalancerConfig"
          },
          "localName": {
            "description": "Output only. The object name of the bare metal cluster custom resource. This field is used to support conflicting names when enrolling existing clusters to the API. When used as a part of cluster enrollment, this field will differ from the ID in the resource name. For new clusters, this field will match the user provided cluster name and be visible in the last component of the resource name. It is not modifiable. All users should use this name to access their cluster using gkectl or kubectl and should expect to see the local name when viewing admin cluster controller logs.",
            "readOnly": true,
            "type": "string"
          },
          "maintenanceConfig": {
            "$ref": "#/$defs/BareMetalAdminMaintenanceConfig"
          },
          "maintenanceStatus": {
            "$ref": "#/$defs/BareMetalAdminMaintenanceStatus"
          },
          "name": {
            "description": "Immutable. The bare metal admin cluster resource name.",
            "type": "string"
          },
          "networkConfig": {
            "$ref": "#/$defs/BareMetalAdminNetworkConfig"
          },
          "nodeAccessConfig": {
            "$ref": "#/$defs/BareMetalAdminNodeAccessConfig"
          },
          "nodeConfig": {
            "$ref": "#/$defs/BareMetalAdminWorkloadNodeConfig"
          },
          "osEnvironmentConfig": {
            "$ref": "#/$defs/BareMetalAdminOsEnvironmentConfig"
          },
          "proxy": {
            "$ref": "#/$defs/BareMetalAdminProxyConfig"
          },
          "reconciling": {
            "description": "Output only. If set, there are currently changes in flight to the bare metal Admin Cluster.",
            "readOnly": true,
            "type": "boolean"
          },
          "securityConfig": {
            "$ref": "#/$defs/BareMetalAdminSecurityConfig"
          },
          "state": {
            "description": "Output only. The current state of the bare metal admin cluster.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PROVISIONING",
              "RUNNING",
              "RECONCILING",
              "STOPPING",
              "ERROR",
              "DEGRADED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ResourceStatus"
          },
          "storage": {
            "$ref": "#/$defs/BareMetalAdminStorageConfig"
          },
          "uid": {
            "description": "Output only. The unique identifier of the bare metal admin cluster.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which this bare metal admin cluster was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "validationCheck": {
            "$ref": "#/$defs/ValidationCheck"
          }
        },
        "type": "object"
      },
      "BinaryAuthorization": {
        "description": "Configuration for Binary Authorization.",
        "properties": {
          "evaluationMode": {
            "description": "Mode of operation for binauthz policy evaluation. If unspecified, defaults to DISABLED.",
            "enum": [
              "EVALUATION_MODE_UNSPECIFIED",
              "DISABLED",
              "PROJECT_SINGLETON_POLICY_ENFORCE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminClusterOperationsConfig": {
        "description": "BareMetalAdminClusterOperationsConfig specifies the admin cluster's observability infrastructure.",
        "properties": {
          "enableApplicationLogs": {
            "description": "Whether collection of application logs/metrics should be enabled (in addition to system logs/metrics).",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BareMetalAdminControlPlaneConfig": {
        "description": "BareMetalAdminControlPlaneConfig specifies the control plane configuration.",
        "properties": {
          "apiServerArgs": {
            "description": "Customizes the default API server args. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/",
            "items": {
              "$ref": "#/$defs/BareMetalAdminApiServerArgument"
            },
            "type": "array"
          },
          "controlPlaneNodePoolConfig": {
            "$ref": "#/$defs/BareMetalAdminControlPlaneNodePoolConfig"
          }
        },
        "type": "object"
      },
      "BareMetalAdminApiServerArgument": {
        "description": "BareMetalAdminApiServerArgument represents an arg name->value pair. Only a subset of customized flags are supported. Please refer to the API server documentation below to know the exact format: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/",
        "properties": {
          "argument": {
            "description": "Required. The argument name as it appears on the API Server command line please make sure to remove the leading dashes.",
            "type": "string"
          },
          "value": {
            "description": "Required. The value of the arg as it will be passed to the API Server command line.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminControlPlaneNodePoolConfig": {
        "description": "BareMetalAdminControlPlaneNodePoolConfig specifies the control plane node pool configuration. We have a control plane specific node pool config so that we can flexible about supporting control plane specific fields in the future.",
        "properties": {
          "nodePoolConfig": {
            "$ref": "#/$defs/BareMetalNodePoolConfig"
          }
        },
        "type": "object"
      },
      "BareMetalNodePoolConfig": {
        "description": "BareMetalNodePoolConfig describes the configuration of all nodes within a given bare metal node pool.",
        "properties": {
          "kubeletConfig": {
            "$ref": "#/$defs/BareMetalKubeletConfig"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels assigned to nodes of this node pool. An object containing a list of key/value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.",
            "type": "object"
          },
          "nodeConfigs": {
            "description": "Required. The list of machine addresses in the bare metal node pool.",
            "items": {
              "$ref": "#/$defs/BareMetalNodeConfig"
            },
            "type": "array"
          },
          "operatingSystem": {
            "description": "Specifies the nodes operating system (default: LINUX).",
            "enum": [
              "OPERATING_SYSTEM_UNSPECIFIED",
              "LINUX"
            ],
            "type": "string"
          },
          "taints": {
            "description": "The initial taints assigned to nodes of this node pool.",
            "items": {
              "$ref": "#/$defs/NodeTaint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BareMetalKubeletConfig": {
        "description": "KubeletConfig defines the modifiable kubelet configurations for bare metal machines. Note: this list includes fields supported in GKE (see https://cloud.google.com/kubernetes-engine/docs/how-to/node-system-config#kubelet-options).",
        "properties": {
          "registryBurst": {
            "description": "The maximum size of bursty pulls, temporarily allows pulls to burst to this number, while still not exceeding registry_pull_qps. The value must not be a negative number. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 10.",
            "format": "int32",
            "type": "integer"
          },
          "registryPullQps": {
            "description": "The limit of registry pulls per second. Setting this value to 0 means no limit. Updating this field may impact scalability by changing the amount of traffic produced by image pulls. Defaults to 5.",
            "format": "int32",
            "type": "integer"
          },
          "serializeImagePullsDisabled": {
            "description": "Prevents the Kubelet from pulling multiple images at a time. We recommend *not* changing the default value on nodes that run docker daemon with version < 1.9 or an Another Union File System (Aufs) storage backend. Issue https://github.com/kubernetes/kubernetes/issues/10959 has more details.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BareMetalNodeConfig": {
        "description": "BareMetalNodeConfig lists machine addresses to access Nodes.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels assigned to this node. An object containing a list of key/value pairs. The labels here, unioned with the labels set on BareMetalNodePoolConfig are the set of labels that will be applied to the node. If there are any conflicts, the BareMetalNodeConfig labels take precedence. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.",
            "type": "object"
          },
          "nodeIp": {
            "description": "The default IPv4 address for SSH access and Kubernetes node. Example: 192.168.0.1",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeTaint": {
        "description": "NodeTaint applied to every Kubernetes node in a node pool. Kubernetes taints can be used together with tolerations to control how workloads are scheduled to your nodes. Node taints are permanent.",
        "properties": {
          "effect": {
            "description": "The taint effect.",
            "enum": [
              "EFFECT_UNSPECIFIED",
              "NO_SCHEDULE",
              "PREFER_NO_SCHEDULE",
              "NO_EXECUTE"
            ],
            "type": "string"
          },
          "key": {
            "description": "Key associated with the effect.",
            "type": "string"
          },
          "value": {
            "description": "Value associated with the effect.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Fleet": {
        "description": "Fleet related configuration. Fleets are a Google Cloud concept for logically organizing clusters, letting you use and manage multi-cluster capabilities and apply consistent policies across your systems. See [Anthos Fleets](`https://cloud.google.com/anthos/multicluster-management/fleets`) for more details on Anthos multi-cluster capabilities using Fleets. ##",
        "properties": {
          "membership": {
            "description": "Output only. The name of the managed fleet Membership resource associated to this cluster. Membership names are formatted as `projects//locations//memberships/`.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminLoadBalancerConfig": {
        "description": "BareMetalAdminLoadBalancerConfig specifies the load balancer configuration.",
        "properties": {
          "manualLbConfig": {
            "$ref": "#/$defs/BareMetalAdminManualLbConfig"
          },
          "portConfig": {
            "$ref": "#/$defs/BareMetalAdminPortConfig"
          },
          "vipConfig": {
            "$ref": "#/$defs/BareMetalAdminVipConfig"
          }
        },
        "type": "object"
      },
      "BareMetalAdminManualLbConfig": {
        "description": "BareMetalAdminManualLbConfig represents configuration parameters for a manual load balancer.",
        "properties": {
          "enabled": {
            "description": "Whether manual load balancing is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BareMetalAdminPortConfig": {
        "description": "BareMetalAdminPortConfig is the specification of load balancer ports.",
        "properties": {
          "controlPlaneLoadBalancerPort": {
            "description": "The port that control plane hosted load balancers will listen on.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BareMetalAdminVipConfig": {
        "description": "BareMetalAdminVipConfig for bare metal load balancer configurations.",
        "properties": {
          "controlPlaneVip": {
            "description": "The VIP which you previously set aside for the Kubernetes API of this bare metal admin cluster.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminMaintenanceConfig": {
        "description": "BareMetalAdminMaintenanceConfig specifies configurations to put bare metal Admin cluster CRs nodes in and out of maintenance.",
        "properties": {
          "maintenanceAddressCidrBlocks": {
            "description": "Required. All IPv4 address from these ranges will be placed into maintenance mode. Nodes in maintenance mode will be cordoned and drained. When both of these are true, the \"baremetal.cluster.gke.io/maintenance\" annotation will be set on the node resource.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BareMetalAdminMaintenanceStatus": {
        "description": "BareMetalAdminMaintenanceStatus represents the maintenance status for bare metal Admin cluster CR's nodes.",
        "properties": {
          "machineDrainStatus": {
            "$ref": "#/$defs/BareMetalAdminMachineDrainStatus"
          }
        },
        "type": "object"
      },
      "BareMetalAdminMachineDrainStatus": {
        "description": "BareMetalAdminMachineDrainStatus represents the status of bare metal node machines that are undergoing drain operations.",
        "properties": {
          "drainedMachines": {
            "description": "The list of drained machines.",
            "items": {
              "$ref": "#/$defs/BareMetalAdminDrainedMachine"
            },
            "type": "array"
          },
          "drainingMachines": {
            "description": "The list of draning machines.",
            "items": {
              "$ref": "#/$defs/BareMetalAdminDrainingMachine"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BareMetalAdminDrainedMachine": {
        "description": "BareMetalAdminDrainedMachine represents the machines that are drained.",
        "properties": {
          "nodeIp": {
            "description": "Drained machine IP address.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminDrainingMachine": {
        "description": "BareMetalAdminDrainingMachine represents the machines that are currently draining.",
        "properties": {
          "nodeIp": {
            "description": "Draining machine IP address.",
            "type": "string"
          },
          "podCount": {
            "description": "The count of pods yet to drain.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BareMetalAdminNetworkConfig": {
        "description": "BareMetalAdminNetworkConfig specifies the cluster network configuration.",
        "properties": {
          "islandModeCidr": {
            "$ref": "#/$defs/BareMetalAdminIslandModeCidrConfig"
          }
        },
        "type": "object"
      },
      "BareMetalAdminIslandModeCidrConfig": {
        "description": "BareMetalAdminIslandModeCidrConfig specifies the cluster CIDR configuration while running in island mode.",
        "properties": {
          "podAddressCidrBlocks": {
            "description": "Required. All pods in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "serviceAddressCidrBlocks": {
            "description": "Required. All services in the cluster are assigned an RFC1918 IPv4 address from these ranges. This field cannot be changed after creation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BareMetalAdminNodeAccessConfig": {
        "description": "Specifies the node access related settings for the bare metal admin cluster.",
        "properties": {
          "loginUser": {
            "description": "Required. LoginUser is the user name used to access node machines. It defaults to \"root\" if not set.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminWorkloadNodeConfig": {
        "description": "BareMetalAdminWorkloadNodeConfig specifies the workload node configurations.",
        "properties": {
          "maxPodsPerNode": {
            "description": "The maximum number of pods a node can run. The size of the CIDR range assigned to the node will be derived from this parameter. By default 110 Pods are created per Node. Upper bound is 250 for both HA and non-HA admin cluster. Lower bound is 64 for non-HA admin cluster and 32 for HA admin cluster.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminOsEnvironmentConfig": {
        "description": "Specifies operating system operation settings for cluster provisioning.",
        "properties": {
          "packageRepoExcluded": {
            "description": "Whether the package repo should be added when initializing bare metal machines.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BareMetalAdminProxyConfig": {
        "description": "BareMetalAdminProxyConfig specifies the cluster proxy configuration.",
        "properties": {
          "noProxy": {
            "description": "A list of IPs, hostnames, and domains that should skip the proxy. Examples: [\"127.0.0.1\", \"example.com\", \".corp\", \"localhost\"].",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uri": {
            "description": "Required. Specifies the address of your proxy server. Examples: `http://domain` WARNING: Do not provide credentials in the format `http://(username:password@)domain` these will be rejected by the server.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminSecurityConfig": {
        "description": "Specifies the security related settings for the bare metal admin cluster.",
        "properties": {
          "authorization": {
            "$ref": "#/$defs/Authorization"
          }
        },
        "type": "object"
      },
      "Authorization": {
        "description": "Authorization defines the On-Prem cluster authorization configuration to bootstrap onto the admin cluster.",
        "properties": {
          "adminUsers": {
            "description": "For VMware and bare metal user clusters, users will be granted the cluster-admin role on the cluster, which provides full administrative access to the cluster. For bare metal admin clusters, users will be granted the cluster-view role, which limits users to read-only access.",
            "items": {
              "$ref": "#/$defs/ClusterUser"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ClusterUser": {
        "description": "ClusterUser configures user principals for an RBAC policy.",
        "properties": {
          "username": {
            "description": "Required. The name of the user, e.g. `my-gcp-id@gmail.com`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceStatus": {
        "description": "ResourceStatus describes why a cluster or node pool has a certain status. (e.g., ERROR or DEGRADED).",
        "properties": {
          "conditions": {
            "description": "ResourceCondition provide a standard mechanism for higher-level status reporting from controller.",
            "items": {
              "$ref": "#/$defs/ResourceCondition"
            },
            "type": "array"
          },
          "errorMessage": {
            "description": "Human-friendly representation of the error message from controller. The error message can be temporary as the controller controller creates a cluster or node pool. If the error message persists for a longer period of time, it can be used to surface error message to indicate real problems requiring user intervention.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceCondition": {
        "description": "ResourceCondition provides a standard mechanism for higher-level status reporting from controller.",
        "properties": {
          "lastTransitionTime": {
            "description": "Last time the condition transit from one status to another.",
            "format": "google-datetime",
            "type": "string"
          },
          "message": {
            "description": "Human-readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "Machine-readable message indicating details about last transition.",
            "type": "string"
          },
          "state": {
            "description": "state of the condition.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_TRUE",
              "STATE_FALSE",
              "STATE_UNKNOWN"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the condition. (e.g., ClusterRunning, NodePoolRunning or ServerSidePreflightReady)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalAdminStorageConfig": {
        "description": "BareMetalAdminStorageConfig specifies the cluster storage configuration.",
        "properties": {
          "lvpNodeMountsConfig": {
            "$ref": "#/$defs/BareMetalLvpConfig"
          },
          "lvpShareConfig": {
            "$ref": "#/$defs/BareMetalLvpShareConfig"
          }
        },
        "type": "object"
      },
      "BareMetalLvpConfig": {
        "description": "Specifies the configs for local persistent volumes (PVs).",
        "properties": {
          "path": {
            "description": "Required. The host machine path.",
            "type": "string"
          },
          "storageClass": {
            "description": "Required. The StorageClass name that PVs will be created with.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BareMetalLvpShareConfig": {
        "description": "Specifies the configs for local persistent volumes under a shared file system.",
        "properties": {
          "lvpConfig": {
            "$ref": "#/$defs/BareMetalLvpConfig"
          },
          "sharedPathPvCount": {
            "description": "The number of subdirectories to create under path.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ValidationCheck": {
        "description": "ValidationCheck represents the result of preflight check.",
        "properties": {
          "option": {
            "description": "Options used for the validation check",
            "enum": [
              "OPTIONS_UNSPECIFIED",
              "SKIP_VALIDATION_CHECK_BLOCKING",
              "SKIP_VALIDATION_ALL"
            ],
            "type": "string"
          },
          "scenario": {
            "description": "Output only. The scenario when the preflight checks were run.",
            "enum": [
              "SCENARIO_UNSPECIFIED",
              "CREATE",
              "UPDATE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ValidationCheckStatus"
          }
        },
        "type": "object"
      },
      "ValidationCheckStatus": {
        "description": "ValidationCheckStatus defines the detailed validation check status.",
        "properties": {
          "result": {
            "description": "Individual checks which failed as part of the Preflight check execution.",
            "items": {
              "$ref": "#/$defs/ValidationCheckResult"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ValidationCheckResult": {
        "description": "ValidationCheckResult defines the details about the validation check.",
        "properties": {
          "category": {
            "description": "The category of the validation.",
            "type": "string"
          },
          "description": {
            "description": "The description of the validation check.",
            "type": "string"
          },
          "details": {
            "description": "Detailed failure information, which might be unformatted.",
            "type": "string"
          },
          "reason": {
            "description": "A human-readable message of the check failure.",
            "type": "string"
          },
          "state": {
            "description": "The validation check state.",
            "enum": [
              "STATE_UNKNOWN",
              "STATE_FAILURE",
              "STATE_SKIPPED",
              "STATE_FATAL",
              "STATE_WARNING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://gkeonprem.googleapis.com//v1/{parent}/bareMetalAdminClusters{?bareMetalAdminClusterId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
