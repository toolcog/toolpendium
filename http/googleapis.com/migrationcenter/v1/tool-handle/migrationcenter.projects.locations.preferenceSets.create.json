{
  "name": "migrationcenter_projects_locations_preferenceSets_create",
  "description": "Creates a new preference set in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Value for parent."
      },
      "preferenceSetId": {
        "type": "string",
        "description": "Required. User specified ID for the preference set. It will become the last component of the preference set name. The ID must be unique within the project, must conform with RFC-1034, is restricted to lower-cased letters, and has a maximum length of 63 characters. The ID must match the regular expression `[a-z]([a-z0-9-]{0,61}[a-z0-9])?`."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/PreferenceSet"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "PreferenceSet": {
        "description": "The preferences that apply to all assets in a given context.",
        "properties": {
          "createTime": {
            "description": "Output only. The timestamp when the preference set was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "A description of the preference set.",
            "type": "string"
          },
          "displayName": {
            "description": "User-friendly display name. Maximum length is 63 characters.",
            "type": "string"
          },
          "name": {
            "description": "Output only. Name of the preference set.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp when the preference set was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "virtualMachinePreferences": {
            "$ref": "#/$defs/VirtualMachinePreferences"
          }
        },
        "type": "object"
      },
      "VirtualMachinePreferences": {
        "description": "VirtualMachinePreferences enables you to create sets of assumptions, for example, a geographical location and pricing track, for your migrated virtual machines. The set of preferences influence recommendations for migrating virtual machine assets.",
        "properties": {
          "commitmentPlan": {
            "description": "Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.",
            "enum": [
              "COMMITMENT_PLAN_UNSPECIFIED",
              "COMMITMENT_PLAN_NONE",
              "COMMITMENT_PLAN_ONE_YEAR",
              "COMMITMENT_PLAN_THREE_YEARS"
            ],
            "type": "string"
          },
          "computeEnginePreferences": {
            "$ref": "#/$defs/ComputeEnginePreferences"
          },
          "regionPreferences": {
            "$ref": "#/$defs/RegionPreferences"
          },
          "sizingOptimizationStrategy": {
            "description": "Sizing optimization strategy specifies the preferred strategy used when extrapolating usage data to calculate insights and recommendations for a virtual machine. If you are unsure which value to set, a moderate sizing optimization strategy is often a good value to start with.",
            "enum": [
              "SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED",
              "SIZING_OPTIMIZATION_STRATEGY_SAME_AS_SOURCE",
              "SIZING_OPTIMIZATION_STRATEGY_MODERATE",
              "SIZING_OPTIMIZATION_STRATEGY_AGGRESSIVE"
            ],
            "type": "string"
          },
          "soleTenancyPreferences": {
            "$ref": "#/$defs/SoleTenancyPreferences"
          },
          "targetProduct": {
            "description": "Target product for assets using this preference set. Specify either target product or business goal, but not both.",
            "enum": [
              "COMPUTE_MIGRATION_TARGET_PRODUCT_UNSPECIFIED",
              "COMPUTE_MIGRATION_TARGET_PRODUCT_COMPUTE_ENGINE",
              "COMPUTE_MIGRATION_TARGET_PRODUCT_VMWARE_ENGINE",
              "COMPUTE_MIGRATION_TARGET_PRODUCT_SOLE_TENANCY"
            ],
            "type": "string"
          },
          "vmwareEnginePreferences": {
            "$ref": "#/$defs/VmwareEnginePreferences"
          }
        },
        "type": "object"
      },
      "ComputeEnginePreferences": {
        "description": "The user preferences relating to Compute Engine target platform.",
        "properties": {
          "licenseType": {
            "description": "License type to consider when calculating costs for virtual machine insights and recommendations. If unspecified, costs are calculated based on the default licensing plan.",
            "enum": [
              "LICENSE_TYPE_UNSPECIFIED",
              "LICENSE_TYPE_DEFAULT",
              "LICENSE_TYPE_BRING_YOUR_OWN_LICENSE"
            ],
            "type": "string"
          },
          "machinePreferences": {
            "$ref": "#/$defs/MachinePreferences"
          },
          "persistentDiskType": {
            "description": "Persistent disk type to use. If unspecified (default), all types are considered, based on available usage data.",
            "enum": [
              "PERSISTENT_DISK_TYPE_UNSPECIFIED",
              "PERSISTENT_DISK_TYPE_STANDARD",
              "PERSISTENT_DISK_TYPE_BALANCED",
              "PERSISTENT_DISK_TYPE_SSD"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MachinePreferences": {
        "description": "The type of machines to consider when calculating virtual machine migration insights and recommendations. Not all machine types are available in all zones and regions.",
        "properties": {
          "allowedMachineSeries": {
            "description": "Compute Engine machine series to consider for insights and recommendations. If empty, no restriction is applied on the machine series.",
            "items": {
              "$ref": "#/$defs/MachineSeries"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MachineSeries": {
        "description": "A Compute Engine machine series.",
        "properties": {
          "code": {
            "description": "Code to identify a Compute Engine machine series. Consult https://cloud.google.com/compute/docs/machine-resource#machine_type_comparison for more details on the available series.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegionPreferences": {
        "description": "The user preferences relating to target regions.",
        "properties": {
          "preferredRegions": {
            "description": "A list of preferred regions, ordered by the most preferred region first. Set only valid Google Cloud region names. See https://cloud.google.com/compute/docs/regions-zones for available regions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SoleTenancyPreferences": {
        "description": "Preferences concerning Sole Tenancy nodes and VMs.",
        "properties": {
          "commitmentPlan": {
            "description": "Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.",
            "enum": [
              "COMMITMENT_PLAN_UNSPECIFIED",
              "ON_DEMAND",
              "COMMITMENT_1_YEAR",
              "COMMITMENT_3_YEAR"
            ],
            "type": "string"
          },
          "cpuOvercommitRatio": {
            "description": "CPU overcommit ratio. Acceptable values are between 1.0 and 2.0 inclusive.",
            "format": "double",
            "type": "number"
          },
          "hostMaintenancePolicy": {
            "description": "Sole Tenancy nodes maintenance policy.",
            "enum": [
              "HOST_MAINTENANCE_POLICY_UNSPECIFIED",
              "HOST_MAINTENANCE_POLICY_DEFAULT",
              "HOST_MAINTENANCE_POLICY_RESTART_IN_PLACE",
              "HOST_MAINTENANCE_POLICY_MIGRATE_WITHIN_NODE_GROUP"
            ],
            "type": "string"
          },
          "nodeTypes": {
            "description": "A list of sole tenant node types. An empty list means that all possible node types will be considered.",
            "items": {
              "$ref": "#/$defs/SoleTenantNodeType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SoleTenantNodeType": {
        "description": "A Sole Tenant node type.",
        "properties": {
          "nodeName": {
            "description": "Name of the Sole Tenant node. Consult https://cloud.google.com/compute/docs/nodes/sole-tenant-nodes",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VmwareEnginePreferences": {
        "description": "The user preferences relating to Google Cloud VMware Engine target platform.",
        "properties": {
          "commitmentPlan": {
            "description": "Commitment plan to consider when calculating costs for virtual machine insights and recommendations. If you are unsure which value to set, a 3 year commitment plan is often a good value to start with.",
            "enum": [
              "COMMITMENT_PLAN_UNSPECIFIED",
              "ON_DEMAND",
              "COMMITMENT_1_YEAR_MONTHLY_PAYMENTS",
              "COMMITMENT_3_YEAR_MONTHLY_PAYMENTS",
              "COMMITMENT_1_YEAR_UPFRONT_PAYMENT",
              "COMMITMENT_3_YEAR_UPFRONT_PAYMENT"
            ],
            "type": "string"
          },
          "cpuOvercommitRatio": {
            "description": "CPU overcommit ratio. Acceptable values are between 1.0 and 8.0, with 0.1 increment.",
            "format": "double",
            "type": "number"
          },
          "memoryOvercommitRatio": {
            "description": "Memory overcommit ratio. Acceptable values are 1.0, 1.25, 1.5, 1.75 and 2.0.",
            "format": "double",
            "type": "number"
          },
          "storageDeduplicationCompressionRatio": {
            "description": "The Deduplication and Compression ratio is based on the logical (Used Before) space required to store data before applying deduplication and compression, in relation to the physical (Used After) space required after applying deduplication and compression. Specifically, the ratio is the Used Before space divided by the Used After space. For example, if the Used Before space is 3 GB, but the physical Used After space is 1 GB, the deduplication and compression ratio is 3x. Acceptable values are between 1.0 and 4.0.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://migrationcenter.googleapis.com//v1/{parent}/preferenceSets{?preferenceSetId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
