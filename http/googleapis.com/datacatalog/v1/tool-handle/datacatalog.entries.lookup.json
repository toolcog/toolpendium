{
  "name": "datacatalog_entries_lookup",
  "description": "Gets an entry by its target resource name. The resource name comes from the source Google Cloud Platform service.",
  "parameters": {
    "type": "object",
    "properties": {
      "fullyQualifiedName": {
        "type": "string",
        "description": "[Fully Qualified Name (FQN)](https://cloud.google.com//data-catalog/docs/fully-qualified-names) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:{PROJECT_ID}.{LOCATION_ID}.{INSTANCE_ID}.{DATABASE_ID}.{TABLE_ID}`"
      },
      "linkedResource": {
        "type": "string",
        "description": "The full name of the Google Cloud Platform resource the Data Catalog entry represents. For more information, see [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). Full names are case-sensitive. For example: * `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` * `//pubsub.googleapis.com/projects/{PROJECT_ID}/topics/{TOPIC_ID}`"
      },
      "location": {
        "type": "string",
        "description": "Location where the lookup should be performed. Required to lookup entry that is not a part of `DPMS` or `DATAPLEX` `integrated_system` using its `fully_qualified_name`. Ignored in other cases."
      },
      "project": {
        "type": "string",
        "description": "Project where the lookup should be performed. Required to lookup entry that is not a part of `DPMS` or `DATAPLEX` `integrated_system` using its `fully_qualified_name`. Ignored in other cases."
      },
      "sqlResource": {
        "type": "string",
        "description": "The SQL name of the entry. SQL names are case-sensitive. Examples: * `pubsub.topic.{PROJECT_ID}.{TOPIC_ID}` * `pubsub.topic.{PROJECT_ID}.`\\``{TOPIC.ID.SEPARATED.WITH.DOTS}`\\` * `bigquery.table.{PROJECT_ID}.{DATASET_ID}.{TABLE_ID}` * `bigquery.dataset.{PROJECT_ID}.{DATASET_ID}` * `datacatalog.entry.{PROJECT_ID}.{LOCATION_ID}.{ENTRY_GROUP_ID}.{ENTRY_ID}` Identifiers (`*_ID`) should comply with the [Lexical structure in Standard SQL] (https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://datacatalog.googleapis.com//v1/entries:lookup{?fullyQualifiedName,linkedResource,location,project,sqlResource,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Entry metadata. A Data Catalog entry represents another resource in Google Cloud Platform (such as a BigQuery dataset or a Pub/Sub topic) or outside of it. You can use the `linked_resource` field in the entry resource to refer to the original resource ID of the source system. An entry resource contains resource details, for example, its schema. Additionally, you can attach flexible metadata to an entry in the form of a Tag.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**bigqueryDateShardedSpec**: Specification for a group of BigQuery tables with the `[prefix]YYYYMMDD` name pattern. For more information, see [Introduction to partitioned tables] (https://cloud.google.com/bigquery/docs/partitioned-tables#partitioning_versus_sharding).",
              {
                "$ul": [
                  "**dataset**: Output only. The Data Catalog resource name of the dataset entry the current table belongs to. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`.",
                  "**latestShardResource**: Output only. BigQuery resource name of the latest shard.",
                  "**shardCount**: Output only. Total number of shards.",
                  "**tablePrefix**: Output only. The table name prefix of the shards. The name of any given shard is `[table_prefix]YYYYMMDD`. For example, for the `MyTable20180101` shard, the `table_prefix` is `MyTable`."
                ]
              }
            ],
            [
              "**bigqueryTableSpec**: Describes a BigQuery table.",
              {
                "$ul": [
                  "**tableSourceType**: Output only. The table source type.",
                  [
                    "**tableSpec**: Normal BigQuery table specification.",
                    {
                      "$ul": [
                        "**groupedEntry**: Output only. If the table is date-sharded, that is, it matches the `[prefix]YYYYMMDD` name pattern, this field is the Data Catalog resource name of the date-sharded grouped entry. For example: `projects/{PROJECT_ID}/locations/{LOCATION}/entrygroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}`. Otherwise, `grouped_entry` is empty."
                      ]
                    }
                  ],
                  [
                    "**viewSpec**: Table view specification.",
                    {
                      "$ul": [
                        "**viewQuery**: Output only. The query that defines the table view."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**businessContext**: Business Context of the entry.",
              {
                "$ul": [
                  [
                    "**contacts**: Contact people for the entry.",
                    {
                      "$ul": [
                        "**people**: The list of contact people for the entry."
                      ]
                    }
                  ],
                  [
                    "**entryOverview**: Entry overview fields for rich text descriptions of entries.",
                    {
                      "$ul": [
                        "**overview**: Entry overview with support for rich text. The overview must only contain Unicode characters, and should be formatted using HTML. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**cloudBigtableSystemSpec**: Specification that applies to all entries that are part of `CLOUD_BIGTABLE` system (user_specified_type)",
              {
                "$ul": [
                  "**instanceDisplayName**: Display name of the Instance. This is user specified and different from the resource name."
                ]
              }
            ],
            [
              "**dataSource**: Physical location of an entry.",
              {
                "$ul": [
                  "**resource**: Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`",
                  "**service**: Service that physically stores the data.",
                  "**sourceEntry**: Output only. Data Catalog entry name, if applicable.",
                  [
                    "**storageProperties**: Details the properties of the underlying storage.",
                    {
                      "$ul": [
                        "**filePattern**: Patterns to identify a set of files for this fileset. Examples of a valid `file_pattern`: * `gs://bucket_name/dir/*`: matches all files in the `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in the `bucket_name/dir` and all subdirectories recursively * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt`",
                        "**fileType**: File type in MIME format, for example, `text/plain`."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**dataSourceConnectionSpec**: Specification that applies to a data source connection. Valid only for entries with the `DATA_SOURCE_CONNECTION` type. Only one of internal specs can be set at the time, and cannot be changed later.",
              {
                "$ul": [
                  [
                    "**bigqueryConnectionSpec**: Specification for the BigQuery connection.",
                    {
                      "$ul": [
                        [
                          "**cloudSql**: Specification for the BigQuery connection to a Cloud SQL instance.",
                          {
                            "$ul": [
                              "**database**: Database name.",
                              "**instanceId**: Cloud SQL instance ID in the format of `project:location:instance`.",
                              "**type**: Type of the Cloud SQL database."
                            ]
                          }
                        ],
                        "**connectionType**: The type of the BigQuery connection.",
                        "**hasCredential**: True if there are credentials attached to the BigQuery connection; false otherwise."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**databaseTableSpec**: Specification that applies to a table resource. Valid only for entries with the `TABLE` type.",
              {
                "$ul": [
                  [
                    "**databaseViewSpec**: Specification that applies to database view.",
                    {
                      "$ul": [
                        "**baseTable**: Name of a singular table this view reflects one to one.",
                        "**sqlQuery**: SQL query used to generate this view.",
                        "**viewType**: Type of this view."
                      ]
                    }
                  ],
                  [
                    "**dataplexTable**: Entry specification for a Dataplex table.",
                    {
                      "$ul": [
                        [
                          "**dataplexSpec**: Common Dataplex fields.",
                          {
                            "$ul": [
                              "**asset**: Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.",
                              "**compressionFormat**: Compression format of the data, e.g., zip, gzip etc.",
                              [
                                "**dataFormat**: Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.",
                                {
                                  "$ul": [
                                    [
                                      "**avro**: Schema in Avro JSON format.",
                                      {
                                        "$ul": [
                                          "**text**: JSON source of the Avro schema."
                                        ]
                                      }
                                    ],
                                    "**csv**: Marks a CSV-encoded data source.",
                                    "**orc**: Marks an ORC-encoded data source.",
                                    "**parquet**: Marks a Parquet-encoded data source.",
                                    [
                                      "**protobuf**: Schema in protocol buffer format.",
                                      {
                                        "$ul": [
                                          "**text**: Protocol buffer source of the schema."
                                        ]
                                      }
                                    ],
                                    [
                                      "**thrift**: Schema in Thrift format.",
                                      {
                                        "$ul": [
                                          "**text**: Thrift IDL source of the schema."
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "**projectId**: Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset."
                            ]
                          }
                        ],
                        "**externalTables**: List of external tables registered by Dataplex in other systems based on the same underlying data. External tables allow to query this data in those systems.",
                        "**userManaged**: Indicates if the table schema is managed by the user or not."
                      ]
                    }
                  ],
                  "**type**: Type of this table."
                ]
              }
            ],
            [
              "**datasetSpec**: Specification that applies to a dataset. Valid only for entries with the `DATASET` type.",
              {
                "$ul": [
                  [
                    "**vertexDatasetSpec**: Specification for vertex dataset resources.",
                    {
                      "$ul": [
                        "**dataItemCount**: The number of DataItems in this Dataset. Only apply for non-structured Dataset.",
                        "**dataType**: Type of the dataset."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**description**: Entry description that can consist of several sentences or paragraphs that describe entry contents. The description must not contain Unicode non-characters as well as C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF). The maximum size is 2000 bytes when encoded in UTF-8. Default value is an empty string.",
            "**displayName**: Display name of an entry. The maximum size is 500 bytes when encoded in UTF-8. Default value is an empty string.",
            [
              "**featureOnlineStoreSpec**: Detail description of the source information of a Vertex Feature Online Store.",
              {
                "$ul": [
                  "**storageType**: Output only. Type of underelaying storage for the FeatureOnlineStore."
                ]
              }
            ],
            [
              "**filesetSpec**: Specification that applies to a fileset. Valid only for entries with the 'FILESET' type.",
              {
                "$ul": [
                  [
                    "**dataplexFileset**: Entry specyfication for a Dataplex fileset.",
                    {
                      "$ul": [
                        [
                          "**dataplexSpec**: Common Dataplex fields.",
                          {
                            "$ul": [
                              "**asset**: Fully qualified resource name of an asset in Dataplex, to which the underlying data source (Cloud Storage bucket or BigQuery dataset) of the entity is attached.",
                              "**compressionFormat**: Compression format of the data, e.g., zip, gzip etc.",
                              [
                                "**dataFormat**: Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.",
                                {
                                  "$ul": [
                                    [
                                      "**avro**: Schema in Avro JSON format.",
                                      {
                                        "$ul": [
                                          "**text**: JSON source of the Avro schema."
                                        ]
                                      }
                                    ],
                                    "**csv**: Marks a CSV-encoded data source.",
                                    "**orc**: Marks an ORC-encoded data source.",
                                    "**parquet**: Marks a Parquet-encoded data source.",
                                    [
                                      "**protobuf**: Schema in protocol buffer format.",
                                      {
                                        "$ul": [
                                          "**text**: Protocol buffer source of the schema."
                                        ]
                                      }
                                    ],
                                    [
                                      "**thrift**: Schema in Thrift format.",
                                      {
                                        "$ul": [
                                          "**text**: Thrift IDL source of the schema."
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "**projectId**: Project ID of the underlying Cloud Storage or BigQuery data. Note that this may not be the same project as the correspondingly Dataplex lake / zone / asset."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**fullyQualifiedName**: [Fully Qualified Name (FQN)](https://cloud.google.com//data-catalog/docs/fully-qualified-names) of the resource. Set automatically for entries representing resources from synced systems. Settable only during creation, and read-only later. Can be used for search and lookup of the entries. ",
            [
              "**gcsFilesetSpec**: Describes a Cloud Storage fileset entry.",
              {
                "$ul": [
                  "**filePatterns**: Required. Patterns to identify a set of files in Google Cloud Storage. For more information, see [Wildcard Names] (https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames). Note: Currently, bucket wildcards are not supported. Examples of valid `file_patterns`: * `gs://bucket_name/dir/*`: matches all files in `bucket_name/dir` directory * `gs://bucket_name/dir/**`: matches all files in `bucket_name/dir` and all subdirectories * `gs://bucket_name/file*`: matches files prefixed by `file` in `bucket_name` * `gs://bucket_name/??.txt`: matches files with two characters followed by `.txt` in `bucket_name` * `gs://bucket_name/[aeiou].txt`: matches files that contain a single vowel character followed by `.txt` in `bucket_name` * `gs://bucket_name/[a-m].txt`: matches files that contain `a`, `b`, ... or `m` followed by `.txt` in `bucket_name` * `gs://bucket_name/a/*/b`: matches all files in `bucket_name` that match the `a/*/b` pattern, such as `a/c/b`, `a/d/b` * `gs://another_bucket/a.txt`: matches `gs://another_bucket/a.txt` You can combine wildcards to match complex sets of files, for example: `gs://bucket_name/[a-m]??.j*g`",
                  "**sampleGcsFileSpecs**: Output only. Sample files contained in this fileset, not all files contained in this fileset are represented here."
                ]
              }
            ],
            "**integratedSystem**: Output only. Indicates the entry's source system that Data Catalog integrates with, such as BigQuery, Pub/Sub, or Dataproc Metastore.",
            "**labels**: Cloud labels attached to the entry. In Data Catalog, you can create and modify labels attached only to custom entries. Synced entries have unmodifiable labels that come from the source system.",
            "**linkedResource**: The resource this metadata entry refers to. For Google Cloud Platform resources, `linked_resource` is the [Full Resource Name] (https://cloud.google.com/apis/design/resource_names#full_resource_name). For example, the `linked_resource` for a table resource from BigQuery is: `//bigquery.googleapis.com/projects/{PROJECT_ID}/datasets/{DATASET_ID}/tables/{TABLE_ID}` Output only when the entry is one of the types in the `EntryType` enum. For entries with a `user_specified_type`, this field is optional and defaults to an empty string. The resource string must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), periods (.), colons (:), slashes (/), dashes (-), and hashes (#). The maximum size is 200 bytes when encoded in UTF-8.",
            [
              "**lookerSystemSpec**: Specification that applies to entries that are part `LOOKER` system (user_specified_type)",
              {
                "$ul": [
                  "**parentInstanceDisplayName**: Name of the parent Looker Instance. Empty if it does not exist.",
                  "**parentInstanceId**: ID of the parent Looker Instance. Empty if it does not exist. Example value: `someinstance.looker.com`",
                  "**parentModelDisplayName**: Name of the parent Model. Empty if it does not exist.",
                  "**parentModelId**: ID of the parent Model. Empty if it does not exist.",
                  "**parentViewDisplayName**: Name of the parent View. Empty if it does not exist.",
                  "**parentViewId**: ID of the parent View. Empty if it does not exist."
                ]
              }
            ],
            [
              "**modelSpec**: Specification that applies to a model. Valid only for entries with the `MODEL` type.",
              {
                "$ul": [
                  [
                    "**vertexModelSpec**: Specification for vertex model resources.",
                    {
                      "$ul": [
                        "**containerImageUri**: URI of the Docker image to be used as the custom container for serving predictions.",
                        "**versionAliases**: User provided version aliases so that a model version can be referenced via alias",
                        "**versionDescription**: The description of this version.",
                        "**versionId**: The version ID of the model.",
                        [
                          "**vertexModelSourceInfo**: Detail description of the source information of a Vertex model.",
                          {
                            "$ul": [
                              "**copy**: If this Model is copy of another Model. If true then source_type pertains to the original.",
                              "**sourceType**: Type of the model source."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**name**: Output only. The resource name of an entry in URL format. Note: The entry itself and its child resources might not be stored in the location specified in its name.",
            [
              "**personalDetails**: Entry metadata relevant only to the user and private to them.",
              {
                "$ul": [
                  "**starTime**: Set if the entry is starred; unset otherwise.",
                  "**starred**: True if the entry is starred by the user; false otherwise."
                ]
              }
            ],
            [
              "**routineSpec**: Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.",
              {
                "$ul": [
                  [
                    "**bigqueryRoutineSpec**: Fields specific for BigQuery routines.",
                    {
                      "$ul": [
                        "**importedLibraries**: Paths of the imported libraries."
                      ]
                    }
                  ],
                  "**definitionBody**: The body of the routine.",
                  "**language**: The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`",
                  "**returnType**: Return type of the argument. The exact value depends on the source system and the language.",
                  "**routineArguments**: Arguments of the routine.",
                  "**routineType**: The type of the routine."
                ]
              }
            ],
            [
              "**schema**: Represents a schema, for example, a BigQuery, GoogleSQL, or Avro schema.",
              {
                "$ul": [
                  "**columns**: The unified GoogleSQL-like schema of columns. The overall maximum number of columns and nested columns is 10,000. The maximum nested depth is 15 levels."
                ]
              }
            ],
            [
              "**serviceSpec**: Specification that applies to a Service resource. Valid only for entries with the `SERVICE` type.",
              {
                "$ul": [
                  [
                    "**cloudBigtableInstanceSpec**: Specification that applies to Instance entries that are part of `CLOUD_BIGTABLE` system. (user_specified_type)",
                    {
                      "$ul": [
                        "**cloudBigtableClusterSpecs**: The list of clusters for the Instance."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**sourceSystemTimestamps**: Timestamps associated with this resource in a particular system.",
              {
                "$ul": [
                  "**createTime**: Creation timestamp of the resource within the given system.",
                  "**expireTime**: Output only. Expiration timestamp of the resource within the given system. Currently only applicable to BigQuery resources.",
                  "**updateTime**: Timestamp of the last modification of the resource or its metadata within a given system. Note: Depending on the source system, not every modification updates this timestamp. For example, BigQuery timestamps every metadata modification but not data or permission changes."
                ]
              }
            ],
            [
              "**sqlDatabaseSystemSpec**: Specification that applies to entries that are part `SQL_DATABASE` system (user_specified_type)",
              {
                "$ul": [
                  "**databaseVersion**: Version of the database engine.",
                  "**instanceHost**: Host of the SQL database enum InstanceHost { UNDEFINED = 0; SELF_HOSTED = 1; CLOUD_SQL = 2; AMAZON_RDS = 3; AZURE_SQL = 4; } Host of the enclousing database instance.",
                  "**sqlEngine**: SQL Database Engine. enum SqlEngine { UNDEFINED = 0; MY_SQL = 1; POSTGRE_SQL = 2; SQL_SERVER = 3; } Engine of the enclosing database instance."
                ]
              }
            ],
            "**type**: The type of the entry. For details, see [`EntryType`](#entrytype).",
            [
              "**usageSignal**: The set of all usage signals that Data Catalog stores. Note: Usually, these signals are updated daily. In rare cases, an update may fail but will be performed again on the next day.",
              {
                "$ul": [
                  "**commonUsageWithinTimeRange**: Common usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\", \"Lifetime\"}`.",
                  "**favoriteCount**: Favorite count in the source system.",
                  "**updateTime**: The end timestamp of the duration of usage statistics.",
                  "**usageWithinTimeRange**: Output only. BigQuery usage statistics over each of the predefined time ranges. Supported time ranges are `{\"24H\", \"7D\", \"30D\"}`."
                ]
              }
            ],
            "**userSpecifiedSystem**: Indicates the entry's source system that Data Catalog doesn't automatically integrate with. The `user_specified_system` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long.",
            "**userSpecifiedType**: Custom entry type that doesn't match any of the values allowed for input and listed in the `EntryType` enum. When creating an entry, first check the type values in the enum. If there are no appropriate types for the new entry, provide a custom value, for example, `my_special_type`. The `user_specified_type` string has the following limitations: * Is case insensitive. * Must begin with a letter or underscore. * Can only contain letters, numbers, and underscores. * Must be at least 1 character and at most 64 characters long."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
