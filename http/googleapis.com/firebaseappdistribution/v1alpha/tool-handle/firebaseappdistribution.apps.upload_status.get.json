{
  "name": "firebaseappdistribution_apps_upload_status_get",
  "description": "GET Binary upload status by token",
  "parameters": {
    "type": "object",
    "properties": {
      "mobilesdkAppId": {
        "type": "string",
        "description": "Unique id for a Firebase app of the format: {version}:{project_number}:{platform}:{hash(bundle_id)} Example: 1:581234567376:android:aa0a3c7b135e90289"
      },
      "uploadToken": {
        "type": "string",
        "description": "The token for the upload"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "mobilesdkAppId",
      "uploadToken"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://firebaseappdistribution.googleapis.com//v1alpha/apps/{mobilesdkAppId}/upload_status/{uploadToken}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**errorCode**: The error code associated with (only set on \"FAILURE\")",
            "**message**: Any additional context for the given upload status (e.g. error message) Meant to be displayed to the client",
            [
              "**release**: Proto defining a release object",
              {
                "$ul": [
                  "**buildVersion**: Release build version",
                  "**displayVersion**: Release version",
                  "**distributedAt**: Timestamp when the release was created",
                  "**id**: Release Id",
                  "**instanceId**: Instance id of the release",
                  "**lastActivityAt**: Last activity timestamp",
                  "**openInvitationCount**: Number of testers who have open invitations for the release",
                  "**receivedAt**: unused. ",
                  "**releaseNotesSummary**: Release notes summary",
                  "**testerCount**: Count of testers added to the release",
                  "**testerWithInstallCount**: Number of testers who have installed the release"
                ]
              }
            ],
            "**status**: The status of the upload"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
