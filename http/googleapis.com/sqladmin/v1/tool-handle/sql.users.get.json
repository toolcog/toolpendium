{
  "name": "sql_users_get",
  "description": "Retrieves a resource containing information about a user.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Project ID of the project that contains the instance."
      },
      "instance": {
        "type": "string",
        "description": "Database instance ID. This does not include the project ID."
      },
      "name": {
        "type": "string",
        "description": "User of the instance."
      },
      "host": {
        "type": "string",
        "description": "Host of a user of the instance."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "project",
      "instance",
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://sqladmin.googleapis.com//v1/projects/{project}/instances/{instance}/users/{name}{?host,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Cloud SQL user resource.",
        "**Key properties:**",
        {
          "$ul": [
            "**dualPasswordType**: Dual password status for the user.",
            "**etag**: This field is deprecated and will be removed from a future version of the API.",
            "**host**: Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.",
            "**instance**: The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for `update` because it is already specified on the URL.",
            "**kind**: This is always `sql#user`.",
            "**name**: The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.",
            "**password**: The password for the user.",
            [
              "**passwordPolicy**: User level password validation policy.",
              {
                "$ul": [
                  "**allowedFailedAttempts**: Number of failed login attempts allowed before user get locked.",
                  "**enableFailedAttemptsCheck**: If true, failed login attempts check will be enabled.",
                  "**enablePasswordVerification**: If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.",
                  "**passwordExpirationDuration**: Expiration duration after password is updated.",
                  [
                    "**status**: Read-only password status.",
                    {
                      "$ul": [
                        "**locked**: If true, user does not have login privileges.",
                        "**passwordExpirationTime**: The expiration time of the current password."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**project**: The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for `update` because it is already specified on the URL.",
            [
              "**sqlserverUserDetails**: Represents a Sql Server user on the Cloud SQL instance.",
              {
                "$ul": [
                  "**disabled**: If the user has been disabled",
                  "**serverRoles**: The server roles for this user"
                ]
              }
            ],
            "**type**: The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
