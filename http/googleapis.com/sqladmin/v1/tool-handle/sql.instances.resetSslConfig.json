{
  "name": "sql_instances_resetSslConfig",
  "description": "Deletes all client certificates and generates a new server SSL certificate for the instance.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Project ID of the project that contains the instance."
      },
      "instance": {
        "type": "string",
        "description": "Cloud SQL instance ID. This does not include the project ID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "project",
      "instance"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://sqladmin.googleapis.com//v1/projects/{project}/instances/{instance}/resetSslConfig{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**apiWarning**: An Admin API warning message.",
              {
                "$ul": [
                  "**code**: Code to uniquely identify the warning type.",
                  "**message**: The warning message.",
                  "**region**: The region name for REGION_UNREACHABLE warning."
                ]
              }
            ],
            [
              "**backupContext**: Backup context.",
              {
                "$ul": [
                  "**backupId**: The identifier of the backup.",
                  "**kind**: This is always `sql#backupContext`."
                ]
              }
            ],
            "**endTime**: The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.",
            [
              "**error**: Database instance operation errors list wrapper.",
              {
                "$ul": [
                  "**errors**: The list of errors encountered while processing this operation.",
                  "**kind**: This is always `sql#operationErrors`."
                ]
              }
            ],
            [
              "**exportContext**: Database instance export context.",
              {
                "$ul": [
                  [
                    "**bakExportOptions**: Options for exporting BAK files (SQL Server-only)",
                    {
                      "$ul": [
                        "**bakType**: Type of this bak file will be export, FULL or DIFF, SQL Server only",
                        "**copyOnly**: Deprecated: copy_only is deprecated. Use differential_base instead",
                        "**differentialBase**: Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base",
                        "**stripeCount**: Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.",
                        "**striped**: Whether or not the export should be striped."
                      ]
                    }
                  ],
                  [
                    "**csvExportOptions**: Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.",
                    {
                      "$ul": [
                        "**escapeCharacter**: Specifies the character that should appear before a data character that needs to be escaped.",
                        "**fieldsTerminatedBy**: Specifies the character that separates columns within each row (line) of the file.",
                        "**linesTerminatedBy**: This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.",
                        "**quoteCharacter**: Specifies the quoting character to be used when a data value is quoted.",
                        "**selectQuery**: The select query used to extract the data."
                      ]
                    }
                  ],
                  "**databases**: Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.",
                  "**fileType**: The file type for the specified uri.",
                  "**kind**: This is always `sql#exportContext`.",
                  "**offload**: Option for export offload.",
                  [
                    "**sqlExportOptions**: Options for exporting data as SQL statements.",
                    {
                      "$ul": [
                        [
                          "**mysqlExportOptions**: Options for exporting from MySQL.",
                          {
                            "$ul": [
                              "**masterData**: Option to include SQL statement required to set up replication. If set to `1`, the dump file includes a CHANGE MASTER TO statement with the binary log coordinates, and --set-gtid-purged is set to ON. If set to `2`, the CHANGE MASTER TO statement is written as a SQL comment and has no effect. If set to any value other than `1`, --set-gtid-purged is set to OFF."
                            ]
                          }
                        ],
                        "**parallel**: Optional. Whether or not the export should be parallel.",
                        "**schemaOnly**: Export only schemas.",
                        "**tables**: Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.",
                        "**threads**: Optional. The number of threads to use for parallel export."
                      ]
                    }
                  ],
                  "**uri**: The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed."
                ]
              }
            ],
            [
              "**importContext**: Database instance import context.",
              {
                "$ul": [
                  [
                    "**bakImportOptions**: Import parameters specific to SQL Server .BAK files",
                    {
                      "$ul": [
                        "**bakType**: Type of the bak content, FULL or DIFF",
                        [
                          "**encryptionOptions**",
                          {
                            "$ul": [
                              "**certPath**: Path to the Certificate (.cer) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.",
                              "**pvkPassword**: Password that encrypts the private key",
                              "**pvkPath**: Path to the Certificate Private Key (.pvk) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file."
                            ]
                          }
                        ],
                        "**noRecovery**: Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.",
                        "**recoveryOnly**: Whether or not the backup importing request will just bring database online without downloading Bak content only one of \"no_recovery\" and \"recovery_only\" can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.",
                        "**stopAt**: Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.",
                        "**stopAtMark**: Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.",
                        "**striped**: Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server."
                      ]
                    }
                  ],
                  [
                    "**csvImportOptions**: Options for importing data as CSV.",
                    {
                      "$ul": [
                        "**columns**: The columns to which CSV data is imported. If not specified, all columns of the database table are loaded with CSV data.",
                        "**escapeCharacter**: Specifies the character that should appear before a data character that needs to be escaped.",
                        "**fieldsTerminatedBy**: Specifies the character that separates columns within each row (line) of the file.",
                        "**linesTerminatedBy**: This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.",
                        "**quoteCharacter**: Specifies the quoting character to be used when a data value is quoted.",
                        "**table**: The table to which CSV data is imported."
                      ]
                    }
                  ],
                  "**database**: The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.",
                  "**fileType**: The file type for the specified uri.\\`SQL`: The file contains SQL statements. \\`CSV`: The file contains CSV data.",
                  "**importUser**: The PostgreSQL user for this import operation. PostgreSQL instances only.",
                  "**kind**: This is always `sql#importContext`.",
                  "**uri**: Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file."
                ]
              }
            ],
            "**insertTime**: The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.",
            "**kind**: This is always `sql#operation`.",
            "**name**: An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.",
            "**operationType**: The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`",
            "**selfLink**: The URI of this resource.",
            "**startTime**: The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.",
            "**status**: The status of an operation.",
            "**targetId**: Name of the database instance related to this operation.",
            "**targetLink**",
            "**targetProject**: The project ID of the target instance related to this operation.",
            "**user**: The email address of the user who initiated this operation."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
