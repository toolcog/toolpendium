{
  "name": "automl_projects_locations_datasets_tableSpecs_columnSpecs_patch",
  "description": "Updates a column spec.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`"
      },
      "updateMask": {
        "type": "string",
        "description": "The update mask applies to the resource."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ColumnSpec"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "ColumnSpec": {
        "description": "A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were given on import . Used by: * Tables",
        "properties": {
          "dataStats": {
            "$ref": "#/$defs/DataStats"
          },
          "dataType": {
            "$ref": "#/$defs/DataType"
          },
          "displayName": {
            "description": "Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.",
            "type": "string"
          },
          "etag": {
            "description": "Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
            "type": "string"
          },
          "name": {
            "description": "Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`",
            "type": "string"
          },
          "topCorrelatedColumns": {
            "description": "Deprecated.",
            "items": {
              "$ref": "#/$defs/CorrelatedColumn"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataStats": {
        "description": "The data statistics of a series of values that share the same DataType.",
        "properties": {
          "arrayStats": {
            "$ref": "#/$defs/ArrayStats"
          },
          "categoryStats": {
            "$ref": "#/$defs/CategoryStats"
          },
          "distinctValueCount": {
            "description": "The number of distinct values.",
            "format": "int64",
            "type": "string"
          },
          "float64Stats": {
            "$ref": "#/$defs/Float64Stats"
          },
          "nullValueCount": {
            "description": "The number of values that are null.",
            "format": "int64",
            "type": "string"
          },
          "stringStats": {
            "$ref": "#/$defs/StringStats"
          },
          "structStats": {
            "$ref": "#/$defs/StructStats"
          },
          "timestampStats": {
            "$ref": "#/$defs/TimestampStats"
          },
          "validValueCount": {
            "description": "The number of values that are valid.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArrayStats": {
        "description": "The data statistics of a series of ARRAY values.",
        "properties": {
          "memberStats": {
            "$ref": "#/$defs/DataStats"
          }
        },
        "type": "object"
      },
      "CategoryStats": {
        "description": "The data statistics of a series of CATEGORY values.",
        "properties": {
          "topCategoryStats": {
            "description": "The statistics of the top 20 CATEGORY values, ordered by count.",
            "items": {
              "$ref": "#/$defs/SingleCategoryStats"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SingleCategoryStats": {
        "description": "The statistics of a single CATEGORY value.",
        "properties": {
          "count": {
            "description": "The number of occurrences of this value in the series.",
            "format": "int64",
            "type": "string"
          },
          "value": {
            "description": "The CATEGORY value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Float64Stats": {
        "description": "The data statistics of a series of FLOAT64 values.",
        "properties": {
          "histogramBuckets": {
            "description": "Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `\"-Infinity\"`, and max of the last one being `\"Infinity\"`.",
            "items": {
              "$ref": "#/$defs/HistogramBucket"
            },
            "type": "array"
          },
          "mean": {
            "description": "The mean of the series.",
            "format": "double",
            "type": "number"
          },
          "quantiles": {
            "description": "Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "standardDeviation": {
            "description": "The standard deviation of the series.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "HistogramBucket": {
        "description": "A bucket of a histogram.",
        "properties": {
          "count": {
            "description": "The number of data values that are in the bucket, i.e. are between min and max values.",
            "format": "int64",
            "type": "string"
          },
          "max": {
            "description": "The maximum value of the bucket, exclusive unless max = `\"Infinity\"`, in which case it's inclusive.",
            "format": "double",
            "type": "number"
          },
          "min": {
            "description": "The minimum value of the bucket, inclusive.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "StringStats": {
        "description": "The data statistics of a series of STRING values.",
        "properties": {
          "topUnigramStats": {
            "description": "The statistics of the top 20 unigrams, ordered by count.",
            "items": {
              "$ref": "#/$defs/UnigramStats"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UnigramStats": {
        "description": "The statistics of a unigram.",
        "properties": {
          "count": {
            "description": "The number of occurrences of this unigram in the series.",
            "format": "int64",
            "type": "string"
          },
          "value": {
            "description": "The unigram.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StructStats": {
        "description": "The data statistics of a series of STRUCT values.",
        "properties": {
          "fieldStats": {
            "additionalProperties": {
              "$ref": "#/$defs/DataStats"
            },
            "description": "Map from a field name of the struct to data stats aggregated over series of all data in that field across all the structs.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "TimestampStats": {
        "description": "The data statistics of a series of TIMESTAMP values.",
        "properties": {
          "granularStats": {
            "additionalProperties": {
              "$ref": "#/$defs/GranularStats"
            },
            "description": "The string key is the pre-defined granularity. Currently supported: hour_of_day, day_of_week, month_of_year. Granularities finer that the granularity of timestamp data are not populated (e.g. if timestamps are at day granularity, then hour_of_day is not populated).",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GranularStats": {
        "description": "Stats split by a defined in context granularity.",
        "properties": {
          "buckets": {
            "additionalProperties": {
              "format": "int64",
              "type": "string"
            },
            "description": "A map from granularity key to example count for that key. E.g. for hour_of_day `13` means 1pm, or for month_of_year `5` means May).",
            "type": "object"
          }
        },
        "type": "object"
      },
      "DataType": {
        "description": "Indicated the type of data that can be stored in a structured data entity (e.g. a table).",
        "properties": {
          "listElementType": {
            "$ref": "#/$defs/DataType"
          },
          "nullable": {
            "description": "If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string.",
            "type": "boolean"
          },
          "structType": {
            "$ref": "#/$defs/StructType"
          },
          "timeFormat": {
            "description": "If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used.",
            "type": "string"
          },
          "typeCode": {
            "description": "Required. The TypeCode for this type.",
            "enum": [
              "TYPE_CODE_UNSPECIFIED",
              "FLOAT64",
              "TIMESTAMP",
              "STRING",
              "ARRAY",
              "STRUCT",
              "CATEGORY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "StructType": {
        "description": "`StructType` defines the DataType-s of a STRUCT type.",
        "properties": {
          "fields": {
            "additionalProperties": {
              "$ref": "#/$defs/DataType"
            },
            "description": "Unordered map of struct field names to their data types. Fields cannot be added or removed via Update. Their names and data types are still mutable.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "CorrelatedColumn": {
        "description": "Identifies the table's column, and its correlation with the column this ColumnSpec describes.",
        "properties": {
          "columnSpecId": {
            "description": "The column_spec_id of the correlated column, which belongs to the same table as the in-context column.",
            "type": "string"
          },
          "correlationStats": {
            "$ref": "#/$defs/CorrelationStats"
          }
        },
        "type": "object"
      },
      "CorrelationStats": {
        "description": "A correlation statistics between two series of DataType values. The series may have differing DataType-s, but within a single series the DataType must be the same.",
        "properties": {
          "cramersV": {
            "description": "The correlation value using the Cramer's V measure.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://automl.googleapis.com//v1beta1/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were given on import . Used by: * Tables",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**dataStats**: The data statistics of a series of values that share the same DataType.",
              {
                "$ul": [
                  [
                    "**arrayStats**: The data statistics of a series of ARRAY values.",
                    {
                      "$ul": [
                        "**memberStats**"
                      ]
                    }
                  ],
                  [
                    "**categoryStats**: The data statistics of a series of CATEGORY values.",
                    {
                      "$ul": [
                        "**topCategoryStats**: The statistics of the top 20 CATEGORY values, ordered by count."
                      ]
                    }
                  ],
                  "**distinctValueCount**: The number of distinct values.",
                  [
                    "**float64Stats**: The data statistics of a series of FLOAT64 values.",
                    {
                      "$ul": [
                        "**histogramBuckets**: Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `\"-Infinity\"`, and max of the last one being `\"Infinity\"`.",
                        "**mean**: The mean of the series.",
                        "**quantiles**: Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values.",
                        "**standardDeviation**: The standard deviation of the series."
                      ]
                    }
                  ],
                  "**nullValueCount**: The number of values that are null.",
                  [
                    "**stringStats**: The data statistics of a series of STRING values.",
                    {
                      "$ul": [
                        "**topUnigramStats**: The statistics of the top 20 unigrams, ordered by count."
                      ]
                    }
                  ],
                  [
                    "**structStats**: The data statistics of a series of STRUCT values.",
                    {
                      "$ul": [
                        "**fieldStats**: Map from a field name of the struct to data stats aggregated over series of all data in that field across all the structs."
                      ]
                    }
                  ],
                  [
                    "**timestampStats**: The data statistics of a series of TIMESTAMP values.",
                    {
                      "$ul": [
                        "**granularStats**: The string key is the pre-defined granularity. Currently supported: hour_of_day, day_of_week, month_of_year. Granularities finer that the granularity of timestamp data are not populated (e.g. if timestamps are at day granularity, then hour_of_day is not populated)."
                      ]
                    }
                  ],
                  "**validValueCount**: The number of values that are valid."
                ]
              }
            ],
            [
              "**dataType**: Indicated the type of data that can be stored in a structured data entity (e.g. a table).",
              {
                "$ul": [
                  "**listElementType**",
                  "**nullable**: If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string.",
                  [
                    "**structType**: `StructType` defines the DataType-s of a STRUCT type.",
                    {
                      "$ul": [
                        "**fields**: Unordered map of struct field names to their data types. Fields cannot be added or removed via Update. Their names and data types are still mutable."
                      ]
                    }
                  ],
                  "**timeFormat**: If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used.",
                  "**typeCode**: Required. The TypeCode for this type."
                ]
              }
            ],
            "**displayName**: Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.",
            "**etag**: Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
            "**name**: Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`",
            "**topCorrelatedColumns**: Deprecated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
