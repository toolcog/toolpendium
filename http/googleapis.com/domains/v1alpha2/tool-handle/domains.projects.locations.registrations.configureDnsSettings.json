{
  "name": "domains_projects_locations_registrations_configureDnsSettings",
  "description": "Updates a `Registration`'s DNS settings.",
  "parameters": {
    "type": "object",
    "properties": {
      "registration": {
        "type": "string",
        "description": "Required. The name of the `Registration` whose DNS settings are being updated, in the format `projects/*/locations/*/registrations/*`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ConfigureDnsSettingsRequest"
      }
    },
    "required": [
      "registration"
    ],
    "$defs": {
      "ConfigureDnsSettingsRequest": {
        "description": "Request for the `ConfigureDnsSettings` method.",
        "properties": {
          "dnsSettings": {
            "$ref": "#/$defs/DnsSettings"
          },
          "updateMask": {
            "description": "Required. The field mask describing which fields to update as a comma-separated list. For example, if only the name servers are being updated for an existing Custom DNS configuration, the `update_mask` is `\"custom_dns.name_servers\"`. When changing the DNS provider from one type to another, pass the new provider's field name as part of the field mask. For example, when changing from a Google Domains DNS configuration to a Custom DNS configuration, the `update_mask` is `\"custom_dns\"`. //",
            "format": "google-fieldmask",
            "type": "string"
          },
          "validateOnly": {
            "description": "Validate the request without actually updating the DNS settings.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DnsSettings": {
        "description": "Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.",
        "properties": {
          "customDns": {
            "$ref": "#/$defs/CustomDns"
          },
          "glueRecords": {
            "description": "The list of glue records for this `Registration`. Commonly empty.",
            "items": {
              "$ref": "#/$defs/GlueRecord"
            },
            "type": "array"
          },
          "googleDomainsDns": {
            "$ref": "#/$defs/GoogleDomainsDns"
          }
        },
        "type": "object"
      },
      "CustomDns": {
        "description": "Configuration for an arbitrary DNS provider.",
        "properties": {
          "dsRecords": {
            "description": "The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.",
            "items": {
              "$ref": "#/$defs/DsRecord"
            },
            "type": "array"
          },
          "nameServers": {
            "description": "Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DsRecord": {
        "description": "Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.",
        "properties": {
          "algorithm": {
            "description": "The algorithm used to generate the referenced DNSKEY.",
            "enum": [
              "ALGORITHM_UNSPECIFIED",
              "RSAMD5",
              "DH",
              "DSA",
              "ECC",
              "RSASHA1",
              "DSANSEC3SHA1",
              "RSASHA1NSEC3SHA1",
              "RSASHA256",
              "RSASHA512",
              "ECCGOST",
              "ECDSAP256SHA256",
              "ECDSAP384SHA384",
              "ED25519",
              "ED448",
              "INDIRECT",
              "PRIVATEDNS",
              "PRIVATEOID"
            ],
            "type": "string"
          },
          "digest": {
            "description": "The digest generated from the referenced DNSKEY.",
            "type": "string"
          },
          "digestType": {
            "description": "The hash function used to generate the digest of the referenced DNSKEY.",
            "enum": [
              "DIGEST_TYPE_UNSPECIFIED",
              "SHA1",
              "SHA256",
              "GOST3411",
              "SHA384"
            ],
            "type": "string"
          },
          "keyTag": {
            "description": "The key tag of the record. Must be set in range 0 -- 65535.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GlueRecord": {
        "description": "Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.",
        "properties": {
          "hostName": {
            "description": "Required. Domain name of the host in Punycode format.",
            "type": "string"
          },
          "ipv4Addresses": {
            "description": "List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipv6Addresses": {
            "description": "List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleDomainsDns": {
        "deprecated": true,
        "description": "Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).",
        "properties": {
          "dsRecords": {
            "description": "Output only. The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.",
            "items": {
              "$ref": "#/$defs/DsRecord"
            },
            "readOnly": true,
            "type": "array"
          },
          "dsState": {
            "description": "Required. The state of DS records for this domain. Used to enable or disable automatic DNSSEC.",
            "enum": [
              "DS_STATE_UNSPECIFIED",
              "DS_RECORDS_UNPUBLISHED",
              "DS_RECORDS_PUBLISHED"
            ],
            "type": "string"
          },
          "nameServers": {
            "description": "Output only. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://domains.googleapis.com//v1alpha2/{registration}:configureDnsSettings{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
