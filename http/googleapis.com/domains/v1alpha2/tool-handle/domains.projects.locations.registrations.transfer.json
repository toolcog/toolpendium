{
  "name": "domains_projects_locations_registrations_transfer",
  "description": "Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations) Transfers a domain name from another registrar to Cloud Domains. For domains already managed by [Google Domains](https://domains.google/), use `ImportDomain` instead. Before calling this method, go to the domain's current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to this method. A successful call creates a `Registration` resource in state `TRANSFER_PENDING`. It can take several days to complete the transfer process. The registrant can often speed up this process by approving the transfer through the current registrar, either by clicking a link in an email from the registrar or by visiting the registrar's website. A few minutes after transfer approval, the resource transitions to state `ACTIVE`, indicating that the transfer was successful. If the transfer is rejected or the request expires without being approved, the resource can end up in state `TRANSFER_FAILED`. If transfer fails, you can safely delete the resource and retry the transfer.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource of the `Registration`. Must be in the format `projects/*/locations/*`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/TransferDomainRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "TransferDomainRequest": {
        "deprecated": true,
        "description": "Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). Request for the `TransferDomain` method.",
        "properties": {
          "authorizationCode": {
            "$ref": "#/$defs/AuthorizationCode"
          },
          "contactNotices": {
            "description": "The list of contact notices that you acknowledge. The notices needed here depend on the values specified in `registration.contact_settings`.",
            "items": {
              "enum": [
                "CONTACT_NOTICE_UNSPECIFIED",
                "PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "registration": {
            "$ref": "#/$defs/Registration"
          },
          "validateOnly": {
            "description": "Validate the request without actually transferring the domain.",
            "type": "boolean"
          },
          "yearlyPrice": {
            "$ref": "#/$defs/Money"
          }
        },
        "type": "object"
      },
      "AuthorizationCode": {
        "description": "Defines an authorization code.",
        "properties": {
          "code": {
            "description": "The Authorization Code in ASCII. It can be used to transfer the domain to or from another registrar.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Registration": {
        "description": "The `Registration` resource facilitates managing and configuring domain name registrations. There are several ways to create a new `Registration` resource: To create a new `Registration` resource, find a suitable domain name by calling the `SearchDomains` method with a query to see available domain name options. After choosing a name, call `RetrieveRegisterParameters` to ensure availability and obtain information like pricing, which is needed to build a call to `RegisterDomain`. Another way to create a new `Registration` is to transfer an existing domain from another registrar (Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations)). First, go to the current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to `TransferDomain`. Finally, you can create a new `Registration` by importing an existing domain managed with [Google Domains](https://domains.google/) (Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations)). First, call `RetrieveImportableDomains` to list domains to which the calling user has sufficient access. Then call `ImportDomain` on any domain names you want to use with Cloud Domains.",
        "properties": {
          "contactSettings": {
            "$ref": "#/$defs/ContactSettings"
          },
          "createTime": {
            "description": "Output only. The creation timestamp of the `Registration` resource.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dnsSettings": {
            "$ref": "#/$defs/DnsSettings"
          },
          "domainName": {
            "description": "Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.",
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. The expiration timestamp of the `Registration`.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "issues": {
            "description": "Output only. The set of issues with the `Registration` that require attention.",
            "items": {
              "enum": [
                "ISSUE_UNSPECIFIED",
                "CONTACT_SUPPORT",
                "UNVERIFIED_EMAIL",
                "PROBLEM_WITH_BILLING"
              ],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of labels associated with the `Registration`.",
            "type": "object"
          },
          "managementSettings": {
            "$ref": "#/$defs/ManagementSettings"
          },
          "name": {
            "description": "Output only. Name of the `Registration` resource, in the format `projects/*/locations/*/registrations/`.",
            "readOnly": true,
            "type": "string"
          },
          "pendingContactSettings": {
            "$ref": "#/$defs/ContactSettings"
          },
          "registerFailureReason": {
            "description": "Output only. The reason the domain registration failed. Only set for domains in REGISTRATION_FAILED state.",
            "enum": [
              "REGISTER_FAILURE_REASON_UNSPECIFIED",
              "REGISTER_FAILURE_REASON_UNKNOWN",
              "DOMAIN_NOT_AVAILABLE",
              "INVALID_CONTACTS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of the `Registration`",
            "enum": [
              "STATE_UNSPECIFIED",
              "REGISTRATION_PENDING",
              "REGISTRATION_FAILED",
              "TRANSFER_PENDING",
              "TRANSFER_FAILED",
              "IMPORT_PENDING",
              "ACTIVE",
              "SUSPENDED",
              "EXPORTED",
              "EXPIRED"
            ],
            "readOnly": true,
            "type": "string",
            "x-enumDeprecated": [
              false,
              false,
              false,
              true,
              true,
              true,
              false,
              false,
              false,
              false
            ]
          },
          "supportedPrivacy": {
            "description": "Output only. Set of options for the `contact_settings.privacy` field that this `Registration` supports.",
            "items": {
              "enum": [
                "CONTACT_PRIVACY_UNSPECIFIED",
                "PUBLIC_CONTACT_DATA",
                "PRIVATE_CONTACT_DATA",
                "REDACTED_CONTACT_DATA"
              ],
              "type": "string",
              "x-enumDeprecated": [
                false,
                false,
                true,
                false
              ]
            },
            "readOnly": true,
            "type": "array"
          },
          "transferFailureReason": {
            "deprecated": true,
            "description": "Output only. Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). The reason the domain transfer failed. Only set for domains in TRANSFER_FAILED state.",
            "enum": [
              "TRANSFER_FAILURE_REASON_UNSPECIFIED",
              "TRANSFER_FAILURE_REASON_UNKNOWN",
              "EMAIL_CONFIRMATION_FAILURE",
              "DOMAIN_NOT_REGISTERED",
              "DOMAIN_HAS_TRANSFER_LOCK",
              "INVALID_AUTHORIZATION_CODE",
              "TRANSFER_CANCELLED",
              "TRANSFER_REJECTED",
              "INVALID_REGISTRANT_EMAIL_ADDRESS",
              "DOMAIN_NOT_ELIGIBLE_FOR_TRANSFER",
              "TRANSFER_ALREADY_PENDING"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContactSettings": {
        "description": "Defines the contact information associated with a `Registration`. [ICANN](https://icann.org/) requires all domain names to have associated contact information. The `registrant_contact` is considered the domain's legal owner, and often the other contacts are identical.",
        "properties": {
          "adminContact": {
            "$ref": "#/$defs/Contact"
          },
          "privacy": {
            "description": "Required. Privacy setting for the contacts associated with the `Registration`.",
            "enum": [
              "CONTACT_PRIVACY_UNSPECIFIED",
              "PUBLIC_CONTACT_DATA",
              "PRIVATE_CONTACT_DATA",
              "REDACTED_CONTACT_DATA"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              false,
              true,
              false
            ]
          },
          "registrantContact": {
            "$ref": "#/$defs/Contact"
          },
          "technicalContact": {
            "$ref": "#/$defs/Contact"
          }
        },
        "type": "object"
      },
      "Contact": {
        "description": "Details required for a contact associated with a `Registration`.",
        "properties": {
          "email": {
            "description": "Required. Email address of the contact.",
            "type": "string"
          },
          "faxNumber": {
            "description": "Fax number of the contact in international format. For example, `\"+1-800-555-0123\"`.",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Required. Phone number of the contact in international format. For example, `\"+1-800-555-0123\"`.",
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/$defs/PostalAddress"
          }
        },
        "type": "object"
      },
      "PostalAddress": {
        "description": "Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478",
        "properties": {
          "addressLines": {
            "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "administrativeArea": {
            "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.",
            "type": "string"
          },
          "languageCode": {
            "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".",
            "type": "string"
          },
          "locality": {
            "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.",
            "type": "string"
          },
          "organization": {
            "description": "Optional. The name of the organization at the address.",
            "type": "string"
          },
          "postalCode": {
            "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).",
            "type": "string"
          },
          "recipients": {
            "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "regionCode": {
            "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.",
            "type": "string"
          },
          "revision": {
            "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.",
            "format": "int32",
            "type": "integer"
          },
          "sortingCode": {
            "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire).",
            "type": "string"
          },
          "sublocality": {
            "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DnsSettings": {
        "description": "Defines the DNS configuration of a `Registration`, including name servers, DNSSEC, and glue records.",
        "properties": {
          "customDns": {
            "$ref": "#/$defs/CustomDns"
          },
          "glueRecords": {
            "description": "The list of glue records for this `Registration`. Commonly empty.",
            "items": {
              "$ref": "#/$defs/GlueRecord"
            },
            "type": "array"
          },
          "googleDomainsDns": {
            "$ref": "#/$defs/GoogleDomainsDns"
          }
        },
        "type": "object"
      },
      "CustomDns": {
        "description": "Configuration for an arbitrary DNS provider.",
        "properties": {
          "dsRecords": {
            "description": "The list of DS records for this domain, which are used to enable DNSSEC. The domain's DNS provider can provide the values to set here. If this field is empty, DNSSEC is disabled.",
            "items": {
              "$ref": "#/$defs/DsRecord"
            },
            "type": "array"
          },
          "nameServers": {
            "description": "Required. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DsRecord": {
        "description": "Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC for a domain. It contains a digest (hash) of a DNSKEY record that must be present in the domain's DNS zone.",
        "properties": {
          "algorithm": {
            "description": "The algorithm used to generate the referenced DNSKEY.",
            "enum": [
              "ALGORITHM_UNSPECIFIED",
              "RSAMD5",
              "DH",
              "DSA",
              "ECC",
              "RSASHA1",
              "DSANSEC3SHA1",
              "RSASHA1NSEC3SHA1",
              "RSASHA256",
              "RSASHA512",
              "ECCGOST",
              "ECDSAP256SHA256",
              "ECDSAP384SHA384",
              "ED25519",
              "ED448",
              "INDIRECT",
              "PRIVATEDNS",
              "PRIVATEOID"
            ],
            "type": "string"
          },
          "digest": {
            "description": "The digest generated from the referenced DNSKEY.",
            "type": "string"
          },
          "digestType": {
            "description": "The hash function used to generate the digest of the referenced DNSKEY.",
            "enum": [
              "DIGEST_TYPE_UNSPECIFIED",
              "SHA1",
              "SHA256",
              "GOST3411",
              "SHA384"
            ],
            "type": "string"
          },
          "keyTag": {
            "description": "The key tag of the record. Must be set in range 0 -- 65535.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GlueRecord": {
        "description": "Defines a host on your domain that is a DNS name server for your domain and/or other domains. Glue records are a way of making the IP address of a name server known, even when it serves DNS queries for its parent domain. For example, when `ns.example.com` is a name server for `example.com`, the host `ns.example.com` must have a glue record to break the circular DNS reference.",
        "properties": {
          "hostName": {
            "description": "Required. Domain name of the host in Punycode format.",
            "type": "string"
          },
          "ipv4Addresses": {
            "description": "List of IPv4 addresses corresponding to this host in the standard decimal format (e.g. `198.51.100.1`). At least one of `ipv4_address` and `ipv6_address` must be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipv6Addresses": {
            "description": "List of IPv6 addresses corresponding to this host in the standard hexadecimal format (e.g. `2001:db8::`). At least one of `ipv4_address` and `ipv6_address` must be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleDomainsDns": {
        "deprecated": true,
        "description": "Deprecated: For more information, see [Cloud Domains feature deprecation](https://cloud.google.com/domains/docs/deprecations/feature-deprecations). Configuration for using the free DNS zone provided by Google Domains as a `Registration`'s `dns_provider`. You cannot configure the DNS zone itself using the API. To configure the DNS zone, go to [Google Domains](https://domains.google/).",
        "properties": {
          "dsRecords": {
            "description": "Output only. The list of DS records published for this domain. The list is automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`, otherwise it remains empty.",
            "items": {
              "$ref": "#/$defs/DsRecord"
            },
            "readOnly": true,
            "type": "array"
          },
          "dsState": {
            "description": "Required. The state of DS records for this domain. Used to enable or disable automatic DNSSEC.",
            "enum": [
              "DS_STATE_UNSPECIFIED",
              "DS_RECORDS_UNPUBLISHED",
              "DS_RECORDS_PUBLISHED"
            ],
            "type": "string"
          },
          "nameServers": {
            "description": "Output only. A list of name servers that store the DNS zone for this domain. Each name server is a domain name, with Unicode domain names expressed in Punycode format. This field is automatically populated with the name servers assigned to the Google Domains DNS zone.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "ManagementSettings": {
        "description": "Defines renewal, billing, and transfer settings for a `Registration`.",
        "properties": {
          "preferredRenewalMethod": {
            "description": "Optional. The desired renewal method for this `Registration`. The actual `renewal_method` is automatically updated to reflect this choice. If unset or equal to `RENEWAL_METHOD_UNSPECIFIED`, the actual `renewalMethod` is treated as if it were set to `AUTOMATIC_RENEWAL`. You cannot use `RENEWAL_DISABLED` during resource creation, and you can update the renewal status only when the `Registration` resource has state `ACTIVE` or `SUSPENDED`. When `preferred_renewal_method` is set to `AUTOMATIC_RENEWAL`, the actual `renewal_method` can be set to `RENEWAL_DISABLED` in case of problems with the billing account or reported domain abuse. In such cases, check the `issues` field on the `Registration`. After the problem is resolved, the `renewal_method` is automatically updated to `preferred_renewal_method` in a few hours.",
            "enum": [
              "RENEWAL_METHOD_UNSPECIFIED",
              "AUTOMATIC_RENEWAL",
              "MANUAL_RENEWAL",
              "RENEWAL_DISABLED"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              false,
              true,
              false
            ]
          },
          "renewalMethod": {
            "description": "Output only. The actual renewal method for this `Registration`. When `preferred_renewal_method` is set to `AUTOMATIC_RENEWAL`, the actual `renewal_method` can be equal to `RENEWAL_DISABLED`—for example, when there are problems with the billing account or reported domain abuse. In such cases, check the `issues` field on the `Registration`. After the problem is resolved, the `renewal_method` is automatically updated to `preferred_renewal_method` in a few hours.",
            "enum": [
              "RENEWAL_METHOD_UNSPECIFIED",
              "AUTOMATIC_RENEWAL",
              "MANUAL_RENEWAL",
              "RENEWAL_DISABLED"
            ],
            "readOnly": true,
            "type": "string",
            "x-enumDeprecated": [
              false,
              false,
              true,
              false
            ]
          },
          "transferLockState": {
            "description": "Controls whether the domain can be transferred to another registrar.",
            "enum": [
              "TRANSFER_LOCK_STATE_UNSPECIFIED",
              "UNLOCKED",
              "LOCKED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Money": {
        "description": "Represents an amount of money with its currency type.",
        "properties": {
          "currencyCode": {
            "description": "The three-letter currency code defined in ISO 4217.",
            "type": "string"
          },
          "nanos": {
            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "units": {
            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://domains.googleapis.com//v1alpha2/{parent}/registrations:transfer{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
