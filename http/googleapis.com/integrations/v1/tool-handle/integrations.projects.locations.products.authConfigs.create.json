{
  "name": "integrations_projects_locations_products_authConfigs_create",
  "description": "Creates an auth config record. Fetch corresponding credentials for specific auth types, e.g. access token for OAuth 2.0, JWT token for JWT. Encrypt the auth config with Cloud KMS and store the encrypted credentials in Spanner. Returns the encrypted auth config.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. \"projects/{project}/locations/{location}\" format."
      },
      "clientCertificate.encryptedPrivateKey": {
        "type": "string",
        "description": "The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----"
      },
      "clientCertificate.passphrase": {
        "type": "string",
        "description": "'passphrase' should be left unset if private key is not encrypted. Note that 'passphrase' is not the password for web server, but an extra layer of security to protected private key."
      },
      "clientCertificate.sslCertificate": {
        "type": "string",
        "description": "The ssl certificate encoded in PEM format. This string must include the begin header and end footer lines. For example, -----BEGIN CERTIFICATE----- MIICTTCCAbagAwIBAgIJAPT0tSKNxan/MA0GCSqGSIb3DQEBCwUAMCoxFzAVBgNV BAoTDkdvb2dsZSBURVNUSU5HMQ8wDQYDVQQDEwZ0ZXN0Q0EwHhcNMTUwMTAxMDAw MDAwWhcNMjUwMTAxMDAwMDAwWjAuMRcwFQYDVQQKEw5Hb29nbGUgVEVTVElORzET MBEGA1UEAwwKam9lQGJhbmFuYTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA vDYFgMgxi5W488d9J7UpCInl0NXmZQpJDEHE4hvkaRlH7pnC71H0DLt0/3zATRP1 JzY2+eqBmbGl4/sgZKYv8UrLnNyQNUTsNx1iZAfPUflf5FwgVsai8BM0pUciq1NB xD429VFcrGZNucvFLh72RuRFIKH8WUpiK/iZNFkWhZ0CAwEAAaN3MHUwDgYDVR0P AQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMB Af8EAjAAMBkGA1UdDgQSBBCVgnFBCWgL/iwCqnGrhTPQMBsGA1UdIwQUMBKAEKey Um2o4k2WiEVA0ldQvNYwDQYJKoZIhvcNAQELBQADgYEAYK986R4E3L1v+Q6esBtW JrUwA9UmJRSQr0N5w3o9XzarU37/bkjOP0Fw0k/A6Vv1n3vlciYfBFaBIam1qRHr 5dMsYf4CZS6w50r7hyzqyrwDoyNxkLnd2PdcHT/sym1QmflsjEs7pejtnohO6N2H wQW6M0H7Zt8claGRla4fKkg= -----END CERTIFICATE-----"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaAuthConfig"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudIntegrationsV1alphaAuthConfig": {
        "description": "The AuthConfig resource use to hold channels and connection config data.",
        "properties": {
          "certificateId": {
            "description": "Certificate id for client certificate",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The timestamp when the auth config is created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "creatorEmail": {
            "description": "The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
            "type": "string"
          },
          "credentialType": {
            "description": "Credential type of the encrypted credential.",
            "enum": [
              "CREDENTIAL_TYPE_UNSPECIFIED",
              "USERNAME_AND_PASSWORD",
              "API_KEY",
              "OAUTH2_AUTHORIZATION_CODE",
              "OAUTH2_IMPLICIT",
              "OAUTH2_CLIENT_CREDENTIALS",
              "OAUTH2_RESOURCE_OWNER_CREDENTIALS",
              "JWT",
              "AUTH_TOKEN",
              "SERVICE_ACCOUNT",
              "CLIENT_CERTIFICATE_ONLY",
              "OIDC_TOKEN"
            ],
            "type": "string"
          },
          "decryptedCredential": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaCredential"
          },
          "description": {
            "description": "A description of the auth config.",
            "type": "string"
          },
          "displayName": {
            "description": "The name of the auth config.",
            "type": "string"
          },
          "encryptedCredential": {
            "description": "Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.",
            "format": "byte",
            "type": "string"
          },
          "expiryNotificationDuration": {
            "description": "User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.",
            "items": {
              "format": "google-duration",
              "type": "string"
            },
            "type": "array"
          },
          "lastModifierEmail": {
            "description": "The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
            "type": "string"
          },
          "name": {
            "description": "Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}.",
            "type": "string"
          },
          "overrideValidTime": {
            "description": "User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.",
            "format": "google-datetime",
            "type": "string"
          },
          "reason": {
            "description": "The reason / details of the current status.",
            "type": "string"
          },
          "state": {
            "description": "The status of the auth config.",
            "enum": [
              "STATE_UNSPECIFIED",
              "VALID",
              "INVALID",
              "SOFT_DELETED",
              "EXPIRED",
              "UNAUTHORIZED",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp when the auth config is modified.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "validTime": {
            "description": "The time until the auth config is valid. Empty or max value is considered the auth config won't expire.",
            "format": "google-datetime",
            "type": "string"
          },
          "visibility": {
            "description": "The visibility of the auth config.",
            "enum": [
              "AUTH_CONFIG_VISIBILITY_UNSPECIFIED",
              "PRIVATE",
              "CLIENT_VISIBLE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaCredential": {
        "description": "Defines parameters for a single, canonical credential.",
        "properties": {
          "authToken": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaAuthToken"
          },
          "credentialType": {
            "description": "Credential type associated with auth config.",
            "enum": [
              "CREDENTIAL_TYPE_UNSPECIFIED",
              "USERNAME_AND_PASSWORD",
              "API_KEY",
              "OAUTH2_AUTHORIZATION_CODE",
              "OAUTH2_IMPLICIT",
              "OAUTH2_CLIENT_CREDENTIALS",
              "OAUTH2_RESOURCE_OWNER_CREDENTIALS",
              "JWT",
              "AUTH_TOKEN",
              "SERVICE_ACCOUNT",
              "CLIENT_CERTIFICATE_ONLY",
              "OIDC_TOKEN"
            ],
            "type": "string"
          },
          "jwt": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaJwt"
          },
          "oauth2AuthorizationCode": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode"
          },
          "oauth2ClientCredentials": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials"
          },
          "oauth2ResourceOwnerCredentials": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials"
          },
          "oidcToken": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaOidcToken"
          },
          "serviceAccountCredentials": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaServiceAccountCredentials"
          },
          "usernameAndPassword": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaUsernameAndPassword"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaAuthToken": {
        "description": "The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header.",
        "properties": {
          "token": {
            "description": "The token for the auth type.",
            "type": "string"
          },
          "type": {
            "description": "Authentication type, e.g. \"Basic\", \"Bearer\", etc.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaJwt": {
        "description": "Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected.",
        "properties": {
          "jwt": {
            "description": "The token calculated by the header, payload and signature.",
            "type": "string"
          },
          "jwtHeader": {
            "description": "Identifies which algorithm is used to generate the signature.",
            "type": "string"
          },
          "jwtPayload": {
            "description": "Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.",
            "type": "string"
          },
          "secret": {
            "description": "User's pre-shared secret to sign the token.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode": {
        "description": "The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.",
        "properties": {
          "accessToken": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaAccessToken"
          },
          "applyReauthPolicy": {
            "description": "Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.",
            "type": "boolean"
          },
          "authCode": {
            "description": "The Auth Code that is used to initially retrieve the access token.",
            "type": "string"
          },
          "authEndpoint": {
            "description": "The auth url endpoint to send the auth code request to.",
            "type": "string"
          },
          "authParams": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMap"
          },
          "clientId": {
            "description": "The client's id.",
            "type": "string"
          },
          "clientSecret": {
            "description": "The client's secret.",
            "type": "string"
          },
          "requestType": {
            "description": "Represent how to pass parameters to fetch access token",
            "enum": [
              "REQUEST_TYPE_UNSPECIFIED",
              "REQUEST_BODY",
              "QUERY_PARAMETERS",
              "ENCODED_HEADER"
            ],
            "type": "string"
          },
          "scope": {
            "description": "A space-delimited list of requested scope permissions.",
            "type": "string"
          },
          "tokenEndpoint": {
            "description": "The token url endpoint to send the token request to.",
            "type": "string"
          },
          "tokenParams": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMap"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaAccessToken": {
        "description": "The access token represents the authorization of a specific application to access specific parts of a user’s data.",
        "properties": {
          "accessToken": {
            "description": "The access token encapsulating the security identity of a process or thread.",
            "type": "string"
          },
          "accessTokenExpireTime": {
            "description": "Required. The approximate time until the access token retrieved is valid.",
            "format": "google-datetime",
            "type": "string"
          },
          "refreshToken": {
            "description": "If the access token will expire, use the refresh token to obtain another access token.",
            "type": "string"
          },
          "refreshTokenExpireTime": {
            "description": "The approximate time until the refresh token retrieved is valid.",
            "format": "google-datetime",
            "type": "string"
          },
          "tokenType": {
            "description": "Only support \"bearer\" token in v1 as bearer token is the predominant type used with OAuth 2.0.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaParameterMap": {
        "description": "A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.",
        "properties": {
          "entries": {
            "description": "A list of parameter map entries.",
            "items": {
              "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMapEntry"
            },
            "type": "array"
          },
          "keyType": {
            "description": "Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.",
            "enum": [
              "INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED",
              "STRING_VALUE",
              "INT_VALUE",
              "DOUBLE_VALUE",
              "BOOLEAN_VALUE",
              "STRING_ARRAY",
              "INT_ARRAY",
              "DOUBLE_ARRAY",
              "BOOLEAN_ARRAY",
              "JSON_VALUE",
              "PROTO_VALUE",
              "PROTO_ARRAY"
            ],
            "type": "string"
          },
          "valueType": {
            "description": "Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this.",
            "enum": [
              "INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED",
              "STRING_VALUE",
              "INT_VALUE",
              "DOUBLE_VALUE",
              "BOOLEAN_VALUE",
              "STRING_ARRAY",
              "INT_ARRAY",
              "DOUBLE_ARRAY",
              "BOOLEAN_ARRAY",
              "JSON_VALUE",
              "PROTO_VALUE",
              "PROTO_ARRAY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaParameterMapEntry": {
        "description": "Entry is a pair of key and value.",
        "properties": {
          "key": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMapField"
          },
          "value": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMapField"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaParameterMapField": {
        "description": "Field represents either the key or value in an entry.",
        "properties": {
          "literalValue": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaValueType"
          },
          "referenceKey": {
            "description": "Referencing one of the Integration variables.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaValueType": {
        "description": "The type of the parameter.",
        "properties": {
          "booleanArray": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaBooleanParameterArray"
          },
          "booleanValue": {
            "description": "Boolean.",
            "type": "boolean"
          },
          "doubleArray": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaDoubleParameterArray"
          },
          "doubleValue": {
            "description": "Double Number.",
            "format": "double",
            "type": "number"
          },
          "intArray": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaIntParameterArray"
          },
          "intValue": {
            "description": "Integer.",
            "format": "int64",
            "type": "string"
          },
          "jsonValue": {
            "description": "Json.",
            "type": "string"
          },
          "stringArray": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaStringParameterArray"
          },
          "stringValue": {
            "description": "String.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaBooleanParameterArray": {
        "description": "This message only contains a field of boolean array.",
        "properties": {
          "booleanValues": {
            "description": "Boolean array.",
            "items": {
              "type": "boolean"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaDoubleParameterArray": {
        "description": "This message only contains a field of double number array.",
        "properties": {
          "doubleValues": {
            "description": "Double number array.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaIntParameterArray": {
        "description": "This message only contains a field of integer array.",
        "properties": {
          "intValues": {
            "description": "Integer array.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaStringParameterArray": {
        "description": "This message only contains a field of string array.",
        "properties": {
          "stringValues": {
            "description": "String array.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials": {
        "description": "For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.",
        "properties": {
          "accessToken": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaAccessToken"
          },
          "clientId": {
            "description": "The client's ID.",
            "type": "string"
          },
          "clientSecret": {
            "description": "The client's secret.",
            "type": "string"
          },
          "requestType": {
            "description": "Represent how to pass parameters to fetch access token",
            "enum": [
              "REQUEST_TYPE_UNSPECIFIED",
              "REQUEST_BODY",
              "QUERY_PARAMETERS",
              "ENCODED_HEADER"
            ],
            "type": "string"
          },
          "scope": {
            "description": "A space-delimited list of requested scope permissions.",
            "type": "string"
          },
          "tokenEndpoint": {
            "description": "The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.",
            "type": "string"
          },
          "tokenParams": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMap"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials": {
        "description": "For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token.",
        "properties": {
          "accessToken": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaAccessToken"
          },
          "clientId": {
            "description": "The client's ID.",
            "type": "string"
          },
          "clientSecret": {
            "description": "The client's secret.",
            "type": "string"
          },
          "password": {
            "description": "The user's password.",
            "type": "string"
          },
          "requestType": {
            "description": "Represent how to pass parameters to fetch access token",
            "enum": [
              "REQUEST_TYPE_UNSPECIFIED",
              "REQUEST_BODY",
              "QUERY_PARAMETERS",
              "ENCODED_HEADER"
            ],
            "type": "string"
          },
          "scope": {
            "description": "A space-delimited list of requested scope permissions.",
            "type": "string"
          },
          "tokenEndpoint": {
            "description": "The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.",
            "type": "string"
          },
          "tokenParams": {
            "$ref": "#/$defs/GoogleCloudIntegrationsV1alphaParameterMap"
          },
          "username": {
            "description": "The user's username.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaOidcToken": {
        "description": "OIDC Token",
        "properties": {
          "audience": {
            "description": "Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.",
            "type": "string"
          },
          "serviceAccountEmail": {
            "description": "The service account email to be used as the identity for the token.",
            "type": "string"
          },
          "token": {
            "description": "ID token obtained for the service account",
            "type": "string"
          },
          "tokenExpireTime": {
            "description": "The approximate time until the token retrieved is valid.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaServiceAccountCredentials": {
        "description": "Represents the service account which can be used to generate access token for authenticating the service call.",
        "properties": {
          "scope": {
            "description": "A space-delimited list of requested scope permissions.",
            "type": "string"
          },
          "serviceAccount": {
            "description": "Name of the service account that has the permission to make the request.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudIntegrationsV1alphaUsernameAndPassword": {
        "description": "Username and password pair.",
        "properties": {
          "password": {
            "description": "Password to be used",
            "type": "string"
          },
          "username": {
            "description": "Username to be used",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://integrations.googleapis.com//v1/{parent}/authConfigs{?clientCertificate.encryptedPrivateKey,clientCertificate.passphrase,clientCertificate.sslCertificate,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The AuthConfig resource use to hold channels and connection config data.",
        "**Key properties:**",
        {
          "$ul": [
            "**certificateId**: Certificate id for client certificate",
            "**createTime**: Output only. The timestamp when the auth config is created.",
            "**creatorEmail**: The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
            "**credentialType**: Credential type of the encrypted credential.",
            [
              "**decryptedCredential**: Defines parameters for a single, canonical credential.",
              {
                "$ul": [
                  [
                    "**authToken**: The credentials to authenticate a user agent with a server that is put in HTTP Authorization request header.",
                    {
                      "$ul": [
                        "**token**: The token for the auth type.",
                        "**type**: Authentication type, e.g. \"Basic\", \"Bearer\", etc."
                      ]
                    }
                  ],
                  "**credentialType**: Credential type associated with auth config.",
                  [
                    "**jwt**: Represents JSON web token(JWT), which is a compact, URL-safe means of representing claims to be transferred between two parties, enabling the claims to be digitally signed or integrity protected.",
                    {
                      "$ul": [
                        "**jwt**: The token calculated by the header, payload and signature.",
                        "**jwtHeader**: Identifies which algorithm is used to generate the signature.",
                        "**jwtPayload**: Contains a set of claims. The JWT specification defines seven Registered Claim Names which are the standard fields commonly included in tokens. Custom claims are usually also included, depending on the purpose of the token.",
                        "**secret**: User's pre-shared secret to sign the token."
                      ]
                    }
                  ],
                  [
                    "**oauth2AuthorizationCode**: The OAuth Type where the client sends request with the client id and requested scopes to auth endpoint. User sees a consent screen and auth code is received at specified redirect url afterwards. The auth code is then combined with the client id and secret and sent to the token endpoint in exchange for the access and refresh token. The refresh token can be used to fetch new access tokens.",
                    {
                      "$ul": [
                        [
                          "**accessToken**: The access token represents the authorization of a specific application to access specific parts of a user’s data.",
                          {
                            "$ul": [
                              "**accessToken**: The access token encapsulating the security identity of a process or thread.",
                              "**accessTokenExpireTime**: Required. The approximate time until the access token retrieved is valid.",
                              "**refreshToken**: If the access token will expire, use the refresh token to obtain another access token.",
                              "**refreshTokenExpireTime**: The approximate time until the refresh token retrieved is valid.",
                              "**tokenType**: Only support \"bearer\" token in v1 as bearer token is the predominant type used with OAuth 2.0."
                            ]
                          }
                        ],
                        "**applyReauthPolicy**: Indicates if the user has opted in Google Reauth Policy. If opted in, the refresh token will be valid for 20 hours, after which time users must re-authenticate in order to obtain a new one.",
                        "**authCode**: The Auth Code that is used to initially retrieve the access token.",
                        "**authEndpoint**: The auth url endpoint to send the auth code request to.",
                        [
                          "**authParams**: A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.",
                          {
                            "$ul": [
                              "**entries**: A list of parameter map entries.",
                              "**keyType**: Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.",
                              "**valueType**: Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this."
                            ]
                          }
                        ],
                        "**clientId**: The client's id.",
                        "**clientSecret**: The client's secret.",
                        "**requestType**: Represent how to pass parameters to fetch access token",
                        "**scope**: A space-delimited list of requested scope permissions.",
                        "**tokenEndpoint**: The token url endpoint to send the token request to.",
                        [
                          "**tokenParams**: A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.",
                          {
                            "$ul": [
                              "**entries**: A list of parameter map entries.",
                              "**keyType**: Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.",
                              "**valueType**: Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**oauth2ClientCredentials**: For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.",
                    {
                      "$ul": [
                        [
                          "**accessToken**: The access token represents the authorization of a specific application to access specific parts of a user’s data.",
                          {
                            "$ul": [
                              "**accessToken**: The access token encapsulating the security identity of a process or thread.",
                              "**accessTokenExpireTime**: Required. The approximate time until the access token retrieved is valid.",
                              "**refreshToken**: If the access token will expire, use the refresh token to obtain another access token.",
                              "**refreshTokenExpireTime**: The approximate time until the refresh token retrieved is valid.",
                              "**tokenType**: Only support \"bearer\" token in v1 as bearer token is the predominant type used with OAuth 2.0."
                            ]
                          }
                        ],
                        "**clientId**: The client's ID.",
                        "**clientSecret**: The client's secret.",
                        "**requestType**: Represent how to pass parameters to fetch access token",
                        "**scope**: A space-delimited list of requested scope permissions.",
                        "**tokenEndpoint**: The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.",
                        [
                          "**tokenParams**: A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.",
                          {
                            "$ul": [
                              "**entries**: A list of parameter map entries.",
                              "**keyType**: Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.",
                              "**valueType**: Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**oauth2ResourceOwnerCredentials**: For resource owner credentials grant, the client will ask the user for their authorization credentials (ususally a username and password) and send a POST request to the authorization server. The authorization server will respond with a JSON object containing the access token.",
                    {
                      "$ul": [
                        [
                          "**accessToken**: The access token represents the authorization of a specific application to access specific parts of a user’s data.",
                          {
                            "$ul": [
                              "**accessToken**: The access token encapsulating the security identity of a process or thread.",
                              "**accessTokenExpireTime**: Required. The approximate time until the access token retrieved is valid.",
                              "**refreshToken**: If the access token will expire, use the refresh token to obtain another access token.",
                              "**refreshTokenExpireTime**: The approximate time until the refresh token retrieved is valid.",
                              "**tokenType**: Only support \"bearer\" token in v1 as bearer token is the predominant type used with OAuth 2.0."
                            ]
                          }
                        ],
                        "**clientId**: The client's ID.",
                        "**clientSecret**: The client's secret.",
                        "**password**: The user's password.",
                        "**requestType**: Represent how to pass parameters to fetch access token",
                        "**scope**: A space-delimited list of requested scope permissions.",
                        "**tokenEndpoint**: The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.",
                        [
                          "**tokenParams**: A generic multi-map that holds key value pairs. They keys and values can be of any type, unless specified.",
                          {
                            "$ul": [
                              "**entries**: A list of parameter map entries.",
                              "**keyType**: Option to specify key type for all entries of the map. If provided then field types for all entries must conform to this.",
                              "**valueType**: Option to specify value type for all entries of the map. If provided then field types for all entries must conform to this."
                            ]
                          }
                        ],
                        "**username**: The user's username."
                      ]
                    }
                  ],
                  [
                    "**oidcToken**: OIDC Token",
                    {
                      "$ul": [
                        "**audience**: Audience to be used when generating OIDC token. The audience claim identifies the recipients that the JWT is intended for.",
                        "**serviceAccountEmail**: The service account email to be used as the identity for the token.",
                        "**token**: ID token obtained for the service account",
                        "**tokenExpireTime**: The approximate time until the token retrieved is valid."
                      ]
                    }
                  ],
                  [
                    "**serviceAccountCredentials**: Represents the service account which can be used to generate access token for authenticating the service call.",
                    {
                      "$ul": [
                        "**scope**: A space-delimited list of requested scope permissions.",
                        "**serviceAccount**: Name of the service account that has the permission to make the request."
                      ]
                    }
                  ],
                  [
                    "**usernameAndPassword**: Username and password pair.",
                    {
                      "$ul": [
                        "**password**: Password to be used",
                        "**username**: Username to be used"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**description**: A description of the auth config.",
            "**displayName**: The name of the auth config.",
            "**encryptedCredential**: Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.",
            "**expiryNotificationDuration**: User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.",
            "**lastModifierEmail**: The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.",
            "**name**: Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}.",
            "**overrideValidTime**: User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.",
            "**reason**: The reason / details of the current status.",
            "**state**: The status of the auth config.",
            "**updateTime**: Output only. The timestamp when the auth config is modified.",
            "**validTime**: The time until the auth config is valid. Empty or max value is considered the auth config won't expire.",
            "**visibility**: The visibility of the auth config."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
