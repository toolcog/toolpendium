{
  "name": "firebasehosting_projects_sites_customDomains_create",
  "description": "Creates a `CustomDomain`.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The custom domain's parent, specifically a Firebase Hosting `Site`."
      },
      "customDomainId": {
        "type": "string",
        "description": "Required. The ID of the `CustomDomain`, which is the domain name you'd like to use with Firebase Hosting."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "If true, Hosting validates that it's possible to complete your request but doesn't actually create a new `CustomDomain`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CustomDomain"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CustomDomain": {
        "description": "A `CustomDomain` is an entity that links a domain name to a Firebase Hosting site. Add a `CustomDomain` to your site to allow Hosting to serve the site's content in response to requests against your domain name.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations you can add to leave both human- and machine-readable metadata about your `CustomDomain`.",
            "type": "object"
          },
          "cert": {
            "$ref": "#/$defs/Certificate"
          },
          "certPreference": {
            "description": "A field that lets you specify which SSL certificate type Hosting creates for your domain name. Spark plan custom domains only have access to the `GROUPED` cert type, while Blaze plan domains can select any option.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "TEMPORARY",
              "GROUPED",
              "PROJECT_GROUPED",
              "DEDICATED"
            ],
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The custom domain's create time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. The time the `CustomDomain` was deleted; null for custom domains that haven't been deleted. Deleted custom domains persist for approximately 30 days, after which time Hosting removes them completely. To restore a deleted custom domain, make an `UndeleteCustomDomain` request.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "etag": {
            "description": "Output only. A string that represents the current state of the `CustomDomain` and allows you to confirm its initial state in requests that would modify it. Use the tag to ensure consistency when making `UpdateCustomDomain`, `DeleteCustomDomain`, and `UndeleteCustomDomain` requests.",
            "readOnly": true,
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. The minimum time before a soft-deleted `CustomDomain` is completely removed from Hosting; null for custom domains that haven't been deleted.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "hostState": {
            "description": "Output only. The `HostState` of the domain name this `CustomDomain` refers to.",
            "enum": [
              "HOST_STATE_UNSPECIFIED",
              "HOST_UNHOSTED",
              "HOST_UNREACHABLE",
              "HOST_MISMATCH",
              "HOST_CONFLICT",
              "HOST_ACTIVE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "issues": {
            "description": "Output only. A set of errors Hosting systems encountered when trying to establish Hosting's ability to serve secure content for your domain name. Resolve these issues to ensure your `CustomDomain` behaves properly.",
            "items": {
              "$ref": "#/$defs/Status"
            },
            "readOnly": true,
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels used for extra metadata and/or filtering.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The fully-qualified name of the `CustomDomain`.",
            "readOnly": true,
            "type": "string"
          },
          "ownershipState": {
            "description": "Output only. The `OwnershipState` of the domain name this `CustomDomain` refers to.",
            "enum": [
              "OWNERSHIP_STATE_UNSPECIFIED",
              "OWNERSHIP_MISSING",
              "OWNERSHIP_UNREACHABLE",
              "OWNERSHIP_MISMATCH",
              "OWNERSHIP_CONFLICT",
              "OWNERSHIP_PENDING",
              "OWNERSHIP_ACTIVE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "reconciling": {
            "description": "Output only. A field that, if true, indicates that Hosting's systems are attmepting to make the custom domain's state match your preferred state. This is most frequently `true` when initially provisioning a `CustomDomain` after a `CreateCustomDomain` request or when creating a new SSL certificate to match an updated `cert_preference` after an `UpdateCustomDomain` request.",
            "readOnly": true,
            "type": "boolean"
          },
          "redirectTarget": {
            "description": "A domain name that this `CustomDomain` should direct traffic towards. If specified, Hosting will respond to requests against this custom domain with an HTTP 301 code, and route traffic to the specified `redirect_target` instead.",
            "type": "string"
          },
          "requiredDnsUpdates": {
            "$ref": "#/$defs/DnsUpdates"
          },
          "updateTime": {
            "description": "Output only. The last time the `CustomDomain` was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Certificate": {
        "description": "An SSL certificate used to provide end-to-end encryption for requests against your domain name. A `Certificate` can be an actual SSL certificate or, for newly-created custom domains, Hosting's intent to create one.",
        "properties": {
          "createTime": {
            "description": "Output only. The certificate's creation time. For `TEMPORARY` certs this is the time Hosting first generated challenges for your domain name. For all other cert types, it's the time the actual cert was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. The certificate's expiration time. After this time, the cert can no longer be used to provide secure communication between Hosting and your site's visitors.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "issues": {
            "description": "Output only. A set of errors Hosting encountered when attempting to create a cert for your domain name. Resolve these issues to ensure Hosting is able to provide secure communication with your site's visitors.",
            "items": {
              "$ref": "#/$defs/Status"
            },
            "readOnly": true,
            "type": "array"
          },
          "state": {
            "description": "Output only. The state of the certificate. Only the `CERT_ACTIVE` and `CERT_EXPIRING_SOON` states provide SSL coverage for a domain name. If the state is `PROPAGATING` and Hosting had an active cert for the domain name before, that formerly-active cert provides SSL coverage for the domain name until the current cert propagates.",
            "enum": [
              "CERT_STATE_UNSPECIFIED",
              "CERT_PREPARING",
              "CERT_VALIDATING",
              "CERT_PROPAGATING",
              "CERT_ACTIVE",
              "CERT_EXPIRING_SOON",
              "CERT_EXPIRED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Output only. The certificate's type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "TEMPORARY",
              "GROUPED",
              "PROJECT_GROUPED",
              "DEDICATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "verification": {
            "$ref": "#/$defs/CertVerification"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertVerification": {
        "description": "A set of ACME challenges you can use to allow Hosting to create an SSL certificate for your domain name before directing traffic to Hosting servers. Use either the DNS or HTTP challenge; it's not necessary to provide both.",
        "properties": {
          "dns": {
            "$ref": "#/$defs/DnsUpdates"
          },
          "http": {
            "$ref": "#/$defs/HttpUpdate"
          }
        },
        "type": "object"
      },
      "DnsUpdates": {
        "description": "A set of DNS record updates that you should make to allow Hosting to serve secure content in response to requests against your domain name. These updates present the current state of your domain name's DNS records when Hosting last queried them, and the desired set of records that Hosting needs to see before your custom domain can be fully active.",
        "properties": {
          "checkTime": {
            "description": "The last time Hosting checked your custom domain's DNS records.",
            "format": "google-datetime",
            "type": "string"
          },
          "desired": {
            "description": "The set of DNS records Hosting needs to serve secure content on the domain.",
            "items": {
              "$ref": "#/$defs/DnsRecordSet"
            },
            "type": "array"
          },
          "discovered": {
            "description": "The set of DNS records Hosting discovered when inspecting a domain.",
            "items": {
              "$ref": "#/$defs/DnsRecordSet"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DnsRecordSet": {
        "description": "A set of DNS records relevant to the setup and maintenance of a custom domain in Firebase Hosting.",
        "properties": {
          "checkError": {
            "$ref": "#/$defs/Status"
          },
          "domainName": {
            "description": "Output only. The domain name the record set pertains to.",
            "readOnly": true,
            "type": "string"
          },
          "records": {
            "description": "Output only. Records on the domain.",
            "items": {
              "$ref": "#/$defs/DnsRecord"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "DnsRecord": {
        "description": "DNS records are resource records that define how systems and services should behave when handling requests for a domain name. For example, when you add `A` records to your domain name's DNS records, you're informing other systems (such as your users' web browsers) to contact those IPv4 addresses to retrieve resources relevant to your domain name (such as your Hosting site files).",
        "properties": {
          "domainName": {
            "description": "Output only. The domain name the record pertains to, e.g. `foo.bar.com.`.",
            "readOnly": true,
            "type": "string"
          },
          "rdata": {
            "description": "Output only. The data of the record. The meaning of the value depends on record type: - A and AAAA: IP addresses for the domain name. - CNAME: Another domain to check for records. - TXT: Arbitrary text strings associated with the domain name. Hosting uses TXT records to determine which Firebase projects have permission to act on the domain name's behalf. - CAA: The record's flags, tag, and value, e.g. `0 issue \"pki.goog\"`.",
            "readOnly": true,
            "type": "string"
          },
          "requiredAction": {
            "description": "Output only. An enum that indicates the a required action for this record.",
            "enum": [
              "NONE",
              "ADD",
              "REMOVE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Output only. The record's type, which determines what data the record contains.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "A",
              "CNAME",
              "TXT",
              "AAAA",
              "CAA"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpUpdate": {
        "description": "A file you can add to your existing, non-Hosting hosting service that confirms your intent to allow Hosting's Certificate Authorities to create an SSL certificate for your domain.",
        "properties": {
          "checkError": {
            "$ref": "#/$defs/Status"
          },
          "desired": {
            "description": "Output only. A text string to serve at the path.",
            "readOnly": true,
            "type": "string"
          },
          "discovered": {
            "description": "Output only. Whether Hosting was able to find the required file contents on the specified path during its last check.",
            "readOnly": true,
            "type": "string"
          },
          "lastCheckTime": {
            "description": "Output only. The last time Hosting systems checked for the file contents.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "path": {
            "description": "Output only. The path to the file.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://firebasehosting.googleapis.com//v1beta1/{parent}/customDomains{?customDomainId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
