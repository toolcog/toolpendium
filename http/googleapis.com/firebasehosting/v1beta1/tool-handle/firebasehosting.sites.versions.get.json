{
  "name": "firebasehosting_sites_versions_get",
  "description": "Get the specified version that has been created for the specified site. This can include versions that were created for the default `live` channel or for any active preview channels for the specified site.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The fully-qualified resource name for the version, in the format: sites/SITE_ID/versions/VERSION_ID"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://firebasehosting.googleapis.com//v1beta1/{name}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A `Version` is a configuration and a collection of static files which determine how a site is displayed.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**config**: The configuration for how incoming requests to a site should be routed and processed before serving content. The URL request paths are matched against the specified URL patterns in the configuration, then Hosting applies the applicable configuration according to a specific [priority order](https://firebase.google.com/docs/hosting/full-config#hosting_priority_order).",
              {
                "$ul": [
                  "**appAssociation**: How to handle well known App Association files.",
                  "**cleanUrls**: Defines whether to drop the file extension from uploaded files.",
                  "**headers**: An array of objects, where each object specifies a URL pattern that, if matched to the request URL path, triggers Hosting to apply the specified custom response headers.",
                  [
                    "**i18n**: If provided, i18n rewrites are enabled.",
                    {
                      "$ul": [
                        "**root**: Required. The user-supplied path where country and language specific content will be looked for within the public directory."
                      ]
                    }
                  ],
                  "**redirects**: An array of objects (called redirect rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond with a redirect to the specified destination path.",
                  "**rewrites**: An array of objects (called rewrite rules), where each rule specifies a URL pattern that, if matched to the request URL path, triggers Hosting to respond as if the service were given the specified destination URL.",
                  "**trailingSlashBehavior**: Defines how to handle a trailing slash in the URL path."
                ]
              }
            ],
            "**createTime**: Output only. The time at which the version was created.",
            [
              "**createUser**: Contains metadata about the user who performed an action, such as creating a release or finalizing a version.",
              {
                "$ul": [
                  "**email**: The email address of the user when the user performed the action.",
                  "**imageUrl**: A profile image URL for the user. May not be present if the user has changed their email address or deleted their account."
                ]
              }
            ],
            "**deleteTime**: Output only. The time at which the version was `DELETED`.",
            [
              "**deleteUser**: Contains metadata about the user who performed an action, such as creating a release or finalizing a version.",
              {
                "$ul": [
                  "**email**: The email address of the user when the user performed the action.",
                  "**imageUrl**: A profile image URL for the user. May not be present if the user has changed their email address or deleted their account."
                ]
              }
            ],
            "**fileCount**: Output only. The total number of files associated with the version. This value is calculated after a version is `FINALIZED`.",
            "**finalizeTime**: Output only. The time at which the version was `FINALIZED`.",
            [
              "**finalizeUser**: Contains metadata about the user who performed an action, such as creating a release or finalizing a version.",
              {
                "$ul": [
                  "**email**: The email address of the user when the user performed the action.",
                  "**imageUrl**: A profile image URL for the user. May not be present if the user has changed their email address or deleted their account."
                ]
              }
            ],
            "**labels**: The labels used for extra metadata and/or filtering.",
            "**name**: The fully-qualified resource name for the version, in the format: sites/ SITE_ID/versions/VERSION_ID This name is provided in the response body when you call [`CreateVersion`](sites.versions/create).",
            "**status**: The deploy status of the version. For a successful deploy, call [`CreateVersion`](sites.versions/create) to make a new version (`CREATED` status), [upload all desired files](sites.versions/populateFiles) to the version, then [update](sites.versions/patch) the version to the `FINALIZED` status. Note that if you leave the version in the `CREATED` state for more than 12 hours, the system will automatically mark the version as `ABANDONED`. You can also change the status of a version to `DELETED` by calling [`DeleteVersion`](sites.versions/delete).",
            "**versionBytes**: Output only. The total stored bytesize of the version. This value is calculated after a version is `FINALIZED`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
