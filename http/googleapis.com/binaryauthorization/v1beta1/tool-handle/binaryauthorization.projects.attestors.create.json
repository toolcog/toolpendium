{
  "name": "binaryauthorization_projects_attestors_create",
  "description": "Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent of this attestor."
      },
      "attestorId": {
        "type": "string",
        "description": "Required. The attestors ID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Attestor"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Attestor": {
        "description": "An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated.",
        "properties": {
          "description": {
            "description": "Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.",
            "type": "string"
          },
          "etag": {
            "description": "Optional. A checksum, returned by the server, that can be sent on update requests to ensure the attestor has an up-to-date value before attempting to update it. See https://google.aip.dev/154.",
            "type": "string"
          },
          "name": {
            "description": "Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Time when the attestor was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "userOwnedDrydockNote": {
            "$ref": "#/$defs/UserOwnedDrydockNote"
          }
        },
        "type": "object"
      },
      "UserOwnedDrydockNote": {
        "description": "An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user.",
        "properties": {
          "delegationServiceAccountEmail": {
            "description": "Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.",
            "readOnly": true,
            "type": "string"
          },
          "noteReference": {
            "description": "Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.",
            "type": "string"
          },
          "publicKeys": {
            "description": "Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.",
            "items": {
              "$ref": "#/$defs/AttestorPublicKey"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AttestorPublicKey": {
        "description": "An attestor public key that will be used to verify attestations signed by this attestor.",
        "properties": {
          "asciiArmoredPgpPublicKey": {
            "description": "ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.",
            "type": "string"
          },
          "comment": {
            "description": "Optional. A descriptive comment. This field may be updated.",
            "type": "string"
          },
          "id": {
            "description": "The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.",
            "type": "string"
          },
          "pkixPublicKey": {
            "$ref": "#/$defs/PkixPublicKey"
          }
        },
        "type": "object"
      },
      "PkixPublicKey": {
        "description": "A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.",
        "properties": {
          "publicKeyPem": {
            "description": "A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13",
            "type": "string"
          },
          "signatureAlgorithm": {
            "description": "The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).",
            "enum": [
              "SIGNATURE_ALGORITHM_UNSPECIFIED",
              "RSA_PSS_2048_SHA256",
              "RSA_SIGN_PSS_2048_SHA256",
              "RSA_PSS_3072_SHA256",
              "RSA_SIGN_PSS_3072_SHA256",
              "RSA_PSS_4096_SHA256",
              "RSA_SIGN_PSS_4096_SHA256",
              "RSA_PSS_4096_SHA512",
              "RSA_SIGN_PSS_4096_SHA512",
              "RSA_SIGN_PKCS1_2048_SHA256",
              "RSA_SIGN_PKCS1_3072_SHA256",
              "RSA_SIGN_PKCS1_4096_SHA256",
              "RSA_SIGN_PKCS1_4096_SHA512",
              "ECDSA_P256_SHA256",
              "EC_SIGN_P256_SHA256",
              "ECDSA_P384_SHA384",
              "EC_SIGN_P384_SHA384",
              "ECDSA_P521_SHA512",
              "EC_SIGN_P521_SHA512"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://binaryauthorization.googleapis.com//v1beta1/{parent}/attestors{?attestorId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated.",
        "**Key properties:**",
        {
          "$ul": [
            "**description**: Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.",
            "**etag**: Optional. A checksum, returned by the server, that can be sent on update requests to ensure the attestor has an up-to-date value before attempting to update it. See https://google.aip.dev/154.",
            "**name**: Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.",
            "**updateTime**: Output only. Time when the attestor was last updated.",
            [
              "**userOwnedDrydockNote**: An user owned drydock note references a Drydock ATTESTATION_AUTHORITY Note created by the user.",
              {
                "$ul": [
                  "**delegationServiceAccountEmail**: Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.",
                  "**noteReference**: Required. The Drydock resource name of a ATTESTATION_AUTHORITY Note, created by the user, in the format: `projects/*/notes/*` (or the legacy `providers/*/notes/*`). This field may not be updated. An attestation by this attestor is stored as a Drydock ATTESTATION_AUTHORITY Occurrence that names a container image and that links to this Note. Drydock is an external dependency.",
                  "**publicKeys**: Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
