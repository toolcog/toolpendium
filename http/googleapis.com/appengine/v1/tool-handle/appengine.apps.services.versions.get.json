{
  "name": "appengine_apps_services_versions_get",
  "description": "Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.",
  "parameters": {
    "type": "object",
    "properties": {
      "appsId": {
        "type": "string",
        "description": "Part of `name`. Name of the resource requested. Example: apps/myapp/services/default/versions/v1."
      },
      "servicesId": {
        "type": "string",
        "description": "Part of `name`. See documentation of `appsId`."
      },
      "versionsId": {
        "type": "string",
        "description": "Part of `name`. See documentation of `appsId`."
      },
      "view": {
        "enum": [
          "BASIC",
          "FULL"
        ],
        "type": "string",
        "description": "Controls the set of fields returned in the Get response."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "appsId",
      "servicesId",
      "versionsId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://appengine.googleapis.com//v1/apps/{appsId}/services/{servicesId}/versions/{versionsId}{?view,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Version resource is a specific set of source code and configuration files that are deployed into a service.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**apiConfig**: Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration for API handlers.",
              {
                "$ul": [
                  "**authFailAction**: Action to take when users access resources that require authentication. Defaults to redirect.",
                  "**login**: Level of login required to access this resource. Defaults to optional.",
                  "**script**: Path to the script from the application root directory.",
                  "**securityLevel**: Security (HTTPS) enforcement for this URL.",
                  "**url**: URL to serve the endpoint at."
                ]
              }
            ],
            "**appEngineApis**: Allows App Engine second generation runtimes to access the legacy bundled services.",
            [
              "**automaticScaling**: Automatic scaling is based on request rate, response latencies, and other application metrics.",
              {
                "$ul": [
                  "**coolDownPeriod**: The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.",
                  [
                    "**cpuUtilization**: Target scaling by CPU usage.",
                    {
                      "$ul": [
                        "**aggregationWindowLength**: Period of time over which CPU utilization is calculated.",
                        "**targetUtilization**: Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1."
                      ]
                    }
                  ],
                  [
                    "**diskUtilization**: Target scaling by disk usage. Only applicable in the App Engine flexible environment.",
                    {
                      "$ul": [
                        "**targetReadBytesPerSecond**: Target bytes read per second.",
                        "**targetReadOpsPerSecond**: Target ops read per seconds.",
                        "**targetWriteBytesPerSecond**: Target bytes written per second.",
                        "**targetWriteOpsPerSecond**: Target ops written per second."
                      ]
                    }
                  ],
                  "**maxConcurrentRequests**: Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.",
                  "**maxIdleInstances**: Maximum number of idle instances that should be maintained for this version.",
                  "**maxPendingLatency**: Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.",
                  "**maxTotalInstances**: Maximum number of instances that should be started to handle requests for this version.",
                  "**minIdleInstances**: Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.",
                  "**minPendingLatency**: Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.",
                  "**minTotalInstances**: Minimum number of running instances that should be maintained for this version.",
                  [
                    "**networkUtilization**: Target scaling by network usage. Only applicable in the App Engine flexible environment.",
                    {
                      "$ul": [
                        "**targetReceivedBytesPerSecond**: Target bytes received per second.",
                        "**targetReceivedPacketsPerSecond**: Target packets received per second.",
                        "**targetSentBytesPerSecond**: Target bytes sent per second.",
                        "**targetSentPacketsPerSecond**: Target packets sent per second."
                      ]
                    }
                  ],
                  [
                    "**requestUtilization**: Target scaling by request utilization. Only applicable in the App Engine flexible environment.",
                    {
                      "$ul": [
                        "**targetConcurrentRequests**: Target number of concurrent requests.",
                        "**targetRequestCountPerSecond**: Target requests per second."
                      ]
                    }
                  ],
                  [
                    "**standardSchedulerSettings**: Scheduler settings for standard environment.",
                    {
                      "$ul": [
                        "**maxInstances**: Maximum number of instances to run for this version. Set to zero to disable max_instances configuration.",
                        "**minInstances**: Minimum number of instances to run for this version. Set to zero to disable min_instances configuration.",
                        "**targetCpuUtilization**: Target CPU utilization ratio to maintain when scaling.",
                        "**targetThroughputUtilization**: Target throughput utilization ratio to maintain when scaling"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**basicScaling**: A service with basic scaling will create an instance when the application receives a request. The instance will be turned down when the app becomes idle. Basic scaling is ideal for work that is intermittent or driven by user activity.",
              {
                "$ul": [
                  "**idleTimeout**: Duration of time after the last request that an instance must wait before the instance is shut down.",
                  "**maxInstances**: Maximum number of instances to create for this version."
                ]
              }
            ],
            "**betaSettings**: Metadata settings that are supplied to this version to enable beta runtime features.",
            "**buildEnvVariables**: Environment variables available to the build environment.Only returned in GET requests if view=FULL is set.",
            "**createTime**: Time that this version was created.@OutputOnly",
            "**createdBy**: Email address of the user who created this version.@OutputOnly",
            "**defaultExpiration**: Duration that static files should be cached by web proxies and browsers. Only applicable if the corresponding StaticFilesHandler (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions#StaticFilesHandler) does not specify its own expiration time.Only returned in GET requests if view=FULL is set.",
            [
              "**deployment**: Code and application artifacts used to deploy a version to App Engine.",
              {
                "$ul": [
                  [
                    "**cloudBuildOptions**: Options for the build operations performed as a part of the version deployment. Only applicable for App Engine flexible environment when creating a version using source code directly.",
                    {
                      "$ul": [
                        "**appYamlPath**: Path to the yaml file used in deployment, used to determine runtime configuration details.Required for flexible environment builds.See https://cloud.google.com/appengine/docs/standard/python/config/appref for more details.",
                        "**cloudBuildTimeout**: The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes."
                      ]
                    }
                  ],
                  [
                    "**container**: Docker image that is used to create a container and start a VM instance for the version that you deploy. Only applicable for instances running in the App Engine flexible environment.",
                    {
                      "$ul": [
                        "**image**: URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest. Examples: \"gcr.io/my-project/image:tag\" or \"gcr.io/my-project/image@digest\""
                      ]
                    }
                  ],
                  "**files**: Manifest of the files stored in Google Cloud Storage that are included as part of this version. All files must be readable using the credentials supplied with this call.",
                  [
                    "**zip**: The zip file information for a zip deployment.",
                    {
                      "$ul": [
                        "**filesCount**: An estimate of the number of files in a zip for a zip deployment. If set, must be greater than or equal to the actual number of files. Used for optimizing performance; if not provided, deployment may be slow.",
                        "**sourceUrl**: URL of the zip file to deploy from. Must be a URL to a resource in Google Cloud Storage in the form 'http(s)://storage.googleapis.com//'."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**diskUsageBytes**: Total size in bytes of all the files that are included in this version and currently hosted on the App Engine disk.@OutputOnly",
            [
              "**endpointsApiService**: Google Cloud Endpoints (https://cloud.google.com/endpoints) configuration. The Endpoints API Service provides tooling for serving Open API and gRPC endpoints via an NGINX proxy. Only valid for App Engine Flexible environment deployments.The fields here refer to the name and configuration ID of a \"service\" resource in the Service Management API (https://cloud.google.com/service-management/overview).",
              {
                "$ul": [
                  "**configId**: Endpoints service configuration ID as specified by the Service Management API. For example \"2016-09-19r1\".By default, the rollout strategy for Endpoints is RolloutStrategy.FIXED. This means that Endpoints starts up with a particular configuration ID. When a new configuration is rolled out, Endpoints must be given the new configuration ID. The config_id field is used to give the configuration ID and is required in this case.Endpoints also has a rollout strategy called RolloutStrategy.MANAGED. When using this, Endpoints fetches the latest configuration and does not need the configuration ID. In this case, config_id must be omitted.",
                  "**disableTraceSampling**: Enable or disable trace sampling. By default, this is set to false for enabled.",
                  "**name**: Endpoints service name which is the name of the \"service\" resource in the Service Management API. For example \"myapi.endpoints.myproject.cloud.goog\"",
                  "**rolloutStrategy**: Endpoints rollout strategy. If FIXED, config_id must be specified. If MANAGED, config_id must be omitted."
                ]
              }
            ],
            [
              "**entrypoint**: The entrypoint for the application.",
              {
                "$ul": [
                  "**shell**: The format should be a shell command that can be fed to bash -c."
                ]
              }
            ],
            "**env**: App Engine execution environment for this version.Defaults to standard.",
            "**envVariables**: Environment variables available to the application.Only returned in GET requests if view=FULL is set.",
            "**errorHandlers**: Custom static error pages. Limited to 10KB per page.Only returned in GET requests if view=FULL is set.",
            [
              "**flexibleRuntimeSettings**: Runtime settings for the App Engine flexible environment.",
              {
                "$ul": [
                  "**operatingSystem**: The operating system of the application runtime.",
                  "**runtimeVersion**: The runtime version of an App Engine flexible application."
                ]
              }
            ],
            "**generatedCustomerMetadata**: Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetVersionRequest",
            "**handlers**: An ordered list of URL-matching patterns that should be applied to incoming requests. The first matching URL handles the request and other request handlers are not attempted.Only returned in GET requests if view=FULL is set.",
            [
              "**healthCheck**: Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances. Only applicable for instances in App Engine flexible environment.",
              {
                "$ul": [
                  "**checkInterval**: Interval between health checks.",
                  "**disableHealthCheck**: Whether to explicitly disable health checks for this instance.",
                  "**healthyThreshold**: Number of consecutive successful health checks required before receiving traffic.",
                  "**host**: Host header to send when performing an HTTP health check. Example: \"myapp.appspot.com\"",
                  "**restartThreshold**: Number of consecutive failed health checks required before an instance is restarted.",
                  "**timeout**: Time before the health check is considered failed.",
                  "**unhealthyThreshold**: Number of consecutive failed health checks required before removing traffic."
                ]
              }
            ],
            "**id**: Relative name of the version within the service. Example: v1. Version names can contain only lowercase letters, numbers, or hyphens. Reserved names: \"default\", \"latest\", and any name with the prefix \"ah-\".",
            "**inboundServices**: Before an application can receive email or XMPP messages, the application must be configured to enable the service.",
            "**instanceClass**: Instance class that is used to run this version. Valid values are: AutomaticScaling: F1, F2, F4, F4_1G ManualScaling or BasicScaling: B1, B2, B4, B8, B4_1GDefaults to F1 for AutomaticScaling and B1 for ManualScaling or BasicScaling.",
            "**libraries**: Configuration for third-party Python runtime libraries that are required by the application.Only returned in GET requests if view=FULL is set.",
            [
              "**livenessCheck**: Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.",
              {
                "$ul": [
                  "**checkInterval**: Interval between health checks.",
                  "**failureThreshold**: Number of consecutive failed checks required before considering the VM unhealthy.",
                  "**host**: Host header to send when performing a HTTP Liveness check. Example: \"myapp.appspot.com\"",
                  "**initialDelay**: The initial delay before starting to execute the checks.",
                  "**path**: The request path.",
                  "**successThreshold**: Number of consecutive successful checks required before considering the VM healthy.",
                  "**timeout**: Time before the check is considered failed."
                ]
              }
            ],
            [
              "**manualScaling**: A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.",
              {
                "$ul": [
                  "**instances**: Number of instances to assign to the service at the start. This number can later be altered by using the Modules API (https://cloud.google.com/appengine/docs/python/modules/functions) set_num_instances() function."
                ]
              }
            ],
            "**name**: Full path to the Version resource in the API. Example: apps/myapp/services/default/versions/v1.@OutputOnly",
            [
              "**network**: Extra network settings. Only applicable in the App Engine flexible environment.",
              {
                "$ul": [
                  "**forwardedPorts**: List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.",
                  "**instanceIpMode**: The IP mode for instances. Only applicable in the App Engine flexible environment.",
                  "**instanceTag**: Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.",
                  "**name**: Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.",
                  "**sessionAffinity**: Enable session affinity. Only applicable in the App Engine flexible environment.",
                  "**subnetworkName**: Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application."
                ]
              }
            ],
            "**nobuildFilesRegex**: Files that match this pattern will not be built into this version. Only applicable for Go runtimes.Only returned in GET requests if view=FULL is set.",
            [
              "**readinessCheck**: Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.",
              {
                "$ul": [
                  "**appStartTimeout**: A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.",
                  "**checkInterval**: Interval between health checks.",
                  "**failureThreshold**: Number of consecutive failed checks required before removing traffic.",
                  "**host**: Host header to send when performing a HTTP Readiness check. Example: \"myapp.appspot.com\"",
                  "**path**: The request path.",
                  "**successThreshold**: Number of consecutive successful checks required before receiving traffic.",
                  "**timeout**: Time before the check is considered failed."
                ]
              }
            ],
            [
              "**resources**: Machine resources for a version.",
              {
                "$ul": [
                  "**cpu**: Number of CPU cores needed.",
                  "**diskGb**: Disk size (GB) needed.",
                  "**kmsKeyReference**: The name of the encryption key that is stored in Google Cloud KMS. Only should be used by Cloud Composer to encrypt the vm disk",
                  "**memoryGb**: Memory (GB) needed.",
                  "**volumes**: User specified volumes."
                ]
              }
            ],
            "**runtime**: Desired runtime. Example: python27.",
            "**runtimeApiVersion**: The version of the API in the given runtime environment. Please see the app.yaml reference for valid values at https://cloud.google.com/appengine/docs/standard//config/appref",
            "**runtimeChannel**: The channel of the runtime to use. Only available for some runtimes. Defaults to the default channel.",
            "**runtimeMainExecutablePath**: The path or name of the app's main executable.",
            "**serviceAccount**: The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as default if this field is neither provided in app.yaml file nor through CLI flag.",
            "**servingStatus**: Current serving status of this version. Only the versions with a SERVING status create instances and can be billed.SERVING_STATUS_UNSPECIFIED is an invalid value. Defaults to SERVING.",
            "**threadsafe**: Whether multiple requests can be dispatched to this version at once.",
            "**versionUrl**: Serving URL for this version. Example: \"https://myversion-dot-myservice-dot-myapp.appspot.com\"@OutputOnly",
            "**vm**: Whether to deploy this version in a container on a virtual machine.",
            [
              "**vpcAccessConnector**: VPC access connector specification.",
              {
                "$ul": [
                  "**egressSetting**: The egress setting for the connector, controlling what traffic is diverted through it.",
                  "**name**: Full Serverless VPC Access Connector name e.g. projects/my-project/locations/us-central1/connectors/c1."
                ]
              }
            ],
            "**zones**: The Google Compute Engine zones that are supported by this version in the App Engine flexible environment. Deprecated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
