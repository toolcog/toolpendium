{
  "name": "appengine_apps_authorizedCertificates_patch",
  "description": "Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.",
  "parameters": {
    "type": "object",
    "properties": {
      "appsId": {
        "type": "string",
        "description": "Part of `name`. Name of the resource to update. Example: apps/myapp/authorizedCertificates/12345."
      },
      "authorizedCertificatesId": {
        "type": "string",
        "description": "Part of `name`. See documentation of `appsId`."
      },
      "updateMask": {
        "type": "string",
        "description": "Standard field mask for the set of fields to be updated. Updates are only supported on the certificate_raw_data and display_name fields."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/AuthorizedCertificate"
      }
    },
    "required": [
      "appsId",
      "authorizedCertificatesId"
    ],
    "$defs": {
      "AuthorizedCertificate": {
        "description": "An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains.",
        "properties": {
          "certificateRawData": {
            "$ref": "#/$defs/CertificateRawData"
          },
          "displayName": {
            "description": "The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.",
            "type": "string"
          },
          "domainMappingsCount": {
            "description": "Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly",
            "format": "int32",
            "type": "integer"
          },
          "domainNames": {
            "description": "Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "expireTime": {
            "description": "The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly",
            "format": "google-datetime",
            "type": "string"
          },
          "id": {
            "description": "Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly",
            "type": "string"
          },
          "managedCertificate": {
            "$ref": "#/$defs/ManagedCertificate"
          },
          "name": {
            "description": "Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly",
            "type": "string"
          },
          "visibleDomainMappings": {
            "description": "The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateRawData": {
        "description": "An SSL certificate obtained from a certificate authority.",
        "properties": {
          "privateKey": {
            "description": "Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly",
            "type": "string"
          },
          "publicCertificate": {
            "description": "PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- ",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManagedCertificate": {
        "description": "A certificate managed by App Engine.",
        "properties": {
          "lastRenewalTime": {
            "description": "Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly",
            "format": "google-datetime",
            "type": "string"
          },
          "status": {
            "description": "Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly",
            "enum": [
              "UNSPECIFIED_STATUS",
              "OK",
              "PENDING",
              "FAILED_RETRYING_INTERNAL",
              "FAILED_RETRYING_NOT_VISIBLE",
              "FAILED_PERMANENTLY_NOT_VISIBLE",
              "FAILED_RETRYING_CAA_FORBIDDEN",
              "FAILED_RETRYING_CAA_CHECKING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://appengine.googleapis.com//v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**certificateRawData**: An SSL certificate obtained from a certificate authority.",
              {
                "$ul": [
                  "**privateKey**: Unencrypted PEM encoded RSA private key. This field is set once on certificate creation and then encrypted. The key size must be 2048 bits or fewer. Must include the header and footer. Example: -----BEGIN RSA PRIVATE KEY----- -----END RSA PRIVATE KEY----- @InputOnly",
                  "**publicCertificate**: PEM encoded x.509 public key certificate. This field is set once on certificate creation. Must include the header and footer. Example: -----BEGIN CERTIFICATE----- -----END CERTIFICATE----- "
                ]
              }
            ],
            "**displayName**: The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.",
            "**domainMappingsCount**: Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly",
            "**domainNames**: Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly",
            "**expireTime**: The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly",
            "**id**: Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly",
            [
              "**managedCertificate**: A certificate managed by App Engine.",
              {
                "$ul": [
                  "**lastRenewalTime**: Time at which the certificate was last renewed. The renewal process is fully managed. Certificate renewal will automatically occur before the certificate expires. Renewal errors can be tracked via ManagementStatus.@OutputOnly",
                  "**status**: Status of certificate management. Refers to the most recent certificate acquisition or renewal attempt.@OutputOnly"
                ]
              }
            ],
            "**name**: Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly",
            "**visibleDomainMappings**: The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
