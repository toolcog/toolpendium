{
  "name": "appengine_apps_patch",
  "description": "Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application. iap - Identity-Aware Proxy properties for the application.",
  "parameters": {
    "type": "object",
    "properties": {
      "appsId": {
        "type": "string",
        "description": "Part of `name`. Name of the Application resource to update. Example: apps/myapp."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. Standard field mask for the set of fields to be updated."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Application"
      }
    },
    "required": [
      "appsId"
    ],
    "$defs": {
      "Application": {
        "description": "An Application resource contains the top-level configuration of an App Engine application.",
        "properties": {
          "authDomain": {
            "description": "Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.",
            "type": "string"
          },
          "codeBucket": {
            "description": "Output only. Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly",
            "readOnly": true,
            "type": "string"
          },
          "databaseType": {
            "description": "The type of the Cloud Firestore or Cloud Datastore database associated with this application.",
            "enum": [
              "DATABASE_TYPE_UNSPECIFIED",
              "CLOUD_DATASTORE",
              "CLOUD_FIRESTORE",
              "CLOUD_DATASTORE_COMPATIBILITY"
            ],
            "type": "string"
          },
          "defaultBucket": {
            "description": "Output only. Google Cloud Storage bucket that can be used by this application to store content.@OutputOnly",
            "readOnly": true,
            "type": "string"
          },
          "defaultCookieExpiration": {
            "description": "Cookie expiration policy for this application.",
            "format": "google-duration",
            "type": "string"
          },
          "defaultHostname": {
            "description": "Output only. Hostname used to reach this application, as resolved by App Engine.@OutputOnly",
            "readOnly": true,
            "type": "string"
          },
          "dispatchRules": {
            "description": "HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent. Up to 20 dispatch rules can be supported.",
            "items": {
              "$ref": "#/$defs/UrlDispatchRule"
            },
            "type": "array"
          },
          "featureSettings": {
            "$ref": "#/$defs/FeatureSettings"
          },
          "gcrDomain": {
            "description": "Output only. The Google Container Registry domain used for storing managed build docker images for this application.",
            "readOnly": true,
            "type": "string"
          },
          "generatedCustomerMetadata": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetApplicationRequest",
            "type": "object"
          },
          "iap": {
            "$ref": "#/$defs/IdentityAwareProxy"
          },
          "id": {
            "description": "Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.",
            "type": "string"
          },
          "locationId": {
            "description": "Location from which this application runs. Application instances run out of the data centers in the specified location, which is also where all of the application's end user content is stored.Defaults to us-central.View the list of supported locations (https://cloud.google.com/appengine/docs/locations).",
            "type": "string"
          },
          "name": {
            "description": "Output only. Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly",
            "readOnly": true,
            "type": "string"
          },
          "serviceAccount": {
            "description": "The service account associated with the application. This is the app-level default identity. If no identity provided during create version, Admin API will fallback to this one.",
            "type": "string"
          },
          "servingStatus": {
            "description": "Serving status of this application.",
            "enum": [
              "UNSPECIFIED",
              "SERVING",
              "USER_DISABLED",
              "SYSTEM_DISABLED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UrlDispatchRule": {
        "description": "Rules to match an HTTP request and dispatch that request to a service.",
        "properties": {
          "domain": {
            "description": "Domain name to match against. The wildcard \"*\" is supported if specified before a period: \"*.\".Defaults to matching all domains: \"*\".",
            "type": "string"
          },
          "path": {
            "description": "Pathname within the host. Must start with a \"/\". A single \"*\" can be included at the end of the path.The sum of the lengths of the domain and path may not exceed 100 characters.",
            "type": "string"
          },
          "service": {
            "description": "Resource ID of a service in this application that should serve the matched request. The service must already exist. Example: default.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FeatureSettings": {
        "description": "The feature specific settings to be used in the application. These define behaviors that are user configurable.",
        "properties": {
          "splitHealthChecks": {
            "description": "Boolean value indicating if split health checks should be used instead of the legacy health checks. At an app.yaml level, this means defaulting to 'readiness_check' and 'liveness_check' values instead of 'health_check' ones. Once the legacy 'health_check' behavior is deprecated, and this value is always true, this setting can be removed.",
            "type": "boolean"
          },
          "useContainerOptimizedOs": {
            "description": "If true, use Container-Optimized OS (https://cloud.google.com/container-optimized-os/) base image for VMs, rather than a base Debian image.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IdentityAwareProxy": {
        "description": "Identity-Aware Proxy",
        "properties": {
          "enabled": {
            "description": "Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.",
            "type": "boolean"
          },
          "oauth2ClientId": {
            "description": "OAuth2 client ID to use for the authentication flow.",
            "type": "string"
          },
          "oauth2ClientSecret": {
            "description": "OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly",
            "type": "string"
          },
          "oauth2ClientSecretSha256": {
            "description": "Output only. Hex-encoded SHA-256 hash of the client secret.@OutputOnly",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://appengine.googleapis.com//v1beta/apps/{appsId}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.",
            [
              "**error**: The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
