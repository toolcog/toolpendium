{
  "name": "walletobjects_media_download",
  "description": "Downloads rotating barcode values for the transit object referenced by the given object ID.",
  "parameters": {
    "type": "object",
    "properties": {
      "resourceId": {
        "type": "string",
        "description": "The unique identifier for an object. This ID must be unique across all objects from an issuer. This value should follow the format issuer ID. identifier where the former is issued by Google and latter is chosen by you. Your unique identifier should only include alphanumeric characters, '.', '_', or '-'."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "resourceId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://walletobjects.googleapis.com//walletobjects/v1/transitObject/{resourceId}/downloadRotatingBarcodeValues{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A reference to data stored on the filesystem, on GFS or in blobstore.",
        "**Key properties:**",
        {
          "$ul": [
            "**algorithm**: Deprecated, use one of explicit hash type fields instead. Algorithm used for calculating the hash. As of 2011/01/21, \"MD5\" is the only possible value for this field. New values may be added at any time.",
            "**bigstoreObjectRef**: Use object_id instead.",
            "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
            [
              "**blobstore2Info**: Information to read/write to blobstore2.",
              {
                "$ul": [
                  "**blobGeneration**: The blob generation id.",
                  "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                  "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                  "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                  "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                ]
              }
            ],
            "**compositeMedia**: A composite media composed of one or more media objects, set if reference_type is COMPOSITE_MEDIA. The media length field must be set to the sum of the lengths of all composite media objects. Note: All composite media must have length specified.",
            "**contentType**: MIME type of the data",
            [
              "**contentTypeInfo**: Detailed Content-Type information from Scotty. The Content-Type of the media will typically be filled in by the header or Scotty's best_guess, but this extended information provides the backend with more information so that it can make a better decision if needed. This is only used on media upload requests from Scotty.",
              {
                "$ul": [
                  "**bestGuess**: Scotty's best guess of what the content type of the file is.",
                  "**fromBytes**: The content type of the file derived by looking at specific bytes (i.e. \"magic bytes\") of the actual file.",
                  "**fromFileName**: The content type of the file derived from the file extension of the original file name used by the client.",
                  "**fromHeader**: The content type of the file as specified in the request headers, multipart headers, or RUPIO start request.",
                  "**fromUrlPath**: The content type of the file derived from the file extension of the URL path. The URL path is assumed to represent a file name (which is typically only true for agents that are providing a REST API)."
                ]
              }
            ],
            "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
            "**crc32cHash**: For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash provided by the agent to be used to verify the data being downloaded. Currently only supported for inline payloads. Further, only crc32c_hash is currently supported.",
            [
              "**diffChecksumsResponse**: Backend response for a Diff get checksums response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.",
              {
                "$ul": [
                  [
                    "**checksumsLocation**: A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.",
                    {
                      "$ul": [
                        "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
                        [
                          "**blobstore2Info**: Information to read/write to blobstore2.",
                          {
                            "$ul": [
                              "**blobGeneration**: The blob generation id.",
                              "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                              "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                              "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                              "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                            ]
                          }
                        ],
                        "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
                        "**crc32cHash**: crc32.c hash for the payload.",
                        "**inline**: Media data, set if reference_type is INLINE",
                        "**length**: Size of the data, in bytes",
                        "**md5Hash**: MD5 hash for the payload.",
                        [
                          "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
                          {
                            "$ul": [
                              "**bucketName**: The name of the bucket to which this object belongs.",
                              "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                              "**objectName**: The name of the object."
                            ]
                          }
                        ],
                        "**path**: Path to the data, set if reference_type is PATH",
                        "**referenceType**: Describes what the field reference contains.",
                        "**sha1Hash**: SHA-1 hash for the payload."
                      ]
                    }
                  ],
                  "**chunkSizeBytes**: The chunk size of checksums. Must be a multiple of 256KB.",
                  [
                    "**objectLocation**: A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.",
                    {
                      "$ul": [
                        "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
                        [
                          "**blobstore2Info**: Information to read/write to blobstore2.",
                          {
                            "$ul": [
                              "**blobGeneration**: The blob generation id.",
                              "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                              "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                              "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                              "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                            ]
                          }
                        ],
                        "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
                        "**crc32cHash**: crc32.c hash for the payload.",
                        "**inline**: Media data, set if reference_type is INLINE",
                        "**length**: Size of the data, in bytes",
                        "**md5Hash**: MD5 hash for the payload.",
                        [
                          "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
                          {
                            "$ul": [
                              "**bucketName**: The name of the bucket to which this object belongs.",
                              "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                              "**objectName**: The name of the object."
                            ]
                          }
                        ],
                        "**path**: Path to the data, set if reference_type is PATH",
                        "**referenceType**: Describes what the field reference contains.",
                        "**sha1Hash**: SHA-1 hash for the payload."
                      ]
                    }
                  ],
                  "**objectSizeBytes**: The total size of the server object.",
                  "**objectVersion**: The object version of the object the checksums are being returned for."
                ]
              }
            ],
            [
              "**diffDownloadResponse**: Backend response for a Diff download response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.",
              {
                "$ul": [
                  [
                    "**objectLocation**: A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.",
                    {
                      "$ul": [
                        "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
                        [
                          "**blobstore2Info**: Information to read/write to blobstore2.",
                          {
                            "$ul": [
                              "**blobGeneration**: The blob generation id.",
                              "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                              "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                              "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                              "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                            ]
                          }
                        ],
                        "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
                        "**crc32cHash**: crc32.c hash for the payload.",
                        "**inline**: Media data, set if reference_type is INLINE",
                        "**length**: Size of the data, in bytes",
                        "**md5Hash**: MD5 hash for the payload.",
                        [
                          "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
                          {
                            "$ul": [
                              "**bucketName**: The name of the bucket to which this object belongs.",
                              "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                              "**objectName**: The name of the object."
                            ]
                          }
                        ],
                        "**path**: Path to the data, set if reference_type is PATH",
                        "**referenceType**: Describes what the field reference contains.",
                        "**sha1Hash**: SHA-1 hash for the payload."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**diffUploadRequest**: A Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.",
              {
                "$ul": [
                  [
                    "**checksumsInfo**: A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.",
                    {
                      "$ul": [
                        "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
                        [
                          "**blobstore2Info**: Information to read/write to blobstore2.",
                          {
                            "$ul": [
                              "**blobGeneration**: The blob generation id.",
                              "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                              "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                              "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                              "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                            ]
                          }
                        ],
                        "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
                        "**crc32cHash**: crc32.c hash for the payload.",
                        "**inline**: Media data, set if reference_type is INLINE",
                        "**length**: Size of the data, in bytes",
                        "**md5Hash**: MD5 hash for the payload.",
                        [
                          "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
                          {
                            "$ul": [
                              "**bucketName**: The name of the bucket to which this object belongs.",
                              "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                              "**objectName**: The name of the object."
                            ]
                          }
                        ],
                        "**path**: Path to the data, set if reference_type is PATH",
                        "**referenceType**: Describes what the field reference contains.",
                        "**sha1Hash**: SHA-1 hash for the payload."
                      ]
                    }
                  ],
                  [
                    "**objectInfo**: A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.",
                    {
                      "$ul": [
                        "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
                        [
                          "**blobstore2Info**: Information to read/write to blobstore2.",
                          {
                            "$ul": [
                              "**blobGeneration**: The blob generation id.",
                              "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                              "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                              "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                              "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                            ]
                          }
                        ],
                        "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
                        "**crc32cHash**: crc32.c hash for the payload.",
                        "**inline**: Media data, set if reference_type is INLINE",
                        "**length**: Size of the data, in bytes",
                        "**md5Hash**: MD5 hash for the payload.",
                        [
                          "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
                          {
                            "$ul": [
                              "**bucketName**: The name of the bucket to which this object belongs.",
                              "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                              "**objectName**: The name of the object."
                            ]
                          }
                        ],
                        "**path**: Path to the data, set if reference_type is PATH",
                        "**referenceType**: Describes what the field reference contains.",
                        "**sha1Hash**: SHA-1 hash for the payload."
                      ]
                    }
                  ],
                  "**objectVersion**: The object version of the object that is the base version the incoming diff script will be applied to. This field will always be filled in."
                ]
              }
            ],
            [
              "**diffUploadResponse**: Backend response for a Diff upload request. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.",
              {
                "$ul": [
                  "**objectVersion**: The object version of the object at the server. Must be included in the end notification response. The version in the end notification response must correspond to the new version of the object that is now stored at the server, after the upload.",
                  [
                    "**originalObject**: A sequence of media data references representing composite data. Introduced to support Bigstore composite objects. For details, visit http://go/bigstore-composites.",
                    {
                      "$ul": [
                        "**blobRef**: Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should be the byte representation of a blobstore.BlobRef. Since Blobstore is deprecating v1, use blobstore2_info instead. For now, any v2 blob will also be represented in this field as v1 BlobRef.",
                        [
                          "**blobstore2Info**: Information to read/write to blobstore2.",
                          {
                            "$ul": [
                              "**blobGeneration**: The blob generation id.",
                              "**blobId**: The blob id, e.g., /blobstore/prod/playground/scotty",
                              "**downloadReadHandle**: Read handle passed from Bigstore -> Scotty for a GCS download. This is a signed, serialized blobstore2.ReadHandle proto which must never be set outside of Bigstore, and is not applicable to non-GCS media downloads.",
                              "**readToken**: The blob read token. Needed to read blobs that have not been replicated. Might not be available until the final call.",
                              "**uploadMetadataContainer**: Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a signed, serialized blobstore2.BlobMetadataContainer proto which must never be consumed outside of Bigstore, and is not applicable to non-GCS media uploads."
                            ]
                          }
                        ],
                        "**cosmoBinaryReference**: A binary data reference for a media download. Serves as a technology-agnostic binary reference in some Google infrastructure. This value is a serialized storage_cosmo.BinaryReference proto. Storing it as bytes is a hack to get around the fact that the cosmo proto (as well as others it includes) doesn't support JavaScript. This prevents us from including the actual type of this field.",
                        "**crc32cHash**: crc32.c hash for the payload.",
                        "**inline**: Media data, set if reference_type is INLINE",
                        "**length**: Size of the data, in bytes",
                        "**md5Hash**: MD5 hash for the payload.",
                        [
                          "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
                          {
                            "$ul": [
                              "**bucketName**: The name of the bucket to which this object belongs.",
                              "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                              "**objectName**: The name of the object."
                            ]
                          }
                        ],
                        "**path**: Path to the data, set if reference_type is PATH",
                        "**referenceType**: Describes what the field reference contains.",
                        "**sha1Hash**: SHA-1 hash for the payload."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**diffVersionResponse**: Backend response for a Diff get version response. For details on the Scotty Diff protocol, visit http://go/scotty-diff-protocol.",
              {
                "$ul": [
                  "**objectSizeBytes**: The total size of the server object.",
                  "**objectVersion**: The version of the object stored at the server."
                ]
              }
            ],
            [
              "**downloadParameters**: Parameters specific to media downloads.",
              {
                "$ul": [
                  "**allowGzipCompression**: A boolean to be returned in the response to Scotty. Allows/disallows gzip encoding of the payload content when the server thinks it's advantageous (hence, does not guarantee compression) which allows Scotty to GZip the response to the client.",
                  "**ignoreRange**: Determining whether or not Apiary should skip the inclusion of any Content-Range header on its response to Scotty."
                ]
              }
            ],
            "**filename**: Original file name",
            "**hash**: Deprecated, use one of explicit hash type fields instead. These two hash related fields will only be populated on Scotty based media uploads and will contain the content of the hash group in the NotificationRequest: http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash Hex encoded hash value of the uploaded media.",
            "**hashVerified**: For Scotty uploads only. If a user sends a hash code and the backend has requested that Scotty verify the upload against the client hash, Scotty will perform the check on behalf of the backend and will reject it if the hashes don't match. This is set to true if Scotty performed this verification.",
            "**inline**: Media data, set if reference_type is INLINE",
            "**isPotentialRetry**: |is_potential_retry| is set false only when Scotty is certain that it has not sent the request before. When a client resumes an upload, this field must be set true in agent calls, because Scotty cannot be certain that it has never sent the request before due to potential failure in the session state persistence.",
            "**length**: Size of the data, in bytes",
            "**md5Hash**: Scotty-provided MD5 hash for an upload.",
            "**mediaId**: Media id to forward to the operation GetMedia. Can be set if reference_type is GET_MEDIA.",
            [
              "**objectId**: This is a copy of the tech.blob.ObjectId proto, which could not be used directly here due to transitive closure issues with JavaScript support; see http://b/8801763.",
              {
                "$ul": [
                  "**bucketName**: The name of the bucket to which this object belongs.",
                  "**generation**: Generation of the object. Generations are monotonically increasing across writes, allowing them to be be compared to determine which generation is newer. If this is omitted in a request, then you are requesting the live object. See http://go/bigstore-versions",
                  "**objectName**: The name of the object."
                ]
              }
            ],
            "**path**: Path to the data, set if reference_type is PATH",
            "**referenceType**: Describes what the field reference contains.",
            "**sha1Hash**: Scotty-provided SHA1 hash for an upload.",
            "**sha256Hash**: Scotty-provided SHA256 hash for an upload.",
            "**timestamp**: Time at which the media data was last updated, in milliseconds since UNIX epoch",
            "**token**: A unique fingerprint/version id for the media data"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
