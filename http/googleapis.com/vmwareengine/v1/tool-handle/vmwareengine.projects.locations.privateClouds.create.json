{
  "name": "vmwareengine_projects_locations_privateClouds_create",
  "description": "Creates a new `PrivateCloud` resource in a given project and location. Private clouds of type `STANDARD` and `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are regional. Creating a private cloud also creates a [management cluster](https://cloud.google.com/vmware-engine/docs/concepts-vmware-components) for that private cloud.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the location to create the new private cloud in. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a`"
      },
      "privateCloudId": {
        "type": "string",
        "description": "Required. The user-provided identifier of the private cloud to be created. This identifier must be unique among each `PrivateCloud` within the parent and becomes the final token in the name URI. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)"
      },
      "requestId": {
        "type": "string",
        "description": "Optional. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. True if you want the request to be validated and not executed; false otherwise."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/PrivateCloud"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "PrivateCloud": {
        "description": "Represents a private cloud resource. Private clouds of type `STANDARD` and `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are regional.",
        "properties": {
          "createTime": {
            "description": "Output only. Creation time of this resource.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. Time when the resource was scheduled for deletion.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "User-provided description for this private cloud.",
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. Time when the resource will be irreversibly deleted.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "hcx": {
            "$ref": "#/$defs/Hcx"
          },
          "managementCluster": {
            "$ref": "#/$defs/ManagementCluster"
          },
          "name": {
            "description": "Output only. The resource name of this private cloud. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`",
            "readOnly": true,
            "type": "string"
          },
          "networkConfig": {
            "$ref": "#/$defs/NetworkConfig"
          },
          "nsx": {
            "$ref": "#/$defs/Nsx"
          },
          "state": {
            "description": "Output only. State of the resource. New values may be added to this enum when appropriate.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "CREATING",
              "UPDATING",
              "FAILED",
              "DELETED",
              "PURGING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Optional. Type of the private cloud. Defaults to STANDARD.",
            "enum": [
              "STANDARD",
              "TIME_LIMITED",
              "STRETCHED"
            ],
            "type": "string"
          },
          "uid": {
            "description": "Output only. System-generated unique identifier for the resource.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Last update time of this resource.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "vcenter": {
            "$ref": "#/$defs/Vcenter"
          }
        },
        "type": "object"
      },
      "Hcx": {
        "description": "Details about a HCX Cloud Manager appliance.",
        "properties": {
          "fqdn": {
            "description": "Fully qualified domain name of the appliance.",
            "type": "string"
          },
          "internalIp": {
            "description": "Internal IP address of the appliance.",
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of the appliance.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "CREATING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "Version of the appliance.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManagementCluster": {
        "description": "Management cluster configuration.",
        "properties": {
          "clusterId": {
            "description": "Required. The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)",
            "type": "string"
          },
          "nodeTypeConfigs": {
            "additionalProperties": {
              "$ref": "#/$defs/NodeTypeConfig"
            },
            "description": "Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).",
            "type": "object"
          },
          "stretchedClusterConfig": {
            "$ref": "#/$defs/StretchedClusterConfig"
          }
        },
        "type": "object"
      },
      "NodeTypeConfig": {
        "description": "Information about the type and number of nodes associated with the cluster.",
        "properties": {
          "customCoreCount": {
            "description": "Optional. Customized number of cores available to each node of the type. This number must always be one of `nodeType.availableCustomCoreCounts`. If zero is provided max value from `nodeType.availableCustomCoreCounts` will be used.",
            "format": "int32",
            "type": "integer"
          },
          "nodeCount": {
            "description": "Required. The number of nodes of this type in the cluster",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StretchedClusterConfig": {
        "description": "Configuration of a stretched cluster.",
        "properties": {
          "preferredLocation": {
            "description": "Required. Zone that will remain operational when connection between the two zones is lost. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-a` where `{project}` can either be a project number or a project ID.",
            "type": "string"
          },
          "secondaryLocation": {
            "description": "Required. Additional zone for a higher level of availability and load balancing. Specify the resource name of a zone that belongs to the region of the private cloud. For example: `projects/{project}/locations/europe-west3-b` where `{project}` can either be a project number or a project ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkConfig": {
        "description": "Network configuration in the consumer project with which the peering has to be done.",
        "properties": {
          "dnsServerIp": {
            "description": "Output only. DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.",
            "readOnly": true,
            "type": "string"
          },
          "managementCidr": {
            "description": "Required. Management CIDR used by VMware management appliances.",
            "type": "string"
          },
          "managementIpAddressLayoutVersion": {
            "description": "Output only. The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "vmwareEngineNetwork": {
            "description": "Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.",
            "type": "string"
          },
          "vmwareEngineNetworkCanonical": {
            "description": "Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Nsx": {
        "description": "Details about a NSX Manager appliance.",
        "properties": {
          "fqdn": {
            "description": "Fully qualified domain name of the appliance.",
            "type": "string"
          },
          "internalIp": {
            "description": "Internal IP address of the appliance.",
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of the appliance.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "CREATING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "Version of the appliance.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Vcenter": {
        "description": "Details about a vCenter Server management appliance.",
        "properties": {
          "fqdn": {
            "description": "Fully qualified domain name of the appliance.",
            "type": "string"
          },
          "internalIp": {
            "description": "Internal IP address of the appliance.",
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of the appliance.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "CREATING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "Version of the appliance.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://vmwareengine.googleapis.com//v1/{parent}/privateClouds{?privateCloudId,requestId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
