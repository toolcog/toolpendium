{
  "name": "servicecontrol_services_check",
  "description": "Checks whether an operation on a service should be allowed to proceed based on the configuration of the service and related policies. It must be called before the operation is executed. If feasible, the client should cache the check results and reuse them for 60 seconds. In case of any server errors, the client should rely on the cached results for much longer time to avoid outage. WARNING: There is general 60s delay for the configuration and policy propagation, therefore callers MUST NOT depend on the `Check` method having the latest policy information. NOTE: the CheckRequest has the size limit (wire-format byte size) of 1MB. This method requires the `servicemanagement.services.check` permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam).",
  "parameters": {
    "type": "object",
    "properties": {
      "serviceName": {
        "type": "string",
        "description": "The service name as specified in its service configuration. For example, `\"pubsub.googleapis.com\"`. See [google.api.Service](https://cloud.google.com/service-management/reference/rpc/google.api#google.api.Service) for the definition of a service name."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CheckRequest"
      }
    },
    "required": [
      "serviceName"
    ],
    "$defs": {
      "CheckRequest": {
        "description": "Request message for the Check method.",
        "properties": {
          "operation": {
            "$ref": "#/$defs/Operation"
          },
          "requestProjectSettings": {
            "description": "Requests the project settings to be returned as part of the check response.",
            "type": "boolean"
          },
          "serviceConfigId": {
            "description": "Specifies which version of service configuration should be used to process the request. If unspecified or no matching version can be found, the latest one will be used.",
            "type": "string"
          },
          "skipActivationCheck": {
            "description": "Indicates if service activation check should be skipped for this request. Default behavior is to perform the check and apply relevant quota. WARNING: Setting this flag to \"true\" will disable quota enforcement.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "Represents information regarding an operation.",
        "properties": {
          "consumerId": {
            "description": "Identity of the consumer who is using the service. This field should be filled in for the operations initiated by a consumer, but not for service-initiated operations that are not related to a specific consumer. - This can be in one of the following formats: - project:PROJECT_ID, - project`_`number:PROJECT_NUMBER, - projects/PROJECT_ID or PROJECT_NUMBER, - folders/FOLDER_NUMBER, - organizations/ORGANIZATION_NUMBER, - api`_`key:API_KEY.",
            "type": "string"
          },
          "endTime": {
            "description": "End time of the operation. Required when the operation is used in ServiceController.Report, but optional when the operation is used in ServiceController.Check.",
            "format": "google-datetime",
            "type": "string"
          },
          "importance": {
            "description": "DO NOT USE. This is an experimental field.",
            "enum": [
              "LOW",
              "HIGH",
              "DEBUG",
              "PROMOTED"
            ],
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels describing the operation. Only the following labels are allowed: - Labels describing monitored resources as defined in the service configuration. - Default labels of metric values. When specified, labels defined in the metric value override these default. - The following labels defined by Google Cloud Platform: - `cloud.googleapis.com/location` describing the location where the operation happened, - `servicecontrol.googleapis.com/user_agent` describing the user agent of the API request, - `servicecontrol.googleapis.com/service_agent` describing the service used to handle the API request (e.g. ESP), - `servicecontrol.googleapis.com/platform` describing the platform where the API is served, such as App Engine, Compute Engine, or Kubernetes Engine.",
            "type": "object"
          },
          "logEntries": {
            "description": "Represents information to be logged.",
            "items": {
              "$ref": "#/$defs/LogEntry"
            },
            "type": "array"
          },
          "metricValueSets": {
            "description": "Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error.",
            "items": {
              "$ref": "#/$defs/MetricValueSet"
            },
            "type": "array"
          },
          "operationId": {
            "description": "Identity of the operation. This must be unique within the scope of the service that generated the operation. If the service calls Check() and Report() on the same operation, the two calls should carry the same id. UUID version 4 is recommended, though not required. In scenarios where an operation is computed from existing information and an idempotent id is desirable for deduplication purpose, UUID version 5 is recommended. See RFC 4122 for details.",
            "type": "string"
          },
          "operationName": {
            "description": "Fully qualified name of the operation. Reserved for future use.",
            "type": "string"
          },
          "quotaProperties": {
            "$ref": "#/$defs/QuotaProperties"
          },
          "resources": {
            "description": "The resources that are involved in the operation. The maximum supported number of entries in this field is 100.",
            "items": {
              "$ref": "#/$defs/ResourceInfo"
            },
            "type": "array"
          },
          "startTime": {
            "description": "Required. Start time of the operation.",
            "format": "google-datetime",
            "type": "string"
          },
          "traceSpans": {
            "description": "Unimplemented. A list of Cloud Trace spans. The span names shall contain the id of the destination project which can be either the produce or the consumer project.",
            "items": {
              "$ref": "#/$defs/TraceSpan"
            },
            "type": "array"
          },
          "userLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Private Preview. This feature is only available for approved services. User defined labels for the resource that this operation is associated with.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogEntry": {
        "description": "An individual log entry.",
        "properties": {
          "httpRequest": {
            "$ref": "#/$defs/HttpRequest"
          },
          "insertId": {
            "description": "A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of user-defined (key, value) data that provides additional information about the log entry.",
            "type": "object"
          },
          "name": {
            "description": "Required. The log to which this log entry belongs. Examples: `\"syslog\"`, `\"book_log\"`.",
            "type": "string"
          },
          "operation": {
            "$ref": "#/$defs/LogEntryOperation"
          },
          "protoPayload": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.",
            "type": "object"
          },
          "severity": {
            "description": "The severity of the log entry. The default value is `LogSeverity.DEFAULT`.",
            "enum": [
              "DEFAULT",
              "DEBUG",
              "INFO",
              "NOTICE",
              "WARNING",
              "ERROR",
              "CRITICAL",
              "ALERT",
              "EMERGENCY"
            ],
            "type": "string"
          },
          "sourceLocation": {
            "$ref": "#/$defs/LogEntrySourceLocation"
          },
          "structPayload": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "The log entry payload, represented as a structure that is expressed as a JSON object.",
            "type": "object"
          },
          "textPayload": {
            "description": "The log entry payload, represented as a Unicode string (UTF-8).",
            "type": "string"
          },
          "timestamp": {
            "description": "The time the event described by the log entry occurred. If omitted, defaults to operation start time.",
            "format": "google-datetime",
            "type": "string"
          },
          "trace": {
            "description": "Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRequest": {
        "description": "A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.",
        "properties": {
          "cacheFillBytes": {
            "description": "The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.",
            "format": "int64",
            "type": "string"
          },
          "cacheHit": {
            "description": "Whether or not an entity was served from cache (with or without validation).",
            "type": "boolean"
          },
          "cacheLookup": {
            "description": "Whether or not a cache lookup was attempted.",
            "type": "boolean"
          },
          "cacheValidatedWithOriginServer": {
            "description": "Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if `cache_hit` is True.",
            "type": "boolean"
          },
          "latency": {
            "description": "The request processing latency on the server, from the time the request was received until the response was sent.",
            "format": "google-duration",
            "type": "string"
          },
          "protocol": {
            "description": "Protocol used for the request. Examples: \"HTTP/1.1\", \"HTTP/2\", \"websocket\"",
            "type": "string"
          },
          "referer": {
            "description": "The referer URL of the request, as defined in [HTTP/1.1 Header Field Definitions](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).",
            "type": "string"
          },
          "remoteIp": {
            "description": "The IP address (IPv4 or IPv6) of the client that issued the HTTP request. Examples: `\"192.168.1.1\"`, `\"FE80::0202:B3FF:FE1E:8329\"`.",
            "type": "string"
          },
          "requestMethod": {
            "description": "The request method. Examples: `\"GET\"`, `\"HEAD\"`, `\"PUT\"`, `\"POST\"`.",
            "type": "string"
          },
          "requestSize": {
            "description": "The size of the HTTP request message in bytes, including the request headers and the request body.",
            "format": "int64",
            "type": "string"
          },
          "requestUrl": {
            "description": "The scheme (http, https), the host name, the path, and the query portion of the URL that was requested. Example: `\"http://example.com/some/info?color=red\"`.",
            "type": "string"
          },
          "responseSize": {
            "description": "The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.",
            "format": "int64",
            "type": "string"
          },
          "serverIp": {
            "description": "The IP address (IPv4 or IPv6) of the origin server that the request was sent to.",
            "type": "string"
          },
          "status": {
            "description": "The response code indicating the status of the response. Examples: 200, 404.",
            "format": "int32",
            "type": "integer"
          },
          "userAgent": {
            "description": "The user agent sent by the client. Example: `\"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\"`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogEntryOperation": {
        "description": "Additional information about a potentially long-running operation with which a log entry is associated.",
        "properties": {
          "first": {
            "description": "Optional. Set this to True if this is the first log entry in the operation.",
            "type": "boolean"
          },
          "id": {
            "description": "Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.",
            "type": "string"
          },
          "last": {
            "description": "Optional. Set this to True if this is the last log entry in the operation.",
            "type": "boolean"
          },
          "producer": {
            "description": "Optional. An arbitrary producer identifier. The combination of `id` and `producer` must be globally unique. Examples for `producer`: `\"MyDivision.MyBigCompany.com\"`, `\"github.com/MyProject/MyApplication\"`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogEntrySourceLocation": {
        "description": "Additional information about the source code location that produced the log entry.",
        "properties": {
          "file": {
            "description": "Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.",
            "type": "string"
          },
          "function": {
            "description": "Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: `qual.if.ied.Class.method` (Java), `dir/package.func` (Go), `function` (Python).",
            "type": "string"
          },
          "line": {
            "description": "Optional. Line within the source file. 1-based; 0 indicates no line number available.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetricValueSet": {
        "description": "Represents a set of metric values in the same metric. Each metric value in the set should have a unique combination of start time, end time, and label values.",
        "properties": {
          "metricName": {
            "description": "The metric name defined in the service configuration.",
            "type": "string"
          },
          "metricValues": {
            "description": "The values in this metric.",
            "items": {
              "$ref": "#/$defs/MetricValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricValue": {
        "description": "Represents a single metric value.",
        "properties": {
          "boolValue": {
            "description": "A boolean value.",
            "type": "boolean"
          },
          "distributionValue": {
            "$ref": "#/$defs/Distribution"
          },
          "doubleValue": {
            "description": "A double precision floating point value.",
            "format": "double",
            "type": "number"
          },
          "endTime": {
            "description": "The end of the time period over which this metric value's measurement applies. If not specified, google.api.servicecontrol.v1.Operation.end_time will be used.",
            "format": "google-datetime",
            "type": "string"
          },
          "int64Value": {
            "description": "A signed 64-bit integer value.",
            "format": "int64",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels describing the metric value. See comments on google.api.servicecontrol.v1.Operation.labels for the overriding relationship. Note that this map must not contain monitored resource labels.",
            "type": "object"
          },
          "moneyValue": {
            "$ref": "#/$defs/Money"
          },
          "startTime": {
            "description": "The start of the time period over which this metric value's measurement applies. The time period has different semantics for different metric types (cumulative, delta, and gauge). See the metric definition documentation in the service configuration for details. If not specified, google.api.servicecontrol.v1.Operation.start_time will be used.",
            "format": "google-datetime",
            "type": "string"
          },
          "stringValue": {
            "description": "A text string value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Distribution": {
        "description": "Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points",
        "properties": {
          "bucketCounts": {
            "description": "The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "count": {
            "description": "The total number of samples in the distribution. Must be >= 0.",
            "format": "int64",
            "type": "string"
          },
          "exemplars": {
            "description": "Example points. Must be in increasing order of `value` field.",
            "items": {
              "$ref": "#/$defs/Exemplar"
            },
            "type": "array"
          },
          "explicitBuckets": {
            "$ref": "#/$defs/ExplicitBuckets"
          },
          "exponentialBuckets": {
            "$ref": "#/$defs/ExponentialBuckets"
          },
          "linearBuckets": {
            "$ref": "#/$defs/LinearBuckets"
          },
          "maximum": {
            "description": "The maximum of the population of values. Ignored if `count` is zero.",
            "format": "double",
            "type": "number"
          },
          "mean": {
            "description": "The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero.",
            "format": "double",
            "type": "number"
          },
          "minimum": {
            "description": "The minimum of the population of values. Ignored if `count` is zero.",
            "format": "double",
            "type": "number"
          },
          "sumOfSquaredDeviation": {
            "description": "The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Exemplar": {
        "description": "Exemplars are example points that may be used to annotate aggregated distribution values. They are metadata that gives information about a particular value added to a Distribution bucket, such as a trace ID that was active when a value was added. They may contain further information, such as a example values and timestamps, origin, etc.",
        "properties": {
          "attachments": {
            "description": "Contextual information about the example value. Examples are: Trace: type.googleapis.com/google.monitoring.v3.SpanContext Literal string: type.googleapis.com/google.protobuf.StringValue Labels dropped during aggregation: type.googleapis.com/google.monitoring.v3.DroppedLabels There may be only a single attachment of any given message type in a single exemplar, and this is enforced by the system.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "timestamp": {
            "description": "The observation (sampling) time of the above value.",
            "format": "google-datetime",
            "type": "string"
          },
          "value": {
            "description": "Value of the exemplar point. This value determines to which bucket the exemplar belongs.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ExplicitBuckets": {
        "description": "Describing buckets with arbitrary user-provided width.",
        "properties": {
          "bounds": {
            "description": "'bound' is a list of strictly increasing boundaries between buckets. Note that a list of length N-1 defines N buckets because of fenceposting. See comments on `bucket_options` for details. The i'th finite bucket covers the interval [bound[i-1], bound[i]) where i ranges from 1 to bound_size() - 1. Note that there are no finite buckets at all if 'bound' only contains a single element; in that special case the single bound defines the boundary between the underflow and overflow buckets. bucket number lower bound upper bound i == 0 (underflow) -inf bound[i] 0 < i < bound_size() bound[i-1] bound[i] i == bound_size() (overflow) bound[i-1] +inf",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExponentialBuckets": {
        "description": "Describing buckets with exponentially growing width.",
        "properties": {
          "growthFactor": {
            "description": "The i'th exponential bucket covers the interval [scale * growth_factor^(i-1), scale * growth_factor^i) where i ranges from 1 to num_finite_buckets inclusive. Must be larger than 1.0.",
            "format": "double",
            "type": "number"
          },
          "numFiniteBuckets": {
            "description": "The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.",
            "format": "int32",
            "type": "integer"
          },
          "scale": {
            "description": "The i'th exponential bucket covers the interval [scale * growth_factor^(i-1), scale * growth_factor^i) where i ranges from 1 to num_finite_buckets inclusive. Must be > 0.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "LinearBuckets": {
        "description": "Describing buckets with constant width.",
        "properties": {
          "numFiniteBuckets": {
            "description": "The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive.",
            "format": "double",
            "type": "number"
          },
          "width": {
            "description": "The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive. Must be strictly positive.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Money": {
        "description": "Represents an amount of money with its currency type.",
        "properties": {
          "currencyCode": {
            "description": "The three-letter currency code defined in ISO 4217.",
            "type": "string"
          },
          "nanos": {
            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "units": {
            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "QuotaProperties": {
        "description": "Represents the properties needed for quota operations.",
        "properties": {
          "quotaMode": {
            "description": "Quota mode for this operation.",
            "enum": [
              "ACQUIRE",
              "ACQUIRE_BEST_EFFORT",
              "CHECK"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceInfo": {
        "description": "Describes a resource associated with this operation.",
        "properties": {
          "permission": {
            "description": "The resource permission required for this request.",
            "type": "string"
          },
          "resourceContainer": {
            "description": "The identifier of the parent of this resource instance. Must be in one of the following formats: - `projects/` - `folders/` - `organizations/`",
            "type": "string"
          },
          "resourceLocation": {
            "description": "The location of the resource. If not empty, the resource will be checked against location policy. The value must be a valid zone, region or multiregion. For example: \"europe-west4\" or \"northamerica-northeast1-a\"",
            "type": "string"
          },
          "resourceName": {
            "description": "Name of the resource. This is used for auditing purposes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TraceSpan": {
        "description": "A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguous—there may be gaps or overlaps between spans in a trace.",
        "properties": {
          "attributes": {
            "$ref": "#/$defs/Attributes"
          },
          "childSpanCount": {
            "description": "An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.",
            "format": "int32",
            "type": "integer"
          },
          "displayName": {
            "$ref": "#/$defs/TruncatableString"
          },
          "endTime": {
            "description": "The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.",
            "format": "google-datetime",
            "type": "string"
          },
          "name": {
            "description": "The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.",
            "type": "string"
          },
          "parentSpanId": {
            "description": "The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be empty.",
            "type": "string"
          },
          "sameProcessAsParentSpan": {
            "description": "(Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.",
            "type": "boolean"
          },
          "spanId": {
            "description": "The [SPAN_ID] portion of the span's resource name.",
            "type": "string"
          },
          "spanKind": {
            "description": "Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.",
            "enum": [
              "SPAN_KIND_UNSPECIFIED",
              "INTERNAL",
              "SERVER",
              "CLIENT",
              "PRODUCER",
              "CONSUMER"
            ],
            "type": "string"
          },
          "startTime": {
            "description": "The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.",
            "format": "google-datetime",
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/Status"
          }
        },
        "type": "object"
      },
      "Attributes": {
        "description": "A set of attributes, each in the format `[KEY]:[VALUE]`.",
        "properties": {
          "attributeMap": {
            "additionalProperties": {
              "$ref": "#/$defs/AttributeValue"
            },
            "description": "The set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the Boolean values `true` and `false`. For example: \"/instance_id\": \"my-instance\" \"/http/user_agent\": \"\" \"/http/request_bytes\": 300 \"abc.com/myattribute\": true",
            "type": "object"
          },
          "droppedAttributesCount": {
            "description": "The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AttributeValue": {
        "description": "The allowed types for [VALUE] in a `[KEY]:[VALUE]` attribute.",
        "properties": {
          "boolValue": {
            "description": "A Boolean value represented by `true` or `false`.",
            "type": "boolean"
          },
          "intValue": {
            "description": "A 64-bit signed integer.",
            "format": "int64",
            "type": "string"
          },
          "stringValue": {
            "$ref": "#/$defs/TruncatableString"
          }
        },
        "type": "object"
      },
      "TruncatableString": {
        "description": "Represents a string that might be shortened to a specified length.",
        "properties": {
          "truncatedByteCount": {
            "description": "The number of bytes removed from the original string. If this value is 0, then the string was not shortened.",
            "format": "int32",
            "type": "integer"
          },
          "value": {
            "description": "The shortened string. For example, if the original string is 500 bytes long and the limit of the string is 128 bytes, then `value` contains the first 128 bytes of the 500-byte string. Truncation always happens on a UTF8 character boundary. If there are multi-byte characters in the string, then the length of the shortened string might be less than the size limit.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://servicecontrol.googleapis.com//v1/services/{serviceName}:check{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for the Check method.",
        "**Key properties:**",
        {
          "$ul": [
            "**checkErrors**: Indicate the decision of the check. If no check errors are present, the service should process the operation. Otherwise the service should use the list of errors to determine the appropriate action.",
            [
              "**checkInfo**: Contains additional information about the check operation.",
              {
                "$ul": [
                  "**apiKeyUid**: The unique id of the api key in the format of \"apikey:\". This field will be populated when the consumer passed to Chemist is an API key and all the API key related validations are successful.",
                  [
                    "**consumerInfo**: `ConsumerInfo` provides information about the consumer.",
                    {
                      "$ul": [
                        "**consumerNumber**: The consumer identity number, can be Google cloud project number, folder number or organization number e.g. 1234567890. A value of 0 indicates no consumer number is found.",
                        "**projectNumber**: The Google cloud project number, e.g. 1234567890. A value of 0 indicates no project number is found. NOTE: This field is deprecated after Chemist support flexible consumer id. New code should not depend on this field anymore.",
                        "**type**: The type of the consumer which should have been defined in [Google Resource Manager](https://cloud.google.com/resource-manager/)."
                      ]
                    }
                  ],
                  "**unusedArguments**: A list of fields and label keys that are ignored by the server. The client doesn't need to send them for following requests to improve performance and allow better aggregation."
                ]
              }
            ],
            "**operationId**: The same operation_id value used in the CheckRequest. Used for logging and diagnostics purposes.",
            [
              "**quotaInfo**: Contains the quota information for a quota check response.",
              {
                "$ul": [
                  "**limitExceeded**: Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota Deprecated: Use quota_metrics to get per quota group limit exceeded status.",
                  "**quotaConsumed**: Map of quota group name to the actual number of tokens consumed. If the quota check was not successful, then this will not be populated due to no quota consumption. We are not merging this field with 'quota_metrics' field because of the complexity of scaling in Chemist client code base. For simplicity, we will keep this field for Castor (that scales quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage). ",
                  "**quotaMetrics**: Quota metrics to indicate the usage. Depending on the check request, one or more of the following metrics will be included: 1. For rate quota, per quota group or per quota metric incremental usage will be specified using the following delta metric: \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. For allocation quota, per quota metric total usage will be specified using the following gauge metric: \"serviceruntime.googleapis.com/allocation/consumer/quota_used_count\" 3. For both rate quota and allocation quota, the quota limit reached condition will be specified using the following boolean metric: \"serviceruntime.googleapis.com/quota/exceeded\""
                ]
              }
            ],
            "**serviceConfigId**: The actual config id used to process the request.",
            "**serviceRolloutId**: The current service rollout id used to process the request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
