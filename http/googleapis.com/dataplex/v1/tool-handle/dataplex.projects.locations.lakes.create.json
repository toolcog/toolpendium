{
  "name": "dataplex_projects_locations_lakes_create",
  "description": "Creates a lake resource.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the lake location, of the form: projects/{project_number}/locations/{location_id} where location_id refers to a GCP region."
      },
      "lakeId": {
        "type": "string",
        "description": "Required. Lake identifier. This ID will be used to generate names such as database and dataset names when publishing metadata to Hive Metastore and BigQuery. * Must contain only lowercase letters, numbers and hyphens. * Must start with a letter. * Must end with a number or a letter. * Must be between 1-63 characters. * Must be unique within the customer project / location."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. Only validate the request, but do not perform mutations. The default is false."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDataplexV1Lake"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDataplexV1Lake": {
        "description": "A lake is a centralized repository for managing enterprise data across the organization distributed across many cloud projects, and stored in a variety of storage services such as Google Cloud Storage and BigQuery. The resources attached to a lake are referred to as managed resources. Data within these managed resources can be structured or unstructured. A lake provides data admins with tools to organize, secure and manage their data at scale, and provides data scientists and data engineers an integrated experience to easily search, discover, analyze and transform data and associated metadata.",
        "properties": {
          "assetStatus": {
            "$ref": "#/$defs/GoogleCloudDataplexV1AssetStatus"
          },
          "createTime": {
            "description": "Output only. The time when the lake was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Description of the lake.",
            "type": "string"
          },
          "displayName": {
            "description": "Optional. User friendly display name.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. User-defined labels for the lake.",
            "type": "object"
          },
          "metastore": {
            "$ref": "#/$defs/GoogleCloudDataplexV1LakeMetastore"
          },
          "metastoreStatus": {
            "$ref": "#/$defs/GoogleCloudDataplexV1LakeMetastoreStatus"
          },
          "name": {
            "description": "Output only. The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.",
            "readOnly": true,
            "type": "string"
          },
          "serviceAccount": {
            "description": "Output only. Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. Current state of the lake.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "CREATING",
              "DELETING",
              "ACTION_REQUIRED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uid": {
            "description": "Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time when the lake was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1AssetStatus": {
        "description": "Aggregated status of the underlying assets of a lake or zone.",
        "properties": {
          "activeAssets": {
            "description": "Number of active assets.",
            "format": "int32",
            "type": "integer"
          },
          "securityPolicyApplyingAssets": {
            "description": "Number of assets that are in process of updating the security policy on attached resources.",
            "format": "int32",
            "type": "integer"
          },
          "updateTime": {
            "description": "Last update time of the status.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1LakeMetastore": {
        "description": "Settings to manage association of Dataproc Metastore with a lake.",
        "properties": {
          "service": {
            "description": "Optional. A relative reference to the Dataproc Metastore (https://cloud.google.com/dataproc-metastore/docs) service associated with the lake: projects/{project_id}/locations/{location_id}/services/{service_id}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1LakeMetastoreStatus": {
        "description": "Status of Lake and Dataproc Metastore service instance association.",
        "properties": {
          "endpoint": {
            "description": "The URI of the endpoint used to access the Metastore service.",
            "type": "string"
          },
          "message": {
            "description": "Additional information about the current status.",
            "type": "string"
          },
          "state": {
            "description": "Current state of association.",
            "enum": [
              "STATE_UNSPECIFIED",
              "NONE",
              "READY",
              "UPDATING",
              "ERROR"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Last update time of the metastore status of the lake.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dataplex.googleapis.com//v1/{parent}/lakes{?lakeId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.",
            [
              "**error**: The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
