{
  "name": "dataplex_projects_locations_lakes_tasks_create",
  "description": "Creates a task resource within a lake.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the parent lake: projects/{project_number}/locations/{location_id}/lakes/{lake_id}."
      },
      "taskId": {
        "type": "string",
        "description": "Required. Task identifier."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. Only validate the request, but do not perform mutations. The default is false."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDataplexV1Task"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDataplexV1Task": {
        "description": "A task represents a user-visible job.",
        "properties": {
          "createTime": {
            "description": "Output only. The time when the task was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Description of the task.",
            "type": "string"
          },
          "displayName": {
            "description": "Optional. User friendly display name.",
            "type": "string"
          },
          "executionSpec": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskExecutionSpec"
          },
          "executionStatus": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskExecutionStatus"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. User-defined labels for the task.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The relative resource name of the task, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/ tasks/{task_id}.",
            "readOnly": true,
            "type": "string"
          },
          "notebook": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskNotebookTaskConfig"
          },
          "spark": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskSparkTaskConfig"
          },
          "state": {
            "description": "Output only. Current state of the task.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "CREATING",
              "DELETING",
              "ACTION_REQUIRED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "triggerSpec": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskTriggerSpec"
          },
          "uid": {
            "description": "Output only. System generated globally unique ID for the task. This ID will be different if the task is deleted and re-created with the same name.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time when the task was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskExecutionSpec": {
        "description": "Execution related settings, like retry and service_account.",
        "properties": {
          "args": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The arguments to pass to the task. The args can use placeholders of the format ${placeholder} as part of key/value string. These will be interpolated before passing the args to the driver. Currently supported placeholders: - ${task_id} - ${job_time} To pass positional args, set the key as TASK_ARGS. The value should be a comma-separated string of all the positional arguments. To use a delimiter other than comma, refer to https://cloud.google.com/sdk/gcloud/reference/topic/escaping. In case of other keys being present in the args, then TASK_ARGS will be passed as the last argument.",
            "type": "object"
          },
          "kmsKey": {
            "description": "Optional. The Cloud KMS key to use for encryption, of the form: projects/{project_number}/locations/{location_id}/keyRings/{key-ring-name}/cryptoKeys/{key-name}.",
            "type": "string"
          },
          "maxJobExecutionLifetime": {
            "description": "Optional. The maximum duration after which the job execution is expired.",
            "format": "google-duration",
            "type": "string"
          },
          "project": {
            "description": "Optional. The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.",
            "type": "string"
          },
          "serviceAccount": {
            "description": "Required. Service account to use to execute a task. If not provided, the default Compute service account for the project is used.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskExecutionStatus": {
        "description": "Status of the task execution (e.g. Jobs).",
        "properties": {
          "latestJob": {
            "$ref": "#/$defs/GoogleCloudDataplexV1Job"
          },
          "updateTime": {
            "description": "Output only. Last update time of the status.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1Job": {
        "description": "A job represents an instance of a task.",
        "properties": {
          "endTime": {
            "description": "Output only. The time when the job ended.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "executionSpec": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskExecutionSpec"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. User-defined labels for the task.",
            "readOnly": true,
            "type": "object"
          },
          "message": {
            "description": "Output only. Additional information about the current state.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. The relative resource name of the job, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}/jobs/{job_id}.",
            "readOnly": true,
            "type": "string"
          },
          "retryCount": {
            "description": "Output only. The number of times the job has been retried (excluding the initial attempt).",
            "format": "uint32",
            "readOnly": true,
            "type": "integer"
          },
          "service": {
            "description": "Output only. The underlying service running a job.",
            "enum": [
              "SERVICE_UNSPECIFIED",
              "DATAPROC"
            ],
            "readOnly": true,
            "type": "string"
          },
          "serviceJob": {
            "description": "Output only. The full resource name for the job run under a particular service.",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The time when the job was started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. Execution state for the job.",
            "enum": [
              "STATE_UNSPECIFIED",
              "RUNNING",
              "CANCELLING",
              "CANCELLED",
              "SUCCEEDED",
              "FAILED",
              "ABORTED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "trigger": {
            "description": "Output only. Job execution trigger.",
            "enum": [
              "TRIGGER_UNSPECIFIED",
              "TASK_CONFIG",
              "RUN_REQUEST"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uid": {
            "description": "Output only. System generated globally unique ID for the job.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskNotebookTaskConfig": {
        "description": "Config for running scheduled notebooks.",
        "properties": {
          "archiveUris": {
            "description": "Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fileUris": {
            "description": "Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "infrastructureSpec": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskInfrastructureSpec"
          },
          "notebook": {
            "description": "Required. Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskInfrastructureSpec": {
        "description": "Configuration for the underlying infrastructure used to run workloads.",
        "properties": {
          "batch": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources"
          },
          "containerImage": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime"
          },
          "vpcNetwork": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources": {
        "description": "Batch compute resources associated with the task.",
        "properties": {
          "executorsCount": {
            "description": "Optional. Total number of job executors. Executor Count should be between 2 and 100. Default=2",
            "format": "int32",
            "type": "integer"
          },
          "maxExecutorsCount": {
            "description": "Optional. Max configurable executors. If max_executors_count > executors_count, then auto-scaling is enabled. Max Executor Count should be between 2 and 1000. Default=1000",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime": {
        "description": "Container Image Runtime Configuration used with Batch execution.",
        "properties": {
          "image": {
            "description": "Optional. Container image to use.",
            "type": "string"
          },
          "javaJars": {
            "description": "Optional. A list of Java JARS to add to the classpath. Valid input includes Cloud Storage URIs to Jar binaries. For example, gs://bucket-name/my/path/to/file.jar",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "properties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Override to common configuration of open source components installed on the Dataproc cluster. The properties to set on daemon config files. Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. For more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).",
            "type": "object"
          },
          "pythonPackages": {
            "description": "Optional. A list of python packages to be installed. Valid formats include Cloud Storage URI to a PIP installable library. For example, gs://bucket-name/my/path/to/lib.tar.gz",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork": {
        "description": "Cloud VPC Network used to run the infrastructure.",
        "properties": {
          "network": {
            "description": "Optional. The Cloud VPC network in which the job is run. By default, the Cloud VPC network named Default within the project is used.",
            "type": "string"
          },
          "networkTags": {
            "description": "Optional. List of network tags to apply to the job.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subNetwork": {
            "description": "Optional. The Cloud VPC sub-network in which the job is run.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskSparkTaskConfig": {
        "description": "User-specified config for running a Spark task.",
        "properties": {
          "archiveUris": {
            "description": "Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fileUris": {
            "description": "Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "infrastructureSpec": {
            "$ref": "#/$defs/GoogleCloudDataplexV1TaskInfrastructureSpec"
          },
          "mainClass": {
            "description": "The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris. The execution args are passed in as a sequence of named process arguments (--key=value).",
            "type": "string"
          },
          "mainJarFileUri": {
            "description": "The Cloud Storage URI of the jar file that contains the main class. The execution args are passed in as a sequence of named process arguments (--key=value).",
            "type": "string"
          },
          "pythonScriptFile": {
            "description": "The Gcloud Storage URI of the main Python file to use as the driver. Must be a .py file. The execution args are passed in as a sequence of named process arguments (--key=value).",
            "type": "string"
          },
          "sqlScript": {
            "description": "The query text. The execution args are used to declare a set of script variables (set key=\"value\";).",
            "type": "string"
          },
          "sqlScriptFile": {
            "description": "A reference to a query file. This can be the Cloud Storage URI of the query file or it can the path to a SqlScript Content. The execution args are used to declare a set of script variables (set key=\"value\";).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDataplexV1TaskTriggerSpec": {
        "description": "Task scheduling and trigger settings.",
        "properties": {
          "disabled": {
            "description": "Optional. Prevent the task from executing. This does not cancel already running tasks. It is intended to temporarily disable RECURRING tasks.",
            "type": "boolean"
          },
          "maxRetries": {
            "description": "Optional. Number of retry attempts before aborting. Set to zero to never attempt to retry a failed task.",
            "format": "int32",
            "type": "integer"
          },
          "schedule": {
            "description": "Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.",
            "type": "string"
          },
          "startTime": {
            "description": "Optional. The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.",
            "format": "google-datetime",
            "type": "string"
          },
          "type": {
            "description": "Required. Immutable. Trigger type of the user-specified Task.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "ON_DEMAND",
              "RECURRING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dataplex.googleapis.com//v1/{parent}/tasks{?taskId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.",
            [
              "**error**: The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
