{
  "name": "dataflow_projects_locations_jobs_update",
  "description": "Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "The ID of the Cloud Platform project that the job belongs to."
      },
      "location": {
        "type": "string",
        "description": "The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job."
      },
      "jobId": {
        "type": "string",
        "description": "The job ID."
      },
      "updateMask": {
        "type": "string",
        "description": "The list of fields to update relative to Job. If empty, only RequestedJobState will be considered for update. If the FieldMask is not empty and RequestedJobState is none/empty, The fields specified in the update mask will be the only ones considered for update. If both RequestedJobState and update_mask are specified, an error will be returned as we cannot update both state and mask."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Job"
      }
    },
    "required": [
      "projectId",
      "location",
      "jobId"
    ],
    "$defs": {
      "Job": {
        "description": "Defines a job to be run by the Cloud Dataflow service. Do not enter confidential information when you supply string values using the API.",
        "properties": {
          "clientRequestId": {
            "description": "The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.",
            "type": "string"
          },
          "createTime": {
            "description": "The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.",
            "format": "google-datetime",
            "type": "string"
          },
          "createdFromSnapshotId": {
            "description": "If this is specified, the job's initial state is populated from the given snapshot.",
            "type": "string"
          },
          "currentState": {
            "description": "The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field might be mutated by the Dataflow service; callers cannot mutate it.",
            "enum": [
              "JOB_STATE_UNKNOWN",
              "JOB_STATE_STOPPED",
              "JOB_STATE_RUNNING",
              "JOB_STATE_DONE",
              "JOB_STATE_FAILED",
              "JOB_STATE_CANCELLED",
              "JOB_STATE_UPDATED",
              "JOB_STATE_DRAINING",
              "JOB_STATE_DRAINED",
              "JOB_STATE_PENDING",
              "JOB_STATE_CANCELLING",
              "JOB_STATE_QUEUED",
              "JOB_STATE_RESOURCE_CLEANING_UP"
            ],
            "type": "string"
          },
          "currentStateTime": {
            "description": "The timestamp associated with the current state.",
            "format": "google-datetime",
            "type": "string"
          },
          "environment": {
            "$ref": "#/$defs/Environment"
          },
          "executionInfo": {
            "$ref": "#/$defs/JobExecutionInfo"
          },
          "id": {
            "description": "The unique ID of this job. This field is set by the Dataflow service when the job is created, and is immutable for the life of the job.",
            "type": "string"
          },
          "jobMetadata": {
            "$ref": "#/$defs/JobMetadata"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.",
            "type": "object"
          },
          "location": {
            "description": "The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.",
            "type": "string"
          },
          "name": {
            "description": "The user-specified Dataflow job name. Only one active job with a given name can exist in a project within one region at any given time. Jobs in different regions can have the same name. If a caller attempts to create a job with the same name as an active job that already exists, the attempt returns the existing job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`",
            "type": "string"
          },
          "pipelineDescription": {
            "$ref": "#/$defs/PipelineDescription"
          },
          "projectId": {
            "description": "The ID of the Google Cloud project that the job belongs to.",
            "type": "string"
          },
          "replaceJobId": {
            "description": "If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.",
            "type": "string"
          },
          "replacedByJobId": {
            "description": "If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.",
            "type": "string"
          },
          "requestedState": {
            "description": "The job's requested state. Applies to `UpdateJob` requests. Set `requested_state` with `UpdateJob` requests to switch between the states `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING`. You can also use `UpdateJob` requests to change a job's state from `JOB_STATE_RUNNING` to `JOB_STATE_CANCELLED`, `JOB_STATE_DONE`, or `JOB_STATE_DRAINED`. These states irrevocably terminate the job if it hasn't already reached a terminal state. This field has no effect on `CreateJob` requests.",
            "enum": [
              "JOB_STATE_UNKNOWN",
              "JOB_STATE_STOPPED",
              "JOB_STATE_RUNNING",
              "JOB_STATE_DONE",
              "JOB_STATE_FAILED",
              "JOB_STATE_CANCELLED",
              "JOB_STATE_UPDATED",
              "JOB_STATE_DRAINING",
              "JOB_STATE_DRAINED",
              "JOB_STATE_PENDING",
              "JOB_STATE_CANCELLING",
              "JOB_STATE_QUEUED",
              "JOB_STATE_RESOURCE_CLEANING_UP"
            ],
            "type": "string"
          },
          "runtimeUpdatableParams": {
            "$ref": "#/$defs/RuntimeUpdatableParams"
          },
          "satisfiesPzi": {
            "description": "Output only. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.",
            "readOnly": true,
            "type": "boolean"
          },
          "satisfiesPzs": {
            "description": "Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.",
            "type": "boolean"
          },
          "stageStates": {
            "description": "This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.",
            "items": {
              "$ref": "#/$defs/ExecutionStageState"
            },
            "type": "array"
          },
          "startTime": {
            "description": "The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.",
            "format": "google-datetime",
            "type": "string"
          },
          "steps": {
            "description": "Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.",
            "items": {
              "$ref": "#/$defs/Step"
            },
            "type": "array"
          },
          "stepsLocation": {
            "description": "The Cloud Storage location where the steps are stored.",
            "type": "string"
          },
          "tempFiles": {
            "description": "A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "transformNameMapping": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.",
            "type": "object"
          },
          "type": {
            "description": "The type of Dataflow job.",
            "enum": [
              "JOB_TYPE_UNKNOWN",
              "JOB_TYPE_BATCH",
              "JOB_TYPE_STREAMING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Environment": {
        "description": "Describes the environment in which a Dataflow Job runs.",
        "properties": {
          "clusterManagerApiService": {
            "description": "The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. \"compute.googleapis.com\".",
            "type": "string"
          },
          "dataset": {
            "description": "The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}",
            "type": "string"
          },
          "debugOptions": {
            "$ref": "#/$defs/DebugOptions"
          },
          "experiments": {
            "description": "The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "flexResourceSchedulingGoal": {
            "description": "Which Flexible Resource Scheduling mode to run in.",
            "enum": [
              "FLEXRS_UNSPECIFIED",
              "FLEXRS_SPEED_OPTIMIZED",
              "FLEXRS_COST_OPTIMIZED"
            ],
            "type": "string"
          },
          "internalExperiments": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Experimental settings.",
            "type": "object"
          },
          "sdkPipelineOptions": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.",
            "type": "object"
          },
          "serviceAccountEmail": {
            "description": "Identity to run virtual machines as. Defaults to the default account.",
            "type": "string"
          },
          "serviceKmsKeyName": {
            "description": "If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY",
            "type": "string"
          },
          "serviceOptions": {
            "description": "The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "shuffleMode": {
            "description": "Output only. The shuffle mode used for the job.",
            "enum": [
              "SHUFFLE_MODE_UNSPECIFIED",
              "VM_BASED",
              "SERVICE_BASED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "streamingMode": {
            "description": "Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.",
            "enum": [
              "STREAMING_MODE_UNSPECIFIED",
              "STREAMING_MODE_EXACTLY_ONCE",
              "STREAMING_MODE_AT_LEAST_ONCE"
            ],
            "type": "string"
          },
          "tempStoragePrefix": {
            "description": "The prefix of the resources the system should use for temporary storage. The system will append the suffix \"/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
            "type": "string"
          },
          "useStreamingEngineResourceBasedBilling": {
            "description": "Output only. Whether the job uses the Streaming Engine resource-based billing model.",
            "readOnly": true,
            "type": "boolean"
          },
          "userAgent": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "A description of the process that generated the request.",
            "type": "object"
          },
          "version": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "A structure describing which components and their versions of the service are required in order to run the job.",
            "type": "object"
          },
          "workerPools": {
            "description": "The worker pools. At least one \"harness\" worker pool must be specified in order for the job to have workers.",
            "items": {
              "$ref": "#/$defs/WorkerPool"
            },
            "type": "array"
          },
          "workerRegion": {
            "description": "The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.",
            "type": "string"
          },
          "workerZone": {
            "description": "The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DebugOptions": {
        "description": "Describes any options that have an effect on the debugging of pipelines.",
        "properties": {
          "dataSampling": {
            "$ref": "#/$defs/DataSamplingConfig"
          },
          "enableHotKeyLogging": {
            "description": "When true, enables the logging of the literal hot key to the user's Cloud Logging.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DataSamplingConfig": {
        "description": "Configuration options for sampling elements.",
        "properties": {
          "behaviors": {
            "description": "List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter.",
            "items": {
              "enum": [
                "DATA_SAMPLING_BEHAVIOR_UNSPECIFIED",
                "DISABLED",
                "ALWAYS_ON",
                "EXCEPTIONS"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WorkerPool": {
        "description": "Describes one particular pool of Cloud Dataflow workers to be instantiated by the Cloud Dataflow service in order to perform the computations required by a job. Note that a workflow job may use multiple pools, in order to match the various computational requirements of the various stages of the job.",
        "properties": {
          "autoscalingSettings": {
            "$ref": "#/$defs/AutoscalingSettings"
          },
          "dataDisks": {
            "description": "Data disks that are used by a VM in this workflow.",
            "items": {
              "$ref": "#/$defs/Disk"
            },
            "type": "array"
          },
          "defaultPackageSet": {
            "description": "The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.",
            "enum": [
              "DEFAULT_PACKAGE_SET_UNKNOWN",
              "DEFAULT_PACKAGE_SET_NONE",
              "DEFAULT_PACKAGE_SET_JAVA",
              "DEFAULT_PACKAGE_SET_PYTHON"
            ],
            "type": "string"
          },
          "diskSizeGb": {
            "description": "Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.",
            "format": "int32",
            "type": "integer"
          },
          "diskSourceImage": {
            "description": "Fully qualified source image for disks.",
            "type": "string"
          },
          "diskType": {
            "description": "Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.",
            "type": "string"
          },
          "ipConfiguration": {
            "description": "Configuration for VM IPs.",
            "enum": [
              "WORKER_IP_UNSPECIFIED",
              "WORKER_IP_PUBLIC",
              "WORKER_IP_PRIVATE"
            ],
            "type": "string"
          },
          "kind": {
            "description": "The kind of the worker pool; currently only `harness` and `shuffle` are supported.",
            "type": "string"
          },
          "machineType": {
            "description": "Machine type (e.g. \"n1-standard-1\"). If empty or unspecified, the service will attempt to choose a reasonable default.",
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Metadata to set on the Google Compute Engine VMs.",
            "type": "object"
          },
          "network": {
            "description": "Network to which VMs will be assigned. If empty or unspecified, the service will use the network \"default\".",
            "type": "string"
          },
          "numThreadsPerWorker": {
            "description": "The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).",
            "format": "int32",
            "type": "integer"
          },
          "numWorkers": {
            "description": "Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.",
            "format": "int32",
            "type": "integer"
          },
          "onHostMaintenance": {
            "description": "The action to take on host maintenance, as defined by the Google Compute Engine API.",
            "type": "string"
          },
          "packages": {
            "description": "Packages to be installed on workers.",
            "items": {
              "$ref": "#/$defs/Package"
            },
            "type": "array"
          },
          "poolArgs": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Extra arguments for this worker pool.",
            "type": "object"
          },
          "sdkHarnessContainerImages": {
            "description": "Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.",
            "items": {
              "$ref": "#/$defs/SdkHarnessContainerImage"
            },
            "type": "array"
          },
          "subnetwork": {
            "description": "Subnetwork to which VMs will be assigned, if desired. Expected to be of the form \"regions/REGION/subnetworks/SUBNETWORK\".",
            "type": "string"
          },
          "taskrunnerSettings": {
            "$ref": "#/$defs/TaskRunnerSettings"
          },
          "teardownPolicy": {
            "description": "Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.",
            "enum": [
              "TEARDOWN_POLICY_UNKNOWN",
              "TEARDOWN_ALWAYS",
              "TEARDOWN_ON_SUCCESS",
              "TEARDOWN_NEVER"
            ],
            "type": "string"
          },
          "workerHarnessContainerImage": {
            "description": "Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.",
            "type": "string"
          },
          "zone": {
            "description": "Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutoscalingSettings": {
        "description": "Settings for WorkerPool autoscaling.",
        "properties": {
          "algorithm": {
            "description": "The algorithm to use for autoscaling.",
            "enum": [
              "AUTOSCALING_ALGORITHM_UNKNOWN",
              "AUTOSCALING_ALGORITHM_NONE",
              "AUTOSCALING_ALGORITHM_BASIC"
            ],
            "type": "string"
          },
          "maxNumWorkers": {
            "description": "The maximum number of workers to cap scaling at.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Disk": {
        "description": "Describes the data disk used by a workflow job.",
        "properties": {
          "diskType": {
            "description": "Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in \"pd-standard\". If SSD persistent disks are available, the resource name typically ends with \"pd-ssd\". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard",
            "type": "string"
          },
          "mountPoint": {
            "description": "Directory in a VM where disk is mounted.",
            "type": "string"
          },
          "sizeGb": {
            "description": "Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Package": {
        "description": "The packages that must be installed in order for a worker to run the steps of the Cloud Dataflow job that will be assigned to its worker pool. This is the mechanism by which the Cloud Dataflow SDK causes code to be loaded onto the workers. For example, the Cloud Dataflow Java SDK might use this to install jars containing the user's code and all of the various dependencies (libraries, data files, etc.) required in order for that code to run.",
        "properties": {
          "location": {
            "description": "The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/",
            "type": "string"
          },
          "name": {
            "description": "The name of the package.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SdkHarnessContainerImage": {
        "description": "Defines an SDK harness container for executing Dataflow pipelines.",
        "properties": {
          "capabilities": {
            "description": "The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "containerImage": {
            "description": "A docker container image that resides in Google Container Registry.",
            "type": "string"
          },
          "environmentId": {
            "description": "Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.",
            "type": "string"
          },
          "useSingleCorePerContainer": {
            "description": "If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TaskRunnerSettings": {
        "description": "Taskrunner configuration settings.",
        "properties": {
          "alsologtostderr": {
            "description": "Whether to also send taskrunner log info to stderr.",
            "type": "boolean"
          },
          "baseTaskDir": {
            "description": "The location on the worker for task-specific subdirectories.",
            "type": "string"
          },
          "baseUrl": {
            "description": "The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"",
            "type": "string"
          },
          "commandlinesFileName": {
            "description": "The file to store preprocessing commands in.",
            "type": "string"
          },
          "continueOnException": {
            "description": "Whether to continue taskrunner if an exception is hit.",
            "type": "boolean"
          },
          "dataflowApiVersion": {
            "description": "The API version of endpoint, e.g. \"v1b3\"",
            "type": "string"
          },
          "harnessCommand": {
            "description": "The command to launch the worker harness.",
            "type": "string"
          },
          "languageHint": {
            "description": "The suggested backend language.",
            "type": "string"
          },
          "logDir": {
            "description": "The directory on the VM to store logs.",
            "type": "string"
          },
          "logToSerialconsole": {
            "description": "Whether to send taskrunner log info to Google Compute Engine VM serial console.",
            "type": "boolean"
          },
          "logUploadLocation": {
            "description": "Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
            "type": "string"
          },
          "oauthScopes": {
            "description": "The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parallelWorkerSettings": {
            "$ref": "#/$defs/WorkerSettings"
          },
          "streamingWorkerMainClass": {
            "description": "The streaming worker main class name.",
            "type": "string"
          },
          "taskGroup": {
            "description": "The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. \"wheel\".",
            "type": "string"
          },
          "taskUser": {
            "description": "The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. \"root\".",
            "type": "string"
          },
          "tempStoragePrefix": {
            "description": "The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
            "type": "string"
          },
          "vmId": {
            "description": "The ID string of the VM.",
            "type": "string"
          },
          "workflowFileName": {
            "description": "The file to store the workflow in.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkerSettings": {
        "description": "Provides data to pass through to the worker harness.",
        "properties": {
          "baseUrl": {
            "description": "The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"",
            "type": "string"
          },
          "reportingEnabled": {
            "description": "Whether to send work progress updates to the service.",
            "type": "boolean"
          },
          "servicePath": {
            "description": "The Cloud Dataflow service path relative to the root URL, for example, \"dataflow/v1b3/projects\".",
            "type": "string"
          },
          "shuffleServicePath": {
            "description": "The Shuffle service path relative to the root URL, for example, \"shuffle/v1beta1\".",
            "type": "string"
          },
          "tempStoragePrefix": {
            "description": "The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
            "type": "string"
          },
          "workerId": {
            "description": "The ID of the worker running this pipeline.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobExecutionInfo": {
        "description": "Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.",
        "properties": {
          "stages": {
            "additionalProperties": {
              "$ref": "#/$defs/JobExecutionStageInfo"
            },
            "description": "A mapping from each stage to the information about that stage.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "JobExecutionStageInfo": {
        "description": "Contains information about how a particular google.dataflow.v1beta3.Step will be executed.",
        "properties": {
          "stepName": {
            "description": "The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobMetadata": {
        "description": "Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.",
        "properties": {
          "bigTableDetails": {
            "description": "Identification of a Cloud Bigtable source used in the Dataflow job.",
            "items": {
              "$ref": "#/$defs/BigTableIODetails"
            },
            "type": "array"
          },
          "bigqueryDetails": {
            "description": "Identification of a BigQuery source used in the Dataflow job.",
            "items": {
              "$ref": "#/$defs/BigQueryIODetails"
            },
            "type": "array"
          },
          "datastoreDetails": {
            "description": "Identification of a Datastore source used in the Dataflow job.",
            "items": {
              "$ref": "#/$defs/DatastoreIODetails"
            },
            "type": "array"
          },
          "fileDetails": {
            "description": "Identification of a File source used in the Dataflow job.",
            "items": {
              "$ref": "#/$defs/FileIODetails"
            },
            "type": "array"
          },
          "pubsubDetails": {
            "description": "Identification of a Pub/Sub source used in the Dataflow job.",
            "items": {
              "$ref": "#/$defs/PubSubIODetails"
            },
            "type": "array"
          },
          "sdkVersion": {
            "$ref": "#/$defs/SdkVersion"
          },
          "spannerDetails": {
            "description": "Identification of a Spanner source used in the Dataflow job.",
            "items": {
              "$ref": "#/$defs/SpannerIODetails"
            },
            "type": "array"
          },
          "userDisplayProperties": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "List of display properties to help UI filter jobs.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "BigTableIODetails": {
        "description": "Metadata for a Cloud Bigtable connector used by the job.",
        "properties": {
          "instanceId": {
            "description": "InstanceId accessed in the connection.",
            "type": "string"
          },
          "projectId": {
            "description": "ProjectId accessed in the connection.",
            "type": "string"
          },
          "tableId": {
            "description": "TableId accessed in the connection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BigQueryIODetails": {
        "description": "Metadata for a BigQuery connector used by the job.",
        "properties": {
          "dataset": {
            "description": "Dataset accessed in the connection.",
            "type": "string"
          },
          "projectId": {
            "description": "Project accessed in the connection.",
            "type": "string"
          },
          "query": {
            "description": "Query used to access data in the connection.",
            "type": "string"
          },
          "table": {
            "description": "Table accessed in the connection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatastoreIODetails": {
        "description": "Metadata for a Datastore connector used by the job.",
        "properties": {
          "namespace": {
            "description": "Namespace used in the connection.",
            "type": "string"
          },
          "projectId": {
            "description": "ProjectId accessed in the connection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileIODetails": {
        "description": "Metadata for a File connector used by the job.",
        "properties": {
          "filePattern": {
            "description": "File Pattern used to access files by the connector.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PubSubIODetails": {
        "description": "Metadata for a Pub/Sub connector used by the job.",
        "properties": {
          "subscription": {
            "description": "Subscription used in the connection.",
            "type": "string"
          },
          "topic": {
            "description": "Topic accessed in the connection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SdkVersion": {
        "description": "The version of the SDK used to run the job.",
        "properties": {
          "bugs": {
            "description": "Output only. Known bugs found in this SDK version.",
            "items": {
              "$ref": "#/$defs/SdkBug"
            },
            "readOnly": true,
            "type": "array"
          },
          "sdkSupportStatus": {
            "description": "The support status for this SDK version.",
            "enum": [
              "UNKNOWN",
              "SUPPORTED",
              "STALE",
              "DEPRECATED",
              "UNSUPPORTED"
            ],
            "type": "string"
          },
          "version": {
            "description": "The version of the SDK used to run the job.",
            "type": "string"
          },
          "versionDisplayName": {
            "description": "A readable string describing the version of the SDK.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SdkBug": {
        "description": "A bug found in the Dataflow SDK.",
        "properties": {
          "severity": {
            "description": "Output only. How severe the SDK bug is.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "NOTICE",
              "WARNING",
              "SEVERE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Output only. Describes the impact of this SDK bug.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "GENERAL",
              "PERFORMANCE",
              "DATALOSS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uri": {
            "description": "Output only. Link to more information on the bug.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpannerIODetails": {
        "description": "Metadata for a Spanner connector used by the job.",
        "properties": {
          "databaseId": {
            "description": "DatabaseId accessed in the connection.",
            "type": "string"
          },
          "instanceId": {
            "description": "InstanceId accessed in the connection.",
            "type": "string"
          },
          "projectId": {
            "description": "ProjectId accessed in the connection.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PipelineDescription": {
        "description": "A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.",
        "properties": {
          "displayData": {
            "description": "Pipeline level display data.",
            "items": {
              "$ref": "#/$defs/DisplayData"
            },
            "type": "array"
          },
          "executionPipelineStage": {
            "description": "Description of each stage of execution of the pipeline.",
            "items": {
              "$ref": "#/$defs/ExecutionStageSummary"
            },
            "type": "array"
          },
          "originalPipelineTransform": {
            "description": "Description of each transform in the pipeline and collections between them.",
            "items": {
              "$ref": "#/$defs/TransformSummary"
            },
            "type": "array"
          },
          "stepNamesHash": {
            "description": "A hash value of the submitted pipeline portable graph step names if exists.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DisplayData": {
        "description": "Data provided with a pipeline or transform to provide descriptive info.",
        "properties": {
          "boolValue": {
            "description": "Contains value if the data is of a boolean type.",
            "type": "boolean"
          },
          "durationValue": {
            "description": "Contains value if the data is of duration type.",
            "format": "google-duration",
            "type": "string"
          },
          "floatValue": {
            "description": "Contains value if the data is of float type.",
            "format": "float",
            "type": "number"
          },
          "int64Value": {
            "description": "Contains value if the data is of int64 type.",
            "format": "int64",
            "type": "string"
          },
          "javaClassValue": {
            "description": "Contains value if the data is of java class type.",
            "type": "string"
          },
          "key": {
            "description": "The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.",
            "type": "string"
          },
          "label": {
            "description": "An optional label to display in a dax UI for the element.",
            "type": "string"
          },
          "namespace": {
            "description": "The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.",
            "type": "string"
          },
          "shortStrValue": {
            "description": "A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.",
            "type": "string"
          },
          "strValue": {
            "description": "Contains value if the data is of string type.",
            "type": "string"
          },
          "timestampValue": {
            "description": "Contains value if the data is of timestamp type.",
            "format": "google-datetime",
            "type": "string"
          },
          "url": {
            "description": "An optional full URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExecutionStageSummary": {
        "description": "Description of the composing transforms, names/ids, and input/outputs of a stage of execution. Some composing transforms and sources may have been generated by the Dataflow service during execution planning.",
        "properties": {
          "componentSource": {
            "description": "Collections produced and consumed by component transforms of this stage.",
            "items": {
              "$ref": "#/$defs/ComponentSource"
            },
            "type": "array"
          },
          "componentTransform": {
            "description": "Transforms that comprise this execution stage.",
            "items": {
              "$ref": "#/$defs/ComponentTransform"
            },
            "type": "array"
          },
          "id": {
            "description": "Dataflow service generated id for this stage.",
            "type": "string"
          },
          "inputSource": {
            "description": "Input sources for this stage.",
            "items": {
              "$ref": "#/$defs/StageSource"
            },
            "type": "array"
          },
          "kind": {
            "description": "Type of transform this stage is executing.",
            "enum": [
              "UNKNOWN_KIND",
              "PAR_DO_KIND",
              "GROUP_BY_KEY_KIND",
              "FLATTEN_KIND",
              "READ_KIND",
              "WRITE_KIND",
              "CONSTANT_KIND",
              "SINGLETON_KIND",
              "SHUFFLE_KIND"
            ],
            "type": "string"
          },
          "name": {
            "description": "Dataflow service generated name for this stage.",
            "type": "string"
          },
          "outputSource": {
            "description": "Output sources for this stage.",
            "items": {
              "$ref": "#/$defs/StageSource"
            },
            "type": "array"
          },
          "prerequisiteStage": {
            "description": "Other stages that must complete before this stage can run.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ComponentSource": {
        "description": "Description of an interstitial value between transforms in an execution stage.",
        "properties": {
          "name": {
            "description": "Dataflow service generated name for this source.",
            "type": "string"
          },
          "originalTransformOrCollection": {
            "description": "User name for the original user transform or collection with which this source is most closely associated.",
            "type": "string"
          },
          "userName": {
            "description": "Human-readable name for this transform; may be user or system generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComponentTransform": {
        "description": "Description of a transform executed as part of an execution stage.",
        "properties": {
          "name": {
            "description": "Dataflow service generated name for this source.",
            "type": "string"
          },
          "originalTransform": {
            "description": "User name for the original user transform with which this transform is most closely associated.",
            "type": "string"
          },
          "userName": {
            "description": "Human-readable name for this transform; may be user or system generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StageSource": {
        "description": "Description of an input or output of an execution stage.",
        "properties": {
          "name": {
            "description": "Dataflow service generated name for this source.",
            "type": "string"
          },
          "originalTransformOrCollection": {
            "description": "User name for the original user transform or collection with which this source is most closely associated.",
            "type": "string"
          },
          "sizeBytes": {
            "description": "Size of the source, if measurable.",
            "format": "int64",
            "type": "string"
          },
          "userName": {
            "description": "Human-readable name for this source; may be user or system generated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransformSummary": {
        "description": "Description of the type, names/ids, and input/outputs for a transform.",
        "properties": {
          "displayData": {
            "description": "Transform-specific display data.",
            "items": {
              "$ref": "#/$defs/DisplayData"
            },
            "type": "array"
          },
          "id": {
            "description": "SDK generated id of this transform instance.",
            "type": "string"
          },
          "inputCollectionName": {
            "description": "User names for all collection inputs to this transform.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "kind": {
            "description": "Type of transform.",
            "enum": [
              "UNKNOWN_KIND",
              "PAR_DO_KIND",
              "GROUP_BY_KEY_KIND",
              "FLATTEN_KIND",
              "READ_KIND",
              "WRITE_KIND",
              "CONSTANT_KIND",
              "SINGLETON_KIND",
              "SHUFFLE_KIND"
            ],
            "type": "string"
          },
          "name": {
            "description": "User provided name for this transform instance.",
            "type": "string"
          },
          "outputCollectionName": {
            "description": "User names for all collection outputs to this transform.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RuntimeUpdatableParams": {
        "description": "Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.",
        "properties": {
          "maxNumWorkers": {
            "description": "The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.",
            "format": "int32",
            "type": "integer"
          },
          "minNumWorkers": {
            "description": "The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.",
            "format": "int32",
            "type": "integer"
          },
          "workerUtilizationHint": {
            "description": "Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ExecutionStageState": {
        "description": "A message describing the state of a particular execution stage.",
        "properties": {
          "currentStateTime": {
            "description": "The time at which the stage transitioned to this state.",
            "format": "google-datetime",
            "type": "string"
          },
          "executionStageName": {
            "description": "The name of the execution stage.",
            "type": "string"
          },
          "executionStageState": {
            "description": "Executions stage states allow the same set of values as JobState.",
            "enum": [
              "JOB_STATE_UNKNOWN",
              "JOB_STATE_STOPPED",
              "JOB_STATE_RUNNING",
              "JOB_STATE_DONE",
              "JOB_STATE_FAILED",
              "JOB_STATE_CANCELLED",
              "JOB_STATE_UPDATED",
              "JOB_STATE_DRAINING",
              "JOB_STATE_DRAINED",
              "JOB_STATE_PENDING",
              "JOB_STATE_CANCELLING",
              "JOB_STATE_QUEUED",
              "JOB_STATE_RESOURCE_CLEANING_UP"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Step": {
        "description": "Defines a particular step within a Cloud Dataflow job. A job consists of multiple steps, each of which performs some specific operation as part of the overall job. Data is typically passed from one step to another as part of the job. **Note:** The properties of this object are not stable and might change. Here's an example of a sequence of steps which together implement a Map-Reduce job: * Read a collection of data from some source, parsing the collection's elements. * Validate the elements. * Apply a user-defined function to map each element to some value and extract an element-specific key value. * Group elements with the same key into a single element with that key, transforming a multiply-keyed collection into a uniquely-keyed collection. * Write the elements out to some data sink. Note that the Cloud Dataflow service may be used to run many different types of jobs, not just Map-Reduce.",
        "properties": {
          "kind": {
            "description": "The kind of step in the Cloud Dataflow job.",
            "type": "string"
          },
          "name": {
            "description": "The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.",
            "type": "string"
          },
          "properties": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.",
            "type": "object"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://dataflow.googleapis.com//v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Defines a job to be run by the Cloud Dataflow service. Do not enter confidential information when you supply string values using the API.",
        "**Key properties:**",
        {
          "$ul": [
            "**clientRequestId**: The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.",
            "**createTime**: The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.",
            "**createdFromSnapshotId**: If this is specified, the job's initial state is populated from the given snapshot.",
            "**currentState**: The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field might be mutated by the Dataflow service; callers cannot mutate it.",
            "**currentStateTime**: The timestamp associated with the current state.",
            [
              "**environment**: Describes the environment in which a Dataflow Job runs.",
              {
                "$ul": [
                  "**clusterManagerApiService**: The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. \"compute.googleapis.com\".",
                  "**dataset**: The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}",
                  [
                    "**debugOptions**: Describes any options that have an effect on the debugging of pipelines.",
                    {
                      "$ul": [
                        [
                          "**dataSampling**: Configuration options for sampling elements.",
                          {
                            "$ul": [
                              "**behaviors**: List of given sampling behaviors to enable. For example, specifying behaviors = [ALWAYS_ON] samples in-flight elements but does not sample exceptions. Can be used to specify multiple behaviors like, behaviors = [ALWAYS_ON, EXCEPTIONS] for specifying periodic sampling and exception sampling. If DISABLED is in the list, then sampling will be disabled and ignore the other given behaviors. Ordering does not matter."
                            ]
                          }
                        ],
                        "**enableHotKeyLogging**: When true, enables the logging of the literal hot key to the user's Cloud Logging."
                      ]
                    }
                  ],
                  "**experiments**: The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.",
                  "**flexResourceSchedulingGoal**: Which Flexible Resource Scheduling mode to run in.",
                  "**internalExperiments**: Experimental settings.",
                  "**sdkPipelineOptions**: The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.",
                  "**serviceAccountEmail**: Identity to run virtual machines as. Defaults to the default account.",
                  "**serviceKmsKeyName**: If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY",
                  "**serviceOptions**: The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).",
                  "**shuffleMode**: Output only. The shuffle mode used for the job.",
                  "**streamingMode**: Optional. Specifies the Streaming Engine message processing guarantees. Reduces cost and latency but might result in duplicate messages committed to storage. Designed to run simple mapping streaming ETL jobs at the lowest cost. For example, Change Data Capture (CDC) to BigQuery is a canonical use case.",
                  "**tempStoragePrefix**: The prefix of the resources the system should use for temporary storage. The system will append the suffix \"/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
                  "**useStreamingEngineResourceBasedBilling**: Output only. Whether the job uses the Streaming Engine resource-based billing model.",
                  "**userAgent**: A description of the process that generated the request.",
                  "**version**: A structure describing which components and their versions of the service are required in order to run the job.",
                  "**workerPools**: The worker pools. At least one \"harness\" worker pool must be specified in order for the job to have workers.",
                  "**workerRegion**: The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1\". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane's region.",
                  "**workerZone**: The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. \"us-west1-a\". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane's region is chosen based on available capacity."
                ]
              }
            ],
            [
              "**executionInfo**: Additional information about how a Cloud Dataflow job will be executed that isn't contained in the submitted job.",
              {
                "$ul": [
                  "**stages**: A mapping from each stage to the information about that stage."
                ]
              }
            ],
            "**id**: The unique ID of this job. This field is set by the Dataflow service when the job is created, and is immutable for the life of the job.",
            [
              "**jobMetadata**: Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.",
              {
                "$ul": [
                  "**bigTableDetails**: Identification of a Cloud Bigtable source used in the Dataflow job.",
                  "**bigqueryDetails**: Identification of a BigQuery source used in the Dataflow job.",
                  "**datastoreDetails**: Identification of a Datastore source used in the Dataflow job.",
                  "**fileDetails**: Identification of a File source used in the Dataflow job.",
                  "**pubsubDetails**: Identification of a Pub/Sub source used in the Dataflow job.",
                  [
                    "**sdkVersion**: The version of the SDK used to run the job.",
                    {
                      "$ul": [
                        "**bugs**: Output only. Known bugs found in this SDK version.",
                        "**sdkSupportStatus**: The support status for this SDK version.",
                        "**version**: The version of the SDK used to run the job.",
                        "**versionDisplayName**: A readable string describing the version of the SDK."
                      ]
                    }
                  ],
                  "**spannerDetails**: Identification of a Spanner source used in the Dataflow job.",
                  "**userDisplayProperties**: List of display properties to help UI filter jobs."
                ]
              }
            ],
            "**labels**: User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.",
            "**location**: The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.",
            "**name**: The user-specified Dataflow job name. Only one active job with a given name can exist in a project within one region at any given time. Jobs in different regions can have the same name. If a caller attempts to create a job with the same name as an active job that already exists, the attempt returns the existing job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`",
            [
              "**pipelineDescription**: A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.",
              {
                "$ul": [
                  "**displayData**: Pipeline level display data.",
                  "**executionPipelineStage**: Description of each stage of execution of the pipeline.",
                  "**originalPipelineTransform**: Description of each transform in the pipeline and collections between them.",
                  "**stepNamesHash**: A hash value of the submitted pipeline portable graph step names if exists."
                ]
              }
            ],
            "**projectId**: The ID of the Google Cloud project that the job belongs to.",
            "**replaceJobId**: If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.",
            "**replacedByJobId**: If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.",
            "**requestedState**: The job's requested state. Applies to `UpdateJob` requests. Set `requested_state` with `UpdateJob` requests to switch between the states `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING`. You can also use `UpdateJob` requests to change a job's state from `JOB_STATE_RUNNING` to `JOB_STATE_CANCELLED`, `JOB_STATE_DONE`, or `JOB_STATE_DRAINED`. These states irrevocably terminate the job if it hasn't already reached a terminal state. This field has no effect on `CreateJob` requests.",
            [
              "**runtimeUpdatableParams**: Additional job parameters that can only be updated during runtime using the projects.jobs.update method. These fields have no effect when specified during job creation.",
              {
                "$ul": [
                  "**maxNumWorkers**: The maximum number of workers to cap autoscaling at. This field is currently only supported for Streaming Engine jobs.",
                  "**minNumWorkers**: The minimum number of workers to scale down to. This field is currently only supported for Streaming Engine jobs.",
                  "**workerUtilizationHint**: Target worker utilization, compared against the aggregate utilization of the worker pool by autoscaler, to determine upscaling and downscaling when absent other constraints such as backlog."
                ]
              }
            ],
            "**satisfiesPzi**: Output only. Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.",
            "**satisfiesPzs**: Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.",
            "**stageStates**: This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.",
            "**startTime**: The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.",
            "**steps**: Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.",
            "**stepsLocation**: The Cloud Storage location where the steps are stored.",
            "**tempFiles**: A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}",
            "**transformNameMapping**: The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.",
            "**type**: The type of Dataflow job."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
