{
  "name": "fitness_users_dataSources_datasets_patch",
  "description": "Adds data points to a dataset. The dataset need not be previously created. All points within the given dataset will be returned with subsquent calls to retrieve this dataset. Data points can belong to more than one dataset. This method does not use patch semantics: the data points provided are merely inserted, with no existing data replaced.",
  "parameters": {
    "type": "object",
    "properties": {
      "userId": {
        "type": "string",
        "description": "Patch a dataset for the person identified. Use me to indicate the authenticated user. Only me is supported at this time."
      },
      "dataSourceId": {
        "type": "string",
        "description": "The data stream ID of the data source that created the dataset."
      },
      "datasetId": {
        "type": "string",
        "description": "This field is not used, and can be safely omitted."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Dataset"
      }
    },
    "required": [
      "userId",
      "dataSourceId",
      "datasetId"
    ],
    "$defs": {
      "Dataset": {
        "description": "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
        "properties": {
          "dataSourceId": {
            "description": "The data stream ID of the data source that created the points in this dataset.",
            "type": "string"
          },
          "maxEndTimeNs": {
            "description": "The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
            "format": "int64",
            "type": "string"
          },
          "minStartTimeNs": {
            "description": "The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
            "format": "int64",
            "type": "string"
          },
          "nextPageToken": {
            "description": "This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
            "type": "string"
          },
          "point": {
            "description": "A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response.",
            "items": {
              "$ref": "#/$defs/DataPoint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataPoint": {
        "description": "Represents a single data point, generated by a particular data source. A data point holds a value for each field, an end timestamp and an optional start time. The exact semantics of each of these attributes are specified in the documentation for the particular data type. A data point can represent an instantaneous measurement, reading or input observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type. Data points always contain one value for each field of the data type.",
        "properties": {
          "computationTimeMillis": {
            "deprecated": true,
            "description": "DO NOT USE THIS FIELD. It is ignored, and not stored.",
            "format": "int64",
            "type": "string"
          },
          "dataTypeName": {
            "description": "The data type defining the format of the values in this data point.",
            "type": "string"
          },
          "endTimeNanos": {
            "description": "The end time of the interval represented by this data point, in nanoseconds since epoch.",
            "format": "int64",
            "type": "string"
          },
          "modifiedTimeMillis": {
            "description": "Indicates the last time this data point was modified. Useful only in contexts where we are listing the data changes, rather than representing the current state of the data.",
            "format": "int64",
            "type": "string"
          },
          "originDataSourceId": {
            "description": "If the data point is contained in a dataset for a derived data source, this field will be populated with the data source stream ID that created the data point originally. WARNING: do not rely on this field for anything other than debugging. The value of this field, if it is set at all, is an implementation detail and is not guaranteed to remain consistent.",
            "type": "string"
          },
          "rawTimestampNanos": {
            "description": "The raw timestamp from the original SensorEvent.",
            "format": "int64",
            "type": "string"
          },
          "startTimeNanos": {
            "description": "The start time of the interval represented by this data point, in nanoseconds since epoch.",
            "format": "int64",
            "type": "string"
          },
          "value": {
            "description": "Values of each data type field for the data point. It is expected that each value corresponding to a data type field will occur in the same order that the field is listed with in the data type specified in a data source. Only one of integer and floating point fields will be populated, depending on the format enum value within data source's type field.",
            "items": {
              "$ref": "#/$defs/Value"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Value": {
        "description": "Holder object for the value of a single field in a data point. A field value has a particular format and is only ever set to one of an integer or a floating point value.",
        "properties": {
          "fpVal": {
            "description": "Floating point value. When this is set, other values must not be set.",
            "format": "double",
            "type": "number"
          },
          "intVal": {
            "description": "Integer value. When this is set, other values must not be set.",
            "format": "int32",
            "type": "integer"
          },
          "mapVal": {
            "description": "Map value. The valid key space and units for the corresponding value of each entry should be documented as part of the data type definition. Keys should be kept small whenever possible. Data streams with large keys and high data frequency may be down sampled.",
            "items": {
              "$ref": "#/$defs/ValueMapValEntry"
            },
            "type": "array"
          },
          "stringVal": {
            "description": "String value. When this is set, other values must not be set. Strings should be kept small whenever possible. Data streams with large string values and high data frequency may be down sampled.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValueMapValEntry": {
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "$ref": "#/$defs/MapValue"
          }
        },
        "type": "object"
      },
      "MapValue": {
        "description": "Holder object for the value of an entry in a map field of a data point. A map value supports a subset of the formats that the regular Value supports.",
        "properties": {
          "fpVal": {
            "description": "Floating point value.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://fitness.googleapis.com/fitness/v1/users/{userId}/dataSources/{dataSourceId}/datasets/{datasetId}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A dataset represents a projection container for data points. They do not carry any info of their own. Datasets represent a set of data points from a particular data source. A data point can be found in more than one dataset.",
        "**Key properties:**",
        {
          "$ul": [
            "**dataSourceId**: The data stream ID of the data source that created the points in this dataset.",
            "**maxEndTimeNs**: The largest end time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the second part of the dataset identifier.",
            "**minStartTimeNs**: The smallest start time of all data points in this possibly partial representation of the dataset. Time is in nanoseconds from epoch. This should also match the first part of the dataset identifier.",
            "**nextPageToken**: This token will be set when a dataset is received in response to a GET request and the dataset is too large to be included in a single response. Provide this value in a subsequent GET request to return the next page of data points within this dataset.",
            "**point**: A partial list of data points contained in the dataset, ordered by endTimeNanos. This list is considered complete when retrieving a small dataset and partial when patching a dataset or retrieving a dataset that is too large to include in a single response."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
