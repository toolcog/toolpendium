{
  "name": "fitness_users_dataset_aggregate",
  "description": "Aggregates data of a certain type or stream into buckets divided by a given type of boundary. Multiple data sets of multiple types and from multiple sources can be aggregated into exactly one bucket type per request.",
  "parameters": {
    "type": "object",
    "properties": {
      "userId": {
        "type": "string",
        "description": "Aggregate data for the person identified. Use me to indicate the authenticated user. Only me is supported at this time."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/AggregateRequest"
      }
    },
    "required": [
      "userId"
    ],
    "$defs": {
      "AggregateRequest": {
        "description": "Next id: 10",
        "properties": {
          "aggregateBy": {
            "description": "The specification of data to be aggregated. At least one aggregateBy spec must be provided. All data that is specified will be aggregated using the same bucketing criteria. There will be one dataset in the response for every aggregateBy spec.",
            "items": {
              "$ref": "#/$defs/AggregateBy"
            },
            "type": "array"
          },
          "bucketByActivitySegment": {
            "$ref": "#/$defs/BucketByActivity"
          },
          "bucketByActivityType": {
            "$ref": "#/$defs/BucketByActivity"
          },
          "bucketBySession": {
            "$ref": "#/$defs/BucketBySession"
          },
          "bucketByTime": {
            "$ref": "#/$defs/BucketByTime"
          },
          "endTimeMillis": {
            "description": "The end of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive. The maximum allowed difference between start_time_millis // and end_time_millis is 7776000000 (roughly 90 days).",
            "format": "int64",
            "type": "string"
          },
          "filteredDataQualityStandard": {
            "deprecated": true,
            "description": "DO NOT POPULATE THIS FIELD. It is ignored.",
            "items": {
              "enum": [
                "dataQualityUnknown",
                "dataQualityBloodPressureEsh2002",
                "dataQualityBloodPressureEsh2010",
                "dataQualityBloodPressureAami",
                "dataQualityBloodPressureBhsAA",
                "dataQualityBloodPressureBhsAB",
                "dataQualityBloodPressureBhsBA",
                "dataQualityBloodPressureBhsBB",
                "dataQualityBloodGlucoseIso151972003",
                "dataQualityBloodGlucoseIso151972013"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "startTimeMillis": {
            "description": "The start of a window of time. Data that intersects with this time window will be aggregated. The time is in milliseconds since epoch, inclusive.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AggregateBy": {
        "description": "The specification of which data to aggregate.",
        "properties": {
          "dataSourceId": {
            "description": "A data source ID to aggregate. Only data from the specified data source ID will be included in the aggregation. If specified, this data source must exist; the OAuth scopes in the supplied credentials must grant read access to this data type. The dataset in the response will have the same data source ID. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.",
            "type": "string"
          },
          "dataTypeName": {
            "description": "The data type to aggregate. All data sources providing this data type will contribute data to the aggregation. The response will contain a single dataset for this data type name. The dataset will have a data source ID of derived::com.google.android.gms:aggregated. If the user has no data for this data type, an empty data set will be returned. Note: Data can be aggregated by either the dataTypeName or the dataSourceId, not both.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BucketByActivity": {
        "properties": {
          "activityDataSourceId": {
            "description": "The default activity stream will be used if a specific activityDataSourceId is not specified.",
            "type": "string"
          },
          "minDurationMillis": {
            "description": "Specifies that only activity segments of duration longer than minDurationMillis are considered and used as a container for aggregated data.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BucketBySession": {
        "properties": {
          "minDurationMillis": {
            "description": "Specifies that only sessions of duration longer than minDurationMillis are considered and used as a container for aggregated data.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BucketByTime": {
        "properties": {
          "durationMillis": {
            "description": "Specifies that result buckets aggregate data by exactly durationMillis time frames. Time frames that contain no data will be included in the response with an empty dataset.",
            "format": "int64",
            "type": "string"
          },
          "period": {
            "$ref": "#/$defs/BucketByTimePeriod"
          }
        },
        "type": "object"
      },
      "BucketByTimePeriod": {
        "properties": {
          "timeZoneId": {
            "description": "org.joda.timezone.DateTimeZone",
            "type": "string"
          },
          "type": {
            "enum": [
              "day",
              "week",
              "month"
            ],
            "type": "string"
          },
          "value": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://fitness.googleapis.com/fitness/v1/users/{userId}/dataset:aggregate{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**bucket**: A list of buckets containing the aggregated data."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
