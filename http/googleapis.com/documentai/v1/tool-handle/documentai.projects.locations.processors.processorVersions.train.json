{
  "name": "documentai_projects_locations_processors_processorVersions_train",
  "description": "Trains a new processor version. Operation metadata is returned as TrainProcessorVersionMetadata.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent (project, location and processor) to create the new version for. Format: `projects/{project}/locations/{location}/processors/{processor}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDocumentaiV1TrainProcessorVersionRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDocumentaiV1TrainProcessorVersionRequest": {
        "description": "Request message for the TrainProcessorVersion method.",
        "properties": {
          "baseProcessorVersion": {
            "description": "Optional. The processor version to use as a base for training. This processor version must be a child of `parent`. Format: `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`.",
            "type": "string"
          },
          "customDocumentExtractionOptions": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions"
          },
          "documentSchema": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1DocumentSchema"
          },
          "inputData": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData"
          },
          "processorVersion": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1ProcessorVersion"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1TrainProcessorVersionRequestCustomDocumentExtractionOptions": {
        "description": "Options to control the training of the Custom Document Extraction (CDE) Processor.",
        "properties": {
          "trainingMethod": {
            "description": "Training method to use for CDE training.",
            "enum": [
              "TRAINING_METHOD_UNSPECIFIED",
              "MODEL_BASED",
              "TEMPLATE_BASED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1DocumentSchema": {
        "description": "The schema defines the output of the processed document by a processor.",
        "properties": {
          "description": {
            "description": "Description of the schema.",
            "type": "string"
          },
          "displayName": {
            "description": "Display name to show to users.",
            "type": "string"
          },
          "entityTypes": {
            "description": "Entity types of the schema.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1DocumentSchemaEntityType"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1DocumentSchemaMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1DocumentSchemaEntityType": {
        "description": "EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.",
        "properties": {
          "baseTypes": {
            "description": "The entity type that this type is derived from. For now, one and only one should be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "displayName": {
            "description": "User defined name for the type.",
            "type": "string"
          },
          "enumValues": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues"
          },
          "name": {
            "description": "Name of the type. It must be unique within the schema file and cannot be a \"Common Type\". The following naming conventions are used: - Use `snake_casing`. - Name matching is case-sensitive. - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character.) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.",
            "type": "string"
          },
          "properties": {
            "description": "Description the nested structure, or composition of an entity.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1DocumentSchemaEntityTypeEnumValues": {
        "description": "Defines the a list of enum values.",
        "properties": {
          "values": {
            "description": "The individual values that this enum values type can include.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1DocumentSchemaEntityTypeProperty": {
        "description": "Defines properties that can be part of the entity type.",
        "properties": {
          "displayName": {
            "description": "User defined name for the property.",
            "type": "string"
          },
          "name": {
            "description": "The name of the property. Follows the same guidelines as the EntityType name.",
            "type": "string"
          },
          "occurrenceType": {
            "description": "Occurrence type limits the number of instances an entity type appears in the document.",
            "enum": [
              "OCCURRENCE_TYPE_UNSPECIFIED",
              "OPTIONAL_ONCE",
              "OPTIONAL_MULTIPLE",
              "REQUIRED_ONCE",
              "REQUIRED_MULTIPLE"
            ],
            "type": "string"
          },
          "valueType": {
            "description": "A reference to the value type of the property. This type is subject to the same conventions as the `Entity.base_types` field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1DocumentSchemaMetadata": {
        "description": "Metadata for global schema behavior.",
        "properties": {
          "documentAllowMultipleLabels": {
            "description": "If true, on a given page, there can be multiple `document` annotations covering it.",
            "type": "boolean"
          },
          "documentSplitter": {
            "description": "If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).",
            "type": "boolean"
          },
          "prefixedNamingOnProperties": {
            "description": "If set, all the nested entities must be prefixed with the parents.",
            "type": "boolean"
          },
          "skipNamingValidation": {
            "description": "If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1TrainProcessorVersionRequestInputData": {
        "description": "The input data used to train a new ProcessorVersion.",
        "properties": {
          "testDocuments": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1BatchDocumentsInputConfig"
          },
          "trainingDocuments": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1BatchDocumentsInputConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1BatchDocumentsInputConfig": {
        "description": "The common config to specify a set of documents used as input.",
        "properties": {
          "gcsDocuments": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1GcsDocuments"
          },
          "gcsPrefix": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1GcsPrefix"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1GcsDocuments": {
        "description": "Specifies a set of documents on Cloud Storage.",
        "properties": {
          "documents": {
            "description": "The list of documents.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1GcsDocument"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1GcsDocument": {
        "description": "Specifies a document stored on Cloud Storage.",
        "properties": {
          "gcsUri": {
            "description": "The Cloud Storage object uri.",
            "type": "string"
          },
          "mimeType": {
            "description": "An IANA MIME type (RFC6838) of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1GcsPrefix": {
        "description": "Specifies all documents on Cloud Storage with a common prefix.",
        "properties": {
          "gcsUriPrefix": {
            "description": "The URI prefix.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1ProcessorVersion": {
        "description": "A processor version is an implementation of a processor. Each processor can have multiple versions, pretrained by Google internally or uptrained by the customer. A processor can only have one default version at a time. Its document-processing behavior is defined by that version.",
        "properties": {
          "createTime": {
            "description": "The time the processor version was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "deprecationInfo": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1ProcessorVersionDeprecationInfo"
          },
          "displayName": {
            "description": "The display name of the processor version.",
            "type": "string"
          },
          "documentSchema": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1DocumentSchema"
          },
          "googleManaged": {
            "description": "Output only. Denotes that this `ProcessorVersion` is managed by Google.",
            "readOnly": true,
            "type": "boolean"
          },
          "kmsKeyName": {
            "description": "The KMS key name used for encryption.",
            "type": "string"
          },
          "kmsKeyVersionName": {
            "description": "The KMS key version with which data is encrypted.",
            "type": "string"
          },
          "latestEvaluation": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1EvaluationReference"
          },
          "modelType": {
            "description": "Output only. The model type of this processor version.",
            "enum": [
              "MODEL_TYPE_UNSPECIFIED",
              "MODEL_TYPE_GENERATIVE",
              "MODEL_TYPE_CUSTOM"
            ],
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "The resource name of the processor version. Format: `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processor_version}`",
            "type": "string"
          },
          "state": {
            "description": "The state of the processor version.",
            "enum": [
              "STATE_UNSPECIFIED",
              "DEPLOYED",
              "DEPLOYING",
              "UNDEPLOYED",
              "UNDEPLOYING",
              "CREATING",
              "DELETING",
              "FAILED",
              "IMPORTING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1ProcessorVersionDeprecationInfo": {
        "description": "Information about the upcoming deprecation of this processor version.",
        "properties": {
          "deprecationTime": {
            "description": "The time at which this processor version will be deprecated.",
            "format": "google-datetime",
            "type": "string"
          },
          "replacementProcessorVersion": {
            "description": "If set, the processor version that will be used as a replacement.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1EvaluationReference": {
        "description": "Gives a short summary of an evaluation, and links to the evaluation itself.",
        "properties": {
          "aggregateMetrics": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1EvaluationMetrics"
          },
          "aggregateMetricsExact": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1EvaluationMetrics"
          },
          "evaluation": {
            "description": "The resource name of the evaluation.",
            "type": "string"
          },
          "operation": {
            "description": "The resource name of the Long Running Operation for the evaluation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1EvaluationMetrics": {
        "description": "Evaluation metrics, either in aggregate or about a specific entity.",
        "properties": {
          "f1Score": {
            "description": "The calculated f1 score.",
            "format": "float",
            "type": "number"
          },
          "falseNegativesCount": {
            "description": "The amount of false negatives.",
            "format": "int32",
            "type": "integer"
          },
          "falsePositivesCount": {
            "description": "The amount of false positives.",
            "format": "int32",
            "type": "integer"
          },
          "groundTruthDocumentCount": {
            "description": "The amount of documents with a ground truth occurrence.",
            "format": "int32",
            "type": "integer"
          },
          "groundTruthOccurrencesCount": {
            "description": "The amount of occurrences in ground truth documents.",
            "format": "int32",
            "type": "integer"
          },
          "precision": {
            "description": "The calculated precision.",
            "format": "float",
            "type": "number"
          },
          "predictedDocumentCount": {
            "description": "The amount of documents with a predicted occurrence.",
            "format": "int32",
            "type": "integer"
          },
          "predictedOccurrencesCount": {
            "description": "The amount of occurrences in predicted documents.",
            "format": "int32",
            "type": "integer"
          },
          "recall": {
            "description": "The calculated recall.",
            "format": "float",
            "type": "number"
          },
          "totalDocumentsCount": {
            "description": "The amount of documents that had an occurrence of this label.",
            "format": "int32",
            "type": "integer"
          },
          "truePositivesCount": {
            "description": "The amount of true positives.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://documentai.googleapis.com//v1/{parent}/processorVersions:train{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
