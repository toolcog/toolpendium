{
  "name": "documentai_projects_locations_processors_dataset_updateDatasetSchema",
  "description": "Updates a `DatasetSchema`.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Dataset schema resource name. Format: `projects/{project}/locations/{location}/processors/{processor}/dataset/datasetSchema`"
      },
      "updateMask": {
        "type": "string",
        "description": "The update mask applies to the resource."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DatasetSchema"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudDocumentaiV1beta3DatasetSchema": {
        "description": "Dataset Schema.",
        "properties": {
          "documentSchema": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchema"
          },
          "name": {
            "description": "Dataset schema resource name. Format: `projects/{project}/locations/{location}/processors/{processor}/dataset/datasetSchema`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchema": {
        "description": "The schema defines the output of the processed document by a processor.",
        "properties": {
          "description": {
            "description": "Description of the schema.",
            "type": "string"
          },
          "displayName": {
            "description": "Display name to show to users.",
            "type": "string"
          },
          "entityTypes": {
            "description": "Entity types of the schema.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType": {
        "description": "EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.",
        "properties": {
          "baseTypes": {
            "description": "The entity type that this type is derived from. For now, one and only one should be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "displayName": {
            "description": "User defined name for the type.",
            "type": "string"
          },
          "entityTypeMetadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3EntityTypeMetadata"
          },
          "enumValues": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues"
          },
          "name": {
            "description": "Name of the type. It must be unique within the schema file and cannot be a \"Common Type\". The following naming conventions are used: - Use `snake_casing`. - Name matching is case-sensitive. - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character.) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.",
            "type": "string"
          },
          "properties": {
            "description": "Description the nested structure, or composition of an entity.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3EntityTypeMetadata": {
        "description": "Metadata about an entity type.",
        "properties": {
          "inactive": {
            "description": "Whether the entity type should be considered inactive.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues": {
        "description": "Defines the a list of enum values.",
        "properties": {
          "values": {
            "description": "The individual values that this enum values type can include.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty": {
        "description": "Defines properties that can be part of the entity type.",
        "properties": {
          "displayName": {
            "description": "User defined name for the property.",
            "type": "string"
          },
          "name": {
            "description": "The name of the property. Follows the same guidelines as the EntityType name.",
            "type": "string"
          },
          "occurrenceType": {
            "description": "Occurrence type limits the number of instances an entity type appears in the document.",
            "enum": [
              "OCCURRENCE_TYPE_UNSPECIFIED",
              "OPTIONAL_ONCE",
              "OPTIONAL_MULTIPLE",
              "REQUIRED_ONCE",
              "REQUIRED_MULTIPLE"
            ],
            "type": "string"
          },
          "propertyMetadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3PropertyMetadata"
          },
          "valueType": {
            "description": "A reference to the value type of the property. This type is subject to the same conventions as the `Entity.base_types` field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3PropertyMetadata": {
        "description": "Metadata about a property.",
        "properties": {
          "fieldExtractionMetadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3FieldExtractionMetadata"
          },
          "inactive": {
            "description": "Whether the property should be considered as \"inactive\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3FieldExtractionMetadata": {
        "description": "Metadata for how this field value is extracted.",
        "properties": {
          "summaryOptions": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3SummaryOptions"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3SummaryOptions": {
        "description": "Metadata for document summarization.",
        "properties": {
          "format": {
            "description": "The format the summary should be in.",
            "enum": [
              "FORMAT_UNSPECIFIED",
              "PARAGRAPH",
              "BULLETS"
            ],
            "type": "string"
          },
          "length": {
            "description": "How long the summary should be.",
            "enum": [
              "LENGTH_UNSPECIFIED",
              "BRIEF",
              "MODERATE",
              "COMPREHENSIVE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata": {
        "description": "Metadata for global schema behavior.",
        "properties": {
          "documentAllowMultipleLabels": {
            "description": "If true, on a given page, there can be multiple `document` annotations covering it.",
            "type": "boolean"
          },
          "documentSplitter": {
            "description": "If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).",
            "type": "boolean"
          },
          "prefixedNamingOnProperties": {
            "description": "If set, all the nested entities must be prefixed with the parents.",
            "type": "boolean"
          },
          "skipNamingValidation": {
            "description": "If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://documentai.googleapis.com//v1beta3/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Dataset Schema.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**documentSchema**: The schema defines the output of the processed document by a processor.",
              {
                "$ul": [
                  "**description**: Description of the schema.",
                  "**displayName**: Display name to show to users.",
                  "**entityTypes**: Entity types of the schema.",
                  [
                    "**metadata**: Metadata for global schema behavior.",
                    {
                      "$ul": [
                        "**documentAllowMultipleLabels**: If true, on a given page, there can be multiple `document` annotations covering it.",
                        "**documentSplitter**: If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).",
                        "**prefixedNamingOnProperties**: If set, all the nested entities must be prefixed with the parents.",
                        "**skipNamingValidation**: If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**name**: Dataset schema resource name. Format: `projects/{project}/locations/{location}/processors/{processor}/dataset/datasetSchema`"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
