{
  "name": "documentai_projects_locations_processors_processorVersions_batchProcess",
  "description": "LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The resource name of Processor or ProcessorVersion. Format: `projects/{project}/locations/{location}/processors/{processor}`, or `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3BatchProcessRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudDocumentaiV1beta3BatchProcessRequest": {
        "description": "Request message for BatchProcessDocuments.",
        "properties": {
          "documentOutputConfig": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentOutputConfig"
          },
          "inputConfigs": {
            "deprecated": true,
            "description": "The input config for each single document in the batch process.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig"
            },
            "type": "array"
          },
          "inputDocuments": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints) and can only contain lowercase letters, numeric characters, underscores, and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.",
            "type": "object"
          },
          "outputConfig": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig"
          },
          "processOptions": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3ProcessOptions"
          },
          "skipHumanReview": {
            "description": "Whether human review should be skipped for this request. Default to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentOutputConfig": {
        "description": "Config that controls the output of documents. All documents will be written as a JSON file.",
        "properties": {
          "gcsOutputConfig": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfig": {
        "description": "The configuration used when outputting documents.",
        "properties": {
          "fieldMask": {
            "description": "Specifies which fields to include in the output documents. Only supports top level document and pages field so it must be in the form of `{document_field_name}` or `pages.{page_field_name}`.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "gcsUri": {
            "description": "The Cloud Storage uri (a directory) of the output.",
            "type": "string"
          },
          "shardingConfig": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentOutputConfigGcsOutputConfigShardingConfig": {
        "description": "The sharding config for the output document.",
        "properties": {
          "pagesOverlap": {
            "description": "The number of overlapping pages between consecutive shards.",
            "format": "int32",
            "type": "integer"
          },
          "pagesPerShard": {
            "description": "The number of pages per shard.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchInputConfig": {
        "deprecated": true,
        "description": "The message for input config in batch process.",
        "properties": {
          "gcsSource": {
            "description": "The Cloud Storage location as the source of the document.",
            "type": "string"
          },
          "mimeType": {
            "description": "An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml) of the input. If the input is a raw document, refer to [supported file types](https://cloud.google.com/document-ai/docs/file-types) for the list of media types. If the input is a Document, the type should be `application/json`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3BatchDocumentsInputConfig": {
        "description": "The common config to specify a set of documents used as input.",
        "properties": {
          "gcsDocuments": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3GcsDocuments"
          },
          "gcsPrefix": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3GcsPrefix"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3GcsDocuments": {
        "description": "Specifies a set of documents on Cloud Storage.",
        "properties": {
          "documents": {
            "description": "The list of documents.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3GcsDocument"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3GcsDocument": {
        "description": "Specifies a document stored on Cloud Storage.",
        "properties": {
          "gcsUri": {
            "description": "The Cloud Storage object uri.",
            "type": "string"
          },
          "mimeType": {
            "description": "An IANA MIME type (RFC6838) of the content.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3GcsPrefix": {
        "description": "Specifies all documents on Cloud Storage with a common prefix.",
        "properties": {
          "gcsUriPrefix": {
            "description": "The URI prefix.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3BatchProcessRequestBatchOutputConfig": {
        "deprecated": true,
        "description": "The output configuration in the BatchProcessDocuments method.",
        "properties": {
          "gcsDestination": {
            "description": "The output Cloud Storage directory to put the processed documents.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3ProcessOptions": {
        "description": "Options for Process API",
        "properties": {
          "fromEnd": {
            "description": "Only process certain pages from the end, same as above.",
            "format": "int32",
            "type": "integer"
          },
          "fromStart": {
            "description": "Only process certain pages from the start. Process all if the document has fewer pages.",
            "format": "int32",
            "type": "integer"
          },
          "individualPageSelector": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector"
          },
          "ocrConfig": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3OcrConfig"
          },
          "schemaOverride": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchema"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3ProcessOptionsIndividualPageSelector": {
        "description": "A list of individual page numbers.",
        "properties": {
          "pages": {
            "description": "Optional. Indices of the pages (starting from 1).",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3OcrConfig": {
        "description": "Config for Document OCR.",
        "properties": {
          "advancedOcrOptions": {
            "description": "A list of advanced OCR options to further fine-tune OCR behavior. Current valid values are: - `legacy_layout`: a heuristics layout detection algorithm, which serves as an alternative to the current ML-based layout detection algorithm. Customers can choose the best suitable layout algorithm based on their situation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "computeStyleInfo": {
            "deprecated": true,
            "description": "Turn on font identification model and return font style information. Deprecated, use PremiumFeatures.compute_style_info instead.",
            "type": "boolean"
          },
          "disableCharacterBoxesDetection": {
            "description": "Turn off character box detector in OCR engine. Character box detection is enabled by default in OCR 2.0 (and later) processors.",
            "type": "boolean"
          },
          "enableImageQualityScores": {
            "description": "Enables intelligent document quality scores after OCR. Can help with diagnosing why OCR responses are of poor quality for a given input. Adds additional latency comparable to regular OCR to the process call.",
            "type": "boolean"
          },
          "enableNativePdfParsing": {
            "description": "Enables special handling for PDFs with existing text information. Results in better text extraction quality in such PDF inputs.",
            "type": "boolean"
          },
          "enableSymbol": {
            "description": "Includes symbol level OCR information if set to true.",
            "type": "boolean"
          },
          "hints": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3OcrConfigHints"
          },
          "premiumFeatures": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3OcrConfigHints": {
        "description": "Hints for OCR Engine",
        "properties": {
          "languageHints": {
            "description": "List of BCP-47 language codes to use for OCR. In most cases, not specifying it yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting hints is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong).",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3OcrConfigPremiumFeatures": {
        "description": "Configurations for premium OCR features.",
        "properties": {
          "computeStyleInfo": {
            "description": "Turn on font identification model and return font style information.",
            "type": "boolean"
          },
          "enableMathOcr": {
            "description": "Turn on the model that can extract LaTeX math formulas.",
            "type": "boolean"
          },
          "enableSelectionMarkDetection": {
            "description": "Turn on selection mark detector in OCR engine. Only available in OCR 2.0 (and later) processors.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchema": {
        "description": "The schema defines the output of the processed document by a processor.",
        "properties": {
          "description": {
            "description": "Description of the schema.",
            "type": "string"
          },
          "displayName": {
            "description": "Display name to show to users.",
            "type": "string"
          },
          "entityTypes": {
            "description": "Entity types of the schema.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaEntityType": {
        "description": "EntityType is the wrapper of a label of the corresponding model with detailed attributes and limitations for entity-based processors. Multiple types can also compose a dependency tree to represent nested types.",
        "properties": {
          "baseTypes": {
            "description": "The entity type that this type is derived from. For now, one and only one should be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "displayName": {
            "description": "User defined name for the type.",
            "type": "string"
          },
          "entityTypeMetadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3EntityTypeMetadata"
          },
          "enumValues": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues"
          },
          "name": {
            "description": "Name of the type. It must be unique within the schema file and cannot be a \"Common Type\". The following naming conventions are used: - Use `snake_casing`. - Name matching is case-sensitive. - Maximum 64 characters. - Must start with a letter. - Allowed characters: ASCII letters `[a-z0-9_-]`. (For backward compatibility internal infrastructure and tooling can handle any ascii character.) - The `/` is sometimes used to denote a property of a type. For example `line_item/amount`. This convention is deprecated, but will still be honored for backward compatibility.",
            "type": "string"
          },
          "properties": {
            "description": "Description the nested structure, or composition of an entity.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3EntityTypeMetadata": {
        "description": "Metadata about an entity type.",
        "properties": {
          "inactive": {
            "description": "Whether the entity type should be considered inactive.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeEnumValues": {
        "description": "Defines the a list of enum values.",
        "properties": {
          "values": {
            "description": "The individual values that this enum values type can include.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaEntityTypeProperty": {
        "description": "Defines properties that can be part of the entity type.",
        "properties": {
          "displayName": {
            "description": "User defined name for the property.",
            "type": "string"
          },
          "name": {
            "description": "The name of the property. Follows the same guidelines as the EntityType name.",
            "type": "string"
          },
          "occurrenceType": {
            "description": "Occurrence type limits the number of instances an entity type appears in the document.",
            "enum": [
              "OCCURRENCE_TYPE_UNSPECIFIED",
              "OPTIONAL_ONCE",
              "OPTIONAL_MULTIPLE",
              "REQUIRED_ONCE",
              "REQUIRED_MULTIPLE"
            ],
            "type": "string"
          },
          "propertyMetadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3PropertyMetadata"
          },
          "valueType": {
            "description": "A reference to the value type of the property. This type is subject to the same conventions as the `Entity.base_types` field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3PropertyMetadata": {
        "description": "Metadata about a property.",
        "properties": {
          "fieldExtractionMetadata": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3FieldExtractionMetadata"
          },
          "inactive": {
            "description": "Whether the property should be considered as \"inactive\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3FieldExtractionMetadata": {
        "description": "Metadata for how this field value is extracted.",
        "properties": {
          "summaryOptions": {
            "$ref": "#/$defs/GoogleCloudDocumentaiV1beta3SummaryOptions"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3SummaryOptions": {
        "description": "Metadata for document summarization.",
        "properties": {
          "format": {
            "description": "The format the summary should be in.",
            "enum": [
              "FORMAT_UNSPECIFIED",
              "PARAGRAPH",
              "BULLETS"
            ],
            "type": "string"
          },
          "length": {
            "description": "How long the summary should be.",
            "enum": [
              "LENGTH_UNSPECIFIED",
              "BRIEF",
              "MODERATE",
              "COMPREHENSIVE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDocumentaiV1beta3DocumentSchemaMetadata": {
        "description": "Metadata for global schema behavior.",
        "properties": {
          "documentAllowMultipleLabels": {
            "description": "If true, on a given page, there can be multiple `document` annotations covering it.",
            "type": "boolean"
          },
          "documentSplitter": {
            "description": "If true, a `document` entity type can be applied to subdocument (splitting). Otherwise, it can only be applied to the entire document (classification).",
            "type": "boolean"
          },
          "prefixedNamingOnProperties": {
            "description": "If set, all the nested entities must be prefixed with the parents.",
            "type": "boolean"
          },
          "skipNamingValidation": {
            "description": "If set, we will skip the naming format validation in the schema. So the string values in `DocumentSchema.EntityType.name` and `DocumentSchema.EntityType.Property.name` will not be checked.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://documentai.googleapis.com//v1beta3/{name}:batchProcess{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
