{
  "name": "datamigration_projects_locations_migrationJobs_verify",
  "description": "Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Name of the migration job resource to verify."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/VerifyMigrationJobRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "VerifyMigrationJobRequest": {
        "description": "Request message for 'VerifyMigrationJob' request.",
        "properties": {
          "migrationJob": {
            "$ref": "#/$defs/MigrationJob"
          },
          "updateMask": {
            "description": "Optional. Field mask is used to specify the changed fields to be verified. It will not update the migration job.",
            "format": "google-fieldmask",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MigrationJob": {
        "description": "Represents a Database Migration Service migration job object.",
        "properties": {
          "cmekKeyName": {
            "description": "The CMEK (customer-managed encryption key) fully qualified key name used for the migration job. This field supports all migration jobs types except for: * Mysql to Mysql (use the cmek field in the cloudsql connection profile instead). * PostrgeSQL to PostgreSQL (use the cmek field in the cloudsql connection profile instead). * PostgreSQL to AlloyDB (use the kms_key_name field in the alloydb connection profile instead). Each Cloud CMEK key has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]",
            "type": "string"
          },
          "conversionWorkspace": {
            "$ref": "#/$defs/ConversionWorkspaceInfo"
          },
          "createTime": {
            "description": "Output only. The timestamp when the migration job resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "destination": {
            "description": "Required. The resource name (URI) of the destination connection profile.",
            "type": "string"
          },
          "destinationDatabase": {
            "$ref": "#/$defs/DatabaseType"
          },
          "displayName": {
            "description": "The migration job display name.",
            "type": "string"
          },
          "dumpFlags": {
            "$ref": "#/$defs/DumpFlags"
          },
          "dumpPath": {
            "description": "The path to the dump file in Google Cloud Storage, in the format: (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the \"dump_flags\" field are mutually exclusive.",
            "type": "string"
          },
          "duration": {
            "description": "Output only. The duration of the migration job (in seconds). A duration in seconds with up to nine fractional digits, terminated by 's'. Example: \"3.5s\".",
            "format": "google-duration",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. If the migration job is completed, the time when it was completed.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "filter": {
            "description": "This field can be used to select the entities to migrate as part of the migration job. It uses AIP-160 notation to select a subset of the entities configured on the associated conversion-workspace. This field should not be set on migration-jobs that are not associated with a conversion workspace.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The resource labels for migration job to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.",
            "type": "object"
          },
          "name": {
            "description": "The name (URI) of this migration job resource, in the form of: projects/{project}/locations/{location}/migrationJobs/{migrationJob}.",
            "type": "string"
          },
          "performanceConfig": {
            "$ref": "#/$defs/PerformanceConfig"
          },
          "phase": {
            "description": "Output only. The current migration job phase.",
            "enum": [
              "PHASE_UNSPECIFIED",
              "FULL_DUMP",
              "CDC",
              "PROMOTE_IN_PROGRESS",
              "WAITING_FOR_SOURCE_WRITES_TO_STOP",
              "PREPARING_THE_DUMP"
            ],
            "readOnly": true,
            "type": "string"
          },
          "reverseSshConnectivity": {
            "$ref": "#/$defs/ReverseSshConnectivity"
          },
          "source": {
            "description": "Required. The resource name (URI) of the source connection profile.",
            "type": "string"
          },
          "sourceDatabase": {
            "$ref": "#/$defs/DatabaseType"
          },
          "state": {
            "description": "The current migration job state.",
            "enum": [
              "STATE_UNSPECIFIED",
              "MAINTENANCE",
              "DRAFT",
              "CREATING",
              "NOT_STARTED",
              "RUNNING",
              "FAILED",
              "COMPLETED",
              "DELETING",
              "STOPPING",
              "STOPPED",
              "DELETED",
              "UPDATING",
              "STARTING",
              "RESTARTING",
              "RESUMING"
            ],
            "type": "string"
          },
          "staticIpConnectivity": {
            "$ref": "#/$defs/StaticIpConnectivity"
          },
          "type": {
            "description": "Required. The migration job type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "ONE_TIME",
              "CONTINUOUS"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp when the migration job resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "vpcPeeringConnectivity": {
            "$ref": "#/$defs/VpcPeeringConnectivity"
          }
        },
        "type": "object"
      },
      "ConversionWorkspaceInfo": {
        "description": "A conversion workspace's version.",
        "properties": {
          "commitId": {
            "description": "The commit ID of the conversion workspace.",
            "type": "string"
          },
          "name": {
            "description": "The resource name (URI) of the conversion workspace.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DatabaseType": {
        "description": "A message defining the database engine and provider.",
        "properties": {
          "engine": {
            "description": "The database engine.",
            "enum": [
              "DATABASE_ENGINE_UNSPECIFIED",
              "MYSQL",
              "POSTGRESQL",
              "ORACLE"
            ],
            "type": "string"
          },
          "provider": {
            "description": "The database provider.",
            "enum": [
              "DATABASE_PROVIDER_UNSPECIFIED",
              "CLOUDSQL",
              "RDS",
              "AURORA",
              "ALLOYDB"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DumpFlags": {
        "description": "Dump flags definition.",
        "properties": {
          "dumpFlags": {
            "description": "The flags for the initial dump.",
            "items": {
              "$ref": "#/$defs/DumpFlag"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DumpFlag": {
        "description": "Dump flag definition.",
        "properties": {
          "name": {
            "description": "The name of the flag",
            "type": "string"
          },
          "value": {
            "description": "The value of the flag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PerformanceConfig": {
        "description": "Performance configuration definition.",
        "properties": {
          "dumpParallelLevel": {
            "description": "Initial dump parallelism level.",
            "enum": [
              "DUMP_PARALLEL_LEVEL_UNSPECIFIED",
              "MIN",
              "OPTIMAL",
              "MAX"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReverseSshConnectivity": {
        "description": "The details needed to configure a reverse SSH tunnel between the source and destination databases. These details will be used when calling the generateSshScript method (see https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript) to produce the script that will help set up the reverse SSH tunnel, and to set up the VPC peering between the Cloud SQL private network and the VPC.",
        "properties": {
          "vm": {
            "description": "The name of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.",
            "type": "string"
          },
          "vmIp": {
            "description": "Required. The IP of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.",
            "type": "string"
          },
          "vmPort": {
            "description": "Required. The forwarding port of the virtual machine (Compute Engine) used as the bastion server for the SSH tunnel.",
            "format": "int32",
            "type": "integer"
          },
          "vpc": {
            "description": "The name of the VPC to peer with the Cloud SQL private network.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StaticIpConnectivity": {
        "description": "The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.",
        "properties": {},
        "type": "object"
      },
      "VpcPeeringConnectivity": {
        "description": "The details of the VPC where the source database is located in Google Cloud. We will use this information to set up the VPC peering connection between Cloud SQL and this VPC.",
        "properties": {
          "vpc": {
            "description": "The name of the VPC network to peer with the Cloud SQL private network.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://datamigration.googleapis.com//v1/{name}:verify{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
