{
  "name": "websecurityscanner_projects_scanConfigs_scanRuns_findings_get",
  "description": "Gets a Finding.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The resource name of the Finding to be returned. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanRuns/{scanRunId}/findings/{findingId}'."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://websecurityscanner.googleapis.com//v1beta/{name}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Finding resource represents a vulnerability instance identified during a ScanRun.",
        "**Key properties:**",
        {
          "$ul": [
            "**body**: The body of the request that triggered the vulnerability.",
            "**description**: The description of the vulnerability.",
            "**finalUrl**: The URL where the browser lands when the vulnerability is detected.",
            "**findingType**: The type of the Finding. Detailed and up-to-date information on findings can be found here: https://cloud.google.com/security-command-center/docs/how-to-remediate-web-security-scanner",
            [
              "**form**: ! Information about a vulnerability with an HTML.",
              {
                "$ul": [
                  "**actionUri**: ! The URI where to send the form when it's submitted.",
                  "**fields**: ! The names of form fields related to the vulnerability."
                ]
              }
            ],
            "**frameUrl**: If the vulnerability was originated from nested IFrame, the immediate parent IFrame is reported.",
            "**fuzzedUrl**: The URL produced by the server-side fuzzer and used in the request that triggered the vulnerability.",
            "**httpMethod**: The http method of the request that triggered the vulnerability, in uppercase.",
            "**name**: The resource name of the Finding. The name follows the format of 'projects/{projectId}/scanConfigs/{scanConfigId}/scanruns/{scanRunId}/findings/{findingId}'. The finding IDs are generated by the system.",
            [
              "**outdatedLibrary**: Information reported for an outdated library.",
              {
                "$ul": [
                  "**learnMoreUrls**: URLs to learn more information about the vulnerabilities in the library.",
                  "**libraryName**: The name of the outdated library.",
                  "**version**: The version number."
                ]
              }
            ],
            "**reproductionUrl**: The URL containing human-readable payload that user can leverage to reproduce the vulnerability.",
            "**severity**: The severity level of the reported vulnerability.",
            "**trackingId**: The tracking ID uniquely identifies a vulnerability instance across multiple ScanRuns.",
            [
              "**violatingResource**: Information regarding any resource causing the vulnerability such as JavaScript sources, image, audio files, etc.",
              {
                "$ul": [
                  "**contentType**: The MIME type of this resource.",
                  "**resourceUrl**: URL of this violating resource."
                ]
              }
            ],
            [
              "**vulnerableHeaders**: Information about vulnerable or missing HTTP Headers.",
              {
                "$ul": [
                  "**headers**: List of vulnerable headers.",
                  "**missingHeaders**: List of missing headers."
                ]
              }
            ],
            [
              "**vulnerableParameters**: Information about vulnerable request parameters.",
              {
                "$ul": [
                  "**parameterNames**: The vulnerable parameter names."
                ]
              }
            ],
            [
              "**xss**: Information reported for an XSS.",
              {
                "$ul": [
                  "**errorMessage**: An error message generated by a javascript breakage.",
                  "**stackTraces**: Stack traces leading to the point where the XSS occurred."
                ]
              }
            ],
            [
              "**xxe**: Information reported for an XXE.",
              {
                "$ul": [
                  "**payloadLocation**: Location within the request where the payload was placed.",
                  "**payloadValue**: The XML string that triggered the XXE vulnerability. Non-payload values might be redacted."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
