{
  "name": "directory_schemas_insert",
  "description": "Creates a schema.",
  "parameters": {
    "type": "object",
    "properties": {
      "customerId": {
        "type": "string",
        "description": "Immutable ID of the Google Workspace account."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Schema"
      }
    },
    "required": [
      "customerId"
    ],
    "$defs": {
      "Schema": {
        "description": "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
        "properties": {
          "displayName": {
            "description": "Display name for the schema.",
            "type": "string"
          },
          "etag": {
            "description": "The ETag of the resource.",
            "type": "string"
          },
          "fields": {
            "description": "A list of fields in the schema.",
            "items": {
              "$ref": "#/$defs/SchemaFieldSpec"
            },
            "type": "array"
          },
          "kind": {
            "default": "admin#directory#schema",
            "description": "Kind of resource this is.",
            "type": "string"
          },
          "schemaId": {
            "description": "The unique identifier of the schema (Read-only)",
            "type": "string"
          },
          "schemaName": {
            "description": "The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SchemaFieldSpec": {
        "description": "You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).",
        "properties": {
          "displayName": {
            "description": "Display Name of the field.",
            "type": "string"
          },
          "etag": {
            "description": "The ETag of the field.",
            "type": "string"
          },
          "fieldId": {
            "description": "The unique identifier of the field (Read-only)",
            "type": "string"
          },
          "fieldName": {
            "description": "The name of the field.",
            "type": "string"
          },
          "fieldType": {
            "description": "The type of the field.",
            "type": "string"
          },
          "indexed": {
            "default": true,
            "description": "Boolean specifying whether the field is indexed or not. Default: `true`.",
            "type": "boolean"
          },
          "kind": {
            "default": "admin#directory#schema#fieldspec",
            "description": "The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.",
            "type": "string"
          },
          "multiValued": {
            "description": "A boolean specifying whether this is a multi-valued field or not. Default: `false`.",
            "type": "boolean"
          },
          "numericIndexingSpec": {
            "description": "Indexing spec for a numeric field. By default, only exact match queries will be supported for numeric fields. Setting the `numericIndexingSpec` allows range queries to be supported.",
            "properties": {
              "maxValue": {
                "description": "Maximum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
                "format": "double",
                "type": "number"
              },
              "minValue": {
                "description": "Minimum value of this field. This is meant to be indicative rather than enforced. Values outside this range will still be indexed, but search may not be as performant.",
                "format": "double",
                "type": "number"
              }
            },
            "type": "object"
          },
          "readAccessType": {
            "default": "ALL_DOMAIN_USERS",
            "description": "Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://admin.googleapis.com//admin/directory/v1/customer/{customerId}/schemas{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The type of API resource. For Schema resources, this is always `admin#directory#schema`.",
        "**Key properties:**",
        {
          "$ul": [
            "**displayName**: Display name for the schema.",
            "**etag**: The ETag of the resource.",
            "**fields**: A list of fields in the schema.",
            "**kind**: Kind of resource this is. (default: admin#directory#schema)",
            "**schemaId**: The unique identifier of the schema (Read-only)",
            "**schemaName**: The schema's name. Each `schema_name` must be unique within a customer. Reusing a name results in a `409: Entity already exists` error."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
