{
  "name": "directory_users_photos_update",
  "description": "Adds a photo for the user.",
  "parameters": {
    "type": "object",
    "properties": {
      "userKey": {
        "type": "string",
        "description": "Identifies the user in the API request. The value can be the user's primary email address, alias email address, or unique user ID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/UserPhoto"
      }
    },
    "required": [
      "userKey"
    ],
    "$defs": {
      "UserPhoto": {
        "properties": {
          "etag": {
            "description": "ETag of the resource.",
            "type": "string"
          },
          "height": {
            "description": "Height of the photo in pixels.",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "The ID the API uses to uniquely identify the user.",
            "type": "string"
          },
          "kind": {
            "default": "admin#directory#user#photo",
            "description": "The type of the API resource. For Photo resources, this is `admin#directory#user#photo`.",
            "type": "string"
          },
          "mimeType": {
            "description": "The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.",
            "type": "string"
          },
          "photoData": {
            "description": "The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
            "format": "byte",
            "type": "string"
          },
          "primaryEmail": {
            "description": "The user's primary email address.",
            "type": "string"
          },
          "width": {
            "description": "Width of the photo in pixels.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://admin.googleapis.com//admin/directory/v1/users/{userKey}/photos/thumbnail{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**etag**: ETag of the resource.",
            "**height**: Height of the photo in pixels.",
            "**id**: The ID the API uses to uniquely identify the user.",
            "**kind**: The type of the API resource. For Photo resources, this is `admin#directory#user#photo`. (default: admin#directory#user#photo)",
            "**mimeType**: The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`, `TIFF`, and web-safe base64 encoding.",
            "**photoData**: The user photo's upload data in [web-safe Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in bytes. This means: * The slash (/) character is replaced with the underscore (_) character. * The plus sign (+) character is replaced with the hyphen (-) character. * The equals sign (=) character is replaced with the asterisk (*). * For padding, the period (.) character is used instead of the RFC-4648 baseURL definition which uses the equals sign (=) for padding. This is done to simplify URL-parsing. * Whatever the size of the photo being uploaded, the API downsizes it to 96x96 pixels.",
            "**primaryEmail**: The user's primary email address.",
            "**width**: Width of the photo in pixels."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
