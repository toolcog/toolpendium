{
  "name": "remotebuildexecution_projects_instances_workerpools_patch",
  "description": "Updates an existing worker pool with a specified size and/or configuration. Returns a long running operation, which contains a worker pool on completion. While the long running operation is in progress, any call to `GetWorkerPool` returns a worker pool in state `UPDATING`.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is provided in the `poolId` field."
      },
      "loggingEnabled": {
        "type": "boolean",
        "description": "Deprecated, use instance.logging_enabled instead. Whether to enable Stackdriver logging for this instance."
      },
      "name1": {
        "type": "string",
        "description": "Deprecated, use instance.Name instead. Name of the instance to update. Format: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]`."
      },
      "updateMask": {
        "type": "string",
        "description": "The update mask applies to instance. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty string) an explicit update_mask must be provided."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaUpdateWorkerPoolRequest": {
        "description": "The request used for UpdateWorkerPool.",
        "properties": {
          "updateMask": {
            "description": "The update mask applies to worker_pool. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If an empty update_mask is provided, only the non-default valued field in the worker pool field will be updated. Note that in order to update a field to the default value (zero, false, empty string) an explicit update_mask must be provided.",
            "format": "google-fieldmask",
            "type": "string"
          },
          "workerPool": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerPool": {
        "description": "A worker pool resource in the Remote Build Execution API.",
        "properties": {
          "autoscale": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale"
          },
          "channel": {
            "description": "Channel specifies the release channel of the pool.",
            "type": "string"
          },
          "hostOs": {
            "description": "HostOS specifies the OS version of the image for the worker VMs.",
            "type": "string"
          },
          "name": {
            "description": "WorkerPool resource name formatted as: `projects/[PROJECT_ID]/instances/[INSTANCE_ID]/workerpools/[POOL_ID]`. name should not be populated when creating a worker pool since it is provided in the `poolId` field.",
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the worker pool.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "RUNNING",
              "UPDATING",
              "DELETING",
              "INACTIVE"
            ],
            "type": "string"
          },
          "workerConfig": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig"
          },
          "workerCount": {
            "description": "The desired number of workers in the worker pool. Must be a value between 0 and 15000.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaAutoscale": {
        "description": "Autoscale defines the autoscaling policy of a worker pool.",
        "properties": {
          "maxSize": {
            "description": "Optional. The maximal number of workers. Must be equal to or greater than min_size.",
            "format": "int64",
            "type": "string"
          },
          "minIdleWorkers": {
            "description": "Optional. The minimum number of idle workers the autoscaler will aim to have in the pool at all times that are immediately available to accept a surge in build traffic. The pool size will still be constrained by min_size and max_size.",
            "format": "int64",
            "type": "string"
          },
          "minSize": {
            "description": "Optional. The minimal number of workers. Must be greater than 0.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaWorkerConfig": {
        "description": "Defines the configuration to be used for creating workers in the worker pool.",
        "properties": {
          "accelerator": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig"
          },
          "attachedDisks": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks"
          },
          "diskSizeGb": {
            "description": "Required. Size of the disk attached to the worker, in GB. See https://cloud.google.com/compute/docs/disks/",
            "format": "int64",
            "type": "string"
          },
          "diskType": {
            "description": "Required. Disk Type to use for the worker. See [Storage options](https://cloud.google.com/compute/docs/disks/#introduction). Currently only `pd-standard` and `pd-ssd` are supported.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels associated with the workers. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International letters are permitted. Label keys must start with a letter. Label values are optional. There can not be more than 64 labels per resource.",
            "type": "object"
          },
          "machineType": {
            "description": "Required. Machine type of the worker, such as `e2-standard-2`. See https://cloud.google.com/compute/docs/machine-types for a list of supported machine types. Note that `f1-micro` and `g1-small` are not yet supported.",
            "type": "string"
          },
          "maxConcurrentActions": {
            "description": "The maximum number of actions a worker can execute concurrently.",
            "format": "int64",
            "type": "string"
          },
          "minCpuPlatform": {
            "description": "Minimum CPU platform to use when creating the worker. See [CPU Platforms](https://cloud.google.com/compute/docs/cpu-platforms).",
            "type": "string"
          },
          "networkAccess": {
            "description": "Determines the type of network access granted to workers. Possible values: - \"public\": Workers can connect to the public internet. - \"private\": Workers can only connect to Google APIs and services. - \"restricted-private\": Workers can only connect to Google APIs that are reachable through `restricted.googleapis.com` (`199.36.153.4/30`).",
            "type": "string"
          },
          "reserved": {
            "description": "Determines whether the worker is reserved (equivalent to a Compute Engine on-demand VM and therefore won't be preempted). See [Preemptible VMs](https://cloud.google.com/preemptible-vms/) for more details.",
            "type": "boolean"
          },
          "soleTenantNodeType": {
            "description": "The node type name to be used for sole-tenant nodes.",
            "type": "string"
          },
          "userServiceAccounts": {
            "description": "Optional. List of user service accounts. The last service account in the list is what the user code will run as. The rest of the service accounts constitute the impersonation chain. For example, if len(user_service_accounts) == 2 and if the VM's service account is RBE's P4SA, then RBE'S P4SA should be granted the Service Account Token Creator role on user_service_accounts[0] and user_service_accounts[0] should be granted the Service Account Token Creator role on user_service_accounts[1].",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vmImage": {
            "description": "The name of the image used by each VM.",
            "type": "string"
          },
          "zones": {
            "description": "Optional. Zones in the region where the pool VMs should be. Leave empty for no restrictions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaAcceleratorConfig": {
        "description": "AcceleratorConfig defines the accelerator cards to attach to the VM.",
        "properties": {
          "acceleratorCount": {
            "description": "The number of guest accelerator cards exposed to each VM.",
            "format": "int64",
            "type": "string"
          },
          "acceleratorType": {
            "description": "The type of accelerator to attach to each VM, e.g. \"nvidia-tesla-k80\" for nVidia Tesla K80.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisks": {
        "description": "Disks defines the disks that would be attached to the workers.",
        "properties": {
          "dockerRootDisk": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk"
          },
          "localSsd": {
            "$ref": "#/$defs/GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksLocalSSD"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksPersistentDisk": {
        "description": "PersistentDisk specifies how to attach a persistent disk to the workers.",
        "properties": {
          "diskSizeGb": {
            "description": "Required. Size of the disk in GB.",
            "format": "int64",
            "type": "string"
          },
          "diskType": {
            "description": "Required. Type of disk attached (supported types are pd-standard and pd-ssd).",
            "type": "string"
          },
          "sourceImage": {
            "description": "Required. VM image to use for the disk.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsRemotebuildexecutionAdminV1alphaDisksLocalSSD": {
        "description": "LocalSSD specifies how to attach local SSD to the workers.",
        "properties": {
          "count": {
            "description": "Optional. The number of Local SSDs to be attached.",
            "format": "int64",
            "type": "string"
          },
          "sizeGb": {
            "description": "Output only. The size of the local SSD in gb. Intended for informational purposes only.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://admin-remotebuildexecution.googleapis.com//v1alpha/{name}{?loggingEnabled,name1,updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
