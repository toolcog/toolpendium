{
  "name": "jobs_projects_tenants_jobs_batchUpdate",
  "description": "Begins executing a batch update jobs operation.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the tenant under which the job is created. The format is \"projects/{project_id}/tenants/{tenant_id}\". For example, \"projects/foo/tenants/bar\"."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BatchUpdateJobsRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "BatchUpdateJobsRequest": {
        "description": "Request to update a batch of jobs.",
        "properties": {
          "jobs": {
            "description": "Required. The jobs to be updated. A maximum of 200 jobs can be updated in a batch.",
            "items": {
              "$ref": "#/$defs/Job"
            },
            "type": "array"
          },
          "updateMask": {
            "description": "Strongly recommended for the best service experience. Be aware that it will also increase latency when checking the status of a batch operation. If update_mask is provided, only the specified fields in Job are updated. Otherwise all the fields are updated. A field mask to restrict the fields that are updated. Only top level fields of Job are supported. If update_mask is provided, The Job inside JobResult will only contains fields that is updated, plus the Id of the Job. Otherwise, Job will include all fields, which can yield a very large response.",
            "format": "google-fieldmask",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Job": {
        "description": "A Job resource represents a job posting (also referred to as a \"job listing\" or \"job requisition\"). A job belongs to a Company, which is the hiring entity responsible for the job.",
        "properties": {
          "addresses": {
            "description": "Strongly recommended for the best service experience. Location(s) where the employer is looking to hire for this job posting. Specifying the full street address(es) of the hiring location enables better API results, especially job searches by commute time. At most 50 locations are allowed for best search performance. If a job has more locations, it is suggested to split it into multiple jobs with unique requisition_ids (e.g. 'ReqA' becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same company, language_code and requisition_id are not allowed. If the original requisition_id must be preserved, a custom field should be used for storage. It is also suggested to group the locations that close to each other in the same job for better search experience. Jobs with multiple addresses must have their addresses with the same LocationType to allow location filtering to work properly. (For example, a Job with addresses \"1600 Amphitheatre Parkway, Mountain View, CA, USA\" and \"London, UK\" may not have location filters applied correctly at search time since the first is a LocationType.STREET_ADDRESS and the second is a LocationType.LOCALITY.) If a job needs to have multiple addresses, it is suggested to split it into multiple jobs with same LocationTypes. The maximum number of allowed characters is 500.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "applicationInfo": {
            "$ref": "#/$defs/ApplicationInfo"
          },
          "company": {
            "description": "Required. The resource name of the company listing the job. The format is \"projects/{project_id}/tenants/{tenant_id}/companies/{company_id}\". For example, \"projects/foo/tenants/bar/companies/baz\".",
            "type": "string"
          },
          "companyDisplayName": {
            "description": "Output only. Display name of the company listing the job.",
            "readOnly": true,
            "type": "string"
          },
          "compensationInfo": {
            "$ref": "#/$defs/CompensationInfo"
          },
          "customAttributes": {
            "additionalProperties": {
              "$ref": "#/$defs/CustomAttribute"
            },
            "description": "A map of fields to hold both filterable and non-filterable custom job attributes that are not covered by the provided structured fields. The keys of the map are strings up to 64 bytes and must match the pattern: `a-zA-Z*`. For example, key0LikeThis or KEY_1_LIKE_THIS. At most 100 filterable and at most 100 unfilterable keys are supported. For filterable `string_values`, across all keys at most 200 values are allowed, with each string no more than 255 characters. For unfilterable `string_values`, the maximum total size of `string_values` across all keys is 50KB.",
            "type": "object"
          },
          "degreeTypes": {
            "description": "The desired education degrees for the job, such as Bachelors, Masters.",
            "items": {
              "enum": [
                "DEGREE_TYPE_UNSPECIFIED",
                "PRIMARY_EDUCATION",
                "LOWER_SECONDARY_EDUCATION",
                "UPPER_SECONDARY_EDUCATION",
                "ADULT_REMEDIAL_EDUCATION",
                "ASSOCIATES_OR_EQUIVALENT",
                "BACHELORS_OR_EQUIVALENT",
                "MASTERS_OR_EQUIVALENT",
                "DOCTORAL_OR_EQUIVALENT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "department": {
            "description": "The department or functional area within the company with the open position. The maximum number of allowed characters is 255.",
            "type": "string"
          },
          "derivedInfo": {
            "$ref": "#/$defs/JobDerivedInfo"
          },
          "description": {
            "description": "Required. The description of the job, which typically includes a multi-paragraph description of the company and related information. Separate fields are provided on the job object for responsibilities, qualifications, and other job characteristics. Use of these separate job fields is recommended. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 100,000.",
            "type": "string"
          },
          "employmentTypes": {
            "description": "The employment type(s) of a job, for example, full time or part time.",
            "items": {
              "enum": [
                "EMPLOYMENT_TYPE_UNSPECIFIED",
                "FULL_TIME",
                "PART_TIME",
                "CONTRACTOR",
                "CONTRACT_TO_HIRE",
                "TEMPORARY",
                "INTERN",
                "VOLUNTEER",
                "PER_DIEM",
                "FLY_IN_FLY_OUT",
                "OTHER_EMPLOYMENT_TYPE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "incentives": {
            "description": "A description of bonus, commission, and other compensation incentives associated with the job not including salary or pay. The maximum number of allowed characters is 10,000.",
            "type": "string"
          },
          "jobBenefits": {
            "description": "The benefits included with the job.",
            "items": {
              "enum": [
                "JOB_BENEFIT_UNSPECIFIED",
                "CHILD_CARE",
                "DENTAL",
                "DOMESTIC_PARTNER",
                "FLEXIBLE_HOURS",
                "MEDICAL",
                "LIFE_INSURANCE",
                "PARENTAL_LEAVE",
                "RETIREMENT_PLAN",
                "SICK_DAYS",
                "VACATION",
                "VISION"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "jobEndTime": {
            "description": "The end timestamp of the job. Typically this field is used for contracting engagements. Invalid timestamps are ignored.",
            "format": "google-datetime",
            "type": "string"
          },
          "jobLevel": {
            "description": "The experience level associated with the job, such as \"Entry Level\".",
            "enum": [
              "JOB_LEVEL_UNSPECIFIED",
              "ENTRY_LEVEL",
              "EXPERIENCED",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE"
            ],
            "type": "string"
          },
          "jobStartTime": {
            "description": "The start timestamp of the job in UTC time zone. Typically this field is used for contracting engagements. Invalid timestamps are ignored.",
            "format": "google-datetime",
            "type": "string"
          },
          "languageCode": {
            "description": "The language of the posting. This field is distinct from any requirements for fluency that are associated with the job. Language codes must be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){: class=\"external\" target=\"_blank\" }. If this field is unspecified and Job.description is present, detected language code based on Job.description is assigned, otherwise defaults to 'en_US'.",
            "type": "string"
          },
          "name": {
            "description": "Required during job update. The resource name for the job. This is generated by the service when a job is created. The format is \"projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}\". For example, \"projects/foo/tenants/bar/jobs/baz\". Use of this field in job queries and API calls is preferred over the use of requisition_id since this value is unique.",
            "type": "string"
          },
          "postingCreateTime": {
            "description": "Output only. The timestamp when this job posting was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "postingExpireTime": {
            "description": "Strongly recommended for the best service experience. The expiration timestamp of the job. After this timestamp, the job is marked as expired, and it no longer appears in search results. The expired job can't be listed by the ListJobs API, but it can be retrieved with the GetJob API or updated with the UpdateJob API or deleted with the DeleteJob API. An expired job can be updated and opened again by using a future expiration timestamp. Updating an expired job fails if there is another existing open job with same company, language_code and requisition_id. The expired jobs are retained in our system for 90 days. However, the overall expired job count cannot exceed 3 times the maximum number of open jobs over previous 7 days. If this threshold is exceeded, expired jobs are cleaned out in order of earliest expire time. Expired jobs are no longer accessible after they are cleaned out. Invalid timestamps are ignored, and treated as expire time not provided. If the timestamp is before the instant request is made, the job is treated as expired immediately on creation. This kind of job can not be updated. And when creating a job with past timestamp, the posting_publish_time must be set before posting_expire_time. The purpose of this feature is to allow other objects, such as Application, to refer a job that didn't exist in the system prior to becoming expired. If you want to modify a job that was expired on creation, delete it and create a new one. If this value isn't provided at the time of job creation or is invalid, the job posting expires after 30 days from the job's creation time. For example, if the job was created on 2017/01/01 13:00AM UTC with an unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC. If this value isn't provided on job update, it depends on the field masks set by UpdateJobRequest.update_mask. If the field masks include job_end_time, or the masks are empty meaning that every field is updated, the job posting expires after 30 days from the job's last update time. Otherwise the expiration date isn't updated.",
            "format": "google-datetime",
            "type": "string"
          },
          "postingPublishTime": {
            "description": "The timestamp this job posting was most recently published. The default value is the time the request arrives at the server. Invalid timestamps are ignored.",
            "format": "google-datetime",
            "type": "string"
          },
          "postingRegion": {
            "description": "The job PostingRegion (for example, state, country) throughout which the job is available. If this field is set, a LocationFilter in a search query within the job region finds this job posting if an exact location match isn't specified. If this field is set to PostingRegion.NATION or PostingRegion.ADMINISTRATIVE_AREA, setting job Job.addresses to the same location level as this field is strongly recommended.",
            "enum": [
              "POSTING_REGION_UNSPECIFIED",
              "ADMINISTRATIVE_AREA",
              "NATION",
              "TELECOMMUTE"
            ],
            "type": "string"
          },
          "postingUpdateTime": {
            "description": "Output only. The timestamp when this job posting was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "processingOptions": {
            "$ref": "#/$defs/ProcessingOptions"
          },
          "promotionValue": {
            "description": "A promotion value of the job, as determined by the client. The value determines the sort order of the jobs returned when searching for jobs using the featured jobs search call, with higher promotional values being returned first and ties being resolved by relevance sort. Only the jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH. Default value is 0, and negative values are treated as 0.",
            "format": "int32",
            "type": "integer"
          },
          "qualifications": {
            "description": "A description of the qualifications required to perform the job. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.",
            "type": "string"
          },
          "requisitionId": {
            "description": "Required. The requisition ID, also referred to as the posting ID, is assigned by the client to identify a job. This field is intended to be used by clients for client identification and tracking of postings. A job isn't allowed to be created if there is another job with the same company, language_code and requisition_id. The maximum number of allowed characters is 255.",
            "type": "string"
          },
          "responsibilities": {
            "description": "A description of job responsibilities. The use of this field is recommended as an alternative to using the more general description field. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 10,000.",
            "type": "string"
          },
          "title": {
            "description": "Required. The title of the job, such as \"Software Engineer\" The maximum number of allowed characters is 500.",
            "type": "string"
          },
          "visibility": {
            "deprecated": true,
            "description": "Deprecated. The job is only visible to the owner. The visibility of the job. Defaults to Visibility.ACCOUNT_ONLY if not specified.",
            "enum": [
              "VISIBILITY_UNSPECIFIED",
              "ACCOUNT_ONLY",
              "SHARED_WITH_GOOGLE",
              "SHARED_WITH_PUBLIC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApplicationInfo": {
        "description": "Application related details of a job posting.",
        "properties": {
          "emails": {
            "description": "Use this field to specify email address(es) to which resumes or applications can be sent. The maximum number of allowed characters for each entry is 255.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "instruction": {
            "description": "Use this field to provide instructions, such as \"Mail your application to ...\", that a candidate can follow to apply for the job. This field accepts and sanitizes HTML input, and also accepts bold, italic, ordered list, and unordered list markup tags. The maximum number of allowed characters is 3,000.",
            "type": "string"
          },
          "uris": {
            "description": "Use this URI field to direct an applicant to a website, for example to link to an online application form. The maximum number of allowed characters for each entry is 2,000.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CompensationInfo": {
        "description": "Job compensation details.",
        "properties": {
          "annualizedBaseCompensationRange": {
            "$ref": "#/$defs/CompensationRange"
          },
          "annualizedTotalCompensationRange": {
            "$ref": "#/$defs/CompensationRange"
          },
          "entries": {
            "description": "Job compensation information. At most one entry can be of type CompensationInfo.CompensationType.BASE, which is referred as **base compensation entry** for the job.",
            "items": {
              "$ref": "#/$defs/CompensationEntry"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CompensationRange": {
        "description": "Compensation range.",
        "properties": {
          "maxCompensation": {
            "$ref": "#/$defs/Money"
          },
          "minCompensation": {
            "$ref": "#/$defs/Money"
          }
        },
        "type": "object"
      },
      "Money": {
        "description": "Represents an amount of money with its currency type.",
        "properties": {
          "currencyCode": {
            "description": "The three-letter currency code defined in ISO 4217.",
            "type": "string"
          },
          "nanos": {
            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "units": {
            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CompensationEntry": {
        "description": "A compensation entry that represents one component of compensation, such as base pay, bonus, or other compensation type. Annualization: One compensation entry can be annualized if - it contains valid amount or range. - and its expected_units_per_year is set or can be derived. Its annualized range is determined as (amount or range) times expected_units_per_year.",
        "properties": {
          "amount": {
            "$ref": "#/$defs/Money"
          },
          "description": {
            "description": "Compensation description. For example, could indicate equity terms or provide additional context to an estimated bonus.",
            "type": "string"
          },
          "expectedUnitsPerYear": {
            "description": "Expected number of units paid each year. If not specified, when Job.employment_types is FULLTIME, a default value is inferred based on unit. Default values: - HOURLY: 2080 - DAILY: 260 - WEEKLY: 52 - MONTHLY: 12 - ANNUAL: 1",
            "format": "double",
            "type": "number"
          },
          "range": {
            "$ref": "#/$defs/CompensationRange"
          },
          "type": {
            "description": "Compensation type. Default is CompensationType.COMPENSATION_TYPE_UNSPECIFIED.",
            "enum": [
              "COMPENSATION_TYPE_UNSPECIFIED",
              "BASE",
              "BONUS",
              "SIGNING_BONUS",
              "EQUITY",
              "PROFIT_SHARING",
              "COMMISSIONS",
              "TIPS",
              "OTHER_COMPENSATION_TYPE"
            ],
            "type": "string"
          },
          "unit": {
            "description": "Frequency of the specified amount. Default is CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED.",
            "enum": [
              "COMPENSATION_UNIT_UNSPECIFIED",
              "HOURLY",
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "ONE_TIME",
              "OTHER_COMPENSATION_UNIT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomAttribute": {
        "description": "Custom attribute values that are either filterable or non-filterable.",
        "properties": {
          "filterable": {
            "description": "If the `filterable` flag is true, the custom field values may be used for custom attribute filters JobQuery.custom_attribute_filter. If false, these values may not be used for custom attribute filters. Default is false.",
            "type": "boolean"
          },
          "keywordSearchable": {
            "description": "If the `keyword_searchable` flag is true, the keywords in custom fields are searchable by keyword match. If false, the values are not searchable by keyword match. Default is false.",
            "type": "boolean"
          },
          "longValues": {
            "description": "Exactly one of string_values or long_values must be specified. This field is used to perform number range search. (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`. Currently at most 1 long_values is supported.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "stringValues": {
            "description": "Exactly one of string_values or long_values must be specified. This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or `CASE_INSENSITIVE_MATCH`) search. For filterable `string_value`s, a maximum total number of 200 values is allowed, with each `string_value` has a byte size of no more than 500B. For unfilterable `string_values`, the maximum total byte size of unfilterable `string_values` is 50KB. Empty string isn't allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JobDerivedInfo": {
        "description": "Derived details about the job posting.",
        "properties": {
          "jobCategories": {
            "description": "Job categories derived from Job.title and Job.description.",
            "items": {
              "enum": [
                "JOB_CATEGORY_UNSPECIFIED",
                "ACCOUNTING_AND_FINANCE",
                "ADMINISTRATIVE_AND_OFFICE",
                "ADVERTISING_AND_MARKETING",
                "ANIMAL_CARE",
                "ART_FASHION_AND_DESIGN",
                "BUSINESS_OPERATIONS",
                "CLEANING_AND_FACILITIES",
                "COMPUTER_AND_IT",
                "CONSTRUCTION",
                "CUSTOMER_SERVICE",
                "EDUCATION",
                "ENTERTAINMENT_AND_TRAVEL",
                "FARMING_AND_OUTDOORS",
                "HEALTHCARE",
                "HUMAN_RESOURCES",
                "INSTALLATION_MAINTENANCE_AND_REPAIR",
                "LEGAL",
                "MANAGEMENT",
                "MANUFACTURING_AND_WAREHOUSE",
                "MEDIA_COMMUNICATIONS_AND_WRITING",
                "OIL_GAS_AND_MINING",
                "PERSONAL_CARE_AND_SERVICES",
                "PROTECTIVE_SERVICES",
                "REAL_ESTATE",
                "RESTAURANT_AND_HOSPITALITY",
                "SALES_AND_RETAIL",
                "SCIENCE_AND_ENGINEERING",
                "SOCIAL_SERVICES_AND_NON_PROFIT",
                "SPORTS_FITNESS_AND_RECREATION",
                "TRANSPORTATION_AND_LOGISTICS"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "locations": {
            "description": "Structured locations of the job, resolved from Job.addresses. locations are exactly matched to Job.addresses in the same order.",
            "items": {
              "$ref": "#/$defs/Location"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Location": {
        "description": "A resource that represents a location with full geographic information.",
        "properties": {
          "latLng": {
            "$ref": "#/$defs/LatLng"
          },
          "locationType": {
            "description": "The type of a location, which corresponds to the address lines field of google.type.PostalAddress. For example, \"Downtown, Atlanta, GA, USA\" has a type of LocationType.NEIGHBORHOOD, and \"Kansas City, KS, USA\" has a type of LocationType.LOCALITY.",
            "enum": [
              "LOCATION_TYPE_UNSPECIFIED",
              "COUNTRY",
              "ADMINISTRATIVE_AREA",
              "SUB_ADMINISTRATIVE_AREA",
              "LOCALITY",
              "POSTAL_CODE",
              "SUB_LOCALITY",
              "SUB_LOCALITY_1",
              "SUB_LOCALITY_2",
              "NEIGHBORHOOD",
              "STREET_ADDRESS"
            ],
            "type": "string"
          },
          "postalAddress": {
            "$ref": "#/$defs/PostalAddress"
          },
          "radiusMiles": {
            "description": "Radius in miles of the job location. This value is derived from the location bounding box in which a circle with the specified radius centered from google.type.LatLng covers the area associated with the job location. For example, currently, \"Mountain View, CA, USA\" has a radius of 6.17 miles.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "LatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "PostalAddress": {
        "description": "Represents a postal address, e.g. for postal delivery or payments addresses. Given a postal address, a postal service can deliver items to a premise, P.O. Box or similar. It is not intended to model geographical locations (roads, towns, mountains). In typical usage an address would be created via user input or from importing existing data, depending on the type of process. Advice on address input / editing: - Use an internationalization-ready address widget such as https://github.com/google/libaddressinput) - Users should not be presented with UI elements for input or editing of fields outside countries where that field is used. For more guidance on how to use this schema, please see: https://support.google.com/business/answer/6397478",
        "properties": {
          "addressLines": {
            "description": "Unstructured address lines describing the lower levels of an address. Because values in address_lines do not have type information and may sometimes contain multiple values in a single field (e.g. \"Austin, TX\"), it is important that the line order is clear. The order of address lines should be \"envelope order\" for the country/region of the address. In places where this can vary (e.g. Japan), address_language is used to make it explicit (e.g. \"ja\" for large-to-small ordering and \"ja-Latn\" or \"en\" for small-to-large). This way, the most specific line of an address can be selected based on the language. The minimum permitted structural representation of an address consists of a region_code with all remaining information placed in the address_lines. It would be possible to format such an address very approximately without geocoding, but no semantic reasoning could be made about any of the address components until it was at least partially resolved. Creating an address only containing a region_code and address_lines, and then geocoding is the recommended way to handle completely unstructured addresses (as opposed to guessing which parts of the address should be localities or administrative areas).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "administrativeArea": {
            "description": "Optional. Highest administrative subdivision which is used for postal addresses of a country or region. For example, this can be a state, a province, an oblast, or a prefecture. Specifically, for Spain this is the province and not the autonomous community (e.g. \"Barcelona\" and not \"Catalonia\"). Many countries don't use an administrative area in postal addresses. E.g. in Switzerland this should be left unpopulated.",
            "type": "string"
          },
          "languageCode": {
            "description": "Optional. BCP-47 language code of the contents of this address (if known). This is often the UI language of the input form or is expected to match one of the languages used in the address' country/region, or their transliterated equivalents. This can affect formatting in certain countries, but is not critical to the correctness of the data and will never affect any validation or other non-formatting related operations. If this value is not known, it should be omitted (rather than specifying a possibly incorrect default). Examples: \"zh-Hant\", \"ja\", \"ja-Latn\", \"en\".",
            "type": "string"
          },
          "locality": {
            "description": "Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use address_lines.",
            "type": "string"
          },
          "organization": {
            "description": "Optional. The name of the organization at the address.",
            "type": "string"
          },
          "postalCode": {
            "description": "Optional. Postal code of the address. Not all countries use or require postal codes to be present, but where they are used, they may trigger additional validation with other parts of the address (e.g. state/zip validation in the U.S.A.).",
            "type": "string"
          },
          "recipients": {
            "description": "Optional. The recipient at the address. This field may, under certain circumstances, contain multiline information. For example, it might contain \"care of\" information.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "regionCode": {
            "description": "Required. CLDR region code of the country/region of the address. This is never inferred and it is up to the user to ensure the value is correct. See https://cldr.unicode.org/ and https://www.unicode.org/cldr/charts/30/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.",
            "type": "string"
          },
          "revision": {
            "description": "The schema revision of the `PostalAddress`. This must be set to 0, which is the latest revision. All new revisions **must** be backward compatible with old revisions.",
            "format": "int32",
            "type": "integer"
          },
          "sortingCode": {
            "description": "Optional. Additional, country-specific, sorting code. This is not used in most regions. Where it is used, the value is either a string like \"CEDEX\", optionally followed by a number (e.g. \"CEDEX 7\"), or just a number alone, representing the \"sector code\" (Jamaica), \"delivery area indicator\" (Malawi) or \"post office indicator\" (e.g. Côte d'Ivoire).",
            "type": "string"
          },
          "sublocality": {
            "description": "Optional. Sublocality of the address. For example, this can be neighborhoods, boroughs, districts.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProcessingOptions": {
        "description": "Options for job processing.",
        "properties": {
          "disableStreetAddressResolution": {
            "description": "If set to `true`, the service does not attempt to resolve a more precise address for the job.",
            "type": "boolean"
          },
          "htmlSanitization": {
            "description": "Option for job HTML content sanitization. Applied fields are: * description * applicationInfo.instruction * incentives * qualifications * responsibilities HTML tags in these fields may be stripped if sanitiazation isn't disabled. Defaults to HtmlSanitization.SIMPLE_FORMATTING_ONLY.",
            "enum": [
              "HTML_SANITIZATION_UNSPECIFIED",
              "HTML_SANITIZATION_DISABLED",
              "SIMPLE_FORMATTING_ONLY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://jobs.googleapis.com//v4/{parent}/jobs:batchUpdate{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
