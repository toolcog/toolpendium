{
  "name": "jobs_projects_jobs_searchForAlert",
  "description": "Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), and has different algorithmic adjustments that are targeted to passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the project to search within. The format is \"projects/{project_id}\", for example, \"projects/api-test-project\"."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/SearchJobsRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "SearchJobsRequest": {
        "description": "Input only. The Request body of the `SearchJobs` call.",
        "properties": {
          "customRankingInfo": {
            "$ref": "#/$defs/CustomRankingInfo"
          },
          "disableKeywordMatch": {
            "description": "Optional. Controls whether to disable exact keyword match on Job.job_title, Job.description, Job.company_display_name, Job.locations, Job.qualifications. When disable keyword match is turned off, a keyword match returns jobs that do not match given category filters when there are matching keywords. For example, the query \"program manager,\" a result is returned even if the job posting has the title \"software developer,\" which does not fall into \"program manager\" ontology, but does have \"program manager\" appearing in its description. For queries like \"cloud\" that does not contain title or location specific ontology, jobs with \"cloud\" keyword matches are returned regardless of this flag's value. Please use Company.keyword_searchable_custom_fields or Company.keyword_searchable_custom_attributes if company specific globally matched custom field/attribute string values is needed. Enabling keyword match improves recall of subsequent search requests. Defaults to false.",
            "type": "boolean"
          },
          "diversificationLevel": {
            "description": "Optional. Controls whether highly similar jobs are returned next to each other in the search results. Jobs are identified as highly similar based on their titles, job categories, and locations. Highly similar results are clustered so that only one representative job of the cluster is displayed to the job seeker higher up in the results, with the other jobs being displayed lower down in the results. Defaults to DiversificationLevel.SIMPLE if no value is specified.",
            "enum": [
              "DIVERSIFICATION_LEVEL_UNSPECIFIED",
              "DISABLED",
              "SIMPLE"
            ],
            "type": "string"
          },
          "enableBroadening": {
            "description": "Optional. Controls whether to broaden the search when it produces sparse results. Broadened queries append results to the end of the matching results list. Defaults to false.",
            "type": "boolean"
          },
          "histogramFacets": {
            "$ref": "#/$defs/HistogramFacets"
          },
          "histogramQueries": {
            "description": "Optional. Expression based histogram requests for jobs matching JobQuery.",
            "items": {
              "$ref": "#/$defs/HistogramQuery"
            },
            "type": "array"
          },
          "jobQuery": {
            "$ref": "#/$defs/JobQuery"
          },
          "jobView": {
            "description": "Optional. The desired job attributes returned for jobs in the search response. Defaults to JobView.SMALL if no value is specified.",
            "enum": [
              "JOB_VIEW_UNSPECIFIED",
              "JOB_VIEW_ID_ONLY",
              "JOB_VIEW_MINIMAL",
              "JOB_VIEW_SMALL",
              "JOB_VIEW_FULL"
            ],
            "type": "string"
          },
          "offset": {
            "description": "Optional. An integer that specifies the current offset (that is, starting result location, amongst the jobs deemed by the API as relevant) in search results. This field is only considered if page_token is unset. The maximum allowed value is 5000. Otherwise an error is thrown. For example, 0 means to return results starting from the first matching job, and 10 means to return from the 11th job. This can be used for pagination, (for example, pageSize = 10 and offset = 10 means to return from the second page).",
            "format": "int32",
            "type": "integer"
          },
          "orderBy": {
            "description": "Optional. The criteria determining how search results are sorted. Default is \"relevance desc\". Supported options are: * `\"relevance desc\"`: By relevance descending, as determined by the API algorithms. Relevance thresholding of query results is only available with this ordering. * `\"posting_publish_time desc\"`: By Job.posting_publish_time descending. * `\"posting_update_time desc\"`: By Job.posting_update_time descending. * `\"title\"`: By Job.title ascending. * `\"title desc\"`: By Job.title descending. * `\"annualized_base_compensation\"`: By job's CompensationInfo.annualized_base_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_base_compensation desc\"`: By job's CompensationInfo.annualized_base_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_total_compensation\"`: By job's CompensationInfo.annualized_total_compensation_range ascending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"annualized_total_compensation desc\"`: By job's CompensationInfo.annualized_total_compensation_range descending. Jobs whose annualized base compensation is unspecified are put at the end of search results. * `\"custom_ranking desc\"`: By the relevance score adjusted to the SearchJobsRequest.custom_ranking_info.ranking_expression with weight factor assigned by SearchJobsRequest.custom_ranking_info.importance_level in descending order. * Location sorting: Use the special syntax to order jobs by distance: \"`distance_from('Hawaii')`\": Order by distance from Hawaii. \"`distance_from(19.89, 155.5)`\": Order by distance from a coordinate. \"`distance_from('Hawaii'), distance_from('Puerto Rico')`\": Order by multiple locations. See details below. \"`distance_from('Hawaii'), distance_from(19.89, 155.5)`\": Order by multiple locations. See details below. The string can have a maximum of 256 characters. When multiple distance centers are provided, a job that is close to any of the distance centers would have a high rank. When a job has multiple locations, the job location closest to one of the distance centers will be used. Jobs that don't have locations will be ranked at the bottom. Distance is calculated with a precision of 11.3 meters (37.4 feet). Diversification strategy is still applied unless explicitly disabled in diversification_level.",
            "type": "string"
          },
          "pageSize": {
            "description": "Optional. A limit on the number of jobs returned in the search results. Increasing this value above the default value of 10 can increase search response time. The value can be between 1 and 100.",
            "format": "int32",
            "type": "integer"
          },
          "pageToken": {
            "description": "Optional. The token specifying the current offset within search results. See SearchJobsResponse.next_page_token for an explanation of how to obtain the next set of query results.",
            "type": "string"
          },
          "requestMetadata": {
            "$ref": "#/$defs/RequestMetadata"
          },
          "requirePreciseResultSize": {
            "deprecated": true,
            "description": "This field is deprecated.",
            "type": "boolean"
          },
          "searchMode": {
            "description": "Optional. Mode of a search. Defaults to SearchMode.JOB_SEARCH.",
            "enum": [
              "SEARCH_MODE_UNSPECIFIED",
              "JOB_SEARCH",
              "FEATURED_JOB_SEARCH"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomRankingInfo": {
        "description": "Input only. Custom ranking information for SearchJobsRequest.",
        "properties": {
          "importanceLevel": {
            "description": "Required. Controls over how important the score of CustomRankingInfo.ranking_expression gets applied to job's final ranking position. An error is thrown if not specified.",
            "enum": [
              "IMPORTANCE_LEVEL_UNSPECIFIED",
              "NONE",
              "LOW",
              "MILD",
              "MEDIUM",
              "HIGH",
              "EXTREME"
            ],
            "type": "string"
          },
          "rankingExpression": {
            "description": "Required. Controls over how job documents get ranked on top of existing relevance score (determined by API algorithm). A combination of the ranking expression and relevance score is used to determine job's final ranking position. The syntax for this expression is a subset of Google SQL syntax. Supported operators are: +, -, *, /, where the left and right side of the operator is either a numeric Job.custom_attributes key, integer/double value or an expression that can be evaluated to a number. Parenthesis are supported to adjust calculation precedence. The expression must be < 200 characters in length. The expression is considered invalid for a job if the expression references custom attributes that are not populated on the job or if the expression results in a divide by zero. If an expression is invalid for a job, that job is demoted to the end of the results. Sample ranking expression (year + 25) * 0.25 - (freshness / 0.5)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HistogramFacets": {
        "description": "Input only. Histogram facets to be specified in SearchJobsRequest.",
        "properties": {
          "compensationHistogramFacets": {
            "description": "Optional. Specifies compensation field-based histogram requests. Duplicate values of CompensationHistogramRequest.type are not allowed.",
            "items": {
              "$ref": "#/$defs/CompensationHistogramRequest"
            },
            "type": "array"
          },
          "customAttributeHistogramFacets": {
            "description": "Optional. Specifies the custom attributes histogram requests. Duplicate values of CustomAttributeHistogramRequest.key are not allowed.",
            "items": {
              "$ref": "#/$defs/CustomAttributeHistogramRequest"
            },
            "type": "array"
          },
          "simpleHistogramFacets": {
            "description": "Optional. Specifies the simple type of histogram facets, for example, `COMPANY_SIZE`, `EMPLOYMENT_TYPE` etc.",
            "items": {
              "enum": [
                "SEARCH_TYPE_UNSPECIFIED",
                "COMPANY_ID",
                "EMPLOYMENT_TYPE",
                "COMPANY_SIZE",
                "DATE_PUBLISHED",
                "EDUCATION_LEVEL",
                "EXPERIENCE_LEVEL",
                "ADMIN_1",
                "COUNTRY",
                "CITY",
                "LOCALE",
                "LANGUAGE",
                "CATEGORY",
                "CITY_COORDINATE",
                "ADMIN_1_COUNTRY",
                "COMPANY_DISPLAY_NAME",
                "BASE_COMPENSATION_UNIT"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CompensationHistogramRequest": {
        "description": "Input only. Compensation based histogram request.",
        "properties": {
          "bucketingOption": {
            "$ref": "#/$defs/NumericBucketingOption"
          },
          "type": {
            "description": "Required. Type of the request, representing which field the histogramming should be performed over. A single request can only specify one histogram of each `CompensationHistogramRequestType`.",
            "enum": [
              "COMPENSATION_HISTOGRAM_REQUEST_TYPE_UNSPECIFIED",
              "BASE",
              "ANNUALIZED_BASE",
              "ANNUALIZED_TOTAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NumericBucketingOption": {
        "description": "Input only. Use this field to specify bucketing option for the histogram search response.",
        "properties": {
          "bucketBounds": {
            "description": "Required. Two adjacent values form a histogram bucket. Values should be in ascending order. For example, if [5, 10, 15] are provided, four buckets are created: (-inf, 5), 5, 10), [10, 15), [15, inf). At most 20 [buckets_bound is supported.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "requiresMinMax": {
            "description": "Optional. If set to true, the histogram result includes minimum/maximum value of the numeric field.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "CustomAttributeHistogramRequest": {
        "description": "Custom attributes histogram request. An error is thrown if neither string_value_histogram or long_value_histogram_bucketing_option has been defined.",
        "properties": {
          "key": {
            "description": "Required. Specifies the custom field key to perform a histogram on. If specified without `long_value_histogram_bucketing_option`, histogram on string values of the given `key` is triggered, otherwise histogram is performed on long values.",
            "type": "string"
          },
          "longValueHistogramBucketingOption": {
            "$ref": "#/$defs/NumericBucketingOption"
          },
          "stringValueHistogram": {
            "description": "Optional. If set to true, the response includes the histogram value for each key as a string.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HistogramQuery": {
        "description": "Input Only. The histogram request.",
        "properties": {
          "histogramQuery": {
            "description": "An expression specifies a histogram request against matching resources (for example, jobs) for searches. Expression syntax is a aggregation function call with histogram facets and other options. Available aggregation function calls are: * `count(string_histogram_facet)`: Count the number of matching entity, for each distinct attribute value. * `count(numeric_histogram_facet, list of buckets)`: Count the number of matching entity within each bucket. A maximum of 200 histogram buckets are supported. Data types: * Histogram facet: facet names with format a-zA-Z+. * String: string like \"any string with backslash escape for quote(\\\").\" * Number: whole number and floating point number like 10, -1 and -0.01. * List: list of elements with comma(,) separator surrounded by square brackets. For example, [1, 2, 3] and [\"one\", \"two\", \"three\"]. Built-in constants: * MIN (minimum number similar to java Double.MIN_VALUE) * MAX (maximum number similar to java Double.MAX_VALUE) Built-in functions: * bucket(start, end[, label]): bucket built-in function creates a bucket with range of start, end). Note that the end is exclusive. For example, bucket(1, MAX, \"positive number\") or bucket(1, 10). Job histogram facets: * company_id: histogram by [Job.distributor_company_id. * company_display_name: histogram by Job.company_display_name. * employment_type: histogram by Job.employment_types. For example, \"FULL_TIME\", \"PART_TIME\". * company_size (DEPRECATED): histogram by CompanySize, for example, \"SMALL\", \"MEDIUM\", \"BIG\". * publish_time_in_day: histogram by the Job.publish_time in days. Must specify list of numeric buckets in spec. * publish_time_in_month: histogram by the Job.publish_time in months. Must specify list of numeric buckets in spec. * publish_time_in_year: histogram by the Job.publish_time in years. Must specify list of numeric buckets in spec. * degree_type: histogram by the Job.degree_type. For example, \"Bachelors\", \"Masters\". * job_level: histogram by the Job.job_level. For example, \"Entry Level\". * country: histogram by the country code of jobs. For example, \"US\", \"FR\". * admin1: histogram by the admin1 code of jobs, which is a global placeholder referring to the state, province, or the particular term a country uses to define the geographic structure below the country level. For example, \"CA\", \"IL\". * city: histogram by a combination of the \"city name, admin1 code\". For example, \"Mountain View, CA\", \"New York, NY\". * admin1_country: histogram by a combination of the \"admin1 code, country\". For example, \"CA, US\", \"IL, US\". * city_coordinate: histogram by the city center's GPS coordinates (latitude and longitude). For example, 37.4038522,-122.0987765. Since the coordinates of a city center can change, customers may need to refresh them periodically. * locale: histogram by the Job.language_code. For example, \"en-US\", \"fr-FR\". * language: histogram by the language subtag of the Job.language_code. For example, \"en\", \"fr\". * category: histogram by the JobCategory. For example, \"COMPUTER_AND_IT\", \"HEALTHCARE\". * base_compensation_unit: histogram by the CompensationUnit of base salary. For example, \"WEEKLY\", \"MONTHLY\". * base_compensation: histogram by the base salary. Must specify list of numeric buckets to group results by. * annualized_base_compensation: histogram by the base annualized salary. Must specify list of numeric buckets to group results by. * annualized_total_compensation: histogram by the total annualized salary. Must specify list of numeric buckets to group results by. * string_custom_attribute: histogram by string Job.custom_attributes. Values can be accessed via square bracket notations like string_custom_attribute[\"key1\"]. * numeric_custom_attribute: histogram by numeric Job.custom_attributes. Values can be accessed via square bracket notations like numeric_custom_attribute[\"key1\"]. Must specify list of numeric buckets to group results by. Example expressions: * count(admin1) * count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000), bucket(100000, MAX)]) * count(string_custom_attribute[\"some-string-custom-attribute\"]) * count(numeric_custom_attribute[\"some-numeric-custom-attribute\"], [bucket(MIN, 0, \"negative\"), bucket(0, MAX, \"non-negative\")])",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JobQuery": {
        "description": "Input only. The query required to perform a search query.",
        "properties": {
          "commuteFilter": {
            "$ref": "#/$defs/CommuteFilter"
          },
          "companyDisplayNames": {
            "description": "Optional. This filter specifies the company Company.display_name of the jobs to search against. The company name must match the value exactly. Alternatively, the value being searched for can be wrapped in different match operators. `SUBSTRING_MATCH([value])` The company name must contain a case insensitive substring match of the value. Using this function may increase latency. Sample Value: `SUBSTRING_MATCH(google)` `MULTI_WORD_TOKEN_MATCH([value])` The value will be treated as a multi word token and the company name must contain a case insensitive match of the value. Using this function may increase latency. Sample Value: `MULTI_WORD_TOKEN_MATCH(google)` If a value isn't specified, jobs within the search results are associated with any company. If multiple values are specified, jobs within the search results may be associated with any of the specified companies. At most 20 company display name filters are allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "companyNames": {
            "description": "Optional. This filter specifies the company entities to search against. If a value isn't specified, jobs are searched for against all companies. If multiple values are specified, jobs are searched against the companies specified. The format is \"projects/{project_id}/companies/{company_id}\", for example, \"projects/api-test-project/companies/foo\". At most 20 company filters are allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "compensationFilter": {
            "$ref": "#/$defs/CompensationFilter"
          },
          "customAttributeFilter": {
            "description": "Optional. This filter specifies a structured syntax to match against the Job.custom_attributes marked as `filterable`. The syntax for this expression is a subset of SQL syntax. Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the left of the operator is a custom field key and the right of the operator is a number or a quoted string. You must escape backslash (\\\\) and quote (\\\") characters. Supported functions are `LOWER([field_name])` to perform a case insensitive match and `EMPTY([field_name])` to filter on the existence of a key. Boolean expressions (AND/OR/NOT) are supported up to 3 levels of nesting (for example, \"((A AND B AND C) OR NOT D) AND E\"), a maximum of 100 comparisons or functions are allowed in the expression. The expression must be < 10000 bytes in length. Sample Query: `(LOWER(driving_license)=\"class \\\"a\\\"\" OR EMPTY(driving_license)) AND driving_years > 10`",
            "type": "string"
          },
          "disableSpellCheck": {
            "description": "Optional. This flag controls the spell-check feature. If false, the service attempts to correct a misspelled query, for example, \"enginee\" is corrected to \"engineer\". Defaults to false: a spell check is performed.",
            "type": "boolean"
          },
          "employmentTypes": {
            "description": "Optional. The employment type filter specifies the employment type of jobs to search against, such as EmploymentType.FULL_TIME. If a value is not specified, jobs in the search results includes any employment type. If multiple values are specified, jobs in the search results include any of the specified employment types.",
            "items": {
              "enum": [
                "EMPLOYMENT_TYPE_UNSPECIFIED",
                "FULL_TIME",
                "PART_TIME",
                "CONTRACTOR",
                "CONTRACT_TO_HIRE",
                "TEMPORARY",
                "INTERN",
                "VOLUNTEER",
                "PER_DIEM",
                "FLY_IN_FLY_OUT",
                "OTHER_EMPLOYMENT_TYPE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "excludedJobs": {
            "description": "Optional. This filter specifies a list of job names to be excluded during search. At most 400 excluded job names are allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "jobCategories": {
            "description": "Optional. The category filter specifies the categories of jobs to search against. See Category for more information. If a value is not specified, jobs from any category are searched against. If multiple values are specified, jobs from any of the specified categories are searched against.",
            "items": {
              "enum": [
                "JOB_CATEGORY_UNSPECIFIED",
                "ACCOUNTING_AND_FINANCE",
                "ADMINISTRATIVE_AND_OFFICE",
                "ADVERTISING_AND_MARKETING",
                "ANIMAL_CARE",
                "ART_FASHION_AND_DESIGN",
                "BUSINESS_OPERATIONS",
                "CLEANING_AND_FACILITIES",
                "COMPUTER_AND_IT",
                "CONSTRUCTION",
                "CUSTOMER_SERVICE",
                "EDUCATION",
                "ENTERTAINMENT_AND_TRAVEL",
                "FARMING_AND_OUTDOORS",
                "HEALTHCARE",
                "HUMAN_RESOURCES",
                "INSTALLATION_MAINTENANCE_AND_REPAIR",
                "LEGAL",
                "MANAGEMENT",
                "MANUFACTURING_AND_WAREHOUSE",
                "MEDIA_COMMUNICATIONS_AND_WRITING",
                "OIL_GAS_AND_MINING",
                "PERSONAL_CARE_AND_SERVICES",
                "PROTECTIVE_SERVICES",
                "REAL_ESTATE",
                "RESTAURANT_AND_HOSPITALITY",
                "SALES_AND_RETAIL",
                "SCIENCE_AND_ENGINEERING",
                "SOCIAL_SERVICES_AND_NON_PROFIT",
                "SPORTS_FITNESS_AND_RECREATION",
                "TRANSPORTATION_AND_LOGISTICS"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "languageCodes": {
            "description": "Optional. This filter specifies the locale of jobs to search against, for example, \"en-US\". If a value isn't specified, the search results can contain jobs in any locale. Language codes should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47). At most 10 language code filters are allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "locationFilters": {
            "description": "Optional. The location filter specifies geo-regions containing the jobs to search against. See LocationFilter for more information. If a location value isn't specified, jobs fitting the other search criteria are retrieved regardless of where they're located. If multiple values are specified, jobs are retrieved from any of the specified locations. If different values are specified for the LocationFilter.distance_in_miles parameter, the maximum provided distance is used for all locations. At most 5 location filters are allowed.",
            "items": {
              "$ref": "#/$defs/LocationFilter"
            },
            "type": "array"
          },
          "publishTimeRange": {
            "$ref": "#/$defs/TimestampRange"
          },
          "query": {
            "description": "Optional. The query string that matches against the job title, description, and location fields. The maximum number of allowed characters is 255.",
            "type": "string"
          },
          "queryLanguageCode": {
            "description": "The language code of query. For example, \"en-US\". This field helps to better interpret the query. If a value isn't specified, the query language code is automatically detected, which may not be accurate. Language code should be in BCP-47 format, such as \"en-US\" or \"sr-Latn\". For more information, see [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CommuteFilter": {
        "description": "Input only. Parameters needed for commute search.",
        "properties": {
          "allowImpreciseAddresses": {
            "description": "Optional. If true, jobs without \"precise\" addresses (street level addresses or GPS coordinates) might also be returned. For city and coarser level addresses, text matching is used. If this field is set to false or is not specified, only jobs that include precise addresses are returned by Commute Search. Note: If `allow_imprecise_addresses` is set to true, Commute Search is not able to calculate accurate commute times to jobs with city level and coarser address information. Jobs with imprecise addresses will return a `travel_duration` time of 0 regardless of distance from the job seeker.",
            "type": "boolean"
          },
          "commuteMethod": {
            "description": "Required. The method of transportation for which to calculate the commute time.",
            "enum": [
              "COMMUTE_METHOD_UNSPECIFIED",
              "DRIVING",
              "TRANSIT",
              "WALKING",
              "CYCLING"
            ],
            "type": "string"
          },
          "departureTime": {
            "$ref": "#/$defs/TimeOfDay"
          },
          "roadTraffic": {
            "description": "Optional. Specifies the traffic density to use when calculating commute time.",
            "enum": [
              "ROAD_TRAFFIC_UNSPECIFIED",
              "TRAFFIC_FREE",
              "BUSY_HOUR"
            ],
            "type": "string"
          },
          "startCoordinates": {
            "$ref": "#/$defs/LatLng"
          },
          "travelDuration": {
            "description": "Required. The maximum travel time in seconds. The maximum allowed value is `3600s` (one hour). Format is `123s`.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimeOfDay": {
        "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
        "properties": {
          "hours": {
            "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "description": "Minutes of hour of day. Must be from 0 to 59.",
            "format": "int32",
            "type": "integer"
          },
          "nanos": {
            "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "LatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "CompensationFilter": {
        "description": "Input only. Filter on job compensation type and amount.",
        "properties": {
          "includeJobsWithUnspecifiedCompensationRange": {
            "description": "Optional. If set to true, jobs with unspecified compensation range fields are included.",
            "type": "boolean"
          },
          "range": {
            "$ref": "#/$defs/CompensationRange"
          },
          "type": {
            "description": "Required. Type of filter.",
            "enum": [
              "FILTER_TYPE_UNSPECIFIED",
              "UNIT_ONLY",
              "UNIT_AND_AMOUNT",
              "ANNUALIZED_BASE_AMOUNT",
              "ANNUALIZED_TOTAL_AMOUNT"
            ],
            "type": "string"
          },
          "units": {
            "description": "Required. Specify desired `base compensation entry's` CompensationInfo.CompensationUnit.",
            "items": {
              "enum": [
                "COMPENSATION_UNIT_UNSPECIFIED",
                "HOURLY",
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "YEARLY",
                "ONE_TIME",
                "OTHER_COMPENSATION_UNIT"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CompensationRange": {
        "description": "Compensation range.",
        "properties": {
          "maxCompensation": {
            "$ref": "#/$defs/Money"
          },
          "minCompensation": {
            "$ref": "#/$defs/Money"
          }
        },
        "type": "object"
      },
      "Money": {
        "description": "Represents an amount of money with its currency type.",
        "properties": {
          "currencyCode": {
            "description": "The three-letter currency code defined in ISO 4217.",
            "type": "string"
          },
          "nanos": {
            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "units": {
            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationFilter": {
        "description": "Input only. Geographic region of the search.",
        "properties": {
          "address": {
            "description": "Optional. The address name, such as \"Mountain View\" or \"Bay Area\".",
            "type": "string"
          },
          "distanceInMiles": {
            "description": "Optional. The distance_in_miles is applied when the location being searched for is identified as a city or smaller. When the location being searched for is a state or larger, this field is ignored.",
            "format": "double",
            "type": "number"
          },
          "latLng": {
            "$ref": "#/$defs/LatLng"
          },
          "regionCode": {
            "description": "Optional. CLDR region code of the country/region. This field may be used in two ways: 1) If telecommute preference is not set, this field is used address ambiguity of the user-input address. For example, \"Liverpool\" may refer to \"Liverpool, NY, US\" or \"Liverpool, UK\". This region code biases the address resolution toward a specific country or territory. If this field is not set, address resolution is biased toward the United States by default. 2) If telecommute preference is set to TELECOMMUTE_ALLOWED, the telecommute location filter will be limited to the region specified in this field. If this field is not set, the telecommute job locations will not be limited. See https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html for details. Example: \"CH\" for Switzerland.",
            "type": "string"
          },
          "telecommutePreference": {
            "description": "Optional. Allows the client to return jobs without a set location, specifically, telecommuting jobs (telecommuting is considered by the service as a special location). Job.posting_region indicates if a job permits telecommuting. If this field is set to TelecommutePreference.TELECOMMUTE_ALLOWED, telecommuting jobs are searched, and address and lat_lng are ignored. If not set or set to TelecommutePreference.TELECOMMUTE_EXCLUDED, the telecommute status of the jobs is ignored. Jobs that have PostingRegion.TELECOMMUTE and have additional Job.addresses may still be matched based on other location filters using address or latlng. This filter can be used by itself to search exclusively for telecommuting jobs, or it can be combined with another location filter to search for a combination of job locations, such as \"Mountain View\" or \"telecommuting\" jobs. However, when used in combination with other location filters, telecommuting jobs can be treated as less relevant than other jobs in the search response.",
            "enum": [
              "TELECOMMUTE_PREFERENCE_UNSPECIFIED",
              "TELECOMMUTE_EXCLUDED",
              "TELECOMMUTE_ALLOWED",
              "TELECOMMUTE_JOBS_EXCLUDED"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              true,
              false,
              false
            ]
          }
        },
        "type": "object"
      },
      "TimestampRange": {
        "description": "Message representing a period of time between two timestamps.",
        "properties": {
          "endTime": {
            "description": "End of the period.",
            "format": "google-datetime",
            "type": "string"
          },
          "startTime": {
            "description": "Begin of the period.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RequestMetadata": {
        "description": "Input only. Meta information related to the job searcher or entity conducting the job search. This information is used to improve the performance of the service.",
        "properties": {
          "deviceInfo": {
            "$ref": "#/$defs/DeviceInfo"
          },
          "domain": {
            "description": "Required. The client-defined scope or source of the service call, which typically is the domain on which the service has been implemented and is currently being run. For example, if the service is being run by client *Foo, Inc.*, on job board www.foo.com and career site www.bar.com, then this field is set to \"foo.com\" for use on the job board, and \"bar.com\" for use on the career site. If this field isn't available for some reason, send \"UNKNOWN\". Any improvements to the model for a particular tenant site rely on this field being set correctly to a domain. The maximum number of allowed characters is 255.",
            "type": "string"
          },
          "sessionId": {
            "description": "Required. A unique session identification string. A session is defined as the duration of an end user's interaction with the service over a certain period. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send \"UNKNOWN\". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to some unique session_id. The maximum number of allowed characters is 255.",
            "type": "string"
          },
          "userId": {
            "description": "Required. A unique user identification string, as determined by the client. To have the strongest positive impact on search quality make sure the client-level is unique. Obfuscate this field for privacy concerns before providing it to the service. If this field is not available for some reason, send \"UNKNOWN\". Note that any improvements to the model for a particular tenant site, rely on this field being set correctly to a unique user_id. The maximum number of allowed characters is 255.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceInfo": {
        "description": "Device information collected from the job seeker, candidate, or other entity conducting the job search. Providing this information improves the quality of the search results across devices.",
        "properties": {
          "deviceType": {
            "description": "Optional. Type of the device.",
            "enum": [
              "DEVICE_TYPE_UNSPECIFIED",
              "WEB",
              "MOBILE_WEB",
              "ANDROID",
              "IOS",
              "BOT",
              "OTHER"
            ],
            "type": "string"
          },
          "id": {
            "description": "Optional. A device-specific ID. The ID must be a unique identifier that distinguishes the device from other devices.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://jobs.googleapis.com//v3p1beta1/{parent}/jobs:searchForAlert{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Output only. Response for SearchJob method.",
        "**Key properties:**",
        {
          "$ul": [
            "**broadenedQueryJobsCount**: If query broadening is enabled, we may append additional results from the broadened query. This number indicates how many of the jobs returned in the jobs field are from the broadened query. These results are always at the end of the jobs list. In particular, a value of 0, or if the field isn't set, all the jobs in the jobs list are from the original (without broadening) query. If this field is non-zero, subsequent requests with offset after this result set should contain all broadened results.",
            "**estimatedTotalSize**: An estimation of the number of jobs that match the specified query. This number is not guaranteed to be accurate. For accurate results, see SearchJobsResponse.total_size.",
            "**histogramQueryResults**: The histogram results that match with specified SearchJobsRequest.histogram_queries.",
            [
              "**histogramResults**: Output only. Histogram results that match HistogramFacets specified in SearchJobsRequest.",
              {
                "$ul": [
                  "**compensationHistogramResults**: Specifies compensation field-based histogram results that match HistogramFacets.compensation_histogram_requests.",
                  "**customAttributeHistogramResults**: Specifies histogram results for custom attributes that match HistogramFacets.custom_attribute_histogram_facets.",
                  "**simpleHistogramResults**: Specifies histogram results that matches HistogramFacets.simple_histogram_facets."
                ]
              }
            ],
            "**locationFilters**: The location filters that the service applied to the specified query. If any filters are lat-lng based, the JobLocation.location_type is JobLocation.LocationType#LOCATION_TYPE_UNSPECIFIED.",
            "**matchingJobs**: The Job entities that match the specified SearchJobsRequest.",
            [
              "**metadata**: Output only. Additional information returned to client, such as debugging information.",
              {
                "$ul": [
                  "**requestId**: A unique id associated with this call. This id is logged for tracking purposes."
                ]
              }
            ],
            "**nextPageToken**: The token that specifies the starting position of the next page of results. This field is empty if there are no more results.",
            [
              "**spellCorrection**: Output only. Spell check result.",
              {
                "$ul": [
                  "**corrected**: Indicates if the query was corrected by the spell checker.",
                  "**correctedText**: Correction output consisting of the corrected keyword string."
                ]
              }
            ],
            "**totalSize**: The precise result count with limit 100,000."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
