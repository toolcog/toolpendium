{
  "name": "file_projects_locations_instances_create",
  "description": "Creates an instance. When creating from a backup, the capacity of the new instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The instance's project and location, in the format `projects/{project_id}/locations/{location}`. In Filestore, locations map to Google Cloud zones, for example **us-west1-b**."
      },
      "instanceId": {
        "type": "string",
        "description": "Required. The name of the instance to create. The name must be unique for the specified project and location."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Instance"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Instance": {
        "description": "A Filestore instance.",
        "properties": {
          "createTime": {
            "description": "Output only. The time when the instance was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The description of the instance (2048 characters or less).",
            "type": "string"
          },
          "etag": {
            "description": "Server-specified ETag for the instance resource to prevent simultaneous updates from overwriting each other.",
            "type": "string"
          },
          "fileShares": {
            "description": "File system shares on the instance. For this version, only a single file share is supported.",
            "items": {
              "$ref": "#/$defs/FileShareConfig"
            },
            "type": "array"
          },
          "kmsKeyName": {
            "description": "KMS key name used for data encryption.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource labels to represent user provided metadata.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The resource name of the instance, in the format `projects/{project}/locations/{location}/instances/{instance}`.",
            "readOnly": true,
            "type": "string"
          },
          "networks": {
            "description": "VPC networks to which the instance is connected. For this version, only a single network is supported.",
            "items": {
              "$ref": "#/$defs/NetworkConfig"
            },
            "type": "array"
          },
          "satisfiesPzi": {
            "description": "Output only. Reserved for future use.",
            "readOnly": true,
            "type": "boolean"
          },
          "satisfiesPzs": {
            "description": "Output only. Reserved for future use.",
            "readOnly": true,
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The instance state.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "REPAIRING",
              "DELETING",
              "ERROR",
              "RESTORING",
              "SUSPENDED",
              "SUSPENDING",
              "RESUMING",
              "REVERTING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "statusMessage": {
            "description": "Output only. Additional information about the instance state, if available.",
            "readOnly": true,
            "type": "string"
          },
          "suspensionReasons": {
            "description": "Output only. Field indicates all the reasons the instance is in \"SUSPENDED\" state.",
            "items": {
              "enum": [
                "SUSPENSION_REASON_UNSPECIFIED",
                "KMS_KEY_ISSUE"
              ],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "tier": {
            "description": "The service tier of the instance.",
            "enum": [
              "TIER_UNSPECIFIED",
              "STANDARD",
              "PREMIUM",
              "BASIC_HDD",
              "BASIC_SSD",
              "HIGH_SCALE_SSD",
              "ENTERPRISE",
              "ZONAL",
              "REGIONAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileShareConfig": {
        "description": "File share configuration for the instance.",
        "properties": {
          "capacityGb": {
            "description": "File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3 bytes.",
            "format": "int64",
            "type": "string"
          },
          "name": {
            "description": "Required. The name of the file share. Must use 1-16 characters for the basic service tier and 1-63 characters for all other service tiers. Must use lowercase letters, numbers, or underscores `[a-z0-9_]`. Must start with a letter. Immutable.",
            "type": "string"
          },
          "nfsExportOptions": {
            "description": "Nfs Export Options. There is a limit of 10 export options per file share.",
            "items": {
              "$ref": "#/$defs/NfsExportOptions"
            },
            "type": "array"
          },
          "sourceBackup": {
            "description": "The resource name of the backup, in the format `projects/{project_number}/locations/{location_id}/backups/{backup_id}`, that this file share has been restored from.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NfsExportOptions": {
        "description": "NFS export options specifications.",
        "properties": {
          "accessMode": {
            "description": "Either READ_ONLY, for allowing only read requests on the exported directory, or READ_WRITE, for allowing both read and write requests. The default is READ_WRITE.",
            "enum": [
              "ACCESS_MODE_UNSPECIFIED",
              "READ_ONLY",
              "READ_WRITE"
            ],
            "type": "string"
          },
          "anonGid": {
            "description": "An integer representing the anonymous group id with a default value of 65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.",
            "format": "int64",
            "type": "string"
          },
          "anonUid": {
            "description": "An integer representing the anonymous user id with a default value of 65534. Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be returned if this field is specified for other squash_mode settings.",
            "format": "int64",
            "type": "string"
          },
          "ipRanges": {
            "description": "List of either an IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file share. Overlapping IP ranges are not allowed, both within and across NfsExportOptions. An error will be returned. The limit is 64 IP ranges/addresses for each FileShareConfig among all NfsExportOptions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "squashMode": {
            "description": "Either NO_ROOT_SQUASH, for allowing root access on the exported directory, or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.",
            "enum": [
              "SQUASH_MODE_UNSPECIFIED",
              "NO_ROOT_SQUASH",
              "ROOT_SQUASH"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkConfig": {
        "description": "Network configuration for the instance.",
        "properties": {
          "connectMode": {
            "description": "The network connect mode of the Filestore instance. If not provided, the connect mode defaults to DIRECT_PEERING.",
            "enum": [
              "CONNECT_MODE_UNSPECIFIED",
              "DIRECT_PEERING",
              "PRIVATE_SERVICE_ACCESS"
            ],
            "type": "string"
          },
          "ipAddresses": {
            "description": "Output only. IPv4 addresses in the format `{octet1}.{octet2}.{octet3}.{octet4}` or IPv6 addresses in the format `{block1}:{block2}:{block3}:{block4}:{block5}:{block6}:{block7}:{block8}`.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "modes": {
            "description": "Internet protocol versions for which the instance has IP addresses assigned. For this version, only MODE_IPV4 is supported.",
            "items": {
              "enum": [
                "ADDRESS_MODE_UNSPECIFIED",
                "MODE_IPV4"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "network": {
            "description": "The name of the Google Compute Engine [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected.",
            "type": "string"
          },
          "reservedIpRange": {
            "description": "Optional, reserved_ip_range can have one of the following two types of values. * CIDR range value when using DIRECT_PEERING connect mode. * [Allocated IP address range](https://cloud.google.com/compute/docs/ip-addresses/reserve-static-internal-ip-address) when using PRIVATE_SERVICE_ACCESS connect mode. When the name of an allocated IP address range is specified, it must be one of the ranges associated with the private service access connection. When specified as a direct CIDR value, it must be a /29 CIDR block for Basic tier, a /24 CIDR block for High Scale tier, or a /26 CIDR block for Enterprise tier in one of the [internal IP address ranges](https://www.arin.net/reference/research/statistics/address_filters/) that identifies the range of IP addresses reserved for this instance. For example, 10.0.0.0/29, 192.168.0.0/24 or 192.168.0.0/26, respectively. The range you specify can't overlap with either existing subnets or assigned IP address ranges for other Filestore instances in the selected VPC network.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://file.googleapis.com//v1/{parent}/instances{?instanceId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
