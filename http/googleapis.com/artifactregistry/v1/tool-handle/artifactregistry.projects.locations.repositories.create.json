{
  "name": "artifactregistry_projects_locations_repositories_create",
  "description": "Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the parent resource where the repository will be created."
      },
      "repositoryId": {
        "type": "string",
        "description": "Required. The repository id to use for this repository."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Repository"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Repository": {
        "description": "A Repository for storing artifacts with a specific format.",
        "properties": {
          "cleanupPolicies": {
            "additionalProperties": {
              "$ref": "#/$defs/CleanupPolicy"
            },
            "description": "Optional. Cleanup policies for this repository. Cleanup policies indicate when certain package versions can be automatically deleted. Map keys are policy IDs supplied by users during policy creation. They must unique within a repository and be under 128 characters in length.",
            "type": "object"
          },
          "cleanupPolicyDryRun": {
            "description": "Optional. If true, the cleanup pipeline is prevented from deleting versions in this repository.",
            "type": "boolean"
          },
          "createTime": {
            "description": "Output only. The time when the repository was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The user-provided description of the repository.",
            "type": "string"
          },
          "disallowUnspecifiedMode": {
            "description": "Optional. If this is true, aunspecified repo type will be treated as error. Is used for new repo types that don't have any specific fields. Right now is used by AOSS team when creating repos for customers.",
            "type": "boolean"
          },
          "dockerConfig": {
            "$ref": "#/$defs/DockerRepositoryConfig"
          },
          "format": {
            "description": "Optional. The format of packages that are stored in the repository.",
            "enum": [
              "FORMAT_UNSPECIFIED",
              "DOCKER",
              "MAVEN",
              "NPM",
              "APT",
              "YUM",
              "GOOGET",
              "PYTHON",
              "KFP",
              "GO"
            ],
            "type": "string"
          },
          "kmsKeyName": {
            "description": "The Cloud KMS resource name of the customer managed encryption key that's used to encrypt the contents of the Repository. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. This value may not be changed after the Repository has been created.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels with user-defined metadata. This field may contain up to 64 entries. Label keys and values may be no longer than 63 characters. Label keys must begin with a lowercase letter and may only contain lowercase letters, numeric characters, underscores, and dashes.",
            "type": "object"
          },
          "mavenConfig": {
            "$ref": "#/$defs/MavenRepositoryConfig"
          },
          "mode": {
            "description": "Optional. The mode of the repository.",
            "enum": [
              "MODE_UNSPECIFIED",
              "STANDARD_REPOSITORY",
              "VIRTUAL_REPOSITORY",
              "REMOTE_REPOSITORY"
            ],
            "type": "string"
          },
          "name": {
            "description": "The name of the repository, for example: `projects/p1/locations/us-central1/repositories/repo1`.",
            "type": "string"
          },
          "remoteRepositoryConfig": {
            "$ref": "#/$defs/RemoteRepositoryConfig"
          },
          "satisfiesPzs": {
            "description": "Output only. If set, the repository satisfies physical zone separation.",
            "readOnly": true,
            "type": "boolean"
          },
          "sizeBytes": {
            "description": "Output only. The size, in bytes, of all artifact storage in this repository. Repositories that are generally available or in public preview use this to calculate storage costs.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time when the repository was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "virtualRepositoryConfig": {
            "$ref": "#/$defs/VirtualRepositoryConfig"
          }
        },
        "type": "object"
      },
      "CleanupPolicy": {
        "description": "Artifact policy configuration for repository cleanup policies.",
        "properties": {
          "action": {
            "description": "Policy action.",
            "enum": [
              "ACTION_UNSPECIFIED",
              "DELETE",
              "KEEP"
            ],
            "type": "string"
          },
          "condition": {
            "$ref": "#/$defs/CleanupPolicyCondition"
          },
          "id": {
            "description": "The user-provided ID of the cleanup policy.",
            "type": "string"
          },
          "mostRecentVersions": {
            "$ref": "#/$defs/CleanupPolicyMostRecentVersions"
          }
        },
        "type": "object"
      },
      "CleanupPolicyCondition": {
        "description": "CleanupPolicyCondition is a set of conditions attached to a CleanupPolicy. If multiple entries are set, all must be satisfied for the condition to be satisfied.",
        "properties": {
          "newerThan": {
            "description": "Match versions newer than a duration.",
            "format": "google-duration",
            "type": "string"
          },
          "olderThan": {
            "description": "Match versions older than a duration.",
            "format": "google-duration",
            "type": "string"
          },
          "packageNamePrefixes": {
            "description": "Match versions by package prefix. Applied on any prefix match.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tagPrefixes": {
            "description": "Match versions by tag prefix. Applied on any prefix match.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tagState": {
            "description": "Match versions by tag status.",
            "enum": [
              "TAG_STATE_UNSPECIFIED",
              "TAGGED",
              "UNTAGGED",
              "ANY"
            ],
            "type": "string"
          },
          "versionNamePrefixes": {
            "description": "Match versions by version name prefix. Applied on any prefix match.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CleanupPolicyMostRecentVersions": {
        "description": "CleanupPolicyMostRecentVersions is an alternate condition of a CleanupPolicy for retaining a minimum number of versions.",
        "properties": {
          "keepCount": {
            "description": "Minimum number of versions to keep.",
            "format": "int32",
            "type": "integer"
          },
          "packageNamePrefixes": {
            "description": "List of package name prefixes that will apply this rule.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DockerRepositoryConfig": {
        "description": "DockerRepositoryConfig is docker related repository details. Provides additional configuration details for repositories of the docker format type.",
        "properties": {
          "immutableTags": {
            "description": "The repository which enabled this flag prevents all tags from being modified, moved or deleted. This does not prevent tags from being created.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "MavenRepositoryConfig": {
        "description": "MavenRepositoryConfig is maven related repository details. Provides additional configuration details for repositories of the maven format type.",
        "properties": {
          "allowSnapshotOverwrites": {
            "description": "The repository with this flag will allow publishing the same snapshot versions.",
            "type": "boolean"
          },
          "versionPolicy": {
            "description": "Version policy defines the versions that the registry will accept.",
            "enum": [
              "VERSION_POLICY_UNSPECIFIED",
              "RELEASE",
              "SNAPSHOT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RemoteRepositoryConfig": {
        "description": "Remote repository configuration.",
        "properties": {
          "aptRepository": {
            "$ref": "#/$defs/AptRepository"
          },
          "description": {
            "description": "The description of the remote source.",
            "type": "string"
          },
          "dockerRepository": {
            "$ref": "#/$defs/DockerRepository"
          },
          "mavenRepository": {
            "$ref": "#/$defs/MavenRepository"
          },
          "npmRepository": {
            "$ref": "#/$defs/NpmRepository"
          },
          "pythonRepository": {
            "$ref": "#/$defs/PythonRepository"
          },
          "upstreamCredentials": {
            "$ref": "#/$defs/UpstreamCredentials"
          },
          "yumRepository": {
            "$ref": "#/$defs/YumRepository"
          }
        },
        "type": "object"
      },
      "AptRepository": {
        "description": "Configuration for an Apt remote repository.",
        "properties": {
          "publicRepository": {
            "$ref": "#/$defs/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigAptRepositoryPublicRepository": {
        "description": "Publicly available Apt repositories constructed from a common repository base and a custom repository path.",
        "properties": {
          "repositoryBase": {
            "description": "A common public repository base for Apt.",
            "enum": [
              "REPOSITORY_BASE_UNSPECIFIED",
              "DEBIAN",
              "UBUNTU",
              "DEBIAN_SNAPSHOT"
            ],
            "type": "string"
          },
          "repositoryPath": {
            "description": "A custom field to define a path to a specific repository from the base.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DockerRepository": {
        "description": "Configuration for a Docker remote repository.",
        "properties": {
          "publicRepository": {
            "description": "One of the publicly available Docker repositories supported by Artifact Registry.",
            "enum": [
              "PUBLIC_REPOSITORY_UNSPECIFIED",
              "DOCKER_HUB"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MavenRepository": {
        "description": "Configuration for a Maven remote repository.",
        "properties": {
          "publicRepository": {
            "description": "One of the publicly available Maven repositories supported by Artifact Registry.",
            "enum": [
              "PUBLIC_REPOSITORY_UNSPECIFIED",
              "MAVEN_CENTRAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NpmRepository": {
        "description": "Configuration for a Npm remote repository.",
        "properties": {
          "publicRepository": {
            "description": "One of the publicly available Npm repositories supported by Artifact Registry.",
            "enum": [
              "PUBLIC_REPOSITORY_UNSPECIFIED",
              "NPMJS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PythonRepository": {
        "description": "Configuration for a Python remote repository.",
        "properties": {
          "publicRepository": {
            "description": "One of the publicly available Python repositories supported by Artifact Registry.",
            "enum": [
              "PUBLIC_REPOSITORY_UNSPECIFIED",
              "PYPI"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpstreamCredentials": {
        "description": "The credentials to access the remote repository.",
        "properties": {
          "usernamePasswordCredentials": {
            "$ref": "#/$defs/UsernamePasswordCredentials"
          }
        },
        "type": "object"
      },
      "UsernamePasswordCredentials": {
        "description": "Username and password credentials.",
        "properties": {
          "passwordSecretVersion": {
            "description": "The Secret Manager key version that holds the password to access the remote repository. Must be in the format of `projects/{project}/secrets/{secret}/versions/{version}`.",
            "type": "string"
          },
          "username": {
            "description": "The username to access the remote repository.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "YumRepository": {
        "description": "Configuration for a Yum remote repository.",
        "properties": {
          "publicRepository": {
            "$ref": "#/$defs/GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsArtifactregistryV1RemoteRepositoryConfigYumRepositoryPublicRepository": {
        "description": "Publicly available Yum repositories constructed from a common repository base and a custom repository path.",
        "properties": {
          "repositoryBase": {
            "description": "A common public repository base for Yum.",
            "enum": [
              "REPOSITORY_BASE_UNSPECIFIED",
              "CENTOS",
              "CENTOS_DEBUG",
              "CENTOS_VAULT",
              "CENTOS_STREAM",
              "ROCKY",
              "EPEL"
            ],
            "type": "string"
          },
          "repositoryPath": {
            "description": "A custom field to define a path to a specific repository from the base.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VirtualRepositoryConfig": {
        "description": "Virtual repository configuration.",
        "properties": {
          "upstreamPolicies": {
            "description": "Policies that configure the upstream artifacts distributed by the Virtual Repository. Upstream policies cannot be set on a standard repository.",
            "items": {
              "$ref": "#/$defs/UpstreamPolicy"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "UpstreamPolicy": {
        "description": "Artifact policy configuration for the repository contents.",
        "properties": {
          "id": {
            "description": "The user-provided ID of the upstream policy.",
            "type": "string"
          },
          "priority": {
            "description": "Entries with a greater priority value take precedence in the pull order.",
            "format": "int32",
            "type": "integer"
          },
          "repository": {
            "description": "A reference to the repository resource, for example: `projects/p1/locations/us-central1/repositories/repo1`.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://artifactregistry.googleapis.com//v1/{parent}/repositories{?repositoryId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
