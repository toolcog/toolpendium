{
  "name": "firestore_projects_databases_documents_runAggregationQuery",
  "description": "Runs an aggregation query. Rather than producing Document results like Firestore.RunQuery, this API allows running an aggregation to produce a series of AggregationResult server-side. High-Level Example: ``` -- Return the number of documents in table given a filter. SELECT COUNT(*) FROM ( SELECT * FROM k where a = true ); ```",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource name. In the format: `projects/{project_id}/databases/{database_id}/documents` or `projects/{project_id}/databases/{database_id}/documents/{document_path}`. For example: `projects/my-project/databases/my-database/documents` or `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/RunAggregationQueryRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "RunAggregationQueryRequest": {
        "description": "The request for Firestore.RunAggregationQuery.",
        "properties": {
          "newTransaction": {
            "$ref": "#/$defs/TransactionOptions"
          },
          "readTime": {
            "description": "Executes the query at the given timestamp. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "format": "google-datetime",
            "type": "string"
          },
          "structuredAggregationQuery": {
            "$ref": "#/$defs/StructuredAggregationQuery"
          },
          "transaction": {
            "description": "Run the aggregation within an already active transaction. The value here is the opaque transaction ID to execute the query in.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransactionOptions": {
        "description": "Options for creating a new transaction.",
        "properties": {
          "readOnly": {
            "$ref": "#/$defs/ReadOnly"
          },
          "readWrite": {
            "$ref": "#/$defs/ReadWrite"
          }
        },
        "type": "object"
      },
      "ReadOnly": {
        "description": "Options for a transaction that can only be used to read documents.",
        "properties": {
          "readTime": {
            "description": "Reads documents at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReadWrite": {
        "description": "Options for a transaction that can be used to read and write documents. Firestore does not allow 3rd party auth requests to create read-write. transactions.",
        "properties": {
          "retryTransaction": {
            "description": "An optional transaction to retry.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StructuredAggregationQuery": {
        "description": "Firestore query for running an aggregation over a StructuredQuery.",
        "properties": {
          "aggregations": {
            "description": "Optional. Series of aggregations to apply over the results of the `structured_query`. Requires: * A minimum of one and maximum of five aggregations per query.",
            "items": {
              "$ref": "#/$defs/Aggregation"
            },
            "type": "array"
          },
          "structuredQuery": {
            "$ref": "#/$defs/StructuredQuery"
          }
        },
        "type": "object"
      },
      "Aggregation": {
        "description": "Defines an aggregation that produces a single result.",
        "properties": {
          "alias": {
            "description": "Optional. Optional name of the field to store the result of the aggregation into. If not provided, Firestore will pick a default name following the format `field_`. For example: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2), COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) OVER ( ... ); ``` becomes: ``` AGGREGATE COUNT_UP_TO(1) AS count_up_to_1, COUNT_UP_TO(2) AS field_1, COUNT_UP_TO(3) AS count_up_to_3, COUNT(*) AS field_2 OVER ( ... ); ``` Requires: * Must be unique across all aggregation aliases. * Conform to document field name limitations.",
            "type": "string"
          },
          "avg": {
            "$ref": "#/$defs/Avg"
          },
          "count": {
            "$ref": "#/$defs/Count"
          },
          "sum": {
            "$ref": "#/$defs/Sum"
          }
        },
        "type": "object"
      },
      "Avg": {
        "description": "Average of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns `NULL`. * Always returns the result as a double.",
        "properties": {
          "field": {
            "$ref": "#/$defs/FieldReference"
          }
        },
        "type": "object"
      },
      "FieldReference": {
        "description": "A reference to a field in a document, ex: `stats.operations`.",
        "properties": {
          "fieldPath": {
            "description": "A reference to a field in a document. Requires: * MUST be a dot-delimited (`.`) string of segments, where each segment conforms to document field name limitations.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Count": {
        "description": "Count of documents that match the query. The `COUNT(*)` aggregation function operates on the entire document so it does not require a field reference.",
        "properties": {
          "upTo": {
            "description": "Optional. Optional constraint on the maximum number of documents to count. This provides a way to set an upper bound on the number of documents to scan, limiting latency, and cost. Unspecified is interpreted as no bound. High-Level Example: ``` AGGREGATE COUNT_UP_TO(1000) OVER ( SELECT * FROM k ); ``` Requires: * Must be greater than zero when present.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Sum": {
        "description": "Sum of the values of the requested field. * Only numeric values will be aggregated. All non-numeric values including `NULL` are skipped. * If the aggregated values contain `NaN`, returns `NaN`. Infinity math follows IEEE-754 standards. * If the aggregated value set is empty, returns 0. * Returns a 64-bit integer if all aggregated numbers are integers and the sum result does not overflow. Otherwise, the result is returned as a double. Note that even if all the aggregated values are integers, the result is returned as a double if it cannot fit within a 64-bit signed integer. When this occurs, the returned value will lose precision. * When underflow occurs, floating-point aggregation is non-deterministic. This means that running the same query repeatedly without any changes to the underlying values could produce slightly different results each time. In those cases, values should be stored as integers over floating-point numbers.",
        "properties": {
          "field": {
            "$ref": "#/$defs/FieldReference"
          }
        },
        "type": "object"
      },
      "StructuredQuery": {
        "description": "A Firestore query. The query stages are executed in the following order: 1. from 2. where 3. select 4. order_by + start_at + end_at 5. offset 6. limit",
        "properties": {
          "endAt": {
            "$ref": "#/$defs/Cursor"
          },
          "from": {
            "description": "The collections to query.",
            "items": {
              "$ref": "#/$defs/CollectionSelector"
            },
            "type": "array"
          },
          "limit": {
            "description": "The maximum number of results to return. Applies after all other constraints. Requires: * The value must be greater than or equal to zero if specified.",
            "format": "int32",
            "type": "integer"
          },
          "offset": {
            "description": "The number of documents to skip before returning the first result. This applies after the constraints specified by the `WHERE`, `START AT`, & `END AT` but before the `LIMIT` clause. Requires: * The value must be greater than or equal to zero if specified.",
            "format": "int32",
            "type": "integer"
          },
          "orderBy": {
            "description": "The order to apply to the query results. Firestore allows callers to provide a full ordering, a partial ordering, or no ordering at all. In all cases, Firestore guarantees a stable ordering through the following rules: * The `order_by` is required to reference all fields used with an inequality filter. * All fields that are required to be in the `order_by` but are not already present are appended in lexicographical ordering of the field name. * If an order on `__name__` is not specified, it is appended by default. Fields are appended with the same sort direction as the last order specified, or 'ASCENDING' if no order was specified. For example: * `ORDER BY a` becomes `ORDER BY a ASC, __name__ ASC` * `ORDER BY a DESC` becomes `ORDER BY a DESC, __name__ DESC` * `WHERE a > 1` becomes `WHERE a > 1 ORDER BY a ASC, __name__ ASC` * `WHERE __name__ > ... AND a > 1` becomes `WHERE __name__ > ... AND a > 1 ORDER BY a ASC, __name__ ASC`",
            "items": {
              "$ref": "#/$defs/Order"
            },
            "type": "array"
          },
          "select": {
            "$ref": "#/$defs/Projection"
          },
          "startAt": {
            "$ref": "#/$defs/Cursor"
          },
          "where": {
            "$ref": "#/$defs/Filter"
          }
        },
        "type": "object"
      },
      "Cursor": {
        "description": "A position in a query result set.",
        "properties": {
          "before": {
            "description": "If the position is just before or just after the given values, relative to the sort order defined by the query.",
            "type": "boolean"
          },
          "values": {
            "description": "The values that represent a position, in the order they appear in the order by clause of a query. Can contain fewer values than specified in the order by clause.",
            "items": {
              "$ref": "#/$defs/Value"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Value": {
        "description": "A message that can hold any of the supported value types.",
        "properties": {
          "arrayValue": {
            "$ref": "#/$defs/ArrayValue"
          },
          "booleanValue": {
            "description": "A boolean value.",
            "type": "boolean"
          },
          "bytesValue": {
            "description": "A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.",
            "format": "byte",
            "type": "string"
          },
          "doubleValue": {
            "description": "A double value.",
            "format": "double",
            "type": "number"
          },
          "geoPointValue": {
            "$ref": "#/$defs/LatLng"
          },
          "integerValue": {
            "description": "An integer value.",
            "format": "int64",
            "type": "string"
          },
          "mapValue": {
            "$ref": "#/$defs/MapValue"
          },
          "nullValue": {
            "description": "A null value.",
            "enum": [
              "NULL_VALUE"
            ],
            "type": "string"
          },
          "referenceValue": {
            "description": "A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "type": "string"
          },
          "stringValue": {
            "description": "A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.",
            "type": "string"
          },
          "timestampValue": {
            "description": "A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArrayValue": {
        "description": "An array value.",
        "properties": {
          "values": {
            "description": "Values in the array.",
            "items": {
              "$ref": "#/$defs/Value"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "MapValue": {
        "description": "A map value.",
        "properties": {
          "fields": {
            "additionalProperties": {
              "$ref": "#/$defs/Value"
            },
            "description": "The map's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "CollectionSelector": {
        "description": "A selection of a collection, such as `messages as m1`.",
        "properties": {
          "allDescendants": {
            "description": "When false, selects only collections that are immediate children of the `parent` specified in the containing `RunQueryRequest`. When true, selects all descendant collections.",
            "type": "boolean"
          },
          "collectionId": {
            "description": "The collection ID. When set, selects only collections with this ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Order": {
        "description": "An order on a field.",
        "properties": {
          "direction": {
            "description": "The direction to order by. Defaults to `ASCENDING`.",
            "enum": [
              "DIRECTION_UNSPECIFIED",
              "ASCENDING",
              "DESCENDING"
            ],
            "type": "string"
          },
          "field": {
            "$ref": "#/$defs/FieldReference"
          }
        },
        "type": "object"
      },
      "Projection": {
        "description": "The projection of document's fields to return.",
        "properties": {
          "fields": {
            "description": "The fields to return. If empty, all fields are returned. To only return the name of the document, use `['__name__']`.",
            "items": {
              "$ref": "#/$defs/FieldReference"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Filter": {
        "description": "A filter.",
        "properties": {
          "compositeFilter": {
            "$ref": "#/$defs/CompositeFilter"
          },
          "fieldFilter": {
            "$ref": "#/$defs/FieldFilter"
          },
          "unaryFilter": {
            "$ref": "#/$defs/UnaryFilter"
          }
        },
        "type": "object"
      },
      "CompositeFilter": {
        "description": "A filter that merges multiple other filters using the given operator.",
        "properties": {
          "filters": {
            "description": "The list of filters to combine. Requires: * At least one filter is present.",
            "items": {
              "$ref": "#/$defs/Filter"
            },
            "type": "array"
          },
          "op": {
            "description": "The operator for combining multiple filters.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "AND",
              "OR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldFilter": {
        "description": "A filter on a specific field.",
        "properties": {
          "field": {
            "$ref": "#/$defs/FieldReference"
          },
          "op": {
            "description": "The operator to filter by.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "LESS_THAN",
              "LESS_THAN_OR_EQUAL",
              "GREATER_THAN",
              "GREATER_THAN_OR_EQUAL",
              "EQUAL",
              "NOT_EQUAL",
              "ARRAY_CONTAINS",
              "IN",
              "ARRAY_CONTAINS_ANY",
              "NOT_IN"
            ],
            "type": "string"
          },
          "value": {
            "$ref": "#/$defs/Value"
          }
        },
        "type": "object"
      },
      "UnaryFilter": {
        "description": "A filter with a single operand.",
        "properties": {
          "field": {
            "$ref": "#/$defs/FieldReference"
          },
          "op": {
            "description": "The unary operator to apply.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "IS_NAN",
              "IS_NULL",
              "IS_NOT_NAN",
              "IS_NOT_NULL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://firestore.googleapis.com//v1beta1/{parent}:runAggregationQuery{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response for Firestore.RunAggregationQuery.",
        "**Key properties:**",
        {
          "$ul": [
            "**readTime**: The time at which the aggregate result was computed. This is always monotonically increasing; in this case, the previous AggregationResult in the result stream are guaranteed not to have changed between their `read_time` and this one. If the query returns no results, a response with `read_time` and no `result` will be sent, and this represents the time at which the query was run.",
            [
              "**result**: The result of a single bucket from a Firestore aggregation query. The keys of `aggregate_fields` are the same for all results in an aggregation query, unlike document queries which can have different fields present for each result.",
              {
                "$ul": [
                  "**aggregateFields**: The result of the aggregation functions, ex: `COUNT(*) AS total_docs`. The key is the alias assigned to the aggregation function on input and the size of this map equals the number of aggregation functions in the query."
                ]
              }
            ],
            "**transaction**: The transaction that was started as part of this request. Only present on the first response when the request requested to start a new transaction."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
