{
  "name": "firestore_projects_databases_documents_batchWrite",
  "description": "Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.",
  "parameters": {
    "type": "object",
    "properties": {
      "database": {
        "type": "string",
        "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BatchWriteRequest"
      }
    },
    "required": [
      "database"
    ],
    "$defs": {
      "BatchWriteRequest": {
        "description": "The request for Firestore.BatchWrite.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels associated with this batch write.",
            "type": "object"
          },
          "writes": {
            "description": "The writes to apply. Method does not apply writes atomically and does not guarantee ordering. Each write succeeds or fails independently. You cannot write to the same document more than once per request.",
            "items": {
              "$ref": "#/$defs/Write"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Write": {
        "description": "A write on a document.",
        "properties": {
          "currentDocument": {
            "$ref": "#/$defs/Precondition"
          },
          "delete": {
            "description": "A document name to delete. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "type": "string"
          },
          "transform": {
            "$ref": "#/$defs/DocumentTransform"
          },
          "update": {
            "$ref": "#/$defs/Document"
          },
          "updateMask": {
            "$ref": "#/$defs/DocumentMask"
          },
          "updateTransforms": {
            "description": "The transforms to perform after update. This field can be set only when the operation is `update`. If present, this write is equivalent to performing `update` and `transform` to the same document atomically and in order.",
            "items": {
              "$ref": "#/$defs/FieldTransform"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Precondition": {
        "description": "A precondition on a document, used for conditional operations.",
        "properties": {
          "exists": {
            "description": "When set to `true`, the target document must exist. When set to `false`, the target document must not exist.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "When set, the target document must exist and have been last updated at that time. Timestamp must be microsecond aligned.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentTransform": {
        "description": "A transformation of a document.",
        "properties": {
          "document": {
            "description": "The name of the document to transform.",
            "type": "string"
          },
          "fieldTransforms": {
            "description": "The list of transformations to apply to the fields of the document, in order. This must not be empty.",
            "items": {
              "$ref": "#/$defs/FieldTransform"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FieldTransform": {
        "description": "A transformation of a field of the document.",
        "properties": {
          "appendMissingElements": {
            "$ref": "#/$defs/ArrayValue"
          },
          "fieldPath": {
            "description": "The path of the field. See Document.fields for the field path syntax reference.",
            "type": "string"
          },
          "increment": {
            "$ref": "#/$defs/Value"
          },
          "maximum": {
            "$ref": "#/$defs/Value"
          },
          "minimum": {
            "$ref": "#/$defs/Value"
          },
          "removeAllFromArray": {
            "$ref": "#/$defs/ArrayValue"
          },
          "setToServerValue": {
            "description": "Sets the field to the given server value.",
            "enum": [
              "SERVER_VALUE_UNSPECIFIED",
              "REQUEST_TIME"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArrayValue": {
        "description": "An array value.",
        "properties": {
          "values": {
            "description": "Values in the array.",
            "items": {
              "$ref": "#/$defs/Value"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Value": {
        "description": "A message that can hold any of the supported value types.",
        "properties": {
          "arrayValue": {
            "$ref": "#/$defs/ArrayValue"
          },
          "booleanValue": {
            "description": "A boolean value.",
            "type": "boolean"
          },
          "bytesValue": {
            "description": "A bytes value. Must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes are considered by queries.",
            "format": "byte",
            "type": "string"
          },
          "doubleValue": {
            "description": "A double value.",
            "format": "double",
            "type": "number"
          },
          "geoPointValue": {
            "$ref": "#/$defs/LatLng"
          },
          "integerValue": {
            "description": "An integer value.",
            "format": "int64",
            "type": "string"
          },
          "mapValue": {
            "$ref": "#/$defs/MapValue"
          },
          "nullValue": {
            "description": "A null value.",
            "enum": [
              "NULL_VALUE"
            ],
            "type": "string"
          },
          "referenceValue": {
            "description": "A reference to a document. For example: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "type": "string"
          },
          "stringValue": {
            "description": "A string value. The string, represented as UTF-8, must not exceed 1 MiB - 89 bytes. Only the first 1,500 bytes of the UTF-8 representation are considered by queries.",
            "type": "string"
          },
          "timestampValue": {
            "description": "A timestamp value. Precise only to microseconds. When stored, any additional precision is rounded down.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "MapValue": {
        "description": "A map value.",
        "properties": {
          "fields": {
            "additionalProperties": {
              "$ref": "#/$defs/Value"
            },
            "description": "The map's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Document": {
        "description": "A Firestore document. Must not exceed 1 MiB - 4 bytes.",
        "properties": {
          "createTime": {
            "description": "Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.",
            "format": "google-datetime",
            "type": "string"
          },
          "fields": {
            "additionalProperties": {
              "$ref": "#/$defs/Value"
            },
            "description": "The document's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The field names, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. Field paths may be used in other contexts to refer to structured fields defined here. For `map_value`, the field path is represented by a dot-delimited (`.`) string of segments. Each segment is either a simple field name (defined below) or a quoted field name. For example, the structured field `\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be represented by the field path `` foo.`x&y` ``. A simple field name contains only characters `a` to `z`, `A` to `Z`, `0` to `9`, or `_`, and must not start with `0` to `9`. For example, `foo_bar_17`. A quoted field name starts and ends with `` ` `` and may contain any character. Some characters, including `` ` ``, must be escaped using a `\\`. For example, `` `x&y` `` represents `x&y` and `` `bak\\`tik` `` represents `` bak`tik ``.",
            "type": "object"
          },
          "name": {
            "description": "The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentMask": {
        "description": "A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.",
        "properties": {
          "fieldPaths": {
            "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://firestore.googleapis.com//v1beta1/{database}/documents:batchWrite{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response from Firestore.BatchWrite.",
        "**Key properties:**",
        {
          "$ul": [
            "**status**: The status of applying the writes. This i-th write status corresponds to the i-th write in the request.",
            "**writeResults**: The result of applying the writes. This i-th write result corresponds to the i-th write in the request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
