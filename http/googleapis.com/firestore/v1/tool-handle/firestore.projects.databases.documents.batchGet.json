{
  "name": "firestore_projects_databases_documents_batchGet",
  "description": "Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.",
  "parameters": {
    "type": "object",
    "properties": {
      "database": {
        "type": "string",
        "description": "Required. The database name. In the format: `projects/{project_id}/databases/{database_id}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BatchGetDocumentsRequest"
      }
    },
    "required": [
      "database"
    ],
    "$defs": {
      "BatchGetDocumentsRequest": {
        "description": "The request for Firestore.BatchGetDocuments.",
        "properties": {
          "documents": {
            "description": "The names of the documents to retrieve. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`. The request will fail if any of the document is not a child resource of the given `database`. Duplicate names will be elided.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mask": {
            "$ref": "#/$defs/DocumentMask"
          },
          "newTransaction": {
            "$ref": "#/$defs/TransactionOptions"
          },
          "readTime": {
            "description": "Reads documents as they were at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "format": "google-datetime",
            "type": "string"
          },
          "transaction": {
            "description": "Reads documents in a transaction.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentMask": {
        "description": "A set of field paths on a document. Used to restrict a get or update operation on a document to a subset of its fields. This is different from standard field masks, as this is always scoped to a Document, and takes in account the dynamic nature of Value.",
        "properties": {
          "fieldPaths": {
            "description": "The list of field paths in the mask. See Document.fields for a field path syntax reference.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransactionOptions": {
        "description": "Options for creating a new transaction.",
        "properties": {
          "readOnly": {
            "$ref": "#/$defs/ReadOnly"
          },
          "readWrite": {
            "$ref": "#/$defs/ReadWrite"
          }
        },
        "type": "object"
      },
      "ReadOnly": {
        "description": "Options for a transaction that can only be used to read documents.",
        "properties": {
          "readTime": {
            "description": "Reads documents at the given time. This must be a microsecond precision timestamp within the past one hour, or if Point-in-Time Recovery is enabled, can additionally be a whole minute timestamp within the past 7 days.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReadWrite": {
        "description": "Options for a transaction that can be used to read and write documents. Firestore does not allow 3rd party auth requests to create read-write. transactions.",
        "properties": {
          "retryTransaction": {
            "description": "An optional transaction to retry.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://firestore.googleapis.com//v1/{database}/documents:batchGet{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The streamed response for Firestore.BatchGetDocuments.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**found**: A Firestore document. Must not exceed 1 MiB - 4 bytes.",
              {
                "$ul": [
                  "**createTime**: Output only. The time at which the document was created. This value increases monotonically when a document is deleted then recreated. It can also be compared to values from other documents and the `read_time` of a query.",
                  "**fields**: The document's fields. The map keys represent field names. Field names matching the regular expression `__.*__` are reserved. Reserved field names are forbidden except in certain documented contexts. The field names, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty. Field paths may be used in other contexts to refer to structured fields defined here. For `map_value`, the field path is represented by a dot-delimited (`.`) string of segments. Each segment is either a simple field name (defined below) or a quoted field name. For example, the structured field `\"foo\" : { map_value: { \"x&y\" : { string_value: \"hello\" }}}` would be represented by the field path `` foo.`x&y` ``. A simple field name contains only characters `a` to `z`, `A` to `Z`, `0` to `9`, or `_`, and must not start with `0` to `9`. For example, `foo_bar_17`. A quoted field name starts and ends with `` ` `` and may contain any character. Some characters, including `` ` ``, must be escaped using a `\\`. For example, `` `x&y` `` represents `x&y` and `` `bak\\`tik` `` represents `` bak`tik ``.",
                  "**name**: The resource name of the document, for example `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
                  "**updateTime**: Output only. The time at which the document was last changed. This value is initially set to the `create_time` then increases monotonically with each change to the document. It can also be compared to values from other documents and the `read_time` of a query."
                ]
              }
            ],
            "**missing**: A document name that was requested but does not exist. In the format: `projects/{project_id}/databases/{database_id}/documents/{document_path}`.",
            "**readTime**: The time at which the document was read. This may be monotically increasing, in this case the previous documents in the result stream are guaranteed not to have changed between their read_time and this one.",
            "**transaction**: The transaction that was started as part of this request. Will only be set in the first response, and only if BatchGetDocumentsRequest.new_transaction was set in the request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
