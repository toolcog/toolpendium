{
  "name": "tpu_projects_locations_nodes_create",
  "description": "Creates a node.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource name."
      },
      "nodeId": {
        "type": "string",
        "description": "The unqualified resource name."
      },
      "requestId": {
        "type": "string",
        "description": "Idempotent request UUID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Node"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Node": {
        "description": "A TPU instance.",
        "properties": {
          "acceleratorType": {
            "description": "Required. The type of hardware accelerators associated with this node.",
            "type": "string"
          },
          "apiVersion": {
            "description": "Output only. The API version that created this Node.",
            "enum": [
              "API_VERSION_UNSPECIFIED",
              "V1_ALPHA1",
              "V1",
              "V2_ALPHA1"
            ],
            "readOnly": true,
            "type": "string"
          },
          "cidrBlock": {
            "description": "The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time when the node was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The user-supplied description of the TPU. Maximum of 512 characters.",
            "type": "string"
          },
          "health": {
            "description": "The health status of the TPU node.",
            "enum": [
              "HEALTH_UNSPECIFIED",
              "HEALTHY",
              "DEPRECATED_UNHEALTHY",
              "TIMEOUT",
              "UNHEALTHY_TENSORFLOW",
              "UNHEALTHY_MAINTENANCE"
            ],
            "type": "string"
          },
          "healthDescription": {
            "description": "Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.",
            "readOnly": true,
            "type": "string"
          },
          "ipAddress": {
            "deprecated": true,
            "description": "Output only. DEPRECATED! Use network_endpoints instead. The network address for the TPU Node as visible to Compute Engine instances.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource labels to represent user-provided metadata.",
            "type": "object"
          },
          "name": {
            "description": "Output only. Immutable. The name of the TPU",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "description": "The name of a network they wish to peer the TPU node to. It must be a preexisting Compute Engine network inside of the project on which this API has been activated. If none is provided, \"default\" will be used.",
            "type": "string"
          },
          "networkEndpoints": {
            "description": "Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that Tensorflow clients of the node reach out to the 0th entry in this map first.",
            "items": {
              "$ref": "#/$defs/NetworkEndpoint"
            },
            "readOnly": true,
            "type": "array"
          },
          "port": {
            "deprecated": true,
            "description": "Output only. DEPRECATED! Use network_endpoints instead. The network port for the TPU Node as visible to Compute Engine instances.",
            "type": "string"
          },
          "schedulingConfig": {
            "$ref": "#/$defs/SchedulingConfig"
          },
          "serviceAccount": {
            "description": "Output only. The service account used to run the tensor flow services within the node. To share resources, including Google Cloud Storage data, with the Tensorflow job running in the Node, this account must have permissions to that data.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state for the TPU Node.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "RESTARTING",
              "REIMAGING",
              "DELETING",
              "REPAIRING",
              "STOPPED",
              "STOPPING",
              "STARTING",
              "PREEMPTED",
              "TERMINATED",
              "HIDING",
              "HIDDEN",
              "UNHIDING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "symptoms": {
            "description": "Output only. The Symptoms that have occurred to the TPU Node.",
            "items": {
              "$ref": "#/$defs/Symptom"
            },
            "readOnly": true,
            "type": "array"
          },
          "tensorflowVersion": {
            "description": "Required. The version of Tensorflow running in the Node.",
            "type": "string"
          },
          "useServiceNetworking": {
            "description": "Whether the VPC peering for the node is set up through Service Networking API. The VPC Peering should be set up before provisioning the node. If this field is set, cidr_block field should not be specified. If the network, that you want to peer the TPU Node to, is Shared VPC networks, the node must be created with this this field enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NetworkEndpoint": {
        "description": "A network endpoint over which a TPU worker can be reached.",
        "properties": {
          "ipAddress": {
            "description": "The IP address of this network endpoint.",
            "type": "string"
          },
          "port": {
            "description": "The port of this network endpoint.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SchedulingConfig": {
        "description": "Sets the scheduling options for this node.",
        "properties": {
          "preemptible": {
            "description": "Defines whether the node is preemptible.",
            "type": "boolean"
          },
          "reserved": {
            "description": "Whether the node is created under a reservation.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Symptom": {
        "description": "A Symptom instance.",
        "properties": {
          "createTime": {
            "description": "Timestamp when the Symptom is created.",
            "format": "google-datetime",
            "type": "string"
          },
          "details": {
            "description": "Detailed information of the current Symptom.",
            "type": "string"
          },
          "symptomType": {
            "description": "Type of the Symptom.",
            "enum": [
              "SYMPTOM_TYPE_UNSPECIFIED",
              "LOW_MEMORY",
              "OUT_OF_MEMORY",
              "EXECUTE_TIMED_OUT",
              "MESH_BUILD_FAIL",
              "HBM_OUT_OF_MEMORY",
              "PROJECT_ABUSE"
            ],
            "type": "string"
          },
          "workerId": {
            "description": "A string used to uniquely distinguish a worker within a TPU node.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://tpu.googleapis.com//v1alpha1/{parent}/nodes{?nodeId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
