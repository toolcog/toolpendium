{
  "name": "tpu_projects_locations_queuedResources_create",
  "description": "Creates a QueuedResource TPU instance.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource name."
      },
      "queuedResourceId": {
        "type": "string",
        "description": "Optional. The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. Idempotent request UUID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/QueuedResource"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "QueuedResource": {
        "description": "A QueuedResource represents a request for resources that will be placed in a queue and fulfilled when the necessary resources are available.",
        "properties": {
          "createTime": {
            "description": "Output only. The time when the QueuedResource was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "guaranteed": {
            "$ref": "#/$defs/Guaranteed"
          },
          "name": {
            "description": "Output only. Immutable. The name of the QueuedResource.",
            "readOnly": true,
            "type": "string"
          },
          "queueingPolicy": {
            "$ref": "#/$defs/QueueingPolicy"
          },
          "reservationName": {
            "description": "Optional. Name of the reservation in which the resource should be provisioned. Format: projects/{project}/locations/{zone}/reservations/{reservation}",
            "type": "string"
          },
          "spot": {
            "$ref": "#/$defs/Spot"
          },
          "state": {
            "$ref": "#/$defs/QueuedResourceState"
          },
          "tpu": {
            "$ref": "#/$defs/Tpu"
          }
        },
        "type": "object"
      },
      "Guaranteed": {
        "description": "Guaranteed tier definition.",
        "properties": {
          "minDuration": {
            "description": "Optional. Defines the minimum duration of the guarantee. If specified, the requested resources will only be provisioned if they can be allocated for at least the given duration.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "QueueingPolicy": {
        "description": "Defines the policy of the QueuedRequest.",
        "properties": {
          "validAfterDuration": {
            "description": "Optional. A relative time after which resources may be created.",
            "format": "google-duration",
            "type": "string"
          },
          "validAfterTime": {
            "description": "Optional. An absolute time after which resources may be created.",
            "format": "google-datetime",
            "type": "string"
          },
          "validInterval": {
            "$ref": "#/$defs/Interval"
          },
          "validUntilDuration": {
            "description": "Optional. A relative time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.",
            "format": "google-duration",
            "type": "string"
          },
          "validUntilTime": {
            "description": "Optional. An absolute time after which resources should not be created. If the request cannot be fulfilled by this time the request will be failed.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Interval": {
        "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
        "properties": {
          "endTime": {
            "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
            "format": "google-datetime",
            "type": "string"
          },
          "startTime": {
            "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Spot": {
        "description": "Spot tier definition.",
        "properties": {},
        "type": "object"
      },
      "QueuedResourceState": {
        "description": "QueuedResourceState defines the details of the QueuedResource request.",
        "properties": {
          "acceptedData": {
            "$ref": "#/$defs/AcceptedData"
          },
          "activeData": {
            "$ref": "#/$defs/ActiveData"
          },
          "creatingData": {
            "$ref": "#/$defs/CreatingData"
          },
          "deletingData": {
            "$ref": "#/$defs/DeletingData"
          },
          "failedData": {
            "$ref": "#/$defs/FailedData"
          },
          "provisioningData": {
            "$ref": "#/$defs/ProvisioningData"
          },
          "state": {
            "description": "Output only. State of the QueuedResource request.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACCEPTED",
              "PROVISIONING",
              "FAILED",
              "DELETING",
              "ACTIVE",
              "SUSPENDING",
              "SUSPENDED",
              "WAITING_FOR_RESOURCES"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateInitiator": {
            "description": "Output only. The initiator of the QueuedResources's current state. Used to indicate whether the SUSPENDING/SUSPENDED state was initiated by the user or the service.",
            "enum": [
              "STATE_INITIATOR_UNSPECIFIED",
              "USER",
              "SERVICE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "suspendedData": {
            "$ref": "#/$defs/SuspendedData"
          },
          "suspendingData": {
            "$ref": "#/$defs/SuspendingData"
          }
        },
        "type": "object"
      },
      "AcceptedData": {
        "description": "Further data for the accepted state.",
        "properties": {},
        "type": "object"
      },
      "ActiveData": {
        "description": "Further data for the active state.",
        "properties": {},
        "type": "object"
      },
      "CreatingData": {
        "description": "Further data for the creating state.",
        "properties": {},
        "type": "object"
      },
      "DeletingData": {
        "description": "Further data for the deleting state.",
        "properties": {},
        "type": "object"
      },
      "FailedData": {
        "description": "Further data for the failed state.",
        "properties": {
          "error": {
            "$ref": "#/$defs/Status"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProvisioningData": {
        "description": "Further data for the provisioning state.",
        "properties": {},
        "type": "object"
      },
      "SuspendedData": {
        "description": "Further data for the suspended state.",
        "properties": {},
        "type": "object"
      },
      "SuspendingData": {
        "description": "Further data for the suspending state.",
        "properties": {},
        "type": "object"
      },
      "Tpu": {
        "description": "Details of the TPU resource(s) being requested.",
        "properties": {
          "nodeSpec": {
            "description": "Optional. The TPU node(s) being requested.",
            "items": {
              "$ref": "#/$defs/NodeSpec"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeSpec": {
        "description": "Details of the TPU node(s) being requested. Users can request either a single node or multiple nodes. NodeSpec provides the specification for node(s) to be created.",
        "properties": {
          "multisliceParams": {
            "$ref": "#/$defs/MultisliceParams"
          },
          "node": {
            "$ref": "#/$defs/Node"
          },
          "nodeId": {
            "description": "Optional. The unqualified resource name. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when requesting a single node. In case of multislice requests, multislice_params must be populated instead.",
            "type": "string"
          },
          "parent": {
            "description": "Required. The parent resource name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MultisliceParams": {
        "description": "Parameters to specify for multislice QueuedResource requests. This message must be populated in case of multislice requests instead of node_id.",
        "properties": {
          "nodeCount": {
            "description": "Required. Number of nodes with this spec. The system will attempt to provison \"node_count\" nodes as part of the request. This needs to be > 1.",
            "format": "int32",
            "type": "integer"
          },
          "nodeIdPrefix": {
            "description": "Optional. Prefix of node_ids in case of multislice request. Should follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3 and node_id_prefix = \"np\", node ids of nodes created will be \"np-0\", \"np-1\", \"np-2\". If this field is not provided we use queued_resource_id as the node_id_prefix.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Node": {
        "description": "A TPU instance.",
        "properties": {
          "acceleratorConfig": {
            "$ref": "#/$defs/AcceleratorConfig"
          },
          "acceleratorType": {
            "description": "Optional. The type of hardware accelerators associated with this node.",
            "type": "string"
          },
          "apiVersion": {
            "description": "Output only. The API version that created this Node.",
            "enum": [
              "API_VERSION_UNSPECIFIED",
              "V1_ALPHA1",
              "V1",
              "V2_ALPHA1",
              "V2"
            ],
            "readOnly": true,
            "type": "string"
          },
          "cidrBlock": {
            "description": "The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time when the node was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dataDisks": {
            "description": "The additional data disks for the Node.",
            "items": {
              "$ref": "#/$defs/AttachedDisk"
            },
            "type": "array"
          },
          "description": {
            "description": "The user-supplied description of the TPU. Maximum of 512 characters.",
            "type": "string"
          },
          "health": {
            "description": "The health status of the TPU node.",
            "enum": [
              "HEALTH_UNSPECIFIED",
              "HEALTHY",
              "TIMEOUT",
              "UNHEALTHY_TENSORFLOW",
              "UNHEALTHY_MAINTENANCE"
            ],
            "type": "string"
          },
          "healthDescription": {
            "description": "Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Output only. The unique identifier for the TPU Node.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource labels to represent user-provided metadata.",
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script",
            "type": "object"
          },
          "multisliceNode": {
            "description": "Output only. Whether the Node belongs to a Multislice group.",
            "readOnly": true,
            "type": "boolean"
          },
          "name": {
            "description": "Output only. Immutable. The name of the TPU.",
            "readOnly": true,
            "type": "string"
          },
          "networkConfig": {
            "$ref": "#/$defs/NetworkConfig"
          },
          "networkEndpoints": {
            "description": "Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.",
            "items": {
              "$ref": "#/$defs/NetworkEndpoint"
            },
            "readOnly": true,
            "type": "array"
          },
          "queuedResource": {
            "description": "Output only. The qualified name of the QueuedResource that requested this Node.",
            "readOnly": true,
            "type": "string"
          },
          "runtimeVersion": {
            "description": "Required. The runtime version running in the Node.",
            "type": "string"
          },
          "schedulingConfig": {
            "$ref": "#/$defs/SchedulingConfig"
          },
          "serviceAccount": {
            "$ref": "#/$defs/ServiceAccount"
          },
          "shieldedInstanceConfig": {
            "$ref": "#/$defs/ShieldedInstanceConfig"
          },
          "state": {
            "description": "Output only. The current state for the TPU Node.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "RESTARTING",
              "REIMAGING",
              "DELETING",
              "REPAIRING",
              "STOPPED",
              "STOPPING",
              "STARTING",
              "PREEMPTED",
              "TERMINATED",
              "HIDING",
              "HIDDEN",
              "UNHIDING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "symptoms": {
            "description": "Output only. The Symptoms that have occurred to the TPU Node.",
            "items": {
              "$ref": "#/$defs/Symptom"
            },
            "readOnly": true,
            "type": "array"
          },
          "tags": {
            "description": "Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AcceleratorConfig": {
        "description": "A TPU accelerator configuration.",
        "properties": {
          "topology": {
            "description": "Required. Topology of TPU in chips.",
            "type": "string"
          },
          "type": {
            "description": "Required. Type of TPU.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "V2",
              "V3",
              "V4"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AttachedDisk": {
        "description": "A node-attached disk resource. Next ID: 8;",
        "properties": {
          "mode": {
            "description": "The mode in which to attach this disk. If not specified, the default is READ_WRITE mode. Only applicable to data_disks.",
            "enum": [
              "DISK_MODE_UNSPECIFIED",
              "READ_WRITE",
              "READ_ONLY"
            ],
            "type": "string"
          },
          "sourceDisk": {
            "description": "Specifies the full path to an existing disk. For example: \"projects/my-project/zones/us-central1-c/disks/my-disk\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkConfig": {
        "description": "Network related configurations.",
        "properties": {
          "canIpForward": {
            "description": "Allows the TPU node to send and receive packets with non-matching destination or source IPs. This is required if you plan to use the TPU workers to forward routes.",
            "type": "boolean"
          },
          "enableExternalIps": {
            "description": "Indicates that external IP addresses would be associated with the TPU workers. If set to false, the specified subnetwork or network should have Private Google Access enabled.",
            "type": "boolean"
          },
          "network": {
            "description": "The name of the network for the TPU node. It must be a preexisting Google Compute Engine network. If none is provided, \"default\" will be used.",
            "type": "string"
          },
          "queueCount": {
            "description": "Optional. Specifies networking queue count for TPU VM instance's network interface.",
            "format": "int32",
            "type": "integer"
          },
          "subnetwork": {
            "description": "The name of the subnetwork for the TPU node. It must be a preexisting Google Compute Engine subnetwork. If none is provided, \"default\" will be used.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkEndpoint": {
        "description": "A network endpoint over which a TPU worker can be reached.",
        "properties": {
          "accessConfig": {
            "$ref": "#/$defs/AccessConfig"
          },
          "ipAddress": {
            "description": "The internal IP address of this network endpoint.",
            "type": "string"
          },
          "port": {
            "description": "The port of this network endpoint.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AccessConfig": {
        "description": "An access config attached to the TPU worker.",
        "properties": {
          "externalIp": {
            "description": "Output only. An external IP address associated with the TPU worker.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SchedulingConfig": {
        "description": "Sets the scheduling options for this node.",
        "properties": {
          "preemptible": {
            "description": "Defines whether the node is preemptible.",
            "type": "boolean"
          },
          "reserved": {
            "description": "Whether the node is created under a reservation.",
            "type": "boolean"
          },
          "spot": {
            "description": "Optional. Defines whether the node is Spot VM.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ServiceAccount": {
        "description": "A service account.",
        "properties": {
          "email": {
            "description": "Email address of the service account. If empty, default Compute service account will be used.",
            "type": "string"
          },
          "scope": {
            "description": "The list of scopes to be made available for this service account. If empty, access to all Cloud APIs will be allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ShieldedInstanceConfig": {
        "description": "A set of Shielded Instance options.",
        "properties": {
          "enableSecureBoot": {
            "description": "Defines whether the instance has Secure Boot enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Symptom": {
        "description": "A Symptom instance.",
        "properties": {
          "createTime": {
            "description": "Timestamp when the Symptom is created.",
            "format": "google-datetime",
            "type": "string"
          },
          "details": {
            "description": "Detailed information of the current Symptom.",
            "type": "string"
          },
          "symptomType": {
            "description": "Type of the Symptom.",
            "enum": [
              "SYMPTOM_TYPE_UNSPECIFIED",
              "LOW_MEMORY",
              "OUT_OF_MEMORY",
              "EXECUTE_TIMED_OUT",
              "MESH_BUILD_FAIL",
              "HBM_OUT_OF_MEMORY",
              "PROJECT_ABUSE"
            ],
            "type": "string"
          },
          "workerId": {
            "description": "A string used to uniquely distinguish a worker within a TPU node.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://tpu.googleapis.com//v2/{parent}/queuedResources{?queuedResourceId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
