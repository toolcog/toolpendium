{
  "name": "dlp_projects_locations_discoveryConfigs_create",
  "description": "Creates a config for discovery to scan and profile storage.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Parent resource name. The format of this value is as follows: `projects/`PROJECT_ID`/locations/`LOCATION_ID The following example `parent` string specifies a parent project with the identifier `example-project`, and specifies the `europe-west3` location for processing data: parent=projects/example-project/locations/europe-west3"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GooglePrivacyDlpV2CreateDiscoveryConfigRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GooglePrivacyDlpV2CreateDiscoveryConfigRequest": {
        "description": "Request message for CreateDiscoveryConfig.",
        "properties": {
          "configId": {
            "description": "The config ID can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.",
            "type": "string"
          },
          "discoveryConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryConfig"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryConfig": {
        "description": "Configuration for discovery to scan resources for profile generation. Only one discovery configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).",
        "properties": {
          "actions": {
            "description": "Actions to execute at the completion of scanning.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2DataProfileAction"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Output only. The creation timestamp of a DiscoveryConfig.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Display name (max 100 chars)",
            "type": "string"
          },
          "errors": {
            "description": "Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2Error"
            },
            "readOnly": true,
            "type": "array"
          },
          "inspectTemplates": {
            "description": "Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "lastRunTime": {
            "description": "Output only. The timestamp of the last time this config was executed.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.",
            "type": "string"
          },
          "orgConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2OrgConfig"
          },
          "status": {
            "description": "Required. A status for this configuration.",
            "enum": [
              "STATUS_UNSPECIFIED",
              "RUNNING",
              "PAUSED"
            ],
            "type": "string"
          },
          "targets": {
            "description": "Target to match against for determining what to scan and how frequently.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryTarget"
            },
            "type": "array"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of a DiscoveryConfig.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DataProfileAction": {
        "description": "A task to execute when a data profile has been generated.",
        "properties": {
          "exportData": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Export"
          },
          "pubSubNotification": {
            "$ref": "#/$defs/GooglePrivacyDlpV2PubSubNotification"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Export": {
        "description": "If set, the detailed data profiles will be persisted to the location of your choice whenever updated.",
        "properties": {
          "profileTable": {
            "$ref": "#/$defs/GooglePrivacyDlpV2BigQueryTable"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2BigQueryTable": {
        "description": "Message defining the location of a BigQuery table. A table is uniquely identified by its project_id, dataset_id, and table_name. Within a query a table is often referenced with a string in the format of: `:.` or `..`.",
        "properties": {
          "datasetId": {
            "description": "Dataset ID of the table.",
            "type": "string"
          },
          "projectId": {
            "description": "The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.",
            "type": "string"
          },
          "tableId": {
            "description": "Name of the table.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2PubSubNotification": {
        "description": "Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.",
        "properties": {
          "detailOfMessage": {
            "description": "How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).",
            "enum": [
              "DETAIL_LEVEL_UNSPECIFIED",
              "TABLE_PROFILE",
              "RESOURCE_NAME"
            ],
            "type": "string"
          },
          "event": {
            "description": "The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.",
            "enum": [
              "EVENT_TYPE_UNSPECIFIED",
              "NEW_PROFILE",
              "CHANGED_PROFILE",
              "SCORE_INCREASED",
              "ERROR_CHANGED"
            ],
            "type": "string"
          },
          "pubsubCondition": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DataProfilePubSubCondition"
          },
          "topic": {
            "description": "Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DataProfilePubSubCondition": {
        "description": "A condition for determining whether a Pub/Sub should be triggered.",
        "properties": {
          "expressions": {
            "$ref": "#/$defs/GooglePrivacyDlpV2PubSubExpressions"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2PubSubExpressions": {
        "description": "An expression, consisting of an operator and conditions.",
        "properties": {
          "conditions": {
            "description": "Conditions to apply to the expression.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2PubSubCondition"
            },
            "type": "array"
          },
          "logicalOperator": {
            "description": "The operator to apply to the collection of conditions.",
            "enum": [
              "LOGICAL_OPERATOR_UNSPECIFIED",
              "OR",
              "AND"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2PubSubCondition": {
        "description": "A condition consisting of a value.",
        "properties": {
          "minimumRiskScore": {
            "description": "The minimum data risk score that triggers the condition.",
            "enum": [
              "PROFILE_SCORE_BUCKET_UNSPECIFIED",
              "HIGH",
              "MEDIUM_OR_HIGH"
            ],
            "type": "string"
          },
          "minimumSensitivityScore": {
            "description": "The minimum sensitivity level that triggers the condition.",
            "enum": [
              "PROFILE_SCORE_BUCKET_UNSPECIFIED",
              "HIGH",
              "MEDIUM_OR_HIGH"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Error": {
        "description": "Details information about an error encountered during job execution or the results of an unsuccessful activation of the JobTrigger.",
        "properties": {
          "details": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "timestamps": {
            "description": "The times the error occurred. List includes the oldest timestamp and the last 9 timestamps.",
            "items": {
              "format": "google-datetime",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2OrgConfig": {
        "description": "Project and scan location information. Only set when the parent is an org.",
        "properties": {
          "location": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryStartingLocation"
          },
          "projectId": {
            "description": "The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryStartingLocation": {
        "description": "The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.",
        "properties": {
          "folderId": {
            "description": "The ID of the Folder within an organization to scan.",
            "format": "int64",
            "type": "string"
          },
          "organizationId": {
            "description": "The ID of an organization to scan.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryTarget": {
        "description": "Target used to match against for Discovery.",
        "properties": {
          "bigQueryTarget": {
            "$ref": "#/$defs/GooglePrivacyDlpV2BigQueryDiscoveryTarget"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2BigQueryDiscoveryTarget": {
        "description": "Target used to match against for discovery with BigQuery tables",
        "properties": {
          "cadence": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryGenerationCadence"
          },
          "conditions": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryBigQueryConditions"
          },
          "disabled": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Disabled"
          },
          "filter": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryBigQueryFilter"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryGenerationCadence": {
        "description": "What must take place for a profile to be updated and how frequently it should occur. New tables are scanned as quickly as possible depending on system capacity.",
        "properties": {
          "schemaModifiedCadence": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoverySchemaModifiedCadence"
          },
          "tableModifiedCadence": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DiscoveryTableModifiedCadence"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoverySchemaModifiedCadence": {
        "description": "The cadence at which to update data profiles when a schema is modified.",
        "properties": {
          "frequency": {
            "description": "How frequently profiles may be updated when schemas are modified. Defaults to monthly.",
            "enum": [
              "UPDATE_FREQUENCY_UNSPECIFIED",
              "UPDATE_FREQUENCY_NEVER",
              "UPDATE_FREQUENCY_DAILY",
              "UPDATE_FREQUENCY_MONTHLY"
            ],
            "type": "string"
          },
          "types": {
            "description": "The type of events to consider when deciding if the table's schema has been modified and should have the profile updated. Defaults to NEW_COLUMNS.",
            "items": {
              "enum": [
                "SCHEMA_MODIFICATION_UNSPECIFIED",
                "SCHEMA_NEW_COLUMNS",
                "SCHEMA_REMOVED_COLUMNS"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryTableModifiedCadence": {
        "description": "The cadence at which to update data profiles when a table is modified.",
        "properties": {
          "frequency": {
            "description": "How frequently data profiles can be updated when tables are modified. Defaults to never.",
            "enum": [
              "UPDATE_FREQUENCY_UNSPECIFIED",
              "UPDATE_FREQUENCY_NEVER",
              "UPDATE_FREQUENCY_DAILY",
              "UPDATE_FREQUENCY_MONTHLY"
            ],
            "type": "string"
          },
          "types": {
            "description": "The type of events to consider when deciding if the table has been modified and should have the profile updated. Defaults to MODIFIED_TIMESTAMP.",
            "items": {
              "enum": [
                "TABLE_MODIFICATION_UNSPECIFIED",
                "TABLE_MODIFIED_TIMESTAMP"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryBigQueryConditions": {
        "description": "Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).",
        "properties": {
          "createdAfter": {
            "description": "BigQuery table must have been created after this date. Used to avoid backfilling.",
            "format": "google-datetime",
            "type": "string"
          },
          "orConditions": {
            "$ref": "#/$defs/GooglePrivacyDlpV2OrConditions"
          },
          "typeCollection": {
            "description": "Restrict discovery to categories of table types.",
            "enum": [
              "BIG_QUERY_COLLECTION_UNSPECIFIED",
              "BIG_QUERY_COLLECTION_ALL_TYPES",
              "BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES"
            ],
            "type": "string"
          },
          "types": {
            "$ref": "#/$defs/GooglePrivacyDlpV2BigQueryTableTypes"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2OrConditions": {
        "description": "There is an OR relationship between these attributes. They are used to determine if a table should be scanned or not in Discovery.",
        "properties": {
          "minAge": {
            "description": "Minimum age a table must have before Cloud DLP can profile it. Value must be 1 hour or greater.",
            "format": "google-duration",
            "type": "string"
          },
          "minRowCount": {
            "description": "Minimum number of rows that should be present before Cloud DLP profiles a table",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2BigQueryTableTypes": {
        "description": "The types of BigQuery tables supported by Cloud DLP.",
        "properties": {
          "types": {
            "description": "A set of BigQuery table types.",
            "items": {
              "enum": [
                "BIG_QUERY_TABLE_TYPE_UNSPECIFIED",
                "BIG_QUERY_TABLE_TYPE_TABLE",
                "BIG_QUERY_TABLE_TYPE_EXTERNAL_BIG_LAKE"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Disabled": {
        "description": "Do not profile the tables.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2DiscoveryBigQueryFilter": {
        "description": "Determines what tables will have profiles generated within an organization or project. Includes the ability to filter by regular expression patterns on project ID, dataset ID, and table ID.",
        "properties": {
          "otherTables": {
            "$ref": "#/$defs/GooglePrivacyDlpV2AllOtherBigQueryTables"
          },
          "tables": {
            "$ref": "#/$defs/GooglePrivacyDlpV2BigQueryTableCollection"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2AllOtherBigQueryTables": {
        "description": "Catch-all for all other tables not specified by other filters. Should always be last, except for single-table configurations, which will only have a TableReference target.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2BigQueryTableCollection": {
        "description": "Specifies a collection of BigQuery tables. Used for Discovery.",
        "properties": {
          "includeRegexes": {
            "$ref": "#/$defs/GooglePrivacyDlpV2BigQueryRegexes"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2BigQueryRegexes": {
        "description": "A collection of regular expressions to determine what tables to match against.",
        "properties": {
          "patterns": {
            "description": "A single BigQuery regular expression pattern to match against one or more tables, datasets, or projects that contain BigQuery tables.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2BigQueryRegex"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2BigQueryRegex": {
        "description": "A pattern to match against one or more tables, datasets, or projects that contain BigQuery tables. At least one pattern must be specified. Regular expressions use RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found under the google/re2 repository on GitHub.",
        "properties": {
          "datasetIdRegex": {
            "description": "If unset, this property matches all datasets.",
            "type": "string"
          },
          "projectIdRegex": {
            "description": "For organizations, if unset, will match all projects. Has no effect for data profile configurations created within a project.",
            "type": "string"
          },
          "tableIdRegex": {
            "description": "If unset, this property matches all tables.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dlp.googleapis.com//v2/{parent}/discoveryConfigs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Configuration for discovery to scan resources for profile generation. Only one discovery configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).",
        "**Key properties:**",
        {
          "$ul": [
            "**actions**: Actions to execute at the completion of scanning.",
            "**createTime**: Output only. The creation timestamp of a DiscoveryConfig.",
            "**displayName**: Display name (max 100 chars)",
            "**errors**: Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.",
            "**inspectTemplates**: Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.",
            "**lastRunTime**: Output only. The timestamp of the last time this config was executed.",
            "**name**: Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.",
            [
              "**orgConfig**: Project and scan location information. Only set when the parent is an org.",
              {
                "$ul": [
                  [
                    "**location**: The location to begin a discovery scan. Denotes an organization ID or folder ID within an organization.",
                    {
                      "$ul": [
                        "**folderId**: The ID of the Folder within an organization to scan.",
                        "**organizationId**: The ID of an organization to scan."
                      ]
                    }
                  ],
                  "**projectId**: The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled."
                ]
              }
            ],
            "**status**: Required. A status for this configuration.",
            "**targets**: Target to match against for determining what to scan and how frequently.",
            "**updateTime**: Output only. The last update timestamp of a DiscoveryConfig."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
