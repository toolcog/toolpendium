{
  "name": "dlp_projects_locations_deidentifyTemplates_create",
  "description": "Creates a DeidentifyTemplate for reusing frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/sensitive-data-protection/docs/creating-templates-deid to learn more.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Parent resource name. The format of this value varies depending on the scope of the request (project or organization) and whether you have [specified a processing location](https://cloud.google.com/sensitive-data-protection/docs/specifying-location): + Projects scope, location specified: `projects/`PROJECT_ID`/locations/`LOCATION_ID + Projects scope, no location specified (defaults to global): `projects/`PROJECT_ID + Organizations scope, location specified: `organizations/`ORG_ID`/locations/`LOCATION_ID + Organizations scope, no location specified (defaults to global): `organizations/`ORG_ID The following example `parent` string specifies a parent project with the identifier `example-project`, and specifies the `europe-west3` location for processing data: parent=projects/example-project/locations/europe-west3"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GooglePrivacyDlpV2CreateDeidentifyTemplateRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GooglePrivacyDlpV2CreateDeidentifyTemplateRequest": {
        "description": "Request message for CreateDeidentifyTemplate.",
        "properties": {
          "deidentifyTemplate": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DeidentifyTemplate"
          },
          "locationId": {
            "description": "Deprecated. This field has no effect.",
            "type": "string"
          },
          "templateId": {
            "description": "The template id can contain uppercase and lowercase letters, numbers, and hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`. The maximum length is 100 characters. Can be empty to allow the system to generate one.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DeidentifyTemplate": {
        "description": "DeidentifyTemplates contains instructions on how to de-identify content. See https://cloud.google.com/sensitive-data-protection/docs/concepts-templates to learn more.",
        "properties": {
          "createTime": {
            "description": "Output only. The creation timestamp of an inspectTemplate.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deidentifyConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DeidentifyConfig"
          },
          "description": {
            "description": "Short description (max 256 chars).",
            "type": "string"
          },
          "displayName": {
            "description": "Display name (max 256 chars).",
            "type": "string"
          },
          "name": {
            "description": "Output only. The template name. The template will have one of the following formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of an inspectTemplate.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DeidentifyConfig": {
        "description": "The configuration that controls how the data will change.",
        "properties": {
          "imageTransformations": {
            "$ref": "#/$defs/GooglePrivacyDlpV2ImageTransformations"
          },
          "infoTypeTransformations": {
            "$ref": "#/$defs/GooglePrivacyDlpV2InfoTypeTransformations"
          },
          "recordTransformations": {
            "$ref": "#/$defs/GooglePrivacyDlpV2RecordTransformations"
          },
          "transformationErrorHandling": {
            "$ref": "#/$defs/GooglePrivacyDlpV2TransformationErrorHandling"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2ImageTransformations": {
        "description": "A type of transformation that is applied over images.",
        "properties": {
          "transforms": {
            "description": "List of transforms to make.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2ImageTransformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2ImageTransformation": {
        "description": "Configuration for determining how redaction of images should occur.",
        "properties": {
          "allInfoTypes": {
            "$ref": "#/$defs/GooglePrivacyDlpV2AllInfoTypes"
          },
          "allText": {
            "$ref": "#/$defs/GooglePrivacyDlpV2AllText"
          },
          "redactionColor": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Color"
          },
          "selectedInfoTypes": {
            "$ref": "#/$defs/GooglePrivacyDlpV2SelectedInfoTypes"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2AllInfoTypes": {
        "description": "Apply transformation to all findings.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2AllText": {
        "description": "Apply to all text.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2Color": {
        "description": "Represents a color in the RGB color space.",
        "properties": {
          "blue": {
            "description": "The amount of blue in the color as a value in the interval [0, 1].",
            "format": "float",
            "type": "number"
          },
          "green": {
            "description": "The amount of green in the color as a value in the interval [0, 1].",
            "format": "float",
            "type": "number"
          },
          "red": {
            "description": "The amount of red in the color as a value in the interval [0, 1].",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2SelectedInfoTypes": {
        "description": "Apply transformation to the selected info_types.",
        "properties": {
          "infoTypes": {
            "description": "Required. InfoTypes to apply the transformation to. Required. Provided InfoType must be unique within the ImageTransformations message.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2InfoType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2InfoType": {
        "description": "Type of information detected by the API.",
        "properties": {
          "name": {
            "description": "Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.",
            "type": "string"
          },
          "sensitivityScore": {
            "$ref": "#/$defs/GooglePrivacyDlpV2SensitivityScore"
          },
          "version": {
            "description": "Optional version name for this InfoType.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2SensitivityScore": {
        "description": "Score is calculated from of all elements in the data profile. A higher level means the data is more sensitive.",
        "properties": {
          "score": {
            "description": "The sensitivity score applied to the resource.",
            "enum": [
              "SENSITIVITY_SCORE_UNSPECIFIED",
              "SENSITIVITY_LOW",
              "SENSITIVITY_MODERATE",
              "SENSITIVITY_HIGH"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2InfoTypeTransformations": {
        "description": "A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.",
        "properties": {
          "transformations": {
            "description": "Required. Transformation for each infoType. Cannot specify more than one for a given infoType.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2InfoTypeTransformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2InfoTypeTransformation": {
        "description": "A transformation to apply to text that is identified as a specific info_type.",
        "properties": {
          "infoTypes": {
            "description": "InfoTypes to apply the transformation to. An empty list will cause this transformation to apply to all findings that correspond to infoTypes that were requested in `InspectConfig`.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2InfoType"
            },
            "type": "array"
          },
          "primitiveTransformation": {
            "$ref": "#/$defs/GooglePrivacyDlpV2PrimitiveTransformation"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2PrimitiveTransformation": {
        "description": "A rule for transforming a value.",
        "properties": {
          "bucketingConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2BucketingConfig"
          },
          "characterMaskConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CharacterMaskConfig"
          },
          "cryptoDeterministicConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoDeterministicConfig"
          },
          "cryptoHashConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoHashConfig"
          },
          "cryptoReplaceFfxFpeConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig"
          },
          "dateShiftConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2DateShiftConfig"
          },
          "fixedSizeBucketingConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2FixedSizeBucketingConfig"
          },
          "redactConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2RedactConfig"
          },
          "replaceConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2ReplaceValueConfig"
          },
          "replaceDictionaryConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2ReplaceDictionaryConfig"
          },
          "replaceWithInfoTypeConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2ReplaceWithInfoTypeConfig"
          },
          "timePartConfig": {
            "$ref": "#/$defs/GooglePrivacyDlpV2TimePartConfig"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2BucketingConfig": {
        "description": "Generalization function that buckets values based on ranges. The ranges and replacement values are dynamically provided by the user for custom behavior, such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data of type: number, long, string, timestamp. If the bound `Value` type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to learn more.",
        "properties": {
          "buckets": {
            "description": "Set of buckets. Ranges must be non-overlapping.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2Bucket"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Bucket": {
        "description": "Bucket is represented as a range, along with replacement values.",
        "properties": {
          "max": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          },
          "min": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          },
          "replacementValue": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Value": {
        "description": "Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.",
        "properties": {
          "booleanValue": {
            "description": "boolean",
            "type": "boolean"
          },
          "dateValue": {
            "$ref": "#/$defs/GoogleTypeDate"
          },
          "dayOfWeekValue": {
            "description": "day of week",
            "enum": [
              "DAY_OF_WEEK_UNSPECIFIED",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ],
            "type": "string"
          },
          "floatValue": {
            "description": "float",
            "format": "double",
            "type": "number"
          },
          "integerValue": {
            "description": "integer",
            "format": "int64",
            "type": "string"
          },
          "stringValue": {
            "description": "string",
            "type": "string"
          },
          "timeValue": {
            "$ref": "#/$defs/GoogleTypeTimeOfDay"
          },
          "timestampValue": {
            "description": "timestamp",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleTypeDate": {
        "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
        "properties": {
          "day": {
            "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
            "format": "int32",
            "type": "integer"
          },
          "month": {
            "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
            "format": "int32",
            "type": "integer"
          },
          "year": {
            "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleTypeTimeOfDay": {
        "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
        "properties": {
          "hours": {
            "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "description": "Minutes of hour of day. Must be from 0 to 59.",
            "format": "int32",
            "type": "integer"
          },
          "nanos": {
            "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2CharacterMaskConfig": {
        "description": "Partially mask a string by replacing a given number of characters with a fixed character. Masking can start from the beginning or end of the string. This can be used on data of any type (numbers, longs, and so on) and when de-identifying structured data we'll attempt to preserve the original data's type. (This allows you to take a long like 123 and modify it to a string like **3.",
        "properties": {
          "charactersToIgnore": {
            "description": "When masking a string, items in this list will be skipped when replacing characters. For example, if the input string is `555-555-5555` and you instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP returns `***-**5-5555`.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2CharsToIgnore"
            },
            "type": "array"
          },
          "maskingCharacter": {
            "description": "Character to use to mask the sensitive values—for example, `*` for an alphabetic string such as a name, or `0` for a numeric string such as ZIP code or credit card number. This string must have a length of 1. If not supplied, this value defaults to `*` for strings, and `0` for digits.",
            "type": "string"
          },
          "numberToMask": {
            "description": "Number of characters to mask. If not set, all matching chars will be masked. Skipped characters do not count towards this tally. If `number_to_mask` is negative, this denotes inverse masking. Cloud DLP masks all but a number of characters. For example, suppose you have the following values: - `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is `false` - `CharsToIgnore` includes `-` - Input string is `1234-5678-9012-3456` The resulting de-identified string is `****-****-****-3456`. Cloud DLP masks all but the last four characters. If `reverse_order` is `true`, all but the first four characters are masked as `1234-****-****-****`.",
            "format": "int32",
            "type": "integer"
          },
          "reverseOrder": {
            "description": "Mask characters in reverse order. For example, if `masking_character` is `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is `true`, then the string `12345` is masked as `12***`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2CharsToIgnore": {
        "description": "Characters to skip when doing deidentification of a value. These will be left alone and skipped.",
        "properties": {
          "charactersToSkip": {
            "description": "Characters to not transform when masking.",
            "type": "string"
          },
          "commonCharactersToIgnore": {
            "description": "Common characters to not transform when masking. Useful to avoid removing punctuation.",
            "enum": [
              "COMMON_CHARS_TO_IGNORE_UNSPECIFIED",
              "NUMERIC",
              "ALPHA_UPPER_CASE",
              "ALPHA_LOWER_CASE",
              "PUNCTUATION",
              "WHITESPACE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2CryptoDeterministicConfig": {
        "description": "Pseudonymization method that generates deterministic encryption for the given input. Outputs a base64 encoded representation of the encrypted output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.",
        "properties": {
          "context": {
            "$ref": "#/$defs/GooglePrivacyDlpV2FieldId"
          },
          "cryptoKey": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoKey"
          },
          "surrogateInfoType": {
            "$ref": "#/$defs/GooglePrivacyDlpV2InfoType"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2FieldId": {
        "description": "General identifier of a data field in a storage service.",
        "properties": {
          "name": {
            "description": "Name describing the field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2CryptoKey": {
        "description": "This is a data encryption key (DEK) (as opposed to a key encryption key (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the KEK to ensure an attacker cannot unwrap the DEK.",
        "properties": {
          "kmsWrapped": {
            "$ref": "#/$defs/GooglePrivacyDlpV2KmsWrappedCryptoKey"
          },
          "transient": {
            "$ref": "#/$defs/GooglePrivacyDlpV2TransientCryptoKey"
          },
          "unwrapped": {
            "$ref": "#/$defs/GooglePrivacyDlpV2UnwrappedCryptoKey"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2KmsWrappedCryptoKey": {
        "description": "Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. Authorization requires the following IAM permissions when sending a request to perform a crypto transformation using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see [Creating a wrapped key] (https://cloud.google.com/sensitive-data-protection/docs/create-wrapped-key). Note: When you use Cloud KMS for cryptographic operations, [charges apply](https://cloud.google.com/kms/pricing).",
        "properties": {
          "cryptoKeyName": {
            "description": "Required. The resource name of the KMS CryptoKey to use for unwrapping.",
            "type": "string"
          },
          "wrappedKey": {
            "description": "Required. The wrapped data crypto key.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2TransientCryptoKey": {
        "description": "Use this to have a random data crypto key generated. It will be discarded after the request finishes.",
        "properties": {
          "name": {
            "description": "Required. Name of the key. This is an arbitrary string used to differentiate different keys. A unique key is generated per name: two separate `TransientCryptoKey` protos share the same generated key if their names are the same. When the data crypto key is generated, this name is not used in any way (repeating the api call will result in a different key being generated).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2UnwrappedCryptoKey": {
        "description": "Using raw keys is prone to security risks due to accidentally leaking the key. Choose another type of key if possible.",
        "properties": {
          "key": {
            "description": "Required. A 128/192/256 bit key.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2CryptoHashConfig": {
        "description": "Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64 encoded representation of the hashed output (for example, L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and integer values can be hashed. See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization to learn more.",
        "properties": {
          "cryptoKey": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoKey"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig": {
        "description": "Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.",
        "properties": {
          "commonAlphabet": {
            "description": "Common alphabets.",
            "enum": [
              "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED",
              "NUMERIC",
              "HEXADECIMAL",
              "UPPER_CASE_ALPHA_NUMERIC",
              "ALPHA_NUMERIC"
            ],
            "type": "string"
          },
          "context": {
            "$ref": "#/$defs/GooglePrivacyDlpV2FieldId"
          },
          "cryptoKey": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoKey"
          },
          "customAlphabet": {
            "description": "This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/",
            "type": "string"
          },
          "radix": {
            "description": "The native way to select the alphabet. Must be in the range [2, 95].",
            "format": "int32",
            "type": "integer"
          },
          "surrogateInfoType": {
            "$ref": "#/$defs/GooglePrivacyDlpV2InfoType"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2DateShiftConfig": {
        "description": "Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/sensitive-data-protection/docs/concepts-date-shifting to learn more.",
        "properties": {
          "context": {
            "$ref": "#/$defs/GooglePrivacyDlpV2FieldId"
          },
          "cryptoKey": {
            "$ref": "#/$defs/GooglePrivacyDlpV2CryptoKey"
          },
          "lowerBoundDays": {
            "description": "Required. For example, -5 means shift date to at most 5 days back in the past.",
            "format": "int32",
            "type": "integer"
          },
          "upperBoundDays": {
            "description": "Required. Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2FixedSizeBucketingConfig": {
        "description": "Buckets values based on fixed size ranges. The Bucketing transformation can provide all of this functionality, but requires more configuration. This message is provided as a convenience to the user for simple bucketing strategies. The transformed value will be a hyphenated string of {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and upper_bound = 20, all values that are within this bucket will be replaced with \"10-20\". This can be used on data of type: double, long. If the bound Value type differs from the type of data being transformed, we will first attempt converting the type of the data to be transformed to match the type of the bound before comparing. See https://cloud.google.com/sensitive-data-protection/docs/concepts-bucketing to learn more.",
        "properties": {
          "bucketSize": {
            "description": "Required. Size of each bucket (except for minimum and maximum buckets). So if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.",
            "format": "double",
            "type": "number"
          },
          "lowerBound": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          },
          "upperBound": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2RedactConfig": {
        "description": "Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2ReplaceValueConfig": {
        "description": "Replace each input value with a given `Value`.",
        "properties": {
          "newValue": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2ReplaceDictionaryConfig": {
        "description": "Replace each input value with a value randomly selected from the dictionary.",
        "properties": {
          "wordList": {
            "$ref": "#/$defs/GooglePrivacyDlpV2WordList"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2WordList": {
        "description": "Message defining a list of words or phrases to search for in the data.",
        "properties": {
          "words": {
            "description": "Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2ReplaceWithInfoTypeConfig": {
        "description": "Replace each matching finding with the name of the info_type.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2TimePartConfig": {
        "description": "For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a portion of the value.",
        "properties": {
          "partToExtract": {
            "description": "The part of the time to keep.",
            "enum": [
              "TIME_PART_UNSPECIFIED",
              "YEAR",
              "MONTH",
              "DAY_OF_MONTH",
              "DAY_OF_WEEK",
              "WEEK_OF_YEAR",
              "HOUR_OF_DAY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2RecordTransformations": {
        "description": "A type of transformation that is applied over structured data such as a table.",
        "properties": {
          "fieldTransformations": {
            "description": "Transform the record by applying various field transformations.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2FieldTransformation"
            },
            "type": "array"
          },
          "recordSuppressions": {
            "description": "Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2RecordSuppression"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2FieldTransformation": {
        "description": "The transformation to apply to the field.",
        "properties": {
          "condition": {
            "$ref": "#/$defs/GooglePrivacyDlpV2RecordCondition"
          },
          "fields": {
            "description": "Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \"contact.nums[0].type\", use \"contact.nums.type\".",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2FieldId"
            },
            "type": "array"
          },
          "infoTypeTransformations": {
            "$ref": "#/$defs/GooglePrivacyDlpV2InfoTypeTransformations"
          },
          "primitiveTransformation": {
            "$ref": "#/$defs/GooglePrivacyDlpV2PrimitiveTransformation"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2RecordCondition": {
        "description": "A condition for determining whether a transformation should be applied to a field.",
        "properties": {
          "expressions": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Expressions"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Expressions": {
        "description": "An expression, consisting of an operator and conditions.",
        "properties": {
          "conditions": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Conditions"
          },
          "logicalOperator": {
            "description": "The operator to apply to the result of conditions. Default and currently only supported value is `AND`.",
            "enum": [
              "LOGICAL_OPERATOR_UNSPECIFIED",
              "AND"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Conditions": {
        "description": "A collection of conditions.",
        "properties": {
          "conditions": {
            "description": "A collection of conditions.",
            "items": {
              "$ref": "#/$defs/GooglePrivacyDlpV2Condition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2Condition": {
        "description": "The field type of `value` and `field` do not need to match to be considered equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO attempt to compare even with incompatible types, but all other comparisons are invalid with incompatible types. A `value` of type: - `string` can be compared against all other types - `boolean` can only be compared against other booleans - `integer` can be compared against doubles or a string if the string value can be parsed as an integer. - `double` can be compared against integers or a string if the string can be parsed as a double. - `Timestamp` can be compared against strings in RFC 3339 date string format. - `TimeOfDay` can be compared against timestamps and strings in the format of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be given and the condition will evaluate to false.",
        "properties": {
          "field": {
            "$ref": "#/$defs/GooglePrivacyDlpV2FieldId"
          },
          "operator": {
            "description": "Required. Operator used to compare the field or infoType to the value.",
            "enum": [
              "RELATIONAL_OPERATOR_UNSPECIFIED",
              "EQUAL_TO",
              "NOT_EQUAL_TO",
              "GREATER_THAN",
              "LESS_THAN",
              "GREATER_THAN_OR_EQUALS",
              "LESS_THAN_OR_EQUALS",
              "EXISTS"
            ],
            "type": "string"
          },
          "value": {
            "$ref": "#/$defs/GooglePrivacyDlpV2Value"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2RecordSuppression": {
        "description": "Configuration to suppress records whose suppression conditions evaluate to true.",
        "properties": {
          "condition": {
            "$ref": "#/$defs/GooglePrivacyDlpV2RecordCondition"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2TransformationErrorHandling": {
        "description": "How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.",
        "properties": {
          "leaveUntransformed": {
            "$ref": "#/$defs/GooglePrivacyDlpV2LeaveUntransformed"
          },
          "throwError": {
            "$ref": "#/$defs/GooglePrivacyDlpV2ThrowError"
          }
        },
        "type": "object"
      },
      "GooglePrivacyDlpV2LeaveUntransformed": {
        "description": "Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.",
        "properties": {},
        "type": "object"
      },
      "GooglePrivacyDlpV2ThrowError": {
        "description": "Throw an error and fail the request when a transformation error occurs.",
        "properties": {},
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dlp.googleapis.com//v2/{parent}/deidentifyTemplates{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "DeidentifyTemplates contains instructions on how to de-identify content. See https://cloud.google.com/sensitive-data-protection/docs/concepts-templates to learn more.",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. The creation timestamp of an inspectTemplate.",
            [
              "**deidentifyConfig**: The configuration that controls how the data will change.",
              {
                "$ul": [
                  [
                    "**imageTransformations**: A type of transformation that is applied over images.",
                    {
                      "$ul": [
                        "**transforms**: List of transforms to make."
                      ]
                    }
                  ],
                  [
                    "**infoTypeTransformations**: A type of transformation that will scan unstructured text and apply various `PrimitiveTransformation`s to each finding, where the transformation is applied to only values that were identified as a specific info_type.",
                    {
                      "$ul": [
                        "**transformations**: Required. Transformation for each infoType. Cannot specify more than one for a given infoType."
                      ]
                    }
                  ],
                  [
                    "**recordTransformations**: A type of transformation that is applied over structured data such as a table.",
                    {
                      "$ul": [
                        "**fieldTransformations**: Transform the record by applying various field transformations.",
                        "**recordSuppressions**: Configuration defining which records get suppressed entirely. Records that match any suppression rule are omitted from the output."
                      ]
                    }
                  ],
                  [
                    "**transformationErrorHandling**: How to handle transformation errors during de-identification. A transformation error occurs when the requested transformation is incompatible with the data. For example, trying to de-identify an IP address using a `DateShift` transformation would result in a transformation error, since date info cannot be extracted from an IP address. Information about any incompatible transformations, and how they were handled, is returned in the response as part of the `TransformationOverviews`.",
                    {
                      "$ul": [
                        "**leaveUntransformed**: Skips the data without modifying it if the requested transformation would cause an error. For example, if a `DateShift` transformation were applied an an IP address, this mode would leave the IP address unchanged in the response.",
                        "**throwError**: Throw an error and fail the request when a transformation error occurs."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**description**: Short description (max 256 chars).",
            "**displayName**: Display name (max 256 chars).",
            "**name**: Output only. The template name. The template will have one of the following formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`",
            "**updateTime**: Output only. The last update timestamp of an inspectTemplate."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
