{
  "name": "datalabeling_projects_datasets_importData",
  "description": "Imports data into dataset based on source locations defined in request. It can be called multiple times for the same dataset. Each dataset can only have one long running operation running on it. For example, no labeling task (also long running operation) can be started while importing is still ongoing. Vice versa.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. Dataset resource name, format: projects/{project_id}/datasets/{dataset_id}"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDatalabelingV1beta1ImportDataRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudDatalabelingV1beta1ImportDataRequest": {
        "description": "Request message for ImportData API.",
        "properties": {
          "inputConfig": {
            "$ref": "#/$defs/GoogleCloudDatalabelingV1beta1InputConfig"
          },
          "userEmailAddress": {
            "description": "Email of the user who started the import task and should be notified by email. If empty no notification will be sent.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDatalabelingV1beta1InputConfig": {
        "description": "The configuration of input data, including data type, location, etc.",
        "properties": {
          "annotationType": {
            "description": "Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.",
            "enum": [
              "ANNOTATION_TYPE_UNSPECIFIED",
              "IMAGE_CLASSIFICATION_ANNOTATION",
              "IMAGE_BOUNDING_BOX_ANNOTATION",
              "IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION",
              "IMAGE_BOUNDING_POLY_ANNOTATION",
              "IMAGE_POLYLINE_ANNOTATION",
              "IMAGE_SEGMENTATION_ANNOTATION",
              "VIDEO_SHOTS_CLASSIFICATION_ANNOTATION",
              "VIDEO_OBJECT_TRACKING_ANNOTATION",
              "VIDEO_OBJECT_DETECTION_ANNOTATION",
              "VIDEO_EVENT_ANNOTATION",
              "TEXT_CLASSIFICATION_ANNOTATION",
              "TEXT_ENTITY_EXTRACTION_ANNOTATION",
              "GENERAL_CLASSIFICATION_ANNOTATION"
            ],
            "type": "string"
          },
          "bigquerySource": {
            "$ref": "#/$defs/GoogleCloudDatalabelingV1beta1BigQuerySource"
          },
          "classificationMetadata": {
            "$ref": "#/$defs/GoogleCloudDatalabelingV1beta1ClassificationMetadata"
          },
          "dataType": {
            "description": "Required. Data type must be specifed when user tries to import data.",
            "enum": [
              "DATA_TYPE_UNSPECIFIED",
              "IMAGE",
              "VIDEO",
              "TEXT",
              "GENERAL_DATA"
            ],
            "type": "string"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudDatalabelingV1beta1GcsSource"
          },
          "textMetadata": {
            "$ref": "#/$defs/GoogleCloudDatalabelingV1beta1TextMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudDatalabelingV1beta1BigQuerySource": {
        "description": "The BigQuery location for input data. If used in an EvaluationJob, this is where the service saves the prediction input and output sampled from the model version.",
        "properties": {
          "inputUri": {
            "description": "Required. BigQuery URI to a table, up to 2,000 characters long. If you specify the URI of a table that does not exist, Data Labeling Service creates a table at the URI with the correct schema when you create your EvaluationJob. If you specify the URI of a table that already exists, it must have the [correct schema](/ml-engine/docs/continuous-evaluation/create-job#table-schema). Provide the table URI in the following format: \"bq://{your_project_id}/ {your_dataset_name}/{your_table_name}\" [Learn more](/ml-engine/docs/continuous-evaluation/create-job#table-schema).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDatalabelingV1beta1ClassificationMetadata": {
        "description": "Metadata for classification annotations.",
        "properties": {
          "isMultiLabel": {
            "description": "Whether the classification task is multi-label or not.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDatalabelingV1beta1GcsSource": {
        "description": "Source of the Cloud Storage file to be imported.",
        "properties": {
          "inputUri": {
            "description": "Required. The input URI of source file. This must be a Cloud Storage path (`gs://...`).",
            "type": "string"
          },
          "mimeType": {
            "description": "Required. The format of the source file. Only \"text/csv\" is supported.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDatalabelingV1beta1TextMetadata": {
        "description": "Metadata for the text.",
        "properties": {
          "languageCode": {
            "description": "The language of this text, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://datalabeling.googleapis.com//v1beta1/{name}:importData{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
