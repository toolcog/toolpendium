{
  "name": "streetviewpublish_photo_create",
  "description": "After the client finishes uploading the photo with the returned UploadRef, CreatePhoto publishes the uploaded Photo to Street View on Google Maps. Currently, the only way to set heading, pitch, and roll in CreatePhoto is through the [Photo Sphere XMP metadata](https://developers.google.com/streetview/spherical-metadata) in the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`, `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if the uploaded photo is not a 360 photo. * google.rpc.Code.NOT_FOUND if the upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage limit.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Photo"
      }
    },
    "$defs": {
      "Photo": {
        "description": "Photo is used to store 360 photos along with photo metadata.",
        "properties": {
          "captureTime": {
            "description": "Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
            "format": "google-datetime",
            "type": "string"
          },
          "connections": {
            "description": "Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
            "items": {
              "$ref": "#/$defs/Connection"
            },
            "type": "array"
          },
          "downloadUrl": {
            "description": "Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
            "readOnly": true,
            "type": "string"
          },
          "mapsPublishStatus": {
            "description": "Output only. Status in Google Maps, whether this photo was published or rejected.",
            "enum": [
              "UNSPECIFIED_MAPS_PUBLISH_STATUS",
              "PUBLISHED",
              "REJECTED_UNKNOWN"
            ],
            "readOnly": true,
            "type": "string"
          },
          "photoId": {
            "$ref": "#/$defs/PhotoId"
          },
          "places": {
            "description": "Optional. Places where this photo belongs.",
            "items": {
              "$ref": "#/$defs/Place"
            },
            "type": "array"
          },
          "pose": {
            "$ref": "#/$defs/Pose"
          },
          "shareLink": {
            "description": "Output only. The share link for the photo.",
            "readOnly": true,
            "type": "string"
          },
          "thumbnailUrl": {
            "description": "Output only. The thumbnail URL for showing a preview of the given photo.",
            "readOnly": true,
            "type": "string"
          },
          "transferStatus": {
            "description": "Output only. Status of rights transfer on this photo.",
            "enum": [
              "TRANSFER_STATUS_UNKNOWN",
              "NEVER_TRANSFERRED",
              "PENDING",
              "COMPLETED",
              "REJECTED",
              "EXPIRED",
              "CANCELLED",
              "RECEIVED_VIA_TRANSFER"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uploadReference": {
            "$ref": "#/$defs/UploadRef"
          },
          "uploadTime": {
            "description": "Output only. Time when the image was uploaded.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "viewCount": {
            "description": "Output only. View count of the photo.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Connection": {
        "description": "A connection is the link from a source photo to a destination photo.",
        "properties": {
          "target": {
            "$ref": "#/$defs/PhotoId"
          }
        },
        "type": "object"
      },
      "PhotoId": {
        "description": "Identifier for a Photo.",
        "properties": {
          "id": {
            "description": "A unique identifier for a photo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Place": {
        "description": "Place metadata for an entity.",
        "properties": {
          "languageCode": {
            "description": "Output only. The language_code that the name is localized with. This should be the language_code specified in the request, but may be a fallback.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. The name of the place, localized to the language_code.",
            "readOnly": true,
            "type": "string"
          },
          "placeId": {
            "description": "Place identifier, as described in https://developers.google.com/places/place-id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pose": {
        "description": "Raw pose measurement for an entity.",
        "properties": {
          "accuracyMeters": {
            "description": "The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.",
            "format": "float",
            "type": "number"
          },
          "altitude": {
            "description": "Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          },
          "gpsRecordTimestampUnixEpoch": {
            "description": "Time of the GPS record since UTC epoch.",
            "format": "google-datetime",
            "type": "string"
          },
          "heading": {
            "description": "The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          },
          "latLngPair": {
            "$ref": "#/$defs/LatLng"
          },
          "level": {
            "$ref": "#/$defs/Level"
          },
          "pitch": {
            "description": "Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          },
          "roll": {
            "description": "Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "LatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Level": {
        "description": "Level information containing level number and its corresponding name.",
        "properties": {
          "name": {
            "description": "Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.",
            "type": "string"
          },
          "number": {
            "description": "Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "UploadRef": {
        "description": "Upload reference for media files.",
        "properties": {
          "uploadUrl": {
            "description": "An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\"",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://streetviewpublish.googleapis.com//v1/photo{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Photo is used to store 360 photos along with photo metadata.",
        "**Key properties:**",
        {
          "$ul": [
            "**captureTime**: Optional. Absolute time when the photo was captured. When the photo has no exif timestamp, this is used to set a timestamp in the photo metadata.",
            "**connections**: Optional. Connections to other photos. A connection represents the link from this photo to another photo.",
            "**downloadUrl**: Output only. The download URL for the photo bytes. This field is set only when GetPhotoRequest.view is set to PhotoView.INCLUDE_DOWNLOAD_URL.",
            "**mapsPublishStatus**: Output only. Status in Google Maps, whether this photo was published or rejected.",
            [
              "**photoId**: Identifier for a Photo.",
              {
                "$ul": [
                  "**id**: A unique identifier for a photo."
                ]
              }
            ],
            "**places**: Optional. Places where this photo belongs.",
            [
              "**pose**: Raw pose measurement for an entity.",
              {
                "$ul": [
                  "**accuracyMeters**: The estimated horizontal accuracy of this pose in meters with 68% confidence (one standard deviation). For example, on Android, this value is available from this method: https://developer.android.com/reference/android/location/Location#getAccuracy(). Other platforms have different methods of obtaining similar accuracy estimations.",
                  "**altitude**: Altitude of the pose in meters above WGS84 ellipsoid. NaN indicates an unmeasured quantity.",
                  "**gpsRecordTimestampUnixEpoch**: Time of the GPS record since UTC epoch.",
                  "**heading**: The following pose parameters pertain to the center of the photo. They match https://developers.google.com/streetview/spherical-metadata. Compass heading, measured at the center of the photo in degrees clockwise from North. Value must be >=0 and <360. NaN indicates an unmeasured quantity.",
                  [
                    "**latLngPair**: An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
                    {
                      "$ul": [
                        "**latitude**: The latitude in degrees. It must be in the range [-90.0, +90.0].",
                        "**longitude**: The longitude in degrees. It must be in the range [-180.0, +180.0]."
                      ]
                    }
                  ],
                  [
                    "**level**: Level information containing level number and its corresponding name.",
                    {
                      "$ul": [
                        "**name**: Required. A name assigned to this Level, restricted to 3 characters. Consider how the elevator buttons would be labeled for this level if there was an elevator.",
                        "**number**: Optional. Floor number, used for ordering. 0 indicates the ground level, 1 indicates the first level above ground level, -1 indicates the first level under ground level. Non-integer values are OK."
                      ]
                    }
                  ],
                  "**pitch**: Pitch, measured at the center of the photo in degrees. Value must be >=-90 and <= 90. A value of -90 means looking directly down, and a value of 90 means looking directly up. NaN indicates an unmeasured quantity.",
                  "**roll**: Roll, measured in degrees. Value must be >= 0 and <360. A value of 0 means level with the horizon. NaN indicates an unmeasured quantity."
                ]
              }
            ],
            "**shareLink**: Output only. The share link for the photo.",
            "**thumbnailUrl**: Output only. The thumbnail URL for showing a preview of the given photo.",
            "**transferStatus**: Output only. Status of rights transfer on this photo.",
            [
              "**uploadReference**: Upload reference for media files.",
              {
                "$ul": [
                  "**uploadUrl**: An upload reference should be unique for each user. It follows the form: \"https://streetviewpublish.googleapis.com/media/user/{account_id}/photo/{upload_reference}\""
                ]
              }
            ],
            "**uploadTime**: Output only. Time when the image was uploaded.",
            "**viewCount**: Output only. View count of the photo."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
