{
  "name": "clouddeploy_projects_locations_deliveryPipelines_create",
  "description": "Creates a new DeliveryPipeline in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent collection in which the `DeliveryPipeline` should be created. Format should be `projects/{project_id}/locations/{location_name}`."
      },
      "deliveryPipelineId": {
        "type": "string",
        "description": "Required. ID of the `DeliveryPipeline`."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. If set to true, the request is validated and the user is provided with an expected result, but no actual change is made."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/DeliveryPipeline"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "DeliveryPipeline": {
        "description": "A `DeliveryPipeline` resource in the Cloud Deploy API. A `DeliveryPipeline` defines a pipeline through which a Skaffold configuration can progress.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy.",
            "type": "object"
          },
          "condition": {
            "$ref": "#/$defs/PipelineCondition"
          },
          "createTime": {
            "description": "Output only. Time at which the pipeline was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the `DeliveryPipeline`. Max length is 255 characters.",
            "type": "string"
          },
          "etag": {
            "description": "This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.",
            "type": "object"
          },
          "name": {
            "description": "Optional. Name of the `DeliveryPipeline`. Format is `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.",
            "type": "string"
          },
          "serialPipeline": {
            "$ref": "#/$defs/SerialPipeline"
          },
          "suspended": {
            "description": "When suspended, no new releases or rollouts can be created, but in-progress ones will complete.",
            "type": "boolean"
          },
          "uid": {
            "description": "Output only. Unique identifier of the `DeliveryPipeline`.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Most recent time at which the pipeline was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "PipelineCondition": {
        "description": "PipelineCondition contains all conditions relevant to a Delivery Pipeline.",
        "properties": {
          "pipelineReadyCondition": {
            "$ref": "#/$defs/PipelineReadyCondition"
          },
          "targetsPresentCondition": {
            "$ref": "#/$defs/TargetsPresentCondition"
          },
          "targetsTypeCondition": {
            "$ref": "#/$defs/TargetsTypeCondition"
          }
        },
        "type": "object"
      },
      "PipelineReadyCondition": {
        "description": "PipelineReadyCondition contains information around the status of the Pipeline.",
        "properties": {
          "status": {
            "description": "True if the Pipeline is in a valid state. Otherwise at least one condition in `PipelineCondition` is in an invalid state. Iterate over those conditions and see which condition(s) has status = false to find out what is wrong with the Pipeline.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "Last time the condition was updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TargetsPresentCondition": {
        "description": "`TargetsPresentCondition` contains information on any Targets referenced in the Delivery Pipeline that do not actually exist.",
        "properties": {
          "missingTargets": {
            "description": "The list of Target names that do not exist. For example, `projects/{project_id}/locations/{location_name}/targets/{target_name}`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "True if there aren't any missing Targets.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "Last time the condition was updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TargetsTypeCondition": {
        "description": "TargetsTypeCondition contains information on whether the Targets defined in the Delivery Pipeline are of the same type.",
        "properties": {
          "errorDetails": {
            "description": "Human readable error message.",
            "type": "string"
          },
          "status": {
            "description": "True if the targets are all a comparable type. For example this is true if all targets are GKE clusters. This is false if some targets are Cloud Run targets and others are GKE clusters.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SerialPipeline": {
        "description": "SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.",
        "properties": {
          "stages": {
            "description": "Each stage specifies configuration for a `Target`. The ordering of this list defines the promotion flow.",
            "items": {
              "$ref": "#/$defs/Stage"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Stage": {
        "description": "Stage specifies a location to which to deploy.",
        "properties": {
          "deployParameters": {
            "description": "Optional. The deploy parameters to use for the target in this stage.",
            "items": {
              "$ref": "#/$defs/DeployParameters"
            },
            "type": "array"
          },
          "profiles": {
            "description": "Skaffold profiles to use when rendering the manifest for this stage's `Target`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "strategy": {
            "$ref": "#/$defs/Strategy"
          },
          "targetId": {
            "description": "The target_id to which this stage points. This field refers exclusively to the last segment of a target name. For example, this field would just be `my-target` (rather than `projects/project/locations/location/targets/my-target`). The location of the `Target` is inferred to be the same as the location of the `DeliveryPipeline` that contains this `Stage`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeployParameters": {
        "description": "DeployParameters contains deploy parameters information.",
        "properties": {
          "matchTargetLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Deploy parameters are applied to targets with match labels. If unspecified, deploy parameters are applied to all targets (including child targets of a multi-target).",
            "type": "object"
          },
          "values": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Required. Values are deploy parameters in key-value pairs.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Strategy": {
        "description": "Strategy contains deployment strategy information.",
        "properties": {
          "canary": {
            "$ref": "#/$defs/Canary"
          },
          "standard": {
            "$ref": "#/$defs/Standard"
          }
        },
        "type": "object"
      },
      "Canary": {
        "description": "Canary represents the canary deployment strategy.",
        "properties": {
          "canaryDeployment": {
            "$ref": "#/$defs/CanaryDeployment"
          },
          "customCanaryDeployment": {
            "$ref": "#/$defs/CustomCanaryDeployment"
          },
          "runtimeConfig": {
            "$ref": "#/$defs/RuntimeConfig"
          }
        },
        "type": "object"
      },
      "CanaryDeployment": {
        "description": "CanaryDeployment represents the canary deployment configuration",
        "properties": {
          "percentages": {
            "description": "Required. The percentage based deployments that will occur as a part of a `Rollout`. List is expected in ascending order and each integer n is 0 <= n < 100.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          },
          "postdeploy": {
            "$ref": "#/$defs/Postdeploy"
          },
          "predeploy": {
            "$ref": "#/$defs/Predeploy"
          },
          "verify": {
            "description": "Whether to run verify tests after each percentage deployment.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Postdeploy": {
        "description": "Postdeploy contains the postdeploy job configuration information.",
        "properties": {
          "actions": {
            "description": "Optional. A sequence of Skaffold custom actions to invoke during execution of the postdeploy job.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Predeploy": {
        "description": "Predeploy contains the predeploy job configuration information.",
        "properties": {
          "actions": {
            "description": "Optional. A sequence of Skaffold custom actions to invoke during execution of the predeploy job.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomCanaryDeployment": {
        "description": "CustomCanaryDeployment represents the custom canary deployment configuration.",
        "properties": {
          "phaseConfigs": {
            "description": "Required. Configuration for each phase in the canary deployment in the order executed.",
            "items": {
              "$ref": "#/$defs/PhaseConfig"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PhaseConfig": {
        "description": "PhaseConfig represents the configuration for a phase in the custom canary deployment.",
        "properties": {
          "percentage": {
            "description": "Required. Percentage deployment for the phase.",
            "format": "int32",
            "type": "integer"
          },
          "phaseId": {
            "description": "Required. The ID to assign to the `Rollout` phase. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.",
            "type": "string"
          },
          "postdeploy": {
            "$ref": "#/$defs/Postdeploy"
          },
          "predeploy": {
            "$ref": "#/$defs/Predeploy"
          },
          "profiles": {
            "description": "Skaffold profiles to use when rendering the manifest for this phase. These are in addition to the profiles list specified in the `DeliveryPipeline` stage.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "verify": {
            "description": "Whether to run verify tests after the deployment.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "RuntimeConfig": {
        "description": "RuntimeConfig contains the runtime specific configurations for a deployment strategy.",
        "properties": {
          "cloudRun": {
            "$ref": "#/$defs/CloudRunConfig"
          },
          "kubernetes": {
            "$ref": "#/$defs/KubernetesConfig"
          }
        },
        "type": "object"
      },
      "CloudRunConfig": {
        "description": "CloudRunConfig contains the Cloud Run runtime configuration.",
        "properties": {
          "automaticTrafficControl": {
            "description": "Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service on the user's behalf to facilitate traffic splitting. This is required to be true for CanaryDeployments, but optional for CustomCanaryDeployments.",
            "type": "boolean"
          },
          "canaryRevisionTags": {
            "description": "Optional. A list of tags that are added to the canary revision while the canary phase is in progress.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "priorRevisionTags": {
            "description": "Optional. A list of tags that are added to the prior revision while the canary phase is in progress.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "stableRevisionTags": {
            "description": "Optional. A list of tags that are added to the final stable revision when the stable phase is applied.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KubernetesConfig": {
        "description": "KubernetesConfig contains the Kubernetes runtime configuration.",
        "properties": {
          "gatewayServiceMesh": {
            "$ref": "#/$defs/GatewayServiceMesh"
          },
          "serviceNetworking": {
            "$ref": "#/$defs/ServiceNetworking"
          }
        },
        "type": "object"
      },
      "GatewayServiceMesh": {
        "description": "Information about the Kubernetes Gateway API service mesh configuration.",
        "properties": {
          "deployment": {
            "description": "Required. Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.",
            "type": "string"
          },
          "httpRoute": {
            "description": "Required. Name of the Gateway API HTTPRoute.",
            "type": "string"
          },
          "routeUpdateWaitTime": {
            "description": "Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.",
            "format": "google-duration",
            "type": "string"
          },
          "service": {
            "description": "Required. Name of the Kubernetes Service.",
            "type": "string"
          },
          "stableCutbackDuration": {
            "description": "Optional. The amount of time to migrate traffic back from the canary Service to the original Service during the stable phase deployment. If specified, must be between 15s and 3600s. If unspecified, there is no cutback time.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceNetworking": {
        "description": "Information about the Kubernetes Service networking configuration.",
        "properties": {
          "deployment": {
            "description": "Required. Name of the Kubernetes Deployment whose traffic is managed by the specified Service.",
            "type": "string"
          },
          "disablePodOverprovisioning": {
            "description": "Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning is disabled then Cloud Deploy will limit the number of total Pods used for the deployment strategy to the number of Pods the Deployment has on the cluster.",
            "type": "boolean"
          },
          "service": {
            "description": "Required. Name of the Kubernetes Service.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Standard": {
        "description": "Standard represents the standard deployment strategy.",
        "properties": {
          "postdeploy": {
            "$ref": "#/$defs/Postdeploy"
          },
          "predeploy": {
            "$ref": "#/$defs/Predeploy"
          },
          "verify": {
            "description": "Whether to verify a deployment.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://clouddeploy.googleapis.com//v1/{parent}/deliveryPipelines{?deliveryPipelineId,requestId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
