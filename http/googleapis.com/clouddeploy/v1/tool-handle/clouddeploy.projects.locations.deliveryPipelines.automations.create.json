{
  "name": "clouddeploy_projects_locations_deliveryPipelines_automations_create",
  "description": "Creates a new Automation in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent collection in which the `Automation` should be created. Format should be `projects/{project_id}/locations/{location_name}/deliveryPipelines/{pipeline_name}`."
      },
      "automationId": {
        "type": "string",
        "description": "Required. ID of the `Automation`."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. If set to true, the request is validated and the user is provided with an expected result, but no actual change is made."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Automation"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Automation": {
        "description": "An `Automation` resource in the Cloud Deploy API. An `Automation` enables the automation of manually driven actions for a Delivery Pipeline, which includes Release promotion among Targets, Rollout repair and Rollout deployment strategy advancement. The intention of Automation is to reduce manual intervention in the continuous delivery process.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. Annotations must meet the following constraints: * Annotations are key/value pairs. * Valid annotation keys have two segments: an optional prefix and name, separated by a slash (`/`). * The name segment is required and must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is optional. If specified, the prefix must be a DNS subdomain: a series of DNS labels separated by dots(`.`), not longer than 253 characters in total, followed by a slash (`/`). See https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set for more details.",
            "type": "object"
          },
          "createTime": {
            "description": "Output only. Time at which the automation was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Description of the `Automation`. Max length is 255 characters.",
            "type": "string"
          },
          "etag": {
            "description": "Optional. The weak etag of the `Automation` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 63 characters.",
            "type": "object"
          },
          "name": {
            "description": "Output only. Name of the `Automation`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.",
            "readOnly": true,
            "type": "string"
          },
          "rules": {
            "description": "Required. List of Automation rules associated with the Automation resource. Must have at least one rule and limited to 250 rules per Delivery Pipeline. Note: the order of the rules here is not the same as the order of execution.",
            "items": {
              "$ref": "#/$defs/AutomationRule"
            },
            "type": "array"
          },
          "selector": {
            "$ref": "#/$defs/AutomationResourceSelector"
          },
          "serviceAccount": {
            "description": "Required. Email address of the user-managed IAM service account that creates Cloud Deploy release and rollout resources.",
            "type": "string"
          },
          "suspended": {
            "description": "Optional. When Suspended, automation is deactivated from execution.",
            "type": "boolean"
          },
          "uid": {
            "description": "Output only. Unique identifier of the `Automation`.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Time at which the automation was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutomationRule": {
        "description": "`AutomationRule` defines the automation activities.",
        "properties": {
          "advanceRolloutRule": {
            "$ref": "#/$defs/AdvanceRolloutRule"
          },
          "promoteReleaseRule": {
            "$ref": "#/$defs/PromoteReleaseRule"
          },
          "repairRolloutRule": {
            "$ref": "#/$defs/RepairRolloutRule"
          }
        },
        "type": "object"
      },
      "AdvanceRolloutRule": {
        "description": "The `AdvanceRollout` automation rule will automatically advance a successful Rollout to the next phase.",
        "properties": {
          "condition": {
            "$ref": "#/$defs/AutomationRuleCondition"
          },
          "id": {
            "description": "Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.",
            "type": "string"
          },
          "sourcePhases": {
            "description": "Optional. Proceeds only after phase name matched any one in the list. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "wait": {
            "description": "Optional. How long to wait after a rollout is finished.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutomationRuleCondition": {
        "description": "`AutomationRuleCondition` contains conditions relevant to an `Automation` rule.",
        "properties": {
          "targetsPresentCondition": {
            "$ref": "#/$defs/TargetsPresentCondition"
          }
        },
        "type": "object"
      },
      "TargetsPresentCondition": {
        "description": "`TargetsPresentCondition` contains information on any Targets referenced in the Delivery Pipeline that do not actually exist.",
        "properties": {
          "missingTargets": {
            "description": "The list of Target names that do not exist. For example, `projects/{project_id}/locations/{location_name}/targets/{target_name}`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "description": "True if there aren't any missing Targets.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "Last time the condition was updated.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PromoteReleaseRule": {
        "description": "`PromoteRelease` rule will automatically promote a release from the current target to a specified target.",
        "properties": {
          "condition": {
            "$ref": "#/$defs/AutomationRuleCondition"
          },
          "destinationPhase": {
            "description": "Optional. The starting phase of the rollout created by this operation. Default to the first phase.",
            "type": "string"
          },
          "destinationTargetId": {
            "description": "Optional. The ID of the stage in the pipeline to which this `Release` is deploying. If unspecified, default it to the next stage in the promotion flow. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine if the target is one of the stages in the promotion sequence defined in the pipeline. * \"@next\", the next target in the promotion sequence.",
            "type": "string"
          },
          "id": {
            "description": "Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.",
            "type": "string"
          },
          "wait": {
            "description": "Optional. How long the release need to be paused until being promoted to the next target.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepairRolloutRule": {
        "description": "The `RepairRolloutRule` automation rule will automatically repair a failed `Rollout`.",
        "properties": {
          "condition": {
            "$ref": "#/$defs/AutomationRuleCondition"
          },
          "id": {
            "description": "Required. ID of the rule. This id must be unique in the `Automation` resource to which this rule belongs. The format is `a-z{0,62}`.",
            "type": "string"
          },
          "jobs": {
            "description": "Optional. Jobs to repair. Proceeds only after job name matched any one in the list, or for all jobs if unspecified or empty. The phase that includes the job must match the phase ID specified in `source_phase`. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "repairModes": {
            "description": "Required. Defines the types of automatic repair actions for failed jobs.",
            "items": {
              "$ref": "#/$defs/RepairMode"
            },
            "type": "array"
          },
          "sourcePhases": {
            "description": "Optional. Phases within which jobs are subject to automatic repair actions on failure. Proceeds only after phase name matched any one in the list, or for all phases if unspecified. This value must consist of lower-case letters, numbers, and hyphens, start with a letter and end with a letter or a number, and have a max length of 63 characters. In other words, it must match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RepairMode": {
        "description": "Configuration of the repair action.",
        "properties": {
          "retry": {
            "$ref": "#/$defs/Retry"
          },
          "rollback": {
            "$ref": "#/$defs/Rollback"
          }
        },
        "type": "object"
      },
      "Retry": {
        "description": "Retries the failed job.",
        "properties": {
          "attempts": {
            "description": "Required. Total number of retries. Retry is skipped if set to 0; The minimum value is 1, and the maximum value is 10.",
            "format": "int64",
            "type": "string"
          },
          "backoffMode": {
            "description": "Optional. The pattern of how wait time will be increased. Default is linear. Backoff mode will be ignored if `wait` is 0.",
            "enum": [
              "BACKOFF_MODE_UNSPECIFIED",
              "BACKOFF_MODE_LINEAR",
              "BACKOFF_MODE_EXPONENTIAL"
            ],
            "type": "string"
          },
          "wait": {
            "description": "Optional. How long to wait for the first retry. Default is 0, and the maximum value is 14d.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rollback": {
        "description": "Rolls back a `Rollout`.",
        "properties": {
          "destinationPhase": {
            "description": "Optional. The starting phase ID for the `Rollout`. If unspecified, the `Rollout` will start in the stable phase.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutomationResourceSelector": {
        "description": "AutomationResourceSelector contains the information to select the resources to which an Automation is going to be applied.",
        "properties": {
          "targets": {
            "description": "Contains attributes about a target.",
            "items": {
              "$ref": "#/$defs/TargetAttribute"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TargetAttribute": {
        "description": "Contains criteria for selecting Targets.",
        "properties": {
          "id": {
            "description": "ID of the `Target`. The value of this field could be one of the following: * The last segment of a target name. It only needs the ID to determine which target is being referred to * \"*\", all targets in a location.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Target labels.",
            "type": "object"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://clouddeploy.googleapis.com//v1/{parent}/automations{?automationId,requestId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
