{
  "name": "clouddeploy_projects_locations_customTargetTypes_create",
  "description": "Creates a new CustomTargetType in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent collection in which the `CustomTargetType` should be created. Format should be `projects/{project_id}/locations/{location_name}`."
      },
      "customTargetTypeId": {
        "type": "string",
        "description": "Required. ID of the `CustomTargetType`."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. If set to true, the request is validated and the user is provided with an expected result, but no actual change is made."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CustomTargetType"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CustomTargetType": {
        "description": "A `CustomTargetType` resource in the Cloud Deploy API. A `CustomTargetType` defines a type of custom target that can be referenced in a `Target` in order to facilitate deploying to other systems besides the supported runtimes.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.",
            "type": "object"
          },
          "createTime": {
            "description": "Output only. Time at which the `CustomTargetType` was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "customActions": {
            "$ref": "#/$defs/CustomTargetSkaffoldActions"
          },
          "customTargetTypeId": {
            "description": "Output only. Resource id of the `CustomTargetType`.",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Description of the `CustomTargetType`. Max length is 255 characters.",
            "type": "string"
          },
          "etag": {
            "description": "Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.",
            "type": "object"
          },
          "name": {
            "description": "Optional. Name of the `CustomTargetType`. Format is `projects/{project}/locations/{location}/customTargetTypes/a-z{0,62}`.",
            "type": "string"
          },
          "uid": {
            "description": "Output only. Unique identifier of the `CustomTargetType`.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Most recent time at which the `CustomTargetType` was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomTargetSkaffoldActions": {
        "description": "CustomTargetSkaffoldActions represents the `CustomTargetType` configuration using Skaffold custom actions.",
        "properties": {
          "deployAction": {
            "description": "Required. The Skaffold custom action responsible for deploy operations.",
            "type": "string"
          },
          "includeSkaffoldModules": {
            "description": "Optional. List of Skaffold modules Cloud Deploy will include in the Skaffold Config as required before performing diagnose.",
            "items": {
              "$ref": "#/$defs/SkaffoldModules"
            },
            "type": "array"
          },
          "renderAction": {
            "description": "Optional. The Skaffold custom action responsible for render operations. If not provided then Cloud Deploy will perform the render operations via `skaffold render`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SkaffoldModules": {
        "description": "Skaffold Config modules and their remote source.",
        "properties": {
          "configs": {
            "description": "Optional. The Skaffold Config modules to use from the specified source.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "git": {
            "$ref": "#/$defs/SkaffoldGitSource"
          },
          "googleCloudStorage": {
            "$ref": "#/$defs/SkaffoldGCSSource"
          }
        },
        "type": "object"
      },
      "SkaffoldGitSource": {
        "description": "Git repository containing Skaffold Config modules.",
        "properties": {
          "path": {
            "description": "Optional. Relative path from the repository root to the Skaffold file.",
            "type": "string"
          },
          "ref": {
            "description": "Optional. Git ref the package should be cloned from.",
            "type": "string"
          },
          "repo": {
            "description": "Required. Git repository the package should be cloned from.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SkaffoldGCSSource": {
        "description": "Cloud Storage bucket containing Skaffold Config modules.",
        "properties": {
          "path": {
            "description": "Optional. Relative path from the source to the Skaffold file.",
            "type": "string"
          },
          "source": {
            "description": "Required. Cloud Storage source paths to copy recursively. For example, providing \"gs://my-bucket/dir/configs/*\" will result in Skaffold copying all files within the \"dir/configs\" directory in the bucket \"my-bucket\".",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://clouddeploy.googleapis.com//v1/{parent}/customTargetTypes{?customTargetTypeId,requestId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
