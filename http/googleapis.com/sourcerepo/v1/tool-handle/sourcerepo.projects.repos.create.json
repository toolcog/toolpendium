{
  "name": "sourcerepo_projects_repos_create",
  "description": "Creates a repo in the given project with the given name. If the named repository already exists, `CreateRepo` returns `ALREADY_EXISTS`.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "The project in which to create the repo. Values are of the form `projects/`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Repo"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Repo": {
        "description": "A repository (or repo) is a Git repository storing versioned source content.",
        "properties": {
          "mirrorConfig": {
            "$ref": "#/$defs/MirrorConfig"
          },
          "name": {
            "description": "Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes. eg, `projects/myproject/repos/name/with/slash`",
            "type": "string"
          },
          "pubsubConfigs": {
            "additionalProperties": {
              "$ref": "#/$defs/PubsubConfig"
            },
            "description": "How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.",
            "type": "object"
          },
          "size": {
            "description": "The disk usage of the repo, in bytes. Read-only field. Size is only returned by GetRepo.",
            "format": "int64",
            "type": "string"
          },
          "url": {
            "description": "URL to clone the repository from Google Cloud Source Repositories. Read-only field.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MirrorConfig": {
        "description": "Configuration to automatically mirror a repository from another hosting service, for example GitHub or Bitbucket.",
        "properties": {
          "deployKeyId": {
            "description": "ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.",
            "type": "string"
          },
          "url": {
            "description": "URL of the main repository at the other hosting service.",
            "type": "string"
          },
          "webhookId": {
            "description": "ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PubsubConfig": {
        "description": "Configuration to publish a Cloud Pub/Sub message.",
        "properties": {
          "messageFormat": {
            "description": "The format of the Cloud Pub/Sub messages.",
            "enum": [
              "MESSAGE_FORMAT_UNSPECIFIED",
              "PROTOBUF",
              "JSON"
            ],
            "type": "string"
          },
          "serviceAccountEmail": {
            "description": "Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.",
            "type": "string"
          },
          "topic": {
            "description": "A topic of Cloud Pub/Sub. Values are of the form `projects//topics/`. The project needs to be the same project as this config is in.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://sourcerepo.googleapis.com//v1/{parent}/repos{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A repository (or repo) is a Git repository storing versioned source content.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**mirrorConfig**: Configuration to automatically mirror a repository from another hosting service, for example GitHub or Bitbucket.",
              {
                "$ul": [
                  "**deployKeyId**: ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.",
                  "**url**: URL of the main repository at the other hosting service.",
                  "**webhookId**: ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring."
                ]
              }
            ],
            "**name**: Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes. eg, `projects/myproject/repos/name/with/slash`",
            "**pubsubConfigs**: How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.",
            "**size**: The disk usage of the repo, in bytes. Read-only field. Size is only returned by GetRepo.",
            "**url**: URL to clone the repository from Google Cloud Source Repositories. Read-only field."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
