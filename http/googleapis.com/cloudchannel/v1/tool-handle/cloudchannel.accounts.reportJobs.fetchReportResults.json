{
  "name": "cloudchannel_accounts_reportJobs_fetchReportResults",
  "description": "Retrieves data generated by CloudChannelReportsService.RunReportJob. Deprecated: Please use [Export Channel Services data to BigQuery](https://cloud.google.com/channel/docs/rebilling/export-data-to-bigquery) instead.",
  "parameters": {
    "type": "object",
    "properties": {
      "reportJob": {
        "type": "string",
        "description": "Required. The report job created by CloudChannelReportsService.RunReportJob. Report_job uses the format: accounts/{account_id}/reportJobs/{report_job_id}"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudChannelV1FetchReportResultsRequest"
      }
    },
    "required": [
      "reportJob"
    ],
    "$defs": {
      "GoogleCloudChannelV1FetchReportResultsRequest": {
        "deprecated": true,
        "description": "Request message for CloudChannelReportsService.FetchReportResults.",
        "properties": {
          "pageSize": {
            "description": "Optional. Requested page size of the report. The server may return fewer results than requested. If you don't specify a page size, the server uses a sensible default (may change over time). The maximum value is 30,000; the server will change larger values to 30,000.",
            "format": "int32",
            "type": "integer"
          },
          "pageToken": {
            "description": "Optional. A token that specifies a page of results beyond the first page. Obtained through FetchReportResultsResponse.next_page_token of the previous CloudChannelReportsService.FetchReportResults call.",
            "type": "string"
          },
          "partitionKeys": {
            "description": "Optional. List of keys specifying which report partitions to return. If empty, returns all partitions.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudchannel.googleapis.com//v1/{reportJob}:fetchReportResults{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for CloudChannelReportsService.FetchReportResults. Contains a tabular representation of the report results.",
        "**Key properties:**",
        {
          "$ul": [
            "**nextPageToken**: Pass this token to FetchReportResultsRequest.page_token to retrieve the next page of results.",
            [
              "**reportMetadata**: The features describing the data. Returned by CloudChannelReportsService.RunReportJob and CloudChannelReportsService.FetchReportResults.",
              {
                "$ul": [
                  [
                    "**dateRange**: A representation of usage or invoice date ranges.",
                    {
                      "$ul": [
                        [
                          "**invoiceEndDate**: Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
                          {
                            "$ul": [
                              "**day**: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
                              "**month**: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
                              "**year**: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
                            ]
                          }
                        ],
                        [
                          "**invoiceStartDate**: Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
                          {
                            "$ul": [
                              "**day**: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
                              "**month**: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
                              "**year**: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
                            ]
                          }
                        ],
                        [
                          "**usageEndDateTime**: Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.",
                          {
                            "$ul": [
                              "**day**: Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.",
                              "**hours**: Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                              "**minutes**: Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.",
                              "**month**: Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.",
                              "**nanos**: Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.",
                              "**seconds**: Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.",
                              [
                                "**timeZone**: Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).",
                                {
                                  "$ul": [
                                    "**id**: IANA Time Zone Database time zone, e.g. \"America/New_York\".",
                                    "**version**: Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
                                  ]
                                }
                              ],
                              "**utcOffset**: UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.",
                              "**year**: Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."
                            ]
                          }
                        ],
                        [
                          "**usageStartDateTime**: Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.",
                          {
                            "$ul": [
                              "**day**: Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.",
                              "**hours**: Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                              "**minutes**: Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.",
                              "**month**: Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.",
                              "**nanos**: Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.",
                              "**seconds**: Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.",
                              [
                                "**timeZone**: Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).",
                                {
                                  "$ul": [
                                    "**id**: IANA Time Zone Database time zone, e.g. \"America/New_York\".",
                                    "**version**: Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
                                  ]
                                }
                              ],
                              "**utcOffset**: UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.",
                              "**year**: Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**precedingDateRange**: A representation of usage or invoice date ranges.",
                    {
                      "$ul": [
                        [
                          "**invoiceEndDate**: Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
                          {
                            "$ul": [
                              "**day**: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
                              "**month**: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
                              "**year**: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
                            ]
                          }
                        ],
                        [
                          "**invoiceStartDate**: Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
                          {
                            "$ul": [
                              "**day**: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
                              "**month**: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
                              "**year**: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year."
                            ]
                          }
                        ],
                        [
                          "**usageEndDateTime**: Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.",
                          {
                            "$ul": [
                              "**day**: Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.",
                              "**hours**: Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                              "**minutes**: Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.",
                              "**month**: Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.",
                              "**nanos**: Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.",
                              "**seconds**: Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.",
                              [
                                "**timeZone**: Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).",
                                {
                                  "$ul": [
                                    "**id**: IANA Time Zone Database time zone, e.g. \"America/New_York\".",
                                    "**version**: Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
                                  ]
                                }
                              ],
                              "**utcOffset**: UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.",
                              "**year**: Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."
                            ]
                          }
                        ],
                        [
                          "**usageStartDateTime**: Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.",
                          {
                            "$ul": [
                              "**day**: Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.",
                              "**hours**: Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
                              "**minutes**: Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.",
                              "**month**: Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.",
                              "**nanos**: Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.",
                              "**seconds**: Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.",
                              [
                                "**timeZone**: Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).",
                                {
                                  "$ul": [
                                    "**id**: IANA Time Zone Database time zone, e.g. \"America/New_York\".",
                                    "**version**: Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
                                  ]
                                }
                              ],
                              "**utcOffset**: UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.",
                              "**year**: Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**report**: The ID and description of a report that was used to generate report data. For example, \"Google Cloud Daily Spend\", \"Google Workspace License Activity\", etc.",
                    {
                      "$ul": [
                        "**columns**: The list of columns included in the report. This defines the schema of the report results.",
                        "**description**: A description of other aspects of the report, such as the products it supports.",
                        "**displayName**: A human-readable name for this report.",
                        "**name**: Required. The report's resource name. Specifies the account and report used to generate report data. The report_id identifier is a UID (for example, `613bf59q`). Name uses the format: accounts/{account_id}/reports/{report_id}"
                      ]
                    }
                  ],
                  "**rowCount**: The total number of rows of data in the final report."
                ]
              }
            ],
            "**rows**: The report's lists of values. Each row follows the settings and ordering of the columns from `report_metadata`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
