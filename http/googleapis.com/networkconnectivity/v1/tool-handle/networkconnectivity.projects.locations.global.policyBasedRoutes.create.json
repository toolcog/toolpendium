{
  "name": "networkconnectivity_projects_locations_global_policyBasedRoutes_create",
  "description": "Creates a new policy-based route in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource's name of the PolicyBasedRoute."
      },
      "policyBasedRouteId": {
        "type": "string",
        "description": "Required. Unique id for the policy-based route to create."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/PolicyBasedRoute"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "PolicyBasedRoute": {
        "description": "Policy-based routes route L4 network traffic based on not just destination IP address, but also source IP address, protocol, and more. If a policy-based route conflicts with other types of routes, the policy-based route always take precedence.",
        "properties": {
          "createTime": {
            "description": "Output only. Time when the policy-based route was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. An optional description of this resource. Provide this field when you create the resource.",
            "type": "string"
          },
          "filter": {
            "$ref": "#/$defs/Filter"
          },
          "interconnectAttachment": {
            "$ref": "#/$defs/InterconnectAttachment"
          },
          "kind": {
            "description": "Output only. Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-defined labels.",
            "type": "object"
          },
          "name": {
            "description": "Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`",
            "type": "string"
          },
          "network": {
            "description": "Required. Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.",
            "type": "string"
          },
          "nextHopIlbIp": {
            "description": "Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.",
            "type": "string"
          },
          "nextHopOtherRoutes": {
            "description": "Optional. Other routes that will be referenced to determine the next hop of the packet.",
            "enum": [
              "OTHER_ROUTES_UNSPECIFIED",
              "DEFAULT_ROUTING"
            ],
            "type": "string"
          },
          "priority": {
            "description": "Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.",
            "format": "int32",
            "type": "integer"
          },
          "selfLink": {
            "description": "Output only. Server-defined fully-qualified URL for this resource.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Time when the policy-based route was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "virtualMachine": {
            "$ref": "#/$defs/VirtualMachine"
          },
          "warnings": {
            "description": "Output only. If potential misconfigurations are detected for this route, this field will be populated with warning messages.",
            "items": {
              "$ref": "#/$defs/Warnings"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "Filter": {
        "description": "Filter matches L4 traffic.",
        "properties": {
          "destRange": {
            "description": "Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.",
            "type": "string"
          },
          "ipProtocol": {
            "description": "Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.",
            "type": "string"
          },
          "protocolVersion": {
            "description": "Required. Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.",
            "enum": [
              "PROTOCOL_VERSION_UNSPECIFIED",
              "IPV4"
            ],
            "type": "string"
          },
          "srcRange": {
            "description": "Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InterconnectAttachment": {
        "description": "InterconnectAttachment that this route applies to.",
        "properties": {
          "region": {
            "description": "Optional. Cloud region to install this policy-based route on interconnect attachment. Use `all` to install it on all interconnect attachments.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VirtualMachine": {
        "description": "VM instances to which this policy-based route applies to.",
        "properties": {
          "tags": {
            "description": "Optional. A list of VM instance tags the this policy-based route applies to. VM instances that have ANY of tags specified here will install this PBR.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Warnings": {
        "description": "Informational warning message.",
        "properties": {
          "code": {
            "description": "Output only. A warning code, if applicable.",
            "enum": [
              "WARNING_UNSPECIFIED",
              "RESOURCE_NOT_ACTIVE",
              "RESOURCE_BEING_MODIFIED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "data": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. Metadata about this warning in key: value format. The key should provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement.",
            "readOnly": true,
            "type": "object"
          },
          "warningMessage": {
            "description": "Output only. A human-readable description of the warning code.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://networkconnectivity.googleapis.com//v1/{parent}/policyBasedRoutes{?policyBasedRouteId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
