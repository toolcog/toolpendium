{
  "name": "networkconnectivity_projects_locations_global_hubs_create",
  "description": "Creates a new Network Connectivity Center hub in the specified project.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource."
      },
      "hubId": {
        "type": "string",
        "description": "Required. A unique identifier for the hub."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check to see whether the original operation was received. If it was, the server ignores the second request. This behavior prevents clients from mistakenly creating duplicate commitments. The request ID must be a valid UUID, with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Hub"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Hub": {
        "description": "A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub's spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project.",
        "properties": {
          "createTime": {
            "description": "Output only. The time the hub was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "An optional description of the hub.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).",
            "type": "object"
          },
          "name": {
            "description": "Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`",
            "type": "string"
          },
          "routeTables": {
            "description": "Output only. The route tables that belong to this hub. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}` This field is read-only. Network Connectivity Center automatically populates it based on the route tables nested under the hub.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "routingVpcs": {
            "description": "The VPC networks associated with this hub's spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.",
            "items": {
              "$ref": "#/$defs/RoutingVPC"
            },
            "type": "array"
          },
          "spokeSummary": {
            "$ref": "#/$defs/SpokeSummary"
          },
          "state": {
            "description": "Output only. The current lifecycle state of this hub.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "DELETING",
              "ACCEPTING",
              "REJECTING",
              "UPDATING",
              "INACTIVE",
              "OBSOLETE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uniqueId": {
            "description": "Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time the hub was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoutingVPC": {
        "description": "RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.",
        "properties": {
          "requiredForNewSiteToSiteDataTransferSpokes": {
            "description": "Output only. If true, indicates that this VPC network is currently associated with spokes that use the data transfer feature (spokes where the site_to_site_data_transfer field is set to true). If you create new spokes that use data transfer, they must be associated with this VPC network. At most, one VPC network will have this field set to true.",
            "readOnly": true,
            "type": "boolean"
          },
          "uri": {
            "description": "The URI of the VPC network.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpokeSummary": {
        "description": "Summarizes information about the spokes associated with a hub. The summary includes a count of spokes according to type and according to state. If any spokes are inactive, the summary also lists the reasons they are inactive, including a count for each reason.",
        "properties": {
          "spokeStateCounts": {
            "description": "Output only. Counts the number of spokes that are in each state and associated with a given hub.",
            "items": {
              "$ref": "#/$defs/SpokeStateCount"
            },
            "readOnly": true,
            "type": "array"
          },
          "spokeStateReasonCounts": {
            "description": "Output only. Counts the number of spokes that are inactive for each possible reason and associated with a given hub.",
            "items": {
              "$ref": "#/$defs/SpokeStateReasonCount"
            },
            "readOnly": true,
            "type": "array"
          },
          "spokeTypeCounts": {
            "description": "Output only. Counts the number of spokes of each type that are associated with a specific hub.",
            "items": {
              "$ref": "#/$defs/SpokeTypeCount"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "SpokeStateCount": {
        "description": "The number of spokes that are in a particular state and associated with a given hub.",
        "properties": {
          "count": {
            "description": "Output only. The total number of spokes that are in this state and associated with a given hub.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of the spokes.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "DELETING",
              "ACCEPTING",
              "REJECTING",
              "UPDATING",
              "INACTIVE",
              "OBSOLETE"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpokeStateReasonCount": {
        "description": "The number of spokes in the hub that are inactive for this reason.",
        "properties": {
          "count": {
            "description": "Output only. The total number of spokes that are inactive for a particular reason and associated with a given hub.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "stateReasonCode": {
            "description": "Output only. The reason that a spoke is inactive.",
            "enum": [
              "CODE_UNSPECIFIED",
              "PENDING_REVIEW",
              "REJECTED",
              "PAUSED",
              "FAILED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpokeTypeCount": {
        "description": "The number of spokes of a given type that are associated with a specific hub. The type indicates what kind of resource is associated with the spoke.",
        "properties": {
          "count": {
            "description": "Output only. The total number of spokes of this type that are associated with the hub.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "spokeType": {
            "description": "Output only. The type of the spokes.",
            "enum": [
              "SPOKE_TYPE_UNSPECIFIED",
              "VPN_TUNNEL",
              "INTERCONNECT_ATTACHMENT",
              "ROUTER_APPLIANCE",
              "VPC_NETWORK"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://networkconnectivity.googleapis.com//v1/{parent}/hubs{?hubId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
