{
  "name": "networkconnectivity_projects_locations_spokes_patch",
  "description": "Updates the parameters of a Network Connectivity Center spoke.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`"
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check to see whether the original operation was received. If it was, the server ignores the second request. This behavior prevents clients from mistakenly creating duplicate commitments. The request ID must be a valid UUID, with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "updateMask": {
        "type": "string",
        "description": "Optional. In the case of an update to an existing spoke, field mask is used to specify the fields to be overwritten. The fields specified in the update_mask are relative to the resource, not the full request. A field is overwritten if it is in the mask. If the user does not provide a mask, then all fields are overwritten."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Spoke"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Spoke": {
        "description": "A Network Connectivity Center spoke represents one or more network connectivity resources. When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields: * linked_vpn_tunnels * linked_interconnect_attachments * linked_router_appliance_instances * linked_vpc_network",
        "properties": {
          "createTime": {
            "description": "Output only. The time the spoke was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "An optional description of the spoke.",
            "type": "string"
          },
          "group": {
            "description": "Optional. The name of the group that this spoke is associated with.",
            "type": "string"
          },
          "hub": {
            "description": "Immutable. The name of the hub that this spoke is attached to.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).",
            "type": "object"
          },
          "linkedInterconnectAttachments": {
            "$ref": "#/$defs/LinkedInterconnectAttachments"
          },
          "linkedRouterApplianceInstances": {
            "$ref": "#/$defs/LinkedRouterApplianceInstances"
          },
          "linkedVpcNetwork": {
            "$ref": "#/$defs/LinkedVpcNetwork"
          },
          "linkedVpnTunnels": {
            "$ref": "#/$defs/LinkedVpnTunnels"
          },
          "name": {
            "description": "Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`",
            "type": "string"
          },
          "reasons": {
            "description": "Output only. The reasons for current state of the spoke. Only present when the spoke is in the `INACTIVE` state.",
            "items": {
              "$ref": "#/$defs/StateReason"
            },
            "readOnly": true,
            "type": "array"
          },
          "spokeType": {
            "description": "Output only. The type of resource associated with the spoke.",
            "enum": [
              "SPOKE_TYPE_UNSPECIFIED",
              "VPN_TUNNEL",
              "INTERCONNECT_ATTACHMENT",
              "ROUTER_APPLIANCE",
              "VPC_NETWORK"
            ],
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current lifecycle state of this spoke.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "DELETING",
              "ACCEPTING",
              "REJECTING",
              "UPDATING",
              "INACTIVE",
              "OBSOLETE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uniqueId": {
            "description": "Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different `unique_id`.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time the spoke was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedInterconnectAttachments": {
        "description": "A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.",
        "properties": {
          "siteToSiteDataTransfer": {
            "description": "A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).",
            "type": "boolean"
          },
          "uris": {
            "description": "The URIs of linked interconnect attachment resources",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vpcNetwork": {
            "description": "Output only. The VPC network where these VLAN attachments are located.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedRouterApplianceInstances": {
        "description": "A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.",
        "properties": {
          "instances": {
            "description": "The list of router appliance instances.",
            "items": {
              "$ref": "#/$defs/RouterApplianceInstance"
            },
            "type": "array"
          },
          "siteToSiteDataTransfer": {
            "description": "A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).",
            "type": "boolean"
          },
          "vpcNetwork": {
            "description": "Output only. The VPC network where these router appliance instances are located.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RouterApplianceInstance": {
        "description": "A router appliance instance is a Compute Engine virtual machine (VM) instance that acts as a BGP speaker. A router appliance instance is specified by the URI of the VM and the internal IP address of one of the VM's network interfaces.",
        "properties": {
          "ipAddress": {
            "description": "The IP address on the VM to use for peering.",
            "type": "string"
          },
          "virtualMachine": {
            "description": "The URI of the VM.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedVpcNetwork": {
        "description": "An existing VPC network.",
        "properties": {
          "excludeExportRanges": {
            "description": "Optional. IP ranges encompassing the subnets to be excluded from peering.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uri": {
            "description": "Required. The URI of the VPC network resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedVpnTunnels": {
        "description": "A collection of Cloud VPN tunnel resources. These resources should be redundant HA VPN tunnels that all advertise the same prefixes to Google Cloud. Alternatively, in a passive/active configuration, all tunnels should be capable of advertising the same prefixes.",
        "properties": {
          "siteToSiteDataTransfer": {
            "description": "A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).",
            "type": "boolean"
          },
          "uris": {
            "description": "The URIs of linked VPN tunnel resources.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vpcNetwork": {
            "description": "Output only. The VPC network where these VPN tunnels are located.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StateReason": {
        "description": "The reason a spoke is inactive.",
        "properties": {
          "code": {
            "description": "The code associated with this reason.",
            "enum": [
              "CODE_UNSPECIFIED",
              "PENDING_REVIEW",
              "REJECTED",
              "PAUSED",
              "FAILED"
            ],
            "type": "string"
          },
          "message": {
            "description": "Human-readable details about this reason.",
            "type": "string"
          },
          "userDetails": {
            "description": "Additional information provided by the user in the RejectSpoke call.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://networkconnectivity.googleapis.com//v1/{name}{?requestId,updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
