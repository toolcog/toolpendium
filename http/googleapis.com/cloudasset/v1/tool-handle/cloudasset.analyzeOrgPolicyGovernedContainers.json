{
  "name": "cloudasset_analyzeOrgPolicyGovernedContainers",
  "description": "Analyzes organization policies governed containers (projects, folders or organization) under a scope.",
  "parameters": {
    "type": "object",
    "properties": {
      "scope": {
        "type": "string",
        "description": "Required. The organization to scope the request. Only organization policies within the scope will be analyzed. The output containers will also be limited to the ones governed by those in-scope organization policies. * organizations/{ORGANIZATION_NUMBER} (e.g., \"organizations/123456\")"
      },
      "constraint": {
        "type": "string",
        "description": "Required. The name of the constraint to analyze governed containers for. The analysis only contains organization policies for the provided constraint."
      },
      "filter": {
        "type": "string",
        "description": "The expression to filter AnalyzeOrgPolicyGovernedContainersResponse.governed_containers. Filtering is currently available for bare literal values and the following fields: * parent * consolidated_policy.rules.enforce When filtering by a specific field, the only supported operator is `=`. For example, filtering by parent=\"//cloudresourcemanager.googleapis.com/folders/001\" will return all the containers under \"folders/001\"."
      },
      "pageSize": {
        "type": "integer",
        "description": "The maximum number of items to return per page. If unspecified, AnalyzeOrgPolicyGovernedContainersResponse.governed_containers will contain 100 items with a maximum of 200."
      },
      "pageToken": {
        "type": "string",
        "description": "The pagination token to retrieve the next page."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "scope"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://cloudasset.googleapis.com//v1/{scope}:analyzeOrgPolicyGovernedContainers{?constraint,filter,pageSize,pageToken,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response message for AssetService.AnalyzeOrgPolicyGovernedContainers.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**constraint**: The organization policy constraint definition.",
              {
                "$ul": [
                  [
                    "**customConstraint**: The definition of a custom constraint.",
                    {
                      "$ul": [
                        "**actionType**: Allow or deny type.",
                        "**condition**: Organization Policy condition/expression. For example: `resource.instanceName.matches(\"[production|test]_.*_(\\d)+\")'` or, `resource.management.auto_upgrade == true`",
                        "**description**: Detailed information about this custom policy constraint.",
                        "**displayName**: One line display name for the UI.",
                        "**methodTypes**: All the operations being applied for this constraint.",
                        "**name**: Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : \"organizations/123/customConstraints/custom.createOnlyE2TypeVms\"",
                        "**resourceTypes**: The Resource Instance type on which this policy applies to. Format will be of the form : \"/\" Example: * `compute.googleapis.com/Instance`."
                      ]
                    }
                  ],
                  [
                    "**googleDefinedConstraint**: The definition of a constraint.",
                    {
                      "$ul": [
                        "**booleanConstraint**: A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.",
                        "**constraintDefault**: The evaluation behavior of this constraint in the absence of 'Policy'.",
                        "**description**: Detailed description of what this `Constraint` controls as well as how and where it is enforced.",
                        "**displayName**: The human readable name of the constraint.",
                        [
                          "**listConstraint**: A `Constraint` that allows or disallows a list of string values, which are configured by an organization's policy administrator with a `Policy`.",
                          {
                            "$ul": [
                              "**supportsIn**: Indicates whether values grouped into categories can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"in:Python\"` would match any value in the 'Python' group.",
                              "**supportsUnder**: Indicates whether subtrees of Cloud Resource Manager resource hierarchy can be used in `Policy.allowed_values` and `Policy.denied_values`. For example, `\"under:folders/123\"` would match any resource under the 'folders/123' folder."
                            ]
                          }
                        ],
                        "**name**: The unique name of the constraint. Format of the name should be * `constraints/{constraint_name}` For example, `constraints/compute.disableSerialPortAccess`."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**governedContainers**: The list of the analyzed governed containers.",
            "**nextPageToken**: The page token to fetch the next page for AnalyzeOrgPolicyGovernedContainersResponse.governed_containers."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
