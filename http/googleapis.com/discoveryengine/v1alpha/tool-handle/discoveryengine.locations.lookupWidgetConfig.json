{
  "name": "discoveryengine_locations_lookupWidgetConfig",
  "description": "Gets the Widget Config using the uuid.",
  "parameters": {
    "type": "object",
    "properties": {
      "location": {
        "type": "string",
        "description": "Required. The location resource where lookup widget will be performed. Format: `locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest"
      }
    },
    "required": [
      "location"
    ],
    "$defs": {
      "GoogleCloudDiscoveryengineV1alphaLookupWidgetConfigRequest": {
        "description": "Request message for WidgetService.LookupWidgetConfig method.",
        "properties": {
          "widgetConfigId": {
            "description": "Required. The UUID of the Widget Config.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://discoveryengine.googleapis.com//v1alpha/{location}/lookupWidgetConfig{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for WidgetService.LookupWidgetConfig method.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**anonymousWidgetConfig**: WidgetConfig captures configs at the Widget level.",
              {
                "$ul": [
                  "**allowPublicAccess**: Whether allow no-auth integration with widget. If set true, public access to search or other solutions from widget is allowed without authenication token provided by customer hosted backend server.",
                  "**allowlistedDomains**: Allowlisted domains that can load this widget.",
                  "**configId**: Output only. Unique obfuscated identifier of a WidgetConfig.",
                  [
                    "**contentSearchSpec**: A specification for configuring the behavior of content search.",
                    {
                      "$ul": [
                        [
                          "**extractiveContentSpec**: A specification for configuring the extractive content in a search response.",
                          {
                            "$ul": [
                              "**maxExtractiveAnswerCount**: The maximum number of extractive answers returned in each search result. An extractive answer is a verbatim answer extracted from the original document, which provides a precise and contextually relevant answer to the search query. If the number of matching answers is less than the `max_extractive_answer_count`, return all of the answers. Otherwise, return the `max_extractive_answer_count`. At most five answers are returned for each SearchResult.",
                              "**maxExtractiveSegmentCount**: The max number of extractive segments returned in each search result. Only applied if the DataStore is set to DataStore.ContentConfig.CONTENT_REQUIRED or DataStore.solution_types is SOLUTION_TYPE_CHAT. An extractive segment is a text segment extracted from the original document that is relevant to the search query, and, in general, more verbose than an extractive answer. The segment could then be used as input for LLMs to generate summaries and answers. If the number of matching segments is less than `max_extractive_segment_count`, return all of the segments. Otherwise, return the `max_extractive_segment_count`.",
                              "**numNextSegments**: Return at most `num_next_segments` segments after each selected segments.",
                              "**numPreviousSegments**: Specifies whether to also include the adjacent from each selected segments. Return at most `num_previous_segments` segments before each selected segments."
                            ]
                          }
                        ],
                        [
                          "**snippetSpec**: A specification for configuring snippets in a search response.",
                          {
                            "$ul": [
                              "**maxSnippetCount**: [DEPRECATED] This field is deprecated. To control snippet return, use `return_snippet` field. For backwards compatibility, we will return snippet if max_snippet_count > 0.",
                              "**referenceOnly**: [DEPRECATED] This field is deprecated and will have no affect on the snippet.",
                              "**returnSnippet**: If `true`, then return snippet. If no snippet can be generated, we return \"No snippet is available for this page.\" A `snippet_status` with `SUCCESS` or `NO_SNIPPET_AVAILABLE` will also be returned."
                            ]
                          }
                        ],
                        [
                          "**summarySpec**: A specification for configuring a summary returned in a search response.",
                          {
                            "$ul": [
                              "**ignoreAdversarialQuery**: Specifies whether to filter out adversarial queries. The default value is `false`. Google employs search-query classification to detect adversarial queries. No summary is returned if the search query is classified as an adversarial query. For example, a user might ask a question regarding negative comments about the company or submit a query designed to generate unsafe, policy-violating output. If this field is set to `true`, we skip generating summaries for adversarial queries and return fallback messages instead.",
                              "**ignoreNonSummarySeekingQuery**: Specifies whether to filter out queries that are not summary-seeking. The default value is `false`. Google employs search-query classification to detect summary-seeking queries. No summary is returned if the search query is classified as a non-summary seeking query. For example, `why is the sky blue` and `Who is the best soccer player in the world?` are summary-seeking queries, but `SFO airport` and `world cup 2026` are not. They are most likely navigational queries. If this field is set to `true`, we skip generating summaries for non-summary seeking queries and return fallback messages instead.",
                              "**includeCitations**: Specifies whether to include citations in the summary. The default value is `false`. When this field is set to `true`, summaries include in-line citation numbers. Example summary including citations: BigQuery is Google Cloud's fully managed and completely serverless enterprise data warehouse [1]. BigQuery supports all data types, works across clouds, and has built-in machine learning and business intelligence, all within a unified platform [2, 3]. The citation numbers refer to the returned search results and are 1-indexed. For example, [1] means that the sentence is attributed to the first search result. [2, 3] means that the sentence is attributed to both the second and third search results.",
                              "**languageCode**: Language code for Summary. Use language tags defined by [BCP47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Note: This is an experimental feature.",
                              [
                                "**modelPromptSpec**: Specification of the prompt to use with the model.",
                                {
                                  "$ul": [
                                    "**preamble**: Text at the beginning of the prompt that instructs the assistant. Examples are available in the user guide."
                                  ]
                                }
                              ],
                              [
                                "**modelSpec**: Specification of the model.",
                                {
                                  "$ul": [
                                    "**version**: The model version used to generate the summary. Supported values are: * `stable`: string. Default value when no value is specified. Uses a generally available, fine-tuned version of the text-bison@001 model. * `preview`: string. (Public preview) Uses a fine-tuned version of the text-bison@002 model. This model works only for summaries in English."
                                  ]
                                }
                              ],
                              "**summaryResultCount**: The number of top results to generate the summary from. If the number of results returned is less than `summaryResultCount`, the summary is generated from all of the results. At most five results can be used to generate a summary."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**createTime**: Output only. Timestamp the WidgetConfig was created.",
                  "**dataStoreType**: Output only. The type of the parent data store.",
                  "**displayName**: Required. The human readable widget config display name. Used in Discovery UI. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.",
                  "**enableAutocomplete**: Whether or not to enable autocomplete.",
                  "**enableConversationalSearch**: Whether to allow conversational search (LLM, multi-turn) or not (non-LLM, single-turn).",
                  "**enableQualityFeedback**: Turn on or off collecting the search result quality feedback from end users.",
                  "**enableResultScore**: Whether to show the result score.",
                  "**enableSafeSearch**: Whether to enable safe search.",
                  "**enableSnippetResultSummary**: Turn on or off summary for each snippets result.",
                  "**enableSummarization**: Turn on or off summarization for the search response.",
                  "**enableWebApp**: Whether to enable standalone web app.",
                  "**facetField**: The configuration and appearance of facets in the end user view.",
                  "**fieldsUiComponentsMap**: The key is the UI component. Mock. Currently supported `title`, `thumbnail`, `url`, `custom1`, `custom2`, `custom3`. The value is the name of the field along with its device visibility. The 3 custom fields are optional and can be added or removed. `title`, `thumbnail`, `url` are required UI components that cannot be removed.",
                  "**industryVertical**: Output only. The industry vertical that the WidgetConfig registers. The WidgetConfig industry vertical is based on the associated Engine.",
                  "**llmEnabled**: Output only. Whether LLM is enabled in the corresponding data store.",
                  "**minimumDataTermAccepted**: Output only. Whether the customer accepted data use terms.",
                  "**name**: Immutable. The full resource name of the widget config. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/widgetConfigs/{widget_config_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.",
                  "**resultDisplayType**: The type of snippet to display in UCS widget. - RESULT_DISPLAY_TYPE_UNSPECIFIED for existing users. - SNIPPET for new non-enterprise search users. - EXTRACTIVE_ANSWER for new enterprise search users.",
                  "**solutionType**: Required. Immutable. Specifies the solution type that this WidgetConfig can be used for.",
                  "**updateTime**: Output only. Timestamp the WidgetConfig was updated."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
