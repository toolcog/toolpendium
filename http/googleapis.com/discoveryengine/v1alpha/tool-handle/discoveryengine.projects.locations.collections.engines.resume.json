{
  "name": "discoveryengine_projects_locations_collections_engines_resume",
  "description": "Resumes the training of an existing engine. Only applicable if SolutionType is SOLUTION_TYPE_RECOMMENDATION.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the engine to resume. Format: `projects/{project_number}/locations/{location_id}/collections/{collection_id}/engines/{engine_id}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDiscoveryengineV1alphaResumeEngineRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudDiscoveryengineV1alphaResumeEngineRequest": {
        "description": "Request for resuming training of an engine.",
        "properties": {},
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://discoveryengine.googleapis.com//v1alpha/{name}:resume{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Metadata that describes the training and serving parameters of an Engine.",
        "**Key properties:**",
        {
          "$ul": [
            "**allowMultipleDataStoresSearchEngine**: Whether the search engine can associate with multiple data stores. If true, the generic search engine can associate with one or more data stores. This is an input-only field.",
            [
              "**chatEngineConfig**: Configurations for a Chat Engine.",
              {
                "$ul": [
                  [
                    "**agentCreationConfig**: Configurations for generating a Dialogflow agent. Note that these configurations are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation.",
                    {
                      "$ul": [
                        "**business**: Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.",
                        "**defaultLanguageCode**: Required. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.",
                        "**location**: Agent location for Agent creation, supported values: global/us/eu. If not provided, us Engine will create Agent using us-central-1 by default; eu Engine will create Agent using eu-west-1 by default.",
                        "**timeZone**: Required. The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris."
                      ]
                    }
                  ],
                  "**dialogflowAgentToLink**: The resource name of an exist Dialogflow agent to link to this Chat Engine. Customers can either provide `agent_creation_config` to create agent or provide an agent name that links the agent with the Chat engine. Format: `projects//locations//agents/`. Note that the `dialogflow_agent_to_link` are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation. Please use ChatEngineMetadata.dialogflow_agent for actual agent association after Engine is created."
                ]
              }
            ],
            [
              "**chatEngineMetadata**: Additional information of a Chat Engine. Fields in this message are output only.",
              {
                "$ul": [
                  "**dialogflowAgent**: The resource name of a Dialogflow agent, that this Chat Engine refers to. Format: `projects//locations//agents/`."
                ]
              }
            ],
            [
              "**commonConfig**: Common configurations for an Engine.",
              {
                "$ul": [
                  "**companyName**: Immutable. The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features."
                ]
              }
            ],
            "**createTime**: Output only. Timestamp the Recommendation Engine was created at.",
            "**dataStoreIds**: The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.",
            "**displayName**: Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.",
            "**industryVertical**: The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.",
            [
              "**mediaRecommendationEngineConfig**: Additional config specs for a Media Recommendation engine.",
              {
                "$ul": [
                  "**optimizationObjective**: The optimization objective. e.g., `cvr`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `ctr`, `cvr`. If not specified, we choose default based on engine type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr`",
                  [
                    "**optimizationObjectiveConfig**: Custom threshold for `cvr` optimization_objective.",
                    {
                      "$ul": [
                        "**targetField**: Required. The name of the field to target. Currently supported values: `watch-percentage`, `watch-time`.",
                        "**targetFieldValueFloat**: Required. The threshold to be applied to the target (e.g., 0.5)."
                      ]
                    }
                  ],
                  "**trainingState**: The training state that the engine is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train engine in order to control cost. If not specified: the default value for `CreateEngine` method is `TRAINING`. The default value for `UpdateEngine` method is to keep the state the same as before.",
                  "**type**: Required. The type of engine. e.g., `recommended-for-you`. This field together with optimization_objective describe engine metadata to use to control engine training and serving. Currently supported values: `recommended-for-you`, `others-you-may-like`, `more-like-this`, `most-popular-items`."
                ]
              }
            ],
            "**name**: Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.",
            [
              "**recommendationMetadata**: Additional information of a recommendation engine.",
              {
                "$ul": [
                  "**dataState**: Output only. The state of data requirements for this engine: `DATA_OK` and `DATA_ERROR`. Engine cannot be trained if the data is in `DATA_ERROR` state. Engine can have `DATA_ERROR` state even if serving state is `ACTIVE`: engines were trained successfully before, but cannot be refreshed because the underlying engine no longer has sufficient data for training.",
                  "**lastTuneTime**: Output only. The timestamp when the latest successful tune finished. Only applicable on Media Recommendation engines.",
                  "**servingState**: Output only. The serving state of the engine: `ACTIVE`, `NOT_ACTIVE`.",
                  "**tuningOperation**: Output only. The latest tune operation id associated with the engine. Only applicable on Media Recommendation engines. If present, this operation id can be used to determine if there is an ongoing tune for this engine. To check the operation status, send the GetOperation request with this operation id in the engine resource format. If no tuning has happened for this engine, the string is empty."
                ]
              }
            ],
            [
              "**searchEngineConfig**: Configurations for a Search Engine.",
              {
                "$ul": [
                  "**searchAddOns**: The add-on that this search engine enables.",
                  "**searchTier**: The search feature tier of this engine. Different tiers might have different pricing. To learn more, please check the pricing documentation. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified."
                ]
              }
            ],
            "**similarDocumentsConfig**: Additional config specs for a `similar-items` engine.",
            "**solutionType**: Required. The solutions of the engine.",
            "**updateTime**: Output only. Timestamp the Recommendation Engine was last updated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
