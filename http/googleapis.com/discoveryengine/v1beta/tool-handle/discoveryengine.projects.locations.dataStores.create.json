{
  "name": "discoveryengine_projects_locations_dataStores_create",
  "description": "Creates a DataStore. DataStore is for storing Documents. To serve these documents for Search, or Recommendation use case, an Engine needs to be created separately.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource name, such as `projects/{project}/locations/{location}/collections/{collection}`."
      },
      "createAdvancedSiteSearch": {
        "type": "boolean",
        "description": "A boolean flag indicating whether user want to directly create an advanced data store for site search. If the data store is not configured as site search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will be ignored."
      },
      "dataStoreId": {
        "type": "string",
        "description": "Required. The ID to use for the DataStore, which will become the final component of the DataStore's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaDataStore"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDiscoveryengineV1betaDataStore": {
        "description": "DataStore captures global settings and configs at the DataStore level.",
        "properties": {
          "contentConfig": {
            "description": "Immutable. The content config of the data store. If this field is unset, the server behavior defaults to ContentConfig.NO_CONTENT.",
            "enum": [
              "CONTENT_CONFIG_UNSPECIFIED",
              "NO_CONTENT",
              "CONTENT_REQUIRED",
              "PUBLIC_WEBSITE"
            ],
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Timestamp the DataStore was created at.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "defaultSchemaId": {
            "description": "Output only. The id of the default Schema asscociated to this data store.",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Required. The data store display name. This field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an INVALID_ARGUMENT error is returned.",
            "type": "string"
          },
          "documentProcessingConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig"
          },
          "industryVertical": {
            "description": "Immutable. The industry vertical that the data store registers.",
            "enum": [
              "INDUSTRY_VERTICAL_UNSPECIFIED",
              "GENERIC",
              "MEDIA"
            ],
            "type": "string"
          },
          "name": {
            "description": "Immutable. The full resource name of the data store. Format: `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.",
            "type": "string"
          },
          "solutionTypes": {
            "description": "The solutions that the data store enrolls. Available solutions for each industry_vertical: * `MEDIA`: `SOLUTION_TYPE_RECOMMENDATION` and `SOLUTION_TYPE_SEARCH`. * `SITE_SEARCH`: `SOLUTION_TYPE_SEARCH` is automatically enrolled. Other solutions cannot be enrolled.",
            "items": {
              "enum": [
                "SOLUTION_TYPE_UNSPECIFIED",
                "SOLUTION_TYPE_RECOMMENDATION",
                "SOLUTION_TYPE_SEARCH",
                "SOLUTION_TYPE_CHAT"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "startingSchema": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSchema"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaDocumentProcessingConfig": {
        "description": "A singleton resource of DataStore. It's empty when DataStore is created, which defaults to digital parser. The first call to DataStoreService.UpdateDocumentProcessingConfig method will initialize the config.",
        "properties": {
          "defaultParsingConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig"
          },
          "name": {
            "description": "The full resource name of the Document Processing Config. Format: `projects/*/locations/*/collections/*/dataStores/*/documentProcessingConfig`.",
            "type": "string"
          },
          "parsingConfigOverrides": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig"
            },
            "description": "Map from file type to override the default parsing configuration based on the file type. Supported keys: * `pdf`: Override parsing config for PDF files, either digital parsing, ocr parsing or layout parsing is supported. * `html`: Override parsing config for HTML files, only digital parsing and or layout parsing are supported. * `docx`: Override parsing config for DOCX files, only digital parsing and or layout parsing are supported.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaDocumentProcessingConfigParsingConfig": {
        "description": "Related configurations applied to a specific type of document parser.",
        "properties": {
          "digitalParsingConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaDigitalParsingConfig"
          },
          "ocrParsingConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaOcrParsingConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaDigitalParsingConfig": {
        "description": "The digital parsing configurations for documents.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaOcrParsingConfig": {
        "description": "The OCR parsing configurations for documents.",
        "properties": {
          "enhancedDocumentElements": {
            "description": "Apply additional enhanced OCR processing to a list of document elements. Supported values: * `table`: advanced table parsing model.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "useNativeText": {
            "description": "If true, will use native text instead of OCR text on pages containing native text.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSchema": {
        "description": "Defines the structure and layout of a type of document data.",
        "properties": {
          "jsonSchema": {
            "description": "The JSON representation of the schema.",
            "type": "string"
          },
          "name": {
            "description": "Immutable. The full resource name of the schema, in the format of `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`. This field must be a UTF-8 encoded string with a length limit of 1024 characters.",
            "type": "string"
          },
          "structSchema": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "The structured representation of the schema.",
            "type": "object"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://discoveryengine.googleapis.com//v1beta/{parent}/dataStores{?createAdvancedSiteSearch,dataStoreId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
