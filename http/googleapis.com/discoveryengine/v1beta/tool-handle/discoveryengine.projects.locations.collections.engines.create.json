{
  "name": "discoveryengine_projects_locations_collections_engines_create",
  "description": "Creates a Engine.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource name, such as `projects/{project}/locations/{location}/collections/{collection}`."
      },
      "engineId": {
        "type": "string",
        "description": "Required. The ID to use for the Engine, which will become the final component of the Engine's resource name. This field must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaEngine"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDiscoveryengineV1betaEngine": {
        "description": "Metadata that describes the training and serving parameters of an Engine.",
        "properties": {
          "chatEngineConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig"
          },
          "chatEngineMetadata": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata"
          },
          "commonConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaEngineCommonConfig"
          },
          "createTime": {
            "description": "Output only. Timestamp the Recommendation Engine was created at.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dataStoreIds": {
            "description": "The data stores associated with this engine. For SOLUTION_TYPE_SEARCH and SOLUTION_TYPE_RECOMMENDATION type of engines, they can only associate with at most one data store. If solution_type is SOLUTION_TYPE_CHAT, multiple DataStores in the same Collection can be associated here. Note that when used in CreateEngineRequest, one DataStore id must be provided as the system will use it for necessary initializations.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "displayName": {
            "description": "Required. The display name of the engine. Should be human readable. UTF-8 encoded string with limit of 1024 characters.",
            "type": "string"
          },
          "industryVertical": {
            "description": "The industry vertical that the engine registers. The restriction of the Engine industry vertical is based on DataStore: If unspecified, default to `GENERIC`. Vertical on Engine has to match vertical of the DataStore liniked to the engine.",
            "enum": [
              "INDUSTRY_VERTICAL_UNSPECIFIED",
              "GENERIC",
              "MEDIA"
            ],
            "type": "string"
          },
          "name": {
            "description": "Immutable. The fully qualified resource name of the engine. This field must be a UTF-8 encoded string with a length limit of 1024 characters. Format: `projects/{project_number}/locations/{location}/collections/{collection}/engines/{engine}` engine should be 1-63 characters, and valid characters are /a-z0-9*/. Otherwise, an INVALID_ARGUMENT error is returned.",
            "type": "string"
          },
          "searchEngineConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig"
          },
          "solutionType": {
            "description": "Required. The solutions of the engine.",
            "enum": [
              "SOLUTION_TYPE_UNSPECIFIED",
              "SOLUTION_TYPE_RECOMMENDATION",
              "SOLUTION_TYPE_SEARCH",
              "SOLUTION_TYPE_CHAT"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp the Recommendation Engine was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaEngineChatEngineConfig": {
        "description": "Configurations for a Chat Engine.",
        "properties": {
          "agentCreationConfig": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaEngineChatEngineConfigAgentCreationConfig"
          },
          "dialogflowAgentToLink": {
            "description": "The resource name of an exist Dialogflow agent to link to this Chat Engine. Customers can either provide `agent_creation_config` to create agent or provide an agent name that links the agent with the Chat engine. Format: `projects//locations//agents/`. Note that the `dialogflow_agent_to_link` are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation. Please use ChatEngineMetadata.dialogflow_agent for actual agent association after Engine is created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaEngineChatEngineConfigAgentCreationConfig": {
        "description": "Configurations for generating a Dialogflow agent. Note that these configurations are one-time consumed by and passed to Dialogflow service. It means they cannot be retrieved using EngineService.GetEngine or EngineService.ListEngines API after engine creation.",
        "properties": {
          "business": {
            "description": "Name of the company, organization or other entity that the agent represents. Used for knowledge connector LLM prompt and for knowledge search.",
            "type": "string"
          },
          "defaultLanguageCode": {
            "description": "Required. The default language of the agent as a language tag. See [Language Support](https://cloud.google.com/dialogflow/docs/reference/language) for a list of the currently supported language codes.",
            "type": "string"
          },
          "location": {
            "description": "Agent location for Agent creation, supported values: global/us/eu. If not provided, us Engine will create Agent using us-central-1 by default; eu Engine will create Agent using eu-west-1 by default.",
            "type": "string"
          },
          "timeZone": {
            "description": "Required. The time zone of the agent from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaEngineChatEngineMetadata": {
        "description": "Additional information of a Chat Engine. Fields in this message are output only.",
        "properties": {
          "dialogflowAgent": {
            "description": "The resource name of a Dialogflow agent, that this Chat Engine refers to. Format: `projects//locations//agents/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaEngineCommonConfig": {
        "description": "Common configurations for an Engine.",
        "properties": {
          "companyName": {
            "description": "Immutable. The name of the company, business or entity that is associated with the engine. Setting this may help improve LLM related features.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaEngineSearchEngineConfig": {
        "description": "Configurations for a Search Engine.",
        "properties": {
          "searchAddOns": {
            "description": "The add-on that this search engine enables.",
            "items": {
              "enum": [
                "SEARCH_ADD_ON_UNSPECIFIED",
                "SEARCH_ADD_ON_LLM"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "searchTier": {
            "description": "The search feature tier of this engine. Different tiers might have different pricing. To learn more, please check the pricing documentation. Defaults to SearchTier.SEARCH_TIER_STANDARD if not specified.",
            "enum": [
              "SEARCH_TIER_UNSPECIFIED",
              "SEARCH_TIER_STANDARD",
              "SEARCH_TIER_ENTERPRISE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://discoveryengine.googleapis.com//v1beta/{parent}/engines{?engineId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
