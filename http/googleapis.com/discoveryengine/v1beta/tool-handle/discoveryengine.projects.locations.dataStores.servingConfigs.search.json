{
  "name": "discoveryengine_projects_locations_dataStores_servingConfigs_search",
  "description": "Performs a search.",
  "parameters": {
    "type": "object",
    "properties": {
      "servingConfig": {
        "type": "string",
        "description": "Required. The resource name of the Search serving config, such as `projects/*/locations/global/collections/default_collection/engines/*/servingConfigs/default_serving_config`, or `projects/*/locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`. This field is used to identify the serving configuration name, set of models used to make the search."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequest"
      }
    },
    "required": [
      "servingConfig"
    ],
    "$defs": {
      "GoogleCloudDiscoveryengineV1betaSearchRequest": {
        "description": "Request message for SearchService.Search method.",
        "properties": {
          "boostSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec"
          },
          "branch": {
            "description": "The branch resource name, such as `projects/*/locations/global/collections/default_collection/dataStores/default_data_store/branches/0`. Use `default_branch` as the branch ID or leave this field empty, to search documents under the default branch.",
            "type": "string"
          },
          "canonicalFilter": {
            "description": "The default filter that is applied when a user performs a search without checking any filters on the search page. The filter applied to every search request when quality improvement such as query expansion is needed. In the case a query does not have a sufficient amount of results this filter will be used to determine whether or not to enable the query expansion flow. The original filter will still be used for the query expanded search. This field is strongly recommended to achieve high search quality. For more information about filter syntax, see SearchRequest.filter.",
            "type": "string"
          },
          "contentSearchSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpec"
          },
          "embeddingSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpec"
          },
          "facetSpecs": {
            "description": "Facet specifications for faceted search. If empty, no facets are returned. A maximum of 100 values are allowed. Otherwise, an `INVALID_ARGUMENT` error is returned.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestFacetSpec"
            },
            "type": "array"
          },
          "filter": {
            "description": "The filter syntax consists of an expression language for constructing a predicate from one or more fields of the documents being filtered. Filter expression is case-sensitive. If this field is unrecognizable, an `INVALID_ARGUMENT` is returned. Filtering in Vertex AI Search is done by mapping the LHS filter key to a key property defined in the Vertex AI Search backend -- this mapping is defined by the customer in their schema. For example a media customer might have a field 'name' in their schema. In this case the filter would look like this: filter --> name:'ANY(\"king kong\")' For more information about filtering including syntax and filter operators, see [Filter](https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata)",
            "type": "string"
          },
          "imageQuery": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestImageQuery"
          },
          "offset": {
            "description": "A 0-indexed integer that specifies the current offset (that is, starting result location, amongst the Documents deemed by the API as relevant) in search results. This field is only considered if page_token is unset. If this field is negative, an `INVALID_ARGUMENT` is returned.",
            "format": "int32",
            "type": "integer"
          },
          "orderBy": {
            "description": "The order in which documents are returned. Documents can be ordered by a field in an Document object. Leave it unset if ordered by relevance. `order_by` expression is case-sensitive. For more information on ordering, see [Ordering](https://cloud.google.com/retail/docs/filter-and-order#order) If this field is unrecognizable, an `INVALID_ARGUMENT` is returned.",
            "type": "string"
          },
          "pageSize": {
            "description": "Maximum number of Documents to return. If unspecified, defaults to a reasonable value. The maximum allowed value is 100. Values above 100 are coerced to 100. If this field is negative, an `INVALID_ARGUMENT` is returned.",
            "format": "int32",
            "type": "integer"
          },
          "pageToken": {
            "description": "A page token received from a previous SearchService.Search call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to SearchService.Search must match the call that provided the page token. Otherwise, an `INVALID_ARGUMENT` error is returned.",
            "type": "string"
          },
          "params": {
            "additionalProperties": {},
            "description": "Additional search parameters. For public website search only, supported values are: * `user_country_code`: string. Default empty. If set to non-empty, results are restricted or boosted based on the location provided. Example: user_country_code: \"au\" For available codes see [Country Codes](https://developers.google.com/custom-search/docs/json_api_reference#countryCodes) * `search_type`: double. Default empty. Enables non-webpage searching depending on the value. The only valid non-default value is 1, which enables image searching. Example: search_type: 1",
            "type": "object"
          },
          "query": {
            "description": "Raw search query.",
            "type": "string"
          },
          "queryExpansionSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestQueryExpansionSpec"
          },
          "rankingExpression": {
            "description": "The ranking expression controls the customized ranking on retrieval documents. This overrides ServingConfig.ranking_expression. The ranking expression is a single function or multiple functions that are joint by \"+\". * ranking_expression = function, { \" + \", function }; Supported functions: * double * relevance_score * double * dotProduct(embedding_field_path) Function variables: `relevance_score`: pre-defined keywords, used for measure relevance between query and document. `embedding_field_path`: the document embedding field used with query embedding vector. `dotProduct`: embedding function between embedding_field_path and query embedding vector. Example ranking expression: If document has an embedding field doc_embedding, the ranking expression could be `0.5 * relevance_score + 0.3 * dotProduct(doc_embedding)`.",
            "type": "string"
          },
          "safeSearch": {
            "description": "Whether to turn on safe search. This is only supported for website search.",
            "type": "boolean"
          },
          "spellCorrectionSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestSpellCorrectionSpec"
          },
          "userInfo": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaUserInfo"
          },
          "userLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The user labels applied to a resource must meet the following requirements: * Each resource can have multiple labels, up to a maximum of 64. * Each label must be a key-value pair. * Keys have a minimum length of 1 character and a maximum length of 63 characters and cannot be empty. Values can be empty and have a maximum length of 63 characters. * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. All characters must use UTF-8 encoding, and international characters are allowed. * The key portion of a label must be unique. However, you can use the same key with multiple resources. * Keys must start with a lowercase letter or international character. See [Google Cloud Document](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements) for more details.",
            "type": "object"
          },
          "userPseudoId": {
            "description": "A unique identifier for tracking visitors. For example, this could be implemented with an HTTP cookie, which should be able to uniquely identify a visitor on a single device. This unique identifier should not change if the visitor logs in or out of the website. This field should NOT have a fixed value such as `unknown_visitor`. This should be the same identifier as UserEvent.user_pseudo_id and CompleteQueryRequest.user_pseudo_id The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpec": {
        "description": "Boost specification to boost certain documents.",
        "properties": {
          "conditionBoostSpecs": {
            "description": "Condition boost specifications. If a document matches multiple conditions in the specifictions, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 20.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpecConditionBoostSpec"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestBoostSpecConditionBoostSpec": {
        "description": "Boost applies to documents which match a condition.",
        "properties": {
          "boost": {
            "description": "Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the document a big promotion. However, it does not necessarily mean that the boosted document will be the top result at all times, nor that other documents will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant documents. Setting to -1.0 gives the document a big demotion. However, results that are deeply relevant might still be shown. The document will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.",
            "format": "float",
            "type": "number"
          },
          "condition": {
            "description": "An expression which specifies a boost condition. The syntax and supported fields are the same as a filter expression. See SearchRequest.filter for detail syntax and limitations. Examples: * To boost documents with document ID \"doc_1\" or \"doc_2\", and color \"Red\" or \"Blue\": * (document_id: ANY(\"doc_1\", \"doc_2\")) AND (color: ANY(\"Red\", \"Blue\"))",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpec": {
        "description": "A specification for configuring the behavior of content search.",
        "properties": {
          "extractiveContentSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec"
          },
          "snippetSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec"
          },
          "summarySpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecExtractiveContentSpec": {
        "description": "A specification for configuring the extractive content in a search response.",
        "properties": {
          "maxExtractiveAnswerCount": {
            "description": "The maximum number of extractive answers returned in each search result. An extractive answer is a verbatim answer extracted from the original document, which provides a precise and contextually relevant answer to the search query. If the number of matching answers is less than the `max_extractive_answer_count`, return all of the answers. Otherwise, return the `max_extractive_answer_count`. At most five answers are returned for each SearchResult.",
            "format": "int32",
            "type": "integer"
          },
          "maxExtractiveSegmentCount": {
            "description": "The max number of extractive segments returned in each search result. Only applied if the DataStore is set to DataStore.ContentConfig.CONTENT_REQUIRED or DataStore.solution_types is SOLUTION_TYPE_CHAT. An extractive segment is a text segment extracted from the original document that is relevant to the search query, and, in general, more verbose than an extractive answer. The segment could then be used as input for LLMs to generate summaries and answers. If the number of matching segments is less than `max_extractive_segment_count`, return all of the segments. Otherwise, return the `max_extractive_segment_count`.",
            "format": "int32",
            "type": "integer"
          },
          "numNextSegments": {
            "description": "Return at most `num_next_segments` segments after each selected segments.",
            "format": "int32",
            "type": "integer"
          },
          "numPreviousSegments": {
            "description": "Specifies whether to also include the adjacent from each selected segments. Return at most `num_previous_segments` segments before each selected segments.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSnippetSpec": {
        "description": "A specification for configuring snippets in a search response.",
        "properties": {
          "maxSnippetCount": {
            "deprecated": true,
            "description": "[DEPRECATED] This field is deprecated. To control snippet return, use `return_snippet` field. For backwards compatibility, we will return snippet if max_snippet_count > 0.",
            "format": "int32",
            "type": "integer"
          },
          "referenceOnly": {
            "deprecated": true,
            "description": "[DEPRECATED] This field is deprecated and will have no affect on the snippet.",
            "type": "boolean"
          },
          "returnSnippet": {
            "description": "If `true`, then return snippet. If no snippet can be generated, we return \"No snippet is available for this page.\" A `snippet_status` with `SUCCESS` or `NO_SNIPPET_AVAILABLE` will also be returned.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpec": {
        "description": "A specification for configuring a summary returned in a search response.",
        "properties": {
          "ignoreAdversarialQuery": {
            "description": "Specifies whether to filter out adversarial queries. The default value is `false`. Google employs search-query classification to detect adversarial queries. No summary is returned if the search query is classified as an adversarial query. For example, a user might ask a question regarding negative comments about the company or submit a query designed to generate unsafe, policy-violating output. If this field is set to `true`, we skip generating summaries for adversarial queries and return fallback messages instead.",
            "type": "boolean"
          },
          "ignoreNonSummarySeekingQuery": {
            "description": "Specifies whether to filter out queries that are not summary-seeking. The default value is `false`. Google employs search-query classification to detect summary-seeking queries. No summary is returned if the search query is classified as a non-summary seeking query. For example, `why is the sky blue` and `Who is the best soccer player in the world?` are summary-seeking queries, but `SFO airport` and `world cup 2026` are not. They are most likely navigational queries. If this field is set to `true`, we skip generating summaries for non-summary seeking queries and return fallback messages instead.",
            "type": "boolean"
          },
          "includeCitations": {
            "description": "Specifies whether to include citations in the summary. The default value is `false`. When this field is set to `true`, summaries include in-line citation numbers. Example summary including citations: BigQuery is Google Cloud's fully managed and completely serverless enterprise data warehouse [1]. BigQuery supports all data types, works across clouds, and has built-in machine learning and business intelligence, all within a unified platform [2, 3]. The citation numbers refer to the returned search results and are 1-indexed. For example, [1] means that the sentence is attributed to the first search result. [2, 3] means that the sentence is attributed to both the second and third search results.",
            "type": "boolean"
          },
          "languageCode": {
            "description": "Language code for Summary. Use language tags defined by [BCP47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Note: This is an experimental feature.",
            "type": "string"
          },
          "modelPromptSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpecModelPromptSpec"
          },
          "modelSpec": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpecModelSpec"
          },
          "summaryResultCount": {
            "description": "The number of top results to generate the summary from. If the number of results returned is less than `summaryResultCount`, the summary is generated from all of the results. At most five results can be used to generate a summary.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpecModelPromptSpec": {
        "description": "Specification of the prompt to use with the model.",
        "properties": {
          "preamble": {
            "description": "Text at the beginning of the prompt that instructs the assistant. Examples are available in the user guide.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestContentSearchSpecSummarySpecModelSpec": {
        "description": "Specification of the model.",
        "properties": {
          "version": {
            "description": "The model version used to generate the summary. Supported values are: * `stable`: string. Default value when no value is specified. Uses a generally available, fine-tuned version of the text-bison@001 model. * `preview`: string. (Public preview) Uses a fine-tuned version of the text-bison@002 model. This model works only for summaries in English.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpec": {
        "description": "The specification that uses customized query embedding vector to do semantic document retrieval.",
        "properties": {
          "embeddingVectors": {
            "description": "The embedding vector used for retrieval. Limit to 1.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestEmbeddingSpecEmbeddingVector": {
        "description": "Embedding vector.",
        "properties": {
          "fieldPath": {
            "description": "Embedding field path in schema.",
            "type": "string"
          },
          "vector": {
            "description": "Query embedding vector.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestFacetSpec": {
        "description": "A facet specification to perform faceted search.",
        "properties": {
          "enableDynamicPosition": {
            "description": "Enables dynamic position for this facet. If set to true, the position of this facet among all facets in the response is determined automatically. If dynamic facets are enabled, it is ordered together. If set to false, the position of this facet in the response is the same as in the request, and it is ranked before the facets with dynamic position enable and all dynamic facets. For example, you may always want to have rating facet returned in the response, but it's not necessarily to always display the rating facet at the top. In that case, you can set enable_dynamic_position to true so that the position of rating facet in response is determined automatically. Another example, assuming you have the following facets in the request: * \"rating\", enable_dynamic_position = true * \"price\", enable_dynamic_position = false * \"brands\", enable_dynamic_position = false And also you have a dynamic facets enabled, which generates a facet `gender`. Then the final order of the facets in the response can be (\"price\", \"brands\", \"rating\", \"gender\") or (\"price\", \"brands\", \"gender\", \"rating\") depends on how API orders \"gender\" and \"rating\" facets. However, notice that \"price\" and \"brands\" are always ranked at first and second position because their enable_dynamic_position is false.",
            "type": "boolean"
          },
          "excludedFilterKeys": {
            "description": "List of keys to exclude when faceting. By default, FacetKey.key is not excluded from the filter unless it is listed in this field. Listing a facet key in this field allows its values to appear as facet results, even when they are filtered out of search results. Using this field does not affect what search results are returned. For example, suppose there are 100 documents with the color facet \"Red\" and 200 documents with the color facet \"Blue\". A query containing the filter \"color:ANY(\"Red\")\" and having \"color\" as FacetKey.key would by default return only \"Red\" documents in the search results, and also return \"Red\" with count 100 as the only color facet. Although there are also blue documents available, \"Blue\" would not be shown as an available facet value. If \"color\" is listed in \"excludedFilterKeys\", then the query returns the facet values \"Red\" with count 100 and \"Blue\" with count 200, because the \"color\" key is now excluded from the filter. Because this field doesn't affect search results, the search results are still correctly filtered to return only \"Red\" documents. A maximum of 100 values are allowed. Otherwise, an `INVALID_ARGUMENT` error is returned.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "facetKey": {
            "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey"
          },
          "limit": {
            "description": "Maximum of facet values that should be returned for this facet. If unspecified, defaults to 20. The maximum allowed value is 300. Values above 300 are coerced to 300. If this field is negative, an `INVALID_ARGUMENT` is returned.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestFacetSpecFacetKey": {
        "description": "Specifies how a facet is computed.",
        "properties": {
          "caseInsensitive": {
            "description": "True to make facet keys case insensitive when getting faceting values with prefixes or contains; false otherwise.",
            "type": "boolean"
          },
          "contains": {
            "description": "Only get facet values that contains the given strings. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"contains\" to \"2022\", the \"category\" facet only contains \"Action > 2022\" and \"Sci-Fi > 2022\". Only supported on textual fields. Maximum is 10.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "intervals": {
            "description": "Set only if values should be bucketed into intervals. Must be set for facets with numerical values. Must not be set for facet with text values. Maximum number of intervals is 30.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDiscoveryengineV1betaInterval"
            },
            "type": "array"
          },
          "key": {
            "description": "Required. Supported textual and numerical facet keys in Document object, over which the facet values are computed. Facet key is case-sensitive.",
            "type": "string"
          },
          "orderBy": {
            "description": "The order in which documents are returned. Allowed values are: * \"count desc\", which means order by SearchResponse.Facet.values.count descending. * \"value desc\", which means order by SearchResponse.Facet.values.value descending. Only applies to textual facets. If not set, textual values are sorted in [natural order](https://en.wikipedia.org/wiki/Natural_sort_order); numerical intervals are sorted in the order given by FacetSpec.FacetKey.intervals.",
            "type": "string"
          },
          "prefixes": {
            "description": "Only get facet values that start with the given string prefix. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"prefixes\" to \"Action\", the \"category\" facet only contains \"Action > 2022\" and \"Action > 2021\". Only supported on textual fields. Maximum is 10.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "restrictedValues": {
            "description": "Only get facet for the given restricted values. Only supported on textual fields. For example, suppose \"category\" has three values \"Action > 2022\", \"Action > 2021\" and \"Sci-Fi > 2022\". If set \"restricted_values\" to \"Action > 2022\", the \"category\" facet only contains \"Action > 2022\". Only supported on textual fields. Maximum is 10.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaInterval": {
        "description": "A floating point interval.",
        "properties": {
          "exclusiveMaximum": {
            "description": "Exclusive upper bound.",
            "format": "double",
            "type": "number"
          },
          "exclusiveMinimum": {
            "description": "Exclusive lower bound.",
            "format": "double",
            "type": "number"
          },
          "maximum": {
            "description": "Inclusive upper bound.",
            "format": "double",
            "type": "number"
          },
          "minimum": {
            "description": "Inclusive lower bound.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestImageQuery": {
        "description": "Specifies the image query input.",
        "properties": {
          "imageBytes": {
            "description": "Base64 encoded image bytes. Supported image formats: JPEG, PNG, and BMP.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestQueryExpansionSpec": {
        "description": "Specification to determine under which conditions query expansion should occur.",
        "properties": {
          "condition": {
            "description": "The condition under which query expansion should occur. Default to Condition.DISABLED.",
            "enum": [
              "CONDITION_UNSPECIFIED",
              "DISABLED",
              "AUTO"
            ],
            "type": "string"
          },
          "pinUnexpandedResults": {
            "description": "Whether to pin unexpanded results. If this field is set to true, unexpanded products are always at the top of the search results, followed by the expanded results.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaSearchRequestSpellCorrectionSpec": {
        "description": "The specification for query spell correction.",
        "properties": {
          "mode": {
            "description": "The mode under which spell correction should take effect to replace the original search query. Default to Mode.AUTO.",
            "enum": [
              "MODE_UNSPECIFIED",
              "SUGGESTION_ONLY",
              "AUTO"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDiscoveryengineV1betaUserInfo": {
        "description": "Information of an end user.",
        "properties": {
          "userAgent": {
            "description": "User agent as included in the HTTP header. The field must be a UTF-8 encoded string with a length limit of 1,000 characters. Otherwise, an `INVALID_ARGUMENT` error is returned. This should not be set when using the client side event reporting with GTM or JavaScript tag in UserEventService.CollectUserEvent or if UserEvent.direct_user_request is set.",
            "type": "string"
          },
          "userId": {
            "description": "Highly recommended for logged-in users. Unique identifier for logged-in user, such as a user name. Don't set for anonymous users. Always use a hashed value for this ID. Don't set the field to the same fixed ID for different users. This mixes the event history of those users together, which results in degraded model quality. The field must be a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an `INVALID_ARGUMENT` error is returned.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://discoveryengine.googleapis.com//v1beta/{servingConfig}:search{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for SearchService.Search method.",
        "**Key properties:**",
        {
          "$ul": [
            "**appliedControls**: Controls applied as part of the Control service.",
            "**attributionToken**: A unique search token. This should be included in the UserEvent logs resulting from this search, which enables accurate attribution of search model performance.",
            "**correctedQuery**: Contains the spell corrected query, if found. If the spell correction type is AUTOMATIC, then the search results are based on corrected_query. Otherwise the original query is used for search.",
            "**facets**: Results of facets requested by user.",
            "**geoSearchDebugInfo**",
            [
              "**guidedSearchResult**: Guided search result. The guided search helps user to refine the search results and narrow down to the real needs from a broaded search results.",
              {
                "$ul": [
                  "**followUpQuestions**: Suggested follow-up questions.",
                  "**refinementAttributes**: A list of ranked refinement attributes."
                ]
              }
            ],
            "**nextPageToken**: A token that can be sent as SearchRequest.page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.",
            [
              "**queryExpansionInfo**: Information describing query expansion including whether expansion has occurred.",
              {
                "$ul": [
                  "**expandedQuery**: Bool describing whether query expansion has occurred.",
                  "**pinnedResultCount**: Number of pinned results. This field will only be set when expansion happens and SearchRequest.QueryExpansionSpec.pin_unexpanded_results is set to true."
                ]
              }
            ],
            "**redirectUri**: The URI of a customer-defined redirect page. If redirect action is triggered, no search is performed, and only redirect_uri and attribution_token are set in the response.",
            "**results**: A list of matched documents. The order represents the ranking.",
            [
              "**summary**: Summary of the top N search result specified by the summary spec.",
              {
                "$ul": [
                  [
                    "**safetyAttributes**: Safety Attribute categories and their associated confidence scores.",
                    {
                      "$ul": [
                        "**categories**: The display names of Safety Attribute categories associated with the generated content. Order matches the Scores.",
                        "**scores**: The confidence scores of the each category, higher value means higher confidence. Order matches the Categories."
                      ]
                    }
                  ],
                  "**summarySkippedReasons**: Additional summary-skipped reasons. This provides the reason for ignored cases. If nothing is skipped, this field is not set.",
                  "**summaryText**: The summary content.",
                  [
                    "**summaryWithMetadata**: Summary with metadata information.",
                    {
                      "$ul": [
                        [
                          "**citationMetadata**: Citation metadata.",
                          {
                            "$ul": [
                              "**citations**: Citations for segments."
                            ]
                          }
                        ],
                        "**references**: Document References.",
                        "**summary**: Summary text with no citation information."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**totalSize**: The estimated total count of matched items irrespective of pagination. The count of results returned by pagination may be less than the total_size that matches."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
