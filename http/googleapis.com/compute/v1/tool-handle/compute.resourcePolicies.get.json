{
  "name": "compute_resourcePolicies_get",
  "description": "Retrieves all information of the specified resource policy.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Project ID for this request."
      },
      "region": {
        "type": "string",
        "description": "Name of the region for this request."
      },
      "resourcePolicy": {
        "type": "string",
        "description": "Name of the resource policy to retrieve."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "userIp": {
        "type": "string",
        "description": "Legacy name for parameter that has been superseded by `quotaUser`."
      }
    },
    "required": [
      "project",
      "region",
      "resourcePolicy"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://compute.googleapis.com/compute/v1/projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType,userIp}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.",
        "**Key properties:**",
        {
          "$ul": [
            "**creationTimestamp**: [Output Only] Creation timestamp in RFC3339 text format.",
            "**description**",
            "**diskConsistencyGroupPolicy**: Resource policy for disk consistency groups.",
            [
              "**groupPlacementPolicy**: A GroupPlacementPolicy specifies resource placement configuration. It specifies the failure bucket separation as well as network locality",
              {
                "$ul": [
                  "**availabilityDomainCount**: The number of availability domains to spread instances across. If two instances are in different availability domain, they are not in the same low latency network.",
                  "**collocation**: Specifies network collocation",
                  "**vmCount**: Number of VMs in this placement group. Google does not recommend that you use this field unless you use a compact policy and you want your policy to work only if it contains this exact number of VMs."
                ]
              }
            ],
            "**id**: [Output Only] The unique identifier for the resource. This identifier is defined by the server.",
            [
              "**instanceSchedulePolicy**: An InstanceSchedulePolicy specifies when and how frequent certain operations are performed on the instance.",
              {
                "$ul": [
                  "**expirationTime**: The expiration time of the schedule. The timestamp is an RFC3339 string.",
                  "**startTime**: The start time of the schedule. The timestamp is an RFC3339 string.",
                  "**timeZone**: Specifies the time zone to be used in interpreting Schedule.schedule. The value of this field must be a time zone name from the tz database: https://wikipedia.org/wiki/Tz_database.",
                  [
                    "**vmStartSchedule**: Schedule for an instance operation.",
                    {
                      "$ul": [
                        "**schedule**: Specifies the frequency for the operation, using the unix-cron format."
                      ]
                    }
                  ],
                  [
                    "**vmStopSchedule**: Schedule for an instance operation.",
                    {
                      "$ul": [
                        "**schedule**: Specifies the frequency for the operation, using the unix-cron format."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**kind**: [Output Only] Type of the resource. Always compute#resource_policies for resource policies. (default: compute#resourcePolicy)",
            "**name**: The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
            "**region**",
            [
              "**resourceStatus**: Contains output only fields. Use this sub-message for all output fields set on ResourcePolicy. The internal structure of this \"status\" field should mimic the structure of ResourcePolicy proto specification.",
              {
                "$ul": [
                  [
                    "**instanceSchedulePolicy**",
                    {
                      "$ul": [
                        "**lastRunStartTime**: [Output Only] The last time the schedule successfully ran. The timestamp is an RFC3339 string.",
                        "**nextRunStartTime**: [Output Only] The next time the schedule is planned to run. The actual time might be slightly different. The timestamp is an RFC3339 string."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**selfLink**: [Output Only] Server-defined fully-qualified URL for this resource.",
            [
              "**snapshotSchedulePolicy**: A snapshot schedule policy specifies when and how frequently snapshots are to be created for the target disk. Also specifies how many and how long these scheduled snapshots should be retained.",
              {
                "$ul": [
                  [
                    "**retentionPolicy**: Policy for retention of scheduled snapshots.",
                    {
                      "$ul": [
                        "**maxRetentionDays**: Maximum age of the snapshot that is allowed to be kept.",
                        "**onSourceDiskDelete**: Specifies the behavior to apply to scheduled snapshots when the source disk is deleted."
                      ]
                    }
                  ],
                  [
                    "**schedule**: A schedule for disks where the schedueled operations are performed.",
                    {
                      "$ul": [
                        [
                          "**dailySchedule**: Time window specified for daily operations.",
                          {
                            "$ul": [
                              "**daysInCycle**: Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle.",
                              "**duration**: [Output only] A predetermined duration for the window, automatically chosen to be the smallest possible in the given scenario.",
                              "**startTime**: Start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid."
                            ]
                          }
                        ],
                        [
                          "**hourlySchedule**: Time window specified for hourly operations.",
                          {
                            "$ul": [
                              "**duration**: [Output only] Duration of the time window, automatically chosen to be smallest possible in the given scenario.",
                              "**hoursInCycle**: Defines a schedule with units measured in hours. The value determines how many hours pass between the start of each cycle.",
                              "**startTime**: Time within the window to start the operations. It must be in format \"HH:MM\", where HH : [00-23] and MM : [00-00] GMT."
                            ]
                          }
                        ],
                        [
                          "**weeklySchedule**: Time window specified for weekly operations.",
                          {
                            "$ul": [
                              "**dayOfWeeks**: Up to 7 intervals/windows, one for each day of the week."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**snapshotProperties**: Specified snapshot properties for scheduled snapshots created by this policy.",
                    {
                      "$ul": [
                        "**chainName**: Chain name that the snapshot is created in.",
                        "**guestFlush**: Indication to perform a 'guest aware' snapshot.",
                        "**labels**: Labels to apply to scheduled snapshots. These can be later modified by the setLabels method. Label values may be empty.",
                        "**storageLocations**: Cloud Storage bucket storage location of the auto snapshot (regional or multi-regional)."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**status**: [Output Only] The status of resource policy creation."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
