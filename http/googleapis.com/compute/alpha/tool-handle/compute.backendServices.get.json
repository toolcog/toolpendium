{
  "name": "compute_backendServices_get",
  "description": "Returns the specified BackendService resource.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Project ID for this request."
      },
      "backendService": {
        "type": "string",
        "description": "Name of the BackendService resource to return."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "userIp": {
        "type": "string",
        "description": "Legacy name for parameter that has been superseded by `quotaUser`."
      }
    },
    "required": [
      "project",
      "backendService"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://compute.googleapis.com/compute/alpha/projects/{project}/global/backendServices/{backendService}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType,userIp}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a Backend Service resource. A backend service defines how Google Cloud load balancers distribute traffic. The backend service configuration contains a set of values, such as the protocol used to connect to backends, various distribution and session settings, health checks, and timeouts. These settings provide fine-grained control over how your load balancer behaves. Most of the settings have default values that allow for easy configuration if you need to get started quickly. Backend services in Google Compute Engine can be either regionally or globally scoped. * [Global](https://cloud.google.com/compute/docs/reference/rest/alpha/backendServices) * [Regional](https://cloud.google.com/compute/docs/reference/rest/alpha/regionBackendServices) For more information, see Backend Services.",
        "**Key properties:**",
        {
          "$ul": [
            "**affinityCookieTtlSec**: Lifetime of cookies in seconds. This setting is applicable to Application Load Balancers and Traffic Director and requires GENERATED_COOKIE or HTTP_COOKIE session affinity. If set to 0, the cookie is non-persistent and lasts only until the end of the browser session (or equivalent). The maximum allowed value is two weeks (1,209,600). Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.",
            "**backends**: The list of backends that serve this BackendService.",
            [
              "**cdnPolicy**: Message containing Cloud CDN configuration for a backend service.",
              {
                "$ul": [
                  "**bypassCacheOnRequestHeaders**: Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.",
                  [
                    "**cacheKeyPolicy**: Message containing what to include in the cache key for a request for Cloud CDN.",
                    {
                      "$ul": [
                        "**includeHost**: If true, requests to different hosts will be cached separately.",
                        "**includeHttpHeaders**: Allows HTTP request headers (by name) to be used in the cache key.",
                        "**includeNamedCookies**: Allows HTTP cookies (by name) to be used in the cache key. The name=value pair will be used in the cache key Cloud CDN generates.",
                        "**includeProtocol**: If true, http and https requests will be cached separately.",
                        "**includeQueryString**: If true, include query string parameters in the cache key according to query_string_whitelist and query_string_blacklist. If neither is set, the entire query string will be included. If false, the query string will be excluded from the cache key entirely.",
                        "**queryStringBlacklist**: Names of query string parameters to exclude in cache keys. All other parameters will be included. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters.",
                        "**queryStringWhitelist**: Names of query string parameters to include in cache keys. All other parameters will be excluded. Either specify query_string_whitelist or query_string_blacklist, not both. '&' and '=' will be percent encoded and not treated as delimiters."
                      ]
                    }
                  ],
                  "**cacheMode**: Specifies the cache setting for all responses from this backend. The possible values are: USE_ORIGIN_HEADERS Requires the origin to set valid caching headers to cache content. Responses without these headers will not be cached at Google's edge, and will require a full trip to the origin on every request, potentially impacting performance and increasing load on the origin server. FORCE_CACHE_ALL Cache all content, ignoring any \"private\", \"no-store\" or \"no-cache\" directives in Cache-Control response headers. Warning: this may result in Cloud CDN caching private, per-user (user identifiable) content. CACHE_ALL_STATIC Automatically cache static content, including common image formats, media (video and audio), and web assets (JavaScript and CSS). Requests and responses that are marked as uncacheable, as well as dynamic content (including HTML), will not be cached.",
                  "**clientTtl**: Specifies a separate client (e.g. browser client) maximum TTL. This is used to clamp the max-age (or Expires) value sent to the client. With FORCE_CACHE_ALL, the lesser of client_ttl and default_ttl is used for the response max-age directive, along with a \"public\" directive. For cacheable content in CACHE_ALL_STATIC mode, client_ttl clamps the max-age from the origin (if specified), or else sets the response max-age directive to the lesser of the client_ttl and default_ttl, and also ensures a \"public\" cache-control directive is present. If a client TTL is not specified, a default value (1 hour) will be used. The maximum allowed value is 31,622,400s (1 year).",
                  "**defaultTtl**: Specifies the default TTL for cached content served by this origin for responses that do not have an existing valid TTL (max-age or s-max-age). Setting a TTL of \"0\" means \"always revalidate\". The value of defaultTTL cannot be set to a value greater than that of maxTTL, but can be equal. When the cacheMode is set to FORCE_CACHE_ALL, the defaultTTL will overwrite the TTL set in all responses. The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.",
                  "**maxTtl**: Specifies the maximum allowed TTL for cached content served by this origin. Cache directives that attempt to set a max-age or s-maxage higher than this, or an Expires header more than maxTTL seconds in the future will be capped at the value of maxTTL, as if it were the value of an s-maxage Cache-Control directive. Headers sent to the client will not be modified. Setting a TTL of \"0\" means \"always revalidate\". The maximum allowed value is 31,622,400s (1 year), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.",
                  "**negativeCaching**: Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects. This can reduce the load on your origin and improve end-user experience by reducing response latency. When the cache mode is set to CACHE_ALL_STATIC or USE_ORIGIN_HEADERS, negative caching applies to responses with the specified response code that lack any Cache-Control, Expires, or Pragma: no-cache directives. When the cache mode is set to FORCE_CACHE_ALL, negative caching applies to all responses with the specified response code, and override any caching headers. By default, Cloud CDN will apply the following default TTLs to these status codes: HTTP 300 (Multiple Choice), 301, 308 (Permanent Redirects): 10m HTTP 404 (Not Found), 410 (Gone), 451 (Unavailable For Legal Reasons): 120s HTTP 405 (Method Not Found), 421 (Misdirected Request), 501 (Not Implemented): 60s. These defaults can be overridden in negative_caching_policy.",
                  "**negativeCachingPolicy**: Sets a cache TTL for the specified HTTP status code. negative_caching must be enabled to configure negative_caching_policy. Omitting the policy and leaving negative_caching enabled will use Cloud CDN's default cache TTLs. Note that when specifying an explicit negative_caching_policy, you should take care to specify a cache TTL for all response codes that you wish to cache. Cloud CDN will not apply any default negative caching when a policy exists.",
                  "**requestCoalescing**: If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.",
                  "**serveWhileStale**: Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache. This setting defines the default \"max-stale\" duration for any cached responses that do not specify a max-stale directive. Stale responses that exceed the TTL configured here will not be served. The default limit (max-stale) is 86400s (1 day), which will allow stale content to be served up to this limit beyond the max-age (or s-max-age) of a cached response. The maximum allowed value is 604800 (1 week). Set this to zero (0) to disable serve-while-stale.",
                  "**signedUrlCacheMaxAgeSec**: Maximum number of seconds the response to a signed URL request will be considered fresh. After this time period, the response will be revalidated before being served. Defaults to 1hr (3600s). When serving responses to signed URL requests, Cloud CDN will internally behave as though all responses from this backend had a \"Cache-Control: public, max-age=[TTL]\" header, regardless of any existing Cache-Control header. The actual headers served in responses will not be altered.",
                  "**signedUrlKeyNames**: [Output Only] Names of the keys for signing request URLs."
                ]
              }
            ],
            [
              "**circuitBreakers**: Settings controlling the volume of requests, connections and retries to this backend service.",
              {
                "$ul": [
                  [
                    "**connectTimeout**: A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years.",
                    {
                      "$ul": [
                        "**nanos**: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.",
                        "**seconds**: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                      ]
                    }
                  ],
                  "**maxConnections**: The maximum number of connections to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.",
                  "**maxPendingRequests**: The maximum number of pending requests allowed to the backend service. If not specified, there is no limit. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.",
                  "**maxRequests**: The maximum number of parallel requests that allowed to the backend service. If not specified, there is no limit.",
                  "**maxRequestsPerConnection**: Maximum requests for a single connection to the backend service. This parameter is respected by both the HTTP/1.1 and HTTP/2 implementations. If not specified, there is no limit. Setting this parameter to 1 will effectively disable keep alive. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.",
                  "**maxRetries**: The maximum number of parallel retries allowed to the backend cluster. If not specified, the default is 1. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true."
                ]
              }
            ],
            "**compressionMode**: Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.",
            [
              "**connectionDraining**: Message containing connection draining configuration.",
              {
                "$ul": [
                  "**drainingTimeoutSec**: Configures a duration timeout for existing requests on a removed backend instance. For supported load balancers and protocols, as described in Enabling connection draining."
                ]
              }
            ],
            [
              "**connectionTrackingPolicy**: Connection Tracking configuration for this BackendService.",
              {
                "$ul": [
                  "**connectionPersistenceOnUnhealthyBackends**: Specifies connection persistence when backends are unhealthy. The default value is DEFAULT_FOR_PROTOCOL. If set to DEFAULT_FOR_PROTOCOL, the existing connections persist on unhealthy backends only for connection-oriented protocols (TCP and SCTP) and only if the Tracking Mode is PER_CONNECTION (default tracking mode) or the Session Affinity is configured for 5-tuple. They do not persist for UDP. If set to NEVER_PERSIST, after a backend becomes unhealthy, the existing connections on the unhealthy backend are never persisted on the unhealthy backend. They are always diverted to newly selected healthy backends (unless all backends are unhealthy). If set to ALWAYS_PERSIST, existing connections always persist on unhealthy backends regardless of protocol and session affinity. It is generally not recommended to use this mode overriding the default. For more details, see [Connection Persistence for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#connection-persistence) and [Connection Persistence for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#connection-persistence).",
                  "**enableStrongAffinity**: Enable Strong Session Affinity for external passthrough Network Load Balancers. This option is not available publicly.",
                  "**idleTimeoutSec**: Specifies how long to keep a Connection Tracking entry while there is no matching traffic (in seconds). For internal passthrough Network Load Balancers: - The minimum (default) is 10 minutes and the maximum is 16 hours. - It can be set only if Connection Tracking is less than 5-tuple (i.e. Session Affinity is CLIENT_IP_NO_DESTINATION, CLIENT_IP or CLIENT_IP_PROTO, and Tracking Mode is PER_SESSION). For external passthrough Network Load Balancers the default is 60 seconds. This option is not available publicly.",
                  "**trackingMode**: Specifies the key used for connection tracking. There are two options: - PER_CONNECTION: This is the default mode. The Connection Tracking is performed as per the Connection Key (default Hash Method) for the specific protocol. - PER_SESSION: The Connection Tracking is performed as per the configured Session Affinity. It matches the configured Session Affinity. For more details, see [Tracking Mode for Network Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-backend-service#tracking-mode) and [Tracking Mode for Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal#tracking-mode)."
                ]
              }
            ],
            [
              "**consistentHash**: This message defines settings for a consistent hash style load balancer.",
              {
                "$ul": [
                  [
                    "**httpCookie**: The information about the HTTP Cookie on which the hash function is based for load balancing policies that use a consistent hash.",
                    {
                      "$ul": [
                        "**name**: Name of the cookie.",
                        "**path**: Path to set for the cookie.",
                        [
                          "**ttl**: A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years.",
                          {
                            "$ul": [
                              "**nanos**: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.",
                              "**seconds**: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**httpHeaderName**: The hash based on the value of the specified header field. This field is applicable if the sessionAffinity is set to HEADER_FIELD.",
                  "**minimumRingSize**: The minimum number of virtual nodes to use for the hash ring. Defaults to 1024. Larger ring sizes result in more granular load distributions. If the number of hosts in the load balancing pool is larger than the ring size, each host will be assigned a single virtual node."
                ]
              }
            ],
            "**creationTimestamp**: [Output Only] Creation timestamp in RFC3339 text format.",
            "**customRequestHeaders**: Headers that the load balancer adds to proxied requests. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).",
            "**customResponseHeaders**: Headers that the load balancer adds to proxied responses. See [Creating custom headers](https://cloud.google.com/load-balancing/docs/custom-headers).",
            "**description**: An optional description of this resource. Provide this property when you create the resource.",
            "**edgeSecurityPolicy**: [Output Only] The resource URL for the edge security policy associated with this backend service.",
            "**enableCDN**: If true, enables Cloud CDN for the backend service of a global external Application Load Balancer.",
            [
              "**failoverPolicy**: For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). On failover or failback, this field indicates whether connection draining will be honored. Google Cloud has a fixed connection draining timeout of 10 minutes. A setting of true terminates existing TCP connections to the active pool during failover and failback, immediately draining traffic. A setting of false allows existing TCP connections to persist, even on VMs no longer in the active pool, for up to the duration of the connection draining timeout (10 minutes).",
              {
                "$ul": [
                  "**disableConnectionDrainOnFailover**: This can be set to true only if the protocol is TCP. The default is false.",
                  "**dropTrafficIfUnhealthy**: If set to true, connections to the load balancer are dropped when all primary and all backup backend VMs are unhealthy.If set to false, connections are distributed among all primary VMs when all primary and all backup backend VMs are unhealthy. For load balancers that have configurable failover: [Internal passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external passthrough Network Load Balancers](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview). The default is false.",
                  "**failoverRatio**: The value of the field must be in the range [0, 1]. If the value is 0, the load balancer performs a failover when the number of healthy primary VMs equals zero. For all other values, the load balancer performs a failover when the total number of healthy primary VMs is less than this ratio. For load balancers that have configurable failover: [Internal TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/internal/failover-overview) and [external TCP/UDP Load Balancing](https://cloud.google.com/load-balancing/docs/network/networklb-failover-overview)."
                ]
              }
            ],
            "**fingerprint**: Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a BackendService. An up-to-date fingerprint must be provided in order to update the BackendService, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a BackendService.",
            [
              "**haPolicy**",
              {
                "$ul": [
                  "**fastIPMove**: Enabling fastIPMove is not supported.",
                  [
                    "**leader**",
                    {
                      "$ul": [
                        "**backendGroup**: Setting backendGroup is not supported.",
                        [
                          "**networkEndpoint**",
                          {
                            "$ul": [
                              "**instance**: Specifying the instance name of a leader is not supported."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**healthChecks**: The list of URLs to the healthChecks, httpHealthChecks (legacy), or httpsHealthChecks (legacy) resource for health checking this backend service. Not all backend services support legacy health checks. See Load balancer guide. Currently, at most one health check can be specified for each backend service. Backend services with instance group or zonal NEG backends must have a health check. Backend services with internet or serverless NEG backends must not have a health check.",
            [
              "**iap**: Identity-Aware Proxy",
              {
                "$ul": [
                  "**enabled**: Whether the serving infrastructure will authenticate and authorize all incoming requests.",
                  "**oauth2ClientId**: OAuth2 client ID to use for the authentication flow.",
                  [
                    "**oauth2ClientInfo**",
                    {
                      "$ul": [
                        "**applicationName**: Application name to be used in OAuth consent screen.",
                        "**clientName**: Name of the client to be generated. Optional - If not provided, the name will be autogenerated by the backend.",
                        "**developerEmailAddress**: Developer's information to be used in OAuth consent screen."
                      ]
                    }
                  ],
                  "**oauth2ClientSecret**: OAuth2 client secret to use for the authentication flow. For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2ClientSecretSha256 field. @InputOnly",
                  "**oauth2ClientSecretSha256**: [Output Only] SHA256 hash value for the field oauth2_client_secret above."
                ]
              }
            ],
            "**id**: [Output Only] The unique identifier for the resource. This identifier is defined by the server.",
            "**ipAddressSelectionPolicy**: Specifies a preference for traffic sent from the proxy to the backend (or from the client to the backend for proxyless gRPC). The possible values are: - IPV4_ONLY: Only send IPv4 traffic to the backends of the backend service (Instance Group, Managed Instance Group, Network Endpoint Group), regardless of traffic from the client to the proxy. Only IPv4 health checks are used to check the health of the backends. This is the default setting. - PREFER_IPV6: Prioritize the connection to the endpoint's IPv6 address over its IPv4 address (provided there is a healthy IPv6 address). - IPV6_ONLY: Only send IPv6 traffic to the backends of the backend service (Instance Group, Managed Instance Group, Network Endpoint Group), regardless of traffic from the client to the proxy. Only IPv6 health checks are used to check the health of the backends. This field is applicable to either: - Advanced global external Application Load Balancer (load balancing scheme EXTERNAL_MANAGED), - Regional external Application Load Balancer, - Internal proxy Network Load Balancer (load balancing scheme INTERNAL_MANAGED), - Regional internal Application Load Balancer (load balancing scheme INTERNAL_MANAGED), - Traffic Director with Envoy proxies and proxyless gRPC (load balancing scheme INTERNAL_SELF_MANAGED). ",
            "**kind**: [Output Only] Type of resource. Always compute#backendService for backend services. (default: compute#backendService)",
            "**loadBalancingScheme**: Specifies the load balancer type. A backend service created for one type of load balancer cannot be used with another. For more information, refer to Choosing a load balancer.",
            "**localityLbPolicies**: A list of locality load-balancing policies to be used in order of preference. When you use localityLbPolicies, you must set at least one value for either the localityLbPolicies[].policy or the localityLbPolicies[].customPolicy field. localityLbPolicies overrides any value set in the localityLbPolicy field. For an example of how to use this field, see Define a list of preferred policies. Caution: This field and its children are intended for use in a service mesh that includes gRPC clients only. Envoy proxies can't use backend services that have this configuration.",
            "**localityLbPolicy**: The load balancing algorithm used within the scope of the locality. The possible values are: - ROUND_ROBIN: This is a simple policy in which each healthy backend is selected in round robin order. This is the default. - LEAST_REQUEST: An O(1) algorithm which selects two random healthy hosts and picks the host which has fewer active requests. - RING_HASH: The ring/modulo hash load balancer implements consistent hashing to backends. The algorithm has the property that the addition/removal of a host from a set of N hosts only affects 1/N of the requests. - RANDOM: The load balancer selects a random healthy host. - ORIGINAL_DESTINATION: Backend host is selected based on the client connection metadata, i.e., connections are opened to the same address as the destination address of the incoming connection before the connection was redirected to the load balancer. - MAGLEV: used as a drop in replacement for the ring hash load balancer. Maglev is not as stable as ring hash but has faster table lookup build times and host selection times. For more information about Maglev, see https://ai.google/research/pubs/pub44824 This field is applicable to either: - A regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and load_balancing_scheme set to INTERNAL_MANAGED. - A global backend service with the load_balancing_scheme set to INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, or EXTERNAL_MANAGED. If sessionAffinity is not NONE, and this field is not set to MAGLEV or RING_HASH, session affinity settings will not take effect. Only ROUND_ROBIN and RING_HASH are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true.",
            [
              "**logConfig**: The available logging options for the load balancer traffic served by this backend service.",
              {
                "$ul": [
                  "**enable**: Denotes whether to enable logging for the load balancer traffic served by this backend service. The default value is false.",
                  "**optional**: Deprecated in favor of optionalMode. This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL.",
                  "**optionalFields**: This field can only be specified if logging is enabled for this backend service and \"logConfig.optionalMode\" was set to CUSTOM. Contains a list of optional fields you want to include in the logs. For example: serverInstance, serverGkeDetails.cluster, serverGkeDetails.pod.podNamespace",
                  "**optionalMode**: This field can only be specified if logging is enabled for this backend service. Configures whether all, none or a subset of optional fields should be added to the reported logs. One of [INCLUDE_ALL_OPTIONAL, EXCLUDE_ALL_OPTIONAL, CUSTOM]. Default is EXCLUDE_ALL_OPTIONAL.",
                  "**sampleRate**: This field can only be specified if logging is enabled for this backend service. The value of the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported. The default value is 1.0."
                ]
              }
            ],
            [
              "**maxStreamDuration**: A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years.",
              {
                "$ul": [
                  "**nanos**: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                ]
              }
            ],
            "**metadatas**: Deployment metadata associated with the resource to be set by a GKE hub controller and read by the backend RCTH",
            "**name**: Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
            "**network**: The URL of the network to which this backend service belongs. This field can only be specified when the load balancing scheme is set to INTERNAL.",
            [
              "**outlierDetection**: Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.",
              {
                "$ul": [
                  [
                    "**baseEjectionTime**: A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years.",
                    {
                      "$ul": [
                        "**nanos**: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.",
                        "**seconds**: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                      ]
                    }
                  ],
                  "**consecutiveErrors**: Number of consecutive errors before a backend endpoint is ejected from the load balancing pool. When the backend endpoint is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.",
                  "**consecutiveGatewayFailure**: The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.",
                  "**enforcingConsecutiveErrors**: The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.",
                  "**enforcingConsecutiveGatewayFailure**: The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.",
                  "**enforcingSuccessRate**: The percentage chance that a backend endpoint will be ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service uses Serverless NEG.",
                  [
                    "**interval**: A Duration represents a fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". Range is approximately 10,000 years.",
                    {
                      "$ul": [
                        "**nanos**: Span of time that's a fraction of a second at nanosecond resolution. Durations less than one second are represented with a 0 `seconds` field and a positive `nanos` field. Must be from 0 to 999,999,999 inclusive.",
                        "**seconds**: Span of time at a resolution of a second. Must be from 0 to 315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                      ]
                    }
                  ],
                  "**maxEjectionPercent**: Maximum percentage of backend endpoints in the load balancing pool for the backend service that can be ejected if the ejection conditions are met. Defaults to 50%.",
                  "**successRateMinimumHosts**: The number of backend endpoints in the load balancing pool that must have enough request volume to detect success rate outliers. If the number of backend endpoints is fewer than this setting, outlier detection via success rate statistics is not performed for any backend endpoint in the load balancing pool. Defaults to 5. Not supported when the backend service uses Serverless NEG.",
                  "**successRateRequestVolume**: The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this backend endpoint in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that backend endpoint. Defaults to 100. Not supported when the backend service uses Serverless NEG.",
                  "**successRateStdevFactor**: This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * successRateStdevFactor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. Not supported when the backend service uses Serverless NEG."
                ]
              }
            ],
            "**port**: Deprecated in favor of portName. The TCP port to connect on the backend. The default value is 80. For internal passthrough Network Load Balancers and external passthrough Network Load Balancers, omit port.",
            "**portName**: A named port on a backend instance group representing the port for communication to the backend VMs in that group. The named port must be [defined on each backend instance group](https://cloud.google.com/load-balancing/docs/backend-service#named_ports). This parameter has no meaning if the backends are NEGs. For internal passthrough Network Load Balancers and external passthrough Network Load Balancers, omit port_name.",
            "**protocol**: The protocol this BackendService uses to communicate with backends. Possible values are HTTP, HTTPS, HTTP2, TCP, SSL, UDP or GRPC. depending on the chosen load balancer or Traffic Director configuration. Refer to the documentation for the load balancers or for Traffic Director for more information. Must be set to GRPC when the backend service is referenced by a URL map that is bound to target gRPC proxy.",
            "**region**: [Output Only] URL of the region where the regional backend service resides. This field is not applicable to global backend services. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.",
            "**securityPolicy**: [Output Only] The resource URL for the security policy associated with this backend service.",
            [
              "**securitySettings**: The authentication and authorization settings for a BackendService.",
              {
                "$ul": [
                  "**authentication**: [Deprecated] Use clientTlsPolicy instead.",
                  [
                    "**authenticationPolicy**: [Deprecated] The authentication settings for the backend service. The authentication settings for the backend service.",
                    {
                      "$ul": [
                        "**origins**: List of authentication methods that can be used for origin authentication. Similar to peers, these will be evaluated in order the first valid one will be used to set origin identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if origin authentication is not required.",
                        "**peers**: List of authentication methods that can be used for peer authentication. They will be evaluated in order the first valid one will be used to set peer identity. If none of these methods pass, the request will be rejected with authentication failed error (401). Leave the list empty if peer authentication is not required.",
                        "**principalBinding**: Define whether peer or origin identity should be used for principal. Default value is USE_PEER. If peer (or origin) identity is not available, either because peer/origin authentication is not defined, or failed, principal will be left unset. In other words, binding rule does not affect the decision to accept or reject request. This field can be set to one of the following: USE_PEER: Principal will be set to the identity from peer authentication. USE_ORIGIN: Principal will be set to the identity from origin authentication.",
                        [
                          "**serverTlsContext**: [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.",
                          {
                            "$ul": [
                              [
                                "**certificateContext**: [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.",
                                {
                                  "$ul": [
                                    [
                                      "**certificatePaths**: [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
                                      {
                                        "$ul": [
                                          "**certificatePath**: The path to the file holding the client or server TLS certificate to use.",
                                          "**privateKeyPath**: The path to the file holding the client or server private key."
                                        ]
                                      }
                                    ],
                                    "**certificateSource**: Defines how TLS certificates are obtained.",
                                    [
                                      "**sdsConfig**: [Deprecated] The configuration to access the SDS server. The configuration to access the SDS server.",
                                      {
                                        "$ul": [
                                          [
                                            "**grpcServiceConfig**: [Deprecated] gRPC config to access the SDS server. gRPC config to access the SDS server.",
                                            {
                                              "$ul": [
                                                [
                                                  "**callCredentials**: [Deprecated] gRPC call credentials to access the SDS server. gRPC call credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      "**callCredentialType**: The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following: - GCE_VM: The local GCE VM service account credentials are used to access the SDS server. - FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.",
                                                      [
                                                        "**fromPlugin**: [Deprecated] Custom authenticator credentials. Custom authenticator credentials.",
                                                        {
                                                          "$ul": [
                                                            "**name**: Plugin name.",
                                                            "**structConfig**: A text proto that conforms to a Struct type definition interpreted by the plugin."
                                                          ]
                                                        }
                                                      ]
                                                    ]
                                                  }
                                                ],
                                                [
                                                  "**channelCredentials**: [Deprecated] gRPC channel credentials to access the SDS server. gRPC channel credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      [
                                                        "**certificates**: [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
                                                        {
                                                          "$ul": [
                                                            "**certificatePath**: The path to the file holding the client or server TLS certificate to use.",
                                                            "**privateKeyPath**: The path to the file holding the client or server private key."
                                                          ]
                                                        }
                                                      ],
                                                      "**channelCredentialType**: The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server."
                                                    ]
                                                  }
                                                ],
                                                "**targetUri**: The target URI of the SDS server."
                                              ]
                                            }
                                          ]
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              [
                                "**validationContext**: [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.",
                                {
                                  "$ul": [
                                    "**certificatePath**: The path to the file holding the CA certificate to validate the client or server certificate.",
                                    [
                                      "**sdsConfig**: [Deprecated] The configuration to access the SDS server. The configuration to access the SDS server.",
                                      {
                                        "$ul": [
                                          [
                                            "**grpcServiceConfig**: [Deprecated] gRPC config to access the SDS server. gRPC config to access the SDS server.",
                                            {
                                              "$ul": [
                                                [
                                                  "**callCredentials**: [Deprecated] gRPC call credentials to access the SDS server. gRPC call credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      "**callCredentialType**: The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following: - GCE_VM: The local GCE VM service account credentials are used to access the SDS server. - FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.",
                                                      [
                                                        "**fromPlugin**: [Deprecated] Custom authenticator credentials. Custom authenticator credentials.",
                                                        {
                                                          "$ul": [
                                                            "**name**: Plugin name.",
                                                            "**structConfig**: A text proto that conforms to a Struct type definition interpreted by the plugin."
                                                          ]
                                                        }
                                                      ]
                                                    ]
                                                  }
                                                ],
                                                [
                                                  "**channelCredentials**: [Deprecated] gRPC channel credentials to access the SDS server. gRPC channel credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      [
                                                        "**certificates**: [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
                                                        {
                                                          "$ul": [
                                                            "**certificatePath**: The path to the file holding the client or server TLS certificate to use.",
                                                            "**privateKeyPath**: The path to the file holding the client or server private key."
                                                          ]
                                                        }
                                                      ],
                                                      "**channelCredentialType**: The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server."
                                                    ]
                                                  }
                                                ],
                                                "**targetUri**: The target URI of the SDS server."
                                              ]
                                            }
                                          ]
                                        ]
                                      }
                                    ],
                                    "**validationSource**: Defines how TLS certificates are obtained."
                                  ]
                                }
                              ]
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**authorizationConfig**: [Deprecated] Authorization configuration provides service-level and method-level access control for a service. control for a service.",
                    {
                      "$ul": [
                        "**policies**: List of RbacPolicies."
                      ]
                    }
                  ],
                  [
                    "**awsV4Authentication**: Contains the configurations necessary to generate a signature for access to private storage buckets that support Signature Version 4 for authentication. The service name for generating the authentication header will always default to 's3'.",
                    {
                      "$ul": [
                        "**accessKey**: The access key used for s3 bucket authentication. Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request. @InputOnly",
                        "**accessKeyId**: The identifier of an access key used for s3 bucket authentication.",
                        "**accessKeyVersion**: The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.",
                        "**originRegion**: The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin. For example, \"us-east-1\" for AWS or \"us-ashburn-1\" for OCI."
                      ]
                    }
                  ],
                  "**clientTlsPolicy**: Optional. A URL referring to a networksecurity.ClientTlsPolicy resource that describes how clients should authenticate with this service's backends. clientTlsPolicy only applies to a global BackendService with the loadBalancingScheme set to INTERNAL_SELF_MANAGED. If left blank, communications are not encrypted.",
                  [
                    "**clientTlsSettings**: [Deprecated] The client side authentication settings for connection originating from the backend service. the backend service.",
                    {
                      "$ul": [
                        [
                          "**clientTlsContext**: [Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.",
                          {
                            "$ul": [
                              [
                                "**certificateContext**: [Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.",
                                {
                                  "$ul": [
                                    [
                                      "**certificatePaths**: [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
                                      {
                                        "$ul": [
                                          "**certificatePath**: The path to the file holding the client or server TLS certificate to use.",
                                          "**privateKeyPath**: The path to the file holding the client or server private key."
                                        ]
                                      }
                                    ],
                                    "**certificateSource**: Defines how TLS certificates are obtained.",
                                    [
                                      "**sdsConfig**: [Deprecated] The configuration to access the SDS server. The configuration to access the SDS server.",
                                      {
                                        "$ul": [
                                          [
                                            "**grpcServiceConfig**: [Deprecated] gRPC config to access the SDS server. gRPC config to access the SDS server.",
                                            {
                                              "$ul": [
                                                [
                                                  "**callCredentials**: [Deprecated] gRPC call credentials to access the SDS server. gRPC call credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      "**callCredentialType**: The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following: - GCE_VM: The local GCE VM service account credentials are used to access the SDS server. - FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.",
                                                      [
                                                        "**fromPlugin**: [Deprecated] Custom authenticator credentials. Custom authenticator credentials.",
                                                        {
                                                          "$ul": [
                                                            "**name**: Plugin name.",
                                                            "**structConfig**: A text proto that conforms to a Struct type definition interpreted by the plugin."
                                                          ]
                                                        }
                                                      ]
                                                    ]
                                                  }
                                                ],
                                                [
                                                  "**channelCredentials**: [Deprecated] gRPC channel credentials to access the SDS server. gRPC channel credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      [
                                                        "**certificates**: [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
                                                        {
                                                          "$ul": [
                                                            "**certificatePath**: The path to the file holding the client or server TLS certificate to use.",
                                                            "**privateKeyPath**: The path to the file holding the client or server private key."
                                                          ]
                                                        }
                                                      ],
                                                      "**channelCredentialType**: The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server."
                                                    ]
                                                  }
                                                ],
                                                "**targetUri**: The target URI of the SDS server."
                                              ]
                                            }
                                          ]
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              [
                                "**validationContext**: [Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.",
                                {
                                  "$ul": [
                                    "**certificatePath**: The path to the file holding the CA certificate to validate the client or server certificate.",
                                    [
                                      "**sdsConfig**: [Deprecated] The configuration to access the SDS server. The configuration to access the SDS server.",
                                      {
                                        "$ul": [
                                          [
                                            "**grpcServiceConfig**: [Deprecated] gRPC config to access the SDS server. gRPC config to access the SDS server.",
                                            {
                                              "$ul": [
                                                [
                                                  "**callCredentials**: [Deprecated] gRPC call credentials to access the SDS server. gRPC call credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      "**callCredentialType**: The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following: - GCE_VM: The local GCE VM service account credentials are used to access the SDS server. - FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.",
                                                      [
                                                        "**fromPlugin**: [Deprecated] Custom authenticator credentials. Custom authenticator credentials.",
                                                        {
                                                          "$ul": [
                                                            "**name**: Plugin name.",
                                                            "**structConfig**: A text proto that conforms to a Struct type definition interpreted by the plugin."
                                                          ]
                                                        }
                                                      ]
                                                    ]
                                                  }
                                                ],
                                                [
                                                  "**channelCredentials**: [Deprecated] gRPC channel credentials to access the SDS server. gRPC channel credentials to access the SDS server.",
                                                  {
                                                    "$ul": [
                                                      [
                                                        "**certificates**: [Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
                                                        {
                                                          "$ul": [
                                                            "**certificatePath**: The path to the file holding the client or server TLS certificate to use.",
                                                            "**privateKeyPath**: The path to the file holding the client or server private key."
                                                          ]
                                                        }
                                                      ],
                                                      "**channelCredentialType**: The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server."
                                                    ]
                                                  }
                                                ],
                                                "**targetUri**: The target URI of the SDS server."
                                              ]
                                            }
                                          ]
                                        ]
                                      }
                                    ],
                                    "**validationSource**: Defines how TLS certificates are obtained."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**mode**: Indicates whether connections to this port should be secured using TLS. The value of this field determines how TLS is enforced. This can be set to one of the following values: DISABLE: Do not setup a TLS connection to the backends. SIMPLE: Originate a TLS connection to the backends. MUTUAL: Secure connections to the backends using mutual TLS by presenting client certificates for authentication.",
                        "**sni**: SNI string to present to the server during TLS handshake. This field is applicable only when mode is SIMPLE or MUTUAL.",
                        "**subjectAltNames**: A list of alternate names to verify the subject identity in the certificate.If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. This field is applicable only when mode is SIMPLE or MUTUAL."
                      ]
                    }
                  ],
                  "**subjectAltNames**: Optional. A list of Subject Alternative Names (SANs) that the client verifies during a mutual TLS handshake with an server/endpoint for this BackendService. When the server presents its X.509 certificate to the client, the client inspects the certificate's subjectAltName field. If the field contains one of the specified values, the communication continues. Otherwise, it fails. This additional check enables the client to verify that the server is authorized to run the requested service. Note that the contents of the server certificate's subjectAltName field are configured by the Public Key Infrastructure which provisions server identities. Only applies to a global BackendService with loadBalancingScheme set to INTERNAL_SELF_MANAGED. Only applies when BackendService has an attached clientTlsPolicy with clientCertificate (mTLS mode)."
                ]
              }
            ],
            "**selfLink**: [Output Only] Server-defined URL for the resource.",
            "**selfLinkWithId**: [Output Only] Server-defined URL for this resource with the resource id.",
            "**serviceBindings**: URLs of networkservices.ServiceBinding resources. Can only be set if load balancing scheme is INTERNAL_SELF_MANAGED. If set, lists of backends and health checks must be both empty.",
            "**serviceLbPolicy**: URL to networkservices.ServiceLbPolicy resource. Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.",
            "**sessionAffinity**: Type of session affinity to use. The default is NONE. Only NONE and HEADER_FIELD are supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. For more details, see: [Session Affinity](https://cloud.google.com/load-balancing/docs/backend-service#session_affinity).",
            [
              "**subsetting**: Subsetting configuration for this BackendService. Currently this is applicable only for Internal TCP/UDP load balancing, Internal HTTP(S) load balancing and Traffic Director.",
              {
                "$ul": [
                  "**policy**",
                  "**subsetSize**: The number of backends per backend group assigned to each proxy instance or each service mesh client. An input parameter to the `CONSISTENT_HASH_SUBSETTING` algorithm. Can only be set if `policy` is set to `CONSISTENT_HASH_SUBSETTING`. Can only be set if load balancing scheme is `INTERNAL_MANAGED` or `INTERNAL_SELF_MANAGED`. `subset_size` is optional for Internal HTTP(S) load balancing and required for Traffic Director. If you do not provide this value, Cloud Load Balancing will calculate it dynamically to optimize the number of proxies/clients visible to each backend and vice versa. Must be greater than 0. If `subset_size` is larger than the number of backends/endpoints, then subsetting is disabled."
                ]
              }
            ],
            "**timeoutSec**: The backend service timeout has a different meaning depending on the type of load balancer. For more information see, Backend service settings. The default is 30 seconds. The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds. This value can be overridden in the PathMatcher configuration of the UrlMap that references this backend service. Not supported when the backend service is referenced by a URL map that is bound to target gRPC proxy that has validateForProxyless field set to true. Instead, use maxStreamDuration.",
            "**usedBy**",
            "**vpcNetworkScope**: The network scope of the backends that can be added to the backend service. This field can be either GLOBAL_VPC_NETWORK or REGIONAL_VPC_NETWORK. A backend service with the VPC scope set to GLOBAL_VPC_NETWORK is only allowed to have backends in global VPC networks. When the VPC scope is set to REGIONAL_VPC_NETWORK the backend service is only allowed to have backends in regional networks in the same scope as the backend service. Note: if not specified then GLOBAL_VPC_NETWORK will be used."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
