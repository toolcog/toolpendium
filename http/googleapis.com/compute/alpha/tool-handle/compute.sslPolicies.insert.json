{
  "name": "compute_sslPolicies_insert",
  "description": "Returns the specified SSL policy resource.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Project ID for this request."
      },
      "requestId": {
        "type": "string",
        "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "userIp": {
        "type": "string",
        "description": "Legacy name for parameter that has been superseded by `quotaUser`."
      },
      "body": {
        "$ref": "#/$defs/SslPolicy"
      }
    },
    "required": [
      "project"
    ],
    "$defs": {
      "SslPolicy": {
        "description": "Represents an SSL Policy resource. Use SSL policies to control SSL features, such as versions and cipher suites, that are offered by Application Load Balancers and proxy Network Load Balancers. For more information, read SSL policies overview.",
        "properties": {
          "creationTimestamp": {
            "description": "[Output Only] Creation timestamp in RFC3339 text format.",
            "type": "string"
          },
          "customFeatures": {
            "description": "A list of features enabled when the selected profile is CUSTOM. The method returns the set of features that can be specified in this list. This field must be empty if the profile is not CUSTOM.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "description": "An optional description of this resource. Provide this property when you create the resource.",
            "type": "string"
          },
          "enabledFeatures": {
            "description": "[Output Only] The list of features enabled in the SSL policy.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a SslPolicy. An up-to-date fingerprint must be provided in order to update the SslPolicy, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve an SslPolicy.",
            "format": "byte",
            "type": "string"
          },
          "id": {
            "description": "[Output Only] The unique identifier for the resource. This identifier is defined by the server.",
            "format": "uint64",
            "type": "string"
          },
          "kind": {
            "default": "compute#sslPolicy",
            "description": "[Output only] Type of the resource. Always compute#sslPolicyfor SSL policies.",
            "type": "string"
          },
          "minTlsVersion": {
            "description": "The minimum version of SSL protocol that can be used by the clients to establish a connection with the load balancer. This can be one of TLS_1_0, TLS_1_1, TLS_1_2.",
            "enum": [
              "TLS_1_0",
              "TLS_1_1",
              "TLS_1_2"
            ],
            "type": "string"
          },
          "name": {
            "description": "Name of the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
            "pattern": "[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?",
            "type": "string"
          },
          "profile": {
            "description": "Profile specifies the set of SSL features that can be used by the load balancer when negotiating SSL with clients. This can be one of COMPATIBLE, MODERN, RESTRICTED, or CUSTOM. If using CUSTOM, the set of SSL features to enable must be specified in the customFeatures field.",
            "enum": [
              "COMPATIBLE",
              "CUSTOM",
              "MODERN",
              "RESTRICTED"
            ],
            "type": "string"
          },
          "region": {
            "description": "[Output Only] URL of the region where the regional SSL policy resides. This field is not applicable to global SSL policies.",
            "type": "string"
          },
          "selfLink": {
            "description": "[Output Only] Server-defined URL for the resource.",
            "type": "string"
          },
          "selfLinkWithId": {
            "description": "[Output Only] Server-defined URL for this resource with the resource id.",
            "type": "string"
          },
          "tlsSettings": {
            "$ref": "#/$defs/ServerTlsSettings"
          },
          "warnings": {
            "description": "[Output Only] If potential misconfigurations are detected for this SSL policy, this field will be populated with warning messages.",
            "items": {
              "properties": {
                "code": {
                  "description": "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.",
                  "enum": [
                    "CLEANUP_FAILED",
                    "DEPRECATED_RESOURCE_USED",
                    "DEPRECATED_TYPE_USED",
                    "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
                    "EXPERIMENTAL_TYPE_USED",
                    "EXTERNAL_API_WARNING",
                    "FIELD_VALUE_OVERRIDEN",
                    "INJECTED_KERNELS_DEPRECATED",
                    "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
                    "LARGE_DEPLOYMENT_WARNING",
                    "LIST_OVERHEAD_QUOTA_EXCEED",
                    "MISSING_TYPE_DEPENDENCY",
                    "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
                    "NEXT_HOP_CANNOT_IP_FORWARD",
                    "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
                    "NEXT_HOP_INSTANCE_NOT_FOUND",
                    "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
                    "NEXT_HOP_NOT_RUNNING",
                    "NOT_CRITICAL_ERROR",
                    "NO_RESULTS_ON_PAGE",
                    "PARTIAL_SUCCESS",
                    "REQUIRED_TOS_AGREEMENT",
                    "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
                    "RESOURCE_NOT_DELETED",
                    "SCHEMA_VALIDATION_IGNORED",
                    "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
                    "UNDECLARED_PROPERTIES",
                    "UNREACHABLE"
                  ],
                  "type": "string",
                  "x-enumDeprecated": [
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false
                  ]
                },
                "data": {
                  "description": "[Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" } ",
                  "items": {
                    "properties": {
                      "key": {
                        "description": "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).",
                        "type": "string"
                      },
                      "value": {
                        "description": "[Output Only] A warning data value corresponding to the key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "description": "[Output Only] A human-readable description of the warning code.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServerTlsSettings": {
        "description": "The TLS settings for the server.",
        "properties": {
          "proxyTlsContext": {
            "$ref": "#/$defs/TlsContext"
          },
          "subjectAltNames": {
            "description": "A list of alternate names to verify the subject identity in the certificate presented by the client.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tlsMode": {
            "description": "Indicates whether connections should be secured using TLS. The value of this field determines how TLS is enforced. This field can be set to one of the following: - SIMPLE Secure connections with standard TLS semantics. - MUTUAL Secure connections to the backends using mutual TLS by presenting client certificates for authentication. ",
            "enum": [
              "INVALID",
              "MUTUAL",
              "SIMPLE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TlsContext": {
        "description": "[Deprecated] The TLS settings for the client or server. The TLS settings for the client or server.",
        "properties": {
          "certificateContext": {
            "$ref": "#/$defs/TlsCertificateContext"
          },
          "validationContext": {
            "$ref": "#/$defs/TlsValidationContext"
          }
        },
        "type": "object"
      },
      "TlsCertificateContext": {
        "description": "[Deprecated] Defines the mechanism to obtain the client or server certificate. Defines the mechanism to obtain the client or server certificate.",
        "properties": {
          "certificatePaths": {
            "$ref": "#/$defs/TlsCertificatePaths"
          },
          "certificateSource": {
            "description": "Defines how TLS certificates are obtained.",
            "enum": [
              "INVALID",
              "USE_PATH",
              "USE_SDS"
            ],
            "type": "string"
          },
          "sdsConfig": {
            "$ref": "#/$defs/SdsConfig"
          }
        },
        "type": "object"
      },
      "TlsCertificatePaths": {
        "description": "[Deprecated] The paths to the mounted TLS Certificates and private key. The paths to the mounted TLS Certificates and private key.",
        "properties": {
          "certificatePath": {
            "description": "The path to the file holding the client or server TLS certificate to use.",
            "type": "string"
          },
          "privateKeyPath": {
            "description": "The path to the file holding the client or server private key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SdsConfig": {
        "description": "[Deprecated] The configuration to access the SDS server. The configuration to access the SDS server.",
        "properties": {
          "grpcServiceConfig": {
            "$ref": "#/$defs/GrpcServiceConfig"
          }
        },
        "type": "object"
      },
      "GrpcServiceConfig": {
        "description": "[Deprecated] gRPC config to access the SDS server. gRPC config to access the SDS server.",
        "properties": {
          "callCredentials": {
            "$ref": "#/$defs/CallCredentials"
          },
          "channelCredentials": {
            "$ref": "#/$defs/ChannelCredentials"
          },
          "targetUri": {
            "description": "The target URI of the SDS server.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CallCredentials": {
        "description": "[Deprecated] gRPC call credentials to access the SDS server. gRPC call credentials to access the SDS server.",
        "properties": {
          "callCredentialType": {
            "description": "The type of call credentials to use for GRPC requests to the SDS server. This field can be set to one of the following: - GCE_VM: The local GCE VM service account credentials are used to access the SDS server. - FROM_PLUGIN: Custom authenticator credentials are used to access the SDS server.",
            "enum": [
              "FROM_PLUGIN",
              "GCE_VM",
              "INVALID"
            ],
            "type": "string"
          },
          "fromPlugin": {
            "$ref": "#/$defs/MetadataCredentialsFromPlugin"
          }
        },
        "type": "object"
      },
      "MetadataCredentialsFromPlugin": {
        "description": "[Deprecated] Custom authenticator credentials. Custom authenticator credentials.",
        "properties": {
          "name": {
            "description": "Plugin name.",
            "type": "string"
          },
          "structConfig": {
            "description": "A text proto that conforms to a Struct type definition interpreted by the plugin.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ChannelCredentials": {
        "description": "[Deprecated] gRPC channel credentials to access the SDS server. gRPC channel credentials to access the SDS server.",
        "properties": {
          "certificates": {
            "$ref": "#/$defs/TlsCertificatePaths"
          },
          "channelCredentialType": {
            "description": "The channel credentials to access the SDS server. This field can be set to one of the following: CERTIFICATES: Use TLS certificates to access the SDS server. GCE_VM: Use local GCE VM credentials to access the SDS server.",
            "enum": [
              "CERTIFICATES",
              "GCE_VM",
              "INVALID"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TlsValidationContext": {
        "description": "[Deprecated] Defines the mechanism to obtain the Certificate Authority certificate to validate the client/server certificate. validate the client/server certificate.",
        "properties": {
          "certificatePath": {
            "description": "The path to the file holding the CA certificate to validate the client or server certificate.",
            "type": "string"
          },
          "sdsConfig": {
            "$ref": "#/$defs/SdsConfig"
          },
          "validationSource": {
            "description": "Defines how TLS certificates are obtained.",
            "enum": [
              "INVALID",
              "USE_PATH",
              "USE_SDS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://compute.googleapis.com/compute/alpha/projects/{project}/global/sslPolicies{?requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType,userIp}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/alpha/globalOperations) * [Regional](/compute/docs/reference/rest/alpha/regionOperations) * [Zonal](/compute/docs/reference/rest/alpha/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.",
        "**Key properties:**",
        {
          "$ul": [
            "**clientOperationId**: [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.",
            "**creationTimestamp**: [Deprecated] This field is deprecated.",
            "**description**: [Output Only] A textual description of the operation, which is set when the operation is created.",
            "**endTime**: [Output Only] The time that this operation was completed. This value is in RFC3339 text format.",
            [
              "**error**: [Output Only] If errors are generated during processing of the operation, this field will be populated.",
              {
                "$ul": [
                  "**errors**: [Output Only] The array of errors encountered while processing this operation."
                ]
              }
            ],
            "**httpErrorMessage**: [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.",
            "**httpErrorStatusCode**: [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.",
            "**id**: [Output Only] The unique identifier for the operation. This identifier is defined by the server.",
            "**insertTime**: [Output Only] The time that this operation was requested. This value is in RFC3339 text format.",
            [
              "**instancesBulkInsertOperationMetadata**",
              {
                "$ul": [
                  "**perLocationStatus**: Status information per location (location name is key). Example key: zones/us-central1-a"
                ]
              }
            ],
            "**kind**: [Output Only] Type of the resource. Always `compute#operation` for Operation resources. (default: compute#operation)",
            "**name**: [Output Only] Name of the operation.",
            "**operationGroupId**: [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.",
            "**operationType**: [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.",
            "**progress**: [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.",
            "**region**: [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.",
            "**selfLink**: [Output Only] Server-defined URL for the resource.",
            "**selfLinkWithId**: [Output Only] Server-defined URL for this resource with the resource id.",
            [
              "**setCommonInstanceMetadataOperationMetadata**",
              {
                "$ul": [
                  "**clientOperationId**: [Output Only] The client operation id.",
                  "**perLocationOperations**: [Output Only] Status information per location (location name is key). Example key: zones/us-central1-a"
                ]
              }
            ],
            "**startTime**: [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.",
            "**status**: [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.",
            "**statusMessage**: [Output Only] An optional textual description of the current status of the operation.",
            "**targetId**: [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.",
            "**targetLink**: [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.",
            "**user**: [Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`.",
            "**warnings**: [Output Only] If warning messages are generated during processing of the operation, this field will be populated.",
            "**zone**: [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
