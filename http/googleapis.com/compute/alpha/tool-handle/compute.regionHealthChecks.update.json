{
  "name": "compute_regionHealthChecks_update",
  "description": "Updates a HealthCheck resource in the specified project using the data included in the request.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Project ID for this request."
      },
      "region": {
        "type": "string",
        "description": "Name of the region scoping this request."
      },
      "healthCheck": {
        "type": "string",
        "description": "Name of the HealthCheck resource to update."
      },
      "requestId": {
        "type": "string",
        "description": "An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported ( 00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "userIp": {
        "type": "string",
        "description": "Legacy name for parameter that has been superseded by `quotaUser`."
      },
      "body": {
        "$ref": "#/$defs/HealthCheck"
      }
    },
    "required": [
      "project",
      "region",
      "healthCheck"
    ],
    "$defs": {
      "HealthCheck": {
        "description": "Represents a health check resource. Google Compute Engine has two health check resources: * [Regional](/compute/docs/reference/rest/alpha/regionHealthChecks) * [Global](/compute/docs/reference/rest/alpha/healthChecks) These health check resources can be used for load balancing and for autohealing VMs in a managed instance group (MIG). **Load balancing** Health check requirements vary depending on the type of load balancer. For details about the type of health check supported for each load balancer and corresponding backend type, see Health checks overview: Load balancer guide. **Autohealing in MIGs** The health checks that you use for autohealing VMs in a MIG can be either regional or global. For more information, see Set up an application health check and autohealing. For more information, see Health checks overview.",
        "properties": {
          "checkIntervalSec": {
            "description": "How often (in seconds) to send a health check. The default value is 5 seconds.",
            "format": "int32",
            "type": "integer"
          },
          "creationTimestamp": {
            "description": "[Output Only] Creation timestamp in 3339 text format.",
            "type": "string"
          },
          "description": {
            "description": "An optional description of this resource. Provide this property when you create the resource.",
            "type": "string"
          },
          "grpcHealthCheck": {
            "$ref": "#/$defs/GRPCHealthCheck"
          },
          "healthyThreshold": {
            "description": "A so-far unhealthy instance will be marked healthy after this many consecutive successes. The default value is 2.",
            "format": "int32",
            "type": "integer"
          },
          "http2HealthCheck": {
            "$ref": "#/$defs/HTTP2HealthCheck"
          },
          "httpHealthCheck": {
            "$ref": "#/$defs/HTTPHealthCheck"
          },
          "httpsHealthCheck": {
            "$ref": "#/$defs/HTTPSHealthCheck"
          },
          "id": {
            "description": "[Output Only] The unique identifier for the resource. This identifier is defined by the server.",
            "format": "uint64",
            "type": "string"
          },
          "kind": {
            "default": "compute#healthCheck",
            "description": "Type of the resource.",
            "type": "string"
          },
          "logConfig": {
            "$ref": "#/$defs/HealthCheckLogConfig"
          },
          "name": {
            "description": "Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. For example, a name that is 1-63 characters long, matches the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?`, and otherwise complies with RFC1035. This regular expression describes a name where the first character is a lowercase letter, and all following characters are a dash, lowercase letter, or digit, except the last character, which isn't a dash.",
            "pattern": "[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?",
            "type": "string"
          },
          "region": {
            "description": "[Output Only] Region where the health check resides. Not applicable to global health checks.",
            "type": "string"
          },
          "selfLink": {
            "description": "[Output Only] Server-defined URL for the resource.",
            "type": "string"
          },
          "selfLinkWithId": {
            "description": "[Output Only] Server-defined URL for this resource with the resource id.",
            "type": "string"
          },
          "sourceRegions": {
            "description": "The list of cloud regions from which health checks are performed. If any regions are specified, then exactly 3 regions should be specified. The region names must be valid names of GCP regions. This can only be set for global health check. If this list is non-empty, then there are restrictions on what other health check fields are supported and what other resources can use this health check: - SSL, HTTP2, and GRPC protocols are not supported. - The TCP request field is not supported. - The proxyHeader field for HTTP, HTTPS, and TCP is not supported. - The checkIntervalSec field must be at least 30. - The health check cannot be used with BackendService nor with managed instance group auto-healing. ",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sslHealthCheck": {
            "$ref": "#/$defs/SSLHealthCheck"
          },
          "tcpHealthCheck": {
            "$ref": "#/$defs/TCPHealthCheck"
          },
          "timeoutSec": {
            "description": "How long (in seconds) to wait before claiming failure. The default value is 5 seconds. It is invalid for timeoutSec to have greater value than checkIntervalSec.",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "Specifies the type of the healthCheck, either TCP, SSL, HTTP, HTTPS, HTTP2 or GRPC. Exactly one of the protocol-specific health check fields must be specified, which must match type field.",
            "enum": [
              "GRPC",
              "HTTP",
              "HTTP2",
              "HTTPS",
              "INVALID",
              "SSL",
              "TCP",
              "UDP"
            ],
            "type": "string"
          },
          "udpHealthCheck": {
            "$ref": "#/$defs/UDPHealthCheck"
          },
          "unhealthyThreshold": {
            "description": "A so-far healthy instance will be marked unhealthy after this many consecutive failures. The default value is 2.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GRPCHealthCheck": {
        "properties": {
          "grpcServiceName": {
            "description": "The gRPC service name for the health check. This field is optional. The value of grpc_service_name has the following meanings by convention: - Empty service_name means the overall status of all services at the backend. - Non-empty service_name means the health of that gRPC service, as defined by the owner of the service. The grpc_service_name can only be ASCII.",
            "type": "string"
          },
          "port": {
            "description": "The TCP port number to which the health check prober sends packets. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "portSpecification": {
            "description": "Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.",
            "enum": [
              "USE_FIXED_PORT",
              "USE_NAMED_PORT",
              "USE_SERVING_PORT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTP2HealthCheck": {
        "properties": {
          "host": {
            "description": "The value of the host header in the HTTP/2 health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest",
            "type": "string"
          },
          "port": {
            "description": "The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "portSpecification": {
            "description": "Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.",
            "enum": [
              "USE_FIXED_PORT",
              "USE_NAMED_PORT",
              "USE_SERVING_PORT"
            ],
            "type": "string"
          },
          "proxyHeader": {
            "description": "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.",
            "enum": [
              "NONE",
              "PROXY_V1"
            ],
            "type": "string"
          },
          "requestPath": {
            "description": "The request path of the HTTP/2 health check request. The default value is /.",
            "type": "string"
          },
          "response": {
            "description": "Creates a content-based HTTP/2 health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http",
            "type": "string"
          },
          "weightReportMode": {
            "description": "Weight report mode. used for weighted Load Balancing.",
            "enum": [
              "DISABLE",
              "DRY_RUN",
              "ENABLE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPHealthCheck": {
        "properties": {
          "host": {
            "description": "The value of the host header in the HTTP health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest",
            "type": "string"
          },
          "port": {
            "description": "The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "portSpecification": {
            "description": "Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Also supported in legacy HTTP health checks for target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for pass-through load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.",
            "enum": [
              "USE_FIXED_PORT",
              "USE_NAMED_PORT",
              "USE_SERVING_PORT"
            ],
            "type": "string"
          },
          "proxyHeader": {
            "description": "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.",
            "enum": [
              "NONE",
              "PROXY_V1"
            ],
            "type": "string"
          },
          "requestPath": {
            "description": "The request path of the HTTP health check request. The default value is /.",
            "type": "string"
          },
          "response": {
            "description": "Creates a content-based HTTP health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http",
            "type": "string"
          },
          "weightReportMode": {
            "description": "Weight report mode. used for weighted Load Balancing.",
            "enum": [
              "DISABLE",
              "DRY_RUN",
              "ENABLE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPSHealthCheck": {
        "properties": {
          "host": {
            "description": "The value of the host header in the HTTPS health check request. If left empty (default value), the host header is set to the destination IP address to which health check packets are sent. The destination IP address depends on the type of load balancer. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#hc-packet-dest",
            "type": "string"
          },
          "port": {
            "description": "The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "portSpecification": {
            "description": "Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.",
            "enum": [
              "USE_FIXED_PORT",
              "USE_NAMED_PORT",
              "USE_SERVING_PORT"
            ],
            "type": "string"
          },
          "proxyHeader": {
            "description": "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.",
            "enum": [
              "NONE",
              "PROXY_V1"
            ],
            "type": "string"
          },
          "requestPath": {
            "description": "The request path of the HTTPS health check request. The default value is /.",
            "type": "string"
          },
          "response": {
            "description": "Creates a content-based HTTPS health check. In addition to the required HTTP 200 (OK) status code, you can configure the health check to pass only when the backend sends this specific ASCII response string within the first 1024 bytes of the HTTP response body. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-http",
            "type": "string"
          },
          "weightReportMode": {
            "description": "Weight report mode. used for weighted Load Balancing.",
            "enum": [
              "DISABLE",
              "DRY_RUN",
              "ENABLE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "HealthCheckLogConfig": {
        "description": "Configuration of logging on a health check. If logging is enabled, logs will be exported to Stackdriver.",
        "properties": {
          "enable": {
            "description": "Indicates whether or not to export logs. This is false by default, which means no health check logging will be done.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SSLHealthCheck": {
        "properties": {
          "port": {
            "description": "The TCP port number to which the health check prober sends packets. The default value is 443. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "portSpecification": {
            "description": "Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.",
            "enum": [
              "USE_FIXED_PORT",
              "USE_NAMED_PORT",
              "USE_SERVING_PORT"
            ],
            "type": "string"
          },
          "proxyHeader": {
            "description": "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.",
            "enum": [
              "NONE",
              "PROXY_V1"
            ],
            "type": "string"
          },
          "request": {
            "description": "Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection and SSL handshake.",
            "type": "string"
          },
          "response": {
            "description": "Creates a content-based SSL health check. In addition to establishing a TCP connection and the TLS handshake, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TCPHealthCheck": {
        "properties": {
          "port": {
            "description": "The TCP port number to which the health check prober sends packets. The default value is 80. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "portSpecification": {
            "description": "Specifies how a port is selected for health checking. Can be one of the following values: USE_FIXED_PORT: Specifies a port number explicitly using the port field in the health check. Supported by backend services for passthrough load balancers and backend services for proxy load balancers. Not supported by target pools. The health check supports all backends supported by the backend service provided the backend can be health checked. For example, GCE_VM_IP network endpoint groups, GCE_VM_IP_PORT network endpoint groups, and instance group backends. USE_NAMED_PORT: Not supported. USE_SERVING_PORT: Provides an indirect method of specifying the health check port by referring to the backend service. Only supported by backend services for proxy load balancers. Not supported by target pools. Not supported by backend services for passthrough load balancers. Supports all backends that can be health checked; for example, GCE_VM_IP_PORT network endpoint groups and instance group backends. For GCE_VM_IP_PORT network endpoint group backends, the health check uses the port number specified for each endpoint in the network endpoint group. For instance group backends, the health check uses the port number determined by looking up the backend service's named port in the instance group's list of named ports.",
            "enum": [
              "USE_FIXED_PORT",
              "USE_NAMED_PORT",
              "USE_SERVING_PORT"
            ],
            "type": "string"
          },
          "proxyHeader": {
            "description": "Specifies the type of proxy header to append before sending data to the backend, either NONE or PROXY_V1. The default is NONE.",
            "enum": [
              "NONE",
              "PROXY_V1"
            ],
            "type": "string"
          },
          "request": {
            "description": "Instructs the health check prober to send this exact ASCII string, up to 1024 bytes in length, after establishing the TCP connection.",
            "type": "string"
          },
          "response": {
            "description": "Creates a content-based TCP health check. In addition to establishing a TCP connection, you can configure the health check to pass only when the backend sends this exact response ASCII string, up to 1024 bytes in length. For details, see: https://cloud.google.com/load-balancing/docs/health-check-concepts#criteria-protocol-ssl-tcp",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UDPHealthCheck": {
        "properties": {
          "port": {
            "description": "The UDP port number to which the health check prober sends packets. Valid values are 1 through 65535.",
            "format": "int32",
            "type": "integer"
          },
          "portName": {
            "description": "Not supported.",
            "type": "string"
          },
          "request": {
            "description": "Raw data of request to send in payload of UDP packet. It is an error if this is empty. The request data can only be ASCII.",
            "type": "string"
          },
          "response": {
            "description": "The bytes to match against the beginning of the response data. It is an error if this is empty. The response data can only be ASCII.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://compute.googleapis.com/compute/alpha/projects/{project}/regions/{region}/healthChecks/{healthCheck}{?requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType,userIp}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/alpha/globalOperations) * [Regional](/compute/docs/reference/rest/alpha/regionOperations) * [Zonal](/compute/docs/reference/rest/alpha/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.",
        "**Key properties:**",
        {
          "$ul": [
            "**clientOperationId**: [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.",
            "**creationTimestamp**: [Deprecated] This field is deprecated.",
            "**description**: [Output Only] A textual description of the operation, which is set when the operation is created.",
            "**endTime**: [Output Only] The time that this operation was completed. This value is in RFC3339 text format.",
            [
              "**error**: [Output Only] If errors are generated during processing of the operation, this field will be populated.",
              {
                "$ul": [
                  "**errors**: [Output Only] The array of errors encountered while processing this operation."
                ]
              }
            ],
            "**httpErrorMessage**: [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.",
            "**httpErrorStatusCode**: [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.",
            "**id**: [Output Only] The unique identifier for the operation. This identifier is defined by the server.",
            "**insertTime**: [Output Only] The time that this operation was requested. This value is in RFC3339 text format.",
            [
              "**instancesBulkInsertOperationMetadata**",
              {
                "$ul": [
                  "**perLocationStatus**: Status information per location (location name is key). Example key: zones/us-central1-a"
                ]
              }
            ],
            "**kind**: [Output Only] Type of the resource. Always `compute#operation` for Operation resources. (default: compute#operation)",
            "**name**: [Output Only] Name of the operation.",
            "**operationGroupId**: [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.",
            "**operationType**: [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.",
            "**progress**: [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.",
            "**region**: [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.",
            "**selfLink**: [Output Only] Server-defined URL for the resource.",
            "**selfLinkWithId**: [Output Only] Server-defined URL for this resource with the resource id.",
            [
              "**setCommonInstanceMetadataOperationMetadata**",
              {
                "$ul": [
                  "**clientOperationId**: [Output Only] The client operation id.",
                  "**perLocationOperations**: [Output Only] Status information per location (location name is key). Example key: zones/us-central1-a"
                ]
              }
            ],
            "**startTime**: [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.",
            "**status**: [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.",
            "**statusMessage**: [Output Only] An optional textual description of the current status of the operation.",
            "**targetId**: [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.",
            "**targetLink**: [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.",
            "**user**: [Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`.",
            "**warnings**: [Output Only] If warning messages are generated during processing of the operation, this field will be populated.",
            "**zone**: [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
