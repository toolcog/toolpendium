{
  "name": "storage_objects_insert",
  "description": "Stores new data blobs and associated metadata.",
  "parameters": {
    "type": "object",
    "properties": {
      "bucket": {
        "type": "string",
        "description": "Name of the bucket in which to store the new object. Overrides the provided object metadata's bucket value, if any."
      },
      "ifGenerationMatch": {
        "type": "string",
        "description": "Makes the operation conditional on whether the object's current generation matches the given value."
      },
      "ifGenerationNotMatch": {
        "type": "string",
        "description": "Makes the operation conditional on whether the object's current generation does not match the given value."
      },
      "ifMetagenerationMatch": {
        "type": "string",
        "description": "Makes the operation conditional on whether the object's current metageneration matches the given value."
      },
      "ifMetagenerationNotMatch": {
        "type": "string",
        "description": "Makes the operation conditional on whether the object's current metageneration does not match the given value."
      },
      "name": {
        "type": "string",
        "description": "Name of the object. Required when the object metadata is not otherwise provided. Overrides the object metadata's name value, if any."
      },
      "projection": {
        "enum": [
          "full",
          "noAcl"
        ],
        "type": "string",
        "description": "Set of properties to return. Defaults to noAcl, unless the object resource specifies the acl property, when it defaults to full."
      },
      "alt": {
        "enum": [
          "json"
        ],
        "type": "string",
        "description": "Data format for the response."
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
      },
      "userIp": {
        "type": "string",
        "description": "Deprecated. Please use quotaUser instead."
      }
    },
    "required": [
      "bucket"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://storage.googleapis.com/storage/v1beta2/b/{bucket}/o{?ifGenerationMatch,ifGenerationNotMatch,ifMetagenerationMatch,ifMetagenerationNotMatch,name,projection,alt,fields,key,oauth_token,prettyPrint,quotaUser,userIp}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An object.",
        "**Key properties:**",
        {
          "$ul": [
            "**acl**: Access controls on the object.",
            "**bucket**: The bucket containing this object.",
            "**cacheControl**: Cache-Control directive for the object data.",
            "**componentCount**: Number of underlying components that make up this object. Components are accumulated by compose operations and are limited to a count of 32.",
            "**contentDisposition**: Content-Disposition of the object data.",
            "**contentEncoding**: Content-Encoding of the object data.",
            "**contentLanguage**: Content-Language of the object data.",
            "**contentType**: Content-Type of the object data.",
            "**crc32c**: CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64.",
            "**etag**: HTTP 1.1 Entity tag for the object.",
            "**generation**: The content generation of this object. Used for object versioning.",
            "**id**: The ID of the object.",
            "**kind**: The kind of item this is. For objects, this is always storage#object. (default: storage#object)",
            "**md5Hash**: MD5 hash of the data; encoded using base64.",
            "**mediaLink**: Media download link.",
            "**metadata**: User-provided metadata, in key/value pairs.",
            "**metageneration**: The generation of the metadata for this object at this generation. Used for metadata versioning. Has no meaning outside of the context of this generation.",
            "**name**: The name of this object. Required if not specified by URL parameter.",
            [
              "**owner**: The owner of the object. This will always be the uploader of the object.",
              {
                "$ul": [
                  "**entity**: The entity, in the form user-userId.",
                  "**entityId**: The ID for the entity."
                ]
              }
            ],
            "**selfLink**: The link to this object.",
            "**size**: Content-Length of the data in bytes.",
            "**storageClass**: Storage class of the object.",
            "**timeDeleted**: Deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.",
            "**updated**: Modification time of the object metadata in RFC 3339 format."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
