{
  "name": "storage_buckets_get",
  "description": "Returns metadata for the specified bucket.",
  "parameters": {
    "type": "object",
    "properties": {
      "bucket": {
        "type": "string",
        "description": "Name of a bucket."
      },
      "ifMetagenerationMatch": {
        "type": "string",
        "description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value."
      },
      "ifMetagenerationNotMatch": {
        "type": "string",
        "description": "Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value."
      },
      "projection": {
        "enum": [
          "full",
          "noAcl"
        ],
        "type": "string",
        "description": "Set of properties to return. Defaults to noAcl."
      },
      "alt": {
        "enum": [
          "json"
        ],
        "type": "string",
        "description": "Data format for the response."
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
      },
      "userIp": {
        "type": "string",
        "description": "Deprecated. Please use quotaUser instead."
      }
    },
    "required": [
      "bucket"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://storage.googleapis.com/storage/v1beta2/b/{bucket}{?ifMetagenerationMatch,ifMetagenerationNotMatch,projection,alt,fields,key,oauth_token,prettyPrint,quotaUser,userIp}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A bucket.",
        "**Key properties:**",
        {
          "$ul": [
            "**acl**: Access controls on the bucket.",
            "**cors**: The bucket's Cross-Origin Resource Sharing (CORS) configuration.",
            "**defaultObjectAcl**: Default access controls to apply to new objects when no ACL is provided.",
            "**etag**: HTTP 1.1 Entity tag for the bucket.",
            "**id**: The ID of the bucket.",
            "**kind**: The kind of item this is. For buckets, this is always storage#bucket. (default: storage#bucket)",
            [
              "**lifecycle**: The bucket's lifecycle configuration. See object lifecycle management for more information.",
              {
                "$ul": [
                  "**rule**: A lifecycle management rule, which is made of an action to take and the condition(s) under which the action will be taken."
                ]
              }
            ],
            "**location**: The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Typical values are US and EU. Defaults to US. See the developer's guide for the authoritative list.",
            [
              "**logging**: The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.",
              {
                "$ul": [
                  "**logBucket**: The destination bucket where the current bucket's logs should be placed.",
                  "**logObjectPrefix**: A prefix for log object names."
                ]
              }
            ],
            "**metageneration**: The metadata generation of this bucket.",
            "**name**: The name of the bucket.",
            [
              "**owner**: The owner of the bucket. This is always the project team's owner group.",
              {
                "$ul": [
                  "**entity**: The entity, in the form group-groupId.",
                  "**entityId**: The ID for the entity."
                ]
              }
            ],
            "**selfLink**: The URI of this bucket.",
            "**storageClass**: The bucket's storage class. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Typical values are STANDARD and DURABLE_REDUCED_AVAILABILITY. Defaults to STANDARD. See the developer's guide for the authoritative list.",
            "**timeCreated**: Creation time of the bucket in RFC 3339 format.",
            [
              "**versioning**: The bucket's versioning configuration.",
              {
                "$ul": [
                  "**enabled**: While set to true, versioning is fully enabled for this bucket."
                ]
              }
            ],
            [
              "**website**: The bucket's website configuration.",
              {
                "$ul": [
                  "**mainPageSuffix**: Behaves as the bucket's directory index where missing objects are treated as potential directories.",
                  "**notFoundPage**: The custom object to return when a requested resource is not found."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
