{
  "name": "storage_buckets_lockRetentionPolicy",
  "description": "Locks retention policy on a bucket.",
  "parameters": {
    "type": "object",
    "properties": {
      "bucket": {
        "type": "string",
        "description": "Name of a bucket."
      },
      "ifMetagenerationMatch": {
        "type": "string",
        "description": "Makes the operation conditional on whether bucket's current metageneration matches the given value."
      },
      "userProject": {
        "type": "string",
        "description": "The project to be billed for this request. Required for Requester Pays buckets."
      },
      "alt": {
        "enum": [
          "json"
        ],
        "type": "string",
        "description": "Data format for the response."
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
      },
      "uploadType": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\")."
      },
      "userIp": {
        "type": "string",
        "description": "Deprecated. Please use quotaUser instead."
      }
    },
    "required": [
      "bucket",
      "ifMetagenerationMatch"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://storage.googleapis.com/storage/v1/b/{bucket}/lockRetentionPolicy{?ifMetagenerationMatch,userProject,alt,fields,key,oauth_token,prettyPrint,quotaUser,uploadType,userIp}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A bucket.",
        "**Key properties:**",
        {
          "$ul": [
            "**acl**: Access controls on the bucket.",
            [
              "**autoclass**: The bucket's Autoclass configuration.",
              {
                "$ul": [
                  "**enabled**: Whether or not Autoclass is enabled on this bucket",
                  "**terminalStorageClass**: The storage class that objects in the bucket eventually transition to if they are not read for a certain length of time. Valid values are NEARLINE and ARCHIVE.",
                  "**terminalStorageClassUpdateTime**: A date and time in RFC 3339 format representing the time of the most recent update to \"terminalStorageClass\".",
                  "**toggleTime**: A date and time in RFC 3339 format representing the instant at which \"enabled\" was last toggled."
                ]
              }
            ],
            [
              "**billing**: The bucket's billing configuration.",
              {
                "$ul": [
                  "**requesterPays**: When set to true, Requester Pays is enabled for this bucket."
                ]
              }
            ],
            "**cors**: The bucket's Cross-Origin Resource Sharing (CORS) configuration.",
            [
              "**customPlacementConfig**: The bucket's custom placement configuration for Custom Dual Regions.",
              {
                "$ul": [
                  "**dataLocations**: The list of regional locations in which data is placed."
                ]
              }
            ],
            "**defaultEventBasedHold**: The default value for event-based hold on newly created objects in this bucket. Event-based hold is a way to retain objects indefinitely until an event occurs, signified by the hold's release. After being released, such objects will be subject to bucket-level retention (if any). One sample use case of this flag is for banks to hold loan documents for at least 3 years after loan is paid in full. Here, bucket-level retention is 3 years and the event is loan being paid in full. In this example, these objects will be held intact for any number of years until the event has occurred (event-based hold on the object is released) and then 3 more years after that. That means retention duration of the objects begins from the moment event-based hold transitioned from true to false. Objects under event-based hold cannot be deleted, overwritten or archived until the hold is removed.",
            "**defaultObjectAcl**: Default access controls to apply to new objects when no ACL is provided.",
            [
              "**encryption**: Encryption configuration for a bucket.",
              {
                "$ul": [
                  "**defaultKmsKeyName**: A Cloud KMS key that will be used to encrypt objects inserted into this bucket, if no encryption method is specified."
                ]
              }
            ],
            "**etag**: HTTP 1.1 Entity tag for the bucket.",
            [
              "**hierarchicalNamespace**: The bucket's hierarchical namespace configuration.",
              {
                "$ul": [
                  "**enabled**: When set to true, hierarchical namespace is enabled for this bucket."
                ]
              }
            ],
            [
              "**iamConfiguration**: The bucket's IAM configuration.",
              {
                "$ul": [
                  [
                    "**bucketPolicyOnly**: The bucket's uniform bucket-level access configuration. The feature was formerly known as Bucket Policy Only. For backward compatibility, this field will be populated with identical information as the uniformBucketLevelAccess field. We recommend using the uniformBucketLevelAccess field to enable and disable the feature.",
                    {
                      "$ul": [
                        "**enabled**: If set, access is controlled only by bucket-level or above IAM policies.",
                        "**lockedTime**: The deadline for changing iamConfiguration.bucketPolicyOnly.enabled from true to false in RFC 3339 format. iamConfiguration.bucketPolicyOnly.enabled may be changed from true to false until the locked time, after which the field is immutable."
                      ]
                    }
                  ],
                  "**publicAccessPrevention**: The bucket's Public Access Prevention configuration. Currently, 'inherited' and 'enforced' are supported.",
                  [
                    "**uniformBucketLevelAccess**: The bucket's uniform bucket-level access configuration.",
                    {
                      "$ul": [
                        "**enabled**: If set, access is controlled only by bucket-level or above IAM policies.",
                        "**lockedTime**: The deadline for changing iamConfiguration.uniformBucketLevelAccess.enabled from true to false in RFC 3339  format. iamConfiguration.uniformBucketLevelAccess.enabled may be changed from true to false until the locked time, after which the field is immutable."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**id**: The ID of the bucket. For buckets, the id and name properties are the same.",
            "**kind**: The kind of item this is. For buckets, this is always storage#bucket. (default: storage#bucket)",
            "**labels**: User-provided labels, in key/value pairs.",
            [
              "**lifecycle**: The bucket's lifecycle configuration. See lifecycle management for more information.",
              {
                "$ul": [
                  "**rule**: A lifecycle management rule, which is made of an action to take and the condition(s) under which the action will be taken."
                ]
              }
            ],
            "**location**: The location of the bucket. Object data for objects in the bucket resides in physical storage within this region. Defaults to US. See the developer's guide for the authoritative list.",
            "**locationType**: The type of the bucket location.",
            [
              "**logging**: The bucket's logging configuration, which defines the destination bucket and optional name prefix for the current bucket's logs.",
              {
                "$ul": [
                  "**logBucket**: The destination bucket where the current bucket's logs should be placed.",
                  "**logObjectPrefix**: A prefix for log object names."
                ]
              }
            ],
            "**metageneration**: The metadata generation of this bucket.",
            "**name**: The name of the bucket.",
            [
              "**objectRetention**: The bucket's object retention config.",
              {
                "$ul": [
                  "**mode**: The bucket's object retention mode. Can be Enabled."
                ]
              }
            ],
            [
              "**owner**: The owner of the bucket. This is always the project team's owner group.",
              {
                "$ul": [
                  "**entity**: The entity, in the form project-owner-projectId.",
                  "**entityId**: The ID for the entity."
                ]
              }
            ],
            "**projectNumber**: The project number of the project the bucket belongs to.",
            [
              "**retentionPolicy**: The bucket's retention policy. The retention policy enforces a minimum retention time for all objects contained in the bucket, based on their creation time. Any attempt to overwrite or delete objects younger than the retention period will result in a PERMISSION_DENIED error. An unlocked retention policy can be modified or removed from the bucket via a storage.buckets.update operation. A locked retention policy cannot be removed or shortened in duration for the lifetime of the bucket. Attempting to remove or decrease period of a locked retention policy will result in a PERMISSION_DENIED error.",
              {
                "$ul": [
                  "**effectiveTime**: Server-determined value that indicates the time from which policy was enforced and effective. This value is in RFC 3339 format.",
                  "**isLocked**: Once locked, an object retention policy cannot be modified.",
                  "**retentionPeriod**: The duration in seconds that objects need to be retained. Retention duration must be greater than zero and less than 100 years. Note that enforcement of retention periods less than a day is not guaranteed. Such periods should only be used for testing purposes."
                ]
              }
            ],
            "**rpo**: The Recovery Point Objective (RPO) of this bucket. Set to ASYNC_TURBO to turn on Turbo Replication on a bucket.",
            "**satisfiesPZS**: Reserved for future use.",
            "**selfLink**: The URI of this bucket.",
            [
              "**softDeletePolicy**: The bucket's soft delete policy, which defines the period of time that soft-deleted objects will be retained, and cannot be permanently deleted.",
              {
                "$ul": [
                  "**effectiveTime**: Server-determined value that indicates the time from which the policy, or one with a greater retention, was effective. This value is in RFC 3339 format.",
                  "**retentionDurationSeconds**: The duration in seconds that soft-deleted objects in the bucket will be retained and cannot be permanently deleted."
                ]
              }
            ],
            "**storageClass**: The bucket's default storage class, used whenever no storageClass is specified for a newly-created object. This defines how objects in the bucket are stored and determines the SLA and the cost of storage. Values include MULTI_REGIONAL, REGIONAL, STANDARD, NEARLINE, COLDLINE, ARCHIVE, and DURABLE_REDUCED_AVAILABILITY. If this value is not specified when the bucket is created, it will default to STANDARD. For more information, see storage classes.",
            "**timeCreated**: The creation time of the bucket in RFC 3339 format.",
            "**updated**: The modification time of the bucket in RFC 3339 format.",
            [
              "**versioning**: The bucket's versioning configuration.",
              {
                "$ul": [
                  "**enabled**: While set to true, versioning is fully enabled for this bucket."
                ]
              }
            ],
            [
              "**website**: The bucket's website configuration, controlling how the service behaves when accessing bucket contents as a web site. See the Static Website Examples for more information.",
              {
                "$ul": [
                  "**mainPageSuffix**: If the requested object path is missing, the service will ensure the path has a trailing '/', append this suffix, and attempt to retrieve the resulting object. This allows the creation of index.html objects to represent directory pages.",
                  "**notFoundPage**: If the requested object path is missing, and any mainPageSuffix object is missing, if applicable, the service will return the named object from this bucket as the content for a 404 Not Found result."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
