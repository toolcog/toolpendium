{
  "name": "storage_objects_bulkRestore",
  "description": "Initiates a long-running bulk restore operation on the specified bucket.",
  "parameters": {
    "type": "object",
    "properties": {
      "bucket": {
        "type": "string",
        "description": "Name of the bucket in which the object resides."
      },
      "alt": {
        "enum": [
          "json"
        ],
        "type": "string",
        "description": "Data format for the response."
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
      },
      "uploadType": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\")."
      },
      "userIp": {
        "type": "string",
        "description": "Deprecated. Please use quotaUser instead."
      },
      "body": {
        "$ref": "#/$defs/BulkRestoreObjectsRequest"
      }
    },
    "required": [
      "bucket"
    ],
    "$defs": {
      "BulkRestoreObjectsRequest": {
        "description": "A bulk restore objects request.",
        "properties": {
          "allowOverwrite": {
            "description": "If false (default), the restore will not overwrite live objects with the same name at the destination. This means some deleted objects may be skipped. If true, live objects will be overwritten resulting in a noncurrent object (if versioning is enabled). If versioning is not enabled, overwriting the object will result in a soft-deleted object. In either case, if a noncurrent object already exists with the same name, a live version can be written without issue.",
            "type": "boolean"
          },
          "copySourceAcl": {
            "description": "If true, copies the source object's ACL; otherwise, uses the bucket's default object ACL. The default is false.",
            "type": "boolean"
          },
          "matchGlobs": {
            "description": "Restores only the objects matching any of the specified glob(s). If this parameter is not specified, all objects will be restored within the specified time range.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "softDeletedAfterTime": {
            "description": "Restores only the objects that were soft-deleted after this time.",
            "format": "date-time",
            "type": "string"
          },
          "softDeletedBeforeTime": {
            "description": "Restores only the objects that were soft-deleted before this time.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://storage.googleapis.com/storage/v1/b/{bucket}/o/bulkRestore{?alt,fields,key,oauth_token,prettyPrint,quotaUser,uploadType,userIp}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is \"false\", it means the operation is still in progress. If \"true\", the operation is completed, and either \"error\" or \"response\" is available.",
            [
              "**error**: The \"Status\" type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each \"Status\" message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the \"name\" should be a resource name ending with \"operations/{operationId}\".",
            "**response**: The normal response of the operation in case of success. If the original method returns no data on success, such as \"Delete\", the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type \"XxxResponse\", where \"Xxx\" is the original method name. For example, if the original method name is \"TakeSnapshot()\", the inferred response type is \"TakeSnapshotResponse\"."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
