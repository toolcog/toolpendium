{
  "name": "mybusinessqanda_locations_questions_create",
  "description": "Adds a question for the specified location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the location to write a question for."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Question"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Question": {
        "description": "Represents a single question and some of its answers.",
        "properties": {
          "author": {
            "$ref": "#/$defs/Author"
          },
          "createTime": {
            "description": "Output only. The timestamp for when the question was written.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.",
            "type": "string"
          },
          "text": {
            "description": "Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.",
            "type": "string"
          },
          "topAnswers": {
            "description": "Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)",
            "items": {
              "$ref": "#/$defs/Answer"
            },
            "readOnly": true,
            "type": "array"
          },
          "totalAnswerCount": {
            "description": "Output only. The total number of answers posted for this question.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "updateTime": {
            "description": "Output only. The timestamp for when the question was last modified.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upvoteCount": {
            "description": "Output only. The number of upvotes for the question.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Author": {
        "description": "Represents the author of a question or answer",
        "properties": {
          "displayName": {
            "description": "The display name of the user",
            "type": "string"
          },
          "profilePhotoUri": {
            "description": "The profile photo URI of the user.",
            "type": "string"
          },
          "type": {
            "description": "The type of user the author is.",
            "enum": [
              "AUTHOR_TYPE_UNSPECIFIED",
              "REGULAR_USER",
              "LOCAL_GUIDE",
              "MERCHANT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Answer": {
        "description": "Represents an answer to a question",
        "properties": {
          "author": {
            "$ref": "#/$defs/Author"
          },
          "createTime": {
            "description": "Output only. The timestamp for when the answer was written. Only retrieved during ListResponse fetching.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. The unique name for the answer locations/*/questions/*/answers/*",
            "readOnly": true,
            "type": "string"
          },
          "text": {
            "description": "Required. The text of the answer. It should contain at least one non-whitespace character. The maximum length is 4096 characters.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp for when the answer was last modified.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upvoteCount": {
            "description": "Output only. The number of upvotes for the answer.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://mybusinessqanda.googleapis.com//v1/{parent}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a single question and some of its answers.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**author**: Represents the author of a question or answer",
              {
                "$ul": [
                  "**displayName**: The display name of the user",
                  "**profilePhotoUri**: The profile photo URI of the user.",
                  "**type**: The type of user the author is."
                ]
              }
            ],
            "**createTime**: Output only. The timestamp for when the question was written.",
            "**name**: Immutable. The unique name for the question. locations/*/questions/* This field will be ignored if set during question creation.",
            "**text**: Required. The text of the question. It should contain at least three words and the total length should be greater than or equal to 10 characters. The maximum length is 4096 characters.",
            "**topAnswers**: Output only. A list of answers to the question, sorted by upvotes. This may not be a complete list of answers depending on the request parameters (answers_per_question)",
            "**totalAnswerCount**: Output only. The total number of answers posted for this question.",
            "**updateTime**: Output only. The timestamp for when the question was last modified.",
            "**upvoteCount**: Output only. The number of upvotes for the question."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
