{
  "name": "bigquery_models_get",
  "description": "Gets the specified model resource by model ID.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Required. Project ID of the requested model."
      },
      "datasetId": {
        "type": "string",
        "description": "Required. Dataset ID of the requested model."
      },
      "modelId": {
        "type": "string",
        "description": "Required. Model ID of the requested model."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "projectId",
      "datasetId",
      "modelId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://bigquery.googleapis.com/bigquery/v2/projects/{projectId}/datasets/{datasetId}/models/{modelId}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**bestTrialId**: The best trial_id across all training runs.",
            "**creationTime**: Output only. The time when this model was created, in millisecs since the epoch.",
            "**defaultTrialId**: Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.",
            "**description**: Optional. A user-friendly description of this model.",
            [
              "**encryptionConfiguration**",
              {
                "$ul": [
                  "**kmsKeyName**: Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key."
                ]
              }
            ],
            "**etag**: Output only. A hash of this resource.",
            "**expirationTime**: Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.",
            "**featureColumns**: Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.",
            "**friendlyName**: Optional. A descriptive name for this model.",
            [
              "**hparamSearchSpaces**: Hyperparameter search spaces. These should be a subset of training_options.",
              {
                "$ul": [
                  [
                    "**activationFn**: Search space for string and enum.",
                    {
                      "$ul": [
                        "**candidates**: Canididates for the string or enum parameter in lower case."
                      ]
                    }
                  ],
                  [
                    "**batchSize**: Search space for an int hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of an int hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the int parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of an int hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the int parameter.",
                              "**min**: Min value of the int parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**boosterType**: Search space for string and enum.",
                    {
                      "$ul": [
                        "**candidates**: Canididates for the string or enum parameter in lower case."
                      ]
                    }
                  ],
                  [
                    "**colsampleBylevel**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**colsampleBynode**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**colsampleBytree**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**dartNormalizeType**: Search space for string and enum.",
                    {
                      "$ul": [
                        "**candidates**: Canididates for the string or enum parameter in lower case."
                      ]
                    }
                  ],
                  [
                    "**dropout**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**hiddenUnits**: Search space for int array.",
                    {
                      "$ul": [
                        "**candidates**: Candidates for the int array parameter."
                      ]
                    }
                  ],
                  [
                    "**l1Reg**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**l2Reg**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**learnRate**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**maxTreeDepth**: Search space for an int hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of an int hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the int parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of an int hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the int parameter.",
                              "**min**: Min value of the int parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**minSplitLoss**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**minTreeChildWeight**: Search space for an int hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of an int hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the int parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of an int hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the int parameter.",
                              "**min**: Min value of the int parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**numClusters**: Search space for an int hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of an int hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the int parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of an int hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the int parameter.",
                              "**min**: Min value of the int parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**numFactors**: Search space for an int hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of an int hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the int parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of an int hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the int parameter.",
                              "**min**: Min value of the int parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**numParallelTree**: Search space for an int hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of an int hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the int parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of an int hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the int parameter.",
                              "**min**: Min value of the int parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**optimizer**: Search space for string and enum.",
                    {
                      "$ul": [
                        "**candidates**: Canididates for the string or enum parameter in lower case."
                      ]
                    }
                  ],
                  [
                    "**subsample**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**treeMethod**: Search space for string and enum.",
                    {
                      "$ul": [
                        "**candidates**: Canididates for the string or enum parameter in lower case."
                      ]
                    }
                  ],
                  [
                    "**walsAlpha**: Search space for a double hyperparameter.",
                    {
                      "$ul": [
                        [
                          "**candidates**: Discrete candidates of a double hyperparameter.",
                          {
                            "$ul": [
                              "**candidates**: Candidates for the double parameter in increasing order."
                            ]
                          }
                        ],
                        [
                          "**range**: Range of a double hyperparameter.",
                          {
                            "$ul": [
                              "**max**: Max value of the double parameter.",
                              "**min**: Min value of the double parameter."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**hparamTrials**: Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.",
            "**labelColumns**: Output only. Label columns that were used to train this model. The output of the model will have a \"predicted_\" prefix to these columns.",
            "**labels**: The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.",
            "**lastModifiedTime**: Output only. The time when this model was last modified, in millisecs since the epoch.",
            "**location**: Output only. The geographic location where the model resides. This value is inherited from the dataset.",
            [
              "**modelReference**: Id path of a model.",
              {
                "$ul": [
                  "**datasetId**: Required. The ID of the dataset containing this model.",
                  "**modelId**: Required. The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                  "**projectId**: Required. The ID of the project containing this model."
                ]
              }
            ],
            "**modelType**: Output only. Type of the model resource.",
            "**optimalTrialIds**: Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.",
            [
              "**remoteModelInfo**: Remote Model Info",
              {
                "$ul": [
                  "**connection**: Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```",
                  "**endpoint**: Output only. The endpoint for remote model.",
                  "**maxBatchingRows**: Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.",
                  "**remoteModelVersion**: Output only. The model version for LLM.",
                  "**remoteServiceType**: Output only. The remote service type for remote model.",
                  "**speechRecognizer**: Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)"
                ]
              }
            ],
            "**trainingRuns**: Information for all training runs in increasing order of start_time.",
            "**transformColumns**: Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
