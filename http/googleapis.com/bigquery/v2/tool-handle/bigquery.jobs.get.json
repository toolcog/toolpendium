{
  "name": "bigquery_jobs_get",
  "description": "Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Required. Project ID of the requested job."
      },
      "jobId": {
        "type": "string",
        "description": "Required. Job ID of the requested job."
      },
      "location": {
        "type": "string",
        "description": "The geographic location of the job. You must specify the location to run the job for the following scenarios: - If the location to run a job is not in the `us` or the `eu` multi-regional location - If the job's location is in a single region (for example, `us-central1`) For more information, see https://cloud.google.com/bigquery/docs/locations#specifying_your_location."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "projectId",
      "jobId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://bigquery.googleapis.com/bigquery/v2/projects/{projectId}/jobs/{jobId}{?location,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**configuration**",
              {
                "$ul": [
                  [
                    "**copy**: JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).",
                    {
                      "$ul": [
                        "**createDisposition**: Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.",
                        [
                          "**destinationEncryptionConfiguration**",
                          {
                            "$ul": [
                              "**kmsKeyName**: Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key."
                            ]
                          }
                        ],
                        "**destinationExpirationTime**: Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.",
                        [
                          "**destinationTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        "**operationType**: Optional. Supported operation types in table copy job.",
                        [
                          "**sourceTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        "**sourceTables**: [Pick one] Source tables to copy.",
                        "**writeDisposition**: Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion."
                      ]
                    }
                  ],
                  "**dryRun**: Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.",
                  [
                    "**extract**: JobConfigurationExtract configures a job that exports data from a BigQuery table into Google Cloud Storage.",
                    {
                      "$ul": [
                        "**compression**: Optional. The compression type to use for exported files. Possible values include DEFLATE, GZIP, NONE, SNAPPY, and ZSTD. The default value is NONE. Not all compression formats are support for all file formats. DEFLATE is only supported for Avro. ZSTD is only supported for Parquet. Not applicable when extracting models.",
                        "**destinationFormat**: Optional. The exported file format. Possible values include CSV, NEWLINE_DELIMITED_JSON, PARQUET, or AVRO for tables and ML_TF_SAVED_MODEL or ML_XGBOOST_BOOSTER for models. The default value for tables is CSV. Tables with nested or repeated fields cannot be exported as CSV. The default value for models is ML_TF_SAVED_MODEL.",
                        "**destinationUri**: [Pick one] DEPRECATED: Use destinationUris instead, passing only one URI as necessary. The fully-qualified Google Cloud Storage URI where the extracted table should be written.",
                        "**destinationUris**: [Pick one] A list of fully-qualified Google Cloud Storage URIs where the extracted table should be written.",
                        "**fieldDelimiter**: Optional. When extracting data in CSV format, this defines the delimiter to use between fields in the exported data. Default is ','. Not applicable when extracting models.",
                        [
                          "**modelExtractOptions**: Options related to model extraction.",
                          {
                            "$ul": [
                              "**trialId**: The 1-based ID of the trial to be exported from a hyperparameter tuning model. If not specified, the trial with id = [Model](/bigquery/docs/reference/rest/v2/models#resource:-model).defaultTrialId is exported. This field is ignored for models not trained with hyperparameter tuning."
                            ]
                          }
                        ],
                        "**printHeader**: Optional. Whether to print out a header row in the results. Default is true. Not applicable when extracting models. (default: true)",
                        [
                          "**sourceModel**: Id path of a model.",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this model.",
                              "**modelId**: Required. The ID of the model. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                              "**projectId**: Required. The ID of the project containing this model."
                            ]
                          }
                        ],
                        [
                          "**sourceTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        "**useAvroLogicalTypes**: Whether to use logical types when extracting to AVRO format. Not applicable when extracting models."
                      ]
                    }
                  ],
                  "**jobTimeoutMs**: Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.",
                  "**jobType**: Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.",
                  "**labels**: The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.",
                  [
                    "**load**: JobConfigurationLoad contains the configuration properties for loading data into a destination table.",
                    {
                      "$ul": [
                        "**allowJaggedRows**: Optional. Accept rows that are missing trailing optional columns. The missing values are treated as nulls. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. Only applicable to CSV, ignored for other formats.",
                        "**allowQuotedNewlines**: Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.",
                        "**autodetect**: Optional. Indicates if we should automatically infer the options and schema for CSV and JSON sources.",
                        [
                          "**clustering**: Configures table clustering.",
                          {
                            "$ul": [
                              "**fields**: One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations"
                            ]
                          }
                        ],
                        "**connectionProperties**: Optional. Connection properties which can modify the load job behavior. Currently, only the 'session_id' connection property is supported, and is used to resolve _SESSION appearing as the dataset id.",
                        "**copyFilesOnly**: Optional. [Experimental] Configures the load job to only copy files to the destination BigLake managed table with an external storage_uri, without reading file content and writing them to new files. Copying files only is supported when: * source_uris are in the same external storage system as the destination table but they do not overlap with storage_uri of the destination table. * source_format is the same file format as the destination table. * destination_table is an existing BigLake managed table. Its schema does not have default value expression. It schema does not have type parameters other than precision and scale. * No options other than the above are specified.",
                        "**createDisposition**: Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.",
                        "**createSession**: Optional. If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.",
                        "**decimalTargetTypes**: Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.",
                        [
                          "**destinationEncryptionConfiguration**",
                          {
                            "$ul": [
                              "**kmsKeyName**: Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key."
                            ]
                          }
                        ],
                        [
                          "**destinationTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        [
                          "**destinationTableProperties**: Properties for the destination table.",
                          {
                            "$ul": [
                              "**description**: Optional. The description for the destination table. This will only be used if the destination table is newly created. If the table already exists and a value different than the current description is provided, the job will fail.",
                              "**expirationTime**: Internal use only.",
                              "**friendlyName**: Optional. Friendly name for the destination table. If the table already exists, it should be same as the existing friendly name.",
                              "**labels**: Optional. The labels associated with this table. You can use these to organize and group your tables. This will only be used if the destination table is newly created. If the table already exists and labels are different than the current labels are provided, the job will fail."
                            ]
                          }
                        ],
                        "**encoding**: Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the `quote` and `fieldDelimiter` properties. If you don't specify an encoding, or if you specify a UTF-8 encoding when the CSV file is not UTF-8 encoded, BigQuery attempts to convert the data to UTF-8. Generally, your data loads successfully, but it may not match byte-for-byte what you expect. To avoid this, specify the correct encoding by using the `--encoding` flag. If BigQuery can't convert a character other than the ASCII `0` character, BigQuery converts the character to the standard Unicode replacement character: �.",
                        "**fieldDelimiter**: Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).",
                        "**fileSetSpecType**: Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default, source URIs are expanded against the underlying storage. You can also specify manifest files to control how the file set is constructed. This option is only applicable to object storage systems.",
                        [
                          "**hivePartitioningOptions**: Options for configuring hive partitioning detect.",
                          {
                            "$ul": [
                              "**fields**: Output only. For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.",
                              "**mode**: Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.",
                              "**requirePartitionFilter**: Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail. (default: false)",
                              "**sourceUriPrefix**: Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes."
                            ]
                          }
                        ],
                        "**ignoreUnknownValues**: Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names in the table schema Avro, Parquet, ORC: Fields in the file schema that don't exist in the table schema.",
                        "**jsonExtension**: Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).",
                        "**maxBadRecords**: Optional. The maximum number of bad records that BigQuery can ignore when running the job. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This is only supported for CSV and NEWLINE_DELIMITED_JSON file formats.",
                        "**nullMarker**: Optional. Specifies a string that represents a null value in a CSV file. For example, if you specify \"\\N\", BigQuery interprets \"\\N\" as a null value when loading a CSV file. The default value is the empty string. If you set this property to a custom value, BigQuery throws an error if an empty string is present for all data types except for STRING and BYTE. For STRING and BYTE columns, BigQuery interprets the empty string as an empty value.",
                        [
                          "**parquetOptions**: Parquet Options for load and make external tables.",
                          {
                            "$ul": [
                              "**enableListInference**: Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.",
                              "**enumAsString**: Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default."
                            ]
                          }
                        ],
                        "**preserveAsciiControlCharacters**: Optional. When sourceFormat is set to \"CSV\", this indicates whether the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.",
                        "**projectionFields**: If sourceFormat is set to \"DATASTORE_BACKUP\", indicates which entity properties to load into BigQuery from a Cloud Datastore backup. Property names are case sensitive and must be top-level properties. If no properties are specified, BigQuery loads all properties. If any named property isn't found in the Cloud Datastore backup, an invalid error is returned in the job result.",
                        "**quote**: Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '. @default \" (default: \")",
                        [
                          "**rangePartitioning**",
                          {
                            "$ul": [
                              "**field**: Required. [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.",
                              [
                                "**range**: [Experimental] Defines the ranges for range partitioning.",
                                {
                                  "$ul": [
                                    "**end**: [Experimental] The end of range partitioning, exclusive.",
                                    "**interval**: [Experimental] The width of each interval.",
                                    "**start**: [Experimental] The start of range partitioning, inclusive."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**referenceFileSchemaUri**: Optional. The user can provide a reference file with the reader schema. This file is only loaded if it is part of source URIs, but is not loaded otherwise. It is enabled for the following formats: AVRO, PARQUET, ORC.",
                        [
                          "**schema**: Schema of a table",
                          {
                            "$ul": [
                              "**fields**: Describes the fields in a table."
                            ]
                          }
                        ],
                        "**schemaInline**: [Deprecated] The inline schema. For CSV schemas, specify as \"Field1:Type1[,Field2:Type2]*\". For example, \"foo:STRING, bar:INTEGER, baz:FLOAT\".",
                        "**schemaInlineFormat**: [Deprecated] The format of the schemaInline property.",
                        "**schemaUpdateOptions**: Allows the schema of the destination table to be updated as a side effect of the load job if a schema is autodetected or supplied in the job configuration. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.",
                        "**skipLeadingRows**: Optional. The number of rows at the top of a CSV file that BigQuery will skip when loading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.",
                        "**sourceFormat**: Optional. The format of the data files. For CSV files, specify \"CSV\". For datastore backups, specify \"DATASTORE_BACKUP\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro, specify \"AVRO\". For parquet, specify \"PARQUET\". For orc, specify \"ORC\". The default value is CSV.",
                        "**sourceUris**: [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups: Exactly one URI can be specified. Also, the '*' wildcard character is not allowed.",
                        [
                          "**timePartitioning**",
                          {
                            "$ul": [
                              "**expirationMs**: Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.",
                              "**field**: Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.",
                              "**requirePartitionFilter**: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it. (default: false)",
                              "**type**: Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively."
                            ]
                          }
                        ],
                        "**useAvroLogicalTypes**: Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).",
                        "**writeDisposition**: Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints and uses the schema from the load job. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_APPEND. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion."
                      ]
                    }
                  ],
                  [
                    "**query**: JobConfigurationQuery configures a BigQuery query job.",
                    {
                      "$ul": [
                        "**allowLargeResults**: Optional. If true and query uses legacy SQL dialect, allows the query to produce arbitrarily large result tables at a slight cost in performance. Requires destinationTable to be set. For GoogleSQL queries, this flag is ignored and large results are always allowed. However, you must still set destinationTable when result size exceeds the allowed maximum response size. (default: false)",
                        [
                          "**clustering**: Configures table clustering.",
                          {
                            "$ul": [
                              "**fields**: One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations"
                            ]
                          }
                        ],
                        "**connectionProperties**: Connection properties which can modify the query behavior.",
                        "**continuous**: [Optional] Specifies whether the query should be executed as a continuous query. The default value is false.",
                        "**createDisposition**: Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.",
                        "**createSession**: If this property is true, the job creates a new session using a randomly generated session_id. To continue using a created session with subsequent queries, pass the existing session identifier as a `ConnectionProperty` value. The session identifier is returned as part of the `SessionInfo` message within the query statistics. The new session's location will be set to `Job.JobReference.location` if it is present, otherwise it's set to the default location based on existing routing logic.",
                        [
                          "**defaultDataset**",
                          {
                            "$ul": [
                              "**datasetId**: Required. A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                              "**projectId**: Optional. The ID of the project containing this dataset."
                            ]
                          }
                        ],
                        [
                          "**destinationEncryptionConfiguration**",
                          {
                            "$ul": [
                              "**kmsKeyName**: Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key."
                            ]
                          }
                        ],
                        [
                          "**destinationTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        "**flattenResults**: Optional. If true and query uses legacy SQL dialect, flattens all nested and repeated fields in the query results. allowLargeResults must be true if this is set to false. For GoogleSQL queries, this flag is ignored and results are never flattened. (default: true)",
                        "**maximumBillingTier**: Optional. [Deprecated] Maximum billing tier allowed for this query. The billing tier controls the amount of compute resources allotted to the query, and multiplies the on-demand cost of the query accordingly. A query that runs within its allotted resources will succeed and indicate its billing tier in statistics.query.billingTier, but if the query exceeds its allotted resources, it will fail with billingTierLimitExceeded. WARNING: The billed byte amount can be multiplied by an amount up to this number! Most users should not need to alter this setting, and we recommend that you avoid introducing new uses of it. (default: 1)",
                        "**maximumBytesBilled**: Limits the bytes billed for this job. Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default.",
                        "**parameterMode**: GoogleSQL only. Set to POSITIONAL to use positional (?) query parameters or to NAMED to use named (@myparam) query parameters in this query.",
                        "**preserveNulls**: [Deprecated] This property is deprecated.",
                        "**priority**: Optional. Specifies a priority for the query. Possible values include INTERACTIVE and BATCH. The default value is INTERACTIVE.",
                        "**query**: [Required] SQL query text to execute. The useLegacySql field can be used to indicate whether the query uses legacy SQL or GoogleSQL.",
                        "**queryParameters**: Query parameters for GoogleSQL queries.",
                        [
                          "**rangePartitioning**",
                          {
                            "$ul": [
                              "**field**: Required. [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.",
                              [
                                "**range**: [Experimental] Defines the ranges for range partitioning.",
                                {
                                  "$ul": [
                                    "**end**: [Experimental] The end of range partitioning, exclusive.",
                                    "**interval**: [Experimental] The width of each interval.",
                                    "**start**: [Experimental] The start of range partitioning, inclusive."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**schemaUpdateOptions**: Allows the schema of the destination table to be updated as a side effect of the query job. Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema. One or more of the following values are specified: * ALLOW_FIELD_ADDITION: allow adding a nullable field to the schema. * ALLOW_FIELD_RELAXATION: allow relaxing a required field in the original schema to nullable.",
                        [
                          "**scriptOptions**: Options related to script execution.",
                          {
                            "$ul": [
                              "**keyResultStatement**: Determines which statement in the script represents the \"key result\", used to populate the schema and query results of the script job. Default is LAST.",
                              "**statementByteBudget**: Limit on the number of bytes billed per statement. Exceeding this budget results in an error.",
                              "**statementTimeoutMs**: Timeout period for each statement in a script."
                            ]
                          }
                        ],
                        [
                          "**systemVariables**: System variables given to a query.",
                          {
                            "$ul": [
                              "**types**: Output only. Data type for each system variable.",
                              "**values**: Output only. Value for each system variable."
                            ]
                          }
                        ],
                        "**tableDefinitions**: Optional. You can specify external table definitions, which operate as ephemeral tables that can be queried. These definitions are configured using a JSON map, where the string key represents the table identifier, and the value is the corresponding external data configuration object.",
                        [
                          "**timePartitioning**",
                          {
                            "$ul": [
                              "**expirationMs**: Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.",
                              "**field**: Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.",
                              "**requirePartitionFilter**: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it. (default: false)",
                              "**type**: Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively."
                            ]
                          }
                        ],
                        "**useLegacySql**: Optional. Specifies whether to use BigQuery's legacy SQL dialect for this query. The default value is true. If set to false, the query will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ When useLegacySql is set to false, the value of flattenResults is ignored; query will be run as if flattenResults is false. (default: true)",
                        "**useQueryCache**: Optional. Whether to look for the result in the query cache. The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when a query does not have a destination table specified. The default value is true. (default: true)",
                        "**userDefinedFunctionResources**: Describes user-defined function resources used in the query.",
                        "**writeDisposition**: Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the data, removes the constraints, and uses the schema from the query result. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**etag**: Output only. A hash of this resource.",
            "**id**: Output only. Opaque ID field of the job.",
            [
              "**jobCreationReason**: Reason about why a Job was created from a [`jobs.query`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query) method when used with `JOB_CREATION_OPTIONAL` Job creation mode. For [`jobs.insert`](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/insert) method calls it will always be `REQUESTED`. This feature is not yet available. Jobs will always be created.",
              {
                "$ul": [
                  "**code**: Output only. Specifies the high level reason why a Job was created."
                ]
              }
            ],
            [
              "**jobReference**: A job reference is a fully qualified identifier for referring to a job.",
              {
                "$ul": [
                  "**jobId**: Required. The ID of the job. The ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-). The maximum length is 1,024 characters.",
                  "**location**: Optional. The geographic location of the job. The default value is US. For more information about BigQuery locations, see: https://cloud.google.com/bigquery/docs/locations",
                  "**projectId**: Required. The ID of the project containing this job."
                ]
              }
            ],
            "**kind**: Output only. The type of the resource. (default: bigquery#job)",
            "**principal_subject**: Output only. [Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.",
            "**selfLink**: Output only. A URL that can be used to access the resource again.",
            [
              "**statistics**: Statistics for a single job execution.",
              {
                "$ul": [
                  "**completionRatio**: Output only. [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.",
                  [
                    "**copy**: Statistics for a copy job.",
                    {
                      "$ul": [
                        "**copiedLogicalBytes**: Output only. Number of logical bytes copied to the destination table.",
                        "**copiedRows**: Output only. Number of rows copied to the destination table."
                      ]
                    }
                  ],
                  "**creationTime**: Output only. Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.",
                  [
                    "**dataMaskingStatistics**: Statistics for data-masking.",
                    {
                      "$ul": [
                        "**dataMaskingApplied**: Whether any accessed data was protected by the data masking."
                      ]
                    }
                  ],
                  "**endTime**: Output only. End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.",
                  [
                    "**extract**: Statistics for an extract job.",
                    {
                      "$ul": [
                        "**destinationUriFileCounts**: Output only. Number of files per destination URI or URI pattern specified in the extract configuration. These values will be in the same order as the URIs specified in the 'destinationUris' field.",
                        "**inputBytes**: Output only. Number of user bytes extracted into the result. This is the byte count as computed by BigQuery for billing purposes and doesn't have any relationship with the number of actual result bytes extracted in the desired format.",
                        "**timeline**: Output only. Describes a timeline of job execution."
                      ]
                    }
                  ],
                  "**finalExecutionDurationMs**: Output only. The duration in milliseconds of the execution of the final attempt of this job, as BigQuery may internally re-attempt to execute the job.",
                  [
                    "**load**: Statistics for a load job.",
                    {
                      "$ul": [
                        "**badRecords**: Output only. The number of bad records encountered. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.",
                        "**inputFileBytes**: Output only. Number of bytes of source data in a load job.",
                        "**inputFiles**: Output only. Number of source files in a load job.",
                        "**outputBytes**: Output only. Size of the loaded data in bytes. Note that while a load job is in the running state, this value may change.",
                        "**outputRows**: Output only. Number of rows imported in a load job. Note that while an import job is in the running state, this value may change.",
                        "**timeline**: Output only. Describes a timeline of job execution."
                      ]
                    }
                  ],
                  "**numChildJobs**: Output only. Number of child jobs executed.",
                  "**parentJobId**: Output only. If this is a child job, specifies the job ID of the parent.",
                  [
                    "**query**: Statistics for a query job.",
                    {
                      "$ul": [
                        [
                          "**biEngineStatistics**: Statistics for a BI Engine specific query. Populated as part of JobStatistics2",
                          {
                            "$ul": [
                              "**accelerationMode**: Output only. Specifies which mode of BI Engine acceleration was performed (if any).",
                              "**biEngineMode**: Output only. Specifies which mode of BI Engine acceleration was performed (if any).",
                              "**biEngineReasons**: In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated."
                            ]
                          }
                        ],
                        "**billingTier**: Output only. Billing tier for the job. This is a BigQuery-specific concept which is not related to the Google Cloud notion of \"free tier\". The value here is a measure of the query's resource consumption relative to the amount of data scanned. For on-demand queries, the limit is 100, and all queries within this limit are billed at the standard on-demand rates. On-demand queries that exceed this limit will fail with a billingTierLimitExceeded error.",
                        "**cacheHit**: Output only. Whether the query result was fetched from the query cache.",
                        [
                          "**dclTargetDataset**",
                          {
                            "$ul": [
                              "**datasetId**: Required. A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                              "**projectId**: Optional. The ID of the project containing this dataset."
                            ]
                          }
                        ],
                        [
                          "**dclTargetTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        [
                          "**dclTargetView**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        "**ddlAffectedRowAccessPolicyCount**: Output only. The number of row access policies affected by a DDL statement. Present only for DROP ALL ROW ACCESS POLICIES queries.",
                        [
                          "**ddlDestinationTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        "**ddlOperationPerformed**: Output only. The DDL operation performed, possibly dependent on the pre-existence of the DDL target.",
                        [
                          "**ddlTargetDataset**",
                          {
                            "$ul": [
                              "**datasetId**: Required. A unique ID for this dataset, without the project name. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters.",
                              "**projectId**: Optional. The ID of the project containing this dataset."
                            ]
                          }
                        ],
                        [
                          "**ddlTargetRoutine**: Id path of a routine.",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this routine.",
                              "**projectId**: Required. The ID of the project containing this routine.",
                              "**routineId**: Required. The ID of the routine. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters."
                            ]
                          }
                        ],
                        [
                          "**ddlTargetRowAccessPolicy**: Id path of a row access policy.",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this row access policy.",
                              "**policyId**: Required. The ID of the row access policy. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 256 characters.",
                              "**projectId**: Required. The ID of the project containing this row access policy.",
                              "**tableId**: Required. The ID of the table containing this row access policy."
                            ]
                          }
                        ],
                        [
                          "**ddlTargetTable**",
                          {
                            "$ul": [
                              "**datasetId**: Required. The ID of the dataset containing this table.",
                              "**projectId**: Required. The ID of the project containing this table.",
                              "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                            ]
                          }
                        ],
                        [
                          "**dmlStats**: Detailed statistics for DML statements",
                          {
                            "$ul": [
                              "**deletedRowCount**: Output only. Number of deleted Rows. populated by DML DELETE, MERGE and TRUNCATE statements.",
                              "**insertedRowCount**: Output only. Number of inserted Rows. Populated by DML INSERT and MERGE statements",
                              "**updatedRowCount**: Output only. Number of updated Rows. Populated by DML UPDATE and MERGE statements."
                            ]
                          }
                        ],
                        "**estimatedBytesProcessed**: Output only. The original estimate of bytes processed for the job.",
                        [
                          "**exportDataStatistics**: Statistics for the EXPORT DATA statement as part of Query Job. EXTRACT JOB statistics are populated in JobStatistics4.",
                          {
                            "$ul": [
                              "**fileCount**: Number of destination files generated in case of EXPORT DATA statement only.",
                              "**rowCount**: [Alpha] Number of destination rows generated in case of EXPORT DATA statement only."
                            ]
                          }
                        ],
                        "**externalServiceCosts**: Output only. Job cost breakdown as bigquery internal cost and external service costs.",
                        [
                          "**loadQueryStatistics**: Statistics for a LOAD query.",
                          {
                            "$ul": [
                              "**badRecords**: Output only. The number of bad records encountered while processing a LOAD query. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.",
                              "**bytesTransferred**: Output only. This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.",
                              "**inputFileBytes**: Output only. Number of bytes of source data in a LOAD query.",
                              "**inputFiles**: Output only. Number of source files in a LOAD query.",
                              "**outputBytes**: Output only. Size of the loaded data in bytes. Note that while a LOAD query is in the running state, this value may change.",
                              "**outputRows**: Output only. Number of rows imported in a LOAD query. Note that while a LOAD query is in the running state, this value may change."
                            ]
                          }
                        ],
                        [
                          "**materializedViewStatistics**: Statistics of materialized views considered in a query job.",
                          {
                            "$ul": [
                              "**materializedView**: Materialized views considered for the query job. Only certain materialized views are used. For a detailed list, see the child message. If many materialized views are considered, then the list might be incomplete."
                            ]
                          }
                        ],
                        [
                          "**metadataCacheStatistics**: Statistics for metadata caching in BigLake tables.",
                          {
                            "$ul": [
                              "**tableMetadataCacheUsage**: Set for the Metadata caching eligible tables referenced in the query."
                            ]
                          }
                        ],
                        [
                          "**mlStatistics**: Job statistics specific to a BigQuery ML training job.",
                          {
                            "$ul": [
                              "**hparamTrials**: Output only. Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.",
                              "**iterationResults**: Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).",
                              "**maxIterations**: Output only. Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.",
                              "**modelType**: Output only. The type of the model that is being trained.",
                              "**trainingType**: Output only. Training type of the job."
                            ]
                          }
                        ],
                        [
                          "**modelTraining**",
                          {
                            "$ul": [
                              "**currentIteration**: Deprecated.",
                              "**expectedTotalIterations**: Deprecated."
                            ]
                          }
                        ],
                        "**modelTrainingCurrentIteration**: Deprecated.",
                        "**modelTrainingExpectedTotalIteration**: Deprecated.",
                        "**numDmlAffectedRows**: Output only. The number of rows affected by a DML statement. Present only for DML statements INSERT, UPDATE or DELETE.",
                        [
                          "**performanceInsights**: Performance insights for the job.",
                          {
                            "$ul": [
                              "**avgPreviousExecutionMs**: Output only. Average execution ms of previous runs. Indicates the job ran slow compared to previous executions. To find previous executions, use INFORMATION_SCHEMA tables and filter jobs with same query hash.",
                              "**stagePerformanceChangeInsights**: Output only. Query stage performance insights compared to previous runs, for diagnosing performance regression.",
                              "**stagePerformanceStandaloneInsights**: Output only. Standalone query stage performance insights, for exploring potential improvements."
                            ]
                          }
                        ],
                        [
                          "**queryInfo**: Query optimization information for a QUERY job.",
                          {
                            "$ul": [
                              "**optimizationDetails**: Output only. Information about query optimizations."
                            ]
                          }
                        ],
                        "**queryPlan**: Output only. Describes execution plan for the query.",
                        "**referencedRoutines**: Output only. Referenced routines for the job.",
                        "**referencedTables**: Output only. Referenced tables for the job. Queries that reference more than 50 tables will not have a complete list.",
                        "**reservationUsage**: Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.",
                        [
                          "**schema**: Schema of a table",
                          {
                            "$ul": [
                              "**fields**: Describes the fields in a table."
                            ]
                          }
                        ],
                        [
                          "**searchStatistics**: Statistics for a search query. Populated as part of JobStatistics2.",
                          {
                            "$ul": [
                              "**indexUnusedReasons**: When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.",
                              "**indexUsageMode**: Specifies the index usage mode for the query."
                            ]
                          }
                        ],
                        [
                          "**sparkStatistics**: Statistics for a BigSpark query. Populated as part of JobStatistics2",
                          {
                            "$ul": [
                              "**endpoints**: Output only. Endpoints returned from Dataproc. Key list: - history_server_endpoint: A link to Spark job UI.",
                              "**gcsStagingBucket**: Output only. The Google Cloud Storage bucket that is used as the default filesystem by the Spark application. This fields is only filled when the Spark procedure uses the INVOKER security mode. It is inferred from the system variable @@spark_proc_properties.staging_bucket if it is provided. Otherwise, BigQuery creates a default staging bucket for the job and returns the bucket name in this field. Example: * `gs://[bucket_name]`",
                              "**kmsKeyName**: Output only. The Cloud KMS encryption key that is used to protect the resources created by the Spark job. If the Spark procedure uses DEFINER security mode, the Cloud KMS key is inferred from the Spark connection associated with the procedure if it is provided. Otherwise the key is inferred from the default key of the Spark connection's project if the CMEK organization policy is enforced. If the Spark procedure uses INVOKER security mode, the Cloud KMS encryption key is inferred from the system variable @@spark_proc_properties.kms_key_name if it is provided. Otherwise, the key is inferred fromt he default key of the BigQuery job's project if the CMEK organization policy is enforced. Example: * `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`",
                              [
                                "**loggingInfo**: Spark job logs can be filtered by these fields in Cloud Logging.",
                                {
                                  "$ul": [
                                    "**projectId**: Output only. Project ID where the Spark logs were written.",
                                    "**resourceType**: Output only. Resource type used for logging."
                                  ]
                                }
                              ],
                              "**sparkJobId**: Output only. Spark job ID if a Spark job is created successfully.",
                              "**sparkJobLocation**: Output only. Location where the Spark job is executed. A location is selected by BigQueury for jobs configured to run in a multi-region."
                            ]
                          }
                        ],
                        "**statementType**: Output only. The type of query statement, if valid. Possible values: * `SELECT`: [`SELECT`](/bigquery/docs/reference/standard-sql/query-syntax#select_list) statement. * `ASSERT`: [`ASSERT`](/bigquery/docs/reference/standard-sql/debugging-statements#assert) statement. * `INSERT`: [`INSERT`](/bigquery/docs/reference/standard-sql/dml-syntax#insert_statement) statement. * `UPDATE`: [`UPDATE`](/bigquery/docs/reference/standard-sql/query-syntax#update_statement) statement. * `DELETE`: [`DELETE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `MERGE`: [`MERGE`](/bigquery/docs/reference/standard-sql/data-manipulation-language) statement. * `CREATE_TABLE`: [`CREATE TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_statement) statement, without `AS SELECT`. * `CREATE_TABLE_AS_SELECT`: [`CREATE TABLE AS SELECT`](/bigquery/docs/reference/standard-sql/data-definition-language#query_statement) statement. * `CREATE_VIEW`: [`CREATE VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_view_statement) statement. * `CREATE_MODEL`: [`CREATE MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-create#create_model_statement) statement. * `CREATE_MATERIALIZED_VIEW`: [`CREATE MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#create_materialized_view_statement) statement. * `CREATE_FUNCTION`: [`CREATE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_function_statement) statement. * `CREATE_TABLE_FUNCTION`: [`CREATE TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#create_table_function_statement) statement. * `CREATE_PROCEDURE`: [`CREATE PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_procedure) statement. * `CREATE_ROW_ACCESS_POLICY`: [`CREATE ROW ACCESS POLICY`](/bigquery/docs/reference/standard-sql/data-definition-language#create_row_access_policy_statement) statement. * `CREATE_SCHEMA`: [`CREATE SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#create_schema_statement) statement. * `CREATE_SNAPSHOT_TABLE`: [`CREATE SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_snapshot_table_statement) statement. * `CREATE_SEARCH_INDEX`: [`CREATE SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#create_search_index_statement) statement. * `DROP_TABLE`: [`DROP TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_statement) statement. * `DROP_EXTERNAL_TABLE`: [`DROP EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_external_table_statement) statement. * `DROP_VIEW`: [`DROP VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_view_statement) statement. * `DROP_MODEL`: [`DROP MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-drop-model) statement. * `DROP_MATERIALIZED_VIEW`: [`DROP MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_materialized_view_statement) statement. * `DROP_FUNCTION` : [`DROP FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_function_statement) statement. * `DROP_TABLE_FUNCTION` : [`DROP TABLE FUNCTION`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_table_function) statement. * `DROP_PROCEDURE`: [`DROP PROCEDURE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_procedure_statement) statement. * `DROP_SEARCH_INDEX`: [`DROP SEARCH INDEX`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_search_index) statement. * `DROP_SCHEMA`: [`DROP SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_schema_statement) statement. * `DROP_SNAPSHOT_TABLE`: [`DROP SNAPSHOT TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_snapshot_table_statement) statement. * `DROP_ROW_ACCESS_POLICY`: [`DROP [ALL] ROW ACCESS POLICY|POLICIES`](/bigquery/docs/reference/standard-sql/data-definition-language#drop_row_access_policy_statement) statement. * `ALTER_TABLE`: [`ALTER TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_table_set_options_statement) statement. * `ALTER_VIEW`: [`ALTER VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_view_set_options_statement) statement. * `ALTER_MATERIALIZED_VIEW`: [`ALTER MATERIALIZED VIEW`](/bigquery/docs/reference/standard-sql/data-definition-language#alter_materialized_view_set_options_statement) statement. * `ALTER_SCHEMA`: [`ALTER SCHEMA`](/bigquery/docs/reference/standard-sql/data-definition-language#aalter_schema_set_options_statement) statement. * `SCRIPT`: [`SCRIPT`](/bigquery/docs/reference/standard-sql/procedural-language). * `TRUNCATE_TABLE`: [`TRUNCATE TABLE`](/bigquery/docs/reference/standard-sql/dml-syntax#truncate_table_statement) statement. * `CREATE_EXTERNAL_TABLE`: [`CREATE EXTERNAL TABLE`](/bigquery/docs/reference/standard-sql/data-definition-language#create_external_table_statement) statement. * `EXPORT_DATA`: [`EXPORT DATA`](/bigquery/docs/reference/standard-sql/other-statements#export_data_statement) statement. * `EXPORT_MODEL`: [`EXPORT MODEL`](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-export-model) statement. * `LOAD_DATA`: [`LOAD DATA`](/bigquery/docs/reference/standard-sql/other-statements#load_data_statement) statement. * `CALL`: [`CALL`](/bigquery/docs/reference/standard-sql/procedural-language#call) statement.",
                        "**timeline**: Output only. Describes a timeline of job execution.",
                        "**totalBytesBilled**: Output only. If the project is configured to use on-demand pricing, then this field contains the total bytes billed for the job. If the project is configured to use flat-rate pricing, then you are not billed for bytes and this field is informational only.",
                        "**totalBytesProcessed**: Output only. Total bytes processed for the job.",
                        "**totalBytesProcessedAccuracy**: Output only. For dry-run jobs, totalBytesProcessed is an estimate and this field specifies the accuracy of the estimate. Possible values can be: UNKNOWN: accuracy of the estimate is unknown. PRECISE: estimate is precise. LOWER_BOUND: estimate is lower bound of what the query would cost. UPPER_BOUND: estimate is upper bound of what the query would cost.",
                        "**totalPartitionsProcessed**: Output only. Total number of partitions processed from all partitioned tables referenced in the job.",
                        "**totalSlotMs**: Output only. Slot-milliseconds for the job.",
                        "**transferredBytes**: Output only. Total bytes transferred for cross-cloud queries such as Cross Cloud Transfer and CREATE TABLE AS SELECT (CTAS).",
                        "**undeclaredQueryParameters**: Output only. GoogleSQL only: list of undeclared query parameters detected during a dry run validation.",
                        [
                          "**vectorSearchStatistics**: Statistics for a vector search query. Populated as part of JobStatistics2.",
                          {
                            "$ul": [
                              "**indexUnusedReasons**: When `indexUsageMode` is `UNUSED` or `PARTIALLY_USED`, this field explains why indexes were not used in all or part of the vector search query. If `indexUsageMode` is `FULLY_USED`, this field is not populated.",
                              "**indexUsageMode**: Specifies the index usage mode for the query."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**quotaDeferments**: Output only. Quotas which delayed this job's start time.",
                  "**reservationUsage**: Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.",
                  "**reservation_id**: Output only. Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.",
                  [
                    "**rowLevelSecurityStatistics**: Statistics for row-level security.",
                    {
                      "$ul": [
                        "**rowLevelSecurityApplied**: Whether any accessed data was protected by row access policies."
                      ]
                    }
                  ],
                  [
                    "**scriptStatistics**: Job statistics specific to the child job of a script.",
                    {
                      "$ul": [
                        "**evaluationKind**: Whether this child job was a statement or expression.",
                        "**stackFrames**: Stack trace showing the line/column/procedure name of each frame on the stack at the point where the current evaluation happened. The leaf frame is first, the primary script is last. Never empty."
                      ]
                    }
                  ],
                  [
                    "**sessionInfo**: [Preview] Information related to sessions.",
                    {
                      "$ul": [
                        "**sessionId**: Output only. The id of the session."
                      ]
                    }
                  ],
                  "**startTime**: Output only. Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.",
                  "**totalBytesProcessed**: Output only. Total bytes processed for the job.",
                  "**totalSlotMs**: Output only. Slot-milliseconds for the job.",
                  [
                    "**transactionInfo**: [Alpha] Information of a multi-statement transaction.",
                    {
                      "$ul": [
                        "**transactionId**: Output only. [Alpha] Id of the transaction."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**status**",
              {
                "$ul": [
                  [
                    "**errorResult**: Error details.",
                    {
                      "$ul": [
                        "**debugInfo**: Debugging information. This property is internal to Google and should not be used.",
                        "**location**: Specifies where the error occurred, if present.",
                        "**message**: A human-readable description of the error.",
                        "**reason**: A short error code that summarizes the error."
                      ]
                    }
                  ],
                  "**errors**: Output only. The first errors encountered during the running of the job. The final message includes the number of errors that caused the process to stop. Errors here do not necessarily mean that the job has not completed or was unsuccessful.",
                  "**state**: Output only. Running state of the job. Valid states include 'PENDING', 'RUNNING', and 'DONE'."
                ]
              }
            ],
            "**user_email**: Output only. Email address of the user who ran the job."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
