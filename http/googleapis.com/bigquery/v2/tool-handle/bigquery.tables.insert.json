{
  "name": "bigquery_tables_insert",
  "description": "Creates a new, empty table in the dataset.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Required. Project ID of the new table"
      },
      "datasetId": {
        "type": "string",
        "description": "Required. Dataset ID of the new table"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Table"
      }
    },
    "required": [
      "projectId",
      "datasetId"
    ],
    "$defs": {
      "Table": {
        "properties": {
          "biglakeConfiguration": {
            "$ref": "#/$defs/BigLakeConfiguration"
          },
          "cloneDefinition": {
            "$ref": "#/$defs/CloneDefinition"
          },
          "clustering": {
            "$ref": "#/$defs/Clustering"
          },
          "creationTime": {
            "description": "Output only. The time when this table was created, in milliseconds since the epoch.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "defaultCollation": {
            "description": "Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.",
            "type": "string"
          },
          "defaultRoundingMode": {
            "description": "Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.",
            "enum": [
              "ROUNDING_MODE_UNSPECIFIED",
              "ROUND_HALF_AWAY_FROM_ZERO",
              "ROUND_HALF_EVEN"
            ],
            "type": "string"
          },
          "description": {
            "description": "Optional. A user-friendly description of this table.",
            "type": "string"
          },
          "encryptionConfiguration": {
            "$ref": "#/$defs/EncryptionConfiguration"
          },
          "etag": {
            "description": "Output only. A hash of this resource.",
            "readOnly": true,
            "type": "string"
          },
          "expirationTime": {
            "description": "Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.",
            "format": "int64",
            "type": "string"
          },
          "externalDataConfiguration": {
            "$ref": "#/$defs/ExternalDataConfiguration"
          },
          "friendlyName": {
            "description": "Optional. A descriptive name for this table.",
            "type": "string"
          },
          "id": {
            "description": "Output only. An opaque ID uniquely identifying the table.",
            "readOnly": true,
            "type": "string"
          },
          "kind": {
            "default": "bigquery#table",
            "description": "The type of resource ID.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.",
            "type": "object"
          },
          "lastModifiedTime": {
            "description": "Output only. The time when this table was last modified, in milliseconds since the epoch.",
            "format": "uint64",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "Output only. The geographic location where the table resides. This value is inherited from the dataset.",
            "readOnly": true,
            "type": "string"
          },
          "materializedView": {
            "$ref": "#/$defs/MaterializedViewDefinition"
          },
          "materializedViewStatus": {
            "$ref": "#/$defs/MaterializedViewStatus"
          },
          "maxStaleness": {
            "description": "Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.",
            "type": "string"
          },
          "model": {
            "$ref": "#/$defs/ModelDefinition"
          },
          "numActiveLogicalBytes": {
            "description": "Output only. Number of logical bytes that are less than 90 days old.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numActivePhysicalBytes": {
            "description": "Output only. Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numBytes": {
            "description": "Output only. The size of this table in logical bytes, excluding any data in the streaming buffer.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numLongTermBytes": {
            "description": "Output only. The number of logical bytes in the table that are considered \"long-term storage\".",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numLongTermLogicalBytes": {
            "description": "Output only. Number of logical bytes that are more than 90 days old.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numLongTermPhysicalBytes": {
            "description": "Output only. Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numPartitions": {
            "description": "Output only. The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numPhysicalBytes": {
            "description": "Output only. The physical size of this table in bytes. This includes storage used for time travel.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numRows": {
            "description": "Output only. The number of rows of data in this table, excluding any data in the streaming buffer.",
            "format": "uint64",
            "readOnly": true,
            "type": "string"
          },
          "numTimeTravelPhysicalBytes": {
            "description": "Output only. Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numTotalLogicalBytes": {
            "description": "Output only. Total number of logical bytes in the table or materialized view.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "numTotalPhysicalBytes": {
            "description": "Output only. The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "rangePartitioning": {
            "$ref": "#/$defs/RangePartitioning"
          },
          "replicas": {
            "description": "Optional. Output only. Table references of all replicas currently active on the table.",
            "items": {
              "$ref": "#/$defs/TableReference"
            },
            "readOnly": true,
            "type": "array"
          },
          "requirePartitionFilter": {
            "default": false,
            "description": "Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.",
            "type": "boolean"
          },
          "resourceTags": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "[Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of \"key\": value pairs. The key is the namespaced friendly name of the tag key, e.g. \"12345/environment\" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. \"production\".",
            "type": "object"
          },
          "schema": {
            "$ref": "#/$defs/TableSchema"
          },
          "selfLink": {
            "description": "Output only. A URL that can be used to access this resource again.",
            "readOnly": true,
            "type": "string"
          },
          "snapshotDefinition": {
            "$ref": "#/$defs/SnapshotDefinition"
          },
          "streamingBuffer": {
            "$ref": "#/$defs/Streamingbuffer"
          },
          "tableConstraints": {
            "$ref": "#/$defs/TableConstraints"
          },
          "tableReference": {
            "$ref": "#/$defs/TableReference"
          },
          "tableReplicationInfo": {
            "$ref": "#/$defs/TableReplicationInfo"
          },
          "timePartitioning": {
            "$ref": "#/$defs/TimePartitioning"
          },
          "type": {
            "description": "Output only. Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.",
            "readOnly": true,
            "type": "string"
          },
          "view": {
            "$ref": "#/$defs/ViewDefinition"
          }
        },
        "type": "object"
      },
      "BigLakeConfiguration": {
        "description": "Configuration for BigLake managed tables.",
        "properties": {
          "connectionId": {
            "description": "Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".",
            "type": "string"
          },
          "fileFormat": {
            "description": "Required. The file format the table data is stored in.",
            "enum": [
              "FILE_FORMAT_UNSPECIFIED",
              "PARQUET"
            ],
            "type": "string"
          },
          "storageUri": {
            "description": "Required. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format \"gs://bucket/path_to_table/\"",
            "type": "string"
          },
          "tableFormat": {
            "description": "Required. The table format the metadata only snapshots are stored in.",
            "enum": [
              "TABLE_FORMAT_UNSPECIFIED",
              "ICEBERG"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloneDefinition": {
        "description": "Information about base table and clone time of a table clone.",
        "properties": {
          "baseTableReference": {
            "$ref": "#/$defs/TableReference"
          },
          "cloneTime": {
            "description": "Required. The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TableReference": {
        "properties": {
          "datasetId": {
            "description": "Required. The ID of the dataset containing this table.",
            "type": "string"
          },
          "projectId": {
            "description": "Required. The ID of the project containing this table.",
            "type": "string"
          },
          "tableId": {
            "description": "Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Clustering": {
        "description": "Configures table clustering.",
        "properties": {
          "fields": {
            "description": "One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EncryptionConfiguration": {
        "properties": {
          "kmsKeyName": {
            "description": "Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalDataConfiguration": {
        "properties": {
          "autodetect": {
            "description": "Try to detect schema and format options automatically. Any option specified explicitly will be honored.",
            "type": "boolean"
          },
          "avroOptions": {
            "$ref": "#/$defs/AvroOptions"
          },
          "bigtableOptions": {
            "$ref": "#/$defs/BigtableOptions"
          },
          "compression": {
            "description": "Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.",
            "type": "string"
          },
          "connectionId": {
            "description": "Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".",
            "type": "string"
          },
          "csvOptions": {
            "$ref": "#/$defs/CsvOptions"
          },
          "decimalTargetTypes": {
            "description": "Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.",
            "items": {
              "enum": [
                "DECIMAL_TARGET_TYPE_UNSPECIFIED",
                "NUMERIC",
                "BIGNUMERIC",
                "STRING"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "fileSetSpecType": {
            "description": "Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.",
            "enum": [
              "FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH",
              "FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST"
            ],
            "type": "string"
          },
          "googleSheetsOptions": {
            "$ref": "#/$defs/GoogleSheetsOptions"
          },
          "hivePartitioningOptions": {
            "$ref": "#/$defs/HivePartitioningOptions"
          },
          "ignoreUnknownValues": {
            "description": "Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.",
            "type": "boolean"
          },
          "jsonExtension": {
            "description": "Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).",
            "enum": [
              "JSON_EXTENSION_UNSPECIFIED",
              "GEOJSON"
            ],
            "type": "string"
          },
          "jsonOptions": {
            "$ref": "#/$defs/JsonOptions"
          },
          "maxBadRecords": {
            "description": "Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.",
            "format": "int32",
            "type": "integer"
          },
          "metadataCacheMode": {
            "description": "Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.",
            "enum": [
              "METADATA_CACHE_MODE_UNSPECIFIED",
              "AUTOMATIC",
              "MANUAL"
            ],
            "type": "string"
          },
          "objectMetadata": {
            "description": "Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.",
            "enum": [
              "OBJECT_METADATA_UNSPECIFIED",
              "DIRECTORY",
              "SIMPLE"
            ],
            "type": "string"
          },
          "parquetOptions": {
            "$ref": "#/$defs/ParquetOptions"
          },
          "referenceFileSchemaUri": {
            "description": "Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.",
            "type": "string"
          },
          "schema": {
            "$ref": "#/$defs/TableSchema"
          },
          "sourceFormat": {
            "description": "[Required] The data format. For CSV files, specify \"CSV\". For Google sheets, specify \"GOOGLE_SHEETS\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro files, specify \"AVRO\". For Google Cloud Datastore backups, specify \"DATASTORE_BACKUP\". For Apache Iceberg tables, specify \"ICEBERG\". For ORC files, specify \"ORC\". For Parquet files, specify \"PARQUET\". [Beta] For Google Cloud Bigtable, specify \"BIGTABLE\".",
            "type": "string"
          },
          "sourceUris": {
            "description": "[Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AvroOptions": {
        "description": "Options for external data sources.",
        "properties": {
          "useAvroLogicalTypes": {
            "description": "Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BigtableOptions": {
        "description": "Options specific to Google Cloud Bigtable data sources.",
        "properties": {
          "columnFamilies": {
            "description": "Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.",
            "items": {
              "$ref": "#/$defs/BigtableColumnFamily"
            },
            "type": "array"
          },
          "ignoreUnspecifiedColumnFamilies": {
            "description": "Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.",
            "type": "boolean"
          },
          "outputColumnFamiliesAsJson": {
            "description": "Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.",
            "type": "boolean"
          },
          "readRowkeyAsString": {
            "description": "Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BigtableColumnFamily": {
        "description": "Information related to a Bigtable column family.",
        "properties": {
          "columns": {
            "description": "Optional. Lists of columns that should be exposed as individual fields as opposed to a list of (column name, value) pairs. All columns whose qualifier matches a qualifier in this list can be accessed as .. Other columns can be accessed as a list through .Column field.",
            "items": {
              "$ref": "#/$defs/BigtableColumn"
            },
            "type": "array"
          },
          "encoding": {
            "description": "Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. This can be overridden for a specific column by listing that column in 'columns' and specifying an encoding for it.",
            "type": "string"
          },
          "familyId": {
            "description": "Identifier of the column family.",
            "type": "string"
          },
          "onlyReadLatest": {
            "description": "Optional. If this is set only the latest version of value are exposed for all columns in this column family. This can be overridden for a specific column by listing that column in 'columns' and specifying a different setting for that column.",
            "type": "boolean"
          },
          "type": {
            "description": "Optional. The type to convert the value in cells of this column family. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. This can be overridden for a specific column by listing that column in 'columns' and specifying a type for it.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BigtableColumn": {
        "description": "Information related to a Bigtable column.",
        "properties": {
          "encoding": {
            "description": "Optional. The encoding of the values when the type is not STRING. Acceptable encoding values are: TEXT - indicates values are alphanumeric text strings. BINARY - indicates values are encoded using HBase Bytes.toBytes family of functions. 'encoding' can also be set at the column family level. However, the setting at this level takes precedence if 'encoding' is set at both levels.",
            "type": "string"
          },
          "fieldName": {
            "description": "Optional. If the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as the column field name and is used as field name in queries.",
            "type": "string"
          },
          "onlyReadLatest": {
            "description": "Optional. If this is set, only the latest version of value in this column are exposed. 'onlyReadLatest' can also be set at the column family level. However, the setting at this level takes precedence if 'onlyReadLatest' is set at both levels.",
            "type": "boolean"
          },
          "qualifierEncoded": {
            "description": "[Required] Qualifier of the column. Columns in the parent column family that has this exact qualifier are exposed as . field. If the qualifier is valid UTF-8 string, it can be specified in the qualifier_string field. Otherwise, a base-64 encoded value must be set to qualifier_encoded. The column field name is the same as the column qualifier. However, if the qualifier is not a valid BigQuery field identifier i.e. does not match a-zA-Z*, a valid identifier must be provided as field_name.",
            "format": "byte",
            "type": "string"
          },
          "qualifierString": {
            "description": "Qualifier string.",
            "type": "string"
          },
          "type": {
            "description": "Optional. The type to convert the value in cells of this column. The values are expected to be encoded using HBase Bytes.toBytes function when using the BINARY encoding value. Following BigQuery types are allowed (case-sensitive): * BYTES * STRING * INTEGER * FLOAT * BOOLEAN * JSON Default type is BYTES. 'type' can also be set at the column family level. However, the setting at this level takes precedence if 'type' is set at both levels.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CsvOptions": {
        "description": "Information related to a CSV data source.",
        "properties": {
          "allowJaggedRows": {
            "description": "Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.",
            "type": "boolean"
          },
          "allowQuotedNewlines": {
            "description": "Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.",
            "type": "boolean"
          },
          "encoding": {
            "description": "Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.",
            "type": "string"
          },
          "fieldDelimiter": {
            "description": "Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).",
            "type": "string"
          },
          "nullMarker": {
            "description": "[Optional] A custom string that will represent a NULL value in CSV import data.",
            "type": "string"
          },
          "preserveAsciiControlCharacters": {
            "description": "Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.",
            "type": "boolean"
          },
          "quote": {
            "default": "\"",
            "description": "Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (\"). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '.",
            "pattern": ".?",
            "type": "string"
          },
          "skipLeadingRows": {
            "description": "Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleSheetsOptions": {
        "description": "Options specific to Google Sheets data sources.",
        "properties": {
          "range": {
            "description": "Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20",
            "type": "string"
          },
          "skipLeadingRows": {
            "description": "Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HivePartitioningOptions": {
        "description": "Options for configuring hive partitioning detect.",
        "properties": {
          "fields": {
            "description": "Output only. For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "mode": {
            "description": "Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.",
            "type": "string"
          },
          "requirePartitionFilter": {
            "default": false,
            "description": "Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail.",
            "type": "boolean"
          },
          "sourceUriPrefix": {
            "description": "Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "JsonOptions": {
        "description": "Json Options for load and make external tables.",
        "properties": {
          "encoding": {
            "description": "Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ParquetOptions": {
        "description": "Parquet Options for load and make external tables.",
        "properties": {
          "enableListInference": {
            "description": "Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.",
            "type": "boolean"
          },
          "enumAsString": {
            "description": "Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TableSchema": {
        "description": "Schema of a table",
        "properties": {
          "fields": {
            "description": "Describes the fields in a table.",
            "items": {
              "$ref": "#/$defs/TableFieldSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TableFieldSchema": {
        "description": "A field in TableSchema",
        "properties": {
          "categories": {
            "description": "Deprecated.",
            "properties": {
              "names": {
                "description": "Deprecated.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "collation": {
            "description": "Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.",
            "type": "string"
          },
          "defaultValueExpression": {
            "description": "Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.",
            "type": "string"
          },
          "description": {
            "description": "Optional. The field description. The maximum length is 1,024 characters.",
            "type": "string"
          },
          "fields": {
            "description": "Optional. Describes the nested schema fields if the type property is set to RECORD.",
            "items": {
              "$ref": "#/$defs/TableFieldSchema"
            },
            "type": "array"
          },
          "maxLength": {
            "description": "Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = \"STRING\", then max_length represents the maximum UTF-8 length of strings in this field. If type = \"BYTES\", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ \"STRING\" and ≠ \"BYTES\".",
            "format": "int64",
            "type": "string"
          },
          "mode": {
            "description": "Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.",
            "type": "string"
          },
          "name": {
            "description": "Required. The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.",
            "type": "string"
          },
          "policyTags": {
            "description": "Optional. The policy tags attached to this field, used for field-level access control. If not set, defaults to empty policy_tags.",
            "properties": {
              "names": {
                "description": "A list of policy tag resource names. For example, \"projects/1/locations/eu/taxonomies/2/policyTags/3\". At most 1 policy tag is currently allowed.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "precision": {
            "description": "Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ \"NUMERIC\" and ≠ \"BIGNUMERIC\". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = \"NUMERIC\": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = \"BIGNUMERIC\": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = \"NUMERIC\": 1 ≤ precision ≤ 29. * If type = \"BIGNUMERIC\": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.",
            "format": "int64",
            "type": "string"
          },
          "rangeElementType": {
            "description": "Represents the type of a field element.",
            "properties": {
              "type": {
                "description": "Required. The type of a field element. See TableFieldSchema.type.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "roundingMode": {
            "description": "Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.",
            "enum": [
              "ROUNDING_MODE_UNSPECIFIED",
              "ROUND_HALF_AWAY_FROM_ZERO",
              "ROUND_HALF_EVEN"
            ],
            "type": "string"
          },
          "scale": {
            "description": "Optional. See documentation for precision.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "Required. The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) Use of RECORD/STRUCT indicates that the field contains a nested schema.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaterializedViewDefinition": {
        "description": "Definition and configuration of a materialized view.",
        "properties": {
          "allowNonIncrementalDefinition": {
            "description": "Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.",
            "type": "boolean"
          },
          "enableRefresh": {
            "description": "Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is \"true\".",
            "type": "boolean"
          },
          "lastRefreshTime": {
            "description": "Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "maxStaleness": {
            "description": "[Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).",
            "format": "byte",
            "type": "string"
          },
          "query": {
            "description": "Required. A query whose results are persisted.",
            "type": "string"
          },
          "refreshIntervalMs": {
            "description": "Optional. The maximum frequency at which this materialized view will be refreshed. The default value is \"1800000\" (30 minutes).",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaterializedViewStatus": {
        "description": "Status of a materialized view. The last refresh timestamp status is omitted here, but is present in the MaterializedViewDefinition message.",
        "properties": {
          "lastRefreshStatus": {
            "$ref": "#/$defs/ErrorProto"
          },
          "refreshWatermark": {
            "description": "Output only. Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorProto": {
        "description": "Error details.",
        "properties": {
          "debugInfo": {
            "description": "Debugging information. This property is internal to Google and should not be used.",
            "type": "string"
          },
          "location": {
            "description": "Specifies where the error occurred, if present.",
            "type": "string"
          },
          "message": {
            "description": "A human-readable description of the error.",
            "type": "string"
          },
          "reason": {
            "description": "A short error code that summarizes the error.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModelDefinition": {
        "properties": {
          "modelOptions": {
            "description": "Deprecated.",
            "properties": {
              "labels": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "lossType": {
                "type": "string"
              },
              "modelType": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "trainingRuns": {
            "description": "Deprecated.",
            "items": {
              "$ref": "#/$defs/BqmlTrainingRun"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "BqmlTrainingRun": {
        "properties": {
          "iterationResults": {
            "description": "Deprecated.",
            "items": {
              "$ref": "#/$defs/BqmlIterationResult"
            },
            "type": "array"
          },
          "startTime": {
            "description": "Deprecated.",
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "description": "Deprecated.",
            "type": "string"
          },
          "trainingOptions": {
            "description": "Deprecated.",
            "properties": {
              "earlyStop": {
                "type": "boolean"
              },
              "l1Reg": {
                "format": "double",
                "type": "number"
              },
              "l2Reg": {
                "format": "double",
                "type": "number"
              },
              "learnRate": {
                "format": "double",
                "type": "number"
              },
              "learnRateStrategy": {
                "type": "string"
              },
              "lineSearchInitLearnRate": {
                "format": "double",
                "type": "number"
              },
              "maxIteration": {
                "format": "int64",
                "type": "string"
              },
              "minRelProgress": {
                "format": "double",
                "type": "number"
              },
              "warmStart": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BqmlIterationResult": {
        "properties": {
          "durationMs": {
            "description": "Deprecated.",
            "format": "int64",
            "type": "string"
          },
          "evalLoss": {
            "description": "Deprecated.",
            "format": "double",
            "type": "number"
          },
          "index": {
            "description": "Deprecated.",
            "format": "int32",
            "type": "integer"
          },
          "learnRate": {
            "description": "Deprecated.",
            "format": "double",
            "type": "number"
          },
          "trainingLoss": {
            "description": "Deprecated.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "RangePartitioning": {
        "properties": {
          "field": {
            "description": "Required. [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.",
            "type": "string"
          },
          "range": {
            "description": "[Experimental] Defines the ranges for range partitioning.",
            "properties": {
              "end": {
                "description": "[Experimental] The end of range partitioning, exclusive.",
                "format": "int64",
                "type": "string"
              },
              "interval": {
                "description": "[Experimental] The width of each interval.",
                "format": "int64",
                "type": "string"
              },
              "start": {
                "description": "[Experimental] The start of range partitioning, inclusive.",
                "format": "int64",
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "SnapshotDefinition": {
        "description": "Information about base table and snapshot time of the snapshot.",
        "properties": {
          "baseTableReference": {
            "$ref": "#/$defs/TableReference"
          },
          "snapshotTime": {
            "description": "Required. The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format.",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Streamingbuffer": {
        "properties": {
          "estimatedBytes": {
            "description": "Output only. A lower-bound estimate of the number of bytes currently in the streaming buffer.",
            "format": "uint64",
            "readOnly": true,
            "type": "string"
          },
          "estimatedRows": {
            "description": "Output only. A lower-bound estimate of the number of rows currently in the streaming buffer.",
            "format": "uint64",
            "readOnly": true,
            "type": "string"
          },
          "oldestEntryTime": {
            "description": "Output only. Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available.",
            "format": "uint64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TableConstraints": {
        "description": "The TableConstraints defines the primary key and foreign key.",
        "properties": {
          "foreignKeys": {
            "description": "Optional. Present only if the table has a foreign key. The foreign key is not enforced.",
            "items": {
              "description": "Represents a foreign key constraint on a table's columns.",
              "properties": {
                "columnReferences": {
                  "description": "Required. The columns that compose the foreign key.",
                  "items": {
                    "description": "The pair of the foreign key column and primary key column.",
                    "properties": {
                      "referencedColumn": {
                        "description": "Required. The column in the primary key that are referenced by the referencing_column.",
                        "type": "string"
                      },
                      "referencingColumn": {
                        "description": "Required. The column that composes the foreign key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "name": {
                  "description": "Optional. Set only if the foreign key constraint is named.",
                  "type": "string"
                },
                "referencedTable": {
                  "properties": {
                    "datasetId": {
                      "type": "string"
                    },
                    "projectId": {
                      "type": "string"
                    },
                    "tableId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "primaryKey": {
            "description": "Represents the primary key constraint on a table's columns.",
            "properties": {
              "columns": {
                "description": "Required. The columns that are composed of the primary key constraint.",
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "TableReplicationInfo": {
        "description": "Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`",
        "properties": {
          "replicatedSourceLastRefreshTime": {
            "description": "Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "replicationError": {
            "$ref": "#/$defs/ErrorProto"
          },
          "replicationIntervalMs": {
            "description": "Required. Specifies the interval at which the source table is polled for updates.",
            "format": "int64",
            "type": "string"
          },
          "replicationStatus": {
            "description": "Optional. Output only. Replication status of configured replication.",
            "enum": [
              "REPLICATION_STATUS_UNSPECIFIED",
              "ACTIVE",
              "SOURCE_DELETED",
              "PERMISSION_DENIED",
              "UNSUPPORTED_CONFIGURATION"
            ],
            "readOnly": true,
            "type": "string"
          },
          "sourceTable": {
            "$ref": "#/$defs/TableReference"
          }
        },
        "type": "object"
      },
      "TimePartitioning": {
        "properties": {
          "expirationMs": {
            "description": "Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.",
            "format": "int64",
            "type": "string"
          },
          "field": {
            "description": "Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.",
            "type": "string"
          },
          "requirePartitionFilter": {
            "default": false,
            "deprecated": true,
            "description": "If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it.",
            "type": "boolean"
          },
          "type": {
            "description": "Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ViewDefinition": {
        "description": "Describes the definition of a logical view.",
        "properties": {
          "privacyPolicy": {
            "$ref": "#/$defs/PrivacyPolicy"
          },
          "query": {
            "description": "Required. A query that BigQuery executes when the view is referenced.",
            "type": "string"
          },
          "useExplicitColumnNames": {
            "description": "True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.",
            "type": "boolean"
          },
          "useLegacySql": {
            "description": "Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.",
            "type": "boolean"
          },
          "userDefinedFunctionResources": {
            "description": "Describes user-defined function resources used in the query.",
            "items": {
              "$ref": "#/$defs/UserDefinedFunctionResource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PrivacyPolicy": {
        "description": "Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.",
        "properties": {
          "aggregationThresholdPolicy": {
            "$ref": "#/$defs/AggregationThresholdPolicy"
          }
        },
        "type": "object"
      },
      "AggregationThresholdPolicy": {
        "description": "Represents privacy policy associated with \"aggregation threshold\" method.",
        "properties": {
          "privacyUnitColumns": {
            "description": "Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation (\"outer.inner\")",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "threshold": {
            "description": "Optional. The threshold for the \"aggregation threshold\" policy.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserDefinedFunctionResource": {
        "description": " This is used for defining User Defined Function (UDF) resources only when using legacy SQL. Users of GoogleSQL should leverage either DDL (e.g. CREATE [TEMPORARY] FUNCTION ... ) or the Routines API to define UDF resources. For additional information on migrating, see: https://cloud.google.com/bigquery/docs/reference/standard-sql/migrating-from-legacy-sql#differences_in_user-defined_javascript_functions",
        "properties": {
          "inlineCode": {
            "description": "[Pick one] An inline resource that contains code for a user-defined function (UDF). Providing a inline code resource is equivalent to providing a URI for a file containing the same code.",
            "type": "string"
          },
          "resourceUri": {
            "description": "[Pick one] A code resource to load from a Google Cloud Storage URI (gs://bucket/path).",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://bigquery.googleapis.com/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**biglakeConfiguration**: Configuration for BigLake managed tables.",
              {
                "$ul": [
                  "**connectionId**: Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".",
                  "**fileFormat**: Required. The file format the table data is stored in.",
                  "**storageUri**: Required. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format \"gs://bucket/path_to_table/\"",
                  "**tableFormat**: Required. The table format the metadata only snapshots are stored in."
                ]
              }
            ],
            [
              "**cloneDefinition**: Information about base table and clone time of a table clone.",
              {
                "$ul": [
                  [
                    "**baseTableReference**",
                    {
                      "$ul": [
                        "**datasetId**: Required. The ID of the dataset containing this table.",
                        "**projectId**: Required. The ID of the project containing this table.",
                        "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                      ]
                    }
                  ],
                  "**cloneTime**: Required. The time at which the base table was cloned. This value is reported in the JSON response using RFC3339 format."
                ]
              }
            ],
            [
              "**clustering**: Configures table clustering.",
              {
                "$ul": [
                  "**fields**: One or more fields on which data should be clustered. Only top-level, non-repeated, simple-type fields are supported. The ordering of the clustering fields should be prioritized from most to least important for filtering purposes. Additional information on limitations can be found here: https://cloud.google.com/bigquery/docs/creating-clustered-tables#limitations"
                ]
              }
            ],
            "**creationTime**: Output only. The time when this table was created, in milliseconds since the epoch.",
            "**defaultCollation**: Optional. Defines the default collation specification of new STRING fields in the table. During table creation or update, if a STRING field is added to this table without explicit collation specified, then the table inherits the table default collation. A change to this field affects only fields added afterwards, and does not alter the existing fields. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.",
            "**defaultRoundingMode**: Optional. Defines the default rounding mode specification of new decimal fields (NUMERIC OR BIGNUMERIC) in the table. During table creation or update, if a decimal field is added to this table without an explicit rounding mode specified, then the field inherits the table default rounding mode. Changing this field doesn't affect existing fields.",
            "**description**: Optional. A user-friendly description of this table.",
            [
              "**encryptionConfiguration**",
              {
                "$ul": [
                  "**kmsKeyName**: Optional. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key."
                ]
              }
            ],
            "**etag**: Output only. A hash of this resource.",
            "**expirationTime**: Optional. The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created tables.",
            [
              "**externalDataConfiguration**",
              {
                "$ul": [
                  "**autodetect**: Try to detect schema and format options automatically. Any option specified explicitly will be honored.",
                  [
                    "**avroOptions**: Options for external data sources.",
                    {
                      "$ul": [
                        "**useAvroLogicalTypes**: Optional. If sourceFormat is set to \"AVRO\", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER)."
                      ]
                    }
                  ],
                  [
                    "**bigtableOptions**: Options specific to Google Cloud Bigtable data sources.",
                    {
                      "$ul": [
                        "**columnFamilies**: Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.",
                        "**ignoreUnspecifiedColumnFamilies**: Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.",
                        "**outputColumnFamiliesAsJson**: Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.",
                        "**readRowkeyAsString**: Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false."
                      ]
                    }
                  ],
                  "**compression**: Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.",
                  "**connectionId**: Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".",
                  [
                    "**csvOptions**: Information related to a CSV data source.",
                    {
                      "$ul": [
                        "**allowJaggedRows**: Optional. Indicates if BigQuery should accept rows that are missing trailing optional columns. If true, BigQuery treats missing trailing columns as null values. If false, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.",
                        "**allowQuotedNewlines**: Optional. Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.",
                        "**encoding**: Optional. The character encoding of the data. The supported values are UTF-8, ISO-8859-1, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values of the quote and fieldDelimiter properties.",
                        "**fieldDelimiter**: Optional. The separator character for fields in a CSV file. The separator is interpreted as a single byte. For files encoded in ISO-8859-1, any single character can be used as a separator. For files encoded in UTF-8, characters represented in decimal range 1-127 (U+0001-U+007F) can be used without any modification. UTF-8 characters encoded with multiple bytes (i.e. U+0080 and above) will have only the first byte used for separating fields. The remaining bytes will be treated as a part of the field. BigQuery also supports the escape sequence \"\\t\" (U+0009) to specify a tab separator. The default value is comma (\",\", U+002C).",
                        "**nullMarker**: [Optional] A custom string that will represent a NULL value in CSV import data.",
                        "**preserveAsciiControlCharacters**: Optional. Indicates if the embedded ASCII control characters (the first 32 characters in the ASCII-table, from '\\x00' to '\\x1F') are preserved.",
                        "**quote**: Optional. The value that is used to quote data sections in a CSV file. BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote (\"). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set the allowQuotedNewlines property to true. To include the specific quote character within a quoted value, precede it with an additional matching quote character. For example, if you want to escape the default character ' \" ', use ' \"\" '. (default: \")",
                        "**skipLeadingRows**: Optional. The number of rows at the top of a CSV file that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows in the file that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema."
                      ]
                    }
                  ],
                  "**decimalTargetTypes**: Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.",
                  "**fileSetSpecType**: Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.",
                  [
                    "**googleSheetsOptions**: Options specific to Google Sheets data sources.",
                    {
                      "$ul": [
                        "**range**: Optional. Range of a sheet to query from. Only used when non-empty. Typical format: sheet_name!top_left_cell_id:bottom_right_cell_id For example: sheet1!A1:B20",
                        "**skipLeadingRows**: Optional. The number of rows at the top of a sheet that BigQuery will skip when reading the data. The default value is 0. This property is useful if you have header rows that should be skipped. When autodetect is on, the behavior is the following: * skipLeadingRows unspecified - Autodetect tries to detect headers in the first row. If they are not detected, the row is read as data. Otherwise data is read starting from the second row. * skipLeadingRows is 0 - Instructs autodetect that there are no headers and data should be read starting from the first row. * skipLeadingRows = N > 0 - Autodetect skips N-1 rows and tries to detect headers in row N. If headers are not detected, row N is just skipped. Otherwise row N is used to extract column names for the detected schema."
                      ]
                    }
                  ],
                  [
                    "**hivePartitioningOptions**: Options for configuring hive partitioning detect.",
                    {
                      "$ul": [
                        "**fields**: Output only. For permanent external tables, this field is populated with the hive partition keys in the order they were inferred. The types of the partition keys can be deduced by checking the table schema (which will include the partition keys). Not every API will populate this field in the output. For example, Tables.Get will populate it, but Tables.List will not contain this field.",
                        "**mode**: Optional. When set, what mode of hive partitioning to use when reading data. The following modes are supported: * AUTO: automatically infer partition key name(s) and type(s). * STRINGS: automatically infer partition key name(s). All types are strings. * CUSTOM: partition key schema is encoded in the source URI prefix. Not all storage formats support hive partitioning. Requesting hive partitioning on an unsupported format will lead to an error. Currently supported formats are: JSON, CSV, ORC, Avro and Parquet.",
                        "**requirePartitionFilter**: Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. Note that this field should only be true when creating a permanent external table or querying a temporary external table. Hive-partitioned loads with require_partition_filter explicitly set to true will fail. (default: false)",
                        "**sourceUriPrefix**: Optional. When hive partition detection is requested, a common prefix for all source uris must be required. The prefix must end immediately before the partition key encoding begins. For example, consider files following this data layout: gs://bucket/path_to_table/dt=2019-06-01/country=USA/id=7/file.avro gs://bucket/path_to_table/dt=2019-05-31/country=CA/id=3/file.avro When hive partitioning is requested with either AUTO or STRINGS detection, the common prefix can be either of gs://bucket/path_to_table or gs://bucket/path_to_table/. CUSTOM detection requires encoding the partitioning schema immediately after the common prefix. For CUSTOM, any of * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:STRING}/{country:STRING}/{id:INTEGER} * gs://bucket/path_to_table/{dt:DATE}/{country:STRING}/{id:STRING} would all be valid source URI prefixes."
                      ]
                    }
                  ],
                  "**ignoreUnknownValues**: Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.",
                  "**jsonExtension**: Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).",
                  [
                    "**jsonOptions**: Json Options for load and make external tables.",
                    {
                      "$ul": [
                        "**encoding**: Optional. The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8."
                      ]
                    }
                  ],
                  "**maxBadRecords**: Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.",
                  "**metadataCacheMode**: Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.",
                  "**objectMetadata**: Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.",
                  [
                    "**parquetOptions**: Parquet Options for load and make external tables.",
                    {
                      "$ul": [
                        "**enableListInference**: Optional. Indicates whether to use schema inference specifically for Parquet LIST logical type.",
                        "**enumAsString**: Optional. Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default."
                      ]
                    }
                  ],
                  "**referenceFileSchemaUri**: Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.",
                  [
                    "**schema**: Schema of a table",
                    {
                      "$ul": [
                        "**fields**: Describes the fields in a table."
                      ]
                    }
                  ],
                  "**sourceFormat**: [Required] The data format. For CSV files, specify \"CSV\". For Google sheets, specify \"GOOGLE_SHEETS\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro files, specify \"AVRO\". For Google Cloud Datastore backups, specify \"DATASTORE_BACKUP\". For Apache Iceberg tables, specify \"ICEBERG\". For ORC files, specify \"ORC\". For Parquet files, specify \"PARQUET\". [Beta] For Google Cloud Bigtable, specify \"BIGTABLE\".",
                  "**sourceUris**: [Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed."
                ]
              }
            ],
            "**friendlyName**: Optional. A descriptive name for this table.",
            "**id**: Output only. An opaque ID uniquely identifying the table.",
            "**kind**: The type of resource ID. (default: bigquery#table)",
            "**labels**: The labels associated with this table. You can use these to organize and group your tables. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.",
            "**lastModifiedTime**: Output only. The time when this table was last modified, in milliseconds since the epoch.",
            "**location**: Output only. The geographic location where the table resides. This value is inherited from the dataset.",
            [
              "**materializedView**: Definition and configuration of a materialized view.",
              {
                "$ul": [
                  "**allowNonIncrementalDefinition**: Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.",
                  "**enableRefresh**: Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is \"true\".",
                  "**lastRefreshTime**: Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.",
                  "**maxStaleness**: [Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).",
                  "**query**: Required. A query whose results are persisted.",
                  "**refreshIntervalMs**: Optional. The maximum frequency at which this materialized view will be refreshed. The default value is \"1800000\" (30 minutes)."
                ]
              }
            ],
            [
              "**materializedViewStatus**: Status of a materialized view. The last refresh timestamp status is omitted here, but is present in the MaterializedViewDefinition message.",
              {
                "$ul": [
                  [
                    "**lastRefreshStatus**: Error details.",
                    {
                      "$ul": [
                        "**debugInfo**: Debugging information. This property is internal to Google and should not be used.",
                        "**location**: Specifies where the error occurred, if present.",
                        "**message**: A human-readable description of the error.",
                        "**reason**: A short error code that summarizes the error."
                      ]
                    }
                  ],
                  "**refreshWatermark**: Output only. Refresh watermark of materialized view. The base tables' data were collected into the materialized view cache until this time."
                ]
              }
            ],
            "**maxStaleness**: Optional. The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.",
            [
              "**model**",
              {
                "$ul": [
                  [
                    "**modelOptions**: Deprecated.",
                    {
                      "$ul": [
                        "**labels**",
                        "**lossType**",
                        "**modelType**"
                      ]
                    }
                  ],
                  "**trainingRuns**: Deprecated."
                ]
              }
            ],
            "**numActiveLogicalBytes**: Output only. Number of logical bytes that are less than 90 days old.",
            "**numActivePhysicalBytes**: Output only. Number of physical bytes less than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "**numBytes**: Output only. The size of this table in logical bytes, excluding any data in the streaming buffer.",
            "**numLongTermBytes**: Output only. The number of logical bytes in the table that are considered \"long-term storage\".",
            "**numLongTermLogicalBytes**: Output only. Number of logical bytes that are more than 90 days old.",
            "**numLongTermPhysicalBytes**: Output only. Number of physical bytes more than 90 days old. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "**numPartitions**: Output only. The number of partitions present in the table or materialized view. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "**numPhysicalBytes**: Output only. The physical size of this table in bytes. This includes storage used for time travel.",
            "**numRows**: Output only. The number of rows of data in this table, excluding any data in the streaming buffer.",
            "**numTimeTravelPhysicalBytes**: Output only. Number of physical bytes used by time travel storage (deleted or changed data). This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            "**numTotalLogicalBytes**: Output only. Total number of logical bytes in the table or materialized view.",
            "**numTotalPhysicalBytes**: Output only. The physical size of this table in bytes. This also includes storage used for time travel. This data is not kept in real time, and might be delayed by a few seconds to a few minutes.",
            [
              "**rangePartitioning**",
              {
                "$ul": [
                  "**field**: Required. [Experimental] The table is partitioned by this field. The field must be a top-level NULLABLE/REQUIRED field. The only supported type is INTEGER/INT64.",
                  [
                    "**range**: [Experimental] Defines the ranges for range partitioning.",
                    {
                      "$ul": [
                        "**end**: [Experimental] The end of range partitioning, exclusive.",
                        "**interval**: [Experimental] The width of each interval.",
                        "**start**: [Experimental] The start of range partitioning, inclusive."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**replicas**: Optional. Output only. Table references of all replicas currently active on the table.",
            "**requirePartitionFilter**: Optional. If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. (default: false)",
            "**resourceTags**: [Optional] The tags associated with this table. Tag keys are globally unique. See additional information on [tags](https://cloud.google.com/iam/docs/tags-access-control#definitions). An object containing a list of \"key\": value pairs. The key is the namespaced friendly name of the tag key, e.g. \"12345/environment\" where 12345 is parent id. The value is the friendly short name of the tag value, e.g. \"production\".",
            [
              "**schema**: Schema of a table",
              {
                "$ul": [
                  "**fields**: Describes the fields in a table."
                ]
              }
            ],
            "**selfLink**: Output only. A URL that can be used to access this resource again.",
            [
              "**snapshotDefinition**: Information about base table and snapshot time of the snapshot.",
              {
                "$ul": [
                  [
                    "**baseTableReference**",
                    {
                      "$ul": [
                        "**datasetId**: Required. The ID of the dataset containing this table.",
                        "**projectId**: Required. The ID of the project containing this table.",
                        "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                      ]
                    }
                  ],
                  "**snapshotTime**: Required. The time at which the base table was snapshot. This value is reported in the JSON response using RFC3339 format."
                ]
              }
            ],
            [
              "**streamingBuffer**",
              {
                "$ul": [
                  "**estimatedBytes**: Output only. A lower-bound estimate of the number of bytes currently in the streaming buffer.",
                  "**estimatedRows**: Output only. A lower-bound estimate of the number of rows currently in the streaming buffer.",
                  "**oldestEntryTime**: Output only. Contains the timestamp of the oldest entry in the streaming buffer, in milliseconds since the epoch, if the streaming buffer is available."
                ]
              }
            ],
            [
              "**tableConstraints**: The TableConstraints defines the primary key and foreign key.",
              {
                "$ul": [
                  "**foreignKeys**: Optional. Present only if the table has a foreign key. The foreign key is not enforced.",
                  [
                    "**primaryKey**: Represents the primary key constraint on a table's columns.",
                    {
                      "$ul": [
                        "**columns**: Required. The columns that are composed of the primary key constraint."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**tableReference**",
              {
                "$ul": [
                  "**datasetId**: Required. The ID of the dataset containing this table.",
                  "**projectId**: Required. The ID of the project containing this table.",
                  "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                ]
              }
            ],
            [
              "**tableReplicationInfo**: Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`",
              {
                "$ul": [
                  "**replicatedSourceLastRefreshTime**: Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.",
                  [
                    "**replicationError**: Error details.",
                    {
                      "$ul": [
                        "**debugInfo**: Debugging information. This property is internal to Google and should not be used.",
                        "**location**: Specifies where the error occurred, if present.",
                        "**message**: A human-readable description of the error.",
                        "**reason**: A short error code that summarizes the error."
                      ]
                    }
                  ],
                  "**replicationIntervalMs**: Required. Specifies the interval at which the source table is polled for updates.",
                  "**replicationStatus**: Optional. Output only. Replication status of configured replication.",
                  [
                    "**sourceTable**",
                    {
                      "$ul": [
                        "**datasetId**: Required. The ID of the dataset containing this table.",
                        "**projectId**: Required. The ID of the project containing this table.",
                        "**tableId**: Required. The ID of the table. The ID can contain Unicode characters in category L (letter), M (mark), N (number), Pc (connector, including underscore), Pd (dash), and Zs (space). For more information, see [General Category](https://wikipedia.org/wiki/Unicode_character_property#General_Category). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as `sample_table$20190123`."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**timePartitioning**",
              {
                "$ul": [
                  "**expirationMs**: Optional. Number of milliseconds for which to keep the storage for a partition. A wrapper is used here because 0 is an invalid value.",
                  "**field**: Optional. If not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field. The field must be a top-level TIMESTAMP or DATE field. Its mode must be NULLABLE or REQUIRED. A wrapper is used here because an empty string is an invalid value.",
                  "**requirePartitionFilter**: If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified. This field is deprecated; please set the field with the same name on the table itself instead. This field needs a wrapper because we want to output the default value, false, if the user explicitly set it. (default: false)",
                  "**type**: Required. The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively."
                ]
              }
            ],
            "**type**: Output only. Describes the table type. The following values are supported: * `TABLE`: A normal BigQuery table. * `VIEW`: A virtual table defined by a SQL query. * `EXTERNAL`: A table that references data stored in an external storage system, such as Google Cloud Storage. * `MATERIALIZED_VIEW`: A precomputed view defined by a SQL query. * `SNAPSHOT`: An immutable BigQuery table that preserves the contents of a base table at a particular time. See additional information on [table snapshots](/bigquery/docs/table-snapshots-intro). The default value is `TABLE`.",
            [
              "**view**: Describes the definition of a logical view.",
              {
                "$ul": [
                  [
                    "**privacyPolicy**: Represents privacy policy that contains the privacy requirements specified by the data owner. Currently, this is only supported on views.",
                    {
                      "$ul": [
                        [
                          "**aggregationThresholdPolicy**: Represents privacy policy associated with \"aggregation threshold\" method.",
                          {
                            "$ul": [
                              "**privacyUnitColumns**: Optional. The privacy unit column(s) associated with this policy. For now, only one column per data source object (table, view) is allowed as a privacy unit column. Representing as a repeated field in metadata for extensibility to multiple columns in future. Duplicates and Repeated struct fields are not allowed. For nested fields, use dot notation (\"outer.inner\")",
                              "**threshold**: Optional. The threshold for the \"aggregation threshold\" policy."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**query**: Required. A query that BigQuery executes when the view is referenced.",
                  "**useExplicitColumnNames**: True if the column names are explicitly specified. For example by using the 'CREATE VIEW v(c1, c2) AS ...' syntax. Can only be set for GoogleSQL views.",
                  "**useLegacySql**: Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's GoogleSQL: https://cloud.google.com/bigquery/sql-reference/ Queries and views that reference this view must use the same flag value. A wrapper is used here because the default value is True.",
                  "**userDefinedFunctionResources**: Describes user-defined function resources used in the query."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
