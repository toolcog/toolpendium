{
  "name": "webrisk_threatLists_computeDiff",
  "description": "Gets the most recent threat list diffs. These diffs should be applied to a local database of hashes to keep it up-to-date. If the local database is empty or excessively out-of-date, a complete snapshot of the database will be returned. This Method only updates a single ThreatList at a time. To update multiple ThreatList databases, this method needs to be called once for each list.",
  "parameters": {
    "type": "object",
    "properties": {
      "constraints.maxDatabaseEntries": {
        "type": "integer",
        "description": "Sets the maximum number of entries that the client is willing to have in the local database. This should be a power of 2 between 2**10 and 2**20. If zero, no database size limit is set."
      },
      "constraints.maxDiffEntries": {
        "type": "integer",
        "description": "The maximum size in number of entries. The diff will not contain more entries than this value. This should be a power of 2 between 2**10 and 2**20. If zero, no diff size limit is set."
      },
      "constraints.supportedCompressions": {
        "items": {
          "enum": [
            "COMPRESSION_TYPE_UNSPECIFIED",
            "RAW",
            "RICE"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "The compression types supported by the client."
      },
      "threatType": {
        "enum": [
          "THREAT_TYPE_UNSPECIFIED",
          "MALWARE",
          "SOCIAL_ENGINEERING",
          "UNWANTED_SOFTWARE",
          "SOCIAL_ENGINEERING_EXTENDED_COVERAGE"
        ],
        "type": "string",
        "description": "Required. The threat list to update. Only a single ThreatType should be specified per request. If you want to handle multiple ThreatTypes, you must make one request per ThreatType."
      },
      "versionToken": {
        "type": "string",
        "description": "The current version token of the client for the requested list (the client version that was received from the last successful diff). If the client does not have a version token (this is the first time calling ComputeThreatListDiff), this may be left empty and a full database snapshot will be returned."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://webrisk.googleapis.com//v1/threatLists:computeDiff{?constraints.maxDatabaseEntries,constraints.maxDiffEntries,constraints.supportedCompressions,threatType,versionToken,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            [
              "**additions**: Contains the set of entries to add to a local database. May contain a combination of compressed and raw data in a single response.",
              {
                "$ul": [
                  "**rawHashes**: The raw SHA256-formatted entries. Repeated to allow returning sets of hashes with different prefix sizes.",
                  [
                    "**riceHashes**: The Rice-Golomb encoded data. Used for sending compressed 4-byte hashes or compressed removal indices.",
                    {
                      "$ul": [
                        "**encodedData**: The encoded deltas that are encoded using the Golomb-Rice coder.",
                        "**entryCount**: The number of entries that are delta encoded in the encoded data. If only a single integer was encoded, this will be zero and the single value will be stored in `first_value`.",
                        "**firstValue**: The offset of the first entry in the encoded data, or, if only a single integer was encoded, that single integer's value. If the field is empty or missing, assume zero.",
                        "**riceParameter**: The Golomb-Rice parameter, which is a number between 2 and 28. This field is missing (that is, zero) if `num_entries` is zero."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**checksum**: The expected state of a client's local database.",
              {
                "$ul": [
                  "**sha256**: The SHA256 hash of the client state; that is, of the sorted list of all hashes present in the database."
                ]
              }
            ],
            "**newVersionToken**: The new opaque client version token. This should be retained by the client and passed into the next call of ComputeThreatListDiff as 'version_token'. A separate version token should be stored and used for each threatList.",
            "**recommendedNextDiff**: The soonest the client should wait before issuing any diff request. Querying sooner is unlikely to produce a meaningful diff. Waiting longer is acceptable considering the use case. If this field is not set clients may update as soon as they want.",
            [
              "**removals**: Contains the set of entries to remove from a local database.",
              {
                "$ul": [
                  [
                    "**rawIndices**: A set of raw indices to remove from a local list.",
                    {
                      "$ul": [
                        "**indices**: The indices to remove from a lexicographically-sorted local list."
                      ]
                    }
                  ],
                  [
                    "**riceIndices**: The Rice-Golomb encoded data. Used for sending compressed 4-byte hashes or compressed removal indices.",
                    {
                      "$ul": [
                        "**encodedData**: The encoded deltas that are encoded using the Golomb-Rice coder.",
                        "**entryCount**: The number of entries that are delta encoded in the encoded data. If only a single integer was encoded, this will be zero and the single value will be stored in `first_value`.",
                        "**firstValue**: The offset of the first entry in the encoded data, or, if only a single integer was encoded, that single integer's value. If the field is empty or missing, assume zero.",
                        "**riceParameter**: The Golomb-Rice parameter, which is a number between 2 and 28. This field is missing (that is, zero) if `num_entries` is zero."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**responseType**: The type of response. This may indicate that an action must be taken by the client when the response is received."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
