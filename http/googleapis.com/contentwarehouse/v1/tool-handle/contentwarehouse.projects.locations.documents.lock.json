{
  "name": "contentwarehouse_projects_locations_documents_lock",
  "description": "Lock the document so the document cannot be updated by other users.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the document to lock. Format: projects/{project_number}/locations/{location}/documents/{document}."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudContentwarehouseV1LockDocumentRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudContentwarehouseV1LockDocumentRequest": {
        "description": "Request message for DocumentService.LockDocument.",
        "properties": {
          "collectionId": {
            "description": "The collection the document connects to.",
            "type": "string"
          },
          "lockingUser": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1UserInfo"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1UserInfo": {
        "description": "The user information.",
        "properties": {
          "groupIds": {
            "description": "The unique group identifications which the user is belong to. The format is \"group:yyyy@example.com\";",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "A unique user identification string, as determined by the client. The maximum number of allowed characters is 255. Allowed characters include numbers 0 to 9, uppercase and lowercase letters, and restricted special symbols (:, @, +, -, _, ~) The format is \"user:xxxx@example.com\";",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://contentwarehouse.googleapis.com//v1/{name}:lock{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Defines the structure for content warehouse document proto.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**cloudAiDocument**: Document represents the canonical document resource in Document AI. It is an interchange format that provides insights into documents and allows for collaboration between users and Document AI to iterate and optimize for quality.",
              {
                "$ul": [
                  "**content**: Optional. Inline document content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64.",
                  "**entities**: A list of entities detected on Document.text. For document shards, entities in this list may cross shard boundaries.",
                  "**entityRelations**: Placeholder. Relationship among Document.entities.",
                  [
                    "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
                    {
                      "$ul": [
                        "**code**: The status code, which should be an enum value of google.rpc.Code.",
                        "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                        "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      ]
                    }
                  ],
                  "**mimeType**: An IANA published [media type (MIME type)](https://www.iana.org/assignments/media-types/media-types.xhtml).",
                  "**pages**: Visual page layout for the Document.",
                  "**revisions**: Placeholder. Revision history of this document.",
                  [
                    "**shardInfo**: For a large document, sharding may be performed to produce several document shards. Each document shard contains this field to detail which shard it is.",
                    {
                      "$ul": [
                        "**shardCount**: Total number of shards.",
                        "**shardIndex**: The 0-based index of this shard.",
                        "**textOffset**: The index of the first character in Document.text in the overall document global text."
                      ]
                    }
                  ],
                  "**text**: Optional. UTF-8 encoded text in reading order from the document.",
                  "**textChanges**: Placeholder. A list of text corrections made to Document.text. This is usually used for annotating corrections to OCR mistakes. Text changes for a given revision may not overlap with each other.",
                  "**textStyles**: Styles for the Document.text.",
                  "**uri**: Optional. Currently supports Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. For more information, refer to [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris)."
                ]
              }
            ],
            "**contentCategory**: Indicates the category (image, audio, video etc.) of the original content.",
            "**createTime**: Output only. The time when the document is created.",
            "**creator**: The user who creates the document.",
            "**displayName**: Required. Display name of the document given by the user. This name will be displayed in the UI. Customer can populate this field with the name of the document. This differs from the 'title' field as 'title' is optional and stores the top heading in the document.",
            "**displayUri**: Uri to display the document, for example, in the UI.",
            "**dispositionTime**: Output only. If linked to a Collection with RetentionPolicy, the date when the document becomes mutable.",
            "**documentSchemaName**: The Document schema name. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.",
            "**inlineRawDocument**: Raw document content.",
            "**legalHold**: Output only. Indicates if the document has a legal hold on it.",
            "**name**: The resource name of the document. Format: projects/{project_number}/locations/{location}/documents/{document_id}. The name is ignored when creating a document.",
            "**plainText**: Other document format, such as PPTX, XLXS",
            "**properties**: List of values that are user supplied metadata.",
            "**rawDocumentFileType**: This is used when DocAI was not used to load the document and parsing/ extracting is needed for the inline_raw_document. For example, if inline_raw_document is the byte representation of a PDF file, then this should be set to: RAW_DOCUMENT_FILE_TYPE_PDF.",
            "**rawDocumentPath**: Raw document file in Cloud Storage path.",
            "**referenceId**: The reference ID set by customers. Must be unique per project and location.",
            "**textExtractionDisabled**: If true, text extraction will not be performed.",
            "**textExtractionEnabled**: If true, text extraction will be performed.",
            "**title**: Title that describes the document. This can be the top heading or text that describes the document.",
            "**updateTime**: Output only. The time when the document is last updated.",
            "**updater**: The user who lastly updates the document."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
