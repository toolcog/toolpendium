{
  "name": "contentwarehouse_projects_locations_runPipeline",
  "description": "Run a predefined pipeline.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The resource name which owns the resources of the pipeline. Format: projects/{project_number}/locations/{location}."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudContentwarehouseV1RunPipelineRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudContentwarehouseV1RunPipelineRequest": {
        "description": "Request message for DocumentService.RunPipeline.",
        "properties": {
          "exportCdwPipeline": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1ExportToCdwPipeline"
          },
          "gcsIngestPipeline": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1GcsIngestPipeline"
          },
          "gcsIngestWithDocAiProcessorsPipeline": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1GcsIngestWithDocAiProcessorsPipeline"
          },
          "processWithDocAiPipeline": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1ProcessWithDocAiPipeline"
          },
          "requestMetadata": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1RequestMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1ExportToCdwPipeline": {
        "description": "The configuration of exporting documents from the Document Warehouse to CDW pipeline.",
        "properties": {
          "docAiDataset": {
            "description": "Optional. The CDW dataset resource name. This field is optional. If not set, the documents will be exported to Cloud Storage only. Format: projects/{project}/locations/{location}/processors/{processor}/dataset",
            "type": "string"
          },
          "documents": {
            "description": "The list of all the resource names of the documents to be processed. Format: projects/{project_number}/locations/{location}/documents/{document_id}.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exportFolderPath": {
            "description": "The Cloud Storage folder path used to store the exported documents before being sent to CDW. Format: `gs:///`.",
            "type": "string"
          },
          "trainingSplitRatio": {
            "description": "Ratio of training dataset split. When importing into Document AI Workbench, documents will be automatically split into training and test split category with the specified ratio. This field is required if doc_ai_dataset is set.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1GcsIngestPipeline": {
        "description": "The configuration of the Cloud Storage Ingestion pipeline.",
        "properties": {
          "inputPath": {
            "description": "The input Cloud Storage folder. All files under this folder will be imported to Document Warehouse. Format: `gs:///`.",
            "type": "string"
          },
          "pipelineConfig": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1IngestPipelineConfig"
          },
          "processorType": {
            "description": "The Doc AI processor type name. Only used when the format of ingested files is Doc AI Document proto format.",
            "type": "string"
          },
          "schemaName": {
            "description": "The Document Warehouse schema resource name. All documents processed by this pipeline will use this schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.",
            "type": "string"
          },
          "skipIngestedDocuments": {
            "description": "The flag whether to skip ingested documents. If it is set to true, documents in Cloud Storage contains key \"status\" with value \"status=ingested\" in custom metadata will be skipped to ingest.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1IngestPipelineConfig": {
        "description": "The ingestion pipeline config.",
        "properties": {
          "cloudFunction": {
            "description": "The Cloud Function resource name. The Cloud Function needs to live inside consumer project and is accessible to Document AI Warehouse P4SA. Only Cloud Functions V2 is supported. Cloud function execution should complete within 5 minutes or this file ingestion may fail due to timeout. Format: `https://{region}-{project_id}.cloudfunctions.net/{cloud_function}` The following keys are available the request json payload. * display_name * properties * plain_text * reference_id * document_schema_name * raw_document_path * raw_document_file_type The following keys from the cloud function json response payload will be ingested to the Document AI Warehouse as part of Document proto content and/or related information. The original values will be overridden if any key is present in the response. * display_name * properties * plain_text * document_acl_policy * folder",
            "type": "string"
          },
          "documentAclPolicy": {
            "$ref": "#/$defs/GoogleIamV1Policy"
          },
          "enableDocumentTextExtraction": {
            "description": "The document text extraction enabled flag. If the flag is set to true, DWH will perform text extraction on the raw document.",
            "type": "boolean"
          },
          "folder": {
            "description": "Optional. The name of the folder to which all ingested documents will be linked during ingestion process. Format is `projects/{project}/locations/{location}/documents/{folder_id}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleIamV1Policy": {
        "description": "An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { \"bindings\": [ { \"role\": \"roles/resourcemanager.organizationAdmin\", \"members\": [ \"user:mike@example.com\", \"group:admins@example.com\", \"domain:google.com\", \"serviceAccount:my-project-id@appspot.gserviceaccount.com\" ] }, { \"role\": \"roles/resourcemanager.organizationViewer\", \"members\": [ \"user:eve@example.com\" ], \"condition\": { \"title\": \"expirable access\", \"description\": \"Does not grant access after Sep 2020\", \"expression\": \"request.time < timestamp('2020-10-01T00:00:00.000Z')\", } } ], \"etag\": \"BwWWja0YfJA=\", \"version\": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).",
        "properties": {
          "auditConfigs": {
            "description": "Specifies cloud audit logging configuration for this policy.",
            "items": {
              "$ref": "#/$defs/GoogleIamV1AuditConfig"
            },
            "type": "array"
          },
          "bindings": {
            "description": "Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.",
            "items": {
              "$ref": "#/$defs/GoogleIamV1Binding"
            },
            "type": "array"
          },
          "etag": {
            "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.",
            "format": "byte",
            "type": "string"
          },
          "version": {
            "description": "Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleIamV1AuditConfig": {
        "description": "Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \"audit_configs\": [ { \"service\": \"allServices\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" }, { \"log_type\": \"ADMIN_READ\" } ] }, { \"service\": \"sampleservice.googleapis.com\", \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\" }, { \"log_type\": \"DATA_WRITE\", \"exempted_members\": [ \"user:aliya@example.com\" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.",
        "properties": {
          "auditLogConfigs": {
            "description": "The configuration for logging of each type of permission.",
            "items": {
              "$ref": "#/$defs/GoogleIamV1AuditLogConfig"
            },
            "type": "array"
          },
          "service": {
            "description": "Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleIamV1AuditLogConfig": {
        "description": "Provides the configuration for logging a type of permissions. Example: { \"audit_log_configs\": [ { \"log_type\": \"DATA_READ\", \"exempted_members\": [ \"user:jose@example.com\" ] }, { \"log_type\": \"DATA_WRITE\" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.",
        "properties": {
          "exemptedMembers": {
            "description": "Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "logType": {
            "description": "The log type that this config enables.",
            "enum": [
              "LOG_TYPE_UNSPECIFIED",
              "ADMIN_READ",
              "DATA_WRITE",
              "DATA_READ"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleIamV1Binding": {
        "description": "Associates `members`, or principals, with a `role`.",
        "properties": {
          "condition": {
            "$ref": "#/$defs/GoogleTypeExpr"
          },
          "members": {
            "description": "Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "role": {
            "description": "Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleTypeExpr": {
        "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
        "properties": {
          "description": {
            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
            "type": "string"
          },
          "expression": {
            "description": "Textual representation of an expression in Common Expression Language syntax.",
            "type": "string"
          },
          "location": {
            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
            "type": "string"
          },
          "title": {
            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1GcsIngestWithDocAiProcessorsPipeline": {
        "description": "The configuration of the Cloud Storage Ingestion with DocAI Processors pipeline.",
        "properties": {
          "extractProcessorInfos": {
            "description": "The extract processors information. One matched extract processor will be used to process documents based on the classify processor result. If no classify processor is specified, the first extract processor will be used.",
            "items": {
              "$ref": "#/$defs/GoogleCloudContentwarehouseV1ProcessorInfo"
            },
            "type": "array"
          },
          "inputPath": {
            "description": "The input Cloud Storage folder. All files under this folder will be imported to Document Warehouse. Format: `gs:///`.",
            "type": "string"
          },
          "pipelineConfig": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1IngestPipelineConfig"
          },
          "processorResultsFolderPath": {
            "description": "The Cloud Storage folder path used to store the raw results from processors. Format: `gs:///`.",
            "type": "string"
          },
          "skipIngestedDocuments": {
            "description": "The flag whether to skip ingested documents. If it is set to true, documents in Cloud Storage contains key \"status\" with value \"status=ingested\" in custom metadata will be skipped to ingest.",
            "type": "boolean"
          },
          "splitClassifyProcessorInfo": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1ProcessorInfo"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1ProcessorInfo": {
        "description": "The DocAI processor information.",
        "properties": {
          "documentType": {
            "description": "The processor will process the documents with this document type.",
            "type": "string"
          },
          "processorName": {
            "description": "The processor resource name. Format is `projects/{project}/locations/{location}/processors/{processor}`, or `projects/{project}/locations/{location}/processors/{processor}/processorVersions/{processorVersion}`",
            "type": "string"
          },
          "schemaName": {
            "description": "The Document schema resource name. All documents processed by this processor will use this schema. Format: projects/{project_number}/locations/{location}/documentSchemas/{document_schema_id}.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1ProcessWithDocAiPipeline": {
        "description": "The configuration of processing documents in Document Warehouse with DocAi processors pipeline.",
        "properties": {
          "documents": {
            "description": "The list of all the resource names of the documents to be processed. Format: projects/{project_number}/locations/{location}/documents/{document_id}.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "exportFolderPath": {
            "description": "The Cloud Storage folder path used to store the exported documents before being sent to CDW. Format: `gs:///`.",
            "type": "string"
          },
          "processorInfo": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1ProcessorInfo"
          },
          "processorResultsFolderPath": {
            "description": "The Cloud Storage folder path used to store the raw results from processors. Format: `gs:///`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1RequestMetadata": {
        "description": "Meta information is used to improve the performance of the service.",
        "properties": {
          "userInfo": {
            "$ref": "#/$defs/GoogleCloudContentwarehouseV1UserInfo"
          }
        },
        "type": "object"
      },
      "GoogleCloudContentwarehouseV1UserInfo": {
        "description": "The user information.",
        "properties": {
          "groupIds": {
            "description": "The unique group identifications which the user is belong to. The format is \"group:yyyy@example.com\";",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "A unique user identification string, as determined by the client. The maximum number of allowed characters is 255. Allowed characters include numbers 0 to 9, uppercase and lowercase letters, and restricted special symbols (:, @, +, -, _, ~) The format is \"user:xxxx@example.com\";",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://contentwarehouse.googleapis.com//v1/{name}:runPipeline{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
