{
  "name": "managedidentities_projects_locations_global_domains_create",
  "description": "Creates a Microsoft AD domain.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource project name and location using the form: `projects/{project_id}/locations/global`"
      },
      "domainName": {
        "type": "string",
        "description": "Required. The fully qualified domain name. e.g. mydomain.myorganization.com, with the following restrictions: * Must contain only lowercase letters, numbers, periods and hyphens. * Must start with a letter. * Must contain between 2-64 characters. * Must end with a number or a letter. * Must not start with period. * First segment length (mydomain for example above) shouldn't exceed 15 chars. * The last segment cannot be fully numeric. * Must be unique within the customer project."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Domain"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Domain": {
        "description": "Represents a managed Microsoft Active Directory domain. If the domain is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.",
        "properties": {
          "admin": {
            "description": "Optional. The name of delegated administrator account used to perform Active Directory operations. If not specified, `setupadmin` will be used.",
            "type": "string"
          },
          "auditLogsEnabled": {
            "description": "Optional. Configuration for audit logs. True if audit logs are enabled, else false. Default is audit logs disabled.",
            "type": "boolean"
          },
          "authorizedNetworks": {
            "description": "Optional. The full names of the Google Compute Engine [networks](/compute/docs/networks-and-firewalls#networks) the domain instance is connected to. Networks can be added using UpdateDomain. The domain is only available on networks listed in `authorized_networks`. If CIDR subnets overlap between networks, domain creation will fail.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Output only. The time the instance was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "fqdn": {
            "description": "Output only. The fully-qualified domain name of the exposed domain used by clients to connect to the service. Similar to what would be chosen for an Active Directory set up on an internal network.",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Resource labels that can contain user-provided metadata.",
            "type": "object"
          },
          "locations": {
            "description": "Required. Locations where domain needs to be provisioned. regions e.g. us-west1 or us-east4 Service supports up to 4 locations at once. Each location will use a /26 block.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Required. The unique name of the domain using the form: `projects/{project_id}/locations/global/domains/{domain_name}`.",
            "type": "string"
          },
          "reservedIpRange": {
            "description": "Required. The CIDR range of internal addresses that are reserved for this domain. Reserved networks must be /24 or larger. Ranges must be unique and non-overlapping with existing subnets in [Domain].[authorized_networks].",
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of this domain.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "UPDATING",
              "DELETING",
              "REPAIRING",
              "PERFORMING_MAINTENANCE",
              "UNAVAILABLE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "statusMessage": {
            "description": "Output only. Additional information about the current status of this domain, if available.",
            "readOnly": true,
            "type": "string"
          },
          "trusts": {
            "description": "Output only. The current trusts associated with the domain.",
            "items": {
              "$ref": "#/$defs/Trust"
            },
            "readOnly": true,
            "type": "array"
          },
          "updateTime": {
            "description": "Output only. The last update time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trust": {
        "description": "Represents a relationship between two domains. This allows a controller in one domain to authenticate a user in another domain. If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.",
        "properties": {
          "createTime": {
            "description": "Output only. The time the instance was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "lastTrustHeartbeatTime": {
            "description": "Output only. The last heartbeat time when the trust was known to be connected.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "selectiveAuthentication": {
            "description": "Optional. The trust authentication type, which decides whether the trusted side has forest/domain wide access or selective access to an approved set of resources.",
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The current state of the trust.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "UPDATING",
              "DELETING",
              "CONNECTED",
              "DISCONNECTED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateDescription": {
            "description": "Output only. Additional information about the current state of the trust, if available.",
            "readOnly": true,
            "type": "string"
          },
          "targetDnsIpAddresses": {
            "description": "Required. The target DNS server IP addresses which can resolve the remote domain involved in the trust.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targetDomainName": {
            "description": "Required. The fully qualified target domain name which will be in trust with the current domain.",
            "type": "string"
          },
          "trustDirection": {
            "description": "Required. The trust direction, which decides if the current domain is trusted, trusting, or both.",
            "enum": [
              "TRUST_DIRECTION_UNSPECIFIED",
              "INBOUND",
              "OUTBOUND",
              "BIDIRECTIONAL"
            ],
            "type": "string"
          },
          "trustHandshakeSecret": {
            "description": "Required. The trust secret used for the handshake with the target domain. This will not be stored.",
            "type": "string"
          },
          "trustType": {
            "description": "Required. The type of trust represented by the trust resource.",
            "enum": [
              "TRUST_TYPE_UNSPECIFIED",
              "FOREST",
              "EXTERNAL"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last update time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://managedidentities.googleapis.com//v1/{parent}/domains{?domainName,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
