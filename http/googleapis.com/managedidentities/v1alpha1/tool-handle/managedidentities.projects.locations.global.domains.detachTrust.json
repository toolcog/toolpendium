{
  "name": "managedidentities_projects_locations_global_domains_detachTrust",
  "description": "Removes identified trust. Operation",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The resource domain name, project name, and location using the form: `projects/{project_id}/locations/global/domains/{domain_name}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/DetachTrustRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "DetachTrustRequest": {
        "properties": {
          "trust": {
            "$ref": "#/$defs/Trust"
          }
        },
        "type": "object"
      },
      "Trust": {
        "description": "Represents a relationship between two domains which makes it possible for users in one domain to be authenticated by a dc in another domain. Refer https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc731335(v%3dws.10) If the trust is being changed, it will be placed into the UPDATING state, which indicates that the resource is being reconciled. At this point, Get will reflect an intermediate state.",
        "properties": {
          "createTime": {
            "description": "Output only. The time the instance was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastKnownTrustConnectedHeartbeatTime": {
            "description": "Output only. The last heartbeat time when the trust was known to be connected.",
            "format": "google-datetime",
            "type": "string"
          },
          "selectiveAuthentication": {
            "description": "The trust authentication type which decides whether the trusted side has forest/domain wide access or selective access to approved set of resources.",
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The current state of this trust.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "UPDATING",
              "DELETING",
              "CONNECTED",
              "DISCONNECTED"
            ],
            "type": "string"
          },
          "stateDescription": {
            "description": "Output only. Additional information about the current state of this trust, if available.",
            "type": "string"
          },
          "targetDnsIpAddresses": {
            "description": "The target dns server ip addresses which can resolve the remote domain involved in trust.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targetDomainName": {
            "description": "The fully qualified target domain name which will be in trust with current domain.",
            "type": "string"
          },
          "trustDirection": {
            "description": "The trust direction decides the current domain is trusted, trusting or both.",
            "enum": [
              "TRUST_DIRECTION_UNSPECIFIED",
              "INBOUND",
              "OUTBOUND",
              "BIDIRECTIONAL"
            ],
            "type": "string"
          },
          "trustHandshakeSecret": {
            "description": "Input only, and will not be stored. The trust secret used for handshake with target domain.",
            "type": "string"
          },
          "trustType": {
            "description": "The type of trust represented by the trust resource.",
            "enum": [
              "TRUST_TYPE_UNSPECIFIED",
              "FOREST",
              "EXTERNAL"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Last update time.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://managedidentities.googleapis.com//v1alpha1/{name}:detachTrust{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
