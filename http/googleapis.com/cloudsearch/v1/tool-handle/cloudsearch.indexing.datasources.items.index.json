{
  "name": "cloudsearch_indexing_datasources_items_index",
  "description": "Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/IndexItemRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "IndexItemRequest": {
        "properties": {
          "connectorName": {
            "description": "The name of connector making this call. Format: datasources/{source_id}/connectors/{ID}",
            "type": "string"
          },
          "debugOptions": {
            "$ref": "#/$defs/DebugOptions"
          },
          "indexItemOptions": {
            "$ref": "#/$defs/IndexItemOptions"
          },
          "item": {
            "$ref": "#/$defs/Item"
          },
          "mode": {
            "description": "Required. The RequestMode for this request.",
            "enum": [
              "UNSPECIFIED",
              "SYNCHRONOUS",
              "ASYNCHRONOUS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DebugOptions": {
        "description": "Shared request debug options for all cloudsearch RPC methods.",
        "properties": {
          "enableDebugging": {
            "description": "If you are asked by Google to help with debugging, set this field. Otherwise, ignore this field.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "IndexItemOptions": {
        "properties": {
          "allowUnknownGsuitePrincipals": {
            "description": "Specifies if the index request should allow Google Workspace principals that do not exist or are deleted.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Item": {
        "description": "Represents a single object that is an item in the search index, such as a file, folder, or a database record.",
        "properties": {
          "acl": {
            "$ref": "#/$defs/ItemAcl"
          },
          "content": {
            "$ref": "#/$defs/ItemContent"
          },
          "itemType": {
            "description": "The type for this item.",
            "enum": [
              "UNSPECIFIED",
              "CONTENT_ITEM",
              "CONTAINER_ITEM",
              "VIRTUAL_CONTAINER_ITEM"
            ],
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/ItemMetadata"
          },
          "name": {
            "description": "The name of the Item. Format: datasources/{source_id}/items/{item_id} This is a required field. The maximum length is 1536 characters.",
            "type": "string"
          },
          "payload": {
            "description": "Additional state connector can store for this item. The maximum length is 10000 bytes.",
            "format": "byte",
            "type": "string"
          },
          "queue": {
            "description": "Queue this item belongs to. The maximum length is 100 characters.",
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/ItemStatus"
          },
          "structuredData": {
            "$ref": "#/$defs/ItemStructuredData"
          },
          "version": {
            "description": "Required. The indexing system stores the version from the datasource as a byte string and compares the Item version in the index to the version of the queued Item using lexical ordering. Cloud Search Indexing won't index or delete any queued item with a version value that is less than or equal to the version of the currently indexed item. The maximum length for this field is 1024 bytes. For information on how item version affects the deletion process, refer to [Handle revisions after manual deletes](https://developers.google.com/cloud-search/docs/guides/operations).",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemAcl": {
        "description": "Access control list information for the item. For more information see [Map ACLs](https://developers.google.com/cloud-search/docs/guides/acls).",
        "properties": {
          "aclInheritanceType": {
            "description": "Sets the type of access rules to apply when an item inherits its ACL from a parent. This should always be set in tandem with the inheritAclFrom field. Also, when the inheritAclFrom field is set, this field should be set to a valid AclInheritanceType.",
            "enum": [
              "NOT_APPLICABLE",
              "CHILD_OVERRIDE",
              "PARENT_OVERRIDE",
              "BOTH_PERMIT"
            ],
            "type": "string"
          },
          "deniedReaders": {
            "description": "List of principals who are explicitly denied access to the item in search results. While principals are denied access by default, use denied readers to handle exceptions and override the list allowed readers. The maximum number of elements is 100.",
            "items": {
              "$ref": "#/$defs/Principal"
            },
            "type": "array"
          },
          "inheritAclFrom": {
            "description": "The name of the item to inherit the Access Permission List (ACL) from. Note: ACL inheritance *only* provides access permissions to child items and does not define structural relationships, nor does it provide convenient ways to delete large groups of items. Deleting an ACL parent from the index only alters the access permissions of child items that reference the parent in the inheritAclFrom field. The item is still in the index, but may not visible in search results. By contrast, deletion of a container item also deletes all items that reference the container via the containerName field. The maximum length for this field is 1536 characters.",
            "type": "string"
          },
          "owners": {
            "description": "Optional. List of owners for the item. This field has no bearing on document access permissions. It does, however, offer a slight ranking boosts items where the querying user is an owner. The maximum number of elements is 5.",
            "items": {
              "$ref": "#/$defs/Principal"
            },
            "type": "array"
          },
          "readers": {
            "description": "List of principals who are allowed to see the item in search results. Optional if inheriting permissions from another item or if the item is not intended to be visible, such as virtual containers. The maximum number of elements is 1000.",
            "items": {
              "$ref": "#/$defs/Principal"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Principal": {
        "description": "Reference to a user, group, or domain.",
        "properties": {
          "groupResourceName": {
            "description": "This principal is a group identified using an external identity. The name field must specify the group resource name with this format: identitysources/{source_id}/groups/{ID}",
            "type": "string"
          },
          "gsuitePrincipal": {
            "$ref": "#/$defs/GSuitePrincipal"
          },
          "userResourceName": {
            "description": "This principal is a user identified using an external identity. The name field must specify the user resource name with this format: identitysources/{source_id}/users/{ID}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GSuitePrincipal": {
        "properties": {
          "gsuiteDomain": {
            "description": "This principal represents all users of the Google Workspace domain of the customer.",
            "type": "boolean"
          },
          "gsuiteGroupEmail": {
            "description": "This principal references a Google Workspace group name.",
            "type": "string"
          },
          "gsuiteUserEmail": {
            "description": "This principal references a Google Workspace user account.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemContent": {
        "description": "Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8 encoded strings are allowed as inlineContent. If the content is uploaded and not binary, it must be UTF-8 encoded.",
        "properties": {
          "contentDataRef": {
            "$ref": "#/$defs/UploadItemRef"
          },
          "contentFormat": {
            "enum": [
              "UNSPECIFIED",
              "HTML",
              "TEXT",
              "RAW"
            ],
            "type": "string"
          },
          "hash": {
            "description": "Hashing info calculated and provided by the API client for content. Can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
            "type": "string"
          },
          "inlineContent": {
            "description": "Content that is supplied inlined within the update method. The maximum length is 102400 bytes (100 KiB).",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UploadItemRef": {
        "description": "Represents an upload session reference. This reference is created via upload method. This reference is valid for 30 days after its creation. Updating of item content may refer to this uploaded content via contentDataRef.",
        "properties": {
          "name": {
            "description": "The name of the content reference. The maximum length is 2048 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemMetadata": {
        "description": "Available metadata fields for the item.",
        "properties": {
          "containerName": {
            "description": "The name of the container for this item. Deletion of the container item leads to automatic deletion of this item. Note: ACLs are not inherited from a container item. To provide ACL inheritance for an item, use the inheritAclFrom field. The maximum length is 1536 characters.",
            "type": "string"
          },
          "contentLanguage": {
            "description": "The BCP-47 language code for the item, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum length is 32 characters.",
            "type": "string"
          },
          "contextAttributes": {
            "description": "A set of named attributes associated with the item. This can be used for influencing the ranking of the item based on the context in the request. The maximum number of elements is 10.",
            "items": {
              "$ref": "#/$defs/ContextAttribute"
            },
            "type": "array"
          },
          "createTime": {
            "description": "The time when the item was created in the source repository.",
            "format": "google-datetime",
            "type": "string"
          },
          "hash": {
            "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
            "type": "string"
          },
          "interactions": {
            "description": "A list of interactions for the item. Interactions are used to improve Search quality, but are not exposed to end users. The maximum number of elements is 1000.",
            "items": {
              "$ref": "#/$defs/Interaction"
            },
            "type": "array"
          },
          "keywords": {
            "description": "Additional keywords or phrases that should match the item. Used internally for user generated content. The maximum number of elements is 100. The maximum length is 8192 characters.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "mimeType": {
            "description": "The original mime-type of ItemContent.content in the source repository. The maximum length is 256 characters.",
            "type": "string"
          },
          "objectType": {
            "description": "The type of the item. This should correspond to the name of an object definition in the schema registered for the data source. For example, if the schema for the data source contains an object definition with name 'document', then item indexing requests for objects of that type should set objectType to 'document'. The maximum length is 256 characters.",
            "type": "string"
          },
          "searchQualityMetadata": {
            "$ref": "#/$defs/SearchQualityMetadata"
          },
          "sourceRepositoryUrl": {
            "description": "Link to the source repository serving the data. Seach results apply this link to the title. Whitespace or special characters may cause Cloud Seach result links to trigger a redirect notice; to avoid this, encode the URL. The maximum length is 2048 characters.",
            "type": "string"
          },
          "title": {
            "description": "The title of the item. If given, this will be the displayed title of the Search result. The maximum length is 2048 characters.",
            "type": "string"
          },
          "updateTime": {
            "description": "The time when the item was last modified in the source repository.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContextAttribute": {
        "description": "A named attribute associated with an item which can be used for influencing the ranking of the item based on the context in the request.",
        "properties": {
          "name": {
            "description": "The name of the attribute. It should not be empty. The maximum length is 32 characters. The name must start with a letter and can only contain letters (A-Z, a-z) or numbers (0-9). The name will be normalized (lower-cased) before being matched.",
            "type": "string"
          },
          "values": {
            "description": "Text values of the attribute. The maximum number of elements is 10. The maximum length of an element in the array is 32 characters. The value will be normalized (lower-cased) before being matched.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Interaction": {
        "description": "Represents an interaction between a user and an item.",
        "properties": {
          "interactionTime": {
            "description": "The time when the user acted on the item. If multiple actions of the same type exist for a single user, only the most recent action is recorded.",
            "format": "google-datetime",
            "type": "string"
          },
          "principal": {
            "$ref": "#/$defs/Principal"
          },
          "type": {
            "enum": [
              "UNSPECIFIED",
              "VIEW",
              "EDIT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SearchQualityMetadata": {
        "description": "Additional search quality metadata of the item.",
        "properties": {
          "quality": {
            "description": "An indication of the quality of the item, used to influence search quality. Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The default value is 0.0.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ItemStatus": {
        "description": "This contains item's status and any errors.",
        "properties": {
          "code": {
            "description": "Status code.",
            "enum": [
              "CODE_UNSPECIFIED",
              "ERROR",
              "MODIFIED",
              "NEW_ITEM",
              "ACCEPTED"
            ],
            "type": "string"
          },
          "processingErrors": {
            "description": "Error details in case the item is in ERROR state.",
            "items": {
              "$ref": "#/$defs/ProcessingError"
            },
            "type": "array"
          },
          "repositoryErrors": {
            "description": "Repository error reported by connector.",
            "items": {
              "$ref": "#/$defs/RepositoryError"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProcessingError": {
        "properties": {
          "code": {
            "description": "Error code indicating the nature of the error.",
            "enum": [
              "PROCESSING_ERROR_CODE_UNSPECIFIED",
              "MALFORMED_REQUEST",
              "UNSUPPORTED_CONTENT_FORMAT",
              "INDIRECT_BROKEN_ACL",
              "ACL_CYCLE"
            ],
            "type": "string"
          },
          "errorMessage": {
            "description": "The description of the error.",
            "type": "string"
          },
          "fieldViolations": {
            "description": "In case the item fields are invalid, this field contains the details about the validation errors.",
            "items": {
              "$ref": "#/$defs/FieldViolation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FieldViolation": {
        "properties": {
          "description": {
            "description": "The description of the error.",
            "type": "string"
          },
          "field": {
            "description": "Path of field with violation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepositoryError": {
        "description": "Errors when the connector is communicating to the source repository.",
        "properties": {
          "errorMessage": {
            "description": "Message that describes the error. The maximum allowable length of the message is 8192 characters.",
            "type": "string"
          },
          "httpStatusCode": {
            "description": "Error codes. Matches the definition of HTTP status codes.",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The type of error.",
            "enum": [
              "UNKNOWN",
              "NETWORK_ERROR",
              "DNS_ERROR",
              "CONNECTION_ERROR",
              "AUTHENTICATION_ERROR",
              "AUTHORIZATION_ERROR",
              "SERVER_ERROR",
              "QUOTA_EXCEEDED",
              "SERVICE_UNAVAILABLE",
              "CLIENT_ERROR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ItemStructuredData": {
        "description": "Available structured data fields for the item.",
        "properties": {
          "hash": {
            "description": "Hashing value provided by the API caller. This can be used with the items.push method to calculate modified state. The maximum length is 2048 characters.",
            "type": "string"
          },
          "object": {
            "$ref": "#/$defs/StructuredDataObject"
          }
        },
        "type": "object"
      },
      "StructuredDataObject": {
        "description": "A structured data object consisting of named properties.",
        "properties": {
          "properties": {
            "description": "The properties for the object. The maximum number of elements is 1000.",
            "items": {
              "$ref": "#/$defs/NamedProperty"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NamedProperty": {
        "description": "A typed name-value pair for structured data. The type of the value should be the same as the registered type for the `name` property in the object definition of `objectType`.",
        "properties": {
          "booleanValue": {
            "type": "boolean"
          },
          "dateValues": {
            "$ref": "#/$defs/DateValues"
          },
          "doubleValues": {
            "$ref": "#/$defs/DoubleValues"
          },
          "enumValues": {
            "$ref": "#/$defs/EnumValues"
          },
          "htmlValues": {
            "$ref": "#/$defs/HtmlValues"
          },
          "integerValues": {
            "$ref": "#/$defs/IntegerValues"
          },
          "name": {
            "description": "The name of the property. This name should correspond to the name of the property that was registered for object definition in the schema. The maximum allowable length for this property is 256 characters.",
            "type": "string"
          },
          "objectValues": {
            "$ref": "#/$defs/ObjectValues"
          },
          "textValues": {
            "$ref": "#/$defs/TextValues"
          },
          "timestampValues": {
            "$ref": "#/$defs/TimestampValues"
          }
        },
        "type": "object"
      },
      "DateValues": {
        "description": "List of date values.",
        "properties": {
          "values": {
            "items": {
              "$ref": "#/$defs/Date"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Date": {
        "description": "Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the [Proleptic Gregorian Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The date must be a valid calendar date between the year 1 and 9999.",
        "properties": {
          "day": {
            "description": "Day of month. Must be from 1 to 31 and valid for the year and month.",
            "format": "int32",
            "type": "integer"
          },
          "month": {
            "description": "Month of date. Must be from 1 to 12.",
            "format": "int32",
            "type": "integer"
          },
          "year": {
            "description": "Year of date. Must be from 1 to 9999.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DoubleValues": {
        "description": "List of double values.",
        "properties": {
          "values": {
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnumValues": {
        "description": "List of enum values.",
        "properties": {
          "values": {
            "description": "The maximum allowable length for string values is 32 characters.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HtmlValues": {
        "description": "List of html values.",
        "properties": {
          "values": {
            "description": "The maximum allowable length for html values is 2048 characters.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "IntegerValues": {
        "description": "List of integer values.",
        "properties": {
          "values": {
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ObjectValues": {
        "description": "List of object values.",
        "properties": {
          "values": {
            "items": {
              "$ref": "#/$defs/StructuredDataObject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TextValues": {
        "description": "List of text values.",
        "properties": {
          "values": {
            "description": "The maximum allowable length for text values is 2048 characters.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TimestampValues": {
        "description": "List of timestamp values.",
        "properties": {
          "values": {
            "items": {
              "format": "google-datetime",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudsearch.googleapis.com//v1/indexing/{name}:index{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
