{
  "name": "vectortile_terraintiles_get",
  "description": "Gets a terrain tile by its tile resource name.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. Resource name of the tile. The tile resource name is prefixed by its collection ID `terraintiles/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terraintiles/@1,2,3z`."
      },
      "altitudePrecisionCentimeters": {
        "type": "integer",
        "description": "The precision of terrain altitudes in centimeters. Possible values: between 1 (cm level precision) and 1,000,000 (10-kilometer level precision)."
      },
      "clientInfo.apiClient": {
        "type": "string",
        "description": "API client name and version. For example, the SDK calling the API. The exact format is up to the client."
      },
      "clientInfo.applicationId": {
        "type": "string",
        "description": "Application ID, such as the package name on Android and the bundle identifier on iOS platforms."
      },
      "clientInfo.applicationVersion": {
        "type": "string",
        "description": "Application version number, such as \"1.2.3\". The exact format is application-dependent."
      },
      "clientInfo.deviceModel": {
        "type": "string",
        "description": "Device model as reported by the device. The exact format is platform-dependent."
      },
      "clientInfo.operatingSystem": {
        "type": "string",
        "description": "Operating system name and version as reported by the OS. For example, \"Mac OS X 10.10.4\". The exact format is platform-dependent."
      },
      "clientInfo.platform": {
        "enum": [
          "PLATFORM_UNSPECIFIED",
          "EDITOR",
          "MAC_OS",
          "WINDOWS",
          "LINUX",
          "ANDROID",
          "IOS",
          "WEB_GL"
        ],
        "type": "string",
        "description": "Platform where the application is running."
      },
      "clientInfo.userId": {
        "type": "string",
        "description": "Required. A client-generated user ID. The ID should be generated and persisted during the first user session or whenever a pre-existing ID is not found. The exact format is up to the client. This must be non-empty in a GetFeatureTileRequest (whether via the header or GetFeatureTileRequest.client_info)."
      },
      "maxElevationResolutionCells": {
        "type": "integer",
        "description": "The maximum allowed resolution for the returned elevation heightmap. Possible values: between 1 and 1024 (and not less than min_elevation_resolution_cells). Over-sized heightmaps will be non-uniformly down-sampled such that each edge is no longer than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 100px (width) * 30px (height) max_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)"
      },
      "minElevationResolutionCells": {
        "type": "integer",
        "description": " api-linter: core::0131::request-unknown-fields=disabled aip.dev/not-precedent: Maintaining existing request parameter pattern. The minimum allowed resolution for the returned elevation heightmap. Possible values: between 0 and 1024 (and not more than max_elevation_resolution_cells). Zero is supported for backward compatibility. Under-sized heightmaps will be non-uniformly up-sampled such that each edge is no shorter than this value. Non-uniformity is chosen to maximise the amount of preserved data. For example: Original resolution: 30px (width) * 10px (height) min_elevation_resolution: 30 New resolution: 30px (width) * 30px (height)"
      },
      "terrainFormats": {
        "items": {
          "enum": [
            "TERRAIN_FORMAT_UNKNOWN",
            "FIRST_DERIVATIVE",
            "SECOND_DERIVATIVE"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "Terrain formats that the client understands."
      },
      "enableModeledVolumes": {
        "type": "boolean",
        "description": "Flag indicating whether 3D building models should be enabled. If this is set structures will be returned as 3D modeled volumes rather than 2.5D extruded areas where possible."
      },
      "enablePoliticalFeatures": {
        "type": "boolean",
        "description": "Flag indicating whether political features should be returned."
      },
      "enablePrivateRoads": {
        "type": "boolean",
        "description": "Flag indicating whether the returned tile will contain road features that are marked private. Private roads are indicated by the Feature.segment_info.road_info.is_private field."
      },
      "enableUnclippedBuildings": {
        "type": "boolean",
        "description": "Flag indicating whether unclipped buildings should be returned. If this is set, building render ops will extend beyond the tile boundary. Buildings will only be returned on the tile that contains their centroid."
      },
      "languageCode": {
        "type": "string",
        "description": "Required. The BCP-47 language code corresponding to the language in which the name was requested, such as \"en-US\" or \"sr-Latn\". For more information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier."
      },
      "regionCode": {
        "type": "string",
        "description": "Required. The Unicode country/region code (CLDR) of the location from which the request is coming from, such as \"US\" and \"419\". For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://vectortile.googleapis.com//v1/{name}{?altitudePrecisionCentimeters,clientInfo.apiClient,clientInfo.applicationId,clientInfo.applicationVersion,clientInfo.deviceModel,clientInfo.operatingSystem,clientInfo.platform,clientInfo.userId,maxElevationResolutionCells,minElevationResolutionCells,terrainFormats,enableModeledVolumes,enablePoliticalFeatures,enablePrivateRoads,enableUnclippedBuildings,languageCode,regionCode,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A tile containing information about the terrain located in the region it covers.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**coordinates**: Global tile coordinates. Global tile coordinates reference a specific tile on the map at a specific zoom level. The origin of this coordinate system is always at the northwest corner of the map, with x values increasing from west to east and y values increasing from north to south. Tiles are indexed using x, y coordinates from that origin. The zoom level containing the entire world in a tile is 0, and it increases as you zoom in. Zoom level n + 1 will contain 4 times as many tiles as zoom level n. The zoom level controls the level of detail of the data that is returned. In particular, this affects the set of feature types returned, their density, and geometry simplification. The exact tile contents may change over time, but care will be taken to keep supporting the most important use cases. For example, zoom level 15 shows roads for orientation and planning in the local neighborhood and zoom level 17 shows buildings to give users on foot a sense of situational awareness.",
              {
                "$ul": [
                  "**x**: Required. The x coordinate.",
                  "**y**: Required. The y coordinate.",
                  "**zoom**: Required. The Google Maps API zoom level."
                ]
              }
            ],
            [
              "**firstDerivative**: A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each point within the grid represents the altitude in meters above average sea level at that location within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+ | | | N | | ^ | | | | | W <-----> E | | | | | v | | S | | | +-----------------+ rows[n].a[0] rows[n].a[m] Rather than storing the altitudes directly, we store the diffs between them as integers at some requested level of precision to take advantage of integer packing. The actual altitude values a[] can be reconstructed using the scale and each row's first_altitude and altitude_diff fields. More details in go/elevation-encoding-options-for-enduro under \"Recommended implementation\".",
              {
                "$ul": [
                  "**altitudeMultiplier**: A multiplier applied to the altitude fields below to extract the actual altitudes in meters from the elevation grid.",
                  "**rows**: Rows of points containing altitude data making up the elevation grid. Each row is the same length. Rows are ordered from north to south. E.g: rows[0] is the north-most row, and rows[n] is the south-most row."
                ]
              }
            ],
            "**name**: Resource name of the tile. The tile resource name is prefixed by its collection ID `terrain/` followed by the resource ID, which encodes the tile's global x and y coordinates and zoom level as `@,,z`. For example, `terrain/@1,2,3z`.",
            [
              "**secondDerivative**: A packed representation of a 2D grid of uniformly spaced points containing elevation data. Each point within the grid represents the altitude in meters above average sea level at that location within the tile. Elevations provided are (generally) relative to the EGM96 geoid, however some areas will be relative to NAVD88. EGM96 and NAVD88 are off by no more than 2 meters. The grid is oriented north-west to south-east, as illustrated: rows[0].a[0] rows[0].a[m] +-----------------+ | | | N | | ^ | | | | | W <-----> E | | | | | v | | S | | | +-----------------+ rows[n].a[0] rows[n].a[m] Rather than storing the altitudes directly, we store the diffs of the diffs between them as integers at some requested level of precision to take advantage of integer packing. Note that the data is packed in such a way that is fast to decode in Unity and that further optimizes wire size.",
              {
                "$ul": [
                  "**altitudeMultiplier**: A multiplier applied to the elements in the encoded data to extract the actual altitudes in meters.",
                  "**columnCount**: The number of columns included in the encoded elevation data (i.e. the horizontal resolution of the grid).",
                  "**encodedData**: A stream of elements each representing a point on the tile running across each row from left to right, top to bottom. There will be precisely horizontal_resolution * vertical_resolution elements in the stream. The elements are not the heights, rather the second order derivative of the values one would expect in a stream of height data. Each element is a varint with the following encoding: ------------------------------------------------------------------------| | Head Nibble | ------------------------------------------------------------------------| | Bit 0 | Bit 1 | Bits 2-3 | | Terminator| Sign (1=neg) | Least significant 2 bits of absolute error | ------------------------------------------------------------------------| | Tail Nibble #1 | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------| | ... | Tail Nibble #n | ------------------------------------------------------------------------| | Bit 0 | Bit 1-3 | | Terminator| Least significant 3 bits of absolute error | ------------------------------------------------------------------------|",
                  "**rowCount**: The number of rows included in the encoded elevation data (i.e. the vertical resolution of the grid)."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
