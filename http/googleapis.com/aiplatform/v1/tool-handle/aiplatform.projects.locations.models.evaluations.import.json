{
  "name": "aiplatform_projects_locations_models_evaluations_import",
  "description": "Imports an externally generated ModelEvaluation.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the parent model resource. Format: `projects/{project}/locations/{location}/models/{model}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1ImportModelEvaluationRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1ImportModelEvaluationRequest": {
        "description": "Request message for ModelService.ImportModelEvaluation",
        "properties": {
          "modelEvaluation": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelEvaluation"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelEvaluation": {
        "description": "A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.",
        "properties": {
          "annotationSchemaUri": {
            "description": "Points to a YAML file stored on Google Cloud Storage describing EvaluatedDataItemView.predictions, EvaluatedDataItemView.ground_truths, EvaluatedAnnotation.predictions, and EvaluatedAnnotation.ground_truths. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). This field is not populated if there are neither EvaluatedDataItemViews nor EvaluatedAnnotations under this ModelEvaluation.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Timestamp when this ModelEvaluation was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dataItemSchemaUri": {
            "description": "Points to a YAML file stored on Google Cloud Storage describing EvaluatedDataItemView.data_item_payload and EvaluatedAnnotation.data_item_payload. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). This field is not populated if there are neither EvaluatedDataItemViews nor EvaluatedAnnotations under this ModelEvaluation.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the ModelEvaluation.",
            "type": "string"
          },
          "explanationSpecs": {
            "description": "Describes the values of ExplanationSpec that are used for explaining the predicted values on the evaluated data.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ModelEvaluationModelEvaluationExplanationSpec"
            },
            "type": "array"
          },
          "metadata": {
            "description": "The metadata of the ModelEvaluation. For the ModelEvaluation uploaded from Managed Pipeline, metadata contains a structured value with keys of \"pipeline_job_id\", \"evaluation_dataset_type\", \"evaluation_dataset_path\", \"row_based_metrics_path\"."
          },
          "metrics": {
            "description": "Evaluation metrics of the Model. The schema of the metrics is stored in metrics_schema_uri"
          },
          "metricsSchemaUri": {
            "description": "Points to a YAML file stored on Google Cloud Storage describing the metrics of this ModelEvaluation. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).",
            "type": "string"
          },
          "modelExplanation": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelExplanation"
          },
          "name": {
            "description": "Output only. The resource name of the ModelEvaluation.",
            "readOnly": true,
            "type": "string"
          },
          "sliceDimensions": {
            "description": "All possible dimensions of ModelEvaluationSlices. The dimensions can be used as the filter of the ModelService.ListModelEvaluationSlices request, in the form of `slice.dimension = `.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelEvaluationModelEvaluationExplanationSpec": {
        "properties": {
          "explanationSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationSpec"
          },
          "explanationType": {
            "description": "Explanation type. For AutoML Image Classification models, possible values are: * `image-integrated-gradients` * `image-xrai`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationSpec": {
        "description": "Specification of Model explanation.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationMetadata"
          },
          "parameters": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationParameters"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationMetadata": {
        "description": "Metadata describing the Model's input and output for explanation.",
        "properties": {
          "featureAttributionsSchemaUri": {
            "description": "Points to a YAML file stored on Google Cloud Storage describing the format of the feature attributions. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML tabular Models always have this field populated by Vertex AI. Note: The URI given on output may be different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
            "type": "string"
          },
          "inputs": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationMetadataInputMetadata"
            },
            "description": "Required. Map from feature names to feature input metadata. Keys are the name of the features. Values are the specification of the feature. An empty InputMetadata is valid. It describes a text feature which has the name specified as the key in ExplanationMetadata.inputs. The baseline of the empty feature is chosen by Vertex AI. For Vertex AI-provided Tensorflow images, the key can be any friendly name of the feature. Once specified, featureAttributions are keyed by this key (if not grouped with another feature). For custom images, the key must match with the key in instance.",
            "type": "object"
          },
          "latentSpaceSource": {
            "description": "Name of the source to generate embeddings for example based explanations.",
            "type": "string"
          },
          "outputs": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationMetadataOutputMetadata"
            },
            "description": "Required. Map from output names to output metadata. For Vertex AI-provided Tensorflow images, keys can be any user defined string that consists of any UTF-8 characters. For custom images, keys are the name of the output field in the prediction to be explained. Currently only one key is allowed.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationMetadataInputMetadata": {
        "description": "Metadata of the input of a feature. Fields other than InputMetadata.input_baselines are applicable only for Models that are using Vertex AI-provided images for Tensorflow.",
        "properties": {
          "denseShapeTensorName": {
            "description": "Specifies the shape of the values of the input if the input is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.",
            "type": "string"
          },
          "encodedBaselines": {
            "description": "A list of baselines for the encoded tensor. The shape of each baseline should match the shape of the encoded tensor. If a scalar is provided, Vertex AI broadcasts to the same shape as the encoded tensor.",
            "items": {},
            "type": "array"
          },
          "encodedTensorName": {
            "description": "Encoded tensor is a transformation of the input tensor. Must be provided if choosing Integrated Gradients attribution or XRAI attribution and the input tensor is not differentiable. An encoded tensor is generated if the input tensor is encoded by a lookup table.",
            "type": "string"
          },
          "encoding": {
            "description": "Defines how the feature is encoded into the input tensor. Defaults to IDENTITY.",
            "enum": [
              "ENCODING_UNSPECIFIED",
              "IDENTITY",
              "BAG_OF_FEATURES",
              "BAG_OF_FEATURES_SPARSE",
              "INDICATOR",
              "COMBINED_EMBEDDING",
              "CONCAT_EMBEDDING"
            ],
            "type": "string"
          },
          "featureValueDomain": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataFeatureValueDomain"
          },
          "groupName": {
            "description": "Name of the group that the input belongs to. Features with the same group name will be treated as one feature when computing attributions. Features grouped together can have different shapes in value. If provided, there will be one single attribution generated in Attribution.feature_attributions, keyed by the group name.",
            "type": "string"
          },
          "indexFeatureMapping": {
            "description": "A list of feature names for each index in the input tensor. Required when the input InputMetadata.encoding is BAG_OF_FEATURES, BAG_OF_FEATURES_SPARSE, INDICATOR.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "indicesTensorName": {
            "description": "Specifies the index of the values of the input tensor. Required when the input tensor is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.",
            "type": "string"
          },
          "inputBaselines": {
            "description": "Baseline inputs for this feature. If no baseline is specified, Vertex AI chooses the baseline for this feature. If multiple baselines are specified, Vertex AI returns the average attributions across them in Attribution.feature_attributions. For Vertex AI-provided Tensorflow images (both 1.x and 2.x), the shape of each baseline must match the shape of the input tensor. If a scalar is provided, we broadcast to the same shape as the input tensor. For custom images, the element of the baselines must be in the same format as the feature's input in the instance[]. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.",
            "items": {},
            "type": "array"
          },
          "inputTensorName": {
            "description": "Name of the input tensor for this feature. Required and is only applicable to Vertex AI-provided images for Tensorflow.",
            "type": "string"
          },
          "modality": {
            "description": "Modality of the feature. Valid values are: numeric, image. Defaults to numeric.",
            "type": "string"
          },
          "visualization": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationMetadataInputMetadataFeatureValueDomain": {
        "description": "Domain details of the input feature value. Provides numeric information about the feature, such as its range (min, max). If the feature has been pre-processed, for example with z-scoring, then it provides information about how to recover the original feature. For example, if the input feature is an image and it has been pre-processed to obtain 0-mean and stddev = 1 values, then original_mean, and original_stddev refer to the mean and stddev of the original feature (e.g. image tensor) from which input feature (with mean = 0 and stddev = 1) was obtained.",
        "properties": {
          "maxValue": {
            "description": "The maximum permissible value for this feature.",
            "format": "float",
            "type": "number"
          },
          "minValue": {
            "description": "The minimum permissible value for this feature.",
            "format": "float",
            "type": "number"
          },
          "originalMean": {
            "description": "If this input feature has been normalized to a mean value of 0, the original_mean specifies the mean value of the domain prior to normalization.",
            "format": "float",
            "type": "number"
          },
          "originalStddev": {
            "description": "If this input feature has been normalized to a standard deviation of 1.0, the original_stddev specifies the standard deviation of the domain prior to normalization.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization": {
        "description": "Visualization configurations for image explanation.",
        "properties": {
          "clipPercentLowerbound": {
            "description": "Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.",
            "format": "float",
            "type": "number"
          },
          "clipPercentUpperbound": {
            "description": "Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.",
            "format": "float",
            "type": "number"
          },
          "colorMap": {
            "description": "The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.",
            "enum": [
              "COLOR_MAP_UNSPECIFIED",
              "PINK_GREEN",
              "VIRIDIS",
              "RED",
              "GREEN",
              "RED_GREEN",
              "PINK_WHITE_GREEN"
            ],
            "type": "string"
          },
          "overlayType": {
            "description": "How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.",
            "enum": [
              "OVERLAY_TYPE_UNSPECIFIED",
              "NONE",
              "ORIGINAL",
              "GRAYSCALE",
              "MASK_BLACK"
            ],
            "type": "string"
          },
          "polarity": {
            "description": "Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.",
            "enum": [
              "POLARITY_UNSPECIFIED",
              "POSITIVE",
              "NEGATIVE",
              "BOTH"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "PIXELS",
              "OUTLINES"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationMetadataOutputMetadata": {
        "description": "Metadata of the prediction output to be explained.",
        "properties": {
          "displayNameMappingKey": {
            "description": "Specify a field name in the prediction to look for the display name. Use this if the prediction contains the display names for the outputs. The display names in the prediction must have the same shape of the outputs, so that it can be located by Attribution.output_index for a specific output.",
            "type": "string"
          },
          "indexDisplayNameMapping": {
            "description": "Static mapping between the index and display name. Use this if the outputs are a deterministic n-dimensional array, e.g. a list of scores of all the classes in a pre-defined order for a multi-classification Model. It's not feasible if the outputs are non-deterministic, e.g. the Model produces top-k classes or sort the outputs by their values. The shape of the value must be an n-dimensional array of strings. The number of dimensions must match that of the outputs to be explained. The Attribution.output_display_name is populated by locating in the mapping with Attribution.output_index."
          },
          "outputTensorName": {
            "description": "Name of the output tensor. Required and is only applicable to Vertex AI provided images for Tensorflow.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExplanationParameters": {
        "description": "Parameters to configure explaining for Model's predictions.",
        "properties": {
          "examples": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Examples"
          },
          "integratedGradientsAttribution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1IntegratedGradientsAttribution"
          },
          "outputIndices": {
            "description": "If populated, only returns attributions that have output_index contained in output_indices. It must be an ndarray of integers, with the same shape of the output it's explaining. If not populated, returns attributions for top_k indices of outputs. If neither top_k nor output_indices is populated, returns the argmax index of the outputs. Only applicable to Models that predict multiple outputs (e,g, multi-class Models that predict multiple classes).",
            "items": {},
            "type": "array"
          },
          "sampledShapleyAttribution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1SampledShapleyAttribution"
          },
          "topK": {
            "description": "If populated, returns attributions for top K indices of outputs (defaults to 1). Only applies to Models that predicts more than one outputs (e,g, multi-class Models). When set to -1, returns explanations for all outputs.",
            "format": "int32",
            "type": "integer"
          },
          "xraiAttribution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1XraiAttribution"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Examples": {
        "description": "Example-based explainability that returns the nearest neighbors from the provided dataset.",
        "properties": {
          "exampleGcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ExamplesExampleGcsSource"
          },
          "nearestNeighborSearchConfig": {
            "description": "The full configuration for the generated index, the semantics are the same as metadata and should match [NearestNeighborSearchConfig](https://cloud.google.com/vertex-ai/docs/explainable-ai/configuring-explanations-example-based#nearest-neighbor-search-config)."
          },
          "neighborCount": {
            "description": "The number of neighbors to return when querying for examples.",
            "format": "int32",
            "type": "integer"
          },
          "presets": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Presets"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ExamplesExampleGcsSource": {
        "description": "The Cloud Storage input instances.",
        "properties": {
          "dataFormat": {
            "description": "The format in which instances are given, if not specified, assume it's JSONL format. Currently only JSONL format is supported.",
            "enum": [
              "DATA_FORMAT_UNSPECIFIED",
              "JSONL"
            ],
            "type": "string"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1GcsSource"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1GcsSource": {
        "description": "The Google Cloud Storage location for the input content.",
        "properties": {
          "uris": {
            "description": "Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Presets": {
        "description": "Preset configuration for example-based explanations",
        "properties": {
          "modality": {
            "description": "The modality of the uploaded model, which automatically configures the distance measurement and feature normalization for the underlying example index and queries. If your model does not precisely fit one of these types, it is okay to choose the closest type.",
            "enum": [
              "MODALITY_UNSPECIFIED",
              "IMAGE",
              "TEXT",
              "TABULAR"
            ],
            "type": "string"
          },
          "query": {
            "description": "Preset option controlling parameters for speed-precision trade-off when querying for examples. If omitted, defaults to `PRECISE`.",
            "enum": [
              "PRECISE",
              "FAST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1IntegratedGradientsAttribution": {
        "description": "An attribution method that computes the Aumann-Shapley value taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365",
        "properties": {
          "blurBaselineConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1BlurBaselineConfig"
          },
          "smoothGradConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1SmoothGradConfig"
          },
          "stepCount": {
            "description": "Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is within the desired error range. Valid range of its value is [1, 100], inclusively.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1BlurBaselineConfig": {
        "description": "Config for blur baseline. When enabled, a linear path from the maximally blurred image to the input image is created. Using a blurred baseline instead of zero (black image) is motivated by the BlurIG approach explained here: https://arxiv.org/abs/2004.03383",
        "properties": {
          "maxBlurSigma": {
            "description": "The standard deviation of the blur kernel for the blurred baseline. The same blurring parameter is used for both the height and the width dimension. If not set, the method defaults to the zero (i.e. black for images) baseline.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1SmoothGradConfig": {
        "description": "Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help improve the computed gradients. Refer to this paper for more details: https://arxiv.org/pdf/1706.03825.pdf",
        "properties": {
          "featureNoiseSigma": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FeatureNoiseSigma"
          },
          "noiseSigma": {
            "description": "This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.",
            "format": "float",
            "type": "number"
          },
          "noisySampleCount": {
            "description": "The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FeatureNoiseSigma": {
        "description": "Noise sigma by features. Noise sigma represents the standard deviation of the gaussian kernel that will be used to add noise to interpolated inputs prior to computing gradients.",
        "properties": {
          "noiseSigma": {
            "description": "Noise sigma per feature. No noise is added to features that are not set.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1FeatureNoiseSigmaNoiseSigmaForFeature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FeatureNoiseSigmaNoiseSigmaForFeature": {
        "description": "Noise sigma for a single feature.",
        "properties": {
          "name": {
            "description": "The name of the input feature for which noise sigma is provided. The features are defined in explanation metadata inputs.",
            "type": "string"
          },
          "sigma": {
            "description": "This represents the standard deviation of the Gaussian kernel that will be used to add noise to the feature prior to computing gradients. Similar to noise_sigma but represents the noise added to the current feature. Defaults to 0.1.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1SampledShapleyAttribution": {
        "description": "An attribution method that approximates Shapley values for features that contribute to the label being predicted. A sampling strategy is used to approximate the value rather than considering all subsets of features.",
        "properties": {
          "pathCount": {
            "description": "Required. The number of feature permutations to consider when approximating the Shapley values. Valid range of its value is [1, 50], inclusively.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1XraiAttribution": {
        "description": "An explanation method that redistributes Integrated Gradients attributions to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 Supported only by image Models.",
        "properties": {
          "blurBaselineConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1BlurBaselineConfig"
          },
          "smoothGradConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1SmoothGradConfig"
          },
          "stepCount": {
            "description": "Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is met within the desired error range. Valid range of its value is [1, 100], inclusively.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelExplanation": {
        "description": "Aggregated explanation metrics for a Model over a set of instances.",
        "properties": {
          "meanAttributions": {
            "description": "Output only. Aggregated attributions explaining the Model's prediction outputs over the set of instances. The attributions are grouped by outputs. For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item. Attribution.output_index can be used to identify which output this attribution is explaining. The baselineOutputValue, instanceOutputValue and featureAttributions fields are averaged over the test data. NOTE: Currently AutoML tabular classification Models produce only one attribution, which averages attributions over all the classes it predicts. Attribution.approximation_error is not populated.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Attribution"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Attribution": {
        "description": "Attribution that explains a particular prediction output.",
        "properties": {
          "approximationError": {
            "description": "Output only. Error of feature_attributions caused by approximation used in the explanation method. Lower value means more precise attributions. * For Sampled Shapley attribution, increasing path_count might reduce the error. * For Integrated Gradients attribution, increasing step_count might reduce the error. * For XRAI attribution, increasing step_count might reduce the error. See [this introduction](/vertex-ai/docs/explainable-ai/overview) for more information.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "baselineOutputValue": {
            "description": "Output only. Model predicted output if the input instance is constructed from the baselines of all the features defined in ExplanationMetadata.inputs. The field name of the output is determined by the key in ExplanationMetadata.outputs. If the Model's predicted output has multiple dimensions (rank > 1), this is the value in the output located by output_index. If there are multiple baselines, their output values are averaged.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "featureAttributions": {
            "description": "Output only. Attributions of each explained feature. Features are extracted from the prediction instances according to explanation metadata for inputs. The value is a struct, whose keys are the name of the feature. The values are how much the feature in the instance contributed to the predicted result. The format of the value is determined by the feature's input format: * If the feature is a scalar value, the attribution value is a floating number. * If the feature is an array of scalar values, the attribution value is an array. * If the feature is a struct, the attribution value is a struct. The keys in the attribution value struct are the same as the keys in the feature struct. The formats of the values in the attribution struct are determined by the formats of the values in the feature struct. The ExplanationMetadata.feature_attributions_schema_uri field, pointed to by the ExplanationSpec field of the Endpoint.deployed_models object, points to the schema file that describes the features and their attribution values (if it is populated).",
            "readOnly": true
          },
          "instanceOutputValue": {
            "description": "Output only. Model predicted output on the corresponding explanation instance. The field name of the output is determined by the key in ExplanationMetadata.outputs. If the Model predicted output has multiple dimensions, this is the value in the output located by output_index.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "outputDisplayName": {
            "description": "Output only. The display name of the output identified by output_index. For example, the predicted class name by a multi-classification Model. This field is only populated iff the Model predicts display names as a separate field along with the explained output. The predicted display name must has the same shape of the explained output, and can be located using output_index.",
            "readOnly": true,
            "type": "string"
          },
          "outputIndex": {
            "description": "Output only. The index that locates the explained prediction output. If the prediction output is a scalar value, output_index is not populated. If the prediction output has multiple dimensions, the length of the output_index list is the same as the number of dimensions of the output. The i-th element in output_index is the element index of the i-th dimension of the output vector. Indices start from 0.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "readOnly": true,
            "type": "array"
          },
          "outputName": {
            "description": "Output only. Name of the explain output. Specified as the key in ExplanationMetadata.outputs.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{parent}/evaluations:import{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.",
        "**Key properties:**",
        {
          "$ul": [
            "**annotationSchemaUri**: Points to a YAML file stored on Google Cloud Storage describing EvaluatedDataItemView.predictions, EvaluatedDataItemView.ground_truths, EvaluatedAnnotation.predictions, and EvaluatedAnnotation.ground_truths. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). This field is not populated if there are neither EvaluatedDataItemViews nor EvaluatedAnnotations under this ModelEvaluation.",
            "**createTime**: Output only. Timestamp when this ModelEvaluation was created.",
            "**dataItemSchemaUri**: Points to a YAML file stored on Google Cloud Storage describing EvaluatedDataItemView.data_item_payload and EvaluatedAnnotation.data_item_payload. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). This field is not populated if there are neither EvaluatedDataItemViews nor EvaluatedAnnotations under this ModelEvaluation.",
            "**displayName**: The display name of the ModelEvaluation.",
            "**explanationSpecs**: Describes the values of ExplanationSpec that are used for explaining the predicted values on the evaluated data.",
            "**metadata**: The metadata of the ModelEvaluation. For the ModelEvaluation uploaded from Managed Pipeline, metadata contains a structured value with keys of \"pipeline_job_id\", \"evaluation_dataset_type\", \"evaluation_dataset_path\", \"row_based_metrics_path\".",
            "**metrics**: Evaluation metrics of the Model. The schema of the metrics is stored in metrics_schema_uri",
            "**metricsSchemaUri**: Points to a YAML file stored on Google Cloud Storage describing the metrics of this ModelEvaluation. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).",
            [
              "**modelExplanation**: Aggregated explanation metrics for a Model over a set of instances.",
              {
                "$ul": [
                  "**meanAttributions**: Output only. Aggregated attributions explaining the Model's prediction outputs over the set of instances. The attributions are grouped by outputs. For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item. Attribution.output_index can be used to identify which output this attribution is explaining. The baselineOutputValue, instanceOutputValue and featureAttributions fields are averaged over the test data. NOTE: Currently AutoML tabular classification Models produce only one attribution, which averages attributions over all the classes it predicts. Attribution.approximation_error is not populated."
                ]
              }
            ],
            "**name**: Output only. The resource name of the ModelEvaluation.",
            "**sliceDimensions**: All possible dimensions of ModelEvaluationSlices. The dimensions can be used as the filter of the ModelService.ListModelEvaluationSlices request, in the form of `slice.dimension = `."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
