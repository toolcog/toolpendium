{
  "name": "aiplatform_projects_locations_hyperparameterTuningJobs_create",
  "description": "Creates a HyperparameterTuningJob",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the Location to create the HyperparameterTuningJob in. Format: `projects/{project}/locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1HyperparameterTuningJob"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1HyperparameterTuningJob": {
        "description": "Represents a HyperparameterTuningJob. A HyperparameterTuningJob has a Study specification and multiple CustomJobs with identical CustomJob specification.",
        "properties": {
          "createTime": {
            "description": "Output only. Time when the HyperparameterTuningJob was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Required. The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            "type": "string"
          },
          "encryptionSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1EncryptionSpec"
          },
          "endTime": {
            "description": "Output only. Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "type": "object"
          },
          "maxFailedTrialCount": {
            "description": "The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.",
            "format": "int32",
            "type": "integer"
          },
          "maxTrialCount": {
            "description": "Required. The desired total number of Trials.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "Output only. Resource name of the HyperparameterTuningJob.",
            "readOnly": true,
            "type": "string"
          },
          "parallelTrialCount": {
            "description": "Required. The desired number of Trials to run in parallel.",
            "format": "int32",
            "type": "integer"
          },
          "startTime": {
            "description": "Output only. Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of the job.",
            "enum": [
              "JOB_STATE_UNSPECIFIED",
              "JOB_STATE_QUEUED",
              "JOB_STATE_PENDING",
              "JOB_STATE_RUNNING",
              "JOB_STATE_SUCCEEDED",
              "JOB_STATE_FAILED",
              "JOB_STATE_CANCELLING",
              "JOB_STATE_CANCELLED",
              "JOB_STATE_PAUSED",
              "JOB_STATE_EXPIRED",
              "JOB_STATE_UPDATING",
              "JOB_STATE_PARTIALLY_SUCCEEDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "studySpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpec"
          },
          "trialJobSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1CustomJobSpec"
          },
          "trials": {
            "description": "Output only. Trials of the HyperparameterTuningJob.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Trial"
            },
            "readOnly": true,
            "type": "array"
          },
          "updateTime": {
            "description": "Output only. Time when the HyperparameterTuningJob was most recently updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1EncryptionSpec": {
        "description": "Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
        "properties": {
          "kmsKeyName": {
            "description": "Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpec": {
        "description": "Represents specification of a Study.",
        "properties": {
          "algorithm": {
            "description": "The search algorithm specified for the Study.",
            "enum": [
              "ALGORITHM_UNSPECIFIED",
              "GRID_SEARCH",
              "RANDOM_SEARCH"
            ],
            "type": "string"
          },
          "convexAutomatedStoppingSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec"
          },
          "decayCurveStoppingSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecDecayCurveAutomatedStoppingSpec"
          },
          "measurementSelectionType": {
            "description": "Describe which measurement selection type will be used",
            "enum": [
              "MEASUREMENT_SELECTION_TYPE_UNSPECIFIED",
              "LAST_MEASUREMENT",
              "BEST_MEASUREMENT"
            ],
            "type": "string"
          },
          "medianAutomatedStoppingSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecMedianAutomatedStoppingSpec"
          },
          "metrics": {
            "description": "Required. Metric specs for the Study.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecMetricSpec"
            },
            "type": "array"
          },
          "observationNoise": {
            "description": "The observation noise level of the study. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
            "enum": [
              "OBSERVATION_NOISE_UNSPECIFIED",
              "LOW",
              "HIGH"
            ],
            "type": "string"
          },
          "parameters": {
            "description": "Required. The set of parameters to tune.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpec"
            },
            "type": "array"
          },
          "studyStoppingConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecStudyStoppingConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecConvexAutomatedStoppingSpec": {
        "description": "Configuration for ConvexAutomatedStoppingSpec. When there are enough completed trials (configured by min_measurement_count), for pending trials with enough measurements and steps, the policy first computes an overestimate of the objective value at max_num_steps according to the slope of the incomplete objective value curve. No prediction can be made if the curve is completely flat. If the overestimation is worse than the best objective value of the completed trials, this pending trial will be early-stopped, but a last measurement will be added to the pending trial with max_num_steps and predicted objective value from the autoregression model.",
        "properties": {
          "learningRateParameterName": {
            "description": "The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.",
            "type": "string"
          },
          "maxStepCount": {
            "description": "Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. If not defined, it will learn it from the completed trials. When use_steps is false, this field is set to the maximum elapsed seconds.",
            "format": "int64",
            "type": "string"
          },
          "minMeasurementCount": {
            "description": "The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less than min_measurement_count+1 completed trials or pending trials with less than min_measurement_count measurements. If not defined, the default value is 5.",
            "format": "int64",
            "type": "string"
          },
          "minStepCount": {
            "description": "Minimum number of steps for a trial to complete. Trials which do not have a measurement with step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed seconds.",
            "format": "int64",
            "type": "string"
          },
          "updateAllStoppedTrials": {
            "description": "ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped using a newly trained auto-regressive model. When this flag is set to True, all stopped trials from the beginning are potentially updated in terms of their `final_measurement`. Also, note that the training logic of autoregressive models is different in this case. Enabling this option has shown better results and this may be the default option in the future.",
            "type": "boolean"
          },
          "useElapsedDuration": {
            "description": "This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_elapsed_duration==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecDecayCurveAutomatedStoppingSpec": {
        "description": "The decay curve automated stopping rule builds a Gaussian Process Regressor to predict the final objective value of a Trial based on the already completed Trials and the intermediate measurements of the current Trial. Early stopping is requested for the current Trial if there is very low probability to exceed the optimal value found so far.",
        "properties": {
          "useElapsedDuration": {
            "description": "True if Measurement.elapsed_duration is used as the x-axis of each Trials Decay Curve. Otherwise, Measurement.step_count will be used as the x-axis.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecMedianAutomatedStoppingSpec": {
        "description": "The median automated stopping rule stops a pending Trial if the Trial's best objective_value is strictly below the median 'performance' of all completed Trials reported up to the Trial's last measurement. Currently, 'performance' refers to the running average of the objective values reported by the Trial in each measurement.",
        "properties": {
          "useElapsedDuration": {
            "description": "True if median automated stopping rule applies on Measurement.elapsed_duration. It means that elapsed_duration field of latest measurement of current Trial is used to compute median objective value for each completed Trials.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecMetricSpec": {
        "description": "Represents a metric to optimize.",
        "properties": {
          "goal": {
            "description": "Required. The optimization goal of the metric.",
            "enum": [
              "GOAL_TYPE_UNSPECIFIED",
              "MAXIMIZE",
              "MINIMIZE"
            ],
            "type": "string"
          },
          "metricId": {
            "description": "Required. The ID of the metric. Must not contain whitespaces and must be unique amongst all MetricSpecs.",
            "type": "string"
          },
          "safetyConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecMetricSpecSafetyMetricConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecMetricSpecSafetyMetricConfig": {
        "description": "Used in safe optimization to specify threshold levels and risk tolerance.",
        "properties": {
          "desiredMinSafeTrialsFraction": {
            "description": "Desired minimum fraction of safe trials (over total number of trials) that should be targeted by the algorithm at any time during the study (best effort). This should be between 0.0 and 1.0 and a value of 0.0 means that there is no minimum and an algorithm proceeds without targeting any specific fraction. A value of 1.0 means that the algorithm attempts to only Suggest safe Trials.",
            "format": "double",
            "type": "number"
          },
          "safetyThreshold": {
            "description": "Safety threshold (boundary value between safe and unsafe). NOTE that if you leave SafetyMetricConfig unset, a default value of 0 will be used.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpec": {
        "description": "Represents a single parameter to optimize.",
        "properties": {
          "categoricalValueSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecCategoricalValueSpec"
          },
          "conditionalParameterSpecs": {
            "description": "A conditional parameter node is active if the parameter's value matches the conditional node's parent_value_condition. If two items in conditional_parameter_specs have the same name, they must have disjoint parent_value_condition.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpec"
            },
            "type": "array"
          },
          "discreteValueSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecDiscreteValueSpec"
          },
          "doubleValueSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecDoubleValueSpec"
          },
          "integerValueSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecIntegerValueSpec"
          },
          "parameterId": {
            "description": "Required. The ID of the parameter. Must not contain whitespaces and must be unique amongst all ParameterSpecs.",
            "type": "string"
          },
          "scaleType": {
            "description": "How the parameter should be scaled. Leave unset for `CATEGORICAL` parameters.",
            "enum": [
              "SCALE_TYPE_UNSPECIFIED",
              "UNIT_LINEAR_SCALE",
              "UNIT_LOG_SCALE",
              "UNIT_REVERSE_LOG_SCALE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecCategoricalValueSpec": {
        "description": "Value specification for a parameter in `CATEGORICAL` type.",
        "properties": {
          "defaultValue": {
            "description": "A default value for a `CATEGORICAL` parameter that is assumed to be a relatively good starting point. Unset value signals that there is no offered starting point. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
            "type": "string"
          },
          "values": {
            "description": "Required. The list of possible categories.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpec": {
        "description": "Represents a parameter spec with condition from its parent parameter.",
        "properties": {
          "parameterSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpec"
          },
          "parentCategoricalValues": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpecCategoricalValueCondition"
          },
          "parentDiscreteValues": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpecDiscreteValueCondition"
          },
          "parentIntValues": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpecIntValueCondition"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpecCategoricalValueCondition": {
        "description": "Represents the spec to match categorical values from parent parameter.",
        "properties": {
          "values": {
            "description": "Required. Matches values of the parent parameter of 'CATEGORICAL' type. All values must exist in `categorical_value_spec` of parent parameter.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpecDiscreteValueCondition": {
        "description": "Represents the spec to match discrete values from parent parameter.",
        "properties": {
          "values": {
            "description": "Required. Matches values of the parent parameter of 'DISCRETE' type. All values must exist in `discrete_value_spec` of parent parameter. The Epsilon of the value matching is 1e-10.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecConditionalParameterSpecIntValueCondition": {
        "description": "Represents the spec to match integer values from parent parameter.",
        "properties": {
          "values": {
            "description": "Required. Matches values of the parent parameter of 'INTEGER' type. All values must lie in `integer_value_spec` of parent parameter.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecDiscreteValueSpec": {
        "description": "Value specification for a parameter in `DISCRETE` type.",
        "properties": {
          "defaultValue": {
            "description": "A default value for a `DISCRETE` parameter that is assumed to be a relatively good starting point. Unset value signals that there is no offered starting point. It automatically rounds to the nearest feasible discrete point. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
            "format": "double",
            "type": "number"
          },
          "values": {
            "description": "Required. A list of possible values. The list should be in increasing order and at least 1e-10 apart. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecDoubleValueSpec": {
        "description": "Value specification for a parameter in `DOUBLE` type.",
        "properties": {
          "defaultValue": {
            "description": "A default value for a `DOUBLE` parameter that is assumed to be a relatively good starting point. Unset value signals that there is no offered starting point. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
            "format": "double",
            "type": "number"
          },
          "maxValue": {
            "description": "Required. Inclusive maximum value of the parameter.",
            "format": "double",
            "type": "number"
          },
          "minValue": {
            "description": "Required. Inclusive minimum value of the parameter.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecParameterSpecIntegerValueSpec": {
        "description": "Value specification for a parameter in `INTEGER` type.",
        "properties": {
          "defaultValue": {
            "description": "A default value for an `INTEGER` parameter that is assumed to be a relatively good starting point. Unset value signals that there is no offered starting point. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
            "format": "int64",
            "type": "string"
          },
          "maxValue": {
            "description": "Required. Inclusive maximum value of the parameter.",
            "format": "int64",
            "type": "string"
          },
          "minValue": {
            "description": "Required. Inclusive minimum value of the parameter.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudySpecStudyStoppingConfig": {
        "description": "The configuration (stopping conditions) for automated stopping of a Study. Conditions include trial budgets, time budgets, and convergence detection.",
        "properties": {
          "maxDurationNoProgress": {
            "description": "If the objective value has not improved for this much time, stop the study. WARNING: Effective only for single-objective studies.",
            "format": "google-duration",
            "type": "string"
          },
          "maxNumTrials": {
            "description": "If there are more than this many trials, stop the study.",
            "format": "int32",
            "type": "integer"
          },
          "maxNumTrialsNoProgress": {
            "description": "If the objective value has not improved for this many consecutive trials, stop the study. WARNING: Effective only for single-objective studies.",
            "format": "int32",
            "type": "integer"
          },
          "maximumRuntimeConstraint": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudyTimeConstraint"
          },
          "minNumTrials": {
            "description": "If there are fewer than this many COMPLETED trials, do not stop the study.",
            "format": "int32",
            "type": "integer"
          },
          "minimumRuntimeConstraint": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1StudyTimeConstraint"
          },
          "shouldStopAsap": {
            "description": "If true, a Study enters STOPPING_ASAP whenever it would normally enters STOPPING state. The bottom line is: set to true if you want to interrupt on-going evaluations of Trials as soon as the study stopping condition is met. (Please see Study.State documentation for the source of truth).",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1StudyTimeConstraint": {
        "description": "Time-based Constraint for Study",
        "properties": {
          "endTime": {
            "description": "Compares the wallclock time to this time. Must use UTC timezone.",
            "format": "google-datetime",
            "type": "string"
          },
          "maxDuration": {
            "description": "Counts the wallclock time passed since the creation of this Study.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1CustomJobSpec": {
        "description": "Represents the spec of a CustomJob.",
        "properties": {
          "baseOutputDirectory": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1GcsDestination"
          },
          "enableDashboardAccess": {
            "description": "Optional. Whether you want Vertex AI to enable access to the customized dashboard in training chief container. If set to `true`, you can access the dashboard at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).",
            "type": "boolean"
          },
          "enableWebAccess": {
            "description": "Optional. Whether you want Vertex AI to enable [interactive shell access](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).",
            "type": "boolean"
          },
          "experiment": {
            "description": "Optional. The Experiment associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}`",
            "type": "string"
          },
          "experimentRun": {
            "description": "Optional. The Experiment Run associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}-{experiment-run-name}`",
            "type": "string"
          },
          "models": {
            "description": "Optional. The name of the Model resources for which to generate a mapping to artifact URIs. Applicable only to some of the Google-provided custom jobs. Format: `projects/{project}/locations/{location}/models/{model}` In order to retrieve a specific version of the model, also provide the version ID or version alias. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` If no version ID or alias is specified, the \"default\" version will be returned. The \"default\" version alias is created for the first version of the model, and can be moved to other versions later on. There will be exactly one default version.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "network": {
            "description": "Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the job is not peered with any network.",
            "type": "string"
          },
          "protectedArtifactLocationId": {
            "description": "The ID of the location to store protected artifacts. e.g. us-central1. Populate only when the location is different than CustomJob location. List of supported locations: https://cloud.google.com/vertex-ai/docs/general/locations",
            "type": "string"
          },
          "reservedIpRanges": {
            "description": "Optional. A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "scheduling": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Scheduling"
          },
          "serviceAccount": {
            "description": "Specifies the service account for workload run-as account. Users submitting jobs must have act-as permission on this run-as account. If unspecified, the [Vertex AI Custom Code Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) for the CustomJob's project is used.",
            "type": "string"
          },
          "tensorboard": {
            "description": "Optional. The name of a Vertex AI Tensorboard resource to which this CustomJob will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`",
            "type": "string"
          },
          "workerPoolSpecs": {
            "description": "Required. The spec of the worker pools including machine type and Docker image. All worker pools except the first one are optional and can be skipped by providing an empty value.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1WorkerPoolSpec"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1GcsDestination": {
        "description": "The Google Cloud Storage location where the output is to be written to.",
        "properties": {
          "outputUriPrefix": {
            "description": "Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Scheduling": {
        "description": "All parameters related to queuing and scheduling of custom jobs.",
        "properties": {
          "disableRetries": {
            "description": "Optional. Indicates if the job should retry for internal errors after the job starts running. If true, overrides `Scheduling.restart_job_on_worker_restart` to false.",
            "type": "boolean"
          },
          "restartJobOnWorkerRestart": {
            "description": "Restarts the entire CustomJob if a worker gets restarted. This feature can be used by distributed training jobs that are not resilient to workers leaving and joining a job.",
            "type": "boolean"
          },
          "timeout": {
            "description": "The maximum job running time. The default is 7 days.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1WorkerPoolSpec": {
        "description": "Represents the spec of a worker pool in a job.",
        "properties": {
          "containerSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ContainerSpec"
          },
          "diskSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1DiskSpec"
          },
          "machineSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1MachineSpec"
          },
          "nfsMounts": {
            "description": "Optional. List of NFS mount spec.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1NfsMount"
            },
            "type": "array"
          },
          "pythonPackageSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1PythonPackageSpec"
          },
          "replicaCount": {
            "description": "Optional. The number of worker replicas to use for this worker pool.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ContainerSpec": {
        "description": "The spec of a Container.",
        "properties": {
          "args": {
            "description": "The arguments to be passed when starting the container.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "command": {
            "description": "The command to be invoked when the container is started. It overrides the entrypoint instruction in Dockerfile when provided.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "env": {
            "description": "Environment variables to be passed to the container. Maximum limit is 100.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1EnvVar"
            },
            "type": "array"
          },
          "imageUri": {
            "description": "Required. The URI of a container image in the Container Registry that is to be run on each worker replica.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1EnvVar": {
        "description": "Represents an environment variable present in a Container or Python Module.",
        "properties": {
          "name": {
            "description": "Required. Name of the environment variable. Must be a valid C identifier.",
            "type": "string"
          },
          "value": {
            "description": "Required. Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1DiskSpec": {
        "description": "Represents the spec of disk options.",
        "properties": {
          "bootDiskSizeGb": {
            "description": "Size in GB of the boot disk (default is 100GB).",
            "format": "int32",
            "type": "integer"
          },
          "bootDiskType": {
            "description": "Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1MachineSpec": {
        "description": "Specification of a single machine.",
        "properties": {
          "acceleratorCount": {
            "description": "The number of accelerators to attach to the machine.",
            "format": "int32",
            "type": "integer"
          },
          "acceleratorType": {
            "description": "Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.",
            "enum": [
              "ACCELERATOR_TYPE_UNSPECIFIED",
              "NVIDIA_TESLA_K80",
              "NVIDIA_TESLA_P100",
              "NVIDIA_TESLA_V100",
              "NVIDIA_TESLA_P4",
              "NVIDIA_TESLA_T4",
              "NVIDIA_TESLA_A100",
              "NVIDIA_A100_80GB",
              "NVIDIA_L4",
              "NVIDIA_H100_80GB",
              "TPU_V2",
              "TPU_V3",
              "TPU_V4_POD"
            ],
            "type": "string"
          },
          "machineType": {
            "description": "Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.",
            "type": "string"
          },
          "tpuTopology": {
            "description": "Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\").",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1NfsMount": {
        "description": "Represents a mount configuration for Network File System (NFS) to mount.",
        "properties": {
          "mountPoint": {
            "description": "Required. Destination mount path. The NFS will be mounted for the user under /mnt/nfs/",
            "type": "string"
          },
          "path": {
            "description": "Required. Source path exported from NFS server. Has to start with '/', and combined with the ip address, it indicates the source mount path in the form of `server:path`",
            "type": "string"
          },
          "server": {
            "description": "Required. IP address of the NFS server.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1PythonPackageSpec": {
        "description": "The spec of a Python packaged code.",
        "properties": {
          "args": {
            "description": "Command line arguments to be passed to the Python task.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "env": {
            "description": "Environment variables to be passed to the python module. Maximum limit is 100.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1EnvVar"
            },
            "type": "array"
          },
          "executorImageUri": {
            "description": "Required. The URI of a container image in Artifact Registry that will run the provided Python package. Vertex AI provides a wide range of executor images with pre-installed packages to meet users' various use cases. See the list of [pre-built containers for training](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). You must use an image from this list.",
            "type": "string"
          },
          "packageUris": {
            "description": "Required. The Google Cloud Storage location of the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "pythonModule": {
            "description": "Required. The Python module name to run after installing the packages.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Trial": {
        "description": "A message representing a Trial. A Trial contains a unique set of Parameters that has been or will be evaluated, along with the objective metrics got by running the Trial.",
        "properties": {
          "clientId": {
            "description": "Output only. The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.",
            "readOnly": true,
            "type": "string"
          },
          "customJob": {
            "description": "Output only. The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "finalMeasurement": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Measurement"
          },
          "id": {
            "description": "Output only. The identifier of the Trial assigned by the service.",
            "readOnly": true,
            "type": "string"
          },
          "infeasibleReason": {
            "description": "Output only. A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.",
            "readOnly": true,
            "type": "string"
          },
          "measurements": {
            "description": "Output only. A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Measurement"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Output only. Resource name of the Trial assigned by the service.",
            "readOnly": true,
            "type": "string"
          },
          "parameters": {
            "description": "Output only. The parameters of the Trial.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1TrialParameter"
            },
            "readOnly": true,
            "type": "array"
          },
          "startTime": {
            "description": "Output only. Time when the Trial was started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of the Trial.",
            "enum": [
              "STATE_UNSPECIFIED",
              "REQUESTED",
              "ACTIVE",
              "STOPPING",
              "SUCCEEDED",
              "INFEASIBLE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "webAccessUris": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Measurement": {
        "description": "A message representing a Measurement of a Trial. A Measurement contains the Metrics got by executing a Trial using suggested hyperparameter values.",
        "properties": {
          "elapsedDuration": {
            "description": "Output only. Time that the Trial has been running at the point of this Measurement.",
            "format": "google-duration",
            "readOnly": true,
            "type": "string"
          },
          "metrics": {
            "description": "Output only. A list of metrics got by evaluating the objective functions using suggested Parameter values.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1MeasurementMetric"
            },
            "readOnly": true,
            "type": "array"
          },
          "stepCount": {
            "description": "Output only. The number of steps the machine learning model has been trained for. Must be non-negative.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1MeasurementMetric": {
        "description": "A message representing a metric in the measurement.",
        "properties": {
          "metricId": {
            "description": "Output only. The ID of the Metric. The Metric should be defined in StudySpec's Metrics.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "Output only. The value for this metric.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1TrialParameter": {
        "description": "A message representing a parameter to be tuned.",
        "properties": {
          "parameterId": {
            "description": "Output only. The ID of the parameter. The parameter should be defined in StudySpec's Parameters.",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "Output only. The value of the parameter. `number_value` will be set if a parameter defined in StudySpec is in type 'INTEGER', 'DOUBLE' or 'DISCRETE'. `string_value` will be set if a parameter defined in StudySpec is in type 'CATEGORICAL'.",
            "readOnly": true
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{parent}/hyperparameterTuningJobs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a HyperparameterTuningJob. A HyperparameterTuningJob has a Study specification and multiple CustomJobs with identical CustomJob specification.",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. Time when the HyperparameterTuningJob was created.",
            "**displayName**: Required. The display name of the HyperparameterTuningJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            [
              "**encryptionSpec**: Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
              {
                "$ul": [
                  "**kmsKeyName**: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created."
                ]
              }
            ],
            "**endTime**: Output only. Time when the HyperparameterTuningJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**labels**: The labels with user-defined metadata to organize HyperparameterTuningJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "**maxFailedTrialCount**: The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.",
            "**maxTrialCount**: Required. The desired total number of Trials.",
            "**name**: Output only. Resource name of the HyperparameterTuningJob.",
            "**parallelTrialCount**: Required. The desired number of Trials to run in parallel.",
            "**startTime**: Output only. Time when the HyperparameterTuningJob for the first time entered the `JOB_STATE_RUNNING` state.",
            "**state**: Output only. The detailed state of the job.",
            [
              "**studySpec**: Represents specification of a Study.",
              {
                "$ul": [
                  "**algorithm**: The search algorithm specified for the Study.",
                  [
                    "**convexAutomatedStoppingSpec**: Configuration for ConvexAutomatedStoppingSpec. When there are enough completed trials (configured by min_measurement_count), for pending trials with enough measurements and steps, the policy first computes an overestimate of the objective value at max_num_steps according to the slope of the incomplete objective value curve. No prediction can be made if the curve is completely flat. If the overestimation is worse than the best objective value of the completed trials, this pending trial will be early-stopped, but a last measurement will be added to the pending trial with max_num_steps and predicted objective value from the autoregression model.",
                    {
                      "$ul": [
                        "**learningRateParameterName**: The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.",
                        "**maxStepCount**: Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. If not defined, it will learn it from the completed trials. When use_steps is false, this field is set to the maximum elapsed seconds.",
                        "**minMeasurementCount**: The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less than min_measurement_count+1 completed trials or pending trials with less than min_measurement_count measurements. If not defined, the default value is 5.",
                        "**minStepCount**: Minimum number of steps for a trial to complete. Trials which do not have a measurement with step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed seconds.",
                        "**updateAllStoppedTrials**: ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped using a newly trained auto-regressive model. When this flag is set to True, all stopped trials from the beginning are potentially updated in terms of their `final_measurement`. Also, note that the training logic of autoregressive models is different in this case. Enabling this option has shown better results and this may be the default option in the future.",
                        "**useElapsedDuration**: This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_elapsed_duration==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds."
                      ]
                    }
                  ],
                  [
                    "**decayCurveStoppingSpec**: The decay curve automated stopping rule builds a Gaussian Process Regressor to predict the final objective value of a Trial based on the already completed Trials and the intermediate measurements of the current Trial. Early stopping is requested for the current Trial if there is very low probability to exceed the optimal value found so far.",
                    {
                      "$ul": [
                        "**useElapsedDuration**: True if Measurement.elapsed_duration is used as the x-axis of each Trials Decay Curve. Otherwise, Measurement.step_count will be used as the x-axis."
                      ]
                    }
                  ],
                  "**measurementSelectionType**: Describe which measurement selection type will be used",
                  [
                    "**medianAutomatedStoppingSpec**: The median automated stopping rule stops a pending Trial if the Trial's best objective_value is strictly below the median 'performance' of all completed Trials reported up to the Trial's last measurement. Currently, 'performance' refers to the running average of the objective values reported by the Trial in each measurement.",
                    {
                      "$ul": [
                        "**useElapsedDuration**: True if median automated stopping rule applies on Measurement.elapsed_duration. It means that elapsed_duration field of latest measurement of current Trial is used to compute median objective value for each completed Trials."
                      ]
                    }
                  ],
                  "**metrics**: Required. Metric specs for the Study.",
                  "**observationNoise**: The observation noise level of the study. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
                  "**parameters**: Required. The set of parameters to tune.",
                  [
                    "**studyStoppingConfig**: The configuration (stopping conditions) for automated stopping of a Study. Conditions include trial budgets, time budgets, and convergence detection.",
                    {
                      "$ul": [
                        "**maxDurationNoProgress**: If the objective value has not improved for this much time, stop the study. WARNING: Effective only for single-objective studies.",
                        "**maxNumTrials**: If there are more than this many trials, stop the study.",
                        "**maxNumTrialsNoProgress**: If the objective value has not improved for this many consecutive trials, stop the study. WARNING: Effective only for single-objective studies.",
                        [
                          "**maximumRuntimeConstraint**: Time-based Constraint for Study",
                          {
                            "$ul": [
                              "**endTime**: Compares the wallclock time to this time. Must use UTC timezone.",
                              "**maxDuration**: Counts the wallclock time passed since the creation of this Study."
                            ]
                          }
                        ],
                        "**minNumTrials**: If there are fewer than this many COMPLETED trials, do not stop the study.",
                        [
                          "**minimumRuntimeConstraint**: Time-based Constraint for Study",
                          {
                            "$ul": [
                              "**endTime**: Compares the wallclock time to this time. Must use UTC timezone.",
                              "**maxDuration**: Counts the wallclock time passed since the creation of this Study."
                            ]
                          }
                        ],
                        "**shouldStopAsap**: If true, a Study enters STOPPING_ASAP whenever it would normally enters STOPPING state. The bottom line is: set to true if you want to interrupt on-going evaluations of Trials as soon as the study stopping condition is met. (Please see Study.State documentation for the source of truth)."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**trialJobSpec**: Represents the spec of a CustomJob.",
              {
                "$ul": [
                  [
                    "**baseOutputDirectory**: The Google Cloud Storage location where the output is to be written to.",
                    {
                      "$ul": [
                        "**outputUriPrefix**: Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist."
                      ]
                    }
                  ],
                  "**enableDashboardAccess**: Optional. Whether you want Vertex AI to enable access to the customized dashboard in training chief container. If set to `true`, you can access the dashboard at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).",
                  "**enableWebAccess**: Optional. Whether you want Vertex AI to enable [interactive shell access](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by CustomJob.web_access_uris or Trial.web_access_uris (within HyperparameterTuningJob.trials).",
                  "**experiment**: Optional. The Experiment associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}`",
                  "**experimentRun**: Optional. The Experiment Run associated with this job. Format: `projects/{project}/locations/{location}/metadataStores/{metadataStores}/contexts/{experiment-name}-{experiment-run-name}`",
                  "**models**: Optional. The name of the Model resources for which to generate a mapping to artifact URIs. Applicable only to some of the Google-provided custom jobs. Format: `projects/{project}/locations/{location}/models/{model}` In order to retrieve a specific version of the model, also provide the version ID or version alias. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` If no version ID or alias is specified, the \"default\" version will be returned. The \"default\" version alias is created for the first version of the model, and can be moved to other versions later on. There will be exactly one default version.",
                  "**network**: Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Job should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the job is not peered with any network.",
                  "**protectedArtifactLocationId**: The ID of the location to store protected artifacts. e.g. us-central1. Populate only when the location is different than CustomJob location. List of supported locations: https://cloud.google.com/vertex-ai/docs/general/locations",
                  "**reservedIpRanges**: Optional. A list of names for the reserved ip ranges under the VPC network that can be used for this job. If set, we will deploy the job within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].",
                  [
                    "**scheduling**: All parameters related to queuing and scheduling of custom jobs.",
                    {
                      "$ul": [
                        "**disableRetries**: Optional. Indicates if the job should retry for internal errors after the job starts running. If true, overrides `Scheduling.restart_job_on_worker_restart` to false.",
                        "**restartJobOnWorkerRestart**: Restarts the entire CustomJob if a worker gets restarted. This feature can be used by distributed training jobs that are not resilient to workers leaving and joining a job.",
                        "**timeout**: The maximum job running time. The default is 7 days."
                      ]
                    }
                  ],
                  "**serviceAccount**: Specifies the service account for workload run-as account. Users submitting jobs must have act-as permission on this run-as account. If unspecified, the [Vertex AI Custom Code Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents) for the CustomJob's project is used.",
                  "**tensorboard**: Optional. The name of a Vertex AI Tensorboard resource to which this CustomJob will upload Tensorboard logs. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}`",
                  "**workerPoolSpecs**: Required. The spec of the worker pools including machine type and Docker image. All worker pools except the first one are optional and can be skipped by providing an empty value."
                ]
              }
            ],
            "**trials**: Output only. Trials of the HyperparameterTuningJob.",
            "**updateTime**: Output only. Time when the HyperparameterTuningJob was most recently updated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
