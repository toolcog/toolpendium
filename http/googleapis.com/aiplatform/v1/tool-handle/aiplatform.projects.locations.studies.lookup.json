{
  "name": "aiplatform_projects_locations_studies_lookup",
  "description": "Looks a study up using the user-defined display_name field instead of the fully qualified resource name.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the Location to get the Study from. Format: `projects/{project}/locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1LookupStudyRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1LookupStudyRequest": {
        "description": "Request message for VizierService.LookupStudy.",
        "properties": {
          "displayName": {
            "description": "Required. The user-defined display name of the Study",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{parent}/studies:lookup{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A message representing a Study.",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. Time at which the study was created.",
            "**displayName**: Required. Describes the Study, default value is empty string.",
            "**inactiveReason**: Output only. A human readable reason why the Study is inactive. This should be empty if a study is ACTIVE or COMPLETED.",
            "**name**: Output only. The name of a study. The study's globally unique identifier. Format: `projects/{project}/locations/{location}/studies/{study}`",
            "**state**: Output only. The detailed state of a Study.",
            [
              "**studySpec**: Represents specification of a Study.",
              {
                "$ul": [
                  "**algorithm**: The search algorithm specified for the Study.",
                  [
                    "**convexAutomatedStoppingSpec**: Configuration for ConvexAutomatedStoppingSpec. When there are enough completed trials (configured by min_measurement_count), for pending trials with enough measurements and steps, the policy first computes an overestimate of the objective value at max_num_steps according to the slope of the incomplete objective value curve. No prediction can be made if the curve is completely flat. If the overestimation is worse than the best objective value of the completed trials, this pending trial will be early-stopped, but a last measurement will be added to the pending trial with max_num_steps and predicted objective value from the autoregression model.",
                    {
                      "$ul": [
                        "**learningRateParameterName**: The hyper-parameter name used in the tuning job that stands for learning rate. Leave it blank if learning rate is not in a parameter in tuning. The learning_rate is used to estimate the objective value of the ongoing trial.",
                        "**maxStepCount**: Steps used in predicting the final objective for early stopped trials. In general, it's set to be the same as the defined steps in training / tuning. If not defined, it will learn it from the completed trials. When use_steps is false, this field is set to the maximum elapsed seconds.",
                        "**minMeasurementCount**: The minimal number of measurements in a Trial. Early-stopping checks will not trigger if less than min_measurement_count+1 completed trials or pending trials with less than min_measurement_count measurements. If not defined, the default value is 5.",
                        "**minStepCount**: Minimum number of steps for a trial to complete. Trials which do not have a measurement with step_count > min_step_count won't be considered for early stopping. It's ok to set it to 0, and a trial can be early stopped at any stage. By default, min_step_count is set to be one-tenth of the max_step_count. When use_elapsed_duration is true, this field is set to the minimum elapsed seconds.",
                        "**updateAllStoppedTrials**: ConvexAutomatedStoppingSpec by default only updates the trials that needs to be early stopped using a newly trained auto-regressive model. When this flag is set to True, all stopped trials from the beginning are potentially updated in terms of their `final_measurement`. Also, note that the training logic of autoregressive models is different in this case. Enabling this option has shown better results and this may be the default option in the future.",
                        "**useElapsedDuration**: This bool determines whether or not the rule is applied based on elapsed_secs or steps. If use_elapsed_duration==false, the early stopping decision is made according to the predicted objective values according to the target steps. If use_elapsed_duration==true, elapsed_secs is used instead of steps. Also, in this case, the parameters max_num_steps and min_num_steps are overloaded to contain max_elapsed_seconds and min_elapsed_seconds."
                      ]
                    }
                  ],
                  [
                    "**decayCurveStoppingSpec**: The decay curve automated stopping rule builds a Gaussian Process Regressor to predict the final objective value of a Trial based on the already completed Trials and the intermediate measurements of the current Trial. Early stopping is requested for the current Trial if there is very low probability to exceed the optimal value found so far.",
                    {
                      "$ul": [
                        "**useElapsedDuration**: True if Measurement.elapsed_duration is used as the x-axis of each Trials Decay Curve. Otherwise, Measurement.step_count will be used as the x-axis."
                      ]
                    }
                  ],
                  "**measurementSelectionType**: Describe which measurement selection type will be used",
                  [
                    "**medianAutomatedStoppingSpec**: The median automated stopping rule stops a pending Trial if the Trial's best objective_value is strictly below the median 'performance' of all completed Trials reported up to the Trial's last measurement. Currently, 'performance' refers to the running average of the objective values reported by the Trial in each measurement.",
                    {
                      "$ul": [
                        "**useElapsedDuration**: True if median automated stopping rule applies on Measurement.elapsed_duration. It means that elapsed_duration field of latest measurement of current Trial is used to compute median objective value for each completed Trials."
                      ]
                    }
                  ],
                  "**metrics**: Required. Metric specs for the Study.",
                  "**observationNoise**: The observation noise level of the study. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.",
                  "**parameters**: Required. The set of parameters to tune.",
                  [
                    "**studyStoppingConfig**: The configuration (stopping conditions) for automated stopping of a Study. Conditions include trial budgets, time budgets, and convergence detection.",
                    {
                      "$ul": [
                        "**maxDurationNoProgress**: If the objective value has not improved for this much time, stop the study. WARNING: Effective only for single-objective studies.",
                        "**maxNumTrials**: If there are more than this many trials, stop the study.",
                        "**maxNumTrialsNoProgress**: If the objective value has not improved for this many consecutive trials, stop the study. WARNING: Effective only for single-objective studies.",
                        [
                          "**maximumRuntimeConstraint**: Time-based Constraint for Study",
                          {
                            "$ul": [
                              "**endTime**: Compares the wallclock time to this time. Must use UTC timezone.",
                              "**maxDuration**: Counts the wallclock time passed since the creation of this Study."
                            ]
                          }
                        ],
                        "**minNumTrials**: If there are fewer than this many COMPLETED trials, do not stop the study.",
                        [
                          "**minimumRuntimeConstraint**: Time-based Constraint for Study",
                          {
                            "$ul": [
                              "**endTime**: Compares the wallclock time to this time. Must use UTC timezone.",
                              "**maxDuration**: Counts the wallclock time passed since the creation of this Study."
                            ]
                          }
                        ],
                        "**shouldStopAsap**: If true, a Study enters STOPPING_ASAP whenever it would normally enters STOPPING state. The bottom line is: set to true if you want to interrupt on-going evaluations of Trials as soon as the study stopping condition is met. (Please see Study.State documentation for the source of truth)."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
