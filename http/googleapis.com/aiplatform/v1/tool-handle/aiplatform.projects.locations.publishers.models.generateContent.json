{
  "name": "aiplatform_projects_locations_publishers_models_generateContent",
  "description": "Generate content with multimodal inputs.",
  "parameters": {
    "type": "object",
    "properties": {
      "model": {
        "type": "string",
        "description": "Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1GenerateContentRequest"
      }
    },
    "required": [
      "model"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1GenerateContentRequest": {
        "description": "Request message for [PredictionService.GenerateContent].",
        "properties": {
          "contents": {
            "description": "Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Content"
            },
            "type": "array"
          },
          "generationConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1GenerationConfig"
          },
          "safetySettings": {
            "description": "Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1SafetySetting"
            },
            "type": "array"
          },
          "tools": {
            "description": "Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Tool"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Content": {
        "description": "The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.",
        "properties": {
          "parts": {
            "description": "Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Part"
            },
            "type": "array"
          },
          "role": {
            "description": "Optional. The producer of the content. Must be either 'user' or 'model'. Useful to set for multi-turn conversations, otherwise can be left blank or unset.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Part": {
        "description": "A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.",
        "properties": {
          "fileData": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FileData"
          },
          "functionCall": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FunctionCall"
          },
          "functionResponse": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FunctionResponse"
          },
          "inlineData": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Blob"
          },
          "text": {
            "description": "Optional. Text part (can be code).",
            "type": "string"
          },
          "videoMetadata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1VideoMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FileData": {
        "description": "URI based data.",
        "properties": {
          "fileUri": {
            "description": "Required. URI.",
            "type": "string"
          },
          "mimeType": {
            "description": "Required. The IANA standard MIME type of the source data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FunctionCall": {
        "description": "A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing the parameters and their values.",
        "properties": {
          "args": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.",
            "type": "object"
          },
          "name": {
            "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name].",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FunctionResponse": {
        "description": "The result output from a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a [FunctionCall] made based on model prediction.",
        "properties": {
          "name": {
            "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].",
            "type": "string"
          },
          "response": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Required. The function response in JSON object format.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Blob": {
        "description": "Raw media bytes. Text should not be sent as raw bytes, use the 'text' field.",
        "properties": {
          "data": {
            "description": "Required. Raw bytes for media formats.",
            "format": "byte",
            "type": "string"
          },
          "mimeType": {
            "description": "Required. The IANA standard MIME type of the source data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1VideoMetadata": {
        "description": "Metadata describes the input video content.",
        "properties": {
          "endOffset": {
            "description": "Optional. The end offset of the video.",
            "format": "google-duration",
            "type": "string"
          },
          "startOffset": {
            "description": "Optional. The start offset of the video.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1GenerationConfig": {
        "description": "Generation config.",
        "properties": {
          "candidateCount": {
            "description": "Optional. Number of candidates to generate.",
            "format": "int32",
            "type": "integer"
          },
          "maxOutputTokens": {
            "description": "Optional. The maximum number of output tokens to generate per message.",
            "format": "int32",
            "type": "integer"
          },
          "stopSequences": {
            "description": "Optional. Stop sequences.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "temperature": {
            "description": "Optional. Controls the randomness of predictions.",
            "format": "float",
            "type": "number"
          },
          "topK": {
            "description": "Optional. If specified, top-k sampling will be used.",
            "format": "float",
            "type": "number"
          },
          "topP": {
            "description": "Optional. If specified, nucleus sampling will be used.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1SafetySetting": {
        "description": "Safety settings.",
        "properties": {
          "category": {
            "description": "Required. Harm category.",
            "enum": [
              "HARM_CATEGORY_UNSPECIFIED",
              "HARM_CATEGORY_HATE_SPEECH",
              "HARM_CATEGORY_DANGEROUS_CONTENT",
              "HARM_CATEGORY_HARASSMENT",
              "HARM_CATEGORY_SEXUALLY_EXPLICIT"
            ],
            "type": "string"
          },
          "threshold": {
            "description": "Required. The harm block threshold.",
            "enum": [
              "HARM_BLOCK_THRESHOLD_UNSPECIFIED",
              "BLOCK_LOW_AND_ABOVE",
              "BLOCK_MEDIUM_AND_ABOVE",
              "BLOCK_ONLY_HIGH",
              "BLOCK_NONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Tool": {
        "description": "Tool details that the model may use to generate response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. A Tool object should contain exactly one type of Tool (e.g FunctionDeclaration, Retrieval or GoogleSearchRetrieval).",
        "properties": {
          "functionDeclarations": {
            "description": "Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 64 function declarations can be provided.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1FunctionDeclaration"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FunctionDeclaration": {
        "description": "Structured representation of a function declaration as defined by the [OpenAPI 3.0 specification](https://spec.openapis.org/oas/v3.0.3). Included in this declaration are the function name and parameters. This FunctionDeclaration is a representation of a block of code that can be used as a `Tool` by the model and executed by the client.",
        "properties": {
          "description": {
            "description": "Optional. Description and purpose of the function. Model uses it to decide how and whether to call the function.",
            "type": "string"
          },
          "name": {
            "description": "Required. The name of the function to call. Must start with a letter or an underscore. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "type": "string"
          },
          "parameters": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Schema"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Schema": {
        "description": "Schema is used to define the format of input/output data. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). More fields may be added in the future as needed.",
        "properties": {
          "description": {
            "description": "Optional. The description of the data.",
            "type": "string"
          },
          "enum": {
            "description": "Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]}",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "example": {
            "description": "Optional. Example of the object. Will only populated when the object is the root."
          },
          "format": {
            "description": "Optional. The format of the data. Supported formats: for NUMBER type: float, double for INTEGER type: int32, int64",
            "type": "string"
          },
          "items": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Schema"
          },
          "nullable": {
            "description": "Optional. Indicates if the value may be null.",
            "type": "boolean"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Schema"
            },
            "description": "Optional. Properties of Type.OBJECT.",
            "type": "object"
          },
          "required": {
            "description": "Optional. Required properties of Type.OBJECT.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Optional. The type of the data.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "STRING",
              "NUMBER",
              "INTEGER",
              "BOOLEAN",
              "ARRAY",
              "OBJECT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{model}:generateContent{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for [PredictionService.GenerateContent].",
        "**Key properties:**",
        {
          "$ul": [
            "**candidates**: Output only. Generated candidates.",
            [
              "**promptFeedback**: Content filter results for a prompt sent in the request.",
              {
                "$ul": [
                  "**blockReason**: Output only. Blocked reason.",
                  "**blockReasonMessage**: Output only. A readable block reason message.",
                  "**safetyRatings**: Output only. Safety ratings."
                ]
              }
            ],
            [
              "**usageMetadata**: Usage metadata about response(s).",
              {
                "$ul": [
                  "**candidatesTokenCount**: Number of tokens in the response(s).",
                  "**promptTokenCount**: Number of tokens in the request.",
                  "**totalTokenCount**"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
