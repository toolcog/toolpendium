{
  "name": "aiplatform_projects_locations_modelDeploymentMonitoringJobs_create",
  "description": "Creates a ModelDeploymentMonitoringJob. It will run periodically on a configured interval.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent of the ModelDeploymentMonitoringJob. Format: `projects/{project}/locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1ModelDeploymentMonitoringJob"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1ModelDeploymentMonitoringJob": {
        "description": "Represents a job that runs periodically to monitor the deployed models in an endpoint. It will analyze the logged training & prediction data to detect any abnormal behaviors.",
        "properties": {
          "analysisInstanceSchemaUri": {
            "description": "YAML schema file uri describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If this field is empty, all the feature data types are inferred from predict_instance_schema_uri, meaning that TFDV will use the data in the exact format(data type) as prediction request/response. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.",
            "type": "string"
          },
          "bigqueryTables": {
            "description": "Output only. The created bigquery tables for the job under customer project. Customer could do their own query & analysis. There could be 4 log tables in maximum: 1. Training data logging predict request/response 2. Serving data logging predict request/response",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable"
            },
            "readOnly": true,
            "type": "array"
          },
          "createTime": {
            "description": "Output only. Timestamp when this ModelDeploymentMonitoringJob was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Required. The user-defined name of the ModelDeploymentMonitoringJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a ModelDeploymentMonitoringJob.",
            "type": "string"
          },
          "enableMonitoringPipelineLogs": {
            "description": "If true, the scheduled monitoring pipeline logs are sent to Google Cloud Logging, including pipeline status and anomalies detected. Please note the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging#pricing).",
            "type": "boolean"
          },
          "encryptionSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1EncryptionSpec"
          },
          "endpoint": {
            "description": "Required. Endpoint resource name. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`",
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize your ModelDeploymentMonitoringJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "type": "object"
          },
          "latestMonitoringPipelineMetadata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata"
          },
          "logTtl": {
            "description": "The TTL of BigQuery tables in user projects which stores logs. A day is the basic unit of the TTL and we take the ceil of TTL/86400(a day). e.g. { second: 3600} indicates ttl = 1 day.",
            "format": "google-duration",
            "type": "string"
          },
          "loggingSamplingStrategy": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1SamplingStrategy"
          },
          "modelDeploymentMonitoringObjectiveConfigs": {
            "description": "Required. The config for monitoring objectives. This is a per DeployedModel config. Each DeployedModel needs to be configured separately.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig"
            },
            "type": "array"
          },
          "modelDeploymentMonitoringScheduleConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig"
          },
          "modelMonitoringAlertConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringAlertConfig"
          },
          "name": {
            "description": "Output only. Resource name of a ModelDeploymentMonitoringJob.",
            "readOnly": true,
            "type": "string"
          },
          "nextScheduleTime": {
            "description": "Output only. Timestamp when this monitoring pipeline will be scheduled to run for the next round.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "predictInstanceSchemaUri": {
            "description": "YAML schema file uri describing the format of a single instance, which are given to format this Endpoint's prediction (and explanation). If not set, we will generate predict schema from collected predict requests.",
            "type": "string"
          },
          "samplePredictInstance": {
            "description": "Sample Predict instance, same format as PredictRequest.instances, this can be set as a replacement of ModelDeploymentMonitoringJob.predict_instance_schema_uri. If not set, we will generate predict schema from collected predict requests."
          },
          "scheduleState": {
            "description": "Output only. Schedule state when the monitoring job is in Running state.",
            "enum": [
              "MONITORING_SCHEDULE_STATE_UNSPECIFIED",
              "PENDING",
              "OFFLINE",
              "RUNNING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of the monitoring job. When the job is still creating, the state will be 'PENDING'. Once the job is successfully created, the state will be 'RUNNING'. Pause the job, the state will be 'PAUSED'. Resume the job, the state will return to 'RUNNING'.",
            "enum": [
              "JOB_STATE_UNSPECIFIED",
              "JOB_STATE_QUEUED",
              "JOB_STATE_PENDING",
              "JOB_STATE_RUNNING",
              "JOB_STATE_SUCCEEDED",
              "JOB_STATE_FAILED",
              "JOB_STATE_CANCELLING",
              "JOB_STATE_CANCELLED",
              "JOB_STATE_PAUSED",
              "JOB_STATE_EXPIRED",
              "JOB_STATE_UPDATING",
              "JOB_STATE_PARTIALLY_SUCCEEDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "statsAnomaliesBaseDirectory": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1GcsDestination"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this ModelDeploymentMonitoringJob was updated most recently.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable": {
        "description": "ModelDeploymentMonitoringBigQueryTable specifies the BigQuery table name as well as some information of the logs stored in this table.",
        "properties": {
          "bigqueryTablePath": {
            "description": "The created BigQuery table to store logs. Customer could do their own query & analysis. Format: `bq://.model_deployment_monitoring_._`",
            "type": "string"
          },
          "logSource": {
            "description": "The source of log.",
            "enum": [
              "LOG_SOURCE_UNSPECIFIED",
              "TRAINING",
              "SERVING"
            ],
            "type": "string"
          },
          "logType": {
            "description": "The type of log.",
            "enum": [
              "LOG_TYPE_UNSPECIFIED",
              "PREDICT",
              "EXPLAIN"
            ],
            "type": "string"
          },
          "requestResponseLoggingSchemaVersion": {
            "description": "Output only. The schema version of the request/response logging BigQuery table. Default to v1 if unset.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1EncryptionSpec": {
        "description": "Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
        "properties": {
          "kmsKeyName": {
            "description": "Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata": {
        "description": "All metadata of most recent monitoring pipelines.",
        "properties": {
          "runTime": {
            "description": "The time that most recent monitoring pipelines that is related to this run.",
            "format": "google-datetime",
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/GoogleRpcStatus"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1SamplingStrategy": {
        "description": "Sampling Strategy for logging, can be for both training and prediction dataset.",
        "properties": {
          "randomSampleConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1SamplingStrategyRandomSampleConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1SamplingStrategyRandomSampleConfig": {
        "description": "Requests are randomly selected.",
        "properties": {
          "sampleRate": {
            "description": "Sample rate (0, 1]",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig": {
        "description": "ModelDeploymentMonitoringObjectiveConfig contains the pair of deployed_model_id to ModelMonitoringObjectiveConfig.",
        "properties": {
          "deployedModelId": {
            "description": "The DeployedModel ID of the objective config.",
            "type": "string"
          },
          "objectiveConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringObjectiveConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringObjectiveConfig": {
        "description": "The objective configuration for model monitoring, including the information needed to detect anomalies for one particular model.",
        "properties": {
          "explanationConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfig"
          },
          "predictionDriftDetectionConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig"
          },
          "trainingDataset": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingDataset"
          },
          "trainingPredictionSkewDetectionConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfig": {
        "description": "The config for integrating with Vertex Explainable AI. Only applicable if the Model has explanation_spec populated.",
        "properties": {
          "enableFeatureAttributes": {
            "description": "If want to analyze the Vertex Explainable AI feature attribute scores or not. If set to true, Vertex AI will log the feature attributions from explain response and do the skew/drift detection for them.",
            "type": "boolean"
          },
          "explanationBaseline": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline": {
        "description": "Output from BatchPredictionJob for Model Monitoring baseline dataset, which can be used to generate baseline attribution scores.",
        "properties": {
          "bigquery": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1BigQueryDestination"
          },
          "gcs": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1GcsDestination"
          },
          "predictionFormat": {
            "description": "The storage format of the predictions generated BatchPrediction job.",
            "enum": [
              "PREDICTION_FORMAT_UNSPECIFIED",
              "JSONL",
              "BIGQUERY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1BigQueryDestination": {
        "description": "The BigQuery location for the output content.",
        "properties": {
          "outputUri": {
            "description": "Required. BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: * BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1GcsDestination": {
        "description": "The Google Cloud Storage location where the output is to be written to.",
        "properties": {
          "outputUriPrefix": {
            "description": "Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig": {
        "description": "The config for Prediction data drift detection.",
        "properties": {
          "attributionScoreDriftThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. The threshold here is against attribution score distance between different time windows.",
            "type": "object"
          },
          "defaultDriftThreshold": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ThresholdConfig"
          },
          "driftThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. If a feature needs to be monitored for drift, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between different time windws.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ThresholdConfig": {
        "description": "The config for feature monitoring threshold.",
        "properties": {
          "value": {
            "description": "Specify a threshold value that can trigger the alert. If this threshold config is for feature distribution distance: 1. For categorical feature, the distribution distance is calculated by L-inifinity norm. 2. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingDataset": {
        "description": "Training Dataset information.",
        "properties": {
          "bigquerySource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1BigQuerySource"
          },
          "dataFormat": {
            "description": "Data format of the dataset, only applicable if the input is from Google Cloud Storage. The possible formats are: \"tf-record\" The source file is a TFRecord file. \"csv\" The source file is a CSV file. \"jsonl\" The source file is a JSONL file.",
            "type": "string"
          },
          "dataset": {
            "description": "The resource name of the Dataset used to train this Model.",
            "type": "string"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1GcsSource"
          },
          "loggingSamplingStrategy": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1SamplingStrategy"
          },
          "targetField": {
            "description": "The target field name the model is to predict. This field will be excluded when doing Predict and (or) Explain for the training data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1BigQuerySource": {
        "description": "The BigQuery location for the input content.",
        "properties": {
          "inputUri": {
            "description": "Required. BigQuery URI to a table, up to 2000 characters long. Accepted forms: * BigQuery path. For example: `bq://projectId.bqDatasetId.bqTableId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1GcsSource": {
        "description": "The Google Cloud Storage location for the input content.",
        "properties": {
          "uris": {
            "description": "Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig": {
        "description": "The config for Training & Prediction data skew detection. It specifies the training dataset sources and the skew detection parameters.",
        "properties": {
          "attributionScoreSkewThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. The threshold here is against attribution score distance between the training and prediction feature.",
            "type": "object"
          },
          "defaultSkewThreshold": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ThresholdConfig"
          },
          "skewThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. If a feature needs to be monitored for skew, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between the training and prediction feature.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig": {
        "description": "The config for scheduling monitoring job.",
        "properties": {
          "monitorInterval": {
            "description": "Required. The model monitoring job scheduling interval. It will be rounded up to next full hour. This defines how often the monitoring jobs are triggered.",
            "format": "google-duration",
            "type": "string"
          },
          "monitorWindow": {
            "description": "The time window of the prediction data being included in each prediction dataset. This window specifies how long the data should be collected from historical model results for each run. If not set, ModelDeploymentMonitoringScheduleConfig.monitor_interval will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the monitoring statistics.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringAlertConfig": {
        "description": "The alert config for model monitoring.",
        "properties": {
          "emailAlertConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig"
          },
          "enableLogging": {
            "description": "Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.",
            "type": "boolean"
          },
          "notificationChannels": {
            "description": "Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig": {
        "description": "The config for email alert.",
        "properties": {
          "userEmails": {
            "description": "The email addresses to send the alert.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{parent}/modelDeploymentMonitoringJobs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a job that runs periodically to monitor the deployed models in an endpoint. It will analyze the logged training & prediction data to detect any abnormal behaviors.",
        "**Key properties:**",
        {
          "$ul": [
            "**analysisInstanceSchemaUri**: YAML schema file uri describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If this field is empty, all the feature data types are inferred from predict_instance_schema_uri, meaning that TFDV will use the data in the exact format(data type) as prediction request/response. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.",
            "**bigqueryTables**: Output only. The created bigquery tables for the job under customer project. Customer could do their own query & analysis. There could be 4 log tables in maximum: 1. Training data logging predict request/response 2. Serving data logging predict request/response",
            "**createTime**: Output only. Timestamp when this ModelDeploymentMonitoringJob was created.",
            "**displayName**: Required. The user-defined name of the ModelDeploymentMonitoringJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a ModelDeploymentMonitoringJob.",
            "**enableMonitoringPipelineLogs**: If true, the scheduled monitoring pipeline logs are sent to Google Cloud Logging, including pipeline status and anomalies detected. Please note the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging#pricing).",
            [
              "**encryptionSpec**: Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
              {
                "$ul": [
                  "**kmsKeyName**: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created."
                ]
              }
            ],
            "**endpoint**: Required. Endpoint resource name. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**labels**: The labels with user-defined metadata to organize your ModelDeploymentMonitoringJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            [
              "**latestMonitoringPipelineMetadata**: All metadata of most recent monitoring pipelines.",
              {
                "$ul": [
                  "**runTime**: The time that most recent monitoring pipelines that is related to this run.",
                  [
                    "**status**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
                    {
                      "$ul": [
                        "**code**: The status code, which should be an enum value of google.rpc.Code.",
                        "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                        "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**logTtl**: The TTL of BigQuery tables in user projects which stores logs. A day is the basic unit of the TTL and we take the ceil of TTL/86400(a day). e.g. { second: 3600} indicates ttl = 1 day.",
            [
              "**loggingSamplingStrategy**: Sampling Strategy for logging, can be for both training and prediction dataset.",
              {
                "$ul": [
                  [
                    "**randomSampleConfig**: Requests are randomly selected.",
                    {
                      "$ul": [
                        "**sampleRate**: Sample rate (0, 1]"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**modelDeploymentMonitoringObjectiveConfigs**: Required. The config for monitoring objectives. This is a per DeployedModel config. Each DeployedModel needs to be configured separately.",
            [
              "**modelDeploymentMonitoringScheduleConfig**: The config for scheduling monitoring job.",
              {
                "$ul": [
                  "**monitorInterval**: Required. The model monitoring job scheduling interval. It will be rounded up to next full hour. This defines how often the monitoring jobs are triggered.",
                  "**monitorWindow**: The time window of the prediction data being included in each prediction dataset. This window specifies how long the data should be collected from historical model results for each run. If not set, ModelDeploymentMonitoringScheduleConfig.monitor_interval will be used. e.g. If currently the cutoff time is 2022-01-08 14:30:00 and the monitor_window is set to be 3600, then data from 2022-01-08 13:30:00 to 2022-01-08 14:30:00 will be retrieved and aggregated to calculate the monitoring statistics."
                ]
              }
            ],
            [
              "**modelMonitoringAlertConfig**: The alert config for model monitoring.",
              {
                "$ul": [
                  [
                    "**emailAlertConfig**: The config for email alert.",
                    {
                      "$ul": [
                        "**userEmails**: The email addresses to send the alert."
                      ]
                    }
                  ],
                  "**enableLogging**: Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.",
                  "**notificationChannels**: Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`"
                ]
              }
            ],
            "**name**: Output only. Resource name of a ModelDeploymentMonitoringJob.",
            "**nextScheduleTime**: Output only. Timestamp when this monitoring pipeline will be scheduled to run for the next round.",
            "**predictInstanceSchemaUri**: YAML schema file uri describing the format of a single instance, which are given to format this Endpoint's prediction (and explanation). If not set, we will generate predict schema from collected predict requests.",
            "**samplePredictInstance**: Sample Predict instance, same format as PredictRequest.instances, this can be set as a replacement of ModelDeploymentMonitoringJob.predict_instance_schema_uri. If not set, we will generate predict schema from collected predict requests.",
            "**scheduleState**: Output only. Schedule state when the monitoring job is in Running state.",
            "**state**: Output only. The detailed state of the monitoring job. When the job is still creating, the state will be 'PENDING'. Once the job is successfully created, the state will be 'RUNNING'. Pause the job, the state will be 'PAUSED'. Resume the job, the state will return to 'RUNNING'.",
            [
              "**statsAnomaliesBaseDirectory**: The Google Cloud Storage location where the output is to be written to.",
              {
                "$ul": [
                  "**outputUriPrefix**: Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist."
                ]
              }
            ],
            "**updateTime**: Output only. Timestamp when this ModelDeploymentMonitoringJob was updated most recently."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
