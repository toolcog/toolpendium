{
  "name": "aiplatform_projects_locations_publishers_models_countTokens",
  "description": "Perform a token counting.",
  "parameters": {
    "type": "object",
    "properties": {
      "endpoint": {
        "type": "string",
        "description": "Required. The name of the Endpoint requested to perform token counting. Format: `projects/{project}/locations/{location}/endpoints/{endpoint}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1CountTokensRequest"
      }
    },
    "required": [
      "endpoint"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1CountTokensRequest": {
        "description": "Request message for PredictionService.CountTokens.",
        "properties": {
          "contents": {
            "description": "Required. Input content.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Content"
            },
            "type": "array"
          },
          "instances": {
            "description": "Required. The instances that are the input to token counting call. Schema is identical to the prediction schema of the underlying model.",
            "items": {},
            "type": "array"
          },
          "model": {
            "description": "Required. The name of the publisher model requested to serve the prediction. Format: `projects/{project}/locations/{location}/publishers/*/models/*`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Content": {
        "description": "The base structured datatype containing multi-part content of a message. A `Content` includes a `role` field designating the producer of the `Content` and a `parts` field containing multi-part data that contains the content of the message turn.",
        "properties": {
          "parts": {
            "description": "Required. Ordered `Parts` that constitute a single message. Parts may have different IANA MIME types.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1Part"
            },
            "type": "array"
          },
          "role": {
            "description": "Optional. The producer of the content. Must be either 'user' or 'model'. Useful to set for multi-turn conversations, otherwise can be left blank or unset.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Part": {
        "description": "A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.",
        "properties": {
          "fileData": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FileData"
          },
          "functionCall": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FunctionCall"
          },
          "functionResponse": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1FunctionResponse"
          },
          "inlineData": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1Blob"
          },
          "text": {
            "description": "Optional. Text part (can be code).",
            "type": "string"
          },
          "videoMetadata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1VideoMetadata"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FileData": {
        "description": "URI based data.",
        "properties": {
          "fileUri": {
            "description": "Required. URI.",
            "type": "string"
          },
          "mimeType": {
            "description": "Required. The IANA standard MIME type of the source data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FunctionCall": {
        "description": "A predicted [FunctionCall] returned from the model that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing the parameters and their values.",
        "properties": {
          "args": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Optional. Required. The function parameters and values in JSON object format. See [FunctionDeclaration.parameters] for parameter details.",
            "type": "object"
          },
          "name": {
            "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name].",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1FunctionResponse": {
        "description": "The result output from a [FunctionCall] that contains a string representing the [FunctionDeclaration.name] and a structured JSON object containing any output from the function is used as context to the model. This should contain the result of a [FunctionCall] made based on model prediction.",
        "properties": {
          "name": {
            "description": "Required. The name of the function to call. Matches [FunctionDeclaration.name] and [FunctionCall.name].",
            "type": "string"
          },
          "response": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Required. The function response in JSON object format.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1Blob": {
        "description": "Raw media bytes. Text should not be sent as raw bytes, use the 'text' field.",
        "properties": {
          "data": {
            "description": "Required. Raw bytes for media formats.",
            "format": "byte",
            "type": "string"
          },
          "mimeType": {
            "description": "Required. The IANA standard MIME type of the source data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1VideoMetadata": {
        "description": "Metadata describes the input video content.",
        "properties": {
          "endOffset": {
            "description": "Optional. The end offset of the video.",
            "format": "google-duration",
            "type": "string"
          },
          "startOffset": {
            "description": "Optional. The start offset of the video.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{endpoint}:countTokens{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for PredictionService.CountTokens.",
        "**Key properties:**",
        {
          "$ul": [
            "**totalBillableCharacters**: The total number of billable characters counted across all instances from the request.",
            "**totalTokens**: The total number of tokens counted across all instances from the request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
