{
  "name": "aiplatform_projects_locations_featureOnlineStores_featureViews_searchNearestEntities",
  "description": "Search the nearest entities under a FeatureView. Search only works for indexable feature view; if a feature view isn't indexable, returns Invalid argument response.",
  "parameters": {
    "type": "object",
    "properties": {
      "featureView": {
        "type": "string",
        "description": "Required. FeatureView resource format `projects/{project}/locations/{location}/featureOnlineStores/{featureOnlineStore}/featureViews/{featureView}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1SearchNearestEntitiesRequest"
      }
    },
    "required": [
      "featureView"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1SearchNearestEntitiesRequest": {
        "description": "The request message for FeatureOnlineStoreService.SearchNearestEntities.",
        "properties": {
          "query": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1NearestNeighborQuery"
          },
          "returnFullEntity": {
            "description": "Optional. If set to true, the full entities (including all vector values and metadata) of the nearest neighbors are returned; otherwise only entity id of the nearest neighbors will be returned. Note that returning full entities will significantly increase the latency and cost of the query.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1NearestNeighborQuery": {
        "description": "A query to find a number of similar entities.",
        "properties": {
          "embedding": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1NearestNeighborQueryEmbedding"
          },
          "entityId": {
            "description": "Optional. The entity id whose similar entities should be searched for. If embedding is set, search will use embedding instead of entity_id.",
            "type": "string"
          },
          "neighborCount": {
            "description": "Optional. The number of similar entities to be retrieved from feature view for each query.",
            "format": "int32",
            "type": "integer"
          },
          "parameters": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1NearestNeighborQueryParameters"
          },
          "perCrowdingAttributeNeighborCount": {
            "description": "Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity.",
            "format": "int32",
            "type": "integer"
          },
          "stringFilters": {
            "description": "Optional. The list of string filters.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1NearestNeighborQueryStringFilter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1NearestNeighborQueryEmbedding": {
        "description": "The embedding vector.",
        "properties": {
          "value": {
            "description": "Optional. Individual value in the embedding.",
            "items": {
              "format": "float",
              "type": "number"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1NearestNeighborQueryParameters": {
        "description": "Parameters that can be overrided in each query to tune query latency and recall.",
        "properties": {
          "approximateNeighborCandidates": {
            "description": "Optional. The number of neighbors to find via approximate search before exact reordering is performed; if set, this value must be > neighbor_count.",
            "format": "int32",
            "type": "integer"
          },
          "leafNodesSearchFraction": {
            "description": "Optional. The fraction of the number of leaves to search, set at query time allows user to tune search performance. This value increase result in both search accuracy and latency increase. The value should be between 0.0 and 1.0.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1NearestNeighborQueryStringFilter": {
        "description": "String filter is used to search a subset of the entities by using boolean rules on string columns. For example: if a query specifies string filter with 'name = color, allow_tokens = {red, blue}, deny_tokens = {purple}',' then that query will match entities that are red or blue, but if those points are also purple, then they will be excluded even if they are red/blue. Only string filter is supported for now, numeric filter will be supported in the near future.",
        "properties": {
          "allowTokens": {
            "description": "Optional. The allowed tokens.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "denyTokens": {
            "description": "Optional. The denied tokens.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Required. Column names in BigQuery that used as filters.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1/{featureView}:searchNearestEntities{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for FeatureOnlineStoreService.SearchNearestEntities",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**nearestNeighbors**: Nearest neighbors for one query.",
              {
                "$ul": [
                  "**neighbors**: All its neighbors."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
