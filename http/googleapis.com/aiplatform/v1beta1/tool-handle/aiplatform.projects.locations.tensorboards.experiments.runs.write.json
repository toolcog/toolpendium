{
  "name": "aiplatform_projects_locations_tensorboards_experiments_runs_write",
  "description": "Write time series data points into multiple TensorboardTimeSeries under a TensorboardRun. If any data fail to be ingested, an error is returned.",
  "parameters": {
    "type": "object",
    "properties": {
      "tensorboardRun": {
        "type": "string",
        "description": "Required. The resource name of the TensorboardRun to write data to. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1WriteTensorboardRunDataRequest"
      }
    },
    "required": [
      "tensorboardRun"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1WriteTensorboardRunDataRequest": {
        "description": "Request message for TensorboardService.WriteTensorboardRunData.",
        "properties": {
          "tensorboardRun": {
            "description": "Required. The resource name of the TensorboardRun to write data to. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`",
            "type": "string"
          },
          "timeSeriesData": {
            "description": "Required. The TensorboardTimeSeries data to write. Values with in a time series are indexed by their step value. Repeated writes to the same step will overwrite the existing value for that step. The upper limit of data points per write request is 5000.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1TimeSeriesData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1TimeSeriesData": {
        "description": "All the data stored in a TensorboardTimeSeries.",
        "properties": {
          "tensorboardTimeSeriesId": {
            "description": "Required. The ID of the TensorboardTimeSeries, which will become the final component of the TensorboardTimeSeries' resource name",
            "type": "string"
          },
          "valueType": {
            "description": "Required. Immutable. The value type of this time series. All the values in this time series data must match this value type.",
            "enum": [
              "VALUE_TYPE_UNSPECIFIED",
              "SCALAR",
              "TENSOR",
              "BLOB_SEQUENCE"
            ],
            "type": "string"
          },
          "values": {
            "description": "Required. Data points in this time series.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1TimeSeriesDataPoint"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1TimeSeriesDataPoint": {
        "description": "A TensorboardTimeSeries data point.",
        "properties": {
          "blobs": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1TensorboardBlobSequence"
          },
          "scalar": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Scalar"
          },
          "step": {
            "description": "Step index of this data point within the run.",
            "format": "int64",
            "type": "string"
          },
          "tensor": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1TensorboardTensor"
          },
          "wallTime": {
            "description": "Wall clock timestamp when this data point is generated by the end user.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1TensorboardBlobSequence": {
        "description": "One point viewable on a blob metric plot, but mostly just a wrapper message to work around repeated fields can't be used directly within `oneof` fields.",
        "properties": {
          "values": {
            "description": "List of blobs contained within the sequence.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1TensorboardBlob"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1TensorboardBlob": {
        "description": "One blob (e.g, image, graph) viewable on a blob metric plot.",
        "properties": {
          "data": {
            "description": "Optional. The bytes of the blob is not present unless it's returned by the ReadTensorboardBlobData endpoint.",
            "format": "byte",
            "type": "string"
          },
          "id": {
            "description": "Output only. A URI safe key uniquely identifying a blob. Can be used to locate the blob stored in the Cloud Storage bucket of the consumer project.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Scalar": {
        "description": "One point viewable on a scalar metric plot.",
        "properties": {
          "value": {
            "description": "Value of the point at this step / timestamp.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1TensorboardTensor": {
        "description": "One point viewable on a tensor metric plot.",
        "properties": {
          "value": {
            "description": "Required. Serialized form of https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/framework/tensor.proto",
            "format": "byte",
            "type": "string"
          },
          "versionNumber": {
            "description": "Optional. Version number of TensorProto used to serialize value.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{tensorboardRun}:write{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for TensorboardService.WriteTensorboardRunData.",
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
