{
  "name": "aiplatform_projects_locations_models_evaluations_slices_batchImport",
  "description": "Imports a list of externally generated EvaluatedAnnotations.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the parent ModelEvaluationSlice resource. Format: `projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchImportEvaluatedAnnotationsRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1BatchImportEvaluatedAnnotationsRequest": {
        "description": "Request message for ModelService.BatchImportEvaluatedAnnotations",
        "properties": {
          "evaluatedAnnotations": {
            "description": "Required. Evaluated annotations resource to be imported.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EvaluatedAnnotation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1EvaluatedAnnotation": {
        "description": "True positive, false positive, or false negative. EvaluatedAnnotation is only available under ModelEvaluationSlice with slice of `annotationSpec` dimension.",
        "properties": {
          "dataItemPayload": {
            "description": "Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.",
            "readOnly": true
          },
          "errorAnalysisAnnotations": {
            "description": "Annotations of model error analysis results.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation"
            },
            "type": "array"
          },
          "evaluatedDataItemViewId": {
            "description": "Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.",
            "readOnly": true,
            "type": "string"
          },
          "explanations": {
            "description": "Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EvaluatedAnnotationExplanation"
            },
            "type": "array"
          },
          "groundTruths": {
            "description": "Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn't match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri",
            "items": {},
            "readOnly": true,
            "type": "array"
          },
          "predictions": {
            "description": "Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn't match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri",
            "items": {},
            "readOnly": true,
            "type": "array"
          },
          "type": {
            "description": "Output only. Type of the EvaluatedAnnotation.",
            "enum": [
              "EVALUATED_ANNOTATION_TYPE_UNSPECIFIED",
              "TRUE_POSITIVE",
              "FALSE_POSITIVE",
              "FALSE_NEGATIVE"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotation": {
        "description": "Model error analysis for each annotation.",
        "properties": {
          "attributedItems": {
            "description": "Attributed items for a given annotation, typically representing neighbors from the training sets constrained by the query type.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem"
            },
            "type": "array"
          },
          "outlierScore": {
            "description": "The outlier score of this annotated item. Usually defined as the min of all distances from attributed items.",
            "format": "double",
            "type": "number"
          },
          "outlierThreshold": {
            "description": "The threshold used to determine if this annotation is an outlier or not.",
            "format": "double",
            "type": "number"
          },
          "queryType": {
            "description": "The query type used for finding the attributed items.",
            "enum": [
              "QUERY_TYPE_UNSPECIFIED",
              "ALL_SIMILAR",
              "SAME_CLASS_SIMILAR",
              "SAME_CLASS_DISSIMILAR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ErrorAnalysisAnnotationAttributedItem": {
        "description": "Attributed items for a given annotation, typically representing neighbors from the training sets constrained by the query type.",
        "properties": {
          "annotationResourceName": {
            "description": "The unique ID for each annotation. Used by FE to allocate the annotation in DB.",
            "type": "string"
          },
          "distance": {
            "description": "The distance of this item to the annotation.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1EvaluatedAnnotationExplanation": {
        "description": "Explanation result of the prediction produced by the Model.",
        "properties": {
          "explanation": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Explanation"
          },
          "explanationType": {
            "description": "Explanation type. For AutoML Image Classification models, possible values are: * `image-integrated-gradients` * `image-xrai`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Explanation": {
        "description": "Explanation of a prediction (provided in PredictResponse.predictions) produced by the Model on a given instance.",
        "properties": {
          "attributions": {
            "description": "Output only. Feature attributions grouped by predicted outputs. For Models that predict only one output, such as regression Models that predict only one score, there is only one attibution that explains the predicted output. For Models that predict multiple outputs, such as multiclass Models that predict multiple classes, each element explains one specific item. Attribution.output_index can be used to identify which output this attribution is explaining. By default, we provide Shapley values for the predicted class. However, you can configure the explanation request to generate Shapley values for any other classes too. For example, if a model predicts a probability of `0.4` for approving a loan application, the model's decision is to reject the application since `p(reject) = 0.6 > p(approve) = 0.4`, and the default Shapley values would be computed for rejection decision and not approval, even though the latter might be the positive class. If users set ExplanationParameters.top_k, the attributions are sorted by instance_output_value in descending order. If ExplanationParameters.output_indices is specified, the attributions are stored by Attribution.output_index in the same order as they appear in the output_indices.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Attribution"
            },
            "readOnly": true,
            "type": "array"
          },
          "neighbors": {
            "description": "Output only. List of the nearest neighbors for example-based explanations. For models deployed with the examples explanations feature enabled, the attributions field is empty and instead the neighbors field is populated.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Neighbor"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Attribution": {
        "description": "Attribution that explains a particular prediction output.",
        "properties": {
          "approximationError": {
            "description": "Output only. Error of feature_attributions caused by approximation used in the explanation method. Lower value means more precise attributions. * For Sampled Shapley attribution, increasing path_count might reduce the error. * For Integrated Gradients attribution, increasing step_count might reduce the error. * For XRAI attribution, increasing step_count might reduce the error. See [this introduction](/vertex-ai/docs/explainable-ai/overview) for more information.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "baselineOutputValue": {
            "description": "Output only. Model predicted output if the input instance is constructed from the baselines of all the features defined in ExplanationMetadata.inputs. The field name of the output is determined by the key in ExplanationMetadata.outputs. If the Model's predicted output has multiple dimensions (rank > 1), this is the value in the output located by output_index. If there are multiple baselines, their output values are averaged.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "featureAttributions": {
            "description": "Output only. Attributions of each explained feature. Features are extracted from the prediction instances according to explanation metadata for inputs. The value is a struct, whose keys are the name of the feature. The values are how much the feature in the instance contributed to the predicted result. The format of the value is determined by the feature's input format: * If the feature is a scalar value, the attribution value is a floating number. * If the feature is an array of scalar values, the attribution value is an array. * If the feature is a struct, the attribution value is a struct. The keys in the attribution value struct are the same as the keys in the feature struct. The formats of the values in the attribution struct are determined by the formats of the values in the feature struct. The ExplanationMetadata.feature_attributions_schema_uri field, pointed to by the ExplanationSpec field of the Endpoint.deployed_models object, points to the schema file that describes the features and their attribution values (if it is populated).",
            "readOnly": true
          },
          "instanceOutputValue": {
            "description": "Output only. Model predicted output on the corresponding explanation instance. The field name of the output is determined by the key in ExplanationMetadata.outputs. If the Model predicted output has multiple dimensions, this is the value in the output located by output_index.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "outputDisplayName": {
            "description": "Output only. The display name of the output identified by output_index. For example, the predicted class name by a multi-classification Model. This field is only populated iff the Model predicts display names as a separate field along with the explained output. The predicted display name must has the same shape of the explained output, and can be located using output_index.",
            "readOnly": true,
            "type": "string"
          },
          "outputIndex": {
            "description": "Output only. The index that locates the explained prediction output. If the prediction output is a scalar value, output_index is not populated. If the prediction output has multiple dimensions, the length of the output_index list is the same as the number of dimensions of the output. The i-th element in output_index is the element index of the i-th dimension of the output vector. Indices start from 0.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "readOnly": true,
            "type": "array"
          },
          "outputName": {
            "description": "Output only. Name of the explain output. Specified as the key in ExplanationMetadata.outputs.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Neighbor": {
        "description": "Neighbors for example-based explanations.",
        "properties": {
          "neighborDistance": {
            "description": "Output only. The neighbor distance.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          },
          "neighborId": {
            "description": "Output only. The neighbor id.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{parent}:batchImport{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response message for ModelService.BatchImportEvaluatedAnnotations",
        "**Key properties:**",
        {
          "$ul": [
            "**importedEvaluatedAnnotationsCount**: Output only. Number of EvaluatedAnnotations imported."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
