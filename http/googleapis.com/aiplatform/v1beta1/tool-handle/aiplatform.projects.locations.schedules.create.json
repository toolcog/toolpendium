{
  "name": "aiplatform_projects_locations_schedules_create",
  "description": "Creates a Schedule.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the Location to create the Schedule in. Format: `projects/{project}/locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Schedule"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1Schedule": {
        "description": "An instance of a Schedule periodically schedules runs to make API calls based on user specified time specification and API request type.",
        "properties": {
          "allowQueueing": {
            "description": "Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.",
            "type": "boolean"
          },
          "catchUp": {
            "description": "Output only. Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.",
            "readOnly": true,
            "type": "boolean"
          },
          "createPipelineJobRequest": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1CreatePipelineJobRequest"
          },
          "createTime": {
            "description": "Output only. Timestamp when this Schedule was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "cron": {
            "description": "Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
            "type": "string"
          },
          "displayName": {
            "description": "Required. User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            "type": "string"
          },
          "endTime": {
            "description": "Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastPauseTime": {
            "description": "Output only. Timestamp when this Schedule was last paused. Unset if never paused.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "lastResumeTime": {
            "description": "Output only. Timestamp when this Schedule was last resumed. Unset if never resumed from pause.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "lastScheduledRunResponse": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ScheduleRunResponse"
          },
          "maxConcurrentRunCount": {
            "description": "Required. Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).",
            "format": "int64",
            "type": "string"
          },
          "maxRunCount": {
            "description": "Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.",
            "format": "int64",
            "type": "string"
          },
          "name": {
            "description": "Immutable. The resource name of the Schedule.",
            "type": "string"
          },
          "nextRunTime": {
            "description": "Output only. Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.",
            "format": "google-datetime",
            "type": "string"
          },
          "startedRunCount": {
            "description": "Output only. The number of runs started by this schedule.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The state of this Schedule.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "PAUSED",
              "COMPLETED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this Schedule was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1CreatePipelineJobRequest": {
        "description": "Request message for PipelineService.CreatePipelineJob.",
        "properties": {
          "parent": {
            "description": "Required. The resource name of the Location to create the PipelineJob in. Format: `projects/{project}/locations/{location}`",
            "type": "string"
          },
          "pipelineJob": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineJob"
          },
          "pipelineJobId": {
            "description": "The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineJob": {
        "description": "An instance of a machine learning PipelineJob.",
        "properties": {
          "createTime": {
            "description": "Output only. Pipeline creation time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            "type": "string"
          },
          "encryptionSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EncryptionSpec"
          },
          "endTime": {
            "description": "Output only. Pipeline end time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "jobDetail": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineJobDetail"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The resource name of the PipelineJob.",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "description": "The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.",
            "type": "string"
          },
          "pipelineSpec": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "The spec of the pipeline.",
            "type": "object"
          },
          "preflightValidations": {
            "description": "Optional. Whether to do component level validations before job creation.",
            "type": "boolean"
          },
          "reservedIpRanges": {
            "description": "A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "runtimeConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig"
          },
          "scheduleName": {
            "description": "Output only. The schedule resource name. Only returned if the Pipeline is created by Schedule API.",
            "readOnly": true,
            "type": "string"
          },
          "serviceAccount": {
            "description": "The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.",
            "type": "string"
          },
          "startTime": {
            "description": "Output only. Pipeline start time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of the job.",
            "enum": [
              "PIPELINE_STATE_UNSPECIFIED",
              "PIPELINE_STATE_QUEUED",
              "PIPELINE_STATE_PENDING",
              "PIPELINE_STATE_RUNNING",
              "PIPELINE_STATE_SUCCEEDED",
              "PIPELINE_STATE_FAILED",
              "PIPELINE_STATE_CANCELLING",
              "PIPELINE_STATE_CANCELLED",
              "PIPELINE_STATE_PAUSED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "templateMetadata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTemplateMetadata"
          },
          "templateUri": {
            "description": "A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this PipelineJob was most recently updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1EncryptionSpec": {
        "description": "Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
        "properties": {
          "kmsKeyName": {
            "description": "Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineJobDetail": {
        "description": "The runtime detail of PipelineJob.",
        "properties": {
          "pipelineContext": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Context"
          },
          "pipelineRunContext": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Context"
          },
          "taskDetails": {
            "description": "Output only. The runtime details of the tasks under the pipeline.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskDetail"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Context": {
        "description": "Instance of a general context.",
        "properties": {
          "createTime": {
            "description": "Output only. Timestamp when this Context was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Context",
            "type": "string"
          },
          "displayName": {
            "description": "User provided display name of the Context. May be up to 128 Unicode characters.",
            "type": "string"
          },
          "etag": {
            "description": "An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).",
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.",
            "type": "object"
          },
          "name": {
            "description": "Immutable. The resource name of the Context.",
            "type": "string"
          },
          "parentContexts": {
            "description": "Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "schemaTitle": {
            "description": "The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
            "type": "string"
          },
          "schemaVersion": {
            "description": "The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this Context was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTaskDetail": {
        "description": "The runtime detail of a task execution.",
        "properties": {
          "createTime": {
            "description": "Output only. Task create time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. Task end time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "execution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Execution"
          },
          "executorDetail": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetail"
          },
          "inputs": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskDetailArtifactList"
            },
            "description": "Output only. The runtime input artifacts of the task.",
            "readOnly": true,
            "type": "object"
          },
          "outputs": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskDetailArtifactList"
            },
            "description": "Output only. The runtime output artifacts of the task.",
            "readOnly": true,
            "type": "object"
          },
          "parentTaskId": {
            "description": "Output only. The id of the parent task if the task is within a component scope. Empty if the task is at the root level.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "pipelineTaskStatus": {
            "description": "Output only. A list of task status. This field keeps a record of task status evolving over time.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskDetailPipelineTaskStatus"
            },
            "readOnly": true,
            "type": "array"
          },
          "startTime": {
            "description": "Output only. Task start time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the task.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "RUNNING",
              "SUCCEEDED",
              "CANCEL_PENDING",
              "CANCELLING",
              "CANCELLED",
              "FAILED",
              "SKIPPED",
              "NOT_TRIGGERED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "taskId": {
            "description": "Output only. The system generated ID of the task.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "taskName": {
            "description": "Output only. The user specified name of the task that is defined in pipeline_spec.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Execution": {
        "description": "Instance of a general execution.",
        "properties": {
          "createTime": {
            "description": "Output only. Timestamp when this Execution was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Execution",
            "type": "string"
          },
          "displayName": {
            "description": "User provided display name of the Execution. May be up to 128 Unicode characters.",
            "type": "string"
          },
          "etag": {
            "description": "An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize your Executions. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Execution (System labels are excluded).",
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Properties of the Execution. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The resource name of the Execution.",
            "readOnly": true,
            "type": "string"
          },
          "schemaTitle": {
            "description": "The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
            "type": "string"
          },
          "schemaVersion": {
            "description": "The version of the schema in `schema_title` to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
            "type": "string"
          },
          "state": {
            "description": "The state of this Execution. This is a property of the Execution, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines) and the system does not prescribe or check the validity of state transitions.",
            "enum": [
              "STATE_UNSPECIFIED",
              "NEW",
              "RUNNING",
              "COMPLETE",
              "FAILED",
              "CACHED",
              "CANCELLED"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this Execution was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetail": {
        "description": "The runtime detail of a pipeline executor.",
        "properties": {
          "containerDetail": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailContainerDetail"
          },
          "customJobDetail": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailCustomJobDetail"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailContainerDetail": {
        "description": "The detail of a container execution. It contains the job names of the lifecycle of a container execution.",
        "properties": {
          "failedMainJobs": {
            "description": "Output only. The names of the previously failed CustomJob for the main container executions. The list includes the all attempts in chronological order.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "failedPreCachingCheckJobs": {
            "description": "Output only. The names of the previously failed CustomJob for the pre-caching-check container executions. This job will be available if the PipelineJob.pipeline_spec specifies the `pre_caching_check` hook in the lifecycle events. The list includes the all attempts in chronological order.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "mainJob": {
            "description": "Output only. The name of the CustomJob for the main container execution.",
            "readOnly": true,
            "type": "string"
          },
          "preCachingCheckJob": {
            "description": "Output only. The name of the CustomJob for the pre-caching-check container execution. This job will be available if the PipelineJob.pipeline_spec specifies the `pre_caching_check` hook in the lifecycle events.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTaskExecutorDetailCustomJobDetail": {
        "description": "The detailed info for a custom job executor.",
        "properties": {
          "failedJobs": {
            "description": "Output only. The names of the previously failed CustomJob. The list includes the all attempts in chronological order.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "job": {
            "description": "Output only. The name of the CustomJob.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTaskDetailArtifactList": {
        "description": "A list of artifact metadata.",
        "properties": {
          "artifacts": {
            "description": "Output only. A list of artifact metadata.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Artifact"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Artifact": {
        "description": "Instance of a general artifact.",
        "properties": {
          "createTime": {
            "description": "Output only. Timestamp when this Artifact was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Artifact",
            "type": "string"
          },
          "displayName": {
            "description": "User provided display name of the Artifact. May be up to 128 Unicode characters.",
            "type": "string"
          },
          "etag": {
            "description": "An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize your Artifacts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Artifact (System labels are excluded).",
            "type": "object"
          },
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Properties of the Artifact. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The resource name of the Artifact.",
            "readOnly": true,
            "type": "string"
          },
          "schemaTitle": {
            "description": "The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
            "type": "string"
          },
          "schemaVersion": {
            "description": "The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
            "type": "string"
          },
          "state": {
            "description": "The state of this Artifact. This is a property of the Artifact, and does not imply or capture any ongoing process. This property is managed by clients (such as Vertex AI Pipelines), and the system does not prescribe or check the validity of state transitions.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "LIVE"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this Artifact was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "uri": {
            "description": "The uniform resource identifier of the artifact file. May be empty if there is no actual artifact file.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTaskDetailPipelineTaskStatus": {
        "description": "A single record of the task status.",
        "properties": {
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "state": {
            "description": "Output only. The state of the task.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PENDING",
              "RUNNING",
              "SUCCEEDED",
              "CANCEL_PENDING",
              "CANCELLING",
              "CANCELLED",
              "FAILED",
              "SKIPPED",
              "NOT_TRIGGERED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Update time of this status.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfig": {
        "description": "The runtime config of a PipelineJob.",
        "properties": {
          "failurePolicy": {
            "description": "Represents the failure policy of a pipeline. Currently, the default of a pipeline is that the pipeline will continue to run until no more tasks can be executed, also known as PIPELINE_FAILURE_POLICY_FAIL_SLOW. However, if a pipeline is set to PIPELINE_FAILURE_POLICY_FAIL_FAST, it will stop scheduling any new tasks when a task has failed. Any scheduled tasks will continue to completion.",
            "enum": [
              "PIPELINE_FAILURE_POLICY_UNSPECIFIED",
              "PIPELINE_FAILURE_POLICY_FAIL_SLOW",
              "PIPELINE_FAILURE_POLICY_FAIL_FAST"
            ],
            "type": "string"
          },
          "gcsOutputDirectory": {
            "description": "Required. A path in a Cloud Storage bucket, which will be treated as the root output directory of the pipeline. It is used by the system to generate the paths of output artifacts. The artifact paths are generated with a sub-path pattern `{job_id}/{task_id}/{output_key}` under the specified output directory. The service account specified in this pipeline must have the `storage.objects.get` and `storage.objects.create` permissions for this bucket.",
            "type": "string"
          },
          "inputArtifacts": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigInputArtifact"
            },
            "description": "The runtime artifacts of the PipelineJob. The key will be the input artifact name and the value would be one of the InputArtifact.",
            "type": "object"
          },
          "parameterValues": {
            "additionalProperties": {},
            "description": "The runtime parameters of the PipelineJob. The parameters will be passed into PipelineJob.pipeline_spec to replace the placeholders at runtime. This field is used by pipelines built using `PipelineJob.pipeline_spec.schema_version` 2.1.0, such as pipelines built using Kubeflow Pipelines SDK 1.9 or higher and the v2 DSL.",
            "type": "object"
          },
          "parameters": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Value"
            },
            "deprecated": true,
            "description": "Deprecated. Use RuntimeConfig.parameter_values instead. The runtime parameters of the PipelineJob. The parameters will be passed into PipelineJob.pipeline_spec to replace the placeholders at runtime. This field is used by pipelines built using `PipelineJob.pipeline_spec.schema_version` 2.0.0 or lower, such as pipelines built using Kubeflow Pipelines SDK 1.8 or lower.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineJobRuntimeConfigInputArtifact": {
        "description": "The type of an input artifact.",
        "properties": {
          "artifactId": {
            "description": "Artifact resource id from MLMD. Which is the last portion of an artifact resource name: `projects/{project}/locations/{location}/metadataStores/default/artifacts/{artifact_id}`. The artifact must stay within the same project, location and default metadatastore as the pipeline.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Value": {
        "description": "Value is the value of the field.",
        "properties": {
          "doubleValue": {
            "description": "A double value.",
            "format": "double",
            "type": "number"
          },
          "intValue": {
            "description": "An integer value.",
            "format": "int64",
            "type": "string"
          },
          "stringValue": {
            "description": "A string value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PipelineTemplateMetadata": {
        "description": "Pipeline template metadata if PipelineJob.template_uri is from supported template registry. Currently, the only supported registry is Artifact Registry.",
        "properties": {
          "version": {
            "description": "The version_name in artifact registry. Will always be presented in output if the PipelineJob.template_uri is from supported template registry. Format is \"sha256:abcdef123456...\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ScheduleRunResponse": {
        "description": "Status of a scheduled run.",
        "properties": {
          "runResponse": {
            "description": "The response of the scheduled run.",
            "type": "string"
          },
          "scheduledRunTime": {
            "description": "The scheduled run time based on the user-specified schedule.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{parent}/schedules{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An instance of a Schedule periodically schedules runs to make API calls based on user specified time specification and API request type.",
        "**Key properties:**",
        {
          "$ul": [
            "**allowQueueing**: Optional. Whether new scheduled runs can be queued when max_concurrent_runs limit is reached. If set to true, new runs will be queued instead of skipped. Default to false.",
            "**catchUp**: Output only. Whether to backfill missed runs when the schedule is resumed from PAUSED state. If set to true, all missed runs will be scheduled. New runs will be scheduled after the backfill is complete. Default to false.",
            [
              "**createPipelineJobRequest**: Request message for PipelineService.CreatePipelineJob.",
              {
                "$ul": [
                  "**parent**: Required. The resource name of the Location to create the PipelineJob in. Format: `projects/{project}/locations/{location}`",
                  [
                    "**pipelineJob**: An instance of a machine learning PipelineJob.",
                    {
                      "$ul": [
                        "**createTime**: Output only. Pipeline creation time.",
                        "**displayName**: The display name of the Pipeline. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
                        [
                          "**encryptionSpec**: Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
                          {
                            "$ul": [
                              "**kmsKeyName**: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created."
                            ]
                          }
                        ],
                        "**endTime**: Output only. Pipeline end time.",
                        [
                          "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
                          {
                            "$ul": [
                              "**code**: The status code, which should be an enum value of google.rpc.Code.",
                              "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                              "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                            ]
                          }
                        ],
                        [
                          "**jobDetail**: The runtime detail of PipelineJob.",
                          {
                            "$ul": [
                              [
                                "**pipelineContext**: Instance of a general context.",
                                {
                                  "$ul": [
                                    "**createTime**: Output only. Timestamp when this Context was created.",
                                    "**description**: Description of the Context",
                                    "**displayName**: User provided display name of the Context. May be up to 128 Unicode characters.",
                                    "**etag**: An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
                                    "**labels**: The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).",
                                    "**metadata**: Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.",
                                    "**name**: Immutable. The resource name of the Context.",
                                    "**parentContexts**: Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.",
                                    "**schemaTitle**: The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
                                    "**schemaVersion**: The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
                                    "**updateTime**: Output only. Timestamp when this Context was last updated."
                                  ]
                                }
                              ],
                              [
                                "**pipelineRunContext**: Instance of a general context.",
                                {
                                  "$ul": [
                                    "**createTime**: Output only. Timestamp when this Context was created.",
                                    "**description**: Description of the Context",
                                    "**displayName**: User provided display name of the Context. May be up to 128 Unicode characters.",
                                    "**etag**: An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
                                    "**labels**: The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).",
                                    "**metadata**: Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.",
                                    "**name**: Immutable. The resource name of the Context.",
                                    "**parentContexts**: Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.",
                                    "**schemaTitle**: The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
                                    "**schemaVersion**: The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.",
                                    "**updateTime**: Output only. Timestamp when this Context was last updated."
                                  ]
                                }
                              ],
                              "**taskDetails**: Output only. The runtime details of the tasks under the pipeline."
                            ]
                          }
                        ],
                        "**labels**: The labels with user-defined metadata to organize PipelineJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. Note there is some reserved label key for Vertex AI Pipelines. - `vertex-ai-pipelines-run-billing-id`, user set value will get overrided.",
                        "**name**: Output only. The resource name of the PipelineJob.",
                        "**network**: The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Pipeline Job's workload should be peered. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. Private services access must already be configured for the network. Pipeline job will apply the network configuration to the Google Cloud resources being launched, if applied, such as Vertex AI Training or Dataflow job. If left unspecified, the workload is not peered with any network.",
                        "**pipelineSpec**: The spec of the pipeline.",
                        "**preflightValidations**: Optional. Whether to do component level validations before job creation.",
                        "**reservedIpRanges**: A list of names for the reserved ip ranges under the VPC network that can be used for this Pipeline Job's workload. If set, we will deploy the Pipeline Job's workload within the provided ip ranges. Otherwise, the job will be deployed to any ip ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].",
                        [
                          "**runtimeConfig**: The runtime config of a PipelineJob.",
                          {
                            "$ul": [
                              "**failurePolicy**: Represents the failure policy of a pipeline. Currently, the default of a pipeline is that the pipeline will continue to run until no more tasks can be executed, also known as PIPELINE_FAILURE_POLICY_FAIL_SLOW. However, if a pipeline is set to PIPELINE_FAILURE_POLICY_FAIL_FAST, it will stop scheduling any new tasks when a task has failed. Any scheduled tasks will continue to completion.",
                              "**gcsOutputDirectory**: Required. A path in a Cloud Storage bucket, which will be treated as the root output directory of the pipeline. It is used by the system to generate the paths of output artifacts. The artifact paths are generated with a sub-path pattern `{job_id}/{task_id}/{output_key}` under the specified output directory. The service account specified in this pipeline must have the `storage.objects.get` and `storage.objects.create` permissions for this bucket.",
                              "**inputArtifacts**: The runtime artifacts of the PipelineJob. The key will be the input artifact name and the value would be one of the InputArtifact.",
                              "**parameterValues**: The runtime parameters of the PipelineJob. The parameters will be passed into PipelineJob.pipeline_spec to replace the placeholders at runtime. This field is used by pipelines built using `PipelineJob.pipeline_spec.schema_version` 2.1.0, such as pipelines built using Kubeflow Pipelines SDK 1.9 or higher and the v2 DSL.",
                              "**parameters**: Deprecated. Use RuntimeConfig.parameter_values instead. The runtime parameters of the PipelineJob. The parameters will be passed into PipelineJob.pipeline_spec to replace the placeholders at runtime. This field is used by pipelines built using `PipelineJob.pipeline_spec.schema_version` 2.0.0 or lower, such as pipelines built using Kubeflow Pipelines SDK 1.8 or lower."
                            ]
                          }
                        ],
                        "**scheduleName**: Output only. The schedule resource name. Only returned if the Pipeline is created by Schedule API.",
                        "**serviceAccount**: The service account that the pipeline workload runs as. If not specified, the Compute Engine default service account in the project will be used. See https://cloud.google.com/compute/docs/access/service-accounts#default_service_account Users starting the pipeline must have the `iam.serviceAccounts.actAs` permission on this service account.",
                        "**startTime**: Output only. Pipeline start time.",
                        "**state**: Output only. The detailed state of the job.",
                        [
                          "**templateMetadata**: Pipeline template metadata if PipelineJob.template_uri is from supported template registry. Currently, the only supported registry is Artifact Registry.",
                          {
                            "$ul": [
                              "**version**: The version_name in artifact registry. Will always be presented in output if the PipelineJob.template_uri is from supported template registry. Format is \"sha256:abcdef123456...\"."
                            ]
                          }
                        ],
                        "**templateUri**: A template uri from where the PipelineJob.pipeline_spec, if empty, will be downloaded. Currently, only uri from Vertex Template Registry & Gallery is supported. Reference to https://cloud.google.com/vertex-ai/docs/pipelines/create-pipeline-template.",
                        "**updateTime**: Output only. Timestamp when this PipelineJob was most recently updated."
                      ]
                    }
                  ],
                  "**pipelineJobId**: The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`."
                ]
              }
            ],
            "**createTime**: Output only. Timestamp when this Schedule was created.",
            "**cron**: Cron schedule (https://en.wikipedia.org/wiki/Cron) to launch scheduled runs. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: \"CRON_TZ=${IANA_TIME_ZONE}\" or \"TZ=${IANA_TIME_ZONE}\". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, \"CRON_TZ=America/New_York 1 * * * *\", or \"TZ=America/New_York 1 * * * *\".",
            "**displayName**: Required. User provided name of the Schedule. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            "**endTime**: Optional. Timestamp after which no new runs can be scheduled. If specified, The schedule will be completed when either end_time is reached or when scheduled_run_count >= max_run_count. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.",
            "**lastPauseTime**: Output only. Timestamp when this Schedule was last paused. Unset if never paused.",
            "**lastResumeTime**: Output only. Timestamp when this Schedule was last resumed. Unset if never resumed from pause.",
            [
              "**lastScheduledRunResponse**: Status of a scheduled run.",
              {
                "$ul": [
                  "**runResponse**: The response of the scheduled run.",
                  "**scheduledRunTime**: The scheduled run time based on the user-specified schedule."
                ]
              }
            ],
            "**maxConcurrentRunCount**: Required. Maximum number of runs that can be started concurrently for this Schedule. This is the limit for starting the scheduled requests and not the execution of the operations/jobs created by the requests (if applicable).",
            "**maxRunCount**: Optional. Maximum run count of the schedule. If specified, The schedule will be completed when either started_run_count >= max_run_count or when end_time is reached. If not specified, new runs will keep getting scheduled until this Schedule is paused or deleted. Already scheduled runs will be allowed to complete. Unset if not specified.",
            "**name**: Immutable. The resource name of the Schedule.",
            "**nextRunTime**: Output only. Timestamp when this Schedule should schedule the next run. Having a next_run_time in the past means the runs are being started behind schedule.",
            "**startTime**: Optional. Timestamp after which the first run can be scheduled. Default to Schedule create time if not specified.",
            "**startedRunCount**: Output only. The number of runs started by this schedule.",
            "**state**: Output only. The state of this Schedule.",
            "**updateTime**: Output only. Timestamp when this Schedule was updated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
