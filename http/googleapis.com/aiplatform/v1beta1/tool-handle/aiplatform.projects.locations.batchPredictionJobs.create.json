{
  "name": "aiplatform_projects_locations_batchPredictionJobs_create",
  "description": "Creates a BatchPredictionJob. A BatchPredictionJob once created will right away be attempted to start.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the Location to create the BatchPredictionJob in. Format: `projects/{project}/locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchPredictionJob"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1BatchPredictionJob": {
        "description": "A job that uses a Model to produce predictions on multiple input instances. If predictions for significant portion of the instances fail, the job may finish without attempting predictions for all remaining instances.",
        "properties": {
          "completionStats": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1CompletionStats"
          },
          "createTime": {
            "description": "Output only. Time when the BatchPredictionJob was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dedicatedResources": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchDedicatedResources"
          },
          "disableContainerLogging": {
            "description": "For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.",
            "type": "boolean"
          },
          "displayName": {
            "description": "Required. The user-defined name of this BatchPredictionJob.",
            "type": "string"
          },
          "encryptionSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EncryptionSpec"
          },
          "endTime": {
            "description": "Output only. Time when the BatchPredictionJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "explanationSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationSpec"
          },
          "generateExplanation": {
            "description": "Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.",
            "type": "boolean"
          },
          "inputConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfig"
          },
          "instanceConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfig"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "type": "object"
          },
          "manualBatchTuningParameters": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ManualBatchTuningParameters"
          },
          "model": {
            "description": "The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`",
            "type": "string"
          },
          "modelMonitoringConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringConfig"
          },
          "modelMonitoringStatsAnomalies": {
            "description": "Get batch prediction job monitoring statistics.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies"
            },
            "type": "array"
          },
          "modelMonitoringStatus": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "modelParameters": {
            "description": "The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri."
          },
          "modelVersionId": {
            "description": "Output only. The version ID of the Model that produces the predictions via this job.",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. Resource name of the BatchPredictionJob.",
            "readOnly": true,
            "type": "string"
          },
          "outputConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfig"
          },
          "outputInfo": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BatchPredictionJobOutputInfo"
          },
          "partialFailures": {
            "description": "Output only. Partial failures encountered. For example, single files that can't be read. This field never exceeds 20 entries. Status details fields contain standard Google Cloud error details.",
            "items": {
              "$ref": "#/$defs/GoogleRpcStatus"
            },
            "readOnly": true,
            "type": "array"
          },
          "resourcesConsumed": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ResourcesConsumed"
          },
          "serviceAccount": {
            "description": "The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.",
            "type": "string"
          },
          "startTime": {
            "description": "Output only. Time when the BatchPredictionJob for the first time entered the `JOB_STATE_RUNNING` state.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of the job.",
            "enum": [
              "JOB_STATE_UNSPECIFIED",
              "JOB_STATE_QUEUED",
              "JOB_STATE_PENDING",
              "JOB_STATE_RUNNING",
              "JOB_STATE_SUCCEEDED",
              "JOB_STATE_FAILED",
              "JOB_STATE_CANCELLING",
              "JOB_STATE_CANCELLED",
              "JOB_STATE_PAUSED",
              "JOB_STATE_EXPIRED",
              "JOB_STATE_UPDATING",
              "JOB_STATE_PARTIALLY_SUCCEEDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "unmanagedContainerModel": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1UnmanagedContainerModel"
          },
          "updateTime": {
            "description": "Output only. Time when the BatchPredictionJob was most recently updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1CompletionStats": {
        "description": "Success and error statistics of processing multiple entities (for example, DataItems or structured data rows) in batch.",
        "properties": {
          "failedCount": {
            "description": "Output only. The number of entities for which any error was encountered.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "incompleteCount": {
            "description": "Output only. In cases when enough errors are encountered a job, pipeline, or operation may be failed as a whole. Below is the number of entities for which the processing had not been finished (either in successful or failed state). Set to -1 if the number is unknown (for example, the operation failed before the total entity number could be collected).",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "successfulCount": {
            "description": "Output only. The number of entities that had been processed successfully.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "successfulForecastPointCount": {
            "description": "Output only. The number of the successful forecast points that are generated by the forecasting model. This is ONLY used by the forecasting batch prediction.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BatchDedicatedResources": {
        "description": "A description of resources that are used for performing batch operations, are dedicated to a Model, and need manual configuration.",
        "properties": {
          "machineSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1MachineSpec"
          },
          "maxReplicaCount": {
            "description": "Immutable. The maximum number of machine replicas the batch operation may be scaled to. The default value is 10.",
            "format": "int32",
            "type": "integer"
          },
          "startingReplicaCount": {
            "description": "Immutable. The number of machine replicas used at the start of the batch operation. If not set, Vertex AI decides starting number, not greater than max_replica_count",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1MachineSpec": {
        "description": "Specification of a single machine.",
        "properties": {
          "acceleratorCount": {
            "description": "The number of accelerators to attach to the machine.",
            "format": "int32",
            "type": "integer"
          },
          "acceleratorType": {
            "description": "Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.",
            "enum": [
              "ACCELERATOR_TYPE_UNSPECIFIED",
              "NVIDIA_TESLA_K80",
              "NVIDIA_TESLA_P100",
              "NVIDIA_TESLA_V100",
              "NVIDIA_TESLA_P4",
              "NVIDIA_TESLA_T4",
              "NVIDIA_TESLA_A100",
              "NVIDIA_A100_80GB",
              "NVIDIA_L4",
              "NVIDIA_H100_80GB",
              "TPU_V2",
              "TPU_V3",
              "TPU_V4_POD",
              "TPU_V5_LITEPOD"
            ],
            "type": "string"
          },
          "machineType": {
            "description": "Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.",
            "type": "string"
          },
          "tpuTopology": {
            "description": "Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\").",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1EncryptionSpec": {
        "description": "Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
        "properties": {
          "kmsKeyName": {
            "description": "Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationSpec": {
        "description": "Specification of Model explanation.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationMetadata"
          },
          "parameters": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationParameters"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationMetadata": {
        "description": "Metadata describing the Model's input and output for explanation.",
        "properties": {
          "featureAttributionsSchemaUri": {
            "description": "Points to a YAML file stored on Google Cloud Storage describing the format of the feature attributions. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML tabular Models always have this field populated by Vertex AI. Note: The URI given on output may be different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
            "type": "string"
          },
          "inputs": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata"
            },
            "description": "Required. Map from feature names to feature input metadata. Keys are the name of the features. Values are the specification of the feature. An empty InputMetadata is valid. It describes a text feature which has the name specified as the key in ExplanationMetadata.inputs. The baseline of the empty feature is chosen by Vertex AI. For Vertex AI-provided Tensorflow images, the key can be any friendly name of the feature. Once specified, featureAttributions are keyed by this key (if not grouped with another feature). For custom images, the key must match with the key in instance.",
            "type": "object"
          },
          "latentSpaceSource": {
            "description": "Name of the source to generate embeddings for example based explanations.",
            "type": "string"
          },
          "outputs": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata"
            },
            "description": "Required. Map from output names to output metadata. For Vertex AI-provided Tensorflow images, keys can be any user defined string that consists of any UTF-8 characters. For custom images, keys are the name of the output field in the prediction to be explained. Currently only one key is allowed.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata": {
        "description": "Metadata of the input of a feature. Fields other than InputMetadata.input_baselines are applicable only for Models that are using Vertex AI-provided images for Tensorflow.",
        "properties": {
          "denseShapeTensorName": {
            "description": "Specifies the shape of the values of the input if the input is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.",
            "type": "string"
          },
          "encodedBaselines": {
            "description": "A list of baselines for the encoded tensor. The shape of each baseline should match the shape of the encoded tensor. If a scalar is provided, Vertex AI broadcasts to the same shape as the encoded tensor.",
            "items": {},
            "type": "array"
          },
          "encodedTensorName": {
            "description": "Encoded tensor is a transformation of the input tensor. Must be provided if choosing Integrated Gradients attribution or XRAI attribution and the input tensor is not differentiable. An encoded tensor is generated if the input tensor is encoded by a lookup table.",
            "type": "string"
          },
          "encoding": {
            "description": "Defines how the feature is encoded into the input tensor. Defaults to IDENTITY.",
            "enum": [
              "ENCODING_UNSPECIFIED",
              "IDENTITY",
              "BAG_OF_FEATURES",
              "BAG_OF_FEATURES_SPARSE",
              "INDICATOR",
              "COMBINED_EMBEDDING",
              "CONCAT_EMBEDDING"
            ],
            "type": "string"
          },
          "featureValueDomain": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain"
          },
          "groupName": {
            "description": "Name of the group that the input belongs to. Features with the same group name will be treated as one feature when computing attributions. Features grouped together can have different shapes in value. If provided, there will be one single attribution generated in Attribution.feature_attributions, keyed by the group name.",
            "type": "string"
          },
          "indexFeatureMapping": {
            "description": "A list of feature names for each index in the input tensor. Required when the input InputMetadata.encoding is BAG_OF_FEATURES, BAG_OF_FEATURES_SPARSE, INDICATOR.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "indicesTensorName": {
            "description": "Specifies the index of the values of the input tensor. Required when the input tensor is a sparse representation. Refer to Tensorflow documentation for more details: https://www.tensorflow.org/api_docs/python/tf/sparse/SparseTensor.",
            "type": "string"
          },
          "inputBaselines": {
            "description": "Baseline inputs for this feature. If no baseline is specified, Vertex AI chooses the baseline for this feature. If multiple baselines are specified, Vertex AI returns the average attributions across them in Attribution.feature_attributions. For Vertex AI-provided Tensorflow images (both 1.x and 2.x), the shape of each baseline must match the shape of the input tensor. If a scalar is provided, we broadcast to the same shape as the input tensor. For custom images, the element of the baselines must be in the same format as the feature's input in the instance[]. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.",
            "items": {},
            "type": "array"
          },
          "inputTensorName": {
            "description": "Name of the input tensor for this feature. Required and is only applicable to Vertex AI-provided images for Tensorflow.",
            "type": "string"
          },
          "modality": {
            "description": "Modality of the feature. Valid values are: numeric, image. Defaults to numeric.",
            "type": "string"
          },
          "visualization": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain": {
        "description": "Domain details of the input feature value. Provides numeric information about the feature, such as its range (min, max). If the feature has been pre-processed, for example with z-scoring, then it provides information about how to recover the original feature. For example, if the input feature is an image and it has been pre-processed to obtain 0-mean and stddev = 1 values, then original_mean, and original_stddev refer to the mean and stddev of the original feature (e.g. image tensor) from which input feature (with mean = 0 and stddev = 1) was obtained.",
        "properties": {
          "maxValue": {
            "description": "The maximum permissible value for this feature.",
            "format": "float",
            "type": "number"
          },
          "minValue": {
            "description": "The minimum permissible value for this feature.",
            "format": "float",
            "type": "number"
          },
          "originalMean": {
            "description": "If this input feature has been normalized to a mean value of 0, the original_mean specifies the mean value of the domain prior to normalization.",
            "format": "float",
            "type": "number"
          },
          "originalStddev": {
            "description": "If this input feature has been normalized to a standard deviation of 1.0, the original_stddev specifies the standard deviation of the domain prior to normalization.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization": {
        "description": "Visualization configurations for image explanation.",
        "properties": {
          "clipPercentLowerbound": {
            "description": "Excludes attributions below the specified percentile, from the highlighted areas. Defaults to 62.",
            "format": "float",
            "type": "number"
          },
          "clipPercentUpperbound": {
            "description": "Excludes attributions above the specified percentile from the highlighted areas. Using the clip_percent_upperbound and clip_percent_lowerbound together can be useful for filtering out noise and making it easier to see areas of strong attribution. Defaults to 99.9.",
            "format": "float",
            "type": "number"
          },
          "colorMap": {
            "description": "The color scheme used for the highlighted areas. Defaults to PINK_GREEN for Integrated Gradients attribution, which shows positive attributions in green and negative in pink. Defaults to VIRIDIS for XRAI attribution, which highlights the most influential regions in yellow and the least influential in blue.",
            "enum": [
              "COLOR_MAP_UNSPECIFIED",
              "PINK_GREEN",
              "VIRIDIS",
              "RED",
              "GREEN",
              "RED_GREEN",
              "PINK_WHITE_GREEN"
            ],
            "type": "string"
          },
          "overlayType": {
            "description": "How the original image is displayed in the visualization. Adjusting the overlay can help increase visual clarity if the original image makes it difficult to view the visualization. Defaults to NONE.",
            "enum": [
              "OVERLAY_TYPE_UNSPECIFIED",
              "NONE",
              "ORIGINAL",
              "GRAYSCALE",
              "MASK_BLACK"
            ],
            "type": "string"
          },
          "polarity": {
            "description": "Whether to only highlight pixels with positive contributions, negative or both. Defaults to POSITIVE.",
            "enum": [
              "POLARITY_UNSPECIFIED",
              "POSITIVE",
              "NEGATIVE",
              "BOTH"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the image visualization. Only applicable to Integrated Gradients attribution. OUTLINES shows regions of attribution, while PIXELS shows per-pixel attribution. Defaults to OUTLINES.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "PIXELS",
              "OUTLINES"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata": {
        "description": "Metadata of the prediction output to be explained.",
        "properties": {
          "displayNameMappingKey": {
            "description": "Specify a field name in the prediction to look for the display name. Use this if the prediction contains the display names for the outputs. The display names in the prediction must have the same shape of the outputs, so that it can be located by Attribution.output_index for a specific output.",
            "type": "string"
          },
          "indexDisplayNameMapping": {
            "description": "Static mapping between the index and display name. Use this if the outputs are a deterministic n-dimensional array, e.g. a list of scores of all the classes in a pre-defined order for a multi-classification Model. It's not feasible if the outputs are non-deterministic, e.g. the Model produces top-k classes or sort the outputs by their values. The shape of the value must be an n-dimensional array of strings. The number of dimensions must match that of the outputs to be explained. The Attribution.output_display_name is populated by locating in the mapping with Attribution.output_index."
          },
          "outputTensorName": {
            "description": "Name of the output tensor. Required and is only applicable to Vertex AI provided images for Tensorflow.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExplanationParameters": {
        "description": "Parameters to configure explaining for Model's predictions.",
        "properties": {
          "examples": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Examples"
          },
          "integratedGradientsAttribution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution"
          },
          "outputIndices": {
            "description": "If populated, only returns attributions that have output_index contained in output_indices. It must be an ndarray of integers, with the same shape of the output it's explaining. If not populated, returns attributions for top_k indices of outputs. If neither top_k nor output_indices is populated, returns the argmax index of the outputs. Only applicable to Models that predict multiple outputs (e,g, multi-class Models that predict multiple classes).",
            "items": {},
            "type": "array"
          },
          "sampledShapleyAttribution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1SampledShapleyAttribution"
          },
          "topK": {
            "description": "If populated, returns attributions for top K indices of outputs (defaults to 1). Only applies to Models that predicts more than one outputs (e,g, multi-class Models). When set to -1, returns explanations for all outputs.",
            "format": "int32",
            "type": "integer"
          },
          "xraiAttribution": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1XraiAttribution"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Examples": {
        "description": "Example-based explainability that returns the nearest neighbors from the provided dataset.",
        "properties": {
          "exampleGcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExamplesExampleGcsSource"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsSource"
          },
          "nearestNeighborSearchConfig": {
            "description": "The full configuration for the generated index, the semantics are the same as metadata and should match [NearestNeighborSearchConfig](https://cloud.google.com/vertex-ai/docs/explainable-ai/configuring-explanations-example-based#nearest-neighbor-search-config)."
          },
          "neighborCount": {
            "description": "The number of neighbors to return when querying for examples.",
            "format": "int32",
            "type": "integer"
          },
          "presets": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Presets"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExamplesExampleGcsSource": {
        "description": "The Cloud Storage input instances.",
        "properties": {
          "dataFormat": {
            "description": "The format in which instances are given, if not specified, assume it's JSONL format. Currently only JSONL format is supported.",
            "enum": [
              "DATA_FORMAT_UNSPECIFIED",
              "JSONL"
            ],
            "type": "string"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsSource"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1GcsSource": {
        "description": "The Google Cloud Storage location for the input content.",
        "properties": {
          "uris": {
            "description": "Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Presets": {
        "description": "Preset configuration for example-based explanations",
        "properties": {
          "modality": {
            "description": "The modality of the uploaded model, which automatically configures the distance measurement and feature normalization for the underlying example index and queries. If your model does not precisely fit one of these types, it is okay to choose the closest type.",
            "enum": [
              "MODALITY_UNSPECIFIED",
              "IMAGE",
              "TEXT",
              "TABULAR"
            ],
            "type": "string"
          },
          "query": {
            "description": "Preset option controlling parameters for speed-precision trade-off when querying for examples. If omitted, defaults to `PRECISE`.",
            "enum": [
              "PRECISE",
              "FAST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution": {
        "description": "An attribution method that computes the Aumann-Shapley value taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365",
        "properties": {
          "blurBaselineConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BlurBaselineConfig"
          },
          "smoothGradConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1SmoothGradConfig"
          },
          "stepCount": {
            "description": "Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is within the desired error range. Valid range of its value is [1, 100], inclusively.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BlurBaselineConfig": {
        "description": "Config for blur baseline. When enabled, a linear path from the maximally blurred image to the input image is created. Using a blurred baseline instead of zero (black image) is motivated by the BlurIG approach explained here: https://arxiv.org/abs/2004.03383",
        "properties": {
          "maxBlurSigma": {
            "description": "The standard deviation of the blur kernel for the blurred baseline. The same blurring parameter is used for both the height and the width dimension. If not set, the method defaults to the zero (i.e. black for images) baseline.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1SmoothGradConfig": {
        "description": "Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help improve the computed gradients. Refer to this paper for more details: https://arxiv.org/pdf/1706.03825.pdf",
        "properties": {
          "featureNoiseSigma": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeatureNoiseSigma"
          },
          "noiseSigma": {
            "description": "This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.",
            "format": "float",
            "type": "number"
          },
          "noisySampleCount": {
            "description": "The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeatureNoiseSigma": {
        "description": "Noise sigma by features. Noise sigma represents the standard deviation of the gaussian kernel that will be used to add noise to interpolated inputs prior to computing gradients.",
        "properties": {
          "noiseSigma": {
            "description": "Noise sigma per feature. No noise is added to features that are not set.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeatureNoiseSigmaNoiseSigmaForFeature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeatureNoiseSigmaNoiseSigmaForFeature": {
        "description": "Noise sigma for a single feature.",
        "properties": {
          "name": {
            "description": "The name of the input feature for which noise sigma is provided. The features are defined in explanation metadata inputs.",
            "type": "string"
          },
          "sigma": {
            "description": "This represents the standard deviation of the Gaussian kernel that will be used to add noise to the feature prior to computing gradients. Similar to noise_sigma but represents the noise added to the current feature. Defaults to 0.1.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1SampledShapleyAttribution": {
        "description": "An attribution method that approximates Shapley values for features that contribute to the label being predicted. A sampling strategy is used to approximate the value rather than considering all subsets of features.",
        "properties": {
          "pathCount": {
            "description": "Required. The number of feature permutations to consider when approximating the Shapley values. Valid range of its value is [1, 50], inclusively.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1XraiAttribution": {
        "description": "An explanation method that redistributes Integrated Gradients attributions to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 Supported only by image Models.",
        "properties": {
          "blurBaselineConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BlurBaselineConfig"
          },
          "smoothGradConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1SmoothGradConfig"
          },
          "stepCount": {
            "description": "Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is met within the desired error range. Valid range of its value is [1, 100], inclusively.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BatchPredictionJobInputConfig": {
        "description": "Configures the input to BatchPredictionJob. See Model.supported_input_storage_formats for Model's supported input formats, and how instances should be expressed via any of them.",
        "properties": {
          "bigquerySource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BigQuerySource"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsSource"
          },
          "instancesFormat": {
            "description": "Required. The format in which instances are given, must be one of the Model's supported_input_storage_formats.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BigQuerySource": {
        "description": "The BigQuery location for the input content.",
        "properties": {
          "inputUri": {
            "description": "Required. BigQuery URI to a table, up to 2000 characters long. Accepted forms: * BigQuery path. For example: `bq://projectId.bqDatasetId.bqTableId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BatchPredictionJobInstanceConfig": {
        "description": "Configuration defining how to transform batch prediction input instances to the instances that the Model accepts.",
        "properties": {
          "excludedFields": {
            "description": "Fields that will be excluded in the prediction instance that is sent to the Model. Excluded will be attached to the batch prediction output if key_field is not specified. When excluded_fields is populated, included_fields must be empty. The input must be JSONL with objects at each line, BigQuery or TfRecord.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "includedFields": {
            "description": "Fields that will be included in the prediction instance that is sent to the Model. If instance_type is `array`, the order of field names in included_fields also determines the order of the values in the array. When included_fields is populated, excluded_fields must be empty. The input must be JSONL with objects at each line, BigQuery or TfRecord.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "instanceType": {
            "description": "The format of the instance that the Model accepts. Vertex AI will convert compatible batch prediction input instance formats to the specified format. Supported values are: * `object`: Each input is converted to JSON object format. * For `bigquery`, each row is converted to an object. * For `jsonl`, each line of the JSONL input must be an object. * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`. * `array`: Each input is converted to JSON array format. * For `bigquery`, each row is converted to an array. The order of columns is determined by the BigQuery column order, unless included_fields is populated. included_fields must be populated for specifying field orders. * For `jsonl`, if each line of the JSONL input is an object, included_fields must be populated for specifying field orders. * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`. If not specified, Vertex AI converts the batch prediction input as follows: * For `bigquery` and `csv`, the behavior is the same as `array`. The order of columns is the same as defined in the file or table, unless included_fields is populated. * For `jsonl`, the prediction instance format is determined by each line of the input. * For `tf-record`/`tf-record-gzip`, each record will be converted to an object in the format of `{\"b64\": }`, where `` is the Base64-encoded string of the content of the record. * For `file-list`, each file in the list will be converted to an object in the format of `{\"b64\": }`, where `` is the Base64-encoded string of the content of the file.",
            "type": "string"
          },
          "keyField": {
            "description": "The name of the field that is considered as a key. The values identified by the key field is not included in the transformed instances that is sent to the Model. This is similar to specifying this name of the field in excluded_fields. In addition, the batch prediction output will not include the instances. Instead the output will only include the value of the key field, in a field named `key` in the output: * For `jsonl` output format, the output will have a `key` field instead of the `instance` field. * For `csv`/`bigquery` output format, the output will have have a `key` column instead of the instance feature columns. The input must be JSONL with objects at each line, CSV, BigQuery or TfRecord.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ManualBatchTuningParameters": {
        "description": "Manual batch tuning parameters.",
        "properties": {
          "batchSize": {
            "description": "Immutable. The number of the records (e.g. instances) of the operation given in each batch to a machine replica. Machine type, and size of a single record should be considered when setting this parameter, higher value speeds up the batch operation's execution, but too high value will result in a whole batch not fitting in a machine's memory, and the whole operation will fail. The default value is 64.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringConfig": {
        "description": "The model monitoring configuration used for Batch Prediction Job.",
        "properties": {
          "alertConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig"
          },
          "analysisInstanceSchemaUri": {
            "description": "YAML schema file uri in Cloud Storage describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.",
            "type": "string"
          },
          "objectiveConfigs": {
            "description": "Model monitoring objective config.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig"
            },
            "type": "array"
          },
          "statsAnomaliesBaseDirectory": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsDestination"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig": {
        "description": "The alert config for model monitoring.",
        "properties": {
          "emailAlertConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfigEmailAlertConfig"
          },
          "enableLogging": {
            "description": "Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.",
            "type": "boolean"
          },
          "notificationChannels": {
            "description": "Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfigEmailAlertConfig": {
        "description": "The config for email alert.",
        "properties": {
          "userEmails": {
            "description": "The email addresses to send the alert.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig": {
        "description": "The objective configuration for model monitoring, including the information needed to detect anomalies for one particular model.",
        "properties": {
          "explanationConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig"
          },
          "predictionDriftDetectionConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig"
          },
          "trainingDataset": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset"
          },
          "trainingPredictionSkewDetectionConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig": {
        "description": "The config for integrating with Vertex Explainable AI. Only applicable if the Model has explanation_spec populated.",
        "properties": {
          "enableFeatureAttributes": {
            "description": "If want to analyze the Vertex Explainable AI feature attribute scores or not. If set to true, Vertex AI will log the feature attributions from explain response and do the skew/drift detection for them.",
            "type": "boolean"
          },
          "explanationBaseline": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline": {
        "description": "Output from BatchPredictionJob for Model Monitoring baseline dataset, which can be used to generate baseline attribution scores.",
        "properties": {
          "bigquery": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BigQueryDestination"
          },
          "gcs": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsDestination"
          },
          "predictionFormat": {
            "description": "The storage format of the predictions generated BatchPrediction job.",
            "enum": [
              "PREDICTION_FORMAT_UNSPECIFIED",
              "JSONL",
              "BIGQUERY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BigQueryDestination": {
        "description": "The BigQuery location for the output content.",
        "properties": {
          "outputUri": {
            "description": "Required. BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: * BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1GcsDestination": {
        "description": "The Google Cloud Storage location where the output is to be written to.",
        "properties": {
          "outputUriPrefix": {
            "description": "Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig": {
        "description": "The config for Prediction data drift detection.",
        "properties": {
          "attributionScoreDriftThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. The threshold here is against attribution score distance between different time windows.",
            "type": "object"
          },
          "defaultDriftThreshold": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
          },
          "driftThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. If a feature needs to be monitored for drift, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between different time windws.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ThresholdConfig": {
        "description": "The config for feature monitoring threshold.",
        "properties": {
          "value": {
            "description": "Specify a threshold value that can trigger the alert. If this threshold config is for feature distribution distance: 1. For categorical feature, the distribution distance is calculated by L-inifinity norm. 2. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset": {
        "description": "Training Dataset information.",
        "properties": {
          "bigquerySource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BigQuerySource"
          },
          "dataFormat": {
            "description": "Data format of the dataset, only applicable if the input is from Google Cloud Storage. The possible formats are: \"tf-record\" The source file is a TFRecord file. \"csv\" The source file is a CSV file. \"jsonl\" The source file is a JSONL file.",
            "type": "string"
          },
          "dataset": {
            "description": "The resource name of the Dataset used to train this Model.",
            "type": "string"
          },
          "gcsSource": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsSource"
          },
          "loggingSamplingStrategy": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1SamplingStrategy"
          },
          "targetField": {
            "description": "The target field name the model is to predict. This field will be excluded when doing Predict and (or) Explain for the training data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1SamplingStrategy": {
        "description": "Sampling Strategy for logging, can be for both training and prediction dataset.",
        "properties": {
          "randomSampleConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1SamplingStrategyRandomSampleConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1SamplingStrategyRandomSampleConfig": {
        "description": "Requests are randomly selected.",
        "properties": {
          "sampleRate": {
            "description": "Sample rate (0, 1]",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig": {
        "description": "The config for Training & Prediction data skew detection. It specifies the training dataset sources and the skew detection parameters.",
        "properties": {
          "attributionScoreSkewThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. The threshold here is against attribution score distance between the training and prediction feature.",
            "type": "object"
          },
          "defaultSkewThreshold": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
          },
          "skewThresholds": {
            "additionalProperties": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
            },
            "description": "Key is the feature name and value is the threshold. If a feature needs to be monitored for skew, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between the training and prediction feature.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomalies": {
        "description": "Statistics and anomalies generated by Model Monitoring.",
        "properties": {
          "anomalyCount": {
            "description": "Number of anomalies within all stats.",
            "format": "int32",
            "type": "integer"
          },
          "deployedModelId": {
            "description": "Deployed Model ID.",
            "type": "string"
          },
          "featureStats": {
            "description": "A list of historical Stats and Anomalies generated for all Features.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies"
            },
            "type": "array"
          },
          "objective": {
            "description": "Model Monitoring Objective those stats and anomalies belonging to.",
            "enum": [
              "MODEL_DEPLOYMENT_MONITORING_OBJECTIVE_TYPE_UNSPECIFIED",
              "RAW_FEATURE_SKEW",
              "RAW_FEATURE_DRIFT",
              "FEATURE_ATTRIBUTION_SKEW",
              "FEATURE_ATTRIBUTION_DRIFT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies": {
        "description": "Historical Stats (and Anomalies) for a specific Feature.",
        "properties": {
          "featureDisplayName": {
            "description": "Display Name of the Feature.",
            "type": "string"
          },
          "predictionStats": {
            "description": "A list of historical stats generated by different time window's Prediction Dataset.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeatureStatsAnomaly"
            },
            "type": "array"
          },
          "threshold": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ThresholdConfig"
          },
          "trainingStats": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeatureStatsAnomaly"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeatureStatsAnomaly": {
        "description": "Stats and Anomaly generated at specific timestamp for specific Feature. The start_time and end_time are used to define the time range of the dataset that current stats belongs to, e.g. prediction traffic is bucketed into prediction datasets by time window. If the Dataset is not defined by time window, start_time = end_time. Timestamp of the stats and anomalies always refers to end_time. Raw stats and anomalies are stored in stats_uri or anomaly_uri in the tensorflow defined protos. Field data_stats contains almost identical information with the raw stats in Vertex AI defined proto, for UI to display.",
        "properties": {
          "anomalyDetectionThreshold": {
            "description": "This is the threshold used when detecting anomalies. The threshold can be changed by user, so this one might be different from ThresholdConfig.value.",
            "format": "double",
            "type": "number"
          },
          "anomalyUri": {
            "description": "Path of the anomaly file for current feature values in Cloud Storage bucket. Format: gs:////anomalies. Example: gs://monitoring_bucket/feature_name/anomalies. Stats are stored as binary format with Protobuf message Anoamlies are stored as binary format with Protobuf message [tensorflow.metadata.v0.AnomalyInfo] (https://github.com/tensorflow/metadata/blob/master/tensorflow_metadata/proto/v0/anomalies.proto).",
            "type": "string"
          },
          "distributionDeviation": {
            "description": "Deviation from the current stats to baseline stats. 1. For categorical feature, the distribution distance is calculated by L-inifinity norm. 2. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence.",
            "format": "double",
            "type": "number"
          },
          "endTime": {
            "description": "The end timestamp of window where stats were generated. For objectives where time window doesn't make sense (e.g. Featurestore Snapshot Monitoring), end_time indicates the timestamp of the data used to generate stats (e.g. timestamp we take snapshots for feature values).",
            "format": "google-datetime",
            "type": "string"
          },
          "score": {
            "description": "Feature importance score, only populated when cross-feature monitoring is enabled. For now only used to represent feature attribution score within range [0, 1] for ModelDeploymentMonitoringObjectiveType.FEATURE_ATTRIBUTION_SKEW and ModelDeploymentMonitoringObjectiveType.FEATURE_ATTRIBUTION_DRIFT.",
            "format": "double",
            "type": "number"
          },
          "startTime": {
            "description": "The start timestamp of window where stats were generated. For objectives where time window doesn't make sense (e.g. Featurestore Snapshot Monitoring), start_time is only used to indicate the monitoring intervals, so it always equals to (end_time - monitoring_interval).",
            "format": "google-datetime",
            "type": "string"
          },
          "statsUri": {
            "description": "Path of the stats file for current feature values in Cloud Storage bucket. Format: gs:////stats. Example: gs://monitoring_bucket/feature_name/stats. Stats are stored as binary format with Protobuf message [tensorflow.metadata.v0.FeatureNameStatistics](https://github.com/tensorflow/metadata/blob/master/tensorflow_metadata/proto/v0/statistics.proto).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BatchPredictionJobOutputConfig": {
        "description": "Configures the output of BatchPredictionJob. See Model.supported_output_storage_formats for supported output formats, and how predictions are expressed via any of them.",
        "properties": {
          "bigqueryDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BigQueryDestination"
          },
          "gcsDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsDestination"
          },
          "predictionsFormat": {
            "description": "Required. The format in which Vertex AI gives the predictions, must be one of the Model's supported_output_storage_formats.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BatchPredictionJobOutputInfo": {
        "description": "Further describes this job's output. Supplements output_config.",
        "properties": {
          "bigqueryOutputDataset": {
            "description": "Output only. The path of the BigQuery dataset created, in `bq://projectId.bqDatasetId` format, into which the prediction output is written.",
            "readOnly": true,
            "type": "string"
          },
          "bigqueryOutputTable": {
            "description": "Output only. The name of the BigQuery table created, in `predictions_` format, into which the prediction output is written. Can be used by UI to generate the BigQuery output path, for example.",
            "readOnly": true,
            "type": "string"
          },
          "gcsOutputDirectory": {
            "description": "Output only. The full path of the Cloud Storage directory created, into which the prediction output is written.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ResourcesConsumed": {
        "description": "Statistics information about resource consumption.",
        "properties": {
          "replicaHours": {
            "description": "Output only. The number of replica hours used. Note that many replicas may run in parallel, and additionally any given work may be queued for some time. Therefore this value is not strictly related to wall time.",
            "format": "double",
            "readOnly": true,
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1UnmanagedContainerModel": {
        "description": "Contains model information necessary to perform batch prediction without requiring a full model import.",
        "properties": {
          "artifactUri": {
            "description": "The path to the directory containing the Model artifact and any of its supporting files.",
            "type": "string"
          },
          "containerSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ModelContainerSpec"
          },
          "predictSchemata": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PredictSchemata"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ModelContainerSpec": {
        "description": "Specification of a container for serving predictions. Some fields in this message correspond to fields in the [Kubernetes Container v1 core specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
        "properties": {
          "args": {
            "description": "Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s \"default parameters\" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "command": {
            "description": "Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s \"exec\" form, not its \"shell\" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deploymentTimeout": {
            "description": "Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.",
            "format": "google-duration",
            "type": "string"
          },
          "env": {
            "description": "Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ```json [ { \"name\": \"VAR_1\", \"value\": \"foo\" }, { \"name\": \"VAR_2\", \"value\": \"$(VAR_1) bar\" } ] ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EnvVar"
            },
            "type": "array"
          },
          "grpcPorts": {
            "description": "Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests that it receives to the first port on this list. Vertex AI also sends liveness and health checks to this port. If you do not specify this field, gRPC requests to the container will be disabled. Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers v1 core API.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Port"
            },
            "type": "array"
          },
          "healthProbe": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Probe"
          },
          "healthRoute": {
            "description": "Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)",
            "type": "string"
          },
          "imageUri": {
            "description": "Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.",
            "type": "string"
          },
          "ports": {
            "description": "Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ```json [ { \"containerPort\": 8080 } ] ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Port"
            },
            "type": "array"
          },
          "predictRoute": {
            "description": "Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)",
            "type": "string"
          },
          "sharedMemorySizeMb": {
            "description": "Immutable. The amount of the VM memory to reserve as the shared memory for the model in megabytes.",
            "format": "int64",
            "type": "string"
          },
          "startupProbe": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1Probe"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1EnvVar": {
        "description": "Represents an environment variable present in a Container or Python Module.",
        "properties": {
          "name": {
            "description": "Required. Name of the environment variable. Must be a valid C identifier.",
            "type": "string"
          },
          "value": {
            "description": "Required. Variables that reference a $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Port": {
        "description": "Represents a network port in a container.",
        "properties": {
          "containerPort": {
            "description": "The number of the port to expose on the pod's IP address. Must be a valid port number, between 1 and 65535 inclusive.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1Probe": {
        "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
        "properties": {
          "exec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ProbeExecAction"
          },
          "periodSeconds": {
            "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Must be less than timeout_seconds. Maps to Kubernetes probe argument 'periodSeconds'.",
            "format": "int32",
            "type": "integer"
          },
          "timeoutSeconds": {
            "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Must be greater or equal to period_seconds. Maps to Kubernetes probe argument 'timeoutSeconds'.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ProbeExecAction": {
        "description": "ExecAction specifies a command to execute.",
        "properties": {
          "command": {
            "description": "Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1PredictSchemata": {
        "description": "Contains the schemata used in Model's predictions and explanations via PredictionService.Predict, PredictionService.Explain and BatchPredictionJob.",
        "properties": {
          "instanceSchemaUri": {
            "description": "Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single instance, which are used in PredictRequest.instances, ExplainRequest.instances and BatchPredictionJob.input_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
            "type": "string"
          },
          "parametersSchemaUri": {
            "description": "Immutable. Points to a YAML file stored on Google Cloud Storage describing the parameters of prediction and explanation via PredictRequest.parameters, ExplainRequest.parameters and BatchPredictionJob.model_parameters. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no parameters are supported, then it is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
            "type": "string"
          },
          "predictionSchemaUri": {
            "description": "Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single prediction produced by this Model, which are returned via PredictResponse.predictions, ExplainResponse.explanations, and BatchPredictionJob.output_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{parent}/batchPredictionJobs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A job that uses a Model to produce predictions on multiple input instances. If predictions for significant portion of the instances fail, the job may finish without attempting predictions for all remaining instances.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**completionStats**: Success and error statistics of processing multiple entities (for example, DataItems or structured data rows) in batch.",
              {
                "$ul": [
                  "**failedCount**: Output only. The number of entities for which any error was encountered.",
                  "**incompleteCount**: Output only. In cases when enough errors are encountered a job, pipeline, or operation may be failed as a whole. Below is the number of entities for which the processing had not been finished (either in successful or failed state). Set to -1 if the number is unknown (for example, the operation failed before the total entity number could be collected).",
                  "**successfulCount**: Output only. The number of entities that had been processed successfully.",
                  "**successfulForecastPointCount**: Output only. The number of the successful forecast points that are generated by the forecasting model. This is ONLY used by the forecasting batch prediction."
                ]
              }
            ],
            "**createTime**: Output only. Time when the BatchPredictionJob was created.",
            [
              "**dedicatedResources**: A description of resources that are used for performing batch operations, are dedicated to a Model, and need manual configuration.",
              {
                "$ul": [
                  [
                    "**machineSpec**: Specification of a single machine.",
                    {
                      "$ul": [
                        "**acceleratorCount**: The number of accelerators to attach to the machine.",
                        "**acceleratorType**: Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.",
                        "**machineType**: Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.",
                        "**tpuTopology**: Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\")."
                      ]
                    }
                  ],
                  "**maxReplicaCount**: Immutable. The maximum number of machine replicas the batch operation may be scaled to. The default value is 10.",
                  "**startingReplicaCount**: Immutable. The number of machine replicas used at the start of the batch operation. If not set, Vertex AI decides starting number, not greater than max_replica_count"
                ]
              }
            ],
            "**disableContainerLogging**: For custom-trained Models and AutoML Tabular Models, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging by default. Please note that the logs incur cost, which are subject to [Cloud Logging pricing](https://cloud.google.com/logging/pricing). User can disable container logging by setting this flag to true.",
            "**displayName**: Required. The user-defined name of this BatchPredictionJob.",
            [
              "**encryptionSpec**: Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
              {
                "$ul": [
                  "**kmsKeyName**: Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created."
                ]
              }
            ],
            "**endTime**: Output only. Time when the BatchPredictionJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            [
              "**explanationSpec**: Specification of Model explanation.",
              {
                "$ul": [
                  [
                    "**metadata**: Metadata describing the Model's input and output for explanation.",
                    {
                      "$ul": [
                        "**featureAttributionsSchemaUri**: Points to a YAML file stored on Google Cloud Storage describing the format of the feature attributions. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML tabular Models always have this field populated by Vertex AI. Note: The URI given on output may be different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
                        "**inputs**: Required. Map from feature names to feature input metadata. Keys are the name of the features. Values are the specification of the feature. An empty InputMetadata is valid. It describes a text feature which has the name specified as the key in ExplanationMetadata.inputs. The baseline of the empty feature is chosen by Vertex AI. For Vertex AI-provided Tensorflow images, the key can be any friendly name of the feature. Once specified, featureAttributions are keyed by this key (if not grouped with another feature). For custom images, the key must match with the key in instance.",
                        "**latentSpaceSource**: Name of the source to generate embeddings for example based explanations.",
                        "**outputs**: Required. Map from output names to output metadata. For Vertex AI-provided Tensorflow images, keys can be any user defined string that consists of any UTF-8 characters. For custom images, keys are the name of the output field in the prediction to be explained. Currently only one key is allowed."
                      ]
                    }
                  ],
                  [
                    "**parameters**: Parameters to configure explaining for Model's predictions.",
                    {
                      "$ul": [
                        [
                          "**examples**: Example-based explainability that returns the nearest neighbors from the provided dataset.",
                          {
                            "$ul": [
                              [
                                "**exampleGcsSource**: The Cloud Storage input instances.",
                                {
                                  "$ul": [
                                    "**dataFormat**: The format in which instances are given, if not specified, assume it's JSONL format. Currently only JSONL format is supported.",
                                    [
                                      "**gcsSource**: The Google Cloud Storage location for the input content.",
                                      {
                                        "$ul": [
                                          "**uris**: Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames."
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              [
                                "**gcsSource**: The Google Cloud Storage location for the input content.",
                                {
                                  "$ul": [
                                    "**uris**: Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames."
                                  ]
                                }
                              ],
                              "**nearestNeighborSearchConfig**: The full configuration for the generated index, the semantics are the same as metadata and should match [NearestNeighborSearchConfig](https://cloud.google.com/vertex-ai/docs/explainable-ai/configuring-explanations-example-based#nearest-neighbor-search-config).",
                              "**neighborCount**: The number of neighbors to return when querying for examples.",
                              [
                                "**presets**: Preset configuration for example-based explanations",
                                {
                                  "$ul": [
                                    "**modality**: The modality of the uploaded model, which automatically configures the distance measurement and feature normalization for the underlying example index and queries. If your model does not precisely fit one of these types, it is okay to choose the closest type.",
                                    "**query**: Preset option controlling parameters for speed-precision trade-off when querying for examples. If omitted, defaults to `PRECISE`."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**integratedGradientsAttribution**: An attribution method that computes the Aumann-Shapley value taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1703.01365",
                          {
                            "$ul": [
                              [
                                "**blurBaselineConfig**: Config for blur baseline. When enabled, a linear path from the maximally blurred image to the input image is created. Using a blurred baseline instead of zero (black image) is motivated by the BlurIG approach explained here: https://arxiv.org/abs/2004.03383",
                                {
                                  "$ul": [
                                    "**maxBlurSigma**: The standard deviation of the blur kernel for the blurred baseline. The same blurring parameter is used for both the height and the width dimension. If not set, the method defaults to the zero (i.e. black for images) baseline."
                                  ]
                                }
                              ],
                              [
                                "**smoothGradConfig**: Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help improve the computed gradients. Refer to this paper for more details: https://arxiv.org/pdf/1706.03825.pdf",
                                {
                                  "$ul": [
                                    [
                                      "**featureNoiseSigma**: Noise sigma by features. Noise sigma represents the standard deviation of the gaussian kernel that will be used to add noise to interpolated inputs prior to computing gradients.",
                                      {
                                        "$ul": [
                                          "**noiseSigma**: Noise sigma per feature. No noise is added to features that are not set."
                                        ]
                                      }
                                    ],
                                    "**noiseSigma**: This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.",
                                    "**noisySampleCount**: The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3."
                                  ]
                                }
                              ],
                              "**stepCount**: Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is within the desired error range. Valid range of its value is [1, 100], inclusively."
                            ]
                          }
                        ],
                        "**outputIndices**: If populated, only returns attributions that have output_index contained in output_indices. It must be an ndarray of integers, with the same shape of the output it's explaining. If not populated, returns attributions for top_k indices of outputs. If neither top_k nor output_indices is populated, returns the argmax index of the outputs. Only applicable to Models that predict multiple outputs (e,g, multi-class Models that predict multiple classes).",
                        [
                          "**sampledShapleyAttribution**: An attribution method that approximates Shapley values for features that contribute to the label being predicted. A sampling strategy is used to approximate the value rather than considering all subsets of features.",
                          {
                            "$ul": [
                              "**pathCount**: Required. The number of feature permutations to consider when approximating the Shapley values. Valid range of its value is [1, 50], inclusively."
                            ]
                          }
                        ],
                        "**topK**: If populated, returns attributions for top K indices of outputs (defaults to 1). Only applies to Models that predicts more than one outputs (e,g, multi-class Models). When set to -1, returns explanations for all outputs.",
                        [
                          "**xraiAttribution**: An explanation method that redistributes Integrated Gradients attributions to segmented regions, taking advantage of the model's fully differentiable structure. Refer to this paper for more details: https://arxiv.org/abs/1906.02825 Supported only by image Models.",
                          {
                            "$ul": [
                              [
                                "**blurBaselineConfig**: Config for blur baseline. When enabled, a linear path from the maximally blurred image to the input image is created. Using a blurred baseline instead of zero (black image) is motivated by the BlurIG approach explained here: https://arxiv.org/abs/2004.03383",
                                {
                                  "$ul": [
                                    "**maxBlurSigma**: The standard deviation of the blur kernel for the blurred baseline. The same blurring parameter is used for both the height and the width dimension. If not set, the method defaults to the zero (i.e. black for images) baseline."
                                  ]
                                }
                              ],
                              [
                                "**smoothGradConfig**: Config for SmoothGrad approximation of gradients. When enabled, the gradients are approximated by averaging the gradients from noisy samples in the vicinity of the inputs. Adding noise can help improve the computed gradients. Refer to this paper for more details: https://arxiv.org/pdf/1706.03825.pdf",
                                {
                                  "$ul": [
                                    [
                                      "**featureNoiseSigma**: Noise sigma by features. Noise sigma represents the standard deviation of the gaussian kernel that will be used to add noise to interpolated inputs prior to computing gradients.",
                                      {
                                        "$ul": [
                                          "**noiseSigma**: Noise sigma per feature. No noise is added to features that are not set."
                                        ]
                                      }
                                    ],
                                    "**noiseSigma**: This is a single float value and will be used to add noise to all the features. Use this field when all features are normalized to have the same distribution: scale to range [0, 1], [-1, 1] or z-scoring, where features are normalized to have 0-mean and 1-variance. Learn more about [normalization](https://developers.google.com/machine-learning/data-prep/transform/normalization). For best results the recommended value is about 10% - 20% of the standard deviation of the input feature. Refer to section 3.2 of the SmoothGrad paper: https://arxiv.org/pdf/1706.03825.pdf. Defaults to 0.1. If the distribution is different per feature, set feature_noise_sigma instead for each feature.",
                                    "**noisySampleCount**: The number of gradient samples to use for approximation. The higher this number, the more accurate the gradient is, but the runtime complexity increases by this factor as well. Valid range of its value is [1, 50]. Defaults to 3."
                                  ]
                                }
                              ],
                              "**stepCount**: Required. The number of steps for approximating the path integral. A good value to start is 50 and gradually increase until the sum to diff property is met within the desired error range. Valid range of its value is [1, 100], inclusively."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**generateExplanation**: Generate explanation with the batch prediction results. When set to `true`, the batch prediction output changes based on the `predictions_format` field of the BatchPredictionJob.output_config object: * `bigquery`: output includes a column named `explanation`. The value is a struct that conforms to the Explanation object. * `jsonl`: The JSON objects on each line include an additional entry keyed `explanation`. The value of the entry is a JSON object that conforms to the Explanation object. * `csv`: Generating explanations for CSV format is not supported. If this field is set to true, either the Model.explanation_spec or explanation_spec must be populated.",
            [
              "**inputConfig**: Configures the input to BatchPredictionJob. See Model.supported_input_storage_formats for Model's supported input formats, and how instances should be expressed via any of them.",
              {
                "$ul": [
                  [
                    "**bigquerySource**: The BigQuery location for the input content.",
                    {
                      "$ul": [
                        "**inputUri**: Required. BigQuery URI to a table, up to 2000 characters long. Accepted forms: * BigQuery path. For example: `bq://projectId.bqDatasetId.bqTableId`."
                      ]
                    }
                  ],
                  [
                    "**gcsSource**: The Google Cloud Storage location for the input content.",
                    {
                      "$ul": [
                        "**uris**: Required. Google Cloud Storage URI(-s) to the input file(s). May contain wildcards. For more information on wildcards, see https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames."
                      ]
                    }
                  ],
                  "**instancesFormat**: Required. The format in which instances are given, must be one of the Model's supported_input_storage_formats."
                ]
              }
            ],
            [
              "**instanceConfig**: Configuration defining how to transform batch prediction input instances to the instances that the Model accepts.",
              {
                "$ul": [
                  "**excludedFields**: Fields that will be excluded in the prediction instance that is sent to the Model. Excluded will be attached to the batch prediction output if key_field is not specified. When excluded_fields is populated, included_fields must be empty. The input must be JSONL with objects at each line, BigQuery or TfRecord.",
                  "**includedFields**: Fields that will be included in the prediction instance that is sent to the Model. If instance_type is `array`, the order of field names in included_fields also determines the order of the values in the array. When included_fields is populated, excluded_fields must be empty. The input must be JSONL with objects at each line, BigQuery or TfRecord.",
                  "**instanceType**: The format of the instance that the Model accepts. Vertex AI will convert compatible batch prediction input instance formats to the specified format. Supported values are: * `object`: Each input is converted to JSON object format. * For `bigquery`, each row is converted to an object. * For `jsonl`, each line of the JSONL input must be an object. * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`. * `array`: Each input is converted to JSON array format. * For `bigquery`, each row is converted to an array. The order of columns is determined by the BigQuery column order, unless included_fields is populated. included_fields must be populated for specifying field orders. * For `jsonl`, if each line of the JSONL input is an object, included_fields must be populated for specifying field orders. * Does not apply to `csv`, `file-list`, `tf-record`, or `tf-record-gzip`. If not specified, Vertex AI converts the batch prediction input as follows: * For `bigquery` and `csv`, the behavior is the same as `array`. The order of columns is the same as defined in the file or table, unless included_fields is populated. * For `jsonl`, the prediction instance format is determined by each line of the input. * For `tf-record`/`tf-record-gzip`, each record will be converted to an object in the format of `{\"b64\": }`, where `` is the Base64-encoded string of the content of the record. * For `file-list`, each file in the list will be converted to an object in the format of `{\"b64\": }`, where `` is the Base64-encoded string of the content of the file.",
                  "**keyField**: The name of the field that is considered as a key. The values identified by the key field is not included in the transformed instances that is sent to the Model. This is similar to specifying this name of the field in excluded_fields. In addition, the batch prediction output will not include the instances. Instead the output will only include the value of the key field, in a field named `key` in the output: * For `jsonl` output format, the output will have a `key` field instead of the `instance` field. * For `csv`/`bigquery` output format, the output will have have a `key` column instead of the instance feature columns. The input must be JSONL with objects at each line, CSV, BigQuery or TfRecord."
                ]
              }
            ],
            "**labels**: The labels with user-defined metadata to organize BatchPredictionJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            [
              "**manualBatchTuningParameters**: Manual batch tuning parameters.",
              {
                "$ul": [
                  "**batchSize**: Immutable. The number of the records (e.g. instances) of the operation given in each batch to a machine replica. Machine type, and size of a single record should be considered when setting this parameter, higher value speeds up the batch operation's execution, but too high value will result in a whole batch not fitting in a machine's memory, and the whole operation will fail. The default value is 64."
                ]
              }
            ],
            "**model**: The name of the Model resource that produces the predictions via this job, must share the same ancestor Location. Starting this job has no impact on any existing deployments of the Model and their resources. Exactly one of model and unmanaged_container_model must be set. The model resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed. The model resource could also be a publisher model. Example: `publishers/{publisher}/models/{model}` or `projects/{project}/locations/{location}/publishers/{publisher}/models/{model}`",
            [
              "**modelMonitoringConfig**: The model monitoring configuration used for Batch Prediction Job.",
              {
                "$ul": [
                  [
                    "**alertConfig**: The alert config for model monitoring.",
                    {
                      "$ul": [
                        [
                          "**emailAlertConfig**: The config for email alert.",
                          {
                            "$ul": [
                              "**userEmails**: The email addresses to send the alert."
                            ]
                          }
                        ],
                        "**enableLogging**: Dump the anomalies to Cloud Logging. The anomalies will be put to json payload encoded from proto google.cloud.aiplatform.logging.ModelMonitoringAnomaliesLogEntry. This can be further sinked to Pub/Sub or any other services supported by Cloud Logging.",
                        "**notificationChannels**: Resource names of the NotificationChannels to send alert. Must be of the format `projects//notificationChannels/`"
                      ]
                    }
                  ],
                  "**analysisInstanceSchemaUri**: YAML schema file uri in Cloud Storage describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.",
                  "**objectiveConfigs**: Model monitoring objective config.",
                  [
                    "**statsAnomaliesBaseDirectory**: The Google Cloud Storage location where the output is to be written to.",
                    {
                      "$ul": [
                        "**outputUriPrefix**: Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**modelMonitoringStatsAnomalies**: Get batch prediction job monitoring statistics.",
            [
              "**modelMonitoringStatus**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**modelParameters**: The parameters that govern the predictions. The schema of the parameters may be specified via the Model's PredictSchemata's parameters_schema_uri.",
            "**modelVersionId**: Output only. The version ID of the Model that produces the predictions via this job.",
            "**name**: Output only. Resource name of the BatchPredictionJob.",
            [
              "**outputConfig**: Configures the output of BatchPredictionJob. See Model.supported_output_storage_formats for supported output formats, and how predictions are expressed via any of them.",
              {
                "$ul": [
                  [
                    "**bigqueryDestination**: The BigQuery location for the output content.",
                    {
                      "$ul": [
                        "**outputUri**: Required. BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: * BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`."
                      ]
                    }
                  ],
                  [
                    "**gcsDestination**: The Google Cloud Storage location where the output is to be written to.",
                    {
                      "$ul": [
                        "**outputUriPrefix**: Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist."
                      ]
                    }
                  ],
                  "**predictionsFormat**: Required. The format in which Vertex AI gives the predictions, must be one of the Model's supported_output_storage_formats."
                ]
              }
            ],
            [
              "**outputInfo**: Further describes this job's output. Supplements output_config.",
              {
                "$ul": [
                  "**bigqueryOutputDataset**: Output only. The path of the BigQuery dataset created, in `bq://projectId.bqDatasetId` format, into which the prediction output is written.",
                  "**bigqueryOutputTable**: Output only. The name of the BigQuery table created, in `predictions_` format, into which the prediction output is written. Can be used by UI to generate the BigQuery output path, for example.",
                  "**gcsOutputDirectory**: Output only. The full path of the Cloud Storage directory created, into which the prediction output is written."
                ]
              }
            ],
            "**partialFailures**: Output only. Partial failures encountered. For example, single files that can't be read. This field never exceeds 20 entries. Status details fields contain standard Google Cloud error details.",
            [
              "**resourcesConsumed**: Statistics information about resource consumption.",
              {
                "$ul": [
                  "**replicaHours**: Output only. The number of replica hours used. Note that many replicas may run in parallel, and additionally any given work may be queued for some time. Therefore this value is not strictly related to wall time."
                ]
              }
            ],
            "**serviceAccount**: The service account that the DeployedModel's container runs as. If not specified, a system generated one will be used, which has minimal permissions and the custom container, if used, may not have enough permission to access other Google Cloud resources. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.",
            "**startTime**: Output only. Time when the BatchPredictionJob for the first time entered the `JOB_STATE_RUNNING` state.",
            "**state**: Output only. The detailed state of the job.",
            [
              "**unmanagedContainerModel**: Contains model information necessary to perform batch prediction without requiring a full model import.",
              {
                "$ul": [
                  "**artifactUri**: The path to the directory containing the Model artifact and any of its supporting files.",
                  [
                    "**containerSpec**: Specification of a container for serving predictions. Some fields in this message correspond to fields in the [Kubernetes Container v1 core specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                    {
                      "$ul": [
                        "**args**: Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s \"default parameters\" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                        "**command**: Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s \"exec\" form, not its \"shell\" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                        "**deploymentTimeout**: Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.",
                        "**env**: Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ```json [ { \"name\": \"VAR_1\", \"value\": \"foo\" }, { \"name\": \"VAR_2\", \"value\": \"$(VAR_1) bar\" } ] ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                        "**grpcPorts**: Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests that it receives to the first port on this list. Vertex AI also sends liveness and health checks to this port. If you do not specify this field, gRPC requests to the container will be disabled. Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers v1 core API.",
                        [
                          "**healthProbe**: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                          {
                            "$ul": [
                              [
                                "**exec**: ExecAction specifies a command to execute.",
                                {
                                  "$ul": [
                                    "**command**: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                                  ]
                                }
                              ],
                              "**periodSeconds**: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Must be less than timeout_seconds. Maps to Kubernetes probe argument 'periodSeconds'.",
                              "**timeoutSeconds**: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Must be greater or equal to period_seconds. Maps to Kubernetes probe argument 'timeoutSeconds'."
                            ]
                          }
                        ],
                        "**healthRoute**: Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)",
                        "**imageUri**: Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.",
                        "**ports**: Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ```json [ { \"containerPort\": 8080 } ] ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                        "**predictRoute**: Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)",
                        "**sharedMemorySizeMb**: Immutable. The amount of the VM memory to reserve as the shared memory for the model in megabytes.",
                        [
                          "**startupProbe**: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                          {
                            "$ul": [
                              [
                                "**exec**: ExecAction specifies a command to execute.",
                                {
                                  "$ul": [
                                    "**command**: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                                  ]
                                }
                              ],
                              "**periodSeconds**: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Must be less than timeout_seconds. Maps to Kubernetes probe argument 'periodSeconds'.",
                              "**timeoutSeconds**: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Must be greater or equal to period_seconds. Maps to Kubernetes probe argument 'timeoutSeconds'."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**predictSchemata**: Contains the schemata used in Model's predictions and explanations via PredictionService.Predict, PredictionService.Explain and BatchPredictionJob.",
                    {
                      "$ul": [
                        "**instanceSchemaUri**: Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single instance, which are used in PredictRequest.instances, ExplainRequest.instances and BatchPredictionJob.input_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
                        "**parametersSchemaUri**: Immutable. Points to a YAML file stored on Google Cloud Storage describing the parameters of prediction and explanation via PredictRequest.parameters, ExplainRequest.parameters and BatchPredictionJob.model_parameters. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no parameters are supported, then it is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
                        "**predictionSchemaUri**: Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single prediction produced by this Model, which are returned via PredictResponse.predictions, ExplainResponse.explanations, and BatchPredictionJob.output_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**updateTime**: Output only. Time when the BatchPredictionJob was most recently updated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
