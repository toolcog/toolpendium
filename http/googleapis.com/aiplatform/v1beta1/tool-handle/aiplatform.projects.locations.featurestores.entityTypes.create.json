{
  "name": "aiplatform_projects_locations_featurestores_entityTypes_create",
  "description": "Creates a new EntityType in a given Featurestore.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the Featurestore to create EntityTypes. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}`"
      },
      "entityTypeId": {
        "type": "string",
        "description": "Required. The ID to use for the EntityType, which will become the final component of the EntityType's resource name. This value may be up to 60 characters, and valid characters are `[a-z0-9_]`. The first character cannot be a number. The value must be unique within a featurestore."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EntityType"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1EntityType": {
        "description": "An entity type is a type of object in a system that needs to be modeled and have stored information about. For example, driver is an entity type, and driver0 is an instance of an entity type driver.",
        "properties": {
          "createTime": {
            "description": "Output only. Timestamp when this EntityType was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Description of the EntityType.",
            "type": "string"
          },
          "etag": {
            "description": "Optional. Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The labels with user-defined metadata to organize your EntityTypes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one EntityType (System labels are excluded).\" System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.",
            "type": "object"
          },
          "monitoringConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfig"
          },
          "name": {
            "description": "Immutable. Name of the EntityType. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}` The last part entity_type is assigned by the client. The entity_type can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z and underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given a featurestore.",
            "type": "string"
          },
          "offlineStorageTtlDays": {
            "description": "Optional. Config for data retention policy in offline storage. TTL in days for feature values that will be stored in offline storage. The Feature Store offline storage periodically removes obsolete feature values older than `offline_storage_ttl_days` since the feature generation time. If unset (or explicitly set to 0), default to 4000 days TTL.",
            "format": "int32",
            "type": "integer"
          },
          "updateTime": {
            "description": "Output only. Timestamp when this EntityType was most recently updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfig": {
        "description": "Configuration of how features in Featurestore are monitored.",
        "properties": {
          "categoricalThresholdConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigThresholdConfig"
          },
          "importFeaturesAnalysis": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigImportFeaturesAnalysis"
          },
          "numericalThresholdConfig": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigThresholdConfig"
          },
          "snapshotAnalysis": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigSnapshotAnalysis"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigThresholdConfig": {
        "description": "The config for Featurestore Monitoring threshold.",
        "properties": {
          "value": {
            "description": "Specify a threshold value that can trigger the alert. 1. For categorical feature, the distribution distance is calculated by L-inifinity norm. 2. For numerical feature, the distribution distance is calculated by Jensenâ€“Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigImportFeaturesAnalysis": {
        "description": "Configuration of the Featurestore's ImportFeature Analysis Based Monitoring. This type of analysis generates statistics for values of each Feature imported by every ImportFeatureValues operation.",
        "properties": {
          "anomalyDetectionBaseline": {
            "description": "The baseline used to do anomaly detection for the statistics generated by import features analysis.",
            "enum": [
              "BASELINE_UNSPECIFIED",
              "LATEST_STATS",
              "MOST_RECENT_SNAPSHOT_STATS",
              "PREVIOUS_IMPORT_FEATURES_STATS"
            ],
            "type": "string"
          },
          "state": {
            "description": "Whether to enable / disable / inherite default hebavior for import features analysis.",
            "enum": [
              "STATE_UNSPECIFIED",
              "DEFAULT",
              "ENABLED",
              "DISABLED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeaturestoreMonitoringConfigSnapshotAnalysis": {
        "description": "Configuration of the Featurestore's Snapshot Analysis Based Monitoring. This type of analysis generates statistics for each Feature based on a snapshot of the latest feature value of each entities every monitoring_interval.",
        "properties": {
          "disabled": {
            "description": "The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoring_interval for Features under it. Feature-level config: disabled = true indicates disabled regardless of the EntityType-level config; unset monitoring_interval indicates going with EntityType-level config; otherwise run snapshot analysis monitoring with monitoring_interval regardless of the EntityType-level config. Explicitly Disable the snapshot analysis based monitoring.",
            "type": "boolean"
          },
          "monitoringInterval": {
            "deprecated": true,
            "description": "Configuration of the snapshot analysis based monitoring pipeline running interval. The value is rolled up to full day. If both monitoring_interval_days and the deprecated `monitoring_interval` field are set when creating/updating EntityTypes/Features, monitoring_interval_days will be used.",
            "format": "google-duration",
            "type": "string"
          },
          "monitoringIntervalDays": {
            "description": "Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days.",
            "format": "int32",
            "type": "integer"
          },
          "stalenessDays": {
            "description": "Customized export features time window for snapshot analysis. Unit is one day. Default value is 3 weeks. Minimum value is 1 day. Maximum value is 4000 days.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{parent}/entityTypes{?entityTypeId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
