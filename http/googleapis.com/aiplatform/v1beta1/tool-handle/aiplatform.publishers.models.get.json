{
  "name": "aiplatform_publishers_models_get",
  "description": "Gets a Model Garden publisher model.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the PublisherModel resource. Format: `publishers/{publisher}/models/{publisher_model}`"
      },
      "languageCode": {
        "type": "string",
        "description": "Optional. The IETF BCP-47 language code representing the language in which the publisher model's text information should be written in (see go/bcp47)."
      },
      "view": {
        "enum": [
          "PUBLISHER_MODEL_VIEW_UNSPECIFIED",
          "PUBLISHER_MODEL_VIEW_BASIC",
          "PUBLISHER_MODEL_VIEW_FULL",
          "PUBLISHER_MODEL_VERSION_VIEW_BASIC"
        ],
        "type": "string",
        "description": "Optional. PublisherModel view specifying which fields to read."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{name}{?languageCode,view,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Model Garden Publisher Model.",
        "**Key properties:**",
        {
          "$ul": [
            "**frameworks**: Optional. Additional information about the model's Frameworks.",
            "**launchStage**: Optional. Indicates the launch stage of the model.",
            "**name**: Output only. The resource name of the PublisherModel.",
            "**openSourceCategory**: Required. Indicates the open source category of the publisher model.",
            [
              "**parent**: The information about the parent of a model.",
              {
                "$ul": [
                  "**displayName**: Required. The display name of the parent. E.g., LaMDA, T5, Vision API, Natural Language API.",
                  [
                    "**reference**: Reference to a resource.",
                    {
                      "$ul": [
                        "**description**: Description of the resource.",
                        "**resourceName**: The resource name of the Google Cloud resource.",
                        "**uri**: The URI of the resource.",
                        "**useCase**: Use case (CUJ) of the resource."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**predictSchemata**: Contains the schemata used in Model's predictions and explanations via PredictionService.Predict, PredictionService.Explain and BatchPredictionJob.",
              {
                "$ul": [
                  "**instanceSchemaUri**: Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single instance, which are used in PredictRequest.instances, ExplainRequest.instances and BatchPredictionJob.input_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
                  "**parametersSchemaUri**: Immutable. Points to a YAML file stored on Google Cloud Storage describing the parameters of prediction and explanation via PredictRequest.parameters, ExplainRequest.parameters and BatchPredictionJob.model_parameters. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI, if no parameters are supported, then it is set to an empty string. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.",
                  "**predictionSchemaUri**: Immutable. Points to a YAML file stored on Google Cloud Storage describing the format of a single prediction produced by this Model, which are returned via PredictResponse.predictions, ExplainResponse.explanations, and BatchPredictionJob.output_config. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). AutoML Models always have this field populated by Vertex AI. Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access."
                ]
              }
            ],
            "**publisherModelTemplate**: Optional. Output only. Immutable. Used to indicate this model has a publisher model and provide the template of the publisher model resource name.",
            [
              "**supportedActions**: Actions could take on this Publisher Model.",
              {
                "$ul": [
                  [
                    "**createApplication**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**deploy**: Model metadata that is needed for UploadModel or DeployModel/CreateEndpoint requests.",
                    {
                      "$ul": [
                        "**artifactUri**: Optional. The path to the directory containing the Model artifact and any of its supporting files.",
                        [
                          "**automaticResources**: A description of resources that to large degree are decided by Vertex AI, and require only a modest additional configuration. Each Model supporting these resources documents its specific guidelines.",
                          {
                            "$ul": [
                              "**maxReplicaCount**: Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, a no upper bound for scaling under heavy traffic will be assume, though Vertex AI may be unable to scale beyond certain replica number.",
                              "**minReplicaCount**: Immutable. The minimum number of replicas this DeployedModel will be always deployed on. If traffic against it increases, it may dynamically be deployed onto more replicas up to max_replica_count, and as traffic decreases, some of these extra replicas may be freed. If the requested value is too large, the deployment will error."
                            ]
                          }
                        ],
                        [
                          "**containerSpec**: Specification of a container for serving predictions. Some fields in this message correspond to fields in the [Kubernetes Container v1 core specification](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                          {
                            "$ul": [
                              "**args**: Immutable. Specifies arguments for the command that runs when the container starts. This overrides the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd). Specify this field as an array of executable and arguments, similar to a Docker `CMD`'s \"default parameters\" form. If you don't specify this field but do specify the command field, then the command from the `command` field runs without any additional arguments. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). If you don't specify this field and don't specify the `command` field, then the container's [`ENTRYPOINT`](https://docs.docker.com/engine/reference/builder/#cmd) and `CMD` determine what runs based on their default behavior. See the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `args` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                              "**command**: Immutable. Specifies the command that runs when the container starts. This overrides the container's [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint). Specify this field as an array of executable and arguments, similar to a Docker `ENTRYPOINT`'s \"exec\" form, not its \"shell\" form. If you do not specify this field, then the container's `ENTRYPOINT` runs, in conjunction with the args field or the container's [`CMD`](https://docs.docker.com/engine/reference/builder/#cmd), if either exists. If this field is not specified and the container does not have an `ENTRYPOINT`, then refer to the Docker documentation about [how `CMD` and `ENTRYPOINT` interact](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact). If you specify this field, then you can also specify the `args` field to provide additional arguments for this command. However, if you specify this field, then the container's `CMD` is ignored. See the [Kubernetes documentation about how the `command` and `args` fields interact with a container's `ENTRYPOINT` and `CMD`](https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#notes). In this field, you can reference [environment variables set by Vertex AI](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables) and environment variables set in the env field. You cannot reference environment variables set in the Docker image. In order for environment variables to be expanded, reference them by using the following syntax: $( VARIABLE_NAME) Note that this differs from Bash variable expansion, which does not use parentheses. If a variable cannot be resolved, the reference in the input string is used unchanged. To avoid variable expansion, you can escape this syntax with `$$`; for example: $$(VARIABLE_NAME) This field corresponds to the `command` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                              "**deploymentTimeout**: Immutable. Deployment timeout. Limit for deployment timeout is 2 hours.",
                              "**env**: Immutable. List of environment variables to set in the container. After the container starts running, code running in the container can read these environment variables. Additionally, the command and args fields can reference these variables. Later entries in this list can also reference earlier entries. For example, the following example sets the variable `VAR_2` to have the value `foo bar`: ```json [ { \"name\": \"VAR_1\", \"value\": \"foo\" }, { \"name\": \"VAR_2\", \"value\": \"$(VAR_1) bar\" } ] ``` If you switch the order of the variables in the example, then the expansion does not occur. This field corresponds to the `env` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                              "**grpcPorts**: Immutable. List of ports to expose from the container. Vertex AI sends gRPC prediction requests that it receives to the first port on this list. Vertex AI also sends liveness and health checks to this port. If you do not specify this field, gRPC requests to the container will be disabled. Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers v1 core API.",
                              [
                                "**healthProbe**: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                                {
                                  "$ul": [
                                    [
                                      "**exec**: ExecAction specifies a command to execute.",
                                      {
                                        "$ul": [
                                          "**command**: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                                        ]
                                      }
                                    ],
                                    "**periodSeconds**: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Must be less than timeout_seconds. Maps to Kubernetes probe argument 'periodSeconds'.",
                                    "**timeoutSeconds**: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Must be greater or equal to period_seconds. Maps to Kubernetes probe argument 'timeoutSeconds'."
                                  ]
                                }
                              ],
                              "**healthRoute**: Immutable. HTTP path on the container to send health checks to. Vertex AI intermittently sends GET requests to this path on the container's IP address and port to check that the container is healthy. Read more about [health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#health). For example, if you set this field to `/bar`, then Vertex AI intermittently sends a GET request to the `/bar` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/ DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)",
                              "**imageUri**: Required. Immutable. URI of the Docker image to be used as the custom container for serving predictions. This URI must identify an image in Artifact Registry or Container Registry. Learn more about the [container publishing requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#publishing), including permissions requirements for the Vertex AI Service Agent. The container image is ingested upon ModelService.UploadModel, stored internally, and this original path is afterwards not used. To learn about the requirements for the Docker image itself, see [Custom container requirements](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#). You can use the URI to one of Vertex AI's [pre-built container images for prediction](https://cloud.google.com/vertex-ai/docs/predictions/pre-built-containers) in this field.",
                              "**ports**: Immutable. List of ports to expose from the container. Vertex AI sends any prediction requests that it receives to the first port on this list. Vertex AI also sends [liveness and health checks](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#liveness) to this port. If you do not specify this field, it defaults to following value: ```json [ { \"containerPort\": 8080 } ] ``` Vertex AI does not use ports other than the first one listed. This field corresponds to the `ports` field of the Kubernetes Containers [v1 core API](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#container-v1-core).",
                              "**predictRoute**: Immutable. HTTP path on the container to send prediction requests to. Vertex AI forwards requests sent using projects.locations.endpoints.predict to this path on the container's IP address and port. Vertex AI then returns the container's response in the API response. For example, if you set this field to `/foo`, then when Vertex AI receives a prediction request, it forwards the request body in a POST request to the `/foo` path on the port of your container specified by the first value of this `ModelContainerSpec`'s ports field. If you don't specify this field, it defaults to the following value when you deploy this Model to an Endpoint: /v1/endpoints/ENDPOINT/deployedModels/DEPLOYED_MODEL:predict The placeholders in this value are replaced as follows: * ENDPOINT: The last segment (following `endpoints/`)of the Endpoint.name][] field of the Endpoint where this Model has been deployed. (Vertex AI makes this value available to your container code as the [`AIP_ENDPOINT_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).) * DEPLOYED_MODEL: DeployedModel.id of the `DeployedModel`. (Vertex AI makes this value available to your container code as the [`AIP_DEPLOYED_MODEL_ID` environment variable](https://cloud.google.com/vertex-ai/docs/predictions/custom-container-requirements#aip-variables).)",
                              "**sharedMemorySizeMb**: Immutable. The amount of the VM memory to reserve as the shared memory for the model in megabytes.",
                              [
                                "**startupProbe**: Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
                                {
                                  "$ul": [
                                    [
                                      "**exec**: ExecAction specifies a command to execute.",
                                      {
                                        "$ul": [
                                          "**command**: Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
                                        ]
                                      }
                                    ],
                                    "**periodSeconds**: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Must be less than timeout_seconds. Maps to Kubernetes probe argument 'periodSeconds'.",
                                    "**timeoutSeconds**: Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Must be greater or equal to period_seconds. Maps to Kubernetes probe argument 'timeoutSeconds'."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**dedicatedResources**: A description of resources that are dedicated to a DeployedModel, and that need a higher degree of manual configuration.",
                          {
                            "$ul": [
                              "**autoscalingMetricSpecs**: Immutable. The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.",
                              [
                                "**machineSpec**: Specification of a single machine.",
                                {
                                  "$ul": [
                                    "**acceleratorCount**: The number of accelerators to attach to the machine.",
                                    "**acceleratorType**: Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.",
                                    "**machineType**: Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.",
                                    "**tpuTopology**: Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\")."
                                  ]
                                }
                              ],
                              "**maxReplicaCount**: Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for (max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).",
                              "**minReplicaCount**: Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed."
                            ]
                          }
                        ],
                        [
                          "**largeModelReference**: Contains information about the Large Model.",
                          {
                            "$ul": [
                              "**name**: Required. The unique name of the large Foundation or pre-built model. Like \"chat-bison\", \"text-bison\". Or model name with version ID, like \"chat-bison@001\", \"text-bison@005\", etc."
                            ]
                          }
                        ],
                        "**modelDisplayName**: Optional. Default model display name.",
                        "**publicArtifactUri**: Optional. The signed URI for ephemeral Cloud Storage access to model artifact.",
                        "**sharedResources**: The resource name of the shared DeploymentResourcePool to deploy on. Format: `projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}`",
                        "**title**: Required. The title of the regional resource reference."
                      ]
                    }
                  ],
                  [
                    "**deployGke**: Configurations for PublisherModel GKE deployment",
                    {
                      "$ul": [
                        "**gkeYamlConfigs**: Optional. GKE deployment configuration in yaml format."
                      ]
                    }
                  ],
                  [
                    "**openEvaluationPipeline**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**openFineTuningPipeline**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**openFineTuningPipelines**: Open fine tuning pipelines.",
                    {
                      "$ul": [
                        "**fineTuningPipelines**: Required. Regional resource references to fine tuning pipelines."
                      ]
                    }
                  ],
                  [
                    "**openGenerationAiStudio**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**openGenie**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**openNotebook**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**openNotebooks**: Open notebooks.",
                    {
                      "$ul": [
                        "**notebooks**: Required. Regional resource references to notebooks."
                      ]
                    }
                  ],
                  [
                    "**openPromptTuningPipeline**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**requestAccess**: The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..",
                    {
                      "$ul": [
                        "**references**: Required.",
                        "**resourceDescription**: Optional. Description of the resource.",
                        "**resourceTitle**: Optional. Title of the resource.",
                        "**resourceUseCase**: Optional. Use case (CUJ) of the resource.",
                        "**title**: Required. "
                      ]
                    }
                  ],
                  [
                    "**viewRestApi**: Rest API docs.",
                    {
                      "$ul": [
                        "**documentations**: Required.",
                        "**title**: Required. The title of the view rest API."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**versionId**: Output only. Immutable. The version ID of the PublisherModel. A new version is committed when a new model version is uploaded under an existing model id. It is an auto-incrementing decimal number in string representation.",
            "**versionState**: Optional. Indicates the state of the model version."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
