{
  "name": "aiplatform_projects_locations_featurestores_entityTypes_exportFeatureValues",
  "description": "Exports Feature values from all the entities of a target EntityType.",
  "parameters": {
    "type": "object",
    "properties": {
      "entityType": {
        "type": "string",
        "description": "Required. The resource name of the EntityType from which to export Feature values. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExportFeatureValuesRequest"
      }
    },
    "required": [
      "entityType"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1ExportFeatureValuesRequest": {
        "description": "Request message for FeaturestoreService.ExportFeatureValues.",
        "properties": {
          "destination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeatureValueDestination"
          },
          "featureSelector": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1FeatureSelector"
          },
          "fullExport": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestFullExport"
          },
          "settings": {
            "description": "Per-Feature export settings.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1DestinationFeatureSetting"
            },
            "type": "array"
          },
          "snapshotExport": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestSnapshotExport"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeatureValueDestination": {
        "description": "A destination location for Feature values and format.",
        "properties": {
          "bigqueryDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1BigQueryDestination"
          },
          "csvDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1CsvDestination"
          },
          "tfrecordDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1TFRecordDestination"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1BigQueryDestination": {
        "description": "The BigQuery location for the output content.",
        "properties": {
          "outputUri": {
            "description": "Required. BigQuery URI to a project or table, up to 2000 characters long. When only the project is specified, the Dataset and Table is created. When the full table reference is specified, the Dataset must exist and table must not exist. Accepted forms: * BigQuery path. For example: `bq://projectId` or `bq://projectId.bqDatasetId` or `bq://projectId.bqDatasetId.bqTableId`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1CsvDestination": {
        "description": "The storage details for CSV output content.",
        "properties": {
          "gcsDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsDestination"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1GcsDestination": {
        "description": "The Google Cloud Storage location where the output is to be written to.",
        "properties": {
          "outputUriPrefix": {
            "description": "Required. Google Cloud Storage URI to output directory. If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1TFRecordDestination": {
        "description": "The storage details for TFRecord output content.",
        "properties": {
          "gcsDestination": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1GcsDestination"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1FeatureSelector": {
        "description": "Selector for Features of an EntityType.",
        "properties": {
          "idMatcher": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1IdMatcher"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1IdMatcher": {
        "description": "Matcher for Features of an EntityType by Feature ID.",
        "properties": {
          "ids": {
            "description": "Required. The following are accepted as `ids`: * A single-element list containing only `*`, which selects all Features in the target EntityType, or * A list containing only Feature IDs, which selects only Features with those IDs in the target EntityType.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestFullExport": {
        "description": "Describes exporting all historical Feature values of all entities of the EntityType between [start_time, end_time].",
        "properties": {
          "endTime": {
            "description": "Exports Feature values as of this timestamp. If not set, retrieve values as of now. Timestamp, if present, must not have higher than millisecond precision.",
            "format": "google-datetime",
            "type": "string"
          },
          "startTime": {
            "description": "Excludes Feature values with feature generation timestamp before this timestamp. If not set, retrieve oldest values kept in Feature Store. Timestamp, if present, must not have higher than millisecond precision.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1DestinationFeatureSetting": {
        "properties": {
          "destinationField": {
            "description": "Specify the field name in the export destination. If not specified, Feature ID is used.",
            "type": "string"
          },
          "featureId": {
            "description": "Required. The ID of the Feature to apply the setting to.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ExportFeatureValuesRequestSnapshotExport": {
        "description": "Describes exporting the latest Feature values of all entities of the EntityType between [start_time, snapshot_time].",
        "properties": {
          "snapshotTime": {
            "description": "Exports Feature values as of this timestamp. If not set, retrieve values as of now. Timestamp, if present, must not have higher than millisecond precision.",
            "format": "google-datetime",
            "type": "string"
          },
          "startTime": {
            "description": "Excludes Feature values with feature generation timestamp before this timestamp. If not set, retrieve oldest values kept in Feature Store. Timestamp, if present, must not have higher than millisecond precision.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{entityType}:exportFeatureValues{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
