{
  "name": "aiplatform_projects_locations_persistentResources_create",
  "description": "Creates a PersistentResource.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the Location to create the PersistentResource in. Format: `projects/{project}/locations/{location}`"
      },
      "persistentResourceId": {
        "type": "string",
        "description": "Required. The ID to use for the PersistentResource, which become the final component of the PersistentResource's resource name. The maximum length is 63 characters, and valid characters are `/^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$/`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudAiplatformV1beta1PersistentResource"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudAiplatformV1beta1PersistentResource": {
        "description": "Represents long-lasting resources that are dedicated to users to runs custom workloads. A PersistentResource can have multiple node pools and each node pool can have its own machine spec.",
        "properties": {
          "createTime": {
            "description": "Output only. Time when the PersistentResource was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.",
            "type": "string"
          },
          "encryptionSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1EncryptionSpec"
          },
          "error": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.",
            "type": "object"
          },
          "name": {
            "description": "Immutable. Resource name of a PersistentResource.",
            "type": "string"
          },
          "network": {
            "description": "Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.",
            "type": "string"
          },
          "reservedIpRanges": {
            "description": "Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "resourcePools": {
            "description": "Required. The spec of the pools of different resources.",
            "items": {
              "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ResourcePool"
            },
            "type": "array"
          },
          "resourceRuntime": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ResourceRuntime"
          },
          "resourceRuntimeSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ResourceRuntimeSpec"
          },
          "startTime": {
            "description": "Output only. Time when the PersistentResource for the first time entered the `RUNNING` state.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of a Study.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PROVISIONING",
              "RUNNING",
              "STOPPING",
              "ERROR"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Time when the PersistentResource was most recently updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1EncryptionSpec": {
        "description": "Represents a customer-managed encryption key spec that can be applied to a top-level resource.",
        "properties": {
          "kmsKeyName": {
            "description": "Required. The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: `projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key`. The key needs to be in the same region as where the compute resource is created.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ResourcePool": {
        "description": "Represents the spec of a group of resources of the same type, for example machine type, disk, and accelerators, in a PersistentResource.",
        "properties": {
          "autoscalingSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec"
          },
          "diskSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1DiskSpec"
          },
          "id": {
            "description": "Immutable. The unique ID in a PersistentResource for referring to this resource pool. User can specify it if necessary. Otherwise, it's generated automatically.",
            "type": "string"
          },
          "machineSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1MachineSpec"
          },
          "replicaCount": {
            "description": "Optional. The total number of machines to use for this resource pool.",
            "format": "int64",
            "type": "string"
          },
          "usedReplicaCount": {
            "description": "Output only. The number of machines currently in use by training jobs for this resource pool. Will replace idle_replica_count.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec": {
        "description": "The min/max number of replicas allowed if enabling autoscaling",
        "properties": {
          "maxReplicaCount": {
            "description": "Optional. max replicas in the node pool, must be ≥ replica_count and > min_replica_count or will throw error",
            "format": "int64",
            "type": "string"
          },
          "minReplicaCount": {
            "description": "Optional. min replicas in the node pool, must be ≤ replica_count and < max_replica_count or will throw error",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1DiskSpec": {
        "description": "Represents the spec of disk options.",
        "properties": {
          "bootDiskSizeGb": {
            "description": "Size in GB of the boot disk (default is 100GB).",
            "format": "int32",
            "type": "integer"
          },
          "bootDiskType": {
            "description": "Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1MachineSpec": {
        "description": "Specification of a single machine.",
        "properties": {
          "acceleratorCount": {
            "description": "The number of accelerators to attach to the machine.",
            "format": "int32",
            "type": "integer"
          },
          "acceleratorType": {
            "description": "Immutable. The type of accelerator(s) that may be attached to the machine as per accelerator_count.",
            "enum": [
              "ACCELERATOR_TYPE_UNSPECIFIED",
              "NVIDIA_TESLA_K80",
              "NVIDIA_TESLA_P100",
              "NVIDIA_TESLA_V100",
              "NVIDIA_TESLA_P4",
              "NVIDIA_TESLA_T4",
              "NVIDIA_TESLA_A100",
              "NVIDIA_A100_80GB",
              "NVIDIA_L4",
              "NVIDIA_H100_80GB",
              "TPU_V2",
              "TPU_V3",
              "TPU_V4_POD",
              "TPU_V5_LITEPOD"
            ],
            "type": "string"
          },
          "machineType": {
            "description": "Immutable. The type of the machine. See the [list of machine types supported for prediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types) See the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types). For DeployedModel this field is optional, and the default value is `n1-standard-2`. For BatchPredictionJob or as part of WorkerPoolSpec this field is required.",
            "type": "string"
          },
          "tpuTopology": {
            "description": "Immutable. The topology of the TPUs. Corresponds to the TPU topologies available from GKE. (Example: tpu_topology: \"2x2x1\").",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ResourceRuntime": {
        "description": "Persistent Cluster runtime information as output",
        "properties": {
          "accessUris": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. URIs for user to connect to the Cluster. Example: { \"RAY_HEAD_NODE_INTERNAL_IP\": \"head-node-IP:10001\" \"RAY_DASHBOARD_URI\": \"ray-dashboard-address:8888\" }",
            "readOnly": true,
            "type": "object"
          },
          "notebookRuntimeTemplate": {
            "description": "Output only. The resource name of NotebookRuntimeTemplate for the RoV Persistent Cluster The NotebokRuntimeTemplate is created in the same VPC (if set), and with the same Ray and Python version as the Persistent Cluster. Example: \"projects/1000/locations/us-central1/notebookRuntimeTemplates/abc123\"",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ResourceRuntimeSpec": {
        "description": "Configuration for the runtime on a PersistentResource instance, including but not limited to: * Service accounts used to run the workloads. * Whether to make it a dedicated Ray Cluster.",
        "properties": {
          "raySpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1RaySpec"
          },
          "serviceAccountSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1ServiceAccountSpec"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1RaySpec": {
        "description": "Configuration information for the Ray cluster. For experimental launch, Ray cluster creation and Persistent cluster creation are 1:1 mapping: We will provision all the nodes within the Persistent cluster as Ray nodes.",
        "properties": {
          "headNodeResourcePoolId": {
            "description": "Optional. This will be used to indicate which resource pool will serve as the Ray head node(the first node within that pool). Will use the machine from the first workerpool as the head node by default if this field isn't set.",
            "type": "string"
          },
          "imageUri": {
            "description": "Optional. Default image for user to choose a preferred ML framework (for example, TensorFlow or Pytorch) by choosing from [Vertex prebuilt images](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). Either this or the resource_pool_images is required. Use this field if you need all the resource pools to have the same Ray image. Otherwise, use the {@code resource_pool_images} field.",
            "type": "string"
          },
          "rayMetricSpec": {
            "$ref": "#/$defs/GoogleCloudAiplatformV1beta1RayMetricSpec"
          },
          "resourcePoolImages": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Required if image_uri isn't set. A map of resource_pool_id to prebuild Ray image if user need to use different images for different head/worker pools. This map needs to cover all the resource pool ids. Example: { \"ray_head_node_pool\": \"head image\" \"ray_worker_node_pool1\": \"worker image\" \"ray_worker_node_pool2\": \"another worker image\" }",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1RayMetricSpec": {
        "description": "Configuration for the Ray metrics.",
        "properties": {
          "disabled": {
            "description": "Optional. Flag to disable the Ray metrics collection.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudAiplatformV1beta1ServiceAccountSpec": {
        "description": "Configuration for the use of custom service account to run the workloads.",
        "properties": {
          "enableCustomServiceAccount": {
            "description": "Required. If true, custom user-managed service account is enforced to run any workloads (for example, Vertex Jobs) on the resource. Otherwise, uses the [Vertex AI Custom Code Service Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents).",
            "type": "boolean"
          },
          "serviceAccount": {
            "description": "Optional. Default service account that this PersistentResource's workloads run as. The workloads include: * Any runtime specified via `ResourceRuntimeSpec` on creation time, for example, Ray. * Jobs submitted to PersistentResource, if no other service account specified in the job specs. Only works when custom service account is enabled and users have the `iam.serviceAccounts.actAs` permission on this service account. Required if any containers are specified in `ResourceRuntimeSpec`.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://aiplatform.googleapis.com//v1beta1/{parent}/persistentResources{?persistentResourceId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
