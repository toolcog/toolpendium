{
  "name": "cloudfunctions_projects_locations_functions_get",
  "description": "Returns a function with the given name from the requested project.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the function which details should be obtained."
      },
      "versionId": {
        "type": "string",
        "description": "Optional. The optional version of the function whose details should be obtained. The version of a 1st Gen function is an integer that starts from 1 and gets incremented on redeployments. Each deployment creates a config version of the underlying function. GCF may keep historical configs for old versions. This field can be specified to fetch the historical configs. Leave it blank or set to 0 to get the latest version of the function."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://cloudfunctions.googleapis.com//v1/{name}{?versionId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations.",
        "**Key properties:**",
        {
          "$ul": [
            "**automaticUpdatePolicy**: Security patches are applied automatically to the runtime without requiring the function to be redeployed.",
            "**availableMemoryMb**: The amount of memory in MB available for a function. Defaults to 256MB.",
            "**buildEnvironmentVariables**: Build environment variables that shall be available during build time.",
            "**buildId**: Output only. The Cloud Build ID of the latest successful deployment of the function.",
            "**buildName**: Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.",
            "**buildServiceAccount**: Optional. A service account the user provides for use with Cloud Build.",
            "**buildWorkerPool**: Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.",
            "**description**: User-provided description of a function.",
            "**dockerRegistry**: Docker Registry to use for this deployment. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.",
            "**dockerRepository**: User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
            "**entryPoint**: The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
            "**environmentVariables**: Environment variables that shall be available during function execution.",
            [
              "**eventTrigger**: Describes EventTrigger, used to request events be sent from another service.",
              {
                "$ul": [
                  "**eventType**: Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.",
                  [
                    "**failurePolicy**: Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).",
                    {
                      "$ul": [
                        "**retry**: Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution."
                      ]
                    }
                  ],
                  "**resource**: Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized \"long\" format. See each *service's* documentation for supported formats.",
                  "**service**: The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace."
                ]
              }
            ],
            [
              "**httpsTrigger**: Describes HttpsTrigger, could be used to connect web hooks to function.",
              {
                "$ul": [
                  "**securityLevel**: The security level for the function.",
                  "**url**: Output only. The deployed url for the function."
                ]
              }
            ],
            "**ingressSettings**: The ingress settings for the function, controlling what traffic can reach it.",
            "**kmsKeyName**: Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
            "**labels**: Labels associated with this Cloud Function.",
            "**maxInstances**: The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
            "**minInstances**: A lower bound for the number function instances that may coexist at a given time.",
            "**name**: A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
            "**network**: Deprecated: use vpc_connector",
            [
              "**onDeployUpdatePolicy**: Security patches are only applied when a function is redeployed.",
              {
                "$ul": [
                  "**runtimeVersion**: Output only. contains the runtime version which was used during latest function deployment."
                ]
              }
            ],
            "**runtime**: The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
            "**secretEnvironmentVariables**: Secret environment variables configuration.",
            "**secretVolumes**: Secret volumes configuration.",
            "**serviceAccountEmail**: The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.",
            "**sourceArchiveUrl**: The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.",
            [
              "**sourceRepository**: Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.",
              {
                "$ul": [
                  "**deployedUrl**: Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.",
                  "**url**: The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory."
                ]
              }
            ],
            "**sourceToken**: Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
            "**sourceUploadUrl**: The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)",
            "**status**: Output only. Status of the function deployment.",
            "**timeout**: The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
            "**updateTime**: Output only. The last update timestamp of a Cloud Function.",
            "**versionId**: Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
            "**vpcConnector**: The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.",
            "**vpcConnectorEgressSettings**: The egress settings for the connector, controlling what traffic is diverted through it."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
