{
  "name": "cloudfunctions_projects_locations_functions_create",
  "description": "Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.",
  "parameters": {
    "type": "object",
    "properties": {
      "location": {
        "type": "string",
        "description": "Required. The project and location in which the function should be created, specified in the format `projects/*/locations/*`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CloudFunction"
      }
    },
    "required": [
      "location"
    ],
    "$defs": {
      "CloudFunction": {
        "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulate function and triggers configurations.",
        "properties": {
          "automaticUpdatePolicy": {
            "$ref": "#/$defs/AutomaticUpdatePolicy"
          },
          "availableMemoryMb": {
            "description": "The amount of memory in MB available for a function. Defaults to 256MB.",
            "format": "int32",
            "type": "integer"
          },
          "buildEnvironmentVariables": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Build environment variables that shall be available during build time.",
            "type": "object"
          },
          "buildId": {
            "description": "Output only. The Cloud Build ID of the latest successful deployment of the function.",
            "readOnly": true,
            "type": "string"
          },
          "buildName": {
            "description": "Output only. The Cloud Build Name of the function deployment. `projects//locations//builds/`.",
            "readOnly": true,
            "type": "string"
          },
          "buildServiceAccount": {
            "description": "Optional. A service account the user provides for use with Cloud Build.",
            "type": "string"
          },
          "buildWorkerPool": {
            "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where `{project}` and `{region}` are the project id and region respectively where the worker pool is defined and `{workerPool}` is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (`service-@gcf-admin-robot.iam.gserviceaccount.com`) must be granted the role Cloud Build Custom Workers Builder (`roles/cloudbuild.customworkers.builder`) in the project.",
            "type": "string"
          },
          "description": {
            "description": "User-provided description of a function.",
            "type": "string"
          },
          "dockerRegistry": {
            "description": "Docker Registry to use for this deployment. If unspecified, it defaults to `ARTIFACT_REGISTRY`. If `docker_repository` field is specified, this field should either be left unspecified or set to `ARTIFACT_REGISTRY`.",
            "enum": [
              "DOCKER_REGISTRY_UNSPECIFIED",
              "CONTAINER_REGISTRY",
              "ARTIFACT_REGISTRY"
            ],
            "type": "string"
          },
          "dockerRepository": {
            "description": "User managed repository created in Artifact Registry optionally with a customer managed encryption key. If specified, deployments will use Artifact Registry. If unspecified and the deployment is eligible to use Artifact Registry, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. This is the repository to which the function docker image will be pushed after it is built by Cloud Build. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
            "type": "string"
          },
          "entryPoint": {
            "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix (ID of the function), if not specified.",
            "type": "string"
          },
          "environmentVariables": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Environment variables that shall be available during function execution.",
            "type": "object"
          },
          "eventTrigger": {
            "$ref": "#/$defs/EventTrigger"
          },
          "httpsTrigger": {
            "$ref": "#/$defs/HttpsTrigger"
          },
          "ingressSettings": {
            "description": "The ingress settings for the function, controlling what traffic can reach it.",
            "enum": [
              "INGRESS_SETTINGS_UNSPECIFIED",
              "ALLOW_ALL",
              "ALLOW_INTERNAL_ONLY",
              "ALLOW_INTERNAL_AND_GCLB"
            ],
            "type": "string"
          },
          "kmsKeyName": {
            "description": "Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`. If specified, you must also provide an artifact registry repository using the `docker_repository` field that was created with the same KMS crypto key. The following service accounts need to be granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the Key/KeyRing/Project/Organization (least access preferred). 1. Google Cloud Functions service account (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) - Required to protect the function's image. 2. Google Storage service account (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) - Required to protect the function's source code. If this service account does not exist, deploying a function without a KMS key or retrieving the service agent name provisions it. For more information, see https://cloud.google.com/storage/docs/projects#service-agents and https://cloud.google.com/storage/docs/getting-service-agent#gsutil. Google Cloud Functions delegates access to service agents to protect function resources in internal projects that are not accessible by the end user.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels associated with this Cloud Function.",
            "type": "object"
          },
          "maxInstances": {
            "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
            "format": "int32",
            "type": "integer"
          },
          "minInstances": {
            "description": "A lower bound for the number function instances that may coexist at a given time.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
            "type": "string"
          },
          "network": {
            "deprecated": true,
            "description": "Deprecated: use vpc_connector",
            "type": "string"
          },
          "onDeployUpdatePolicy": {
            "$ref": "#/$defs/OnDeployUpdatePolicy"
          },
          "runtime": {
            "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
            "type": "string"
          },
          "secretEnvironmentVariables": {
            "description": "Secret environment variables configuration.",
            "items": {
              "$ref": "#/$defs/SecretEnvVar"
            },
            "type": "array"
          },
          "secretVolumes": {
            "description": "Secret volumes configuration.",
            "items": {
              "$ref": "#/$defs/SecretVolume"
            },
            "type": "array"
          },
          "serviceAccountEmail": {
            "description": "The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.",
            "type": "string"
          },
          "sourceArchiveUrl": {
            "description": "The Google Cloud Storage URL, starting with `gs://`, pointing to the zip archive which contains the function.",
            "type": "string"
          },
          "sourceRepository": {
            "$ref": "#/$defs/SourceRepository"
          },
          "sourceToken": {
            "description": "Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
            "type": "string"
          },
          "sourceUploadUrl": {
            "description": "The Google Cloud Storage signed URL used for source uploading, generated by calling [google.cloud.functions.v1.GenerateUploadUrl]. The signature is validated on write methods (Create, Update) The signature is stripped from the Function object on read methods (Get, List)",
            "type": "string"
          },
          "status": {
            "description": "Output only. Status of the function deployment.",
            "enum": [
              "CLOUD_FUNCTION_STATUS_UNSPECIFIED",
              "ACTIVE",
              "OFFLINE",
              "DEPLOY_IN_PROGRESS",
              "DELETE_IN_PROGRESS",
              "UNKNOWN"
            ],
            "readOnly": true,
            "type": "string"
          },
          "timeout": {
            "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
            "format": "google-duration",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of a Cloud Function.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "versionId": {
            "description": "Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "vpcConnector": {
            "description": "The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.",
            "type": "string"
          },
          "vpcConnectorEgressSettings": {
            "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
            "enum": [
              "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
              "PRIVATE_RANGES_ONLY",
              "ALL_TRAFFIC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutomaticUpdatePolicy": {
        "description": "Security patches are applied automatically to the runtime without requiring the function to be redeployed.",
        "properties": {},
        "type": "object"
      },
      "EventTrigger": {
        "description": "Describes EventTrigger, used to request events be sent from another service.",
        "properties": {
          "eventType": {
            "description": "Required. The type of event to observe. For example: `providers/cloud.storage/eventTypes/object.change` and `providers/cloud.pubsub/eventTypes/topic.publish`. Event types match pattern `providers/*/eventTypes/*.*`. The pattern contains: 1. namespace: For example, `cloud.storage` and `google.firebase.analytics`. 2. resource type: The type of resource on which event occurs. For example, the Google Cloud Storage API includes the type `object`. 3. action: The action that generates the event. For example, action for a Google Cloud Storage Object is 'change'. These parts are lower case.",
            "type": "string"
          },
          "failurePolicy": {
            "$ref": "#/$defs/FailurePolicy"
          },
          "resource": {
            "description": "Required. The resource(s) from which to observe events, for example, `projects/_/buckets/myBucket`. Not all syntactically correct values are accepted by all services. For example: 1. The authorization model must support it. Google Cloud Functions only allows EventTriggers to be deployed that observe resources in the same project as the `CloudFunction`. 2. The resource type must match the pattern expected for an `event_type`. For example, an `EventTrigger` that has an `event_type` of \"google.pubsub.topic.publish\" should have a resource that matches Google Cloud Pub/Sub topics. Additionally, some services may support short names when creating an `EventTrigger`. These will always be returned in the normalized \"long\" format. See each *service's* documentation for supported formats.",
            "type": "string"
          },
          "service": {
            "description": "The hostname of the service that should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FailurePolicy": {
        "description": "Describes the policy in case of function's execution failure. If empty, then defaults to ignoring failures (i.e. not retrying them).",
        "properties": {
          "retry": {
            "$ref": "#/$defs/Retry"
          }
        },
        "type": "object"
      },
      "Retry": {
        "description": "Describes the retry policy in case of function's execution failure. A function execution will be retried on any failure. A failed execution will be retried up to 7 days with an exponential backoff (capped at 10 seconds). Retried execution is charged as any other execution.",
        "properties": {},
        "type": "object"
      },
      "HttpsTrigger": {
        "description": "Describes HttpsTrigger, could be used to connect web hooks to function.",
        "properties": {
          "securityLevel": {
            "description": "The security level for the function.",
            "enum": [
              "SECURITY_LEVEL_UNSPECIFIED",
              "SECURE_ALWAYS",
              "SECURE_OPTIONAL"
            ],
            "type": "string"
          },
          "url": {
            "description": "Output only. The deployed url for the function.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "OnDeployUpdatePolicy": {
        "description": "Security patches are only applied when a function is redeployed.",
        "properties": {
          "runtimeVersion": {
            "description": "Output only. contains the runtime version which was used during latest function deployment.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretEnvVar": {
        "description": "Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.",
        "properties": {
          "key": {
            "description": "Name of the environment variable.",
            "type": "string"
          },
          "projectId": {
            "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
            "type": "string"
          },
          "secret": {
            "description": "Name of the secret in secret manager (not the full resource name).",
            "type": "string"
          },
          "version": {
            "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretVolume": {
        "description": "Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container. Secret value is not a part of the configuration. Every filesystem read operation performs a lookup in secret manager to retrieve the secret value.",
        "properties": {
          "mountPath": {
            "description": "The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: /etc/secrets Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log",
            "type": "string"
          },
          "projectId": {
            "description": "Project identifier (preferrably project number but can also be the project ID) of the project that contains the secret. If not set, it will be populated with the function's project assuming that the secret exists in the same project as of the function.",
            "type": "string"
          },
          "secret": {
            "description": "Name of the secret in secret manager (not the full resource name).",
            "type": "string"
          },
          "versions": {
            "description": "List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.",
            "items": {
              "$ref": "#/$defs/SecretVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretVersion": {
        "description": "Configuration for a single version.",
        "properties": {
          "path": {
            "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `/secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.",
            "type": "string"
          },
          "version": {
            "description": "Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SourceRepository": {
        "description": "Describes SourceRepository, used to represent parameters related to source repository where a function is hosted.",
        "properties": {
          "deployedUrl": {
            "description": "Output only. The URL pointing to the hosted repository where the function were defined at the time of deployment. It always points to a specific commit in the format described above.",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats: To refer to a specific commit: `https://source.developers.google.com/projects/*/repos/*/revisions/*/paths/*` To refer to a moveable alias (branch): `https://source.developers.google.com/projects/*/repos/*/moveable-aliases/*/paths/*` In particular, to refer to HEAD use `master` moveable alias. To refer to a specific fixed alias (tag): `https://source.developers.google.com/projects/*/repos/*/fixed-aliases/*/paths/*` You may omit `paths/*` if you want to use the main directory.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudfunctions.googleapis.com//v1/{location}/functions{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
