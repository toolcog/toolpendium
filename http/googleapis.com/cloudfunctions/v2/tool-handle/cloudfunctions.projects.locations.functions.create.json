{
  "name": "cloudfunctions_projects_locations_functions_create",
  "description": "Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The project and location in which the function should be created, specified in the format `projects/*/locations/*`"
      },
      "functionId": {
        "type": "string",
        "description": "The ID to use for the function, which will become the final component of the function's resource name. This value should be 4-63 characters, and valid characters are /a-z-/."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Function"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Function": {
        "description": "Describes a Cloud Function that contains user computation executed in response to an event. It encapsulates function and trigger configurations.",
        "properties": {
          "buildConfig": {
            "$ref": "#/$defs/BuildConfig"
          },
          "createTime": {
            "description": "Output only. The create timestamp of a Cloud Function. This is only applicable to 2nd Gen functions.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "User-provided description of a function.",
            "type": "string"
          },
          "environment": {
            "description": "Describe whether the function is 1st Gen or 2nd Gen.",
            "enum": [
              "ENVIRONMENT_UNSPECIFIED",
              "GEN_1",
              "GEN_2"
            ],
            "type": "string"
          },
          "eventTrigger": {
            "$ref": "#/$defs/EventTrigger"
          },
          "kmsKeyName": {
            "description": "[Preview] Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels associated with this Cloud Function.",
            "type": "object"
          },
          "name": {
            "description": "A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`",
            "type": "string"
          },
          "satisfiesPzs": {
            "description": "Output only. Reserved for future use.",
            "readOnly": true,
            "type": "boolean"
          },
          "serviceConfig": {
            "$ref": "#/$defs/ServiceConfig"
          },
          "state": {
            "description": "Output only. State of the function.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "FAILED",
              "DEPLOYING",
              "DELETING",
              "UNKNOWN"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateMessages": {
            "description": "Output only. State Messages for this Cloud Function.",
            "items": {
              "$ref": "#/$defs/GoogleCloudFunctionsV2StateMessage"
            },
            "readOnly": true,
            "type": "array"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of a Cloud Function.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "upgradeInfo": {
            "$ref": "#/$defs/UpgradeInfo"
          },
          "url": {
            "description": "Output only. The deployed url for the function.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildConfig": {
        "description": "Describes the Build step of the function that builds a container from the given source.",
        "properties": {
          "automaticUpdatePolicy": {
            "$ref": "#/$defs/AutomaticUpdatePolicy"
          },
          "build": {
            "description": "Output only. The Cloud Build name of the latest successful deployment of the function.",
            "readOnly": true,
            "type": "string"
          },
          "dockerRegistry": {
            "description": "Docker Registry to use for this deployment. This configuration is only applicable to 1st Gen functions, 2nd Gen functions can only use Artifact Registry. If `docker_repository` field is specified, this field will be automatically set as `ARTIFACT_REGISTRY`. If unspecified, it currently defaults to `CONTAINER_REGISTRY`. This field may be overridden by the backend for eligible deployments.",
            "enum": [
              "DOCKER_REGISTRY_UNSPECIFIED",
              "CONTAINER_REGISTRY",
              "ARTIFACT_REGISTRY"
            ],
            "type": "string"
          },
          "dockerRepository": {
            "description": "Repository in Artifact Registry to which the function docker image will be pushed after it is built by Cloud Build. If specified by user, it is created and managed by user with a customer managed encryption key. Otherwise, GCF will create and use a repository named 'gcf-artifacts' for every deployed region. It must match the pattern `projects/{project}/locations/{location}/repositories/{repository}`. Cross-project repositories are not supported. Cross-location repositories are not supported. Repository format must be 'DOCKER'.",
            "type": "string"
          },
          "entryPoint": {
            "description": "The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named \"function\". For Node.js this is name of a function exported by the module specified in `source_location`.",
            "type": "string"
          },
          "environmentVariables": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-provided build-time environment variables for the function",
            "type": "object"
          },
          "onDeployUpdatePolicy": {
            "$ref": "#/$defs/OnDeployUpdatePolicy"
          },
          "runtime": {
            "description": "The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).",
            "type": "string"
          },
          "serviceAccount": {
            "description": "[Preview] Service account to be used for building the container",
            "type": "string"
          },
          "source": {
            "$ref": "#/$defs/Source"
          },
          "sourceProvenance": {
            "$ref": "#/$defs/SourceProvenance"
          },
          "sourceToken": {
            "description": "An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.",
            "type": "string"
          },
          "workerPool": {
            "description": "Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AutomaticUpdatePolicy": {
        "description": "Security patches are applied automatically to the runtime without requiring the function to be redeployed.",
        "properties": {},
        "type": "object"
      },
      "OnDeployUpdatePolicy": {
        "description": "Security patches are only applied when a function is redeployed.",
        "properties": {
          "runtimeVersion": {
            "description": "Output only. contains the runtime version which was used during latest function deployment.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "The location of the function source code.",
        "properties": {
          "gitUri": {
            "description": "If provided, get the source from GitHub repository. This option is valid only for GCF 1st Gen function. Example: https://github.com///blob//",
            "type": "string"
          },
          "repoSource": {
            "$ref": "#/$defs/RepoSource"
          },
          "storageSource": {
            "$ref": "#/$defs/StorageSource"
          }
        },
        "type": "object"
      },
      "RepoSource": {
        "description": "Location of the source in a Google Cloud Source Repository.",
        "properties": {
          "branchName": {
            "description": "Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
            "type": "string"
          },
          "commitSha": {
            "description": "Explicit commit SHA to build.",
            "type": "string"
          },
          "dir": {
            "description": "Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution. eg. helloworld (no leading slash allowed)",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.",
            "type": "string"
          },
          "repoName": {
            "description": "Name of the Cloud Source Repository.",
            "type": "string"
          },
          "tagName": {
            "description": "Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageSource": {
        "description": "Location of the source in an archive file in Google Cloud Storage.",
        "properties": {
          "bucket": {
            "description": "Google Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
            "type": "string"
          },
          "generation": {
            "description": "Google Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.",
            "format": "int64",
            "type": "string"
          },
          "object": {
            "description": "Google Cloud Storage object containing the source. This object must be a gzipped archive file (`.tar.gz`) containing source to build.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SourceProvenance": {
        "description": "Provenance of the source. Ways to find the original source, or verify that some source was used for this build.",
        "properties": {
          "gitUri": {
            "description": "A copy of the build's `source.git_uri`, if exists, with any commits resolved.",
            "type": "string"
          },
          "resolvedRepoSource": {
            "$ref": "#/$defs/RepoSource"
          },
          "resolvedStorageSource": {
            "$ref": "#/$defs/StorageSource"
          }
        },
        "type": "object"
      },
      "EventTrigger": {
        "description": "Describes EventTrigger, used to request events to be sent from another service.",
        "properties": {
          "channel": {
            "description": "Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.",
            "type": "string"
          },
          "eventFilters": {
            "description": "Criteria used to filter events.",
            "items": {
              "$ref": "#/$defs/EventFilter"
            },
            "type": "array"
          },
          "eventType": {
            "description": "Required. The type of event to observe. For example: `google.cloud.audit.log.v1.written` or `google.cloud.pubsub.topic.v1.messagePublished`.",
            "type": "string"
          },
          "pubsubTopic": {
            "description": "Optional. The name of a Pub/Sub topic in the same project that will be used as the transport topic for the event delivery. Format: `projects/{project}/topics/{topic}`. This is only valid for events of type `google.cloud.pubsub.topic.v1.messagePublished`. The topic provided here will not be deleted at function deletion.",
            "type": "string"
          },
          "retryPolicy": {
            "description": "Optional. If unset, then defaults to ignoring failures (i.e. not retrying them).",
            "enum": [
              "RETRY_POLICY_UNSPECIFIED",
              "RETRY_POLICY_DO_NOT_RETRY",
              "RETRY_POLICY_RETRY"
            ],
            "type": "string"
          },
          "service": {
            "description": "Optional. The hostname of the service that 1st Gen function should be observed. If no string is provided, the default service implementing the API will be used. For example, `storage.googleapis.com` is the default for all event types in the `google.storage` namespace. The field is only applicable to 1st Gen functions.",
            "type": "string"
          },
          "serviceAccountEmail": {
            "description": "Optional. The email of the trigger's service account. The service account must have permission to invoke Cloud Run services, the permission is `run.routes.invoke`. If empty, defaults to the Compute Engine default service account: `{project_number}-compute@developer.gserviceaccount.com`.",
            "type": "string"
          },
          "trigger": {
            "description": "Output only. The resource name of the Eventarc trigger. The format of this field is `projects/{project}/locations/{region}/triggers/{trigger}`.",
            "readOnly": true,
            "type": "string"
          },
          "triggerRegion": {
            "description": "The region that the trigger will be in. The trigger will only receive events originating in this region. It can be the same region as the function, a different region or multi-region, or the global region. If not provided, defaults to the same region as the function.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventFilter": {
        "description": "Filters events based on exact matches on the CloudEvents attributes.",
        "properties": {
          "attribute": {
            "description": "Required. The name of a CloudEvents attribute.",
            "type": "string"
          },
          "operator": {
            "description": "Optional. The operator used for matching the events with the value of the filter. If not specified, only events that have an exact key-value pair specified in the filter are matched. The only allowed value is `match-path-pattern`.",
            "type": "string"
          },
          "value": {
            "description": "Required. The value for the attribute.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ServiceConfig": {
        "description": "Describes the Service being deployed. Currently Supported : Cloud Run (fully managed).",
        "properties": {
          "allTrafficOnLatestRevision": {
            "description": "Whether 100% of traffic is routed to the latest revision. On CreateFunction and UpdateFunction, when set to true, the revision being deployed will serve 100% of traffic, ignoring any traffic split settings, if any. On GetFunction, true will be returned if the latest revision is serving 100% of traffic.",
            "type": "boolean"
          },
          "availableCpu": {
            "description": "The number of CPUs used in a single container instance. Default value is calculated from available memory. Supports the same values as Cloud Run, see https://cloud.google.com/run/docs/reference/rest/v1/Container#resourcerequirements Example: \"1\" indicates 1 vCPU",
            "type": "string"
          },
          "availableMemory": {
            "description": "The amount of memory available for a function. Defaults to 256M. Supported units are k, M, G, Mi, Gi. If no unit is supplied the value is interpreted as bytes. See https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go a full description.",
            "type": "string"
          },
          "environmentVariables": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Environment variables that shall be available during function execution.",
            "type": "object"
          },
          "ingressSettings": {
            "description": "The ingress settings for the function, controlling what traffic can reach it.",
            "enum": [
              "INGRESS_SETTINGS_UNSPECIFIED",
              "ALLOW_ALL",
              "ALLOW_INTERNAL_ONLY",
              "ALLOW_INTERNAL_AND_GCLB"
            ],
            "type": "string"
          },
          "maxInstanceCount": {
            "description": "The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.",
            "format": "int32",
            "type": "integer"
          },
          "maxInstanceRequestConcurrency": {
            "description": "Sets the maximum number of concurrent requests that each instance can receive. Defaults to 1.",
            "format": "int32",
            "type": "integer"
          },
          "minInstanceCount": {
            "description": "The limit on the minimum number of function instances that may coexist at a given time. Function instances are kept in idle state for a short period after they finished executing the request to reduce cold start time for subsequent requests. Setting a minimum instance count will ensure that the given number of instances are kept running in idle state always. This can help with cold start times when jump in incoming request count occurs after the idle instance would have been stopped in the default case.",
            "format": "int32",
            "type": "integer"
          },
          "revision": {
            "description": "Output only. The name of service revision.",
            "readOnly": true,
            "type": "string"
          },
          "secretEnvironmentVariables": {
            "description": "Secret environment variables configuration.",
            "items": {
              "$ref": "#/$defs/SecretEnvVar"
            },
            "type": "array"
          },
          "secretVolumes": {
            "description": "Secret volumes configuration.",
            "items": {
              "$ref": "#/$defs/SecretVolume"
            },
            "type": "array"
          },
          "securityLevel": {
            "description": "Security level configure whether the function only accepts https. This configuration is only applicable to 1st Gen functions with Http trigger. By default https is optional for 1st Gen functions; 2nd Gen functions are https ONLY.",
            "enum": [
              "SECURITY_LEVEL_UNSPECIFIED",
              "SECURE_ALWAYS",
              "SECURE_OPTIONAL"
            ],
            "type": "string"
          },
          "service": {
            "description": "Output only. Name of the service associated with a Function. The format of this field is `projects/{project}/locations/{region}/services/{service}`",
            "readOnly": true,
            "type": "string"
          },
          "serviceAccountEmail": {
            "description": "The email of the service's service account. If empty, defaults to `{project_number}-compute@developer.gserviceaccount.com`.",
            "type": "string"
          },
          "timeoutSeconds": {
            "description": "The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.",
            "format": "int32",
            "type": "integer"
          },
          "uri": {
            "description": "Output only. URI of the Service deployed.",
            "readOnly": true,
            "type": "string"
          },
          "vpcConnector": {
            "description": "The Serverless VPC Access connector that this cloud function can connect to. The format of this field is `projects/*/locations/*/connectors/*`.",
            "type": "string"
          },
          "vpcConnectorEgressSettings": {
            "description": "The egress settings for the connector, controlling what traffic is diverted through it.",
            "enum": [
              "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED",
              "PRIVATE_RANGES_ONLY",
              "ALL_TRAFFIC"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretEnvVar": {
        "description": "Configuration for a secret environment variable. It has the information necessary to fetch the secret value from secret manager and expose it as an environment variable.",
        "properties": {
          "key": {
            "description": "Name of the environment variable.",
            "type": "string"
          },
          "projectId": {
            "description": "Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.",
            "type": "string"
          },
          "secret": {
            "description": "Name of the secret in secret manager (not the full resource name).",
            "type": "string"
          },
          "version": {
            "description": "Version of the secret (version number or the string 'latest'). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new instances start.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SecretVolume": {
        "description": "Configuration for a secret volume. It has the information necessary to fetch the secret value from secret manager and make it available as files mounted at the requested paths within the application container.",
        "properties": {
          "mountPath": {
            "description": "The path within the container to mount the secret volume. For example, setting the mount_path as `/etc/secrets` would mount the secret value files under the `/etc/secrets` directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount path: /etc/secrets",
            "type": "string"
          },
          "projectId": {
            "description": "Project identifier (preferably project number but can also be the project ID) of the project that contains the secret. If not set, it is assumed that the secret is in the same project as the function.",
            "type": "string"
          },
          "secret": {
            "description": "Name of the secret in secret manager (not the full resource name).",
            "type": "string"
          },
          "versions": {
            "description": "List of secret versions to mount for this secret. If empty, the `latest` version of the secret will be made available in a file named after the secret under the mount point.",
            "items": {
              "$ref": "#/$defs/SecretVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SecretVersion": {
        "description": "Configuration for a single version.",
        "properties": {
          "path": {
            "description": "Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as '/etc/secrets' and path as `secret_foo` would mount the secret value file at `/etc/secrets/secret_foo`.",
            "type": "string"
          },
          "version": {
            "description": "Version of the secret (version number or the string 'latest'). It is preferable to use `latest` version with secret volumes as secret value changes are reflected immediately.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudFunctionsV2StateMessage": {
        "description": "Informational messages about the state of the Cloud Function or Operation.",
        "properties": {
          "message": {
            "description": "The message.",
            "type": "string"
          },
          "severity": {
            "description": "Severity of the state message.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "ERROR",
              "WARNING",
              "INFO"
            ],
            "type": "string"
          },
          "type": {
            "description": "One-word CamelCase type of the state message.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeInfo": {
        "description": "Information related to: * A function's eligibility for 1st Gen to 2nd Gen migration * Current state of migration for function undergoing migration.",
        "properties": {
          "buildConfig": {
            "$ref": "#/$defs/BuildConfig"
          },
          "eventTrigger": {
            "$ref": "#/$defs/EventTrigger"
          },
          "serviceConfig": {
            "$ref": "#/$defs/ServiceConfig"
          },
          "upgradeState": {
            "description": "UpgradeState of the function",
            "enum": [
              "UPGRADE_STATE_UNSPECIFIED",
              "ELIGIBLE_FOR_2ND_GEN_UPGRADE",
              "UPGRADE_OPERATION_IN_PROGRESS",
              "SETUP_FUNCTION_UPGRADE_CONFIG_SUCCESSFUL",
              "SETUP_FUNCTION_UPGRADE_CONFIG_ERROR",
              "ABORT_FUNCTION_UPGRADE_ERROR",
              "REDIRECT_FUNCTION_UPGRADE_TRAFFIC_SUCCESSFUL",
              "REDIRECT_FUNCTION_UPGRADE_TRAFFIC_ERROR",
              "ROLLBACK_FUNCTION_UPGRADE_TRAFFIC_ERROR",
              "COMMIT_FUNCTION_UPGRADE_ERROR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudfunctions.googleapis.com//v2/{parent}/functions{?functionId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
