{
  "name": "digitalassetlinks_assetlinks_bulkCheck",
  "description": "Send a bundle of statement checks in a single RPC to minimize latency and service load. Statements need not be all for the same source and/or target. We recommend using this method when you need to check more than one statement in a short period of time.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BulkCheckRequest"
      }
    },
    "$defs": {
      "BulkCheckRequest": {
        "description": "Message used to check for the existence of multiple digital asset links within a single RPC.",
        "properties": {
          "allowGoogleInternalDataSources": {
            "description": "Same configuration as in Check request, all statements checks will use same configurations.",
            "type": "boolean"
          },
          "defaultRelation": {
            "description": "If specified, will be used in any given template statement that doesnâ€™t specify a relation.",
            "type": "string"
          },
          "defaultSource": {
            "$ref": "#/$defs/Asset"
          },
          "defaultTarget": {
            "$ref": "#/$defs/Asset"
          },
          "skipCacheLookup": {
            "description": "Same configuration as in Check request, all statements checks will use same configurations.",
            "type": "boolean"
          },
          "statements": {
            "description": "List of statements to check. For each statement, you can omit a field if the corresponding default_* field below was supplied. Minimum 1 statement; maximum 1,000 statements. Any additional statements will be ignored.",
            "items": {
              "$ref": "#/$defs/StatementTemplate"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Asset": {
        "description": "Uniquely identifies an asset. A digital asset is an identifiable and addressable online entity that typically provides some service or content. Examples of assets are websites, Android apps, Twitter feeds, and Plus Pages.",
        "properties": {
          "androidApp": {
            "$ref": "#/$defs/AndroidAppAsset"
          },
          "web": {
            "$ref": "#/$defs/WebAsset"
          }
        },
        "type": "object"
      },
      "AndroidAppAsset": {
        "description": "Describes an android app asset.",
        "properties": {
          "certificate": {
            "$ref": "#/$defs/CertificateInfo"
          },
          "packageName": {
            "description": "Android App assets are naturally identified by their Java package name. For example, the Google Maps app uses the package name `com.google.android.apps.maps`. REQUIRED",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateInfo": {
        "description": "Describes an X509 certificate.",
        "properties": {
          "sha256Fingerprint": {
            "description": "The uppercase SHA-265 fingerprint of the certificate. From the PEM certificate, it can be acquired like this: $ keytool -printcert -file $CERTFILE | grep SHA256: SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83: \\ 42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 or like this: $ openssl x509 -in $CERTFILE -noout -fingerprint -sha256 SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64: \\ 16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 In this example, the contents of this field would be `14:6D:E9:83:C5:73: 06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF: 44:E5`. If these tools are not available to you, you can convert the PEM certificate into the DER format, compute the SHA-256 hash of that string and represent the result as a hexstring (that is, uppercase hexadecimal representations of each octet, separated by colons).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "WebAsset": {
        "description": "Describes a web asset.",
        "properties": {
          "site": {
            "description": "Web assets are identified by a URL that contains only the scheme, hostname and port parts. The format is http[s]://[:] Hostnames must be fully qualified: they must end in a single period (\"`.`\"). Only the schemes \"http\" and \"https\" are currently allowed. Port numbers are given as a decimal number, and they must be omitted if the standard port numbers are used: 80 for http and 443 for https. We call this limited URL the \"site\". All URLs that share the same scheme, hostname and port are considered to be a part of the site and thus belong to the web asset. Example: the asset with the site `https://www.google.com` contains all these URLs: * `https://www.google.com/` * `https://www.google.com:443/` * `https://www.google.com/foo` * `https://www.google.com/foo?bar` * `https://www.google.com/foo#bar` * `https://user@password:www.google.com/` But it does not contain these URLs: * `http://www.google.com/` (wrong scheme) * `https://google.com/` (hostname does not match) * `https://www.google.com:444/` (port does not match) REQUIRED",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatementTemplate": {
        "description": "A single statement to check in a bulk call using BulkCheck. See CheckRequest for details about each field.",
        "properties": {
          "relation": {
            "description": "The relationship being asserted between the source and target. If omitted, you must specify a BulkCheckRequest.default_relation value to use here.",
            "type": "string"
          },
          "source": {
            "$ref": "#/$defs/Asset"
          },
          "target": {
            "$ref": "#/$defs/Asset"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://digitalassetlinks.googleapis.com//v1/assetlinks:bulkCheck{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response for BulkCheck call. Results are sent in a list in the same order in which they were sent. Individual check errors are described in the appropriate check_results entry. If the entire call fails, the response will include a bulk_error_code field describing the error.",
        "**Key properties:**",
        {
          "$ul": [
            "**bulkErrorCode**: Error code for the entire request. Present only if the entire request failed. Individual check errors will not trigger the presence of this field.",
            "**checkResults**: List of results for each check request. Results are returned in the same order in which they were sent in the request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
