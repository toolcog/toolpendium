{
  "name": "metastore_projects_locations_federations_create",
  "description": "Creates a metastore federation in a project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The relative resource name of the location in which to create a federation service, in the following form:projects/{project_number}/locations/{location_id}."
      },
      "federationId": {
        "type": "string",
        "description": "Required. The ID of the metastore federation, which is used as the final component of the metastore federation's name.This value must be between 2 and 63 characters long inclusive, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Federation"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Federation": {
        "description": "Represents a federation of multiple backend metastores.",
        "properties": {
          "backendMetastores": {
            "additionalProperties": {
              "$ref": "#/$defs/BackendMetastore"
            },
            "description": "A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.",
            "type": "object"
          },
          "createTime": {
            "description": "Output only. The time when the metastore federation was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "endpointUri": {
            "description": "Output only. The federation endpoint.",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-defined labels for the metastore federation.",
            "type": "object"
          },
          "name": {
            "description": "Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.",
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of the federation.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "UPDATING",
              "DELETING",
              "ERROR"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateMessage": {
            "description": "Output only. Additional information about the current state of the metastore federation, if available.",
            "readOnly": true,
            "type": "string"
          },
          "uid": {
            "description": "Output only. The globally unique resource identifier of the metastore federation.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time when the metastore federation was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackendMetastore": {
        "description": "Represents a backend metastore for the federation.",
        "properties": {
          "metastoreType": {
            "description": "The type of the backend metastore.",
            "enum": [
              "METASTORE_TYPE_UNSPECIFIED",
              "DATAPLEX",
              "BIGQUERY",
              "DATAPROC_METASTORE"
            ],
            "type": "string"
          },
          "name": {
            "description": "The relative resource name of the metastore that is being federated. The formats of the relative resource names for the currently supported metastores are listed below: BigQuery projects/{project_id} Dataproc Metastore projects/{project_id}/locations/{location}/services/{service_id}",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://metastore.googleapis.com//v1alpha/{parent}/federations{?federationId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.",
            [
              "**error**: The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
