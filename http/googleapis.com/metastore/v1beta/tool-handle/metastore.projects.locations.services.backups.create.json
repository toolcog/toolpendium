{
  "name": "metastore_projects_locations_services_backups_create",
  "description": "Creates a new backup in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The relative resource name of the service in which to create a backup of the following form:projects/{project_number}/locations/{location_id}/services/{service_id}."
      },
      "backupId": {
        "type": "string",
        "description": "Required. The ID of the backup, which is used as the final component of the backup's name.This value must be between 1 and 64 characters long, begin with a letter, end with a letter or number, and consist of alpha-numeric ASCII characters or hyphens."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. A request ID. Specify a unique request ID to allow the server to ignore the request if it has completed. The server will ignore subsequent requests that provide a duplicate request ID for at least 60 minutes after the first request.For example, if an initial request times out, followed by another request with the same request ID, the server ignores the second request to prevent the creation of duplicate commitments.The request ID must be a valid UUID (https://en.wikipedia.org/wiki/Universally_unique_identifier#Format) A zero UUID (00000000-0000-0000-0000-000000000000) is not supported."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Backup"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Backup": {
        "description": "The details of a backup resource.",
        "properties": {
          "createTime": {
            "description": "Output only. The time when the backup was started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "The description of the backup.",
            "type": "string"
          },
          "endTime": {
            "description": "Output only. The time when the backup finished creating.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}",
            "type": "string"
          },
          "restoringServices": {
            "description": "Output only. Services that are restoring from the backup.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "serviceRevision": {
            "$ref": "#/$defs/Service"
          },
          "state": {
            "description": "Output only. The current state of the backup.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "DELETING",
              "ACTIVE",
              "FAILED",
              "RESTORING"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Service": {
        "description": "A managed metastore service that serves metadata queries.",
        "properties": {
          "artifactGcsUri": {
            "description": "Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.",
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time when the metastore service was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "databaseType": {
            "description": "Immutable. The database type that the Metastore service stores its data.",
            "enum": [
              "DATABASE_TYPE_UNSPECIFIED",
              "MYSQL",
              "SPANNER"
            ],
            "type": "string"
          },
          "encryptionConfig": {
            "$ref": "#/$defs/EncryptionConfig"
          },
          "endpointUri": {
            "description": "Output only. The URI of the endpoint used to access the metastore service.",
            "readOnly": true,
            "type": "string"
          },
          "hiveMetastoreConfig": {
            "$ref": "#/$defs/HiveMetastoreConfig"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-defined labels for the metastore service.",
            "type": "object"
          },
          "maintenanceWindow": {
            "$ref": "#/$defs/MaintenanceWindow"
          },
          "metadataIntegration": {
            "$ref": "#/$defs/MetadataIntegration"
          },
          "metadataManagementActivity": {
            "$ref": "#/$defs/MetadataManagementActivity"
          },
          "name": {
            "description": "Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.",
            "type": "string"
          },
          "network": {
            "description": "Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.",
            "type": "string"
          },
          "networkConfig": {
            "$ref": "#/$defs/NetworkConfig"
          },
          "port": {
            "description": "The TCP port at which the metastore service is reached. Default: 9083.",
            "format": "int32",
            "type": "integer"
          },
          "releaseChannel": {
            "description": "Immutable. The release channel of the service. If unspecified, defaults to STABLE.",
            "enum": [
              "RELEASE_CHANNEL_UNSPECIFIED",
              "CANARY",
              "STABLE"
            ],
            "type": "string"
          },
          "scalingConfig": {
            "$ref": "#/$defs/ScalingConfig"
          },
          "scheduledBackup": {
            "$ref": "#/$defs/ScheduledBackup"
          },
          "state": {
            "description": "Output only. The current state of the metastore service.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "SUSPENDING",
              "SUSPENDED",
              "UPDATING",
              "DELETING",
              "ERROR"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateMessage": {
            "description": "Output only. Additional information about the current state of the metastore service, if available.",
            "readOnly": true,
            "type": "string"
          },
          "telemetryConfig": {
            "$ref": "#/$defs/TelemetryConfig"
          },
          "tier": {
            "description": "The tier of the service.",
            "enum": [
              "TIER_UNSPECIFIED",
              "DEVELOPER",
              "ENTERPRISE"
            ],
            "type": "string"
          },
          "uid": {
            "description": "Output only. The globally unique resource identifier of the metastore service.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time when the metastore service was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionConfig": {
        "description": "Encryption settings for the service.",
        "properties": {
          "kmsKey": {
            "description": "The fully qualified customer provided Cloud KMS key name to use for customer data encryption, in the following form:projects/{project_number}/locations/{location_id}/keyRings/{key_ring_id}/cryptoKeys/{crypto_key_id}.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HiveMetastoreConfig": {
        "description": "Specifies configuration information specific to running Hive metastore software as the metastore service.",
        "properties": {
          "auxiliaryVersions": {
            "additionalProperties": {
              "$ref": "#/$defs/AuxiliaryVersionConfig"
            },
            "description": "A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.",
            "type": "object"
          },
          "configOverrides": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.",
            "type": "object"
          },
          "endpointProtocol": {
            "description": "The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.",
            "enum": [
              "ENDPOINT_PROTOCOL_UNSPECIFIED",
              "THRIFT",
              "GRPC"
            ],
            "type": "string"
          },
          "kerberosConfig": {
            "$ref": "#/$defs/KerberosConfig"
          },
          "version": {
            "description": "Immutable. The Hive metastore schema version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuxiliaryVersionConfig": {
        "description": "Configuration information for the auxiliary service versions.",
        "properties": {
          "configOverrides": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A mapping of Hive metastore configuration key-value pairs to apply to the auxiliary Hive metastore (configured in hive-site.xml) in addition to the primary version's overrides. If keys are present in both the auxiliary version's overrides and the primary version's overrides, the value from the auxiliary version's overrides takes precedence.",
            "type": "object"
          },
          "networkConfig": {
            "$ref": "#/$defs/NetworkConfig"
          },
          "version": {
            "description": "The Hive metastore version of the auxiliary service. It must be less than the primary Hive metastore service's version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NetworkConfig": {
        "description": "Network configuration for the Dataproc Metastore service.",
        "properties": {
          "consumers": {
            "description": "Immutable. The consumer-side network configuration for the Dataproc Metastore instance.",
            "items": {
              "$ref": "#/$defs/Consumer"
            },
            "type": "array"
          },
          "customRoutesEnabled": {
            "description": "Enables custom routes to be imported and exported for the Dataproc Metastore service's peered VPC network.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Consumer": {
        "description": "Contains information of the customer's network configurations.",
        "properties": {
          "endpointLocation": {
            "description": "Output only. The location of the endpoint URI. Format: projects/{project}/locations/{location}.",
            "readOnly": true,
            "type": "string"
          },
          "endpointUri": {
            "description": "Output only. The URI of the endpoint used to access the metastore service.",
            "readOnly": true,
            "type": "string"
          },
          "subnetwork": {
            "description": "Immutable. The subnetwork of the customer project from which an IP address is reserved and used as the Dataproc Metastore service's endpoint. It is accessible to hosts in the subnet and to all hosts in a subnet in the same region and same network. There must be at least one IP address available in the subnet's primary range. The subnet is specified in the following form:projects/{project_number}/regions/{region_id}/subnetworks/{subnetwork_id}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KerberosConfig": {
        "description": "Configuration information for a Kerberos principal.",
        "properties": {
          "keytab": {
            "$ref": "#/$defs/Secret"
          },
          "krb5ConfigGcsUri": {
            "description": "A Cloud Storage URI that specifies the path to a krb5.conf file. It is of the form gs://{bucket_name}/path/to/krb5.conf, although the file does not need to be named krb5.conf explicitly.",
            "type": "string"
          },
          "principal": {
            "description": "A Kerberos principal that exists in the both the keytab the KDC to authenticate as. A typical principal is of the form primary/instance@REALM, but there is no exact format.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Secret": {
        "description": "A securely stored value.",
        "properties": {
          "cloudSecret": {
            "description": "The relative resource name of a Secret Manager secret version, in the following form:projects/{project_number}/secrets/{secret_id}/versions/{version_id}.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MaintenanceWindow": {
        "description": "Maintenance window. This specifies when Dataproc Metastore may perform system maintenance operation to the service.",
        "properties": {
          "dayOfWeek": {
            "description": "The day of week, when the window starts.",
            "enum": [
              "DAY_OF_WEEK_UNSPECIFIED",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ],
            "type": "string"
          },
          "hourOfDay": {
            "description": "The hour of day (0-23) when the window starts.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MetadataIntegration": {
        "description": "Specifies how metastore metadata should be integrated with external services.",
        "properties": {
          "dataCatalogConfig": {
            "$ref": "#/$defs/DataCatalogConfig"
          },
          "dataplexConfig": {
            "$ref": "#/$defs/DataplexConfig"
          }
        },
        "type": "object"
      },
      "DataCatalogConfig": {
        "description": "Specifies how metastore metadata should be integrated with the Data Catalog service.",
        "properties": {
          "enabled": {
            "description": "Optional. Defines whether the metastore metadata should be synced to Data Catalog. The default value is to disable syncing metastore metadata to Data Catalog.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DataplexConfig": {
        "description": "Specifies how metastore metadata should be integrated with the Dataplex service.",
        "properties": {
          "lakeResources": {
            "additionalProperties": {
              "$ref": "#/$defs/Lake"
            },
            "description": "A reference to the Lake resources that this metastore service is attached to. The key is the lake resource name. Example: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Lake": {
        "description": "Represents a Lake resource",
        "properties": {
          "name": {
            "description": "The Lake resource name. Example: projects/{project_number}/locations/{location_id}/lakes/{lake_id}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataManagementActivity": {
        "description": "The metadata management activities of the metastore service.",
        "properties": {
          "metadataExports": {
            "description": "Output only. The latest metadata exports of the metastore service.",
            "items": {
              "$ref": "#/$defs/MetadataExport"
            },
            "readOnly": true,
            "type": "array"
          },
          "restores": {
            "description": "Output only. The latest restores of the metastore service.",
            "items": {
              "$ref": "#/$defs/Restore"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetadataExport": {
        "description": "The details of a metadata export operation.",
        "properties": {
          "databaseDumpType": {
            "description": "Output only. The type of the database dump.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "MYSQL",
              "AVRO"
            ],
            "readOnly": true,
            "type": "string"
          },
          "destinationGcsUri": {
            "description": "Output only. A Cloud Storage URI of a folder that metadata are exported to, in the form of gs:////, where is automatically generated.",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. The time when the export ended.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The time when the export started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of the export.",
            "enum": [
              "STATE_UNSPECIFIED",
              "RUNNING",
              "SUCCEEDED",
              "FAILED",
              "CANCELLED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Restore": {
        "description": "The details of a metadata restore operation.",
        "properties": {
          "backup": {
            "description": "Output only. The relative resource name of the metastore service backup to restore from, in the following form:projects/{project_id}/locations/{location_id}/services/{service_id}/backups/{backup_id}.",
            "readOnly": true,
            "type": "string"
          },
          "backupLocation": {
            "description": "Optional. A Cloud Storage URI specifying where the backup artifacts are stored, in the format gs:///.",
            "type": "string"
          },
          "details": {
            "description": "Output only. The restore details containing the revision of the service to be restored to, in format of JSON.",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. The time when the restore ended.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The time when the restore started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of the restore.",
            "enum": [
              "STATE_UNSPECIFIED",
              "RUNNING",
              "SUCCEEDED",
              "FAILED",
              "CANCELLED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Output only. The type of restore.",
            "enum": [
              "RESTORE_TYPE_UNSPECIFIED",
              "FULL",
              "METADATA_ONLY"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ScalingConfig": {
        "description": "Represents the scaling configuration of a metastore service.",
        "properties": {
          "instanceSize": {
            "description": "An enum of readable instance sizes, with each instance size mapping to a float value (e.g. InstanceSize.EXTRA_SMALL = scaling_factor(0.1))",
            "enum": [
              "INSTANCE_SIZE_UNSPECIFIED",
              "EXTRA_SMALL",
              "SMALL",
              "MEDIUM",
              "LARGE",
              "EXTRA_LARGE"
            ],
            "type": "string"
          },
          "scalingFactor": {
            "description": "Scaling factor, increments of 0.1 for values less than 1.0, and increments of 1.0 for values greater than 1.0.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ScheduledBackup": {
        "description": "This specifies the configuration of scheduled backup.",
        "properties": {
          "backupLocation": {
            "description": "Optional. A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing backup files will be stored below it.",
            "type": "string"
          },
          "cronSchedule": {
            "description": "Optional. The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.",
            "type": "string"
          },
          "enabled": {
            "description": "Optional. Defines whether the scheduled backup is enabled. The default value is false.",
            "type": "boolean"
          },
          "latestBackup": {
            "$ref": "#/$defs/LatestBackup"
          },
          "nextScheduledTime": {
            "description": "Output only. The time when the next backups execution is scheduled to start.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "timeZone": {
            "description": "Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LatestBackup": {
        "description": "The details of the latest scheduled backup.",
        "properties": {
          "backupId": {
            "description": "Output only. The ID of an in-progress scheduled backup. Empty if no backup is in progress.",
            "readOnly": true,
            "type": "string"
          },
          "duration": {
            "description": "Output only. The duration of the backup completion.",
            "format": "google-duration",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The time when the backup was started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of the backup.",
            "enum": [
              "STATE_UNSPECIFIED",
              "IN_PROGRESS",
              "SUCCEEDED",
              "FAILED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TelemetryConfig": {
        "description": "Telemetry Configuration for the Dataproc Metastore service.",
        "properties": {
          "logFormat": {
            "description": "The output format of the Dataproc Metastore service's logs.",
            "enum": [
              "LOG_FORMAT_UNSPECIFIED",
              "LEGACY",
              "JSON"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://metastore.googleapis.com//v1beta/{parent}/backups{?backupId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.",
            [
              "**error**: The Status type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by gRPC (https://github.com/grpc). Each Status message contains three pieces of data: error code, error message, and error details.You can find out more about this error model and how to work with it in the API Design Guide (https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
