{
  "name": "chromepolicy_customers_policies_orgunits_batchInherit",
  "description": "Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.",
  "parameters": {
    "type": "object",
    "properties": {
      "customer": {
        "type": "string",
        "description": "ID of the G Suite account or literal \"my_customer\" for the customer associated to the request."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest"
      }
    },
    "required": [
      "customer"
    ],
    "$defs": {
      "GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest": {
        "description": "Request message for specifying that multiple policy values inherit their value from their parents.",
        "properties": {
          "requests": {
            "description": "List of policies that have to inherit their values as defined by the `requests`. All requests in the list must follow these restrictions: 1. All schemas in the list must have the same root namespace. 2. All `policyTargetKey.targetResource` values must point to an org unit resource. 3. All `policyTargetKey` values must have the same key names in the ` additionalTargetKeys`. This also means if one of the targets has an empty `additionalTargetKeys` map, all of the targets must have an empty `additionalTargetKeys` map. 4. No two modification requests can reference the same `policySchema` + ` policyTargetKey` pair. ",
            "items": {
              "$ref": "#/$defs/GoogleChromePolicyVersionsV1InheritOrgUnitPolicyRequest"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleChromePolicyVersionsV1InheritOrgUnitPolicyRequest": {
        "description": "Request parameters for inheriting policy value of a specific org unit target from the policy value of its parent org unit.",
        "properties": {
          "policySchema": {
            "description": "The fully qualified name of the policy schema that is being inherited.",
            "type": "string"
          },
          "policyTargetKey": {
            "$ref": "#/$defs/GoogleChromePolicyVersionsV1PolicyTargetKey"
          }
        },
        "type": "object"
      },
      "GoogleChromePolicyVersionsV1PolicyTargetKey": {
        "description": "The key used to identify the target on which the policy will be applied.",
        "properties": {
          "additionalTargetKeys": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Map containing the additional target key name and value pairs used to further identify the target of the policy.",
            "type": "object"
          },
          "targetResource": {
            "description": "The target resource on which this policy is applied. The following resources are supported: * Organizational Unit (\"orgunits/{orgunit_id}\") * Group (\"groups/{group_id}\")",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://chromepolicy.googleapis.com//v1/{customer}/policies/orgunits:batchInherit{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
