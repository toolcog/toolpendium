{
  "name": "networkservices_projects_locations_httpRoutes_create",
  "description": "Creates a new HttpRoute in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource of the HttpRoute. Must be in the format `projects/*/locations/global`."
      },
      "httpRouteId": {
        "type": "string",
        "description": "Required. Short name of the HttpRoute resource to be created."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/HttpRoute"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "HttpRoute": {
        "description": "HttpRoute is the resource defining how HTTP traffic should be routed by a Mesh or Gateway resource.",
        "properties": {
          "createTime": {
            "description": "Output only. The timestamp when the resource was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. A free-text description of the resource. Max length 1024 characters.",
            "type": "string"
          },
          "gateways": {
            "description": "Optional. Gateways defines a list of gateways this HttpRoute is attached to, as one of the routing rules to route the requests served by the gateway. Each gateway reference should match the pattern: `projects/*/locations/global/gateways/`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "hostnames": {
            "description": "Required. Hostnames define a set of hosts that should match against the HTTP host header to select a HttpRoute to process the request. Hostname is the fully qualified domain name of a network host, as defined by RFC 1123 with the exception that: - IPs are not allowed. - A hostname may be prefixed with a wildcard label (`*.`). The wildcard label must appear by itself as the first label. Hostname can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. `foo.example.com`) or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. `*.example.com`). Note that as per RFC1035 and RFC1123, a label must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character. No other punctuation is allowed. The routes associated with a Mesh or Gateways must have unique hostnames. If you attempt to attach multiple routes with conflicting hostnames, the configuration will be rejected. For example, while it is acceptable for routes for the hostnames `*.foo.bar.com` and `*.bar.com` to be associated with the same Mesh (or Gateways under the same scope), it is not possible to associate two routes both with `*.bar.com` or both with `bar.com`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Set of label tags associated with the HttpRoute resource.",
            "type": "object"
          },
          "meshes": {
            "description": "Optional. Meshes defines a list of meshes this HttpRoute is attached to, as one of the routing rules to route the requests served by the mesh. Each mesh reference should match the pattern: `projects/*/locations/global/meshes/` The attached Mesh should be of a type SIDECAR",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Required. Name of the HttpRoute resource. It matches pattern `projects/*/locations/global/httpRoutes/http_route_name>`.",
            "type": "string"
          },
          "rules": {
            "description": "Required. Rules that define how traffic is routed and handled. Rules will be matched sequentially based on the RouteMatch specified for the rule.",
            "items": {
              "$ref": "#/$defs/HttpRouteRouteRule"
            },
            "type": "array"
          },
          "selfLink": {
            "description": "Output only. Server-defined URL of this resource",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp when the resource was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteRouteRule": {
        "description": "Specifies how to match traffic and how to route traffic when traffic is matched.",
        "properties": {
          "action": {
            "$ref": "#/$defs/HttpRouteRouteAction"
          },
          "matches": {
            "description": "A list of matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if ANY one of the matches is satisfied. If no matches field is specified, this rule will unconditionally match traffic. If a default rule is desired to be configured, add a rule with no matches specified to the end of the rules list.",
            "items": {
              "$ref": "#/$defs/HttpRouteRouteMatch"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HttpRouteRouteAction": {
        "description": "The specifications for routing traffic and applying associated policies.",
        "properties": {
          "corsPolicy": {
            "$ref": "#/$defs/HttpRouteCorsPolicy"
          },
          "destinations": {
            "description": "The destination to which traffic should be forwarded.",
            "items": {
              "$ref": "#/$defs/HttpRouteDestination"
            },
            "type": "array"
          },
          "directResponse": {
            "$ref": "#/$defs/HttpRouteHttpDirectResponse"
          },
          "faultInjectionPolicy": {
            "$ref": "#/$defs/HttpRouteFaultInjectionPolicy"
          },
          "idleTimeout": {
            "description": "Optional. Specifies the idle timeout for the selected route. The idle timeout is defined as the period in which there are no bytes sent or received on either the upstream or downstream connection. If not set, the default idle timeout is 1 hour. If set to 0s, the timeout will be disabled.",
            "format": "google-duration",
            "type": "string"
          },
          "redirect": {
            "$ref": "#/$defs/HttpRouteRedirect"
          },
          "requestHeaderModifier": {
            "$ref": "#/$defs/HttpRouteHeaderModifier"
          },
          "requestMirrorPolicy": {
            "$ref": "#/$defs/HttpRouteRequestMirrorPolicy"
          },
          "responseHeaderModifier": {
            "$ref": "#/$defs/HttpRouteHeaderModifier"
          },
          "retryPolicy": {
            "$ref": "#/$defs/HttpRouteRetryPolicy"
          },
          "statefulSessionAffinity": {
            "$ref": "#/$defs/HttpRouteStatefulSessionAffinityPolicy"
          },
          "timeout": {
            "description": "Specifies the timeout for selected route. Timeout is computed from the time the request has been fully processed (i.e. end of stream) up until the response has been completely processed. Timeout includes all retries.",
            "format": "google-duration",
            "type": "string"
          },
          "urlRewrite": {
            "$ref": "#/$defs/HttpRouteURLRewrite"
          }
        },
        "type": "object"
      },
      "HttpRouteCorsPolicy": {
        "description": "The Specification for allowing client side cross-origin requests.",
        "properties": {
          "allowCredentials": {
            "description": "In response to a preflight request, setting this to true indicates that the actual request can include user credentials. This translates to the Access-Control-Allow-Credentials header. Default value is false.",
            "type": "boolean"
          },
          "allowHeaders": {
            "description": "Specifies the content for Access-Control-Allow-Headers header.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowMethods": {
            "description": "Specifies the content for Access-Control-Allow-Methods header.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowOriginRegexes": {
            "description": "Specifies the regular expression patterns that match allowed origins. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "allowOrigins": {
            "description": "Specifies the list of origins that will be allowed to do CORS requests. An origin is allowed if it matches either an item in allow_origins or an item in allow_origin_regexes.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "disabled": {
            "description": "If true, the CORS policy is disabled. The default value is false, which indicates that the CORS policy is in effect.",
            "type": "boolean"
          },
          "exposeHeaders": {
            "description": "Specifies the content for Access-Control-Expose-Headers header.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "maxAge": {
            "description": "Specifies how long result of a preflight request can be cached in seconds. This translates to the Access-Control-Max-Age header.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteDestination": {
        "description": "Specifications of a destination to which the request should be routed to.",
        "properties": {
          "requestHeaderModifier": {
            "$ref": "#/$defs/HttpRouteHeaderModifier"
          },
          "responseHeaderModifier": {
            "$ref": "#/$defs/HttpRouteHeaderModifier"
          },
          "serviceName": {
            "description": "The URL of a BackendService to route traffic to.",
            "type": "string"
          },
          "weight": {
            "description": "Specifies the proportion of requests forwarded to the backend referenced by the serviceName field. This is computed as: - weight/Sum(weights in this destination list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. If only one serviceName is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weights are specified for any one service name, they need to be specified for all of them. If weights are unspecified for all services, then, traffic is distributed in equal proportions to all of them.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HttpRouteHeaderModifier": {
        "description": "The specification for modifying HTTP header in HTTP request and HTTP response.",
        "properties": {
          "add": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Add the headers with given map where key is the name of the header, value is the value of the header.",
            "type": "object"
          },
          "remove": {
            "description": "Remove headers (matching by header names) specified in the list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "set": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Completely overwrite/replace the headers with given map where key is the name of the header, value is the value of the header.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "HttpRouteHttpDirectResponse": {
        "description": "Static HTTP response object to be returned.",
        "properties": {
          "bytesBody": {
            "description": "Optional. Response body as bytes. Maximum body size is 4096B.",
            "format": "byte",
            "type": "string"
          },
          "status": {
            "description": "Required. Status to return as part of HTTP Response. Must be a positive integer.",
            "format": "int32",
            "type": "integer"
          },
          "stringBody": {
            "description": "Optional. Response body as a string. Maximum body length is 1024 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteFaultInjectionPolicy": {
        "description": "The specification for fault injection introduced into traffic to test the resiliency of clients to destination service failure. As part of fault injection, when clients send requests to a destination, delays can be introduced by client proxy on a percentage of requests before sending those requests to the destination service. Similarly requests can be aborted by client proxy for a percentage of requests.",
        "properties": {
          "abort": {
            "$ref": "#/$defs/HttpRouteFaultInjectionPolicyAbort"
          },
          "delay": {
            "$ref": "#/$defs/HttpRouteFaultInjectionPolicyDelay"
          }
        },
        "type": "object"
      },
      "HttpRouteFaultInjectionPolicyAbort": {
        "description": "Specification of how client requests are aborted as part of fault injection before being sent to a destination.",
        "properties": {
          "httpStatus": {
            "description": "The HTTP status code used to abort the request. The value must be between 200 and 599 inclusive.",
            "format": "int32",
            "type": "integer"
          },
          "percentage": {
            "description": "The percentage of traffic which will be aborted. The value must be between [0, 100]",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HttpRouteFaultInjectionPolicyDelay": {
        "description": "Specification of how client requests are delayed as part of fault injection before being sent to a destination.",
        "properties": {
          "fixedDelay": {
            "description": "Specify a fixed delay before forwarding the request.",
            "format": "google-duration",
            "type": "string"
          },
          "percentage": {
            "description": "The percentage of traffic on which delay will be injected. The value must be between [0, 100]",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HttpRouteRedirect": {
        "description": "The specification for redirecting traffic.",
        "properties": {
          "hostRedirect": {
            "description": "The host that will be used in the redirect response instead of the one that was supplied in the request.",
            "type": "string"
          },
          "httpsRedirect": {
            "description": "If set to true, the URL scheme in the redirected request is set to https. If set to false, the URL scheme of the redirected request will remain the same as that of the request. The default is set to false.",
            "type": "boolean"
          },
          "pathRedirect": {
            "description": "The path that will be used in the redirect response instead of the one that was supplied in the request. path_redirect can not be supplied together with prefix_redirect. Supply one alone or neither. If neither is supplied, the path of the original request will be used for the redirect.",
            "type": "string"
          },
          "portRedirect": {
            "description": "The port that will be used in the redirected request instead of the one that was supplied in the request.",
            "format": "int32",
            "type": "integer"
          },
          "prefixRewrite": {
            "description": "Indicates that during redirection, the matched prefix (or path) should be swapped with this value. This option allows URLs be dynamically created based on the request.",
            "type": "string"
          },
          "responseCode": {
            "description": "The HTTP Status code to use for the redirect.",
            "enum": [
              "RESPONSE_CODE_UNSPECIFIED",
              "MOVED_PERMANENTLY_DEFAULT",
              "FOUND",
              "SEE_OTHER",
              "TEMPORARY_REDIRECT",
              "PERMANENT_REDIRECT"
            ],
            "type": "string"
          },
          "stripQuery": {
            "description": "if set to true, any accompanying query portion of the original URL is removed prior to redirecting the request. If set to false, the query portion of the original URL is retained. The default is set to false.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "HttpRouteRequestMirrorPolicy": {
        "description": "Specifies the policy on how requests are shadowed to a separate mirrored destination service. The proxy does not wait for responses from the shadow service. Prior to sending traffic to the shadow service, the host/authority header is suffixed with -shadow.",
        "properties": {
          "destination": {
            "$ref": "#/$defs/HttpRouteDestination"
          },
          "mirrorPercent": {
            "description": "Optional. The percentage of requests to get mirrored to the desired destination.",
            "format": "float",
            "type": "number"
          }
        },
        "type": "object"
      },
      "HttpRouteRetryPolicy": {
        "description": "The specifications for retries.",
        "properties": {
          "numRetries": {
            "description": "Specifies the allowed number of retries. This number must be > 0. If not specified, default to 1.",
            "format": "int32",
            "type": "integer"
          },
          "perTryTimeout": {
            "description": "Specifies a non-zero timeout per retry attempt.",
            "format": "google-duration",
            "type": "string"
          },
          "retryConditions": {
            "description": "Specifies one or more conditions when this retry policy applies. Valid values are: 5xx: Proxy will attempt a retry if the destination service responds with any 5xx response code, of if the destination service does not respond at all, example: disconnect, reset, read timeout, connection failure and refused streams. gateway-error: Similar to 5xx, but only applies to response codes 502, 503, 504. reset: Proxy will attempt a retry if the destination service does not respond at all (disconnect/reset/read timeout) connect-failure: Proxy will retry on failures connecting to destination for example due to connection timeouts. retriable-4xx: Proxy will retry fro retriable 4xx response codes. Currently the only retriable error supported is 409. refused-stream: Proxy will retry if the destination resets the stream with a REFUSED_STREAM error code. This reset type indicates that it is safe to retry.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "HttpRouteStatefulSessionAffinityPolicy": {
        "description": "The specification for cookie-based stateful session affinity where the date plane supplies a “session cookie” with the name \"GSSA\" which encodes a specific destination host and each request containing that cookie will be directed to that host as long as the destination host remains up and healthy. The gRPC proxyless mesh library or sidecar proxy will manage the session cookie but the client application code is responsible for copying the cookie from each RPC in the session to the next.",
        "properties": {
          "cookieTtl": {
            "description": "Required. The cookie TTL value for the Set-Cookie header generated by the data plane. The lifetime of the cookie may be set to a value from 1 to 86400 seconds (24 hours) inclusive.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteURLRewrite": {
        "description": "The specification for modifying the URL of the request, prior to forwarding the request to the destination.",
        "properties": {
          "hostRewrite": {
            "description": "Prior to forwarding the request to the selected destination, the requests host header is replaced by this value.",
            "type": "string"
          },
          "pathPrefixRewrite": {
            "description": "Prior to forwarding the request to the selected destination, the matching portion of the requests path is replaced by this value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteRouteMatch": {
        "description": "RouteMatch defines specifications used to match requests. If multiple match types are set, this RouteMatch will match if ALL type of matches are matched.",
        "properties": {
          "fullPathMatch": {
            "description": "The HTTP request path value should exactly match this value. Only one of full_path_match, prefix_match, or regex_match should be used.",
            "type": "string"
          },
          "headers": {
            "description": "Specifies a list of HTTP request headers to match against. ALL of the supplied headers must be matched.",
            "items": {
              "$ref": "#/$defs/HttpRouteHeaderMatch"
            },
            "type": "array"
          },
          "ignoreCase": {
            "description": "Specifies if prefix_match and full_path_match matches are case sensitive. The default value is false.",
            "type": "boolean"
          },
          "prefixMatch": {
            "description": "The HTTP request path value must begin with specified prefix_match. prefix_match must begin with a /. Only one of full_path_match, prefix_match, or regex_match should be used.",
            "type": "string"
          },
          "queryParameters": {
            "description": "Specifies a list of query parameters to match against. ALL of the query parameters must be matched.",
            "items": {
              "$ref": "#/$defs/HttpRouteQueryParameterMatch"
            },
            "type": "array"
          },
          "regexMatch": {
            "description": "The HTTP request path value must satisfy the regular expression specified by regex_match after removing any query parameters and anchor supplied with the original URL. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of full_path_match, prefix_match, or regex_match should be used.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteHeaderMatch": {
        "description": "Specifies how to select a route rule based on HTTP request headers.",
        "properties": {
          "exactMatch": {
            "description": "The value of the header should match exactly the content of exact_match.",
            "type": "string"
          },
          "header": {
            "description": "The name of the HTTP header to match against.",
            "type": "string"
          },
          "invertMatch": {
            "description": "If specified, the match result will be inverted before checking. Default value is set to false.",
            "type": "boolean"
          },
          "prefixMatch": {
            "description": "The value of the header must start with the contents of prefix_match.",
            "type": "string"
          },
          "presentMatch": {
            "description": "A header with header_name must exist. The match takes place whether or not the header has a value.",
            "type": "boolean"
          },
          "rangeMatch": {
            "$ref": "#/$defs/HttpRouteHeaderMatchIntegerRange"
          },
          "regexMatch": {
            "description": "The value of the header must match the regular expression specified in regex_match. For regular expression grammar, please see: https://github.com/google/re2/wiki/Syntax",
            "type": "string"
          },
          "suffixMatch": {
            "description": "The value of the header must end with the contents of suffix_match.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRouteHeaderMatchIntegerRange": {
        "description": "Represents an integer value range.",
        "properties": {
          "end": {
            "description": "End of the range (exclusive)",
            "format": "int32",
            "type": "integer"
          },
          "start": {
            "description": "Start of the range (inclusive)",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "HttpRouteQueryParameterMatch": {
        "description": "Specifications to match a query parameter in the request.",
        "properties": {
          "exactMatch": {
            "description": "The value of the query parameter must exactly match the contents of exact_match. Only one of exact_match, regex_match, or present_match must be set.",
            "type": "string"
          },
          "presentMatch": {
            "description": "Specifies that the QueryParameterMatcher matches if request contains query parameter, irrespective of whether the parameter has a value or not. Only one of exact_match, regex_match, or present_match must be set.",
            "type": "boolean"
          },
          "queryParameter": {
            "description": "The name of the query parameter to match.",
            "type": "string"
          },
          "regexMatch": {
            "description": "The value of the query parameter must match the regular expression specified by regex_match. For regular expression grammar, please see https://github.com/google/re2/wiki/Syntax Only one of exact_match, regex_match, or present_match must be set.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://networkservices.googleapis.com//v1/{parent}/httpRoutes{?httpRouteId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
