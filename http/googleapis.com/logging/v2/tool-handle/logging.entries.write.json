{
  "name": "logging_entries_write",
  "description": "Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resource names (projects, organizations, billing accounts or folders), where the resource name for a log entry is determined from its logName field.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/WriteLogEntriesRequest"
      }
    },
    "$defs": {
      "WriteLogEntriesRequest": {
        "description": "The parameters to WriteLogEntries.",
        "properties": {
          "dryRun": {
            "description": "Optional. If true, the request should expect normal response, but the entries won't be persisted nor exported. Useful for checking whether the logging API endpoints are working properly before sending valuable data.",
            "type": "boolean"
          },
          "entries": {
            "description": "Required. The log entries to send to Logging. The order of log entries in this list does not matter. Values supplied in this method's log_name, resource, and labels fields are copied into those log entries in this list that do not include values for their corresponding fields. For more information, see the LogEntry type.If the timestamp or insert_id fields are missing in log entries, then this method supplies the current time or a unique identifier, respectively. The supplied values are chosen so that, among the log entries that did not supply their own values, the entries earlier in the list will sort before the entries later in the list. See the entries.list method.Log entries with timestamps that are more than the logs retention period (https://cloud.google.com/logging/quotas) in the past or more than 24 hours in the future will not be available when calling entries.list. However, those log entries can still be exported with LogSinks (https://cloud.google.com/logging/docs/api/tasks/exporting-logs).To improve throughput and to avoid exceeding the quota limit (https://cloud.google.com/logging/quotas) for calls to entries.write, you should try to include several log entries in this list, rather than calling this method for each individual log entry.",
            "items": {
              "$ref": "#/$defs/LogEntry"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Default labels that are added to the labels field of all log entries in entries. If a log entry already has a label with the same key as a label in this parameter, then the log entry's label is not changed. See LogEntry.",
            "type": "object"
          },
          "logName": {
            "description": "Optional. A default log resource name that is assigned to all log entries in entries that do not specify a value for log_name: projects/[PROJECT_ID]/logs/[LOG_ID] organizations/[ORGANIZATION_ID]/logs/[LOG_ID] billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID] folders/[FOLDER_ID]/logs/[LOG_ID][LOG_ID] must be URL-encoded. For example: \"projects/my-project-id/logs/syslog\" \"organizations/123/logs/cloudaudit.googleapis.com%2Factivity\" The permission logging.logEntries.create is needed on each project, organization, billing account, or folder that is receiving new log entries, whether the resource is specified in logName or in an individual log entry.",
            "type": "string"
          },
          "partialSuccess": {
            "description": "Optional. Whether a batch's valid entries should be written even if some other entry failed due to a permanent error such as INVALID_ARGUMENT or PERMISSION_DENIED. If any entry failed, then the response status is the response status of one of the failed entries. The response will include error details in WriteLogEntriesPartialErrors.log_entry_errors keyed by the entries' zero-based index in the entries. Failed requests for which no entries are written will not include per-entry errors.",
            "type": "boolean"
          },
          "resource": {
            "$ref": "#/$defs/MonitoredResource"
          }
        },
        "type": "object"
      },
      "LogEntry": {
        "description": "An individual entry in a log.",
        "properties": {
          "errorGroups": {
            "description": "Output only. The Error Reporting (https://cloud.google.com/error-reporting) error groups associated with this LogEntry. Error Reporting sets the values for this field during error group creation.For more information, see View error details( https://cloud.google.com/error-reporting/docs/viewing-errors#view_error_details)This field isn't available during log routing (https://cloud.google.com/logging/docs/routing/overview)",
            "items": {
              "$ref": "#/$defs/LogErrorGroup"
            },
            "readOnly": true,
            "type": "array"
          },
          "httpRequest": {
            "$ref": "#/$defs/HttpRequest"
          },
          "insertId": {
            "description": "Optional. A unique identifier for the log entry. If you provide a value, then Logging considers other log entries in the same project, with the same timestamp, and with the same insert_id to be duplicates which are removed in a single query result. However, there are no guarantees of de-duplication in the export of logs.If the insert_id is omitted when writing a log entry, the Logging API assigns its own unique identifier in this field.In queries, the insert_id is also used to order log entries that have the same log_name and timestamp values.",
            "type": "string"
          },
          "jsonPayload": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "The log entry payload, represented as a structure that is expressed as a JSON object.",
            "type": "object"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. A map of key, value pairs that provides additional information about the log entry. The labels can be user-defined or system-defined.User-defined labels are arbitrary key, value pairs that you can use to classify logs.System-defined labels are defined by GCP services for platform logs. They have two components - a service namespace component and the attribute name. For example: compute.googleapis.com/resource_name.Cloud Logging truncates label keys that exceed 512 B and label values that exceed 64 KB upon their associated log entry being written. The truncation is indicated by an ellipsis at the end of the character string.",
            "type": "object"
          },
          "logName": {
            "description": "Required. The resource name of the log to which this log entry belongs: \"projects/[PROJECT_ID]/logs/[LOG_ID]\" \"organizations/[ORGANIZATION_ID]/logs/[LOG_ID]\" \"billingAccounts/[BILLING_ACCOUNT_ID]/logs/[LOG_ID]\" \"folders/[FOLDER_ID]/logs/[LOG_ID]\" A project number may be used in place of PROJECT_ID. The project number is translated to its corresponding PROJECT_ID internally and the log_name field will contain PROJECT_ID in queries and exports.[LOG_ID] must be URL-encoded within log_name. Example: \"organizations/1234567890/logs/cloudresourcemanager.googleapis.com%2Factivity\".[LOG_ID] must be less than 512 characters long and can only include the following characters: upper and lower case alphanumeric characters, forward-slash, underscore, hyphen, and period.For backward compatibility, if log_name begins with a forward-slash, such as /projects/..., then the log entry is processed as usual, but the forward-slash is removed. Listing the log entry will not show the leading slash and filtering for a log name with a leading slash will never return any results.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/MonitoredResourceMetadata"
          },
          "operation": {
            "$ref": "#/$defs/LogEntryOperation"
          },
          "protoPayload": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "The log entry payload, represented as a protocol buffer. Some Google Cloud Platform services use this field for their log entry payloads.The following protocol buffer types are supported; user-defined types are not supported:\"type.googleapis.com/google.cloud.audit.AuditLog\" \"type.googleapis.com/google.appengine.logging.v1.RequestLog\"",
            "type": "object"
          },
          "receiveTimestamp": {
            "description": "Output only. The time the log entry was received by Logging.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "resource": {
            "$ref": "#/$defs/MonitoredResource"
          },
          "severity": {
            "description": "Optional. The severity of the log entry. The default value is LogSeverity.DEFAULT.",
            "enum": [
              "DEFAULT",
              "DEBUG",
              "INFO",
              "NOTICE",
              "WARNING",
              "ERROR",
              "CRITICAL",
              "ALERT",
              "EMERGENCY"
            ],
            "type": "string"
          },
          "sourceLocation": {
            "$ref": "#/$defs/LogEntrySourceLocation"
          },
          "spanId": {
            "description": "Optional. The ID of the Cloud Trace (https://cloud.google.com/trace) span associated with the current operation in which the log is being written. For example, if a span has the REST resource name of \"projects/some-project/traces/some-trace/spans/some-span-id\", then the span_id field is \"some-span-id\".A Span (https://cloud.google.com/trace/docs/reference/v2/rest/v2/projects.traces/batchWrite#Span) represents a single operation within a trace. Whereas a trace may involve multiple different microservices running on multiple different machines, a span generally corresponds to a single logical operation being performed in a single instance of a microservice on one specific machine. Spans are the nodes within the tree that is a trace.Applications that are instrumented for tracing (https://cloud.google.com/trace/docs/setup) will generally assign a new, unique span ID on each incoming request. It is also common to create and record additional spans corresponding to internal processing elements as well as issuing requests to dependencies.The span ID is expected to be a 16-character, hexadecimal encoding of an 8-byte array and should not be zero. It should be unique within the trace and should, ideally, be generated in a manner that is uniformly random.Example values: 000000000000004a 7a2190356c3fc94b 0000f00300090021 d39223e101960076",
            "type": "string"
          },
          "split": {
            "$ref": "#/$defs/LogSplit"
          },
          "textPayload": {
            "description": "The log entry payload, represented as a Unicode string (UTF-8).",
            "type": "string"
          },
          "timestamp": {
            "description": "Optional. The time the event described by the log entry occurred. This time is used to compute the log entry's age and to enforce the logs retention period. If this field is omitted in a new log entry, then Logging assigns it the current time. Timestamps have nanosecond accuracy, but trailing zeros in the fractional seconds might be omitted when the timestamp is displayed.Incoming log entries must have timestamps that don't exceed the logs retention period (https://cloud.google.com/logging/quotas#logs_retention_periods) in the past, and that don't exceed 24 hours in the future. Log entries outside those time boundaries are rejected by Logging.",
            "format": "google-datetime",
            "type": "string"
          },
          "trace": {
            "description": "Optional. The REST resource name of the trace being written to Cloud Trace (https://cloud.google.com/trace) in association with this log entry. For example, if your trace data is stored in the Cloud project \"my-trace-project\" and if the service that is creating the log entry receives a trace header that includes the trace ID \"12345\", then the service should use \"projects/my-trace-project/traces/12345\".The trace field provides the link between logs and traces. By using this field, you can navigate from a log entry to a trace.",
            "type": "string"
          },
          "traceSampled": {
            "description": "Optional. The sampling decision of the span associated with the log entry at the time the log entry was created. This field corresponds to the sampled flag in the W3C trace-context specification (https://www.w3.org/TR/trace-context/#sampled-flag). A non-sampled trace value is still useful as a request correlation identifier. The default is False.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "LogErrorGroup": {
        "description": "Contains metadata that associates the LogEntry to Error Reporting error groups.",
        "properties": {
          "id": {
            "description": "The id is a unique identifier for a particular error group; it is the last part of the error group resource name: /project/[PROJECT_ID]/errors/[ERROR_GROUP_ID]. Example: COShysOX0r_51QE. The id is derived from key parts of the error-log content and is treated as Service Data. For information about how Service Data is handled, see Google Cloud Privacy Notice (https://cloud.google.com/terms/cloud-privacy-notice).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HttpRequest": {
        "description": "A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.",
        "properties": {
          "cacheFillBytes": {
            "description": "The number of HTTP response bytes inserted into cache. Set only when a cache fill was attempted.",
            "format": "int64",
            "type": "string"
          },
          "cacheHit": {
            "description": "Whether or not an entity was served from cache (with or without validation).",
            "type": "boolean"
          },
          "cacheLookup": {
            "description": "Whether or not a cache lookup was attempted.",
            "type": "boolean"
          },
          "cacheValidatedWithOriginServer": {
            "description": "Whether or not the response was validated with the origin server before being served from cache. This field is only meaningful if cache_hit is True.",
            "type": "boolean"
          },
          "latency": {
            "description": "The request processing latency on the server, from the time the request was received until the response was sent.",
            "format": "google-duration",
            "type": "string"
          },
          "protocol": {
            "description": "Protocol used for the request. Examples: \"HTTP/1.1\", \"HTTP/2\", \"websocket\"",
            "type": "string"
          },
          "referer": {
            "description": "The referer URL of the request, as defined in HTTP/1.1 Header Field Definitions (https://datatracker.ietf.org/doc/html/rfc2616#section-14.36).",
            "type": "string"
          },
          "remoteIp": {
            "description": "The IP address (IPv4 or IPv6) of the client that issued the HTTP request. This field can include port information. Examples: \"192.168.1.1\", \"10.0.0.1:80\", \"FE80::0202:B3FF:FE1E:8329\".",
            "type": "string"
          },
          "requestMethod": {
            "description": "The request method. Examples: \"GET\", \"HEAD\", \"PUT\", \"POST\".",
            "type": "string"
          },
          "requestSize": {
            "description": "The size of the HTTP request message in bytes, including the request headers and the request body.",
            "format": "int64",
            "type": "string"
          },
          "requestUrl": {
            "description": "The scheme (http, https), the host name, the path and the query portion of the URL that was requested. Example: \"http://example.com/some/info?color=red\".",
            "type": "string"
          },
          "responseSize": {
            "description": "The size of the HTTP response message sent back to the client, in bytes, including the response headers and the response body.",
            "format": "int64",
            "type": "string"
          },
          "serverIp": {
            "description": "The IP address (IPv4 or IPv6) of the origin server that the request was sent to. This field can include port information. Examples: \"192.168.1.1\", \"10.0.0.1:80\", \"FE80::0202:B3FF:FE1E:8329\".",
            "type": "string"
          },
          "status": {
            "description": "The response code indicating the status of response. Examples: 200, 404.",
            "format": "int32",
            "type": "integer"
          },
          "userAgent": {
            "description": "The user agent sent by the client. Example: \"Mozilla/4.0 (compatible; MSIE 6.0; Windows 98; Q312461; .NET CLR 1.0.3705)\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MonitoredResourceMetadata": {
        "description": "Auxiliary metadata for a MonitoredResource object. MonitoredResource objects contain the minimum set of information to uniquely identify a monitored resource instance. There is some other useful auxiliary metadata. Monitoring and Logging use an ingestion pipeline to extract metadata for cloud resources of all types, and store the metadata in this message.",
        "properties": {
          "systemLabels": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Output only. Values for predefined system metadata labels. System labels are a kind of metadata extracted by Google, including \"machine_image\", \"vpc\", \"subnet_id\", \"security_group\", \"name\", etc. System label values can be only strings, Boolean values, or a list of strings. For example: { \"name\": \"my-test-instance\", \"security_group\": [\"a\", \"b\", \"c\"], \"spot_instance\": false } ",
            "type": "object"
          },
          "userLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. A map of user-defined metadata labels.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "LogEntryOperation": {
        "description": "Additional information about a potentially long-running operation with which a log entry is associated.",
        "properties": {
          "first": {
            "description": "Optional. Set this to True if this is the first log entry in the operation.",
            "type": "boolean"
          },
          "id": {
            "description": "Optional. An arbitrary operation identifier. Log entries with the same identifier are assumed to be part of the same operation.",
            "type": "string"
          },
          "last": {
            "description": "Optional. Set this to True if this is the last log entry in the operation.",
            "type": "boolean"
          },
          "producer": {
            "description": "Optional. An arbitrary producer identifier. The combination of id and producer must be globally unique. Examples for producer: \"MyDivision.MyBigCompany.com\", \"github.com/MyProject/MyApplication\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MonitoredResource": {
        "description": "An object representing a resource that can be used for monitoring, logging, billing, or other purposes. Examples include virtual machine instances, databases, and storage devices such as disks. The type field identifies a MonitoredResourceDescriptor object that describes the resource's schema. Information in the labels field identifies the actual resource and its attributes according to the schema. For example, a particular Compute Engine VM instance could be represented by the following object, because the MonitoredResourceDescriptor for \"gce_instance\" has labels \"project_id\", \"instance_id\" and \"zone\": { \"type\": \"gce_instance\", \"labels\": { \"project_id\": \"my-project\", \"instance_id\": \"12345678901234\", \"zone\": \"us-central1-a\" }} ",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Required. Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels \"project_id\", \"instance_id\", and \"zone\".",
            "type": "object"
          },
          "type": {
            "description": "Required. The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. Some descriptors include the service name in the type; for example, the type of a Datastream stream is datastream.googleapis.com/Stream.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogEntrySourceLocation": {
        "description": "Additional information about the source code location that produced the log entry.",
        "properties": {
          "file": {
            "description": "Optional. Source file name. Depending on the runtime environment, this might be a simple name or a fully-qualified name.",
            "type": "string"
          },
          "function": {
            "description": "Optional. Human-readable name of the function or method being invoked, with optional context such as the class or package name. This information may be used in contexts such as the logs viewer, where a file and line number are less meaningful. The format can vary by language. For example: qual.if.ied.Class.method (Java), dir/package.func (Go), function (Python).",
            "type": "string"
          },
          "line": {
            "description": "Optional. Line within the source file. 1-based; 0 indicates no line number available.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogSplit": {
        "description": "Additional information used to correlate multiple log entries. Used when a single LogEntry would exceed the Google Cloud Logging size limit and is split across multiple log entries.",
        "properties": {
          "index": {
            "description": "The index of this LogEntry in the sequence of split log entries. Log entries are given |index| values 0, 1, ..., n-1 for a sequence of n log entries.",
            "format": "int32",
            "type": "integer"
          },
          "totalSplits": {
            "description": "The total number of log entries that the original LogEntry was split into.",
            "format": "int32",
            "type": "integer"
          },
          "uid": {
            "description": "A globally unique identifier for all log entries in a sequence of split log entries. All log entries with the same |LogSplit.uid| are assumed to be part of the same sequence of split log entries.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://logging.googleapis.com//v2/entries:write{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Result returned from WriteLogEntries.",
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
