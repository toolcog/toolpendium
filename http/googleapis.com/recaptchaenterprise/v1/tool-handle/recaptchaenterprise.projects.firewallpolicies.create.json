{
  "name": "recaptchaenterprise_projects_firewallpolicies_create",
  "description": "Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA Enterprise actions can be executed. A project may have a maximum of 1000 policies.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the project this policy will apply to, in the format `projects/{project}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallPolicy"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudRecaptchaenterpriseV1FirewallPolicy": {
        "description": "A FirewallPolicy represents a single matching pattern and resulting actions to take.",
        "properties": {
          "actions": {
            "description": "Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.",
            "items": {
              "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallAction"
            },
            "type": "array"
          },
          "condition": {
            "description": "Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.",
            "type": "string"
          },
          "description": {
            "description": "Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.",
            "type": "string"
          },
          "name": {
            "description": "Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.",
            "type": "string"
          },
          "path": {
            "description": "Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallAction": {
        "description": "An individual action. Each action represents what to do if a policy matches.",
        "properties": {
          "allow": {
            "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction"
          },
          "block": {
            "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction"
          },
          "includeRecaptchaScript": {
            "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction"
          },
          "redirect": {
            "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction"
          },
          "setHeader": {
            "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction"
          },
          "substitute": {
            "$ref": "#/$defs/GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction"
          }
        },
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallActionAllowAction": {
        "description": "An allow action continues processing a request unimpeded.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallActionBlockAction": {
        "description": "A block action serves an HTTP error code a prevents the request from hitting the backend.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallActionIncludeRecaptchaScriptAction": {
        "description": "An include reCAPTCHA script action involves injecting reCAPTCHA JavaScript code into the HTML returned by the site backend. This reCAPTCHA script is tasked with collecting user signals on the requested web page, issuing tokens as a cookie within the site domain, and enabling their utilization in subsequent page requests.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallActionRedirectAction": {
        "description": "A redirect action returns a 307 (temporary redirect) response, pointing the user to a ReCaptcha interstitial page to attach a token.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallActionSetHeaderAction": {
        "description": "A set header action sets a header and forwards the request to the backend. This can be used to trigger custom protection implemented on the backend.",
        "properties": {
          "key": {
            "description": "Optional. The header key to set in the request to the backend server.",
            "type": "string"
          },
          "value": {
            "description": "Optional. The header value to set in the request to the backend server.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudRecaptchaenterpriseV1FirewallActionSubstituteAction": {
        "description": "A substitute action transparently serves a different page than the one requested.",
        "properties": {
          "path": {
            "description": "Optional. The address to redirect to. The target is a relative path in the current host. Example: \"/blog/404.html\".",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://recaptchaenterprise.googleapis.com//v1/{parent}/firewallpolicies{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A FirewallPolicy represents a single matching pattern and resulting actions to take.",
        "**Key properties:**",
        {
          "$ul": [
            "**actions**: Optional. The actions that the caller should take regarding user access. There should be at most one terminal action. A terminal action is any action that forces a response, such as `AllowAction`, `BlockAction` or `SubstituteAction`. Zero or more non-terminal actions such as `SetHeader` might be specified. A single policy can contain up to 16 actions.",
            "**condition**: Optional. A CEL (Common Expression Language) conditional expression that specifies if this policy applies to an incoming user request. If this condition evaluates to true and the requested path matched the path pattern, the associated actions should be executed by the caller. The condition string is checked for CEL syntax correctness on creation. For more information, see the [CEL spec](https://github.com/google/cel-spec) and its [language definition](https://github.com/google/cel-spec/blob/master/doc/langdef.md). A condition has a max length of 500 characters.",
            "**description**: Optional. A description of what this policy aims to achieve, for convenience purposes. The description can at most include 256 UTF-8 characters.",
            "**name**: Identifier. The resource name for the FirewallPolicy in the format `projects/{project}/firewallpolicies/{firewallpolicy}`.",
            "**path**: Optional. The path for which this policy applies, specified as a glob pattern. For more information on glob, see the [manual page](https://man7.org/linux/man-pages/man7/glob.7.html). A path has a max length of 200 characters."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
