{
  "name": "bigtableadmin_projects_instances_tables_create",
  "description": "Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The unique name of the instance in which to create the table. Values are of the form `projects/{project}/instances/{instance}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CreateTableRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CreateTableRequest": {
        "description": "Request message for google.bigtable.admin.v2.BigtableTableAdmin.CreateTable",
        "properties": {
          "initialSplits": {
            "description": "The optional list of row keys that will be used to initially split the table into several tablets (tablets are similar to HBase regions). Given two split keys, `s1` and `s2`, three tablets will be created, spanning the key ranges: `[, s1), [s1, s2), [s2, )`. Example: * Row keys := `[\"a\", \"apple\", \"custom\", \"customer_1\", \"customer_2\",` `\"other\", \"zz\"]` * initial_split_keys := `[\"apple\", \"customer_1\", \"customer_2\", \"other\"]` * Key assignment: - Tablet 1 `[, apple) => {\"a\"}.` - Tablet 2 `[apple, customer_1) => {\"apple\", \"custom\"}.` - Tablet 3 `[customer_1, customer_2) => {\"customer_1\"}.` - Tablet 4 `[customer_2, other) => {\"customer_2\"}.` - Tablet 5 `[other, ) => {\"other\", \"zz\"}.`",
            "items": {
              "$ref": "#/$defs/Split"
            },
            "type": "array"
          },
          "table": {
            "$ref": "#/$defs/Table"
          },
          "tableId": {
            "description": "Required. The name by which the new table should be referred to within the parent instance, e.g., `foobar` rather than `{parent}/tables/foobar`. Maximum 50 characters.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Split": {
        "description": "An initial split point for a newly created table.",
        "properties": {
          "key": {
            "description": "Row key to use as an initial tablet boundary.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Table": {
        "description": "A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.",
        "properties": {
          "changeStreamConfig": {
            "$ref": "#/$defs/ChangeStreamConfig"
          },
          "clusterStates": {
            "additionalProperties": {
              "$ref": "#/$defs/ClusterState"
            },
            "description": "Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`",
            "readOnly": true,
            "type": "object"
          },
          "columnFamilies": {
            "additionalProperties": {
              "$ref": "#/$defs/ColumnFamily"
            },
            "description": "The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `STATS_VIEW`, `FULL`",
            "type": "object"
          },
          "deletionProtection": {
            "description": "Set to true to make the table protected against data loss. i.e. deleting the following resources through Admin APIs are prohibited: * The table. * The column families in the table. * The instance containing the table. Note one can still delete the data stored in the table through Data APIs.",
            "type": "boolean"
          },
          "granularity": {
            "description": "Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.",
            "enum": [
              "TIMESTAMP_GRANULARITY_UNSPECIFIED",
              "MILLIS"
            ],
            "type": "string"
          },
          "name": {
            "description": "The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `STATS_VIEW`, `FULL`",
            "type": "string"
          },
          "restoreInfo": {
            "$ref": "#/$defs/RestoreInfo"
          },
          "stats": {
            "$ref": "#/$defs/TableStats"
          }
        },
        "type": "object"
      },
      "ChangeStreamConfig": {
        "description": "Change stream configuration.",
        "properties": {
          "retentionPeriod": {
            "description": "How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterState": {
        "description": "The state of a table's data in a particular cluster.",
        "properties": {
          "encryptionInfo": {
            "description": "Output only. The encryption information for the table in this cluster. If the encryption key protecting this resource is customer managed, then its version can be rotated in Cloud Key Management Service (Cloud KMS). The primary version of the key and its status will be reflected here when changes propagate from Cloud KMS.",
            "items": {
              "$ref": "#/$defs/EncryptionInfo"
            },
            "readOnly": true,
            "type": "array"
          },
          "replicationState": {
            "description": "Output only. The state of replication for the table in this cluster.",
            "enum": [
              "STATE_NOT_KNOWN",
              "INITIALIZING",
              "PLANNED_MAINTENANCE",
              "UNPLANNED_MAINTENANCE",
              "READY",
              "READY_OPTIMIZING"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionInfo": {
        "description": "Encryption information for a given resource. If this resource is protected with customer managed encryption, the in-use Cloud Key Management Service (Cloud KMS) key version is specified along with its status.",
        "properties": {
          "encryptionStatus": {
            "$ref": "#/$defs/Status"
          },
          "encryptionType": {
            "description": "Output only. The type of encryption used to protect this resource.",
            "enum": [
              "ENCRYPTION_TYPE_UNSPECIFIED",
              "GOOGLE_DEFAULT_ENCRYPTION",
              "CUSTOMER_MANAGED_ENCRYPTION"
            ],
            "readOnly": true,
            "type": "string"
          },
          "kmsKeyVersion": {
            "description": "Output only. The version of the Cloud KMS key specified in the parent cluster that is in use for the data underlying this table.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ColumnFamily": {
        "description": "A set of columns within a table which share a common configuration.",
        "properties": {
          "gcRule": {
            "$ref": "#/$defs/GcRule"
          },
          "stats": {
            "$ref": "#/$defs/ColumnFamilyStats"
          }
        },
        "type": "object"
      },
      "GcRule": {
        "description": "Rule for determining which cells to delete during garbage collection.",
        "properties": {
          "intersection": {
            "$ref": "#/$defs/Intersection"
          },
          "maxAge": {
            "description": "Delete cells in a column older than the given age. Values must be at least one millisecond, and will be truncated to microsecond granularity.",
            "format": "google-duration",
            "type": "string"
          },
          "maxNumVersions": {
            "description": "Delete all cells in a column except the most recent N.",
            "format": "int32",
            "type": "integer"
          },
          "union": {
            "$ref": "#/$defs/Union"
          }
        },
        "type": "object"
      },
      "Intersection": {
        "description": "A GcRule which deletes cells matching all of the given rules.",
        "properties": {
          "rules": {
            "description": "Only delete cells which would be deleted by every element of `rules`.",
            "items": {
              "$ref": "#/$defs/GcRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Union": {
        "description": "A GcRule which deletes cells matching any of the given rules.",
        "properties": {
          "rules": {
            "description": "Delete cells which would be deleted by any element of `rules`.",
            "items": {
              "$ref": "#/$defs/GcRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ColumnFamilyStats": {
        "description": "Approximate statistics related to a single column family within a table. This information may change rapidly, interpreting these values at a point in time may already preset out-of-date information. Everything below is approximate, unless otherwise specified.",
        "properties": {
          "averageCellsPerColumn": {
            "description": "How many cells are present per column qualifier in this column family, averaged over all rows containing any column in the column family. e.g. For column family \"family\" in a table with 3 rows: * A row with 3 cells in \"family:col\" and 1 cell in \"other:col\" (3 cells / 1 column in \"family\") * A row with 1 cell in \"family:col\", 7 cells in \"family:other_col\", and 7 cells in \"other:data\" (8 cells / 2 columns in \"family\") * A row with 3 cells in \"other:col\" (0 columns in \"family\", \"family\" not present) would report (3 + 8 + 0)/(1 + 2 + 0) = 3.66 in this field.",
            "format": "double",
            "type": "number"
          },
          "averageColumnsPerRow": {
            "description": "How many column qualifiers are present in this column family, averaged over all rows in the table. e.g. For column family \"family\" in a table with 3 rows: * A row with cells in \"family:col\" and \"other:col\" (1 column in \"family\") * A row with cells in \"family:col\", \"family:other_col\", and \"other:data\" (2 columns in \"family\") * A row with cells in \"other:col\" (0 columns in \"family\", \"family\" not present) would report (1 + 2 + 0)/3 = 1.5 in this field.",
            "format": "double",
            "type": "number"
          },
          "logicalDataBytes": {
            "description": "How much space the data in the column family occupies. This is roughly how many bytes would be needed to read the contents of the entire column family (e.g. by streaming all contents out).",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestoreInfo": {
        "description": "Information about a table restore.",
        "properties": {
          "backupInfo": {
            "$ref": "#/$defs/BackupInfo"
          },
          "sourceType": {
            "description": "The type of the restore source.",
            "enum": [
              "RESTORE_SOURCE_TYPE_UNSPECIFIED",
              "BACKUP"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackupInfo": {
        "description": "Information about a backup.",
        "properties": {
          "backup": {
            "description": "Output only. Name of the backup.",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "sourceBackup": {
            "description": "Output only. Name of the backup from which this backup was copied. If a backup is not created by copying a backup, this field will be empty. Values are of the form: projects//instances//clusters//backups/",
            "readOnly": true,
            "type": "string"
          },
          "sourceTable": {
            "description": "Output only. Name of the table the backup was created from.",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "TableStats": {
        "description": "Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.",
        "properties": {
          "averageCellsPerColumn": {
            "description": "How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in \"family:col\" and 1 cell in \"other:col\" (4 cells / 2 columns) * A row with 1 cell in \"family:col\", 7 cells in \"family:other_col\", and 7 cells in \"other:data\" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.",
            "format": "double",
            "type": "number"
          },
          "averageColumnsPerRow": {
            "description": "How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in \"family:col\" and \"other:col\" (2 distinct columns) * A row with cells in \"family:col\", \"family:other_col\", and \"other:data\" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.",
            "format": "double",
            "type": "number"
          },
          "logicalDataBytes": {
            "description": "This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).",
            "format": "int64",
            "type": "string"
          },
          "rowCount": {
            "description": "How many rows are in the table.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://bigtableadmin.googleapis.com//v2/{parent}/tables{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**changeStreamConfig**: Change stream configuration.",
              {
                "$ul": [
                  "**retentionPeriod**: How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity."
                ]
              }
            ],
            "**clusterStates**: Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`",
            "**columnFamilies**: The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `STATS_VIEW`, `FULL`",
            "**deletionProtection**: Set to true to make the table protected against data loss. i.e. deleting the following resources through Admin APIs are prohibited: * The table. * The column families in the table. * The instance containing the table. Note one can still delete the data stored in the table through Data APIs.",
            "**granularity**: Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.",
            "**name**: The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `STATS_VIEW`, `FULL`",
            [
              "**restoreInfo**: Information about a table restore.",
              {
                "$ul": [
                  [
                    "**backupInfo**: Information about a backup.",
                    {
                      "$ul": [
                        "**backup**: Output only. Name of the backup.",
                        "**endTime**: Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.",
                        "**sourceBackup**: Output only. Name of the backup from which this backup was copied. If a backup is not created by copying a backup, this field will be empty. Values are of the form: projects//instances//clusters//backups/",
                        "**sourceTable**: Output only. Name of the table the backup was created from.",
                        "**startTime**: Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp."
                      ]
                    }
                  ],
                  "**sourceType**: The type of the restore source."
                ]
              }
            ],
            [
              "**stats**: Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.",
              {
                "$ul": [
                  "**averageCellsPerColumn**: How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in \"family:col\" and 1 cell in \"other:col\" (4 cells / 2 columns) * A row with 1 cell in \"family:col\", 7 cells in \"family:other_col\", and 7 cells in \"other:data\" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.",
                  "**averageColumnsPerRow**: How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in \"family:col\" and \"other:col\" (2 distinct columns) * A row with cells in \"family:col\", \"family:other_col\", and \"other:data\" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.",
                  "**logicalDataBytes**: This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).",
                  "**rowCount**: How many rows are in the table."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
