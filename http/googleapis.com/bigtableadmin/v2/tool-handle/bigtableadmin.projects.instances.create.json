{
  "name": "bigtableadmin_projects_instances_create",
  "description": "Create an instance within a project. Note that exactly one of Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config can be set. If serve_nodes is set to non-zero, then the cluster is manually scaled. If cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is enabled.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The unique name of the project in which to create the new instance. Values are of the form `projects/{project}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CreateInstanceRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CreateInstanceRequest": {
        "description": "Request message for BigtableInstanceAdmin.CreateInstance.",
        "properties": {
          "clusters": {
            "additionalProperties": {
              "$ref": "#/$defs/Cluster"
            },
            "description": "Required. The clusters to be created within the instance, mapped by desired cluster ID, e.g., just `mycluster` rather than `projects/myproject/instances/myinstance/clusters/mycluster`. Fields marked `OutputOnly` must be left blank.",
            "type": "object"
          },
          "instance": {
            "$ref": "#/$defs/Instance"
          },
          "instanceId": {
            "description": "Required. The ID to be used when referring to the new instance within its project, e.g., just `myinstance` rather than `projects/myproject/instances/myinstance`.",
            "type": "string"
          },
          "parent": {
            "description": "Required. The unique name of the project in which to create the new instance. Values are of the form `projects/{project}`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Cluster": {
        "description": "A resizable group of nodes in a particular cloud location, capable of serving all Tables in the parent Instance.",
        "properties": {
          "clusterConfig": {
            "$ref": "#/$defs/ClusterConfig"
          },
          "defaultStorageType": {
            "description": "Immutable. The type of storage used by this cluster to serve its parent instance's tables, unless explicitly overridden.",
            "enum": [
              "STORAGE_TYPE_UNSPECIFIED",
              "SSD",
              "HDD"
            ],
            "type": "string"
          },
          "encryptionConfig": {
            "$ref": "#/$defs/EncryptionConfig"
          },
          "location": {
            "description": "Immutable. The location where this cluster's nodes and storage reside. For best performance, clients should be located as close as possible to this cluster. Currently only zones are supported, so values should be of the form `projects/{project}/locations/{zone}`.",
            "type": "string"
          },
          "name": {
            "description": "The unique name of the cluster. Values are of the form `projects/{project}/instances/{instance}/clusters/a-z*`.",
            "type": "string"
          },
          "serveNodes": {
            "description": "The number of nodes in the cluster. If no value is set, Cloud Bigtable automatically allocates nodes based on your data footprint and optimized for 50% storage utilization.",
            "format": "int32",
            "type": "integer"
          },
          "state": {
            "description": "Output only. The current state of the cluster.",
            "enum": [
              "STATE_NOT_KNOWN",
              "READY",
              "CREATING",
              "RESIZING",
              "DISABLED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterConfig": {
        "description": "Configuration for a cluster.",
        "properties": {
          "clusterAutoscalingConfig": {
            "$ref": "#/$defs/ClusterAutoscalingConfig"
          }
        },
        "type": "object"
      },
      "ClusterAutoscalingConfig": {
        "description": "Autoscaling config for a cluster.",
        "properties": {
          "autoscalingLimits": {
            "$ref": "#/$defs/AutoscalingLimits"
          },
          "autoscalingTargets": {
            "$ref": "#/$defs/AutoscalingTargets"
          }
        },
        "type": "object"
      },
      "AutoscalingLimits": {
        "description": "Limits for the number of nodes a Cluster can autoscale up/down to.",
        "properties": {
          "maxServeNodes": {
            "description": "Required. Maximum number of nodes to scale up to.",
            "format": "int32",
            "type": "integer"
          },
          "minServeNodes": {
            "description": "Required. Minimum number of nodes to scale down to.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AutoscalingTargets": {
        "description": "The Autoscaling targets for a Cluster. These determine the recommended nodes.",
        "properties": {
          "cpuUtilizationPercent": {
            "description": "The cpu utilization that the Autoscaler should be trying to achieve. This number is on a scale from 0 (no utilization) to 100 (total utilization), and is limited between 10 and 80, otherwise it will return INVALID_ARGUMENT error.",
            "format": "int32",
            "type": "integer"
          },
          "storageUtilizationGibPerNode": {
            "description": "The storage utilization that the Autoscaler should be trying to achieve. This number is limited between 2560 (2.5TiB) and 5120 (5TiB) for a SSD cluster and between 8192 (8TiB) and 16384 (16TiB) for an HDD cluster, otherwise it will return INVALID_ARGUMENT error. If this value is set to 0, it will be treated as if it were set to the default value: 2560 for SSD, 8192 for HDD.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "EncryptionConfig": {
        "description": "Cloud Key Management Service (Cloud KMS) settings for a CMEK-protected cluster.",
        "properties": {
          "kmsKeyName": {
            "description": "Describes the Cloud KMS encryption key that will be used to protect the destination Bigtable cluster. The requirements for this key are: 1) The Cloud Bigtable service account associated with the project that contains this cluster must be granted the `cloudkms.cryptoKeyEncrypterDecrypter` role on the CMEK key. 2) Only regional keys can be used and the region of the CMEK key must match the region of the cluster. Values are of the form `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Instance": {
        "description": "A collection of Bigtable Tables and the resources that serve them. All tables in an instance are served from all Clusters in the instance.",
        "properties": {
          "createTime": {
            "description": "Output only. A commit timestamp representing when this Instance was created. For instances created before this field was added (August 2021), this value is `seconds: 0, nanos: 1`.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Required. The descriptive name for this instance as it appears in UIs. Can be changed at any time, but should be kept globally unique to avoid confusion.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. They can be used to filter resources and aggregate metrics. * Label keys must be between 1 and 63 characters long and must conform to the regular expression: `\\p{Ll}\\p{Lo}{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}`. * No more than 64 labels can be associated with a given resource. * Keys and values must both be under 128 bytes.",
            "type": "object"
          },
          "name": {
            "description": "The unique name of the instance. Values are of the form `projects/{project}/instances/a-z+[a-z0-9]`.",
            "type": "string"
          },
          "satisfiesPzs": {
            "description": "Output only. Reserved for future use.",
            "readOnly": true,
            "type": "boolean"
          },
          "state": {
            "description": "Output only. The current state of the instance.",
            "enum": [
              "STATE_NOT_KNOWN",
              "READY",
              "CREATING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "The type of the instance. Defaults to `PRODUCTION`.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "PRODUCTION",
              "DEVELOPMENT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://bigtableadmin.googleapis.com//v2/{parent}/instances{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
