{
  "name": "bigtableadmin_projects_instances_tables_modifyColumnFamilies",
  "description": "Performs a series of column family modifications on the specified table. Either all or none of the modifications will occur before this method returns, but data requests received prior to that point may see a table where only some modifications have taken effect.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The unique name of the table whose families should be modified. Values are of the form `projects/{project}/instances/{instance}/tables/{table}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ModifyColumnFamiliesRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "ModifyColumnFamiliesRequest": {
        "description": "Request message for google.bigtable.admin.v2.BigtableTableAdmin.ModifyColumnFamilies",
        "properties": {
          "ignoreWarnings": {
            "description": "Optional. If true, ignore safety checks when modifying the column families.",
            "type": "boolean"
          },
          "modifications": {
            "description": "Required. Modifications to be atomically applied to the specified table's families. Entries are applied in order, meaning that earlier modifications can be masked by later ones (in the case of repeated updates to the same family, for example).",
            "items": {
              "$ref": "#/$defs/Modification"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Modification": {
        "description": "A create, update, or delete of a particular column family.",
        "properties": {
          "create": {
            "$ref": "#/$defs/ColumnFamily"
          },
          "drop": {
            "description": "Drop (delete) the column family with the given ID, or fail if no such family exists.",
            "type": "boolean"
          },
          "id": {
            "description": "The ID of the column family to be modified.",
            "type": "string"
          },
          "update": {
            "$ref": "#/$defs/ColumnFamily"
          }
        },
        "type": "object"
      },
      "ColumnFamily": {
        "description": "A set of columns within a table which share a common configuration.",
        "properties": {
          "gcRule": {
            "$ref": "#/$defs/GcRule"
          },
          "stats": {
            "$ref": "#/$defs/ColumnFamilyStats"
          }
        },
        "type": "object"
      },
      "GcRule": {
        "description": "Rule for determining which cells to delete during garbage collection.",
        "properties": {
          "intersection": {
            "$ref": "#/$defs/Intersection"
          },
          "maxAge": {
            "description": "Delete cells in a column older than the given age. Values must be at least one millisecond, and will be truncated to microsecond granularity.",
            "format": "google-duration",
            "type": "string"
          },
          "maxNumVersions": {
            "description": "Delete all cells in a column except the most recent N.",
            "format": "int32",
            "type": "integer"
          },
          "union": {
            "$ref": "#/$defs/Union"
          }
        },
        "type": "object"
      },
      "Intersection": {
        "description": "A GcRule which deletes cells matching all of the given rules.",
        "properties": {
          "rules": {
            "description": "Only delete cells which would be deleted by every element of `rules`.",
            "items": {
              "$ref": "#/$defs/GcRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Union": {
        "description": "A GcRule which deletes cells matching any of the given rules.",
        "properties": {
          "rules": {
            "description": "Delete cells which would be deleted by any element of `rules`.",
            "items": {
              "$ref": "#/$defs/GcRule"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ColumnFamilyStats": {
        "description": "Approximate statistics related to a single column family within a table. This information may change rapidly, interpreting these values at a point in time may already preset out-of-date information. Everything below is approximate, unless otherwise specified.",
        "properties": {
          "averageCellsPerColumn": {
            "description": "How many cells are present per column qualifier in this column family, averaged over all rows containing any column in the column family. e.g. For column family \"family\" in a table with 3 rows: * A row with 3 cells in \"family:col\" and 1 cell in \"other:col\" (3 cells / 1 column in \"family\") * A row with 1 cell in \"family:col\", 7 cells in \"family:other_col\", and 7 cells in \"other:data\" (8 cells / 2 columns in \"family\") * A row with 3 cells in \"other:col\" (0 columns in \"family\", \"family\" not present) would report (3 + 8 + 0)/(1 + 2 + 0) = 3.66 in this field.",
            "format": "double",
            "type": "number"
          },
          "averageColumnsPerRow": {
            "description": "How many column qualifiers are present in this column family, averaged over all rows in the table. e.g. For column family \"family\" in a table with 3 rows: * A row with cells in \"family:col\" and \"other:col\" (1 column in \"family\") * A row with cells in \"family:col\", \"family:other_col\", and \"other:data\" (2 columns in \"family\") * A row with cells in \"other:col\" (0 columns in \"family\", \"family\" not present) would report (1 + 2 + 0)/3 = 1.5 in this field.",
            "format": "double",
            "type": "number"
          },
          "logicalDataBytes": {
            "description": "How much space the data in the column family occupies. This is roughly how many bytes would be needed to read the contents of the entire column family (e.g. by streaming all contents out).",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://bigtableadmin.googleapis.com//v2/{name}:modifyColumnFamilies{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A collection of user data indexed by row, column, and timestamp. Each table is served using the resources of its parent cluster.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**changeStreamConfig**: Change stream configuration.",
              {
                "$ul": [
                  "**retentionPeriod**: How long the change stream should be retained. Change stream data older than the retention period will not be returned when reading the change stream from the table. Values must be at least 1 day and at most 7 days, and will be truncated to microsecond granularity."
                ]
              }
            ],
            "**clusterStates**: Output only. Map from cluster ID to per-cluster table state. If it could not be determined whether or not the table has data in a particular cluster (for example, if its zone is unavailable), then there will be an entry for the cluster with UNKNOWN `replication_status`. Views: `REPLICATION_VIEW`, `ENCRYPTION_VIEW`, `FULL`",
            "**columnFamilies**: The column families configured for this table, mapped by column family ID. Views: `SCHEMA_VIEW`, `STATS_VIEW`, `FULL`",
            "**deletionProtection**: Set to true to make the table protected against data loss. i.e. deleting the following resources through Admin APIs are prohibited: * The table. * The column families in the table. * The instance containing the table. Note one can still delete the data stored in the table through Data APIs.",
            "**granularity**: Immutable. The granularity (i.e. `MILLIS`) at which timestamps are stored in this table. Timestamps not matching the granularity will be rejected. If unspecified at creation time, the value will be set to `MILLIS`. Views: `SCHEMA_VIEW`, `FULL`.",
            "**name**: The unique name of the table. Values are of the form `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views: `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `STATS_VIEW`, `FULL`",
            [
              "**restoreInfo**: Information about a table restore.",
              {
                "$ul": [
                  [
                    "**backupInfo**: Information about a backup.",
                    {
                      "$ul": [
                        "**backup**: Output only. Name of the backup.",
                        "**endTime**: Output only. This time that the backup was finished. Row data in the backup will be no newer than this timestamp.",
                        "**sourceBackup**: Output only. Name of the backup from which this backup was copied. If a backup is not created by copying a backup, this field will be empty. Values are of the form: projects//instances//clusters//backups/",
                        "**sourceTable**: Output only. Name of the table the backup was created from.",
                        "**startTime**: Output only. The time that the backup was started. Row data in the backup will be no older than this timestamp."
                      ]
                    }
                  ],
                  "**sourceType**: The type of the restore source."
                ]
              }
            ],
            [
              "**stats**: Approximate statistics related to a table. These statistics are calculated infrequently, while simultaneously, data in the table can change rapidly. Thus the values reported here (e.g. row count) are very likely out-of date, even the instant they are received in this API. Thus, only treat these values as approximate. IMPORTANT: Everything below is approximate, unless otherwise specified.",
              {
                "$ul": [
                  "**averageCellsPerColumn**: How many cells are present per column (column family, column qualifier) combinations, averaged over all columns in all rows in the table. e.g. A table with 2 rows: * A row with 3 cells in \"family:col\" and 1 cell in \"other:col\" (4 cells / 2 columns) * A row with 1 cell in \"family:col\", 7 cells in \"family:other_col\", and 7 cells in \"other:data\" (15 cells / 3 columns) would report (4 + 15)/(2 + 3) = 3.8 in this field.",
                  "**averageColumnsPerRow**: How many (column family, column qualifier) combinations are present per row in the table, averaged over all rows in the table. e.g. A table with 2 rows: * A row with cells in \"family:col\" and \"other:col\" (2 distinct columns) * A row with cells in \"family:col\", \"family:other_col\", and \"other:data\" (3 distinct columns) would report (2 + 3)/2 = 2.5 in this field.",
                  "**logicalDataBytes**: This is roughly how many bytes would be needed to read the entire table (e.g. by streaming all contents out).",
                  "**rowCount**: How many rows are in the table."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
