{
  "name": "blockchainnodeengine_projects_locations_blockchainNodes_create",
  "description": "Creates a new blockchain node in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Value for parent."
      },
      "blockchainNodeId": {
        "type": "string",
        "description": "Required. ID of the requesting object."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/BlockchainNode"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "BlockchainNode": {
        "description": "A representation of a blockchain node.",
        "properties": {
          "blockchainType": {
            "description": "Immutable. The blockchain type of the node.",
            "enum": [
              "BLOCKCHAIN_TYPE_UNSPECIFIED",
              "ETHEREUM"
            ],
            "type": "string"
          },
          "connectionInfo": {
            "$ref": "#/$defs/ConnectionInfo"
          },
          "createTime": {
            "description": "Output only. The timestamp at which the blockchain node was first created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "ethereumDetails": {
            "$ref": "#/$defs/EthereumDetails"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-provided key-value pairs.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.",
            "readOnly": true,
            "type": "string"
          },
          "privateServiceConnectEnabled": {
            "description": "Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. Warning: Private Service Connect enabled nodes may require a manual migration effort to remain compatible with future versions of the product. If this feature is enabled, you will be notified of these changes along with any required action to avoid disruption. See https://cloud.google.com/vpc/docs/private-service-connect.",
            "type": "boolean"
          },
          "state": {
            "description": "Output only. A status representing the state of the node.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "DELETING",
              "RUNNING",
              "ERROR",
              "UPDATING",
              "REPAIRING",
              "RECONCILING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp at which the blockchain node was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectionInfo": {
        "description": "The connection information through which to interact with a blockchain node.",
        "properties": {
          "endpointInfo": {
            "$ref": "#/$defs/EndpointInfo"
          },
          "serviceAttachment": {
            "description": "Output only. A service attachment that exposes a node, and has the following format: projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndpointInfo": {
        "description": "Contains endpoint information through which to interact with a blockchain node.",
        "properties": {
          "jsonRpcApiEndpoint": {
            "description": "Output only. The assigned URL for the node JSON-RPC API endpoint.",
            "readOnly": true,
            "type": "string"
          },
          "websocketsApiEndpoint": {
            "description": "Output only. The assigned URL for the node WebSockets API endpoint.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EthereumDetails": {
        "description": "Ethereum-specific blockchain node details.",
        "properties": {
          "additionalEndpoints": {
            "$ref": "#/$defs/EthereumEndpoints"
          },
          "apiEnableAdmin": {
            "description": "Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.",
            "type": "boolean"
          },
          "apiEnableDebug": {
            "description": "Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.",
            "type": "boolean"
          },
          "consensusClient": {
            "description": "Immutable. The consensus client.",
            "enum": [
              "CONSENSUS_CLIENT_UNSPECIFIED",
              "LIGHTHOUSE",
              "ERIGON_EMBEDDED_CONSENSUS_LAYER"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              false,
              true
            ]
          },
          "executionClient": {
            "description": "Immutable. The execution client",
            "enum": [
              "EXECUTION_CLIENT_UNSPECIFIED",
              "GETH",
              "ERIGON"
            ],
            "type": "string"
          },
          "gethDetails": {
            "$ref": "#/$defs/GethDetails"
          },
          "network": {
            "description": "Immutable. The Ethereum environment being accessed.",
            "enum": [
              "NETWORK_UNSPECIFIED",
              "MAINNET",
              "TESTNET_GOERLI_PRATER",
              "TESTNET_SEPOLIA",
              "TESTNET_HOLESKY"
            ],
            "type": "string"
          },
          "nodeType": {
            "description": "Immutable. The type of Ethereum node.",
            "enum": [
              "NODE_TYPE_UNSPECIFIED",
              "LIGHT",
              "FULL",
              "ARCHIVE"
            ],
            "type": "string"
          },
          "validatorConfig": {
            "$ref": "#/$defs/ValidatorConfig"
          }
        },
        "type": "object"
      },
      "EthereumEndpoints": {
        "description": "Contains endpoint information specific to Ethereum nodes.",
        "properties": {
          "beaconApiEndpoint": {
            "description": "Output only. The assigned URL for the node's Beacon API endpoint.",
            "readOnly": true,
            "type": "string"
          },
          "beaconPrometheusMetricsApiEndpoint": {
            "description": "Output only. The assigned URL for the node's Beacon Prometheus metrics endpoint. See [Prometheus Metrics](https://lighthouse-book.sigmaprime.io/advanced_metrics.html) for more details.",
            "readOnly": true,
            "type": "string"
          },
          "executionClientPrometheusMetricsApiEndpoint": {
            "description": "Output only. The assigned URL for the node's execution client's Prometheus metrics endpoint.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GethDetails": {
        "description": "Options for the Geth execution client. See [Command-line Options](https://geth.ethereum.org/docs/fundamentals/command-line-options) for more details.",
        "properties": {
          "garbageCollectionMode": {
            "description": "Immutable. Blockchain garbage collection mode.",
            "enum": [
              "GARBAGE_COLLECTION_MODE_UNSPECIFIED",
              "FULL",
              "ARCHIVE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValidatorConfig": {
        "description": "Configuration for validator-related parameters on the beacon client, and for any GCP-managed validator client.",
        "properties": {
          "beaconFeeRecipient": {
            "description": "An Ethereum address which the beacon client will send fee rewards to if no recipient is configured in the validator client. See https://lighthouse-book.sigmaprime.io/suggested-fee-recipient.html or https://docs.prylabs.network/docs/execution-node/fee-recipient for examples of how this is used. Note that while this is often described as \"suggested\", as we run the execution node we can trust the execution node, and therefore this is considered enforced.",
            "type": "string"
          },
          "managedValidatorClient": {
            "description": "Immutable. When true, deploys a GCP-managed validator client alongside the beacon client.",
            "type": "boolean"
          },
          "mevRelayUrls": {
            "description": "URLs for MEV-relay services to use for block building. When set, a GCP-managed MEV-boost service is configured on the beacon client.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://blockchainnodeengine.googleapis.com//v1/{parent}/blockchainNodes{?blockchainNodeId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
