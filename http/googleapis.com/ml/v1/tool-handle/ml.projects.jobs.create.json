{
  "name": "ml_projects_jobs_create",
  "description": "Creates a training or a batch prediction job.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The project name."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudMlV1__Job"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudMlV1__Job": {
        "description": "Represents a training or prediction job.",
        "properties": {
          "createTime": {
            "description": "Output only. When the job was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "endTime": {
            "description": "Output only. When the job processing was completed.",
            "format": "google-datetime",
            "type": "string"
          },
          "errorMessage": {
            "description": "Output only. The details of a failure or a cancellation.",
            "type": "string"
          },
          "etag": {
            "description": "`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a job from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform job updates in order to avoid race conditions: An `etag` is returned in the response to `GetJob`, and systems are expected to put that etag in the request to `UpdateJob` to ensure that their change will be applied to the same version of the job.",
            "format": "byte",
            "type": "string"
          },
          "jobId": {
            "description": "Required. The user-specified id of the job.",
            "type": "string"
          },
          "jobPosition": {
            "description": "Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. One or more labels that you can add, to organize your jobs. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.",
            "type": "object"
          },
          "predictionInput": {
            "$ref": "#/$defs/GoogleCloudMlV1__PredictionInput"
          },
          "predictionOutput": {
            "$ref": "#/$defs/GoogleCloudMlV1__PredictionOutput"
          },
          "startTime": {
            "description": "Output only. When the job processing was started.",
            "format": "google-datetime",
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of a job.",
            "enum": [
              "STATE_UNSPECIFIED",
              "QUEUED",
              "PREPARING",
              "RUNNING",
              "SUCCEEDED",
              "FAILED",
              "CANCELLING",
              "CANCELLED"
            ],
            "type": "string"
          },
          "trainingInput": {
            "$ref": "#/$defs/GoogleCloudMlV1__TrainingInput"
          },
          "trainingOutput": {
            "$ref": "#/$defs/GoogleCloudMlV1__TrainingOutput"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__PredictionInput": {
        "description": "Represents input parameters for a prediction job.",
        "properties": {
          "batchSize": {
            "description": "Optional. Number of records per batch, defaults to 64. The service will buffer batch_size number of records in memory before invoking one Tensorflow prediction call internally. So take the record size and memory available into consideration when setting this parameter.",
            "format": "int64",
            "type": "string"
          },
          "dataFormat": {
            "description": "Required. The format of the input data files.",
            "enum": [
              "DATA_FORMAT_UNSPECIFIED",
              "JSON",
              "TEXT",
              "TF_RECORD",
              "TF_RECORD_GZIP",
              "CSV"
            ],
            "type": "string"
          },
          "inputPaths": {
            "description": "Required. The Cloud Storage location of the input data files. May contain wildcards.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "maxWorkerCount": {
            "description": "Optional. The maximum number of workers to be used for parallel processing. Defaults to 10 if not specified.",
            "format": "int64",
            "type": "string"
          },
          "modelName": {
            "description": "Use this field if you want to use the default version for the specified model. The string must use the following format: `\"projects/YOUR_PROJECT/models/YOUR_MODEL\"`",
            "type": "string"
          },
          "outputDataFormat": {
            "description": "Optional. Format of the output data files, defaults to JSON.",
            "enum": [
              "DATA_FORMAT_UNSPECIFIED",
              "JSON",
              "TEXT",
              "TF_RECORD",
              "TF_RECORD_GZIP",
              "CSV"
            ],
            "type": "string"
          },
          "outputPath": {
            "description": "Required. The output Google Cloud Storage location.",
            "type": "string"
          },
          "region": {
            "description": "Required. The Google Compute Engine region to run the prediction job in. See the available regions for AI Platform services.",
            "type": "string"
          },
          "runtimeVersion": {
            "description": "Optional. The AI Platform runtime version to use for this batch prediction. If not set, AI Platform will pick the runtime version used during the CreateVersion request for this model version, or choose the latest stable version when model version information is not available such as when the model is specified by uri.",
            "type": "string"
          },
          "signatureName": {
            "description": "Optional. The name of the signature defined in the SavedModel to use for this job. Please refer to [SavedModel](https://tensorflow.github.io/serving/serving_basic.html) for information about how to use signatures. Defaults to [DEFAULT_SERVING_SIGNATURE_DEF_KEY](https://www.tensorflow.org/api_docs/python/tf/saved_model/signature_constants) , which is \"serving_default\".",
            "type": "string"
          },
          "uri": {
            "description": "Use this field if you want to specify a Google Cloud Storage path for the model to use.",
            "type": "string"
          },
          "versionName": {
            "description": "Use this field if you want to specify a version of the model to use. The string is formatted the same way as `model_version`, with the addition of the version information: `\"projects/YOUR_PROJECT/models/YOUR_MODEL/versions/YOUR_VERSION\"`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__PredictionOutput": {
        "description": "Represents results of a prediction job.",
        "properties": {
          "errorCount": {
            "description": "The number of data instances which resulted in errors.",
            "format": "int64",
            "type": "string"
          },
          "nodeHours": {
            "description": "Node hours used by the batch prediction job.",
            "format": "double",
            "type": "number"
          },
          "outputPath": {
            "description": "The output Google Cloud Storage location provided at the job creation time.",
            "type": "string"
          },
          "predictionCount": {
            "description": "The number of generated predictions.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__TrainingInput": {
        "description": "Represents input parameters for a training job. When using the gcloud command to submit your training job, you can specify the input parameters as command-line arguments and/or in a YAML configuration file referenced from the --config command-line argument. For details, see the guide to [submitting a training job](/ai-platform/training/docs/training-jobs).",
        "properties": {
          "args": {
            "description": "Optional. Command-line arguments passed to the training application when it starts. If your job uses a custom container, then the arguments are passed to the container's `ENTRYPOINT` command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enableWebAccess": {
            "description": "Optional. Whether you want AI Platform Training to enable [interactive shell access](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by TrainingOutput.web_access_uris or HyperparameterOutput.web_access_uris (within TrainingOutput.trials).",
            "type": "boolean"
          },
          "encryptionConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__EncryptionConfig"
          },
          "evaluatorConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__ReplicaConfig"
          },
          "evaluatorCount": {
            "description": "Optional. The number of evaluator replicas to use for the training job. Each replica in the cluster will be of the type specified in `evaluator_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `evaluator_type`. The default value is zero.",
            "format": "int64",
            "type": "string"
          },
          "evaluatorType": {
            "description": "Optional. Specifies the type of virtual machine to use for your training job's evaluator nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `evaluatorCount` is greater than zero.",
            "type": "string"
          },
          "hyperparameters": {
            "$ref": "#/$defs/GoogleCloudMlV1__HyperparameterSpec"
          },
          "jobDir": {
            "description": "Optional. A Google Cloud Storage path in which to store training outputs and other data needed for training. This path is passed to your TensorFlow program as the '--job-dir' command-line argument. The benefit of specifying this field is that Cloud ML validates the path for use in training.",
            "type": "string"
          },
          "masterConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__ReplicaConfig"
          },
          "masterType": {
            "description": "Optional. Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. See the [list of compatible Compute Engine machine types](/ai-platform/training/docs/machine-types#compute-engine-machine-types). Alternatively, you can use the certain legacy machine types in this field. See the [list of legacy machine types](/ai-platform/training/docs/machine-types#legacy-machine-types). Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPUs](/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).",
            "type": "string"
          },
          "network": {
            "description": "Optional. The full name of the [Compute Engine network](/vpc/docs/vpc) to which the Job is peered. For example, `projects/12345/global/networks/myVPC`. The format of this field is `projects/{project}/global/networks/{network}`, where {project} is a project number (like `12345`) and {network} is network name. Private services access must already be configured for the network. If left unspecified, the Job is not peered with any network. [Learn about using VPC Network Peering.](/ai-platform/training/docs/vpc-peering).",
            "type": "string"
          },
          "packageUris": {
            "description": "Required. The Google Cloud Storage location of the packages with the training program and any additional dependencies. The maximum number of package URIs is 100.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "parameterServerConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__ReplicaConfig"
          },
          "parameterServerCount": {
            "description": "Optional. The number of parameter server replicas to use for the training job. Each replica in the cluster will be of the type specified in `parameter_server_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `parameter_server_type`. The default value is zero.",
            "format": "int64",
            "type": "string"
          },
          "parameterServerType": {
            "description": "Optional. Specifies the type of virtual machine to use for your training job's parameter server. The supported values are the same as those described in the entry for `master_type`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `parameter_server_count` is greater than zero.",
            "type": "string"
          },
          "pythonModule": {
            "description": "Required. The Python module name to run after installing the packages.",
            "type": "string"
          },
          "pythonVersion": {
            "description": "Optional. The version of Python used in training. You must either specify this field or specify `masterConfig.imageUri`. The following Python versions are available: * Python '3.7' is available when `runtime_version` is set to '1.15' or later. * Python '3.5' is available when `runtime_version` is set to a version from '1.4' to '1.14'. * Python '2.7' is available when `runtime_version` is set to '1.15' or earlier. Read more about the Python versions available for [each runtime version](/ml-engine/docs/runtime-version-list).",
            "type": "string"
          },
          "region": {
            "description": "Required. The region to run the training job in. See the [available regions](/ai-platform/training/docs/regions) for AI Platform Training.",
            "type": "string"
          },
          "runtimeVersion": {
            "description": "Optional. The AI Platform runtime version to use for training. You must either specify this field or specify `masterConfig.imageUri`. For more information, see the [runtime version list](/ai-platform/training/docs/runtime-version-list) and learn [how to manage runtime versions](/ai-platform/training/docs/versioning).",
            "type": "string"
          },
          "scaleTier": {
            "description": "Required. Specifies the machine types, the number of replicas for workers and parameter servers.",
            "enum": [
              "BASIC",
              "STANDARD_1",
              "PREMIUM_1",
              "BASIC_GPU",
              "BASIC_TPU",
              "CUSTOM"
            ],
            "type": "string"
          },
          "scheduling": {
            "$ref": "#/$defs/GoogleCloudMlV1__Scheduling"
          },
          "serviceAccount": {
            "description": "Optional. The email address of a service account to use when running the training appplication. You must have the `iam.serviceAccounts.actAs` permission for the specified service account. In addition, the AI Platform Training Google-managed service account must have the `roles/iam.serviceAccountAdmin` role for the specified service account. [Learn more about configuring a service account.](/ai-platform/training/docs/custom-service-account) If not specified, the AI Platform Training Google-managed service account is used by default.",
            "type": "string"
          },
          "useChiefInTfConfig": {
            "description": "Optional. Use `chief` instead of `master` in the `TF_CONFIG` environment variable when training with a custom container. Defaults to `false`. [Learn more about this field.](/ai-platform/training/docs/distributed-training-details#chief-versus-master) This field has no effect for training jobs that don't use a custom container.",
            "type": "boolean"
          },
          "workerConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__ReplicaConfig"
          },
          "workerCount": {
            "description": "Optional. The number of worker replicas to use for the training job. Each replica in the cluster will be of the type specified in `worker_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `worker_type`. The default value is zero.",
            "format": "int64",
            "type": "string"
          },
          "workerType": {
            "description": "Optional. Specifies the type of virtual machine to use for your training job's worker nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. If you use `cloud_tpu` for this value, see special instructions for [configuring a custom TPU machine](/ml-engine/docs/tensorflow/using-tpus#configuring_a_custom_tpu_machine). This value must be present when `scaleTier` is set to `CUSTOM` and `workerCount` is greater than zero.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__EncryptionConfig": {
        "description": "Represents a custom encryption key configuration that can be applied to a resource.",
        "properties": {
          "kmsKeyName": {
            "description": "The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a training job. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__ReplicaConfig": {
        "description": "Represents the configuration for a replica in a cluster.",
        "properties": {
          "acceleratorConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__AcceleratorConfig"
          },
          "containerArgs": {
            "description": "Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "containerCommand": {
            "description": "The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "diskConfig": {
            "$ref": "#/$defs/GoogleCloudMlV1__DiskConfig"
          },
          "imageUri": {
            "description": "The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).",
            "type": "string"
          },
          "tpuTfVersion": {
            "description": "The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__AcceleratorConfig": {
        "description": "Represents a hardware accelerator request config. Note that the AcceleratorConfig can be used in both Jobs and Versions. Learn more about [accelerators for training](/ml-engine/docs/using-gpus) and [accelerators for online prediction](/ml-engine/docs/machine-types-online-prediction#gpus).",
        "properties": {
          "count": {
            "description": "The number of accelerators to attach to each machine running the job.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "The type of accelerator to use.",
            "enum": [
              "ACCELERATOR_TYPE_UNSPECIFIED",
              "NVIDIA_TESLA_K80",
              "NVIDIA_TESLA_P100",
              "NVIDIA_TESLA_V100",
              "NVIDIA_TESLA_P4",
              "NVIDIA_TESLA_T4",
              "NVIDIA_TESLA_A100",
              "TPU_V2",
              "TPU_V3",
              "TPU_V2_POD",
              "TPU_V3_POD",
              "TPU_V4_POD"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__DiskConfig": {
        "description": "Represents the config of disk options.",
        "properties": {
          "bootDiskSizeGb": {
            "description": "Size in GB of the boot disk (default is 100GB).",
            "format": "int32",
            "type": "integer"
          },
          "bootDiskType": {
            "description": "Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__HyperparameterSpec": {
        "description": "Represents a set of hyperparameters to optimize.",
        "properties": {
          "algorithm": {
            "description": "Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.",
            "enum": [
              "ALGORITHM_UNSPECIFIED",
              "GRID_SEARCH",
              "RANDOM_SEARCH"
            ],
            "type": "string"
          },
          "enableTrialEarlyStopping": {
            "description": "Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.",
            "type": "boolean"
          },
          "goal": {
            "description": "Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.",
            "enum": [
              "GOAL_TYPE_UNSPECIFIED",
              "MAXIMIZE",
              "MINIMIZE"
            ],
            "type": "string"
          },
          "hyperparameterMetricTag": {
            "description": "Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \"training/hptuning/metric\" will be used.",
            "type": "string"
          },
          "maxFailedTrials": {
            "description": "Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.",
            "format": "int32",
            "type": "integer"
          },
          "maxParallelTrials": {
            "description": "Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.",
            "format": "int32",
            "type": "integer"
          },
          "maxTrials": {
            "description": "Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.",
            "format": "int32",
            "type": "integer"
          },
          "params": {
            "description": "Required. The set of parameters to tune.",
            "items": {
              "$ref": "#/$defs/GoogleCloudMlV1__ParameterSpec"
            },
            "type": "array"
          },
          "resumePreviousJobId": {
            "description": "Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__ParameterSpec": {
        "description": "Represents a single hyperparameter to optimize.",
        "properties": {
          "categoricalValues": {
            "description": "Required if type is `CATEGORICAL`. The list of possible categories.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "discreteValues": {
            "description": "Required if type is `DISCRETE`. A list of feasible points. The list should be in strictly increasing order. For instance, this parameter might have possible settings of 1.5, 2.5, and 4.0. This list should not contain more than 1,000 values.",
            "items": {
              "format": "double",
              "type": "number"
            },
            "type": "array"
          },
          "maxValue": {
            "description": "Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is `INTEGER`.",
            "format": "double",
            "type": "number"
          },
          "minValue": {
            "description": "Required if type is `DOUBLE` or `INTEGER`. This field should be unset if type is `CATEGORICAL`. This value should be integers if type is INTEGER.",
            "format": "double",
            "type": "number"
          },
          "parameterName": {
            "description": "Required. The parameter name must be unique amongst all ParameterConfigs in a HyperparameterSpec message. E.g., \"learning_rate\".",
            "type": "string"
          },
          "scaleType": {
            "description": "Optional. How the parameter should be scaled to the hypercube. Leave unset for categorical parameters. Some kind of scaling is strongly recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).",
            "enum": [
              "NONE",
              "UNIT_LINEAR_SCALE",
              "UNIT_LOG_SCALE",
              "UNIT_REVERSE_LOG_SCALE"
            ],
            "type": "string"
          },
          "type": {
            "description": "Required. The type of the parameter.",
            "enum": [
              "PARAMETER_TYPE_UNSPECIFIED",
              "DOUBLE",
              "INTEGER",
              "CATEGORICAL",
              "DISCRETE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__Scheduling": {
        "description": "All parameters related to scheduling of training jobs.",
        "properties": {
          "maxRunningTime": {
            "description": "Optional. The maximum job running time, expressed in seconds. The field can contain up to nine fractional digits, terminated by `s`. If not specified, this field defaults to `604800s` (seven days). If the training job is still running after this duration, AI Platform Training cancels it. The duration is measured from when the job enters the `RUNNING` state; therefore it does not overlap with the duration limited by Scheduling.max_wait_time. For example, if you want to ensure your job runs for no more than 2 hours, set this field to `7200s` (2 hours * 60 minutes / hour * 60 seconds / minute). If you submit your training job using the `gcloud` tool, you can [specify this field in a `config.yaml` file](/ai-platform/training/docs/training-jobs#formatting_your_configuration_parameters). For example: ```yaml trainingInput: scheduling: maxRunningTime: 7200s ```",
            "format": "google-duration",
            "type": "string"
          },
          "maxWaitTime": {
            "description": "Optional. The maximum job wait time, expressed in seconds. The field can contain up to nine fractional digits, terminated by `s`. If not specified, there is no limit to the wait time. The minimum for this field is `1800s` (30 minutes). If the training job has not entered the `RUNNING` state after this duration, AI Platform Training cancels it. After the job begins running, it can no longer be cancelled due to the maximum wait time. Therefore the duration limited by this field does not overlap with the duration limited by Scheduling.max_running_time. For example, if the job temporarily stops running and retries due to a [VM restart](/ai-platform/training/docs/overview#restarts), this cannot lead to a maximum wait time cancellation. However, independently of this constraint, AI Platform Training might stop a job if there are too many retries due to exhausted resources in a region. The following example describes how you might use this field: To cancel your job if it doesn't start running within 1 hour, set this field to `3600s` (1 hour * 60 minutes / hour * 60 seconds / minute). If the job is still in the `QUEUED` or `PREPARING` state after an hour of waiting, AI Platform Training cancels the job. If you submit your training job using the `gcloud` tool, you can [specify this field in a `config.yaml` file](/ai-platform/training/docs/training-jobs#formatting_your_configuration_parameters). For example: ```yaml trainingInput: scheduling: maxWaitTime: 3600s ```",
            "format": "google-duration",
            "type": "string"
          },
          "priority": {
            "description": "Optional. Job scheduling will be based on this priority, which in the range [0, 1000]. The bigger the number, the higher the priority. Default to 0 if not set. If there are multiple jobs requesting same type of accelerators, the high priority job will be scheduled prior to ones with low priority.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__TrainingOutput": {
        "description": "Represents results of a training job. Output only.",
        "properties": {
          "builtInAlgorithmOutput": {
            "$ref": "#/$defs/GoogleCloudMlV1__BuiltInAlgorithmOutput"
          },
          "completedTrialCount": {
            "description": "The number of hyperparameter tuning trials that completed successfully. Only set for hyperparameter tuning jobs.",
            "format": "int64",
            "type": "string"
          },
          "consumedMLUnits": {
            "description": "The amount of ML units consumed by the job.",
            "format": "double",
            "type": "number"
          },
          "hyperparameterMetricTag": {
            "description": "The TensorFlow summary tag name used for optimizing hyperparameter tuning trials. See [`HyperparameterSpec.hyperparameterMetricTag`](#HyperparameterSpec.FIELDS.hyperparameter_metric_tag) for more information. Only set for hyperparameter tuning jobs.",
            "type": "string"
          },
          "isBuiltInAlgorithmJob": {
            "description": "Whether this job is a built-in Algorithm job.",
            "type": "boolean"
          },
          "isHyperparameterTuningJob": {
            "description": "Whether this job is a hyperparameter tuning job.",
            "type": "boolean"
          },
          "trials": {
            "description": "Results for individual Hyperparameter trials. Only set for hyperparameter tuning jobs.",
            "items": {
              "$ref": "#/$defs/GoogleCloudMlV1__HyperparameterOutput"
            },
            "type": "array"
          },
          "webAccessUris": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Output only. URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell.",
            "readOnly": true,
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__BuiltInAlgorithmOutput": {
        "description": "Represents output related to a built-in algorithm Job.",
        "properties": {
          "framework": {
            "description": "Framework on which the built-in algorithm was trained.",
            "type": "string"
          },
          "modelPath": {
            "description": "The Cloud Storage path to the `model/` directory where the training job saves the trained model. Only set for successful jobs that don't use hyperparameter tuning.",
            "type": "string"
          },
          "pythonVersion": {
            "description": "Python version on which the built-in algorithm was trained.",
            "type": "string"
          },
          "runtimeVersion": {
            "description": "AI Platform runtime version on which the built-in algorithm was trained.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1__HyperparameterOutput": {
        "description": "Represents the result of a single hyperparameter tuning trial from a training job. The TrainingOutput object that is returned on successful completion of a training job with hyperparameter tuning includes a list of HyperparameterOutput objects, one for each successful trial.",
        "properties": {
          "allMetrics": {
            "description": "All recorded object metrics for this trial. This field is not currently populated.",
            "items": {
              "$ref": "#/$defs/GoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric"
            },
            "type": "array"
          },
          "builtInAlgorithmOutput": {
            "$ref": "#/$defs/GoogleCloudMlV1__BuiltInAlgorithmOutput"
          },
          "endTime": {
            "description": "Output only. End time for the trial.",
            "format": "google-datetime",
            "type": "string"
          },
          "finalMetric": {
            "$ref": "#/$defs/GoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric"
          },
          "hyperparameters": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The hyperparameters given to this trial.",
            "type": "object"
          },
          "isTrialStoppedEarly": {
            "description": "True if the trial is stopped early.",
            "type": "boolean"
          },
          "startTime": {
            "description": "Output only. Start time for the trial.",
            "format": "google-datetime",
            "type": "string"
          },
          "state": {
            "description": "Output only. The detailed state of the trial.",
            "enum": [
              "STATE_UNSPECIFIED",
              "QUEUED",
              "PREPARING",
              "RUNNING",
              "SUCCEEDED",
              "FAILED",
              "CANCELLING",
              "CANCELLED"
            ],
            "type": "string"
          },
          "trialId": {
            "description": "The trial id for these results.",
            "type": "string"
          },
          "webAccessUris": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a hyperparameter tuning job and the job's training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudMlV1_HyperparameterOutput_HyperparameterMetric": {
        "description": "An observed value of a metric.",
        "properties": {
          "objectiveValue": {
            "description": "The objective value at this training step.",
            "format": "double",
            "type": "number"
          },
          "trainingStep": {
            "description": "The global training step for this metric.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://ml.googleapis.com//v1/{parent}/jobs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a training or prediction job.",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. When the job was created.",
            "**endTime**: Output only. When the job processing was completed.",
            "**errorMessage**: Output only. The details of a failure or a cancellation.",
            "**etag**: `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a job from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform job updates in order to avoid race conditions: An `etag` is returned in the response to `GetJob`, and systems are expected to put that etag in the request to `UpdateJob` to ensure that their change will be applied to the same version of the job.",
            "**jobId**: Required. The user-specified id of the job.",
            "**jobPosition**: Output only. It's only effect when the job is in QUEUED state. If it's positive, it indicates the job's position in the job scheduler. It's 0 when the job is already scheduled.",
            "**labels**: Optional. One or more labels that you can add, to organize your jobs. Each label is a key-value pair, where both the key and the value are arbitrary strings that you supply. For more information, see the documentation on using labels.",
            [
              "**predictionInput**: Represents input parameters for a prediction job.",
              {
                "$ul": [
                  "**batchSize**: Optional. Number of records per batch, defaults to 64. The service will buffer batch_size number of records in memory before invoking one Tensorflow prediction call internally. So take the record size and memory available into consideration when setting this parameter.",
                  "**dataFormat**: Required. The format of the input data files.",
                  "**inputPaths**: Required. The Cloud Storage location of the input data files. May contain wildcards.",
                  "**maxWorkerCount**: Optional. The maximum number of workers to be used for parallel processing. Defaults to 10 if not specified.",
                  "**modelName**: Use this field if you want to use the default version for the specified model. The string must use the following format: `\"projects/YOUR_PROJECT/models/YOUR_MODEL\"`",
                  "**outputDataFormat**: Optional. Format of the output data files, defaults to JSON.",
                  "**outputPath**: Required. The output Google Cloud Storage location.",
                  "**region**: Required. The Google Compute Engine region to run the prediction job in. See the available regions for AI Platform services.",
                  "**runtimeVersion**: Optional. The AI Platform runtime version to use for this batch prediction. If not set, AI Platform will pick the runtime version used during the CreateVersion request for this model version, or choose the latest stable version when model version information is not available such as when the model is specified by uri.",
                  "**signatureName**: Optional. The name of the signature defined in the SavedModel to use for this job. Please refer to [SavedModel](https://tensorflow.github.io/serving/serving_basic.html) for information about how to use signatures. Defaults to [DEFAULT_SERVING_SIGNATURE_DEF_KEY](https://www.tensorflow.org/api_docs/python/tf/saved_model/signature_constants) , which is \"serving_default\".",
                  "**uri**: Use this field if you want to specify a Google Cloud Storage path for the model to use.",
                  "**versionName**: Use this field if you want to specify a version of the model to use. The string is formatted the same way as `model_version`, with the addition of the version information: `\"projects/YOUR_PROJECT/models/YOUR_MODEL/versions/YOUR_VERSION\"`"
                ]
              }
            ],
            [
              "**predictionOutput**: Represents results of a prediction job.",
              {
                "$ul": [
                  "**errorCount**: The number of data instances which resulted in errors.",
                  "**nodeHours**: Node hours used by the batch prediction job.",
                  "**outputPath**: The output Google Cloud Storage location provided at the job creation time.",
                  "**predictionCount**: The number of generated predictions."
                ]
              }
            ],
            "**startTime**: Output only. When the job processing was started.",
            "**state**: Output only. The detailed state of a job.",
            [
              "**trainingInput**: Represents input parameters for a training job. When using the gcloud command to submit your training job, you can specify the input parameters as command-line arguments and/or in a YAML configuration file referenced from the --config command-line argument. For details, see the guide to [submitting a training job](/ai-platform/training/docs/training-jobs).",
              {
                "$ul": [
                  "**args**: Optional. Command-line arguments passed to the training application when it starts. If your job uses a custom container, then the arguments are passed to the container's `ENTRYPOINT` command.",
                  "**enableWebAccess**: Optional. Whether you want AI Platform Training to enable [interactive shell access](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) to training containers. If set to `true`, you can access interactive shells at the URIs given by TrainingOutput.web_access_uris or HyperparameterOutput.web_access_uris (within TrainingOutput.trials).",
                  [
                    "**encryptionConfig**: Represents a custom encryption key configuration that can be applied to a resource.",
                    {
                      "$ul": [
                        "**kmsKeyName**: The Cloud KMS resource identifier of the customer-managed encryption key used to protect a resource, such as a training job. It has the following format: `projects/{PROJECT_ID}/locations/{REGION}/keyRings/{KEY_RING_NAME}/cryptoKeys/{KEY_NAME}`"
                      ]
                    }
                  ],
                  [
                    "**evaluatorConfig**: Represents the configuration for a replica in a cluster.",
                    {
                      "$ul": [
                        [
                          "**acceleratorConfig**: Represents a hardware accelerator request config. Note that the AcceleratorConfig can be used in both Jobs and Versions. Learn more about [accelerators for training](/ml-engine/docs/using-gpus) and [accelerators for online prediction](/ml-engine/docs/machine-types-online-prediction#gpus).",
                          {
                            "$ul": [
                              "**count**: The number of accelerators to attach to each machine running the job.",
                              "**type**: The type of accelerator to use."
                            ]
                          }
                        ],
                        "**containerArgs**: Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        "**containerCommand**: The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        [
                          "**diskConfig**: Represents the config of disk options.",
                          {
                            "$ul": [
                              "**bootDiskSizeGb**: Size in GB of the boot disk (default is 100GB).",
                              "**bootDiskType**: Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive)."
                            ]
                          }
                        ],
                        "**imageUri**: The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).",
                        "**tpuTfVersion**: The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`."
                      ]
                    }
                  ],
                  "**evaluatorCount**: Optional. The number of evaluator replicas to use for the training job. Each replica in the cluster will be of the type specified in `evaluator_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `evaluator_type`. The default value is zero.",
                  "**evaluatorType**: Optional. Specifies the type of virtual machine to use for your training job's evaluator nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `evaluatorCount` is greater than zero.",
                  [
                    "**hyperparameters**: Represents a set of hyperparameters to optimize.",
                    {
                      "$ul": [
                        "**algorithm**: Optional. The search algorithm specified for the hyperparameter tuning job. Uses the default AI Platform hyperparameter tuning algorithm if unspecified.",
                        "**enableTrialEarlyStopping**: Optional. Indicates if the hyperparameter tuning job enables auto trial early stopping.",
                        "**goal**: Required. The type of goal to use for tuning. Available types are `MAXIMIZE` and `MINIMIZE`. Defaults to `MAXIMIZE`.",
                        "**hyperparameterMetricTag**: Optional. The TensorFlow summary tag name to use for optimizing trials. For current versions of TensorFlow, this tag name should exactly match what is shown in TensorBoard, including all scopes. For versions of TensorFlow prior to 0.12, this should be only the tag passed to tf.Summary. By default, \"training/hptuning/metric\" will be used.",
                        "**maxFailedTrials**: Optional. The number of failed trials that need to be seen before failing the hyperparameter tuning job. You can specify this field to override the default failing criteria for AI Platform hyperparameter tuning jobs. Defaults to zero, which means the service decides when a hyperparameter job should fail.",
                        "**maxParallelTrials**: Optional. The number of training trials to run concurrently. You can reduce the time it takes to perform hyperparameter tuning by adding trials in parallel. However, each trail only benefits from the information gained in completed trials. That means that a trial does not get access to the results of trials running at the same time, which could reduce the quality of the overall optimization. Each trial will use the same scale tier and machine types. Defaults to one.",
                        "**maxTrials**: Optional. How many training trials should be attempted to optimize the specified hyperparameters. Defaults to one.",
                        "**params**: Required. The set of parameters to tune.",
                        "**resumePreviousJobId**: Optional. The prior hyperparameter tuning job id that users hope to continue with. The job id will be used to find the corresponding vizier study guid and resume the study."
                      ]
                    }
                  ],
                  "**jobDir**: Optional. A Google Cloud Storage path in which to store training outputs and other data needed for training. This path is passed to your TensorFlow program as the '--job-dir' command-line argument. The benefit of specifying this field is that Cloud ML validates the path for use in training.",
                  [
                    "**masterConfig**: Represents the configuration for a replica in a cluster.",
                    {
                      "$ul": [
                        [
                          "**acceleratorConfig**: Represents a hardware accelerator request config. Note that the AcceleratorConfig can be used in both Jobs and Versions. Learn more about [accelerators for training](/ml-engine/docs/using-gpus) and [accelerators for online prediction](/ml-engine/docs/machine-types-online-prediction#gpus).",
                          {
                            "$ul": [
                              "**count**: The number of accelerators to attach to each machine running the job.",
                              "**type**: The type of accelerator to use."
                            ]
                          }
                        ],
                        "**containerArgs**: Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        "**containerCommand**: The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        [
                          "**diskConfig**: Represents the config of disk options.",
                          {
                            "$ul": [
                              "**bootDiskSizeGb**: Size in GB of the boot disk (default is 100GB).",
                              "**bootDiskType**: Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive)."
                            ]
                          }
                        ],
                        "**imageUri**: The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).",
                        "**tpuTfVersion**: The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`."
                      ]
                    }
                  ],
                  "**masterType**: Optional. Specifies the type of virtual machine to use for your training job's master worker. You must specify this field when `scaleTier` is set to `CUSTOM`. You can use certain Compute Engine machine types directly in this field. See the [list of compatible Compute Engine machine types](/ai-platform/training/docs/machine-types#compute-engine-machine-types). Alternatively, you can use the certain legacy machine types in this field. See the [list of legacy machine types](/ai-platform/training/docs/machine-types#legacy-machine-types). Finally, if you want to use a TPU for training, specify `cloud_tpu` in this field. Learn more about the [special configuration options for training with TPUs](/ai-platform/training/docs/using-tpus#configuring_a_custom_tpu_machine).",
                  "**network**: Optional. The full name of the [Compute Engine network](/vpc/docs/vpc) to which the Job is peered. For example, `projects/12345/global/networks/myVPC`. The format of this field is `projects/{project}/global/networks/{network}`, where {project} is a project number (like `12345`) and {network} is network name. Private services access must already be configured for the network. If left unspecified, the Job is not peered with any network. [Learn about using VPC Network Peering.](/ai-platform/training/docs/vpc-peering).",
                  "**packageUris**: Required. The Google Cloud Storage location of the packages with the training program and any additional dependencies. The maximum number of package URIs is 100.",
                  [
                    "**parameterServerConfig**: Represents the configuration for a replica in a cluster.",
                    {
                      "$ul": [
                        [
                          "**acceleratorConfig**: Represents a hardware accelerator request config. Note that the AcceleratorConfig can be used in both Jobs and Versions. Learn more about [accelerators for training](/ml-engine/docs/using-gpus) and [accelerators for online prediction](/ml-engine/docs/machine-types-online-prediction#gpus).",
                          {
                            "$ul": [
                              "**count**: The number of accelerators to attach to each machine running the job.",
                              "**type**: The type of accelerator to use."
                            ]
                          }
                        ],
                        "**containerArgs**: Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        "**containerCommand**: The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        [
                          "**diskConfig**: Represents the config of disk options.",
                          {
                            "$ul": [
                              "**bootDiskSizeGb**: Size in GB of the boot disk (default is 100GB).",
                              "**bootDiskType**: Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive)."
                            ]
                          }
                        ],
                        "**imageUri**: The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).",
                        "**tpuTfVersion**: The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`."
                      ]
                    }
                  ],
                  "**parameterServerCount**: Optional. The number of parameter server replicas to use for the training job. Each replica in the cluster will be of the type specified in `parameter_server_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `parameter_server_type`. The default value is zero.",
                  "**parameterServerType**: Optional. Specifies the type of virtual machine to use for your training job's parameter server. The supported values are the same as those described in the entry for `master_type`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. This value must be present when `scaleTier` is set to `CUSTOM` and `parameter_server_count` is greater than zero.",
                  "**pythonModule**: Required. The Python module name to run after installing the packages.",
                  "**pythonVersion**: Optional. The version of Python used in training. You must either specify this field or specify `masterConfig.imageUri`. The following Python versions are available: * Python '3.7' is available when `runtime_version` is set to '1.15' or later. * Python '3.5' is available when `runtime_version` is set to a version from '1.4' to '1.14'. * Python '2.7' is available when `runtime_version` is set to '1.15' or earlier. Read more about the Python versions available for [each runtime version](/ml-engine/docs/runtime-version-list).",
                  "**region**: Required. The region to run the training job in. See the [available regions](/ai-platform/training/docs/regions) for AI Platform Training.",
                  "**runtimeVersion**: Optional. The AI Platform runtime version to use for training. You must either specify this field or specify `masterConfig.imageUri`. For more information, see the [runtime version list](/ai-platform/training/docs/runtime-version-list) and learn [how to manage runtime versions](/ai-platform/training/docs/versioning).",
                  "**scaleTier**: Required. Specifies the machine types, the number of replicas for workers and parameter servers.",
                  [
                    "**scheduling**: All parameters related to scheduling of training jobs.",
                    {
                      "$ul": [
                        "**maxRunningTime**: Optional. The maximum job running time, expressed in seconds. The field can contain up to nine fractional digits, terminated by `s`. If not specified, this field defaults to `604800s` (seven days). If the training job is still running after this duration, AI Platform Training cancels it. The duration is measured from when the job enters the `RUNNING` state; therefore it does not overlap with the duration limited by Scheduling.max_wait_time. For example, if you want to ensure your job runs for no more than 2 hours, set this field to `7200s` (2 hours * 60 minutes / hour * 60 seconds / minute). If you submit your training job using the `gcloud` tool, you can [specify this field in a `config.yaml` file](/ai-platform/training/docs/training-jobs#formatting_your_configuration_parameters). For example: ```yaml trainingInput: scheduling: maxRunningTime: 7200s ```",
                        "**maxWaitTime**: Optional. The maximum job wait time, expressed in seconds. The field can contain up to nine fractional digits, terminated by `s`. If not specified, there is no limit to the wait time. The minimum for this field is `1800s` (30 minutes). If the training job has not entered the `RUNNING` state after this duration, AI Platform Training cancels it. After the job begins running, it can no longer be cancelled due to the maximum wait time. Therefore the duration limited by this field does not overlap with the duration limited by Scheduling.max_running_time. For example, if the job temporarily stops running and retries due to a [VM restart](/ai-platform/training/docs/overview#restarts), this cannot lead to a maximum wait time cancellation. However, independently of this constraint, AI Platform Training might stop a job if there are too many retries due to exhausted resources in a region. The following example describes how you might use this field: To cancel your job if it doesn't start running within 1 hour, set this field to `3600s` (1 hour * 60 minutes / hour * 60 seconds / minute). If the job is still in the `QUEUED` or `PREPARING` state after an hour of waiting, AI Platform Training cancels the job. If you submit your training job using the `gcloud` tool, you can [specify this field in a `config.yaml` file](/ai-platform/training/docs/training-jobs#formatting_your_configuration_parameters). For example: ```yaml trainingInput: scheduling: maxWaitTime: 3600s ```",
                        "**priority**: Optional. Job scheduling will be based on this priority, which in the range [0, 1000]. The bigger the number, the higher the priority. Default to 0 if not set. If there are multiple jobs requesting same type of accelerators, the high priority job will be scheduled prior to ones with low priority."
                      ]
                    }
                  ],
                  "**serviceAccount**: Optional. The email address of a service account to use when running the training appplication. You must have the `iam.serviceAccounts.actAs` permission for the specified service account. In addition, the AI Platform Training Google-managed service account must have the `roles/iam.serviceAccountAdmin` role for the specified service account. [Learn more about configuring a service account.](/ai-platform/training/docs/custom-service-account) If not specified, the AI Platform Training Google-managed service account is used by default.",
                  "**useChiefInTfConfig**: Optional. Use `chief` instead of `master` in the `TF_CONFIG` environment variable when training with a custom container. Defaults to `false`. [Learn more about this field.](/ai-platform/training/docs/distributed-training-details#chief-versus-master) This field has no effect for training jobs that don't use a custom container.",
                  [
                    "**workerConfig**: Represents the configuration for a replica in a cluster.",
                    {
                      "$ul": [
                        [
                          "**acceleratorConfig**: Represents a hardware accelerator request config. Note that the AcceleratorConfig can be used in both Jobs and Versions. Learn more about [accelerators for training](/ml-engine/docs/using-gpus) and [accelerators for online prediction](/ml-engine/docs/machine-types-online-prediction#gpus).",
                          {
                            "$ul": [
                              "**count**: The number of accelerators to attach to each machine running the job.",
                              "**type**: The type of accelerator to use."
                            ]
                          }
                        ],
                        "**containerArgs**: Arguments to the entrypoint command. The following rules apply for container_command and container_args: - If you do not supply command or args: The defaults defined in the Docker image are used. - If you supply a command but no args: The default EntryPoint and the default Cmd defined in the Docker image are ignored. Your command is run without any arguments. - If you supply only args: The default Entrypoint defined in the Docker image is run with the args that you supplied. - If you supply a command and args: The default Entrypoint and the default Cmd defined in the Docker image are ignored. Your command is run with your args. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        "**containerCommand**: The command with which the replica's custom container is run. If provided, it will override default ENTRYPOINT of the docker image. If not provided, the docker image's ENTRYPOINT is used. It cannot be set if custom container image is not provided. Note that this field and [TrainingInput.args] are mutually exclusive, i.e., both cannot be set at the same time.",
                        [
                          "**diskConfig**: Represents the config of disk options.",
                          {
                            "$ul": [
                              "**bootDiskSizeGb**: Size in GB of the boot disk (default is 100GB).",
                              "**bootDiskType**: Type of the boot disk (default is \"pd-ssd\"). Valid values: \"pd-ssd\" (Persistent Disk Solid State Drive) or \"pd-standard\" (Persistent Disk Hard Disk Drive)."
                            ]
                          }
                        ],
                        "**imageUri**: The Docker image to run on the replica. This image must be in Container Registry. Learn more about [configuring custom containers](/ai-platform/training/docs/distributed-training-containers).",
                        "**tpuTfVersion**: The AI Platform runtime version that includes a TensorFlow version matching the one used in the custom container. This field is required if the replica is a TPU worker that uses a custom container. Otherwise, do not specify this field. This must be a [runtime version that currently supports training with TPUs](/ml-engine/docs/tensorflow/runtime-version-list#tpu-support). Note that the version of TensorFlow included in a runtime version may differ from the numbering of the runtime version itself, because it may have a different [patch version](https://www.tensorflow.org/guide/version_compat#semantic_versioning_20). In this field, you must specify the runtime version (TensorFlow minor version). For example, if your custom container runs TensorFlow `1.x.y`, specify `1.x`."
                      ]
                    }
                  ],
                  "**workerCount**: Optional. The number of worker replicas to use for the training job. Each replica in the cluster will be of the type specified in `worker_type`. This value can only be used when `scale_tier` is set to `CUSTOM`. If you set this value, you must also set `worker_type`. The default value is zero.",
                  "**workerType**: Optional. Specifies the type of virtual machine to use for your training job's worker nodes. The supported values are the same as those described in the entry for `masterType`. This value must be consistent with the category of machine type that `masterType` uses. In other words, both must be Compute Engine machine types or both must be legacy machine types. If you use `cloud_tpu` for this value, see special instructions for [configuring a custom TPU machine](/ml-engine/docs/tensorflow/using-tpus#configuring_a_custom_tpu_machine). This value must be present when `scaleTier` is set to `CUSTOM` and `workerCount` is greater than zero."
                ]
              }
            ],
            [
              "**trainingOutput**: Represents results of a training job. Output only.",
              {
                "$ul": [
                  [
                    "**builtInAlgorithmOutput**: Represents output related to a built-in algorithm Job.",
                    {
                      "$ul": [
                        "**framework**: Framework on which the built-in algorithm was trained.",
                        "**modelPath**: The Cloud Storage path to the `model/` directory where the training job saves the trained model. Only set for successful jobs that don't use hyperparameter tuning.",
                        "**pythonVersion**: Python version on which the built-in algorithm was trained.",
                        "**runtimeVersion**: AI Platform runtime version on which the built-in algorithm was trained."
                      ]
                    }
                  ],
                  "**completedTrialCount**: The number of hyperparameter tuning trials that completed successfully. Only set for hyperparameter tuning jobs.",
                  "**consumedMLUnits**: The amount of ML units consumed by the job.",
                  "**hyperparameterMetricTag**: The TensorFlow summary tag name used for optimizing hyperparameter tuning trials. See [`HyperparameterSpec.hyperparameterMetricTag`](#HyperparameterSpec.FIELDS.hyperparameter_metric_tag) for more information. Only set for hyperparameter tuning jobs.",
                  "**isBuiltInAlgorithmJob**: Whether this job is a built-in Algorithm job.",
                  "**isHyperparameterTuningJob**: Whether this job is a hyperparameter tuning job.",
                  "**trials**: Results for individual Hyperparameter trials. Only set for hyperparameter tuning jobs.",
                  "**webAccessUris**: Output only. URIs for accessing [interactive shells](https://cloud.google.com/ai-platform/training/docs/monitor-debug-interactive-shell) (one URI for each training node). Only available if training_input.enable_web_access is `true`. The keys are names of each node in the training job; for example, `master-replica-0` for the master node, `worker-replica-0` for the first worker, and `ps-replica-0` for the first parameter server. The values are the URIs for each node's interactive shell."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
