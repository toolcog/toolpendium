{
  "name": "connectors_projects_locations_global_customConnectors_customConnectorVersions_create",
  "description": "Creates a new CustomConnectorVersion in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Parent resource of the CreateCustomConnector, of the form: `projects/{project}/locations/{location}/customConnectors/{custom_connector}`"
      },
      "customConnectorVersionId": {
        "type": "string",
        "description": "Required. Identifier to assign to the CreateCustomConnectorVersion. Must be unique within scope of the parent resource."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CustomConnectorVersion"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CustomConnectorVersion": {
        "description": "CustomConnectorVersion indicates a specific version of a connector.",
        "properties": {
          "authConfig": {
            "$ref": "#/$defs/AuthConfig"
          },
          "backendVariableTemplates": {
            "description": "Optional. Backend variables config templates. This translates to additional variable templates in connection.",
            "items": {
              "$ref": "#/$defs/ConfigVariableTemplate"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Output only. Created time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "destinationConfigs": {
            "description": "Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.",
            "items": {
              "$ref": "#/$defs/DestinationConfig"
            },
            "type": "array"
          },
          "enableBackendDestinationConfig": {
            "description": "Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
            "type": "object"
          },
          "name": {
            "description": "Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}",
            "readOnly": true,
            "type": "string"
          },
          "serviceAccount": {
            "description": "Optional. Service account used by runtime plane to access auth config secrets.",
            "type": "string"
          },
          "specLocation": {
            "description": "Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///`",
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the custom connector version.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "DEPRECATED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Updated time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthConfig": {
        "description": "AuthConfig defines details of a authentication type.",
        "properties": {
          "additionalVariables": {
            "description": "List containing additional auth configs.",
            "items": {
              "$ref": "#/$defs/ConfigVariable"
            },
            "type": "array"
          },
          "authKey": {
            "description": "Identifier key for auth config",
            "type": "string"
          },
          "authType": {
            "description": "The type of authentication configured.",
            "enum": [
              "AUTH_TYPE_UNSPECIFIED",
              "USER_PASSWORD",
              "OAUTH2_JWT_BEARER",
              "OAUTH2_CLIENT_CREDENTIALS",
              "SSH_PUBLIC_KEY",
              "OAUTH2_AUTH_CODE_FLOW",
              "GOOGLE_AUTHENTICATION"
            ],
            "type": "string"
          },
          "oauth2AuthCodeFlow": {
            "$ref": "#/$defs/Oauth2AuthCodeFlow"
          },
          "oauth2ClientCredentials": {
            "$ref": "#/$defs/Oauth2ClientCredentials"
          },
          "oauth2JwtBearer": {
            "$ref": "#/$defs/Oauth2JwtBearer"
          },
          "sshPublicKey": {
            "$ref": "#/$defs/SshPublicKey"
          },
          "userPassword": {
            "$ref": "#/$defs/UserPassword"
          }
        },
        "type": "object"
      },
      "ConfigVariable": {
        "description": "ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.",
        "properties": {
          "boolValue": {
            "description": "Value is a bool.",
            "type": "boolean"
          },
          "encryptionKeyValue": {
            "$ref": "#/$defs/EncryptionKey"
          },
          "intValue": {
            "description": "Value is an integer",
            "format": "int64",
            "type": "string"
          },
          "key": {
            "description": "Key of the config variable.",
            "type": "string"
          },
          "secretValue": {
            "$ref": "#/$defs/Secret"
          },
          "stringValue": {
            "description": "Value is a string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionKey": {
        "description": "Encryption Key value.",
        "properties": {
          "kmsKeyName": {
            "description": "The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.",
            "type": "string"
          },
          "type": {
            "description": "Type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "GOOGLE_MANAGED",
              "CUSTOMER_MANAGED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Secret": {
        "description": "Secret provides a reference to entries in Secret Manager.",
        "properties": {
          "secretVersion": {
            "description": "The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Oauth2AuthCodeFlow": {
        "description": "Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.",
        "properties": {
          "authCode": {
            "description": "Authorization code to be exchanged for access and refresh tokens.",
            "type": "string"
          },
          "authUri": {
            "description": "Auth URL for Authorization Code Flow",
            "type": "string"
          },
          "clientId": {
            "description": "Client ID for user-provided OAuth app.",
            "type": "string"
          },
          "clientSecret": {
            "$ref": "#/$defs/Secret"
          },
          "enablePkce": {
            "description": "Whether to enable PKCE when the user performs the auth code flow.",
            "type": "boolean"
          },
          "pkceVerifier": {
            "description": "PKCE verifier to be used during the auth code exchange.",
            "type": "string"
          },
          "redirectUri": {
            "description": "Redirect URI to be provided during the auth code exchange.",
            "type": "string"
          },
          "scopes": {
            "description": "Scopes the connection will request when the user performs the auth code flow.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Oauth2ClientCredentials": {
        "description": "Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.",
        "properties": {
          "clientId": {
            "description": "The client identifier.",
            "type": "string"
          },
          "clientSecret": {
            "$ref": "#/$defs/Secret"
          }
        },
        "type": "object"
      },
      "Oauth2JwtBearer": {
        "description": "Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.",
        "properties": {
          "clientKey": {
            "$ref": "#/$defs/Secret"
          },
          "jwtClaims": {
            "$ref": "#/$defs/JwtClaims"
          }
        },
        "type": "object"
      },
      "JwtClaims": {
        "description": "JWT claims used for the jwt-bearer authorization grant.",
        "properties": {
          "audience": {
            "description": "Value for the \"aud\" claim.",
            "type": "string"
          },
          "issuer": {
            "description": "Value for the \"iss\" claim.",
            "type": "string"
          },
          "subject": {
            "description": "Value for the \"sub\" claim.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SshPublicKey": {
        "description": "Parameters to support Ssh public key Authentication.",
        "properties": {
          "certType": {
            "description": "Format of SSH Client cert.",
            "type": "string"
          },
          "sshClientCert": {
            "$ref": "#/$defs/Secret"
          },
          "sshClientCertPass": {
            "$ref": "#/$defs/Secret"
          },
          "username": {
            "description": "The user account used to authenticate.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPassword": {
        "description": "Parameters to support Username and Password Authentication.",
        "properties": {
          "password": {
            "$ref": "#/$defs/Secret"
          },
          "username": {
            "description": "Username.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConfigVariableTemplate": {
        "description": "ConfigVariableTemplate provides metadata about a `ConfigVariable` that is used in a Connection.",
        "properties": {
          "authorizationCodeLink": {
            "$ref": "#/$defs/AuthorizationCodeLink"
          },
          "description": {
            "description": "Description.",
            "type": "string"
          },
          "displayName": {
            "description": "Display name of the parameter.",
            "type": "string"
          },
          "enumOptions": {
            "description": "Enum options. To be populated if `ValueType` is `ENUM`",
            "items": {
              "$ref": "#/$defs/EnumOption"
            },
            "type": "array"
          },
          "isAdvanced": {
            "description": "Indicates if current template is part of advanced settings",
            "type": "boolean"
          },
          "key": {
            "description": "Key of the config variable.",
            "type": "string"
          },
          "locationType": {
            "description": "Optional. Location Tyep denotes where this value should be sent in BYOC connections.",
            "enum": [
              "LOCATION_TYPE_UNSPECIFIED",
              "HEADER",
              "PAYLOAD",
              "QUERY_PARAM",
              "PATH_PARAM"
            ],
            "type": "string"
          },
          "required": {
            "description": "Flag represents that this `ConfigVariable` must be provided for a connection.",
            "type": "boolean"
          },
          "requiredCondition": {
            "$ref": "#/$defs/LogicalExpression"
          },
          "roleGrant": {
            "$ref": "#/$defs/RoleGrant"
          },
          "state": {
            "description": "State of the config variable.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "DEPRECATED"
            ],
            "type": "string"
          },
          "validationRegex": {
            "description": "Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.",
            "type": "string"
          },
          "valueType": {
            "description": "Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.",
            "enum": [
              "VALUE_TYPE_UNSPECIFIED",
              "STRING",
              "INT",
              "BOOL",
              "SECRET",
              "ENUM",
              "AUTHORIZATION_CODE",
              "ENCRYPTION_KEY"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthorizationCodeLink": {
        "description": "This configuration captures the details required to render an authorization link for the OAuth Authorization Code Flow.",
        "properties": {
          "clientId": {
            "description": "The client ID assigned to the Google Cloud Connectors OAuth app for the connector data source.",
            "type": "string"
          },
          "enablePkce": {
            "description": "Whether to enable PKCE for the auth code flow.",
            "type": "boolean"
          },
          "scopes": {
            "description": "The scopes for which the user will authorize Google Cloud Connectors on the connector data source.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uri": {
            "description": "The base URI the user must click to trigger the authorization code login flow.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EnumOption": {
        "description": "EnumOption definition",
        "properties": {
          "displayName": {
            "description": "Display name of the option.",
            "type": "string"
          },
          "id": {
            "description": "Id of the option.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LogicalExpression": {
        "description": "Struct for representing boolean expressions.",
        "properties": {
          "fieldComparisons": {
            "description": "A list of fields to be compared.",
            "items": {
              "$ref": "#/$defs/FieldComparison"
            },
            "type": "array"
          },
          "logicalExpressions": {
            "description": "A list of nested conditions to be compared.",
            "items": {
              "$ref": "#/$defs/LogicalExpression"
            },
            "type": "array"
          },
          "logicalOperator": {
            "description": "The logical operator to use between the fields and conditions.",
            "enum": [
              "OPERATOR_UNSPECIFIED",
              "AND",
              "OR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldComparison": {
        "description": "Field that needs to be compared.",
        "properties": {
          "boolValue": {
            "description": "Boolean value",
            "type": "boolean"
          },
          "comparator": {
            "description": "Comparator to use for comparing the field value.",
            "enum": [
              "COMPARATOR_UNSPECIFIED",
              "EQUALS",
              "NOT_EQUALS"
            ],
            "type": "string"
          },
          "intValue": {
            "description": "Integer value",
            "format": "int64",
            "type": "string"
          },
          "key": {
            "description": "Key of the field.",
            "type": "string"
          },
          "stringValue": {
            "description": "String value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RoleGrant": {
        "description": "This configuration defines all the Cloud IAM roles that needs to be granted to a particular Google Cloud resource for the selected principal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a 'grant' button to do the same on behalf of the user.",
        "properties": {
          "helperTextTemplate": {
            "description": "Template that UI can use to provide helper text to customers.",
            "type": "string"
          },
          "principal": {
            "description": "Prinicipal/Identity for whom the role need to assigned.",
            "enum": [
              "PRINCIPAL_UNSPECIFIED",
              "CONNECTOR_SA"
            ],
            "type": "string"
          },
          "resource": {
            "$ref": "#/$defs/Resource"
          },
          "roles": {
            "description": "List of roles that need to be granted.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": "Resource definition",
        "properties": {
          "pathTemplate": {
            "description": "Template to uniquely represent a Google Cloud resource in a format IAM expects This is a template that can have references to other values provided in the config variable template.",
            "type": "string"
          },
          "type": {
            "description": "Different types of resource supported.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "GCP_PROJECT",
              "GCP_RESOURCE",
              "GCP_SECRETMANAGER_SECRET",
              "GCP_SECRETMANAGER_SECRET_VERSION"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DestinationConfig": {
        "description": "Define the Connectors target endpoint.",
        "properties": {
          "destinations": {
            "description": "The destinations for the key.",
            "items": {
              "$ref": "#/$defs/Destination"
            },
            "type": "array"
          },
          "key": {
            "description": "The key is the destination identifier that is supported by the Connector.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Destination": {
        "properties": {
          "host": {
            "description": "For publicly routable host.",
            "type": "string"
          },
          "port": {
            "description": "The port is the target port number that is accepted by the destination.",
            "format": "int32",
            "type": "integer"
          },
          "serviceAttachment": {
            "deprecated": true,
            "description": "PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://connectors.googleapis.com//v1/{parent}/customConnectorVersions{?customConnectorVersionId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
