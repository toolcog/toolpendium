{
  "name": "connectors_projects_locations_connections_create",
  "description": "Creates a new Connection in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Parent resource of the Connection, of the form: `projects/*/locations/*`"
      },
      "connectionId": {
        "type": "string",
        "description": "Required. Identifier to assign to the Connection. Must be unique within scope of the parent resource."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Connection"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Connection": {
        "description": "Connection represents an instance of connector.",
        "properties": {
          "authConfig": {
            "$ref": "#/$defs/AuthConfig"
          },
          "configVariables": {
            "description": "Optional. Configuration for configuring the connection with an external system.",
            "items": {
              "$ref": "#/$defs/ConfigVariable"
            },
            "type": "array"
          },
          "connectionRevision": {
            "description": "Output only. Connection revision. This field is only updated when the connection is created or updated by User.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "connectorVersion": {
            "description": "Required. Connector version on which the connection is created. The format is: projects/*/locations/*/providers/*/connectors/*/versions/* Only global location is supported for ConnectorVersion resource.",
            "type": "string"
          },
          "connectorVersionInfraConfig": {
            "$ref": "#/$defs/ConnectorVersionInfraConfig"
          },
          "connectorVersionLaunchStage": {
            "description": "Output only. Flag to mark the version indicating the launch stage.",
            "enum": [
              "LAUNCH_STAGE_UNSPECIFIED",
              "PREVIEW",
              "GA",
              "DEPRECATED",
              "PRIVATE_PREVIEW"
            ],
            "readOnly": true,
            "type": "string"
          },
          "createTime": {
            "description": "Output only. Created time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Description of the resource.",
            "type": "string"
          },
          "destinationConfigs": {
            "description": "Optional. Configuration of the Connector's destination. Only accepted for Connectors that accepts user defined destination(s).",
            "items": {
              "$ref": "#/$defs/DestinationConfig"
            },
            "type": "array"
          },
          "envoyImageLocation": {
            "description": "Output only. GCR location where the envoy image is stored. formatted like: gcr.io/{bucketName}/{imageName}",
            "readOnly": true,
            "type": "string"
          },
          "eventingConfig": {
            "$ref": "#/$defs/EventingConfig"
          },
          "eventingEnablementType": {
            "description": "Optional. Eventing enablement type. Will be nil if eventing is not enabled.",
            "enum": [
              "EVENTING_ENABLEMENT_TYPE_UNSPECIFIED",
              "EVENTING_AND_CONNECTION",
              "ONLY_EVENTING"
            ],
            "type": "string"
          },
          "eventingRuntimeData": {
            "$ref": "#/$defs/EventingRuntimeData"
          },
          "imageLocation": {
            "description": "Output only. GCR location where the runtime image is stored. formatted like: gcr.io/{bucketName}/{imageName}",
            "readOnly": true,
            "type": "string"
          },
          "isTrustedTester": {
            "description": "Output only. Is trusted tester program enabled for the project.",
            "readOnly": true,
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
            "type": "object"
          },
          "lockConfig": {
            "$ref": "#/$defs/LockConfig"
          },
          "logConfig": {
            "$ref": "#/$defs/ConnectorsLogConfig"
          },
          "name": {
            "description": "Output only. Resource name of the Connection. Format: projects/{project}/locations/{location}/connections/{connection}",
            "readOnly": true,
            "type": "string"
          },
          "nodeConfig": {
            "$ref": "#/$defs/NodeConfig"
          },
          "serviceAccount": {
            "description": "Optional. Service account needed for runtime plane to access Google Cloud resources.",
            "type": "string"
          },
          "serviceDirectory": {
            "description": "Output only. The name of the Service Directory service name. Used for Private Harpoon to resolve the ILB address. e.g. \"projects/cloud-connectors-e2e-testing/locations/us-central1/namespaces/istio-system/services/istio-ingressgateway-connectors\"",
            "readOnly": true,
            "type": "string"
          },
          "sslConfig": {
            "$ref": "#/$defs/SslConfig"
          },
          "status": {
            "$ref": "#/$defs/ConnectionStatus"
          },
          "subscriptionType": {
            "description": "Output only. This subscription type enum states the subscription type of the project.",
            "enum": [
              "SUBSCRIPTION_TYPE_UNSPECIFIED",
              "PAY_G",
              "PAID"
            ],
            "readOnly": true,
            "type": "string"
          },
          "suspended": {
            "description": "Optional. Suspended indicates if a user has suspended a connection or not.",
            "type": "boolean"
          },
          "updateTime": {
            "description": "Output only. Updated time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthConfig": {
        "description": "AuthConfig defines details of a authentication type.",
        "properties": {
          "additionalVariables": {
            "description": "List containing additional auth configs.",
            "items": {
              "$ref": "#/$defs/ConfigVariable"
            },
            "type": "array"
          },
          "authKey": {
            "description": "Identifier key for auth config",
            "type": "string"
          },
          "authType": {
            "description": "The type of authentication configured.",
            "enum": [
              "AUTH_TYPE_UNSPECIFIED",
              "USER_PASSWORD",
              "OAUTH2_JWT_BEARER",
              "OAUTH2_CLIENT_CREDENTIALS",
              "SSH_PUBLIC_KEY",
              "OAUTH2_AUTH_CODE_FLOW",
              "GOOGLE_AUTHENTICATION"
            ],
            "type": "string"
          },
          "oauth2AuthCodeFlow": {
            "$ref": "#/$defs/Oauth2AuthCodeFlow"
          },
          "oauth2ClientCredentials": {
            "$ref": "#/$defs/Oauth2ClientCredentials"
          },
          "oauth2JwtBearer": {
            "$ref": "#/$defs/Oauth2JwtBearer"
          },
          "sshPublicKey": {
            "$ref": "#/$defs/SshPublicKey"
          },
          "userPassword": {
            "$ref": "#/$defs/UserPassword"
          }
        },
        "type": "object"
      },
      "ConfigVariable": {
        "description": "ConfigVariable represents a configuration variable present in a Connection. or AuthConfig.",
        "properties": {
          "boolValue": {
            "description": "Value is a bool.",
            "type": "boolean"
          },
          "encryptionKeyValue": {
            "$ref": "#/$defs/EncryptionKey"
          },
          "intValue": {
            "description": "Value is an integer",
            "format": "int64",
            "type": "string"
          },
          "key": {
            "description": "Key of the config variable.",
            "type": "string"
          },
          "secretValue": {
            "$ref": "#/$defs/Secret"
          },
          "stringValue": {
            "description": "Value is a string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionKey": {
        "description": "Encryption Key value.",
        "properties": {
          "kmsKeyName": {
            "description": "The [KMS key name] with which the content of the Operation is encrypted. The expected format: `projects/*/locations/*/keyRings/*/cryptoKeys/*`. Will be empty string if google managed.",
            "type": "string"
          },
          "type": {
            "description": "Type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "GOOGLE_MANAGED",
              "CUSTOMER_MANAGED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Secret": {
        "description": "Secret provides a reference to entries in Secret Manager.",
        "properties": {
          "secretVersion": {
            "description": "The resource name of the secret version in the format, format as: `projects/*/secrets/*/versions/*`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Oauth2AuthCodeFlow": {
        "description": "Parameters to support Oauth 2.0 Auth Code Grant Authentication. See https://www.rfc-editor.org/rfc/rfc6749#section-1.3.1 for more details.",
        "properties": {
          "authCode": {
            "description": "Authorization code to be exchanged for access and refresh tokens.",
            "type": "string"
          },
          "authUri": {
            "description": "Auth URL for Authorization Code Flow",
            "type": "string"
          },
          "clientId": {
            "description": "Client ID for user-provided OAuth app.",
            "type": "string"
          },
          "clientSecret": {
            "$ref": "#/$defs/Secret"
          },
          "enablePkce": {
            "description": "Whether to enable PKCE when the user performs the auth code flow.",
            "type": "boolean"
          },
          "pkceVerifier": {
            "description": "PKCE verifier to be used during the auth code exchange.",
            "type": "string"
          },
          "redirectUri": {
            "description": "Redirect URI to be provided during the auth code exchange.",
            "type": "string"
          },
          "scopes": {
            "description": "Scopes the connection will request when the user performs the auth code flow.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Oauth2ClientCredentials": {
        "description": "Parameters to support Oauth 2.0 Client Credentials Grant Authentication. See https://tools.ietf.org/html/rfc6749#section-1.3.4 for more details.",
        "properties": {
          "clientId": {
            "description": "The client identifier.",
            "type": "string"
          },
          "clientSecret": {
            "$ref": "#/$defs/Secret"
          }
        },
        "type": "object"
      },
      "Oauth2JwtBearer": {
        "description": "Parameters to support JSON Web Token (JWT) Profile for Oauth 2.0 Authorization Grant based authentication. See https://tools.ietf.org/html/rfc7523 for more details.",
        "properties": {
          "clientKey": {
            "$ref": "#/$defs/Secret"
          },
          "jwtClaims": {
            "$ref": "#/$defs/JwtClaims"
          }
        },
        "type": "object"
      },
      "JwtClaims": {
        "description": "JWT claims used for the jwt-bearer authorization grant.",
        "properties": {
          "audience": {
            "description": "Value for the \"aud\" claim.",
            "type": "string"
          },
          "issuer": {
            "description": "Value for the \"iss\" claim.",
            "type": "string"
          },
          "subject": {
            "description": "Value for the \"sub\" claim.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SshPublicKey": {
        "description": "Parameters to support Ssh public key Authentication.",
        "properties": {
          "certType": {
            "description": "Format of SSH Client cert.",
            "type": "string"
          },
          "sshClientCert": {
            "$ref": "#/$defs/Secret"
          },
          "sshClientCertPass": {
            "$ref": "#/$defs/Secret"
          },
          "username": {
            "description": "The user account used to authenticate.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserPassword": {
        "description": "Parameters to support Username and Password Authentication.",
        "properties": {
          "password": {
            "$ref": "#/$defs/Secret"
          },
          "username": {
            "description": "Username.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectorVersionInfraConfig": {
        "description": "This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version",
        "properties": {
          "connectionRatelimitWindowSeconds": {
            "description": "Output only. The window used for ratelimiting runtime requests to connections.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "deploymentModel": {
            "description": "Optional. Indicates whether connector is deployed on GKE/CloudRun",
            "enum": [
              "DEPLOYMENT_MODEL_UNSPECIFIED",
              "GKE_MST",
              "CLOUD_RUN_MST"
            ],
            "type": "string"
          },
          "hpaConfig": {
            "$ref": "#/$defs/HPAConfig"
          },
          "internalclientRatelimitThreshold": {
            "description": "Output only. Max QPS supported for internal requests originating from Connd.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "ratelimitThreshold": {
            "description": "Output only. Max QPS supported by the connector version before throttling of requests.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "resourceLimits": {
            "$ref": "#/$defs/ResourceLimits"
          },
          "resourceRequests": {
            "$ref": "#/$defs/ResourceRequests"
          },
          "sharedDeployment": {
            "description": "Output only. The name of shared connector deployment.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "HPAConfig": {
        "description": "Autoscaling config for connector deployment system metrics.",
        "properties": {
          "cpuUtilizationThreshold": {
            "description": "Output only. Percent CPU utilization where HPA triggers autoscaling.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          },
          "memoryUtilizationThreshold": {
            "description": "Output only. Percent Memory utilization where HPA triggers autoscaling.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceLimits": {
        "description": "Resource limits defined for connection pods of a given connector type.",
        "properties": {
          "cpu": {
            "description": "Output only. CPU limit.",
            "readOnly": true,
            "type": "string"
          },
          "memory": {
            "description": "Output only. Memory limit.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceRequests": {
        "description": "Resource requests defined for connection pods of a given connector type.",
        "properties": {
          "cpu": {
            "description": "Output only. CPU request.",
            "readOnly": true,
            "type": "string"
          },
          "memory": {
            "description": "Output only. Memory request.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DestinationConfig": {
        "description": "Define the Connectors target endpoint.",
        "properties": {
          "destinations": {
            "description": "The destinations for the key.",
            "items": {
              "$ref": "#/$defs/Destination"
            },
            "type": "array"
          },
          "key": {
            "description": "The key is the destination identifier that is supported by the Connector.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Destination": {
        "properties": {
          "host": {
            "description": "For publicly routable host.",
            "type": "string"
          },
          "port": {
            "description": "The port is the target port number that is accepted by the destination.",
            "format": "int32",
            "type": "integer"
          },
          "serviceAttachment": {
            "deprecated": true,
            "description": "PSC service attachments. Format: projects/*/regions/*/serviceAttachments/*",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventingConfig": {
        "description": "Eventing Configuration of a connection",
        "properties": {
          "additionalVariables": {
            "description": "Additional eventing related field values",
            "items": {
              "$ref": "#/$defs/ConfigVariable"
            },
            "type": "array"
          },
          "authConfig": {
            "$ref": "#/$defs/AuthConfig"
          },
          "deadLetterConfig": {
            "$ref": "#/$defs/DeadLetterConfig"
          },
          "enrichmentEnabled": {
            "description": "Enrichment Enabled.",
            "type": "boolean"
          },
          "eventsListenerIngressEndpoint": {
            "description": "Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.",
            "type": "string"
          },
          "listenerAuthConfig": {
            "$ref": "#/$defs/AuthConfig"
          },
          "privateConnectivityEnabled": {
            "description": "Optional. Private Connectivity Enabled.",
            "type": "boolean"
          },
          "proxyDestinationConfig": {
            "$ref": "#/$defs/DestinationConfig"
          },
          "registrationDestinationConfig": {
            "$ref": "#/$defs/DestinationConfig"
          },
          "triggerConfigVariables": {
            "description": "Optional. Additional eventing related field values",
            "items": {
              "$ref": "#/$defs/ConfigVariable"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DeadLetterConfig": {
        "description": "Dead Letter configuration details provided by the user.",
        "properties": {
          "projectId": {
            "description": "Optional. Project which has the topic given.",
            "type": "string"
          },
          "topic": {
            "description": "Optional. Topic to push events which couldn't be processed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EventingRuntimeData": {
        "description": "Eventing runtime data has the details related to eventing managed by the system.",
        "properties": {
          "eventsListenerEndpoint": {
            "description": "Output only. Events listener endpoint. The value will populated after provisioning the events listener.",
            "readOnly": true,
            "type": "string"
          },
          "eventsListenerPscSa": {
            "description": "Output only. Events listener PSC Service attachment. The value will be populated after provisioning the events listener with private connectivity enabled.",
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/EventingStatus"
          }
        },
        "type": "object"
      },
      "EventingStatus": {
        "description": "EventingStatus indicates the state of eventing.",
        "properties": {
          "description": {
            "description": "Output only. Description of error if State is set to \"ERROR\".",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "ERROR",
              "INGRESS_ENDPOINT_REQUIRED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "LockConfig": {
        "description": "Determines whether or no a connection is locked. If locked, a reason must be specified.",
        "properties": {
          "locked": {
            "description": "Indicates whether or not the connection is locked.",
            "type": "boolean"
          },
          "reason": {
            "description": "Describes why a connection is locked.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ConnectorsLogConfig": {
        "description": "Log configuration for the connection.",
        "properties": {
          "enabled": {
            "description": "Enabled represents whether logging is enabled or not for a connection.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NodeConfig": {
        "description": "Node configuration for the connection.",
        "properties": {
          "maxNodeCount": {
            "description": "Maximum number of nodes in the runtime nodes.",
            "format": "int32",
            "type": "integer"
          },
          "minNodeCount": {
            "description": "Minimum number of nodes in the runtime nodes.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SslConfig": {
        "description": "SSL Configuration of a connection",
        "properties": {
          "additionalVariables": {
            "description": "Additional SSL related field values",
            "items": {
              "$ref": "#/$defs/ConfigVariable"
            },
            "type": "array"
          },
          "clientCertType": {
            "description": "Type of Client Cert (PEM/JKS/.. etc.)",
            "enum": [
              "CERT_TYPE_UNSPECIFIED",
              "PEM"
            ],
            "type": "string"
          },
          "clientCertificate": {
            "$ref": "#/$defs/Secret"
          },
          "clientPrivateKey": {
            "$ref": "#/$defs/Secret"
          },
          "clientPrivateKeyPass": {
            "$ref": "#/$defs/Secret"
          },
          "privateServerCertificate": {
            "$ref": "#/$defs/Secret"
          },
          "serverCertType": {
            "description": "Type of Server Cert (PEM/JKS/.. etc.)",
            "enum": [
              "CERT_TYPE_UNSPECIFIED",
              "PEM"
            ],
            "type": "string"
          },
          "trustModel": {
            "description": "Trust Model of the SSL connection",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "INSECURE"
            ],
            "type": "string"
          },
          "type": {
            "description": "Controls the ssl type for the given connector version.",
            "enum": [
              "SSL_TYPE_UNSPECIFIED",
              "TLS",
              "MTLS"
            ],
            "type": "string"
          },
          "useSsl": {
            "description": "Bool for enabling SSL",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ConnectionStatus": {
        "description": "ConnectionStatus indicates the state of the connection.",
        "properties": {
          "description": {
            "description": "Description.",
            "type": "string"
          },
          "state": {
            "description": "State.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "INACTIVE",
              "DELETING",
              "UPDATING",
              "ERROR",
              "AUTHORIZATION_REQUIRED"
            ],
            "type": "string"
          },
          "status": {
            "description": "Status provides detailed information for the state.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://connectors.googleapis.com//v1/{parent}/connections{?connectionId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
