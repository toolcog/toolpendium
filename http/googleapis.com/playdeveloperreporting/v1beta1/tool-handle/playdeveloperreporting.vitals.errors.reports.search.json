{
  "name": "playdeveloperreporting_vitals_errors_reports_search",
  "description": "Searches all error reports received for an app.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Parent resource of the reports, indicating the application for which they were received. Format: apps/{app}"
      },
      "filter": {
        "type": "string",
        "description": "A selection predicate to retrieve only a subset of the reports. For filtering basics, please check [AIP-160](https://google.aip.dev/160). ** Supported field names:** * `apiLevel`: Matches error reports that occurred in the requested Android versions (specified as the numeric API level) only. Example: `apiLevel = 28 OR apiLevel = 29`. * `versionCode`: Matches error reports that occurred in the requested app version codes only. Example: `versionCode = 123 OR versionCode = 456`. * `deviceModel`: Matches error issues that occurred in the requested devices. Example: `deviceModel = \"google/walleye\" OR deviceModel = \"google/marlin\"`. * `deviceBrand`: Matches error issues that occurred in the requested device brands. Example: `deviceBrand = \"Google\". * `deviceType`: Matches error reports that occurred in the requested device types. Example: `deviceType = \"PHONE\"`. * `errorIssueType`: Matches error reports of the requested types only. Valid candidates: `JAVA_CRASH`, `NATIVE_CRASH`, `ANR`. Example: `errorIssueType = JAVA_CRASH OR errorIssueType = NATIVE_CRASH`. * `errorIssueId`: Matches error reports belonging to the requested error issue ids only. Example: `errorIssueId = 1234 OR errorIssueId = 4567`. * `appProcessState`: Matches error reports on the process state of an app, indicating whether an app runs in the foreground (user-visible) or background. Valid candidates: `FOREGROUND`, `BACKGROUND`. Example: `appProcessState = FOREGROUND`. * `isUserPerceived`: Matches error reports that are user-perceived. It is not accompanied by any operators. Example: `isUserPerceived`. ** Supported operators:** * Comparison operators: The only supported comparison operator is equality. The filtered field must appear on the left hand side of the comparison. * Logical Operators: Logical operators `AND` and `OR` can be used to build complex filters following a conjunctive normal form (CNF), i.e., conjunctions of disjunctions. The `OR` operator takes precedence over `AND` so the use of parenthesis is not necessary when building CNF. The `OR` operator is only supported to build disjunctions that apply to the same field, e.g., `versionCode = 123 OR versionCode = ANR`. The filter expression `versionCode = 123 OR errorIssueType = ANR` is not valid. ** Examples ** Some valid filtering expressions: * `versionCode = 123 AND errorIssueType = ANR` * `versionCode = 123 AND errorIssueType = OR errorIssueType = CRASH` * `versionCode = 123 AND (errorIssueType = OR errorIssueType = CRASH)`"
      },
      "interval.endTime.day": {
        "type": "integer",
        "description": "Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day."
      },
      "interval.endTime.hours": {
        "type": "integer",
        "description": "Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time."
      },
      "interval.endTime.minutes": {
        "type": "integer",
        "description": "Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0."
      },
      "interval.endTime.month": {
        "type": "integer",
        "description": "Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month."
      },
      "interval.endTime.nanos": {
        "type": "integer",
        "description": "Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0."
      },
      "interval.endTime.seconds": {
        "type": "integer",
        "description": "Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds."
      },
      "interval.endTime.timeZone.id": {
        "type": "string",
        "description": "IANA Time Zone Database time zone, e.g. \"America/New_York\"."
      },
      "interval.endTime.timeZone.version": {
        "type": "string",
        "description": "Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
      },
      "interval.endTime.utcOffset": {
        "type": "string",
        "description": "UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }."
      },
      "interval.endTime.year": {
        "type": "integer",
        "description": "Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."
      },
      "interval.startTime.day": {
        "type": "integer",
        "description": "Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day."
      },
      "interval.startTime.hours": {
        "type": "integer",
        "description": "Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time."
      },
      "interval.startTime.minutes": {
        "type": "integer",
        "description": "Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0."
      },
      "interval.startTime.month": {
        "type": "integer",
        "description": "Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month."
      },
      "interval.startTime.nanos": {
        "type": "integer",
        "description": "Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0."
      },
      "interval.startTime.seconds": {
        "type": "integer",
        "description": "Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds."
      },
      "interval.startTime.timeZone.id": {
        "type": "string",
        "description": "IANA Time Zone Database time zone, e.g. \"America/New_York\"."
      },
      "interval.startTime.timeZone.version": {
        "type": "string",
        "description": "Optional. IANA Time Zone Database version number, e.g. \"2019a\"."
      },
      "interval.startTime.utcOffset": {
        "type": "string",
        "description": "UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }."
      },
      "interval.startTime.year": {
        "type": "integer",
        "description": "Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year."
      },
      "pageSize": {
        "type": "integer",
        "description": "The maximum number of reports to return. The service may return fewer than this value. If unspecified, at most 50 reports will be returned. The maximum value is 100; values above 100 will be coerced to 100."
      },
      "pageToken": {
        "type": "string",
        "description": "A page token, received from a previous `SearchErrorReports` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `SearchErrorReports` must match the call that provided the page token."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "parent"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://playdeveloperreporting.googleapis.com//v1beta1/{parent}/errorReports:search{?filter,interval.endTime.day,interval.endTime.hours,interval.endTime.minutes,interval.endTime.month,interval.endTime.nanos,interval.endTime.seconds,interval.endTime.timeZone.id,interval.endTime.timeZone.version,interval.endTime.utcOffset,interval.endTime.year,interval.startTime.day,interval.startTime.hours,interval.startTime.minutes,interval.startTime.month,interval.startTime.nanos,interval.startTime.seconds,interval.startTime.timeZone.id,interval.startTime.timeZone.version,interval.startTime.utcOffset,interval.startTime.year,pageSize,pageToken,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response with a paginated list of error reports matching the search query.",
        "**Key properties:**",
        {
          "$ul": [
            "**errorReports**: Error reports that were found.",
            "**nextPageToken**: Page token to fetch the next page of reports."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
