{
  "name": "youtube_commentThreads_list",
  "description": "Retrieves a list of resources, possibly filtered.",
  "parameters": {
    "type": "object",
    "properties": {
      "part": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "The *part* parameter specifies a comma-separated list of one or more commentThread resource properties that the API response will include."
      },
      "allThreadsRelatedToChannelId": {
        "type": "string",
        "description": "Returns the comment threads of all videos of the channel and the channel comments as well."
      },
      "channelId": {
        "type": "string",
        "description": "Returns the comment threads for all the channel comments (ie does not include comments left on videos)."
      },
      "id": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Returns the comment threads with the given IDs for Stubby or Apiary."
      },
      "maxResults": {
        "maximum": 100,
        "minimum": 1,
        "type": "integer",
        "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set."
      },
      "moderationStatus": {
        "enum": [
          "published",
          "heldForReview",
          "likelySpam",
          "rejected"
        ],
        "type": "string",
        "description": "Limits the returned comment threads to those with the specified moderation status. Not compatible with the 'id' filter. Valid values: published, heldForReview, likelySpam."
      },
      "order": {
        "enum": [
          "orderUnspecified",
          "time",
          "relevance"
        ],
        "type": "string"
      },
      "pageToken": {
        "type": "string",
        "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved."
      },
      "searchTerms": {
        "type": "string",
        "description": "Limits the returned comment threads to those matching the specified key words. Not compatible with the 'id' filter."
      },
      "textFormat": {
        "enum": [
          "textFormatUnspecified",
          "html",
          "plainText"
        ],
        "type": "string",
        "description": "The requested text format for the returned comments."
      },
      "videoId": {
        "type": "string",
        "description": "Returns the comment threads of the specified video."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "part"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://youtube.googleapis.com//youtube/v3/commentThreads{?part,allThreadsRelatedToChannelId,channelId,id,maxResults,moderationStatus,order,pageToken,searchTerms,textFormat,videoId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**etag**: Etag of this resource.",
            "**eventId**: Serialized EventId of the request which produced this response.",
            "**items**: A list of comment threads that match the request criteria.",
            "**kind**: Identifies what kind of resource this is. Value: the fixed string \"youtube#commentThreadListResponse\". (default: youtube#commentThreadListResponse)",
            "**nextPageToken**: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
            [
              "**pageInfo**: Paging details for lists of resources, including total number of items available and number of resources returned in a single page.",
              {
                "$ul": [
                  "**resultsPerPage**: The number of results included in the API response.",
                  "**totalResults**: The total number of results in the result set."
                ]
              }
            ],
            "**tokenPagination**: Stub token pagination template to suppress results.",
            "**visitorId**: The visitorId identifies the visitor."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
