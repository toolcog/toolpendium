{
  "name": "youtube_videos_list",
  "description": "Retrieves a list of resources, possibly filtered.",
  "parameters": {
    "type": "object",
    "properties": {
      "part": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "The *part* parameter specifies a comma-separated list of one or more video resource properties that the API response will include. If the parameter identifies a property that contains child properties, the child properties will be included in the response. For example, in a video resource, the snippet property contains the channelId, title, description, tags, and categoryId properties. As such, if you set *part=snippet*, the API response will contain all of those properties."
      },
      "chart": {
        "enum": [
          "chartUnspecified",
          "mostPopular"
        ],
        "type": "string",
        "description": "Return the videos that are in the specified chart."
      },
      "hl": {
        "type": "string",
        "description": "Stands for \"host language\". Specifies the localization language of the metadata to be filled into snippet.localized. The field is filled with the default metadata if there is no localization in the specified language. The parameter value must be a language code included in the list returned by the i18nLanguages.list method (e.g. en_US, es_MX)."
      },
      "id": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "Return videos with the given ids."
      },
      "locale": {
        "type": "string"
      },
      "maxHeight": {
        "maximum": 8192,
        "minimum": 72,
        "type": "integer"
      },
      "maxResults": {
        "maximum": 50,
        "minimum": 1,
        "type": "integer",
        "description": "The *maxResults* parameter specifies the maximum number of items that should be returned in the result set. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter."
      },
      "maxWidth": {
        "maximum": 8192,
        "minimum": 72,
        "type": "integer",
        "description": "Return the player with maximum height specified in"
      },
      "myRating": {
        "enum": [
          "none",
          "like",
          "dislike"
        ],
        "type": "string",
        "description": "Return videos liked/disliked by the authenticated user. Does not support RateType.RATED_TYPE_NONE."
      },
      "onBehalfOfContentOwner": {
        "type": "string",
        "description": "*Note:* This parameter is intended exclusively for YouTube content partners. The *onBehalfOfContentOwner* parameter indicates that the request's authorization credentials identify a YouTube CMS user who is acting on behalf of the content owner specified in the parameter value. This parameter is intended for YouTube content partners that own and manage many different YouTube channels. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The CMS account that the user authenticates with must be linked to the specified YouTube content owner."
      },
      "pageToken": {
        "type": "string",
        "description": "The *pageToken* parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved. *Note:* This parameter is supported for use in conjunction with the myRating and chart parameters, but it is not supported for use in conjunction with the id parameter."
      },
      "regionCode": {
        "type": "string",
        "description": "Use a chart that is specific to the specified region"
      },
      "videoCategoryId": {
        "type": "string",
        "description": "Use chart that is specific to the specified video category"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "part"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://youtube.googleapis.com//youtube/v3/videos{?part,chart,hl,id,locale,maxHeight,maxResults,maxWidth,myRating,onBehalfOfContentOwner,pageToken,regionCode,videoCategoryId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**etag**: Etag of this resource.",
            "**eventId**: Serialized EventId of the request which produced this response.",
            "**items**",
            "**kind**: Identifies what kind of resource this is. Value: the fixed string \"youtube#videoListResponse\". (default: youtube#videoListResponse)",
            "**nextPageToken**: The token that can be used as the value of the pageToken parameter to retrieve the next page in the result set.",
            [
              "**pageInfo**: Paging details for lists of resources, including total number of items available and number of resources returned in a single page.",
              {
                "$ul": [
                  "**resultsPerPage**: The number of results included in the API response.",
                  "**totalResults**: The total number of results in the result set."
                ]
              }
            ],
            "**prevPageToken**: The token that can be used as the value of the pageToken parameter to retrieve the previous page in the result set.",
            "**tokenPagination**: Stub token pagination template to suppress results.",
            "**visitorId**: The visitorId identifies the visitor."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
