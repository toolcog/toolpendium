{
  "name": "androidpublisher_systemapks_variants_get",
  "description": "Returns a previously created system APK variant.",
  "parameters": {
    "type": "object",
    "properties": {
      "packageName": {
        "type": "string",
        "description": "Package name of the app."
      },
      "versionCode": {
        "type": "string",
        "description": "The version code of the App Bundle."
      },
      "variantId": {
        "type": "integer",
        "description": "The ID of a previously created system APK variant."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "packageName",
      "versionCode",
      "variantId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://androidpublisher.googleapis.com//androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "APK that is suitable for inclusion in a system image. The resource of SystemApksService.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**deviceSpec**: The device spec used to generate a system APK.",
              {
                "$ul": [
                  "**screenDensity**: Screen dpi.",
                  "**supportedAbis**: Supported ABI architectures in the order of preference. The values should be the string as reported by the platform, e.g. \"armeabi-v7a\", \"x86_64\".",
                  "**supportedLocales**: All installed locales represented as BCP-47 strings, e.g. \"en-US\"."
                ]
              }
            ],
            [
              "**options**: Options for system APKs.",
              {
                "$ul": [
                  "**rotated**: Whether to use the rotated key for signing the system APK.",
                  "**uncompressedDexFiles**: Whether system APK was generated with uncompressed dex files.",
                  "**uncompressedNativeLibraries**: Whether system APK was generated with uncompressed native libraries."
                ]
              }
            ],
            "**variantId**: Output only. The ID of a previously created system APK variant."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
