{
  "name": "deploymentmanager_deployments_insert",
  "description": "Creates a deployment and all of the resources described by the deployment manifest.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "The project ID for this request."
      },
      "createPolicy": {
        "enum": [
          "CREATE_OR_ACQUIRE",
          "ACQUIRE",
          "CREATE"
        ],
        "type": "string",
        "description": "Sets the policy to use for creating new resources."
      },
      "preview": {
        "type": "boolean",
        "description": "If set to true, creates a deployment and creates \"shell\" resources but does not actually instantiate these resources. This allows you to preview what your deployment looks like. After previewing a deployment, you can deploy your resources by making a request with the `update()` method or you can use the `cancelPreview()` method to cancel the preview altogether. Note that the deployment will still exist after you cancel the preview and you must separately delete this deployment if you want to remove it."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Deployment"
      }
    },
    "required": [
      "project"
    ],
    "$defs": {
      "Deployment": {
        "properties": {
          "description": {
            "description": "An optional user-provided description of the deployment.",
            "type": "string"
          },
          "fingerprint": {
            "description": "Provides a fingerprint to use in requests to modify a deployment, such as `update()`, `stop()`, and `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided with `update()`, `stop()`, and `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time. The fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a `get()` request to a deployment.",
            "format": "byte",
            "type": "string"
          },
          "id": {
            "format": "uint64",
            "type": "string"
          },
          "insertTime": {
            "description": "Output only. Creation timestamp in RFC3339 text format.",
            "type": "string"
          },
          "labels": {
            "description": "Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.",
            "items": {
              "$ref": "#/$defs/DeploymentLabelEntry"
            },
            "type": "array"
          },
          "manifest": {
            "description": "Output only. URL of the manifest representing the last manifest that was successfully deployed. If no manifest has been successfully deployed, this field will be absent.",
            "type": "string"
          },
          "name": {
            "description": "Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.",
            "type": "string"
          },
          "operation": {
            "$ref": "#/$defs/Operation"
          },
          "selfLink": {
            "description": "Output only. Server defined URL for the resource.",
            "type": "string"
          },
          "target": {
            "$ref": "#/$defs/TargetConfiguration"
          },
          "update": {
            "$ref": "#/$defs/DeploymentUpdate"
          },
          "updateTime": {
            "description": "Output only. Update timestamp in RFC3339 text format.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentLabelEntry": {
        "description": "Label object for Deployments",
        "properties": {
          "key": {
            "description": "Key of the label",
            "type": "string"
          },
          "value": {
            "description": "Value of the label",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.",
        "properties": {
          "clientOperationId": {
            "description": "[Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.",
            "type": "string"
          },
          "creationTimestamp": {
            "description": "[Deprecated] This field is deprecated.",
            "type": "string"
          },
          "description": {
            "description": "[Output Only] A textual description of the operation, which is set when the operation is created.",
            "type": "string"
          },
          "endTime": {
            "description": "[Output Only] The time that this operation was completed. This value is in RFC3339 text format.",
            "type": "string"
          },
          "error": {
            "description": "[Output Only] If errors are generated during processing of the operation, this field will be populated.",
            "properties": {
              "errors": {
                "description": "[Output Only] The array of errors encountered while processing this operation.",
                "items": {
                  "properties": {
                    "code": {
                      "description": "[Output Only] The error type identifier for this error.",
                      "type": "string"
                    },
                    "location": {
                      "description": "[Output Only] Indicates the field in the request that caused the error. This property is optional.",
                      "type": "string"
                    },
                    "message": {
                      "description": "[Output Only] An optional, human-readable error message.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "httpErrorMessage": {
            "description": "[Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.",
            "type": "string"
          },
          "httpErrorStatusCode": {
            "description": "[Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.",
            "format": "int32",
            "type": "integer"
          },
          "id": {
            "description": "[Output Only] The unique identifier for the operation. This identifier is defined by the server.",
            "format": "uint64",
            "type": "string"
          },
          "insertTime": {
            "description": "[Output Only] The time that this operation was requested. This value is in RFC3339 text format.",
            "type": "string"
          },
          "instancesBulkInsertOperationMetadata": {
            "$ref": "#/$defs/InstancesBulkInsertOperationMetadata"
          },
          "kind": {
            "default": "compute#operation",
            "description": "[Output Only] Type of the resource. Always `compute#operation` for Operation resources.",
            "type": "string"
          },
          "name": {
            "description": "[Output Only] Name of the operation.",
            "type": "string"
          },
          "operationGroupId": {
            "description": "[Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.",
            "type": "string"
          },
          "operationType": {
            "description": "[Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.",
            "type": "string"
          },
          "progress": {
            "description": "[Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.",
            "format": "int32",
            "type": "integer"
          },
          "region": {
            "description": "[Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.",
            "type": "string"
          },
          "selfLink": {
            "description": "[Output Only] Server-defined URL for the resource.",
            "type": "string"
          },
          "setCommonInstanceMetadataOperationMetadata": {
            "$ref": "#/$defs/SetCommonInstanceMetadataOperationMetadata"
          },
          "startTime": {
            "description": "[Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.",
            "type": "string"
          },
          "status": {
            "description": "[Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.",
            "enum": [
              "PENDING",
              "RUNNING",
              "DONE"
            ],
            "type": "string"
          },
          "statusMessage": {
            "description": "[Output Only] An optional textual description of the current status of the operation.",
            "type": "string"
          },
          "targetId": {
            "description": "[Output Only] The unique target ID, which identifies a specific incarnation of the target resource.",
            "format": "uint64",
            "type": "string"
          },
          "targetLink": {
            "description": "[Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.",
            "type": "string"
          },
          "user": {
            "description": "[Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`.",
            "type": "string"
          },
          "warnings": {
            "description": "[Output Only] If warning messages are generated during processing of the operation, this field will be populated.",
            "items": {
              "properties": {
                "code": {
                  "description": "[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.",
                  "enum": [
                    "DEPRECATED_RESOURCE_USED",
                    "NO_RESULTS_ON_PAGE",
                    "UNREACHABLE",
                    "NEXT_HOP_ADDRESS_NOT_ASSIGNED",
                    "NEXT_HOP_INSTANCE_NOT_FOUND",
                    "NEXT_HOP_INSTANCE_NOT_ON_NETWORK",
                    "NEXT_HOP_CANNOT_IP_FORWARD",
                    "NEXT_HOP_NOT_RUNNING",
                    "INJECTED_KERNELS_DEPRECATED",
                    "REQUIRED_TOS_AGREEMENT",
                    "DISK_SIZE_LARGER_THAN_IMAGE_SIZE",
                    "RESOURCE_NOT_DELETED",
                    "SINGLE_INSTANCE_PROPERTY_TEMPLATE",
                    "NOT_CRITICAL_ERROR",
                    "CLEANUP_FAILED",
                    "FIELD_VALUE_OVERRIDEN",
                    "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING",
                    "MISSING_TYPE_DEPENDENCY",
                    "EXTERNAL_API_WARNING",
                    "SCHEMA_VALIDATION_IGNORED",
                    "UNDECLARED_PROPERTIES",
                    "EXPERIMENTAL_TYPE_USED",
                    "DEPRECATED_TYPE_USED",
                    "PARTIAL_SUCCESS",
                    "LARGE_DEPLOYMENT_WARNING",
                    "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE",
                    "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB",
                    "LIST_OVERHEAD_QUOTA_EXCEED"
                  ],
                  "type": "string",
                  "x-enumDeprecated": [
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    true,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false,
                    false
                  ]
                },
                "data": {
                  "description": "[Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" } ",
                  "items": {
                    "properties": {
                      "key": {
                        "description": "[Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).",
                        "type": "string"
                      },
                      "value": {
                        "description": "[Output Only] A warning data value corresponding to the key.",
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "type": "array"
                },
                "message": {
                  "description": "[Output Only] A human-readable description of the warning code.",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "zone": {
            "description": "[Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InstancesBulkInsertOperationMetadata": {
        "properties": {
          "perLocationStatus": {
            "additionalProperties": {
              "$ref": "#/$defs/BulkInsertOperationStatus"
            },
            "description": "Status information per location (location name is key). Example key: zones/us-central1-a",
            "type": "object"
          }
        },
        "type": "object"
      },
      "BulkInsertOperationStatus": {
        "properties": {
          "createdVmCount": {
            "description": "[Output Only] Count of VMs successfully created so far.",
            "format": "int32",
            "type": "integer"
          },
          "deletedVmCount": {
            "description": "[Output Only] Count of VMs that got deleted during rollback.",
            "format": "int32",
            "type": "integer"
          },
          "failedToCreateVmCount": {
            "description": "[Output Only] Count of VMs that started creating but encountered an error.",
            "format": "int32",
            "type": "integer"
          },
          "status": {
            "description": "[Output Only] Creation status of BulkInsert operation - information if the flow is rolling forward or rolling back.",
            "enum": [
              "STATUS_UNSPECIFIED",
              "CREATING",
              "ROLLING_BACK",
              "DONE"
            ],
            "type": "string"
          },
          "targetVmCount": {
            "description": "[Output Only] Count of VMs originally planned to be created.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SetCommonInstanceMetadataOperationMetadata": {
        "properties": {
          "clientOperationId": {
            "description": "[Output Only] The client operation id.",
            "type": "string"
          },
          "perLocationOperations": {
            "additionalProperties": {
              "$ref": "#/$defs/SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo"
            },
            "description": "[Output Only] Status information per location (location name is key). Example key: zones/us-central1-a",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo": {
        "properties": {
          "error": {
            "$ref": "#/$defs/Status"
          },
          "state": {
            "description": "[Output Only] Status of the action, which can be one of the following: `PROPAGATING`, `PROPAGATED`, `ABANDONED`, `FAILED`, or `DONE`.",
            "enum": [
              "UNSPECIFIED",
              "PROPAGATING",
              "PROPAGATED",
              "ABANDONED",
              "FAILED",
              "DONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TargetConfiguration": {
        "properties": {
          "config": {
            "$ref": "#/$defs/ConfigFile"
          },
          "imports": {
            "description": "Specifies any files to import for this configuration. This can be used to import templates or other files. For example, you might import a text file in order to use the file in a template.",
            "items": {
              "$ref": "#/$defs/ImportFile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ConfigFile": {
        "properties": {
          "content": {
            "description": "The contents of the file.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImportFile": {
        "properties": {
          "content": {
            "description": "The contents of the file.",
            "type": "string"
          },
          "name": {
            "description": "The name of the file.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentUpdate": {
        "properties": {
          "description": {
            "description": "Output only. An optional user-provided description of the deployment after the current update has been applied.",
            "type": "string"
          },
          "labels": {
            "description": "Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.",
            "items": {
              "$ref": "#/$defs/DeploymentUpdateLabelEntry"
            },
            "type": "array"
          },
          "manifest": {
            "description": "Output only. URL of the manifest representing the update configuration of this deployment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeploymentUpdateLabelEntry": {
        "description": "Label object for DeploymentUpdate",
        "properties": {
          "key": {
            "description": "Key of the label",
            "type": "string"
          },
          "value": {
            "description": "Value of the label",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://deploymentmanager.googleapis.com//deploymentmanager/v2beta/projects/{project}/global/deployments{?createPolicy,preview,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.",
        "**Key properties:**",
        {
          "$ul": [
            "**clientOperationId**: [Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.",
            "**creationTimestamp**: [Deprecated] This field is deprecated.",
            "**description**: [Output Only] A textual description of the operation, which is set when the operation is created.",
            "**endTime**: [Output Only] The time that this operation was completed. This value is in RFC3339 text format.",
            [
              "**error**: [Output Only] If errors are generated during processing of the operation, this field will be populated.",
              {
                "$ul": [
                  "**errors**: [Output Only] The array of errors encountered while processing this operation."
                ]
              }
            ],
            "**httpErrorMessage**: [Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.",
            "**httpErrorStatusCode**: [Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.",
            "**id**: [Output Only] The unique identifier for the operation. This identifier is defined by the server.",
            "**insertTime**: [Output Only] The time that this operation was requested. This value is in RFC3339 text format.",
            [
              "**instancesBulkInsertOperationMetadata**",
              {
                "$ul": [
                  "**perLocationStatus**: Status information per location (location name is key). Example key: zones/us-central1-a"
                ]
              }
            ],
            "**kind**: [Output Only] Type of the resource. Always `compute#operation` for Operation resources. (default: compute#operation)",
            "**name**: [Output Only] Name of the operation.",
            "**operationGroupId**: [Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.",
            "**operationType**: [Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.",
            "**progress**: [Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.",
            "**region**: [Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.",
            "**selfLink**: [Output Only] Server-defined URL for the resource.",
            [
              "**setCommonInstanceMetadataOperationMetadata**",
              {
                "$ul": [
                  "**clientOperationId**: [Output Only] The client operation id.",
                  "**perLocationOperations**: [Output Only] Status information per location (location name is key). Example key: zones/us-central1-a"
                ]
              }
            ],
            "**startTime**: [Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.",
            "**status**: [Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.",
            "**statusMessage**: [Output Only] An optional textual description of the current status of the operation.",
            "**targetId**: [Output Only] The unique target ID, which identifies a specific incarnation of the target resource.",
            "**targetLink**: [Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.",
            "**user**: [Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`.",
            "**warnings**: [Output Only] If warning messages are generated during processing of the operation, this field will be populated.",
            "**zone**: [Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
