{
  "name": "memcache_projects_locations_instances_create",
  "description": "Creates a new Instance in a given location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the instance location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region"
      },
      "instanceId": {
        "type": "string",
        "description": "Required. The logical name of the Memcached instance in the user project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-40 characters. * Must end with a number or a letter. * Must be unique within the user project / location. If any of the above are not met, the API raises an invalid argument error."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Instance"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Instance": {
        "description": "A Memorystore for Memcached instance",
        "properties": {
          "authorizedNetwork": {
            "description": "The full name of the Google Compute Engine [network](https://cloud.google.com/vpc/docs/vpc) to which the instance is connected. If left unspecified, the `default` network will be used.",
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The time the instance was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "discoveryEndpoint": {
            "description": "Output only. Endpoint for the Discovery API.",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "User provided name for the instance, which is only used for display purposes. Cannot be more than 80 characters.",
            "type": "string"
          },
          "instanceMessages": {
            "description": "List of messages that describe the current state of the Memcached instance.",
            "items": {
              "$ref": "#/$defs/InstanceMessage"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
            "type": "object"
          },
          "maintenancePolicy": {
            "$ref": "#/$defs/GoogleCloudMemcacheV1beta2MaintenancePolicy"
          },
          "maintenanceSchedule": {
            "$ref": "#/$defs/MaintenanceSchedule"
          },
          "memcacheFullVersion": {
            "description": "Output only. The full version of memcached server running on this instance. System automatically determines the full memcached version for an instance based on the input MemcacheVersion. The full version format will be \"memcached-1.5.16\".",
            "readOnly": true,
            "type": "string"
          },
          "memcacheNodes": {
            "description": "Output only. List of Memcached nodes. Refer to Node message for more details.",
            "items": {
              "$ref": "#/$defs/Node"
            },
            "readOnly": true,
            "type": "array"
          },
          "memcacheVersion": {
            "description": "The major version of Memcached software. If not provided, latest supported version will be used. Currently the latest supported major version is `MEMCACHE_1_5`. The minor version will be automatically determined by our system based on the latest supported minor version.",
            "enum": [
              "MEMCACHE_VERSION_UNSPECIFIED",
              "MEMCACHE_1_5",
              "MEMCACHE_1_6_15"
            ],
            "type": "string"
          },
          "name": {
            "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/instances/{instance_id}` Note: Memcached instances are managed and addressed at the regional level so `location_id` here refers to a Google Cloud region; however, users may choose which zones Memcached nodes should be provisioned in within an instance. Refer to zones field for more details.",
            "type": "string"
          },
          "nodeConfig": {
            "$ref": "#/$defs/NodeConfig"
          },
          "nodeCount": {
            "description": "Required. Number of nodes in the Memcached instance.",
            "format": "int32",
            "type": "integer"
          },
          "parameters": {
            "$ref": "#/$defs/MemcacheParameters"
          },
          "reservedIpRangeId": {
            "description": "Optional. Contains the id of allocated IP address ranges associated with the private service access connection for example, \"test-default\" associated with IP range 10.0.0.0/29.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "description": "Output only. The state of this Memcached instance.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "UPDATING",
              "DELETING",
              "PERFORMING_MAINTENANCE",
              "MEMCACHE_VERSION_UPGRADING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateAvailable": {
            "description": "Output only. Returns true if there is an update waiting to be applied",
            "readOnly": true,
            "type": "boolean"
          },
          "updateTime": {
            "description": "Output only. The time the instance was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "zones": {
            "description": "Zones in which Memcached nodes should be provisioned. Memcached nodes will be equally distributed across these zones. If not provided, the service will by default create nodes in all zones in the region for the instance.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InstanceMessage": {
        "properties": {
          "code": {
            "description": "A code that correspond to one type of user-facing message.",
            "enum": [
              "CODE_UNSPECIFIED",
              "ZONE_DISTRIBUTION_UNBALANCED"
            ],
            "type": "string"
          },
          "message": {
            "description": "Message on memcached instance which will be exposed to users.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudMemcacheV1beta2MaintenancePolicy": {
        "description": "Maintenance policy per instance.",
        "properties": {
          "createTime": {
            "description": "Output only. The time when the policy was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time when the policy was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "weeklyMaintenanceWindow": {
            "description": "Required. Maintenance window that is applied to resources covered by this policy. Minimum 1. For the current version, the maximum number of weekly_maintenance_windows is expected to be one.",
            "items": {
              "$ref": "#/$defs/WeeklyMaintenanceWindow"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "WeeklyMaintenanceWindow": {
        "description": "Time window specified for weekly operations.",
        "properties": {
          "day": {
            "description": "Required. Allows to define schedule that runs specified day of the week.",
            "enum": [
              "DAY_OF_WEEK_UNSPECIFIED",
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ],
            "type": "string"
          },
          "duration": {
            "description": "Required. Duration of the time window.",
            "format": "google-duration",
            "type": "string"
          },
          "startTime": {
            "$ref": "#/$defs/TimeOfDay"
          }
        },
        "type": "object"
      },
      "TimeOfDay": {
        "description": "Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.",
        "properties": {
          "hours": {
            "description": "Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.",
            "format": "int32",
            "type": "integer"
          },
          "minutes": {
            "description": "Minutes of hour of day. Must be from 0 to 59.",
            "format": "int32",
            "type": "integer"
          },
          "nanos": {
            "description": "Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.",
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "description": "Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "MaintenanceSchedule": {
        "description": "Upcoming maintenance schedule.",
        "properties": {
          "endTime": {
            "description": "Output only. The end time of any upcoming scheduled maintenance for this instance.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "scheduleDeadlineTime": {
            "description": "Output only. The deadline that the maintenance schedule start time can not go beyond, including reschedule.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The start time of any upcoming scheduled maintenance for this instance.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Node": {
        "properties": {
          "host": {
            "description": "Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.",
            "readOnly": true,
            "type": "string"
          },
          "memcacheFullVersion": {
            "description": "Output only. The full version of memcached server running on this node. e.g. - memcached-1.5.16",
            "readOnly": true,
            "type": "string"
          },
          "memcacheVersion": {
            "description": "Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5",
            "enum": [
              "MEMCACHE_VERSION_UNSPECIFIED",
              "MEMCACHE_1_5",
              "MEMCACHE_1_6_15"
            ],
            "readOnly": true,
            "type": "string"
          },
          "nodeId": {
            "description": "Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.",
            "readOnly": true,
            "type": "string"
          },
          "parameters": {
            "$ref": "#/$defs/MemcacheParameters"
          },
          "port": {
            "description": "Output only. The port number of the Memcached server on this node.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "state": {
            "description": "Output only. Current state of the Memcached node.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "DELETING",
              "UPDATING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateAvailable": {
            "description": "Output only. Returns true if there is an update waiting to be applied",
            "readOnly": true,
            "type": "boolean"
          },
          "zone": {
            "description": "Output only. Location (GCP Zone) for the Memcached node.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "MemcacheParameters": {
        "properties": {
          "id": {
            "description": "Output only. The unique ID associated with this set of parameters. Users can use this id to determine if the parameters associated with the instance differ from the parameters associated with the nodes. A discrepancy between parameter ids can inform users that they may need to take action to apply parameters on nodes.",
            "readOnly": true,
            "type": "string"
          },
          "params": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User defined set of parameters to use in the memcached process.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "NodeConfig": {
        "description": "Configuration for a Memcached Node.",
        "properties": {
          "cpuCount": {
            "description": "Required. Number of cpus per Memcached node.",
            "format": "int32",
            "type": "integer"
          },
          "memorySizeMb": {
            "description": "Required. Memory size in MiB for each Memcached node.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://memcache.googleapis.com//v1beta2/{parent}/instances{?instanceId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
