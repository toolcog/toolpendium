{
  "name": "redis_projects_locations_clusters_create",
  "description": "Creates a Redis cluster based on the specified properties. The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis cluster will be fully functional. The completed longrunning.Operation will contain the new cluster object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the cluster location using the form: `projects/{project_id}/locations/{location_id}` where `location_id` refers to a GCP region."
      },
      "clusterId": {
        "type": "string",
        "description": "Required. The logical name of the Redis cluster in the customer project with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the customer project / location"
      },
      "requestId": {
        "type": "string",
        "description": "Idempotent request UUID."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Cluster"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Cluster": {
        "description": "A cluster instance.",
        "properties": {
          "authorizationMode": {
            "description": "Optional. The authorization mode of the Redis cluster. If not provided, auth feature is disabled for the cluster.",
            "enum": [
              "AUTH_MODE_UNSPECIFIED",
              "AUTH_MODE_IAM_AUTH",
              "AUTH_MODE_DISABLED"
            ],
            "type": "string"
          },
          "createTime": {
            "description": "Output only. The timestamp associated with the cluster creation request.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "discoveryEndpoints": {
            "description": "Output only. Endpoints created on each given network, for Redis clients to connect to the cluster. Currently only one discovery endpoint is supported.",
            "items": {
              "$ref": "#/$defs/DiscoveryEndpoint"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Required. Unique name of the resource in this scope including project and location using the form: `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`",
            "type": "string"
          },
          "pscConfigs": {
            "description": "Required. Each PscConfig configures the consumer network where IPs will be designated to the cluster for client access through Private Service Connect Automation. Currently, only one PscConfig is supported.",
            "items": {
              "$ref": "#/$defs/PscConfig"
            },
            "type": "array"
          },
          "pscConnections": {
            "description": "Output only. PSC connections for discovery of the cluster topology and accessing the cluster.",
            "items": {
              "$ref": "#/$defs/PscConnection"
            },
            "readOnly": true,
            "type": "array"
          },
          "replicaCount": {
            "description": "Optional. The number of replica nodes per shard.",
            "format": "int32",
            "type": "integer"
          },
          "shardCount": {
            "description": "Required. Number of shards for the Redis cluster.",
            "format": "int32",
            "type": "integer"
          },
          "sizeGb": {
            "description": "Output only. Redis memory size in GB for the entire cluster rounded up to the next integer.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "state": {
            "description": "Output only. The current state of this cluster. Can be CREATING, READY, UPDATING, DELETING and SUSPENDED",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "UPDATING",
              "DELETING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "stateInfo": {
            "$ref": "#/$defs/StateInfo"
          },
          "transitEncryptionMode": {
            "description": "Optional. The in-transit encryption for the Redis cluster. If not provided, encryption is disabled for the cluster.",
            "enum": [
              "TRANSIT_ENCRYPTION_MODE_UNSPECIFIED",
              "TRANSIT_ENCRYPTION_MODE_DISABLED",
              "TRANSIT_ENCRYPTION_MODE_SERVER_AUTHENTICATION"
            ],
            "type": "string"
          },
          "uid": {
            "description": "Output only. System assigned, unique identifier for the cluster.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiscoveryEndpoint": {
        "description": "Endpoints on each network, for Redis clients to connect to the cluster.",
        "properties": {
          "address": {
            "description": "Output only. Address of the exposed Redis endpoint used by clients to connect to the service. The address could be either IP or hostname.",
            "readOnly": true,
            "type": "string"
          },
          "port": {
            "description": "Output only. The port number of the exposed Redis endpoint.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "pscConfig": {
            "$ref": "#/$defs/PscConfig"
          }
        },
        "type": "object"
      },
      "PscConfig": {
        "properties": {
          "network": {
            "description": "Required. The network where the IP address of the discovery endpoint will be reserved, in the form of projects/{network_project}/global/networks/{network_id}.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PscConnection": {
        "description": "Details of consumer resources in a PSC connection.",
        "properties": {
          "address": {
            "description": "Output only. The IP allocated on the consumer network for the PSC forwarding rule.",
            "readOnly": true,
            "type": "string"
          },
          "forwardingRule": {
            "description": "Output only. The URI of the consumer side forwarding rule. Example: projects/{projectNumOrId}/regions/us-east1/forwardingRules/{resourceId}.",
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "description": "The consumer network where the IP address resides, in the form of projects/{project_id}/global/networks/{network_id}.",
            "type": "string"
          },
          "projectId": {
            "description": "Output only. The consumer project_id where the forwarding rule is created from.",
            "readOnly": true,
            "type": "string"
          },
          "pscConnectionId": {
            "description": "Output only. The PSC connection id of the forwarding rule connected to the service attachment.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "StateInfo": {
        "description": "Represents additional information about the state of the cluster.",
        "properties": {
          "updateInfo": {
            "$ref": "#/$defs/UpdateInfo"
          }
        },
        "type": "object"
      },
      "UpdateInfo": {
        "description": "Represents information about an updating cluster.",
        "properties": {
          "targetReplicaCount": {
            "description": "Target number of replica nodes per shard.",
            "format": "int32",
            "type": "integer"
          },
          "targetShardCount": {
            "description": "Target number of shards for redis cluster",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://redis.googleapis.com//v1/{parent}/clusters{?clusterId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: { `createTime`: The time the operation was created. `endTime`: The time the operation finished running. `target`: Server-defined resource path for the target of the operation. `verb`: Name of the verb executed by the operation. `statusDetail`: Human-readable status of the operation, if any. `cancelRequested`: Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`. `apiVersion`: API version used to start the operation. }",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
