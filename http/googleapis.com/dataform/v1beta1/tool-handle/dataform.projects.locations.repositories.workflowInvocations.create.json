{
  "name": "dataform_projects_locations_repositories_workflowInvocations_create",
  "description": "Creates a new WorkflowInvocation in a given Repository.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The repository in which to create the workflow invocation. Must be in the format `projects/*/locations/*/repositories/*`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/WorkflowInvocation"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "WorkflowInvocation": {
        "description": "Represents a single invocation of a compilation result.",
        "properties": {
          "compilationResult": {
            "description": "Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.",
            "type": "string"
          },
          "invocationConfig": {
            "$ref": "#/$defs/InvocationConfig"
          },
          "invocationTiming": {
            "$ref": "#/$defs/Interval"
          },
          "name": {
            "description": "Output only. The workflow invocation's name.",
            "readOnly": true,
            "type": "string"
          },
          "resolvedCompilationResult": {
            "description": "Output only. The resolved compilation result that was used to create this invocation. Will be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. This workflow invocation's current state.",
            "enum": [
              "STATE_UNSPECIFIED",
              "RUNNING",
              "SUCCEEDED",
              "CANCELLED",
              "FAILED",
              "CANCELING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "workflowConfig": {
            "description": "Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InvocationConfig": {
        "description": "Includes various configuration options for a workflow invocation. If both `included_targets` and `included_tags` are unset, all actions will be included.",
        "properties": {
          "fullyRefreshIncrementalTablesEnabled": {
            "description": "Optional. When set to true, any incremental tables will be fully refreshed.",
            "type": "boolean"
          },
          "includedTags": {
            "description": "Optional. The set of tags to include.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "includedTargets": {
            "description": "Optional. The set of action identifiers to include.",
            "items": {
              "$ref": "#/$defs/Target"
            },
            "type": "array"
          },
          "serviceAccount": {
            "description": "Optional. The service account to run workflow invocations under.",
            "type": "string"
          },
          "transitiveDependenciesIncluded": {
            "description": "Optional. When set to true, transitive dependencies of included actions will be executed.",
            "type": "boolean"
          },
          "transitiveDependentsIncluded": {
            "description": "Optional. When set to true, transitive dependents of included actions will be executed.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Target": {
        "description": "Represents an action identifier. If the action writes output, the output will be written to the referenced database object.",
        "properties": {
          "database": {
            "description": "The action's database (Google Cloud project ID) .",
            "type": "string"
          },
          "name": {
            "description": "The action's name, within `database` and `schema`.",
            "type": "string"
          },
          "schema": {
            "description": "The action's schema (BigQuery dataset ID), within `database`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Interval": {
        "description": "Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
        "properties": {
          "endTime": {
            "description": "Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
            "format": "google-datetime",
            "type": "string"
          },
          "startTime": {
            "description": "Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dataform.googleapis.com//v1beta1/{parent}/workflowInvocations{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a single invocation of a compilation result.",
        "**Key properties:**",
        {
          "$ul": [
            "**compilationResult**: Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.",
            [
              "**invocationConfig**: Includes various configuration options for a workflow invocation. If both `included_targets` and `included_tags` are unset, all actions will be included.",
              {
                "$ul": [
                  "**fullyRefreshIncrementalTablesEnabled**: Optional. When set to true, any incremental tables will be fully refreshed.",
                  "**includedTags**: Optional. The set of tags to include.",
                  "**includedTargets**: Optional. The set of action identifiers to include.",
                  "**serviceAccount**: Optional. The service account to run workflow invocations under.",
                  "**transitiveDependenciesIncluded**: Optional. When set to true, transitive dependencies of included actions will be executed.",
                  "**transitiveDependentsIncluded**: Optional. When set to true, transitive dependents of included actions will be executed."
                ]
              }
            ],
            [
              "**invocationTiming**: Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.",
              {
                "$ul": [
                  "**endTime**: Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.",
                  "**startTime**: Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start."
                ]
              }
            ],
            "**name**: Output only. The workflow invocation's name.",
            "**resolvedCompilationResult**: Output only. The resolved compilation result that was used to create this invocation. Will be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.",
            "**state**: Output only. This workflow invocation's current state.",
            "**workflowConfig**: Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
