{
  "name": "containeranalysis_projects_occurrences_create",
  "description": "Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "This field contains the project Id for example: \"projects/{project_id}\""
      },
      "name": {
        "type": "string",
        "description": "The name of the project. Should be of the form \"projects/{project_id}\". @Deprecated"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Occurrence"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Occurrence": {
        "description": "`Occurrence` includes information about analysis occurrences for an image.",
        "properties": {
          "attestation": {
            "$ref": "#/$defs/Attestation"
          },
          "buildDetails": {
            "$ref": "#/$defs/BuildDetails"
          },
          "compliance": {
            "$ref": "#/$defs/ComplianceOccurrence"
          },
          "createTime": {
            "description": "Output only. The time this `Occurrence` was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "deployment": {
            "$ref": "#/$defs/Deployment"
          },
          "derivedImage": {
            "$ref": "#/$defs/Derived"
          },
          "discovered": {
            "$ref": "#/$defs/Discovered"
          },
          "dsseAttestation": {
            "$ref": "#/$defs/DSSEAttestationOccurrence"
          },
          "envelope": {
            "$ref": "#/$defs/Envelope"
          },
          "installation": {
            "$ref": "#/$defs/Installation"
          },
          "kind": {
            "description": "Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.",
            "enum": [
              "KIND_UNSPECIFIED",
              "PACKAGE_VULNERABILITY",
              "BUILD_DETAILS",
              "IMAGE_BASIS",
              "PACKAGE_MANAGER",
              "DEPLOYABLE",
              "DISCOVERY",
              "ATTESTATION_AUTHORITY",
              "UPGRADE",
              "COMPLIANCE",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "DSSE_ATTESTATION",
              "VULNERABILITY_ASSESSMENT",
              "SBOM_REFERENCE"
            ],
            "type": "string"
          },
          "name": {
            "description": "Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
            "type": "string"
          },
          "noteName": {
            "description": "An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests.",
            "type": "string"
          },
          "remediation": {
            "description": "A description of actions that can be taken to remedy the `Note`",
            "type": "string"
          },
          "resource": {
            "$ref": "#/$defs/Resource"
          },
          "resourceUrl": {
            "description": "The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.",
            "type": "string"
          },
          "sbom": {
            "$ref": "#/$defs/DocumentOccurrence"
          },
          "sbomReference": {
            "$ref": "#/$defs/SBOMReferenceOccurrence"
          },
          "spdxFile": {
            "$ref": "#/$defs/FileOccurrence"
          },
          "spdxPackage": {
            "$ref": "#/$defs/PackageInfoOccurrence"
          },
          "spdxRelationship": {
            "$ref": "#/$defs/RelationshipOccurrence"
          },
          "updateTime": {
            "description": "Output only. The time this `Occurrence` was last updated.",
            "format": "google-datetime",
            "type": "string"
          },
          "upgrade": {
            "$ref": "#/$defs/UpgradeOccurrence"
          },
          "vulnerabilityDetails": {
            "$ref": "#/$defs/VulnerabilityDetails"
          }
        },
        "type": "object"
      },
      "Attestation": {
        "description": "Occurrence that represents a single \"attestation\". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
        "properties": {
          "pgpSignedAttestation": {
            "$ref": "#/$defs/PgpSignedAttestation"
          }
        },
        "type": "object"
      },
      "PgpSignedAttestation": {
        "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
        "properties": {
          "contentType": {
            "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
            "enum": [
              "CONTENT_TYPE_UNSPECIFIED",
              "SIMPLE_SIGNING_JSON"
            ],
            "type": "string"
          },
          "pgpKeyId": {
            "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
            "type": "string"
          },
          "signature": {
            "description": "The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildDetails": {
        "description": "Message encapsulating build provenance details.",
        "properties": {
          "inTotoSlsaProvenanceV1": {
            "$ref": "#/$defs/InTotoSlsaProvenanceV1"
          },
          "intotoProvenance": {
            "$ref": "#/$defs/InTotoProvenance"
          },
          "intotoStatement": {
            "$ref": "#/$defs/InTotoStatement"
          },
          "provenance": {
            "$ref": "#/$defs/BuildProvenance"
          },
          "provenanceBytes": {
            "description": "Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InTotoSlsaProvenanceV1": {
        "properties": {
          "_type": {
            "description": "InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement",
            "type": "string"
          },
          "predicate": {
            "$ref": "#/$defs/SlsaProvenanceV1"
          },
          "predicateType": {
            "type": "string"
          },
          "subject": {
            "items": {
              "$ref": "#/$defs/Subject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SlsaProvenanceV1": {
        "description": "Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.",
        "properties": {
          "buildDefinition": {
            "$ref": "#/$defs/BuildDefinition"
          },
          "runDetails": {
            "$ref": "#/$defs/RunDetails"
          }
        },
        "type": "object"
      },
      "BuildDefinition": {
        "properties": {
          "buildType": {
            "type": "string"
          },
          "externalParameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "type": "object"
          },
          "internalParameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "type": "object"
          },
          "resolvedDependencies": {
            "items": {
              "$ref": "#/$defs/ResourceDescriptor"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceDescriptor": {
        "properties": {
          "annotations": {
            "additionalProperties": {},
            "type": "object"
          },
          "content": {
            "format": "byte",
            "type": "string"
          },
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "downloadLocation": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunDetails": {
        "properties": {
          "builder": {
            "$ref": "#/$defs/ProvenanceBuilder"
          },
          "byproducts": {
            "items": {
              "$ref": "#/$defs/ResourceDescriptor"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/BuildMetadata"
          }
        },
        "type": "object"
      },
      "ProvenanceBuilder": {
        "properties": {
          "builderDependencies": {
            "items": {
              "$ref": "#/$defs/ResourceDescriptor"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "version": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BuildMetadata": {
        "properties": {
          "finishedOn": {
            "format": "google-datetime",
            "type": "string"
          },
          "invocationId": {
            "type": "string"
          },
          "startedOn": {
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Subject": {
        "description": "Subject refers to the subject of the intoto statement",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "\"\": \"\" Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet",
            "type": "object"
          },
          "name": {
            "description": "name is the name of the Subject used here",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InTotoProvenance": {
        "properties": {
          "builderConfig": {
            "$ref": "#/$defs/BuilderConfig"
          },
          "materials": {
            "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/Metadata"
          },
          "recipe": {
            "$ref": "#/$defs/Recipe"
          }
        },
        "type": "object"
      },
      "BuilderConfig": {
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Metadata": {
        "description": "Other properties of the build.",
        "properties": {
          "buildFinishedOn": {
            "description": "The timestamp of when the build completed.",
            "format": "google-datetime",
            "type": "string"
          },
          "buildInvocationId": {
            "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
            "type": "string"
          },
          "buildStartedOn": {
            "description": "The timestamp of when the build started.",
            "format": "google-datetime",
            "type": "string"
          },
          "completeness": {
            "$ref": "#/$defs/Completeness"
          },
          "reproducible": {
            "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Completeness": {
        "description": "Indicates that the builder claims certain fields in this message to be complete.",
        "properties": {
          "arguments": {
            "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
            "type": "boolean"
          },
          "environment": {
            "description": "If true, the builder claims that recipe.environment is claimed to be complete.",
            "type": "boolean"
          },
          "materials": {
            "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Recipe": {
        "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
        "properties": {
          "arguments": {
            "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "definedInMaterial": {
            "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
            "format": "int64",
            "type": "string"
          },
          "entryPoint": {
            "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
            "type": "string"
          },
          "environment": {
            "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "type": {
            "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InTotoStatement": {
        "description": "Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
        "properties": {
          "_type": {
            "description": "Always \"https://in-toto.io/Statement/v0.1\".",
            "type": "string"
          },
          "predicateType": {
            "description": "\"https://slsa.dev/provenance/v0.1\" for SlsaProvenance.",
            "type": "string"
          },
          "provenance": {
            "$ref": "#/$defs/InTotoProvenance"
          },
          "slsaProvenance": {
            "$ref": "#/$defs/SlsaProvenance"
          },
          "slsaProvenanceZeroTwo": {
            "$ref": "#/$defs/SlsaProvenanceZeroTwo"
          },
          "subject": {
            "description": "subject is the subjects of the intoto statement",
            "items": {
              "$ref": "#/$defs/Subject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SlsaProvenance": {
        "description": "SlsaProvenance is the slsa provenance as defined by the slsa spec.",
        "properties": {
          "builder": {
            "$ref": "#/$defs/SlsaBuilder"
          },
          "materials": {
            "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
            "items": {
              "$ref": "#/$defs/Material"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/SlsaMetadata"
          },
          "recipe": {
            "$ref": "#/$defs/SlsaRecipe"
          }
        },
        "type": "object"
      },
      "SlsaBuilder": {
        "description": "SlsaBuilder encapsulates the identity of the builder of this provenance.",
        "properties": {
          "id": {
            "description": "id is the id of the slsa provenance builder",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Material": {
        "description": "Material is a material used in the generation of the provenance",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "digest is a map from a hash algorithm (e.g. sha256) to the value in the material",
            "type": "object"
          },
          "uri": {
            "description": "uri is the uri of the material",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlsaMetadata": {
        "description": "Other properties of the build.",
        "properties": {
          "buildFinishedOn": {
            "description": "The timestamp of when the build completed.",
            "format": "google-datetime",
            "type": "string"
          },
          "buildInvocationId": {
            "description": "Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
            "type": "string"
          },
          "buildStartedOn": {
            "description": "The timestamp of when the build started.",
            "format": "google-datetime",
            "type": "string"
          },
          "completeness": {
            "$ref": "#/$defs/SlsaCompleteness"
          },
          "reproducible": {
            "description": "If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SlsaCompleteness": {
        "description": "Indicates that the builder claims certain fields in this message to be complete.",
        "properties": {
          "arguments": {
            "description": "If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
            "type": "boolean"
          },
          "environment": {
            "description": "If true, the builder claims that recipe.environment is claimed to be complete.",
            "type": "boolean"
          },
          "materials": {
            "description": "If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SlsaRecipe": {
        "description": "Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
        "properties": {
          "arguments": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.",
            "type": "object"
          },
          "definedInMaterial": {
            "description": "Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
            "format": "int64",
            "type": "string"
          },
          "entryPoint": {
            "description": "String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
            "type": "string"
          },
          "environment": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.",
            "type": "object"
          },
          "type": {
            "description": "URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SlsaProvenanceZeroTwo": {
        "description": "SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.",
        "properties": {
          "buildConfig": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Lists the steps in the build.",
            "type": "object"
          },
          "buildType": {
            "description": "URI indicating what type of build was performed.",
            "type": "string"
          },
          "builder": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder"
          },
          "invocation": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation"
          },
          "materials": {
            "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.",
            "items": {
              "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaBuilder": {
        "description": "Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.",
        "properties": {
          "id": {
            "description": "URI indicating the builder’s identity.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaInvocation": {
        "description": "Identifies the event that kicked off the build.",
        "properties": {
          "configSource": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource"
          },
          "environment": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Any other builder-controlled inputs necessary for correctly evaluating the build.",
            "type": "object"
          },
          "parameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Collection of all external inputs that influenced the build on top of invocation.configSource.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaConfigSource": {
        "description": "Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.",
            "type": "object"
          },
          "entryPoint": {
            "description": "String identifying the entry point into the build.",
            "type": "string"
          },
          "uri": {
            "description": "URI indicating the identity of the source of the config.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMaterial": {
        "description": "The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of cryptographic digests for the contents of this artifact.",
            "type": "object"
          },
          "uri": {
            "description": "The method by which this artifact was referenced during the build.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaMetadata": {
        "description": "Other properties of the build.",
        "properties": {
          "buildFinishedOn": {
            "description": "The timestamp of when the build completed.",
            "format": "google-datetime",
            "type": "string"
          },
          "buildInvocationId": {
            "description": "Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.",
            "type": "string"
          },
          "buildStartedOn": {
            "description": "The timestamp of when the build started.",
            "format": "google-datetime",
            "type": "string"
          },
          "completeness": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness"
          },
          "reproducible": {
            "description": "If true, the builder claims that running invocation on materials will produce bit-for-bit identical output.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SlsaProvenanceZeroTwoSlsaCompleteness": {
        "description": "Indicates that the builder claims certain fields in this message to be complete.",
        "properties": {
          "environment": {
            "description": "If true, the builder claims that invocation.environment is complete.",
            "type": "boolean"
          },
          "materials": {
            "description": "If true, the builder claims that materials is complete.",
            "type": "boolean"
          },
          "parameters": {
            "description": "If true, the builder claims that invocation.parameters is complete.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BuildProvenance": {
        "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
        "properties": {
          "buildOptions": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
            "type": "object"
          },
          "builderVersion": {
            "description": "Version string of the builder at the time this build was executed.",
            "type": "string"
          },
          "builtArtifacts": {
            "description": "Output of the build.",
            "items": {
              "$ref": "#/$defs/Artifact"
            },
            "type": "array"
          },
          "commands": {
            "description": "Commands requested by the build.",
            "items": {
              "$ref": "#/$defs/Command"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Time at which the build was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "creator": {
            "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
            "type": "string"
          },
          "finishTime": {
            "description": "Time at which execution of the build was finished.",
            "format": "google-datetime",
            "type": "string"
          },
          "id": {
            "description": "Unique identifier of the build.",
            "type": "string"
          },
          "logsBucket": {
            "description": "Google Cloud Storage bucket where logs were written.",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project.",
            "type": "string"
          },
          "sourceProvenance": {
            "$ref": "#/$defs/Source"
          },
          "startTime": {
            "description": "Time at which execution of the build was started.",
            "format": "google-datetime",
            "type": "string"
          },
          "triggerId": {
            "description": "Trigger identifier if the build was triggered automatically; empty if not.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Artifact": {
        "description": "Artifact describes a build product.",
        "properties": {
          "checksum": {
            "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
            "type": "string"
          },
          "id": {
            "description": "Artifact ID, if any; for container images, this will be a URL by digest like gcr.io/projectID/imagename@sha256:123456",
            "type": "string"
          },
          "name": {
            "deprecated": true,
            "description": "Name of the artifact. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. This field is deprecated in favor of the plural `names` field; it continues to exist here to allow existing BuildProvenance serialized to json in google.devtools.containeranalysis.v1alpha1.BuildDetails.provenance_bytes to deserialize back into proto.",
            "type": "string"
          },
          "names": {
            "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Command": {
        "description": "Command describes a step performed as part of the build pipeline.",
        "properties": {
          "args": {
            "description": "Command-line arguments used when executing this Command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dir": {
            "description": "Working directory (relative to project source root) used when running this Command.",
            "type": "string"
          },
          "env": {
            "description": "Environment variables set before running this Command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Optional unique identifier for this Command, used in wait_for to reference this Command as a dependency.",
            "type": "string"
          },
          "name": {
            "description": "Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
            "type": "string"
          },
          "waitFor": {
            "description": "The ID(s) of the Command(s) that this Command depends on.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "Source describes the location of the source used for the build.",
        "properties": {
          "additionalContexts": {
            "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
            "items": {
              "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
            },
            "type": "array"
          },
          "artifactStorageSource": {
            "$ref": "#/$defs/StorageSource"
          },
          "context": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1SourceContext"
          },
          "fileHashes": {
            "additionalProperties": {
              "$ref": "#/$defs/FileHashes"
            },
            "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.",
            "type": "object"
          },
          "repoSource": {
            "$ref": "#/$defs/RepoSource"
          },
          "storageSource": {
            "$ref": "#/$defs/StorageSource"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1SourceContext": {
        "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
        "properties": {
          "cloudRepo": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext"
          },
          "gerrit": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext"
          },
          "git": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels with user defined metadata.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1CloudRepoSourceContext": {
        "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
        "properties": {
          "aliasContext": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
          },
          "repoId": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1RepoId"
          },
          "revisionId": {
            "description": "A revision ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1AliasContext": {
        "description": "An alias to a repo revision.",
        "properties": {
          "kind": {
            "description": "The alias kind.",
            "enum": [
              "KIND_UNSPECIFIED",
              "FIXED",
              "MOVABLE",
              "OTHER"
            ],
            "type": "string"
          },
          "name": {
            "description": "The alias name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1RepoId": {
        "description": "A unique identifier for a Cloud Repo.",
        "properties": {
          "projectRepoId": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId"
          },
          "uid": {
            "description": "A server-assigned, globally unique identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1ProjectRepoId": {
        "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
        "properties": {
          "projectId": {
            "description": "The ID of the project.",
            "type": "string"
          },
          "repoName": {
            "description": "The name of the repo. Leave empty for the default repo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1GerritSourceContext": {
        "description": "A SourceContext referring to a Gerrit project.",
        "properties": {
          "aliasContext": {
            "$ref": "#/$defs/GoogleDevtoolsContaineranalysisV1alpha1AliasContext"
          },
          "gerritProject": {
            "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
            "type": "string"
          },
          "hostUri": {
            "description": "The URI of a running Gerrit instance.",
            "type": "string"
          },
          "revisionId": {
            "description": "A revision (commit) ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleDevtoolsContaineranalysisV1alpha1GitSourceContext": {
        "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
        "properties": {
          "revisionId": {
            "description": "Required. Git commit hash.",
            "type": "string"
          },
          "url": {
            "description": "Git repository URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageSource": {
        "description": "StorageSource describes the location of the source in an archive file in Google Cloud Storage.",
        "properties": {
          "bucket": {
            "description": "Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
            "type": "string"
          },
          "generation": {
            "description": "Google Cloud Storage generation for the object.",
            "format": "int64",
            "type": "string"
          },
          "object": {
            "description": "Google Cloud Storage object containing source.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileHashes": {
        "description": "Container message for hashes of byte content of files, used in Source messages to verify integrity of source input to the build.",
        "properties": {
          "fileHash": {
            "description": "Collection of file hashes.",
            "items": {
              "$ref": "#/$defs/Hash"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Hash": {
        "description": "Container message for hash values.",
        "properties": {
          "type": {
            "description": "The type of hash that was performed.",
            "enum": [
              "NONE",
              "SHA256"
            ],
            "type": "string"
          },
          "value": {
            "description": "The hash value.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoSource": {
        "deprecated": true,
        "description": "RepoSource describes the location of the source in a Google Cloud Source Repository.",
        "properties": {
          "branchName": {
            "description": "Name of the branch to build.",
            "type": "string"
          },
          "commitSha": {
            "description": "Explicit commit SHA to build.",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project that owns the repo.",
            "type": "string"
          },
          "repoName": {
            "description": "Name of the repo.",
            "type": "string"
          },
          "tagName": {
            "description": "Name of the tag to build.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComplianceOccurrence": {
        "description": "An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.",
        "properties": {
          "nonComplianceReason": {
            "description": "The reason for non compliance of these files.",
            "type": "string"
          },
          "nonCompliantFiles": {
            "description": "A list of files which are violating compliance checks.",
            "items": {
              "$ref": "#/$defs/NonCompliantFile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NonCompliantFile": {
        "description": "Details about files that caused a compliance check to fail.",
        "properties": {
          "displayCommand": {
            "description": "Command to display the non-compliant files.",
            "type": "string"
          },
          "path": {
            "description": "display_command is a single command that can be used to display a list of non compliant files. When there is no such command, we can also iterate a list of non compliant file using 'path'. Empty if `display_command` is set.",
            "type": "string"
          },
          "reason": {
            "description": "Explains why a file is non compliant for a CIS check.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Deployment": {
        "description": "The period during which some deployable was active in a runtime.",
        "properties": {
          "address": {
            "description": "Address of the runtime element hosting this deployment.",
            "type": "string"
          },
          "config": {
            "description": "Configuration used to create this deployment.",
            "type": "string"
          },
          "deployTime": {
            "description": "Beginning of the lifetime of this deployment.",
            "format": "google-datetime",
            "type": "string"
          },
          "platform": {
            "description": "Platform hosting this deployment.",
            "enum": [
              "PLATFORM_UNSPECIFIED",
              "GKE",
              "FLEX",
              "CUSTOM"
            ],
            "type": "string"
          },
          "resourceUri": {
            "description": "Resource URI for the artifact being deployed taken from the deployable field with the same name.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "undeployTime": {
            "description": "End of the lifetime of this deployment.",
            "format": "google-datetime",
            "type": "string"
          },
          "userEmail": {
            "description": "Identity of the user that triggered this deployment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Derived": {
        "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
        "properties": {
          "baseResourceUrl": {
            "description": "Output only. This contains the base image URL for the derived image occurrence.",
            "type": "string"
          },
          "distance": {
            "description": "Output only. The number of layers by which this image differs from the associated image basis.",
            "format": "uint32",
            "type": "integer"
          },
          "fingerprint": {
            "$ref": "#/$defs/Fingerprint"
          },
          "layerInfo": {
            "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
            "items": {
              "$ref": "#/$defs/Layer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Fingerprint": {
        "description": "A set of properties that uniquely identify a given Docker image.",
        "properties": {
          "v1Name": {
            "description": "The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "v2Blob": {
            "description": "The ordered list of v2 blobs that represent a given image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "v2Name": {
            "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Layer": {
        "description": "Layer holds metadata specific to a layer of a Docker image.",
        "properties": {
          "arguments": {
            "description": "The recovered arguments to the Dockerfile directive.",
            "type": "string"
          },
          "directive": {
            "description": "The recovered Dockerfile directive used to construct this layer.",
            "enum": [
              "DIRECTIVE_UNSPECIFIED",
              "MAINTAINER",
              "RUN",
              "CMD",
              "LABEL",
              "EXPOSE",
              "ENV",
              "ADD",
              "COPY",
              "ENTRYPOINT",
              "VOLUME",
              "USER",
              "WORKDIR",
              "ARG",
              "ONBUILD",
              "STOPSIGNAL",
              "HEALTHCHECK",
              "SHELL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Discovered": {
        "description": "Provides information about the scan status of a discovered resource.",
        "properties": {
          "analysisCompleted": {
            "$ref": "#/$defs/AnalysisCompleted"
          },
          "analysisError": {
            "description": "Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.",
            "items": {
              "$ref": "#/$defs/Status"
            },
            "type": "array"
          },
          "analysisStatus": {
            "description": "The status of discovery for the resource.",
            "enum": [
              "ANALYSIS_STATUS_UNSPECIFIED",
              "PENDING",
              "SCANNING",
              "COMPLETE",
              "FINISHED_SUCCESS",
              "FINISHED_FAILED",
              "FINISHED_UNSUPPORTED"
            ],
            "type": "string"
          },
          "analysisStatusError": {
            "$ref": "#/$defs/Status"
          },
          "archiveTime": {
            "description": "The time occurrences related to this discovery occurrence were archived.",
            "format": "google-datetime",
            "type": "string"
          },
          "continuousAnalysis": {
            "description": "Whether the resource is continuously analyzed.",
            "enum": [
              "CONTINUOUS_ANALYSIS_UNSPECIFIED",
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "cpe": {
            "description": "The CPE of the resource being scanned.",
            "type": "string"
          },
          "lastScanTime": {
            "description": "The last time this resource was scanned.",
            "format": "google-datetime",
            "type": "string"
          },
          "operation": {
            "$ref": "#/$defs/Operation"
          },
          "sbomStatus": {
            "$ref": "#/$defs/SBOMStatus"
          }
        },
        "type": "object"
      },
      "AnalysisCompleted": {
        "description": "Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.",
        "properties": {
          "analysisType": {
            "description": "type of analysis that were completed on a resource.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Operation": {
        "description": "This resource represents a long-running operation that is the result of a network API call.",
        "properties": {
          "done": {
            "description": "If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            "type": "boolean"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "type": "object"
          },
          "name": {
            "description": "The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "type": "string"
          },
          "response": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL."
            },
            "description": "The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SBOMStatus": {
        "description": "The status of an SBOM generation.",
        "properties": {
          "error": {
            "description": "Output only. If there was an error generating an SBOM, this will indicate what that error was.",
            "readOnly": true,
            "type": "string"
          },
          "sbomState": {
            "description": "Output only. The progress of the SBOM generation.",
            "enum": [
              "SBOM_STATE_UNSPECIFIED",
              "PENDING",
              "COMPLETE"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "DSSEAttestationOccurrence": {
        "description": "An occurrence describing an attestation on a resource",
        "properties": {
          "envelope": {
            "$ref": "#/$defs/Envelope"
          },
          "statement": {
            "$ref": "#/$defs/InTotoStatement"
          }
        },
        "type": "object"
      },
      "Envelope": {
        "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
        "properties": {
          "payload": {
            "description": "The bytes being signed",
            "format": "byte",
            "type": "string"
          },
          "payloadType": {
            "description": "The type of payload being signed",
            "type": "string"
          },
          "signatures": {
            "description": "The signatures over the payload",
            "items": {
              "$ref": "#/$defs/EnvelopeSignature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnvelopeSignature": {
        "description": "A DSSE signature",
        "properties": {
          "keyid": {
            "description": "A reference id to the key being used for signing",
            "type": "string"
          },
          "sig": {
            "description": "The signature itself",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Installation": {
        "description": "This represents how a particular software package may be installed on a system.",
        "properties": {
          "architecture": {
            "description": "Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
            "enum": [
              "ARCHITECTURE_UNSPECIFIED",
              "X86",
              "X64"
            ],
            "readOnly": true,
            "type": "string"
          },
          "cpeUri": {
            "description": "Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
            "readOnly": true,
            "type": "string"
          },
          "license": {
            "$ref": "#/$defs/License"
          },
          "location": {
            "description": "All of the places within the filesystem versions of this package have been found.",
            "items": {
              "$ref": "#/$defs/Location"
            },
            "type": "array"
          },
          "name": {
            "description": "Output only. The name of the installed package.",
            "readOnly": true,
            "type": "string"
          },
          "packageType": {
            "description": "Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "License": {
        "description": "License information.",
        "properties": {
          "comments": {
            "description": "Comments",
            "type": "string"
          },
          "expression": {
            "description": "Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Location": {
        "description": "An occurrence of a particular package installation found within a system's filesystem. e.g. glibc was found in /var/lib/dpkg/status",
        "properties": {
          "cpeUri": {
            "description": "Deprecated. The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
            "type": "string"
          },
          "path": {
            "description": "The path from which we gathered that this package/version is installed.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "Version": {
        "description": "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
        "properties": {
          "epoch": {
            "description": "Used to correct mistakes in the version numbering scheme.",
            "format": "int32",
            "type": "integer"
          },
          "inclusive": {
            "description": "Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
            "type": "boolean"
          },
          "kind": {
            "description": "Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
            "enum": [
              "NORMAL",
              "MINIMUM",
              "MAXIMUM"
            ],
            "type": "string"
          },
          "name": {
            "description": "The main part of the version name.",
            "type": "string"
          },
          "revision": {
            "description": "The iteration of the package build from the above version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": " Resource is an entity that can have metadata. E.g., a Docker image.",
        "properties": {
          "contentHash": {
            "$ref": "#/$defs/Hash"
          },
          "name": {
            "description": "The name of the resource. E.g., the name of a Docker image - \"Debian\".",
            "type": "string"
          },
          "uri": {
            "description": "The unique URI of the resource. E.g., \"https://gcr.io/project/image@sha256:foo\" for a Docker image.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentOccurrence": {
        "description": "DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
        "properties": {
          "createTime": {
            "description": "Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard",
            "format": "google-datetime",
            "type": "string"
          },
          "creatorComment": {
            "description": "A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields",
            "type": "string"
          },
          "creators": {
            "description": "Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "documentComment": {
            "description": "A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document",
            "type": "string"
          },
          "externalDocumentRefs": {
            "description": "Identify any external SPDX documents referenced within this SPDX document",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
            "type": "string"
          },
          "licenseListVersion": {
            "description": "A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created",
            "type": "string"
          },
          "namespace": {
            "description": "Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
            "type": "string"
          },
          "title": {
            "description": "Identify name of this document as designated by creator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBOMReferenceOccurrence": {
        "description": "The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.",
        "properties": {
          "payload": {
            "$ref": "#/$defs/SbomReferenceIntotoPayload"
          },
          "payloadType": {
            "description": "The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.",
            "type": "string"
          },
          "signatures": {
            "description": "The signatures over the payload.",
            "items": {
              "$ref": "#/$defs/EnvelopeSignature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SbomReferenceIntotoPayload": {
        "description": "The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.",
        "properties": {
          "_type": {
            "description": "Identifier for the schema of the Statement.",
            "type": "string"
          },
          "predicate": {
            "$ref": "#/$defs/SbomReferenceIntotoPredicate"
          },
          "predicateType": {
            "description": "URI identifying the type of the Predicate.",
            "type": "string"
          },
          "subject": {
            "description": "Set of software artifacts that the attestation applies to. Each element represents a single software artifact.",
            "items": {
              "$ref": "#/$defs/Subject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SbomReferenceIntotoPredicate": {
        "description": "A predicate which describes the SBOM being referenced.",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of algorithm to digest of the contents of the SBOM.",
            "type": "object"
          },
          "location": {
            "description": "The location of the SBOM.",
            "type": "string"
          },
          "mimeType": {
            "description": "The mime type of the SBOM.",
            "type": "string"
          },
          "referrerId": {
            "description": "The person or system referring this predicate to the consumer.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileOccurrence": {
        "description": "FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
        "properties": {
          "attributions": {
            "description": "This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "description": "This field provides a place for the SPDX file creator to record any general comments about the file",
            "type": "string"
          },
          "contributors": {
            "description": "This field provides a place for the SPDX file creator to record file contributors",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "copyright": {
            "description": "Identify the copyright holder of the file, as well as any dates present",
            "type": "string"
          },
          "filesLicenseInfo": {
            "description": "This field contains the license information actually found in the file, if any",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
            "type": "string"
          },
          "licenseConcluded": {
            "$ref": "#/$defs/License"
          },
          "notice": {
            "description": "This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageInfoOccurrence": {
        "description": "PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
        "properties": {
          "comment": {
            "description": "A place for the SPDX file creator to record any general comments about the package being described",
            "type": "string"
          },
          "filename": {
            "description": "Provide the actual file name of the package, or path of the directory being treated as a package",
            "type": "string"
          },
          "homePage": {
            "description": "Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
            "type": "string"
          },
          "licenseConcluded": {
            "$ref": "#/$defs/License"
          },
          "packageType": {
            "description": "Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
            "readOnly": true,
            "type": "string"
          },
          "sourceInfo": {
            "description": "Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package",
            "type": "string"
          },
          "summaryDescription": {
            "description": "Output only. A short description of the package",
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "description": "Output only. Identify the full name of the package as given by the Package Originator",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "Output only. Identify the version of the package",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipOccurrence": {
        "description": "RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
        "properties": {
          "comment": {
            "description": "A place for the SPDX file creator to record any general comments about the relationship",
            "type": "string"
          },
          "source": {
            "description": "Also referred to as SPDXRef-A The source SPDX element (file, package, etc)",
            "type": "string"
          },
          "target": {
            "description": "Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it",
            "type": "string"
          },
          "type": {
            "description": "Output only. The type of relationship between the source and target SPDX elements",
            "enum": [
              "RELATIONSHIP_TYPE_UNSPECIFIED",
              "DESCRIBES",
              "DESCRIBED_BY",
              "CONTAINS",
              "CONTAINED_BY",
              "DEPENDS_ON",
              "DEPENDENCY_OF",
              "DEPENDENCY_MANIFEST_OF",
              "BUILD_DEPENDENCY_OF",
              "DEV_DEPENDENCY_OF",
              "OPTIONAL_DEPENDENCY_OF",
              "PROVIDED_DEPENDENCY_OF",
              "TEST_DEPENDENCY_OF",
              "RUNTIME_DEPENDENCY_OF",
              "EXAMPLE_OF",
              "GENERATES",
              "GENERATED_FROM",
              "ANCESTOR_OF",
              "DESCENDANT_OF",
              "VARIANT_OF",
              "DISTRIBUTION_ARTIFACT",
              "PATCH_FOR",
              "PATCH_APPLIED",
              "COPY_OF",
              "FILE_ADDED",
              "FILE_DELETED",
              "FILE_MODIFIED",
              "EXPANDED_FROM_ARCHIVE",
              "DYNAMIC_LINK",
              "STATIC_LINK",
              "DATA_FILE_OF",
              "TEST_CASE_OF",
              "BUILD_TOOL_OF",
              "DEV_TOOL_OF",
              "TEST_OF",
              "TEST_TOOL_OF",
              "DOCUMENTATION_OF",
              "OPTIONAL_COMPONENT_OF",
              "METAFILE_OF",
              "PACKAGE_OF",
              "AMENDS",
              "PREREQUISITE_FOR",
              "HAS_PREREQUISITE",
              "OTHER"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeOccurrence": {
        "description": "An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).",
        "properties": {
          "distribution": {
            "$ref": "#/$defs/UpgradeDistribution"
          },
          "package": {
            "description": "Required - The package this Upgrade is for.",
            "type": "string"
          },
          "parsedVersion": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "UpgradeDistribution": {
        "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
        "properties": {
          "classification": {
            "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.",
            "type": "string"
          },
          "cpeUri": {
            "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
            "type": "string"
          },
          "cve": {
            "description": "The cve that would be resolved by this upgrade.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "description": "The severity as specified by the upstream operating system.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityDetails": {
        "description": "Used by Occurrence to point to where the vulnerability exists and how to fix it.",
        "properties": {
          "cvssScore": {
            "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
            "format": "float",
            "type": "number"
          },
          "cvssV2": {
            "$ref": "#/$defs/CVSS"
          },
          "cvssV3": {
            "$ref": "#/$defs/CVSS"
          },
          "cvssVersion": {
            "description": "Output only. CVSS version used to populate cvss_score and severity.",
            "enum": [
              "CVSS_VERSION_UNSPECIFIED",
              "CVSS_VERSION_2",
              "CVSS_VERSION_3"
            ],
            "readOnly": true,
            "type": "string"
          },
          "effectiveSeverity": {
            "description": "The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "extraDetails": {
            "description": "Occurrence-specific extra details about the vulnerability.",
            "type": "string"
          },
          "packageIssue": {
            "description": "The set of affected locations and their fixes (if available) within the associated resource.",
            "items": {
              "$ref": "#/$defs/PackageIssue"
            },
            "type": "array"
          },
          "severity": {
            "description": "Output only. The note provider assigned Severity of the vulnerability.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "type": {
            "description": "The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.",
            "type": "string"
          },
          "vexAssessment": {
            "$ref": "#/$defs/VexAssessment"
          }
        },
        "type": "object"
      },
      "CVSS": {
        "description": "Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
        "properties": {
          "attackComplexity": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "ATTACK_COMPLEXITY_UNSPECIFIED",
              "ATTACK_COMPLEXITY_LOW",
              "ATTACK_COMPLEXITY_HIGH",
              "ATTACK_COMPLEXITY_MEDIUM"
            ],
            "type": "string"
          },
          "attackVector": {
            "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
            "enum": [
              "ATTACK_VECTOR_UNSPECIFIED",
              "ATTACK_VECTOR_NETWORK",
              "ATTACK_VECTOR_ADJACENT",
              "ATTACK_VECTOR_LOCAL",
              "ATTACK_VECTOR_PHYSICAL"
            ],
            "type": "string"
          },
          "authentication": {
            "description": "Defined in CVSS v2",
            "enum": [
              "AUTHENTICATION_UNSPECIFIED",
              "AUTHENTICATION_MULTIPLE",
              "AUTHENTICATION_SINGLE",
              "AUTHENTICATION_NONE"
            ],
            "type": "string"
          },
          "availabilityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "baseScore": {
            "description": "The base score is a function of the base metric scores.",
            "format": "float",
            "type": "number"
          },
          "confidentialityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "exploitabilityScore": {
            "format": "float",
            "type": "number"
          },
          "impactScore": {
            "format": "float",
            "type": "number"
          },
          "integrityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "privilegesRequired": {
            "description": "Defined in CVSS v3",
            "enum": [
              "PRIVILEGES_REQUIRED_UNSPECIFIED",
              "PRIVILEGES_REQUIRED_NONE",
              "PRIVILEGES_REQUIRED_LOW",
              "PRIVILEGES_REQUIRED_HIGH"
            ],
            "type": "string"
          },
          "scope": {
            "description": "Defined in CVSS v3",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_UNCHANGED",
              "SCOPE_CHANGED"
            ],
            "type": "string"
          },
          "userInteraction": {
            "description": "Defined in CVSS v3",
            "enum": [
              "USER_INTERACTION_UNSPECIFIED",
              "USER_INTERACTION_NONE",
              "USER_INTERACTION_REQUIRED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageIssue": {
        "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available).",
        "properties": {
          "affectedLocation": {
            "$ref": "#/$defs/VulnerabilityLocation"
          },
          "effectiveSeverity": {
            "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when distro or language system has not yet assigned a severity for this vulnerability.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "readOnly": true,
            "type": "string"
          },
          "fixedLocation": {
            "$ref": "#/$defs/VulnerabilityLocation"
          },
          "packageType": {
            "description": "The type of package (e.g. OS, MAVEN, GO).",
            "type": "string"
          },
          "severityName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityLocation": {
        "description": "The location of the vulnerability",
        "properties": {
          "cpeUri": {
            "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "fileLocation": {
            "description": "The file location at which this package was found.",
            "items": {
              "$ref": "#/$defs/FileLocation"
            },
            "type": "array"
          },
          "package": {
            "description": "The package being described.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "FileLocation": {
        "description": "Indicates the location at which a package was found.",
        "properties": {
          "filePath": {
            "description": "For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VexAssessment": {
        "description": "VexAssessment provides all publisher provided Vex information that is related to this vulnerability.",
        "properties": {
          "cve": {
            "description": "Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.",
            "type": "string"
          },
          "impacts": {
            "description": "Contains information about the impact of this vulnerability, this will change with time.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "justification": {
            "$ref": "#/$defs/Justification"
          },
          "noteName": {
            "description": "The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.",
            "type": "string"
          },
          "relatedUris": {
            "description": "Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.",
            "items": {
              "$ref": "#/$defs/URI"
            },
            "type": "array"
          },
          "remediations": {
            "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
            "items": {
              "$ref": "#/$defs/Remediation"
            },
            "type": "array"
          },
          "state": {
            "description": "Provides the state of this Vulnerability assessment.",
            "enum": [
              "STATE_UNSPECIFIED",
              "AFFECTED",
              "NOT_AFFECTED",
              "FIXED",
              "UNDER_INVESTIGATION"
            ],
            "type": "string"
          },
          "vulnerabilityId": {
            "description": "The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Justification": {
        "description": "Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
        "properties": {
          "details": {
            "description": "Additional details on why this justification was chosen.",
            "type": "string"
          },
          "justificationType": {
            "description": "The justification type for this vulnerability.",
            "enum": [
              "JUSTIFICATION_TYPE_UNSPECIFIED",
              "COMPONENT_NOT_PRESENT",
              "VULNERABLE_CODE_NOT_PRESENT",
              "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH",
              "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
              "INLINE_MITIGATIONS_ALREADY_EXIST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "URI": {
        "description": "An URI message.",
        "properties": {
          "label": {
            "description": "A label for the URI.",
            "type": "string"
          },
          "uri": {
            "description": "The unique resource identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Remediation": {
        "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
        "properties": {
          "details": {
            "description": "Contains a comprehensive human-readable discussion of the remediation.",
            "type": "string"
          },
          "remediationType": {
            "description": "The type of remediation that can be applied.",
            "enum": [
              "REMEDIATION_TYPE_UNSPECIFIED",
              "MITIGATION",
              "NO_FIX_PLANNED",
              "NONE_AVAILABLE",
              "VENDOR_FIX",
              "WORKAROUND"
            ],
            "type": "string"
          },
          "remediationUri": {
            "$ref": "#/$defs/URI"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://containeranalysis.googleapis.com//v1alpha1/{parent}/occurrences{?name,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "`Occurrence` includes information about analysis occurrences for an image.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attestation**: Occurrence that represents a single \"attestation\". The authenticity of an Attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the AttestationAuthority to which this Attestation is attached is primarily useful for look-up (how to find this Attestation if you already know the Authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
              {
                "$ul": [
                  [
                    "**pgpSignedAttestation**: An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
                    {
                      "$ul": [
                        "**contentType**: Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
                        "**pgpKeyId**: The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
                        "**signature**: The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**buildDetails**: Message encapsulating build provenance details.",
              {
                "$ul": [
                  [
                    "**inTotoSlsaProvenanceV1**",
                    {
                      "$ul": [
                        "**_type**: InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement",
                        [
                          "**predicate**: Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.",
                          {
                            "$ul": [
                              [
                                "**buildDefinition**",
                                {
                                  "$ul": [
                                    "**buildType**",
                                    "**externalParameters**",
                                    "**internalParameters**",
                                    "**resolvedDependencies**"
                                  ]
                                }
                              ],
                              [
                                "**runDetails**",
                                {
                                  "$ul": [
                                    [
                                      "**builder**",
                                      {
                                        "$ul": [
                                          "**builderDependencies**",
                                          "**id**",
                                          "**version**"
                                        ]
                                      }
                                    ],
                                    "**byproducts**",
                                    [
                                      "**metadata**",
                                      {
                                        "$ul": [
                                          "**finishedOn**",
                                          "**invocationId**",
                                          "**startedOn**"
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**predicateType**",
                        "**subject**"
                      ]
                    }
                  ],
                  [
                    "**intotoProvenance**",
                    {
                      "$ul": [
                        [
                          "**builderConfig**",
                          {
                            "$ul": [
                              "**id**"
                            ]
                          }
                        ],
                        "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
                        [
                          "**metadata**: Other properties of the build.",
                          {
                            "$ul": [
                              "**buildFinishedOn**: The timestamp of when the build completed.",
                              "**buildInvocationId**: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
                              "**buildStartedOn**: The timestamp of when the build started.",
                              [
                                "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                {
                                  "$ul": [
                                    "**arguments**: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
                                    "**environment**: If true, the builder claims that recipe.environment is claimed to be complete.",
                                    "**materials**: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
                                  ]
                                }
                              ],
                              "**reproducible**: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
                            ]
                          }
                        ],
                        [
                          "**recipe**: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
                          {
                            "$ul": [
                              "**arguments**: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
                              "**definedInMaterial**: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
                              "**entryPoint**: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
                              "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.",
                              "**type**: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**intotoStatement**: Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
                    {
                      "$ul": [
                        "**_type**: Always \"https://in-toto.io/Statement/v0.1\".",
                        "**predicateType**: \"https://slsa.dev/provenance/v0.1\" for SlsaProvenance.",
                        [
                          "**provenance**",
                          {
                            "$ul": [
                              [
                                "**builderConfig**",
                                {
                                  "$ul": [
                                    "**id**"
                                  ]
                                }
                              ],
                              "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
                              [
                                "**metadata**: Other properties of the build.",
                                {
                                  "$ul": [
                                    "**buildFinishedOn**: The timestamp of when the build completed.",
                                    "**buildInvocationId**: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
                                    "**buildStartedOn**: The timestamp of when the build started.",
                                    [
                                      "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                      {
                                        "$ul": [
                                          "**arguments**: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
                                          "**environment**: If true, the builder claims that recipe.environment is claimed to be complete.",
                                          "**materials**: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
                                        ]
                                      }
                                    ],
                                    "**reproducible**: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
                                  ]
                                }
                              ],
                              [
                                "**recipe**: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
                                {
                                  "$ul": [
                                    "**arguments**: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
                                    "**definedInMaterial**: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
                                    "**entryPoint**: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
                                    "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.",
                                    "**type**: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**slsaProvenance**: SlsaProvenance is the slsa provenance as defined by the slsa spec.",
                          {
                            "$ul": [
                              [
                                "**builder**: SlsaBuilder encapsulates the identity of the builder of this provenance.",
                                {
                                  "$ul": [
                                    "**id**: id is the id of the slsa provenance builder"
                                  ]
                                }
                              ],
                              "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
                              [
                                "**metadata**: Other properties of the build.",
                                {
                                  "$ul": [
                                    "**buildFinishedOn**: The timestamp of when the build completed.",
                                    "**buildInvocationId**: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
                                    "**buildStartedOn**: The timestamp of when the build started.",
                                    [
                                      "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                      {
                                        "$ul": [
                                          "**arguments**: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
                                          "**environment**: If true, the builder claims that recipe.environment is claimed to be complete.",
                                          "**materials**: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
                                        ]
                                      }
                                    ],
                                    "**reproducible**: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
                                  ]
                                }
                              ],
                              [
                                "**recipe**: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
                                {
                                  "$ul": [
                                    "**arguments**: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.",
                                    "**definedInMaterial**: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
                                    "**entryPoint**: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
                                    "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.",
                                    "**type**: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**slsaProvenanceZeroTwo**: SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.",
                          {
                            "$ul": [
                              "**buildConfig**: Lists the steps in the build.",
                              "**buildType**: URI indicating what type of build was performed.",
                              [
                                "**builder**: Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.",
                                {
                                  "$ul": [
                                    "**id**: URI indicating the builder’s identity."
                                  ]
                                }
                              ],
                              [
                                "**invocation**: Identifies the event that kicked off the build.",
                                {
                                  "$ul": [
                                    [
                                      "**configSource**: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.",
                                      {
                                        "$ul": [
                                          "**digest**: Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.",
                                          "**entryPoint**: String identifying the entry point into the build.",
                                          "**uri**: URI indicating the identity of the source of the config."
                                        ]
                                      }
                                    ],
                                    "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the build.",
                                    "**parameters**: Collection of all external inputs that influenced the build on top of invocation.configSource."
                                  ]
                                }
                              ],
                              "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.",
                              [
                                "**metadata**: Other properties of the build.",
                                {
                                  "$ul": [
                                    "**buildFinishedOn**: The timestamp of when the build completed.",
                                    "**buildInvocationId**: Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.",
                                    "**buildStartedOn**: The timestamp of when the build started.",
                                    [
                                      "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                      {
                                        "$ul": [
                                          "**environment**: If true, the builder claims that invocation.environment is complete.",
                                          "**materials**: If true, the builder claims that materials is complete.",
                                          "**parameters**: If true, the builder claims that invocation.parameters is complete."
                                        ]
                                      }
                                    ],
                                    "**reproducible**: If true, the builder claims that running invocation on materials will produce bit-for-bit identical output."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**subject**: subject is the subjects of the intoto statement"
                      ]
                    }
                  ],
                  [
                    "**provenance**: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
                    {
                      "$ul": [
                        "**buildOptions**: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
                        "**builderVersion**: Version string of the builder at the time this build was executed.",
                        "**builtArtifacts**: Output of the build.",
                        "**commands**: Commands requested by the build.",
                        "**createTime**: Time at which the build was created.",
                        "**creator**: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
                        "**finishTime**: Time at which execution of the build was finished.",
                        "**id**: Unique identifier of the build.",
                        "**logsBucket**: Google Cloud Storage bucket where logs were written.",
                        "**projectId**: ID of the project.",
                        [
                          "**sourceProvenance**: Source describes the location of the source used for the build.",
                          {
                            "$ul": [
                              "**additionalContexts**: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
                              [
                                "**artifactStorageSource**: StorageSource describes the location of the source in an archive file in Google Cloud Storage.",
                                {
                                  "$ul": [
                                    "**bucket**: Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
                                    "**generation**: Google Cloud Storage generation for the object.",
                                    "**object**: Google Cloud Storage object containing source."
                                  ]
                                }
                              ],
                              [
                                "**context**: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
                                {
                                  "$ul": [
                                    [
                                      "**cloudRepo**: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
                                      {
                                        "$ul": [
                                          [
                                            "**aliasContext**: An alias to a repo revision.",
                                            {
                                              "$ul": [
                                                "**kind**: The alias kind.",
                                                "**name**: The alias name."
                                              ]
                                            }
                                          ],
                                          [
                                            "**repoId**: A unique identifier for a Cloud Repo.",
                                            {
                                              "$ul": [
                                                [
                                                  "**projectRepoId**: Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
                                                  {
                                                    "$ul": [
                                                      "**projectId**: The ID of the project.",
                                                      "**repoName**: The name of the repo. Leave empty for the default repo."
                                                    ]
                                                  }
                                                ],
                                                "**uid**: A server-assigned, globally unique identifier."
                                              ]
                                            }
                                          ],
                                          "**revisionId**: A revision ID."
                                        ]
                                      }
                                    ],
                                    [
                                      "**gerrit**: A SourceContext referring to a Gerrit project.",
                                      {
                                        "$ul": [
                                          [
                                            "**aliasContext**: An alias to a repo revision.",
                                            {
                                              "$ul": [
                                                "**kind**: The alias kind.",
                                                "**name**: The alias name."
                                              ]
                                            }
                                          ],
                                          "**gerritProject**: The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
                                          "**hostUri**: The URI of a running Gerrit instance.",
                                          "**revisionId**: A revision (commit) ID."
                                        ]
                                      }
                                    ],
                                    [
                                      "**git**: A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
                                      {
                                        "$ul": [
                                          "**revisionId**: Required. Git commit hash.",
                                          "**url**: Git repository URL."
                                        ]
                                      }
                                    ],
                                    "**labels**: Labels with user defined metadata."
                                  ]
                                }
                              ],
                              "**fileHashes**: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.",
                              [
                                "**repoSource**: RepoSource describes the location of the source in a Google Cloud Source Repository.",
                                {
                                  "$ul": [
                                    "**branchName**: Name of the branch to build.",
                                    "**commitSha**: Explicit commit SHA to build.",
                                    "**projectId**: ID of the project that owns the repo.",
                                    "**repoName**: Name of the repo.",
                                    "**tagName**: Name of the tag to build."
                                  ]
                                }
                              ],
                              [
                                "**storageSource**: StorageSource describes the location of the source in an archive file in Google Cloud Storage.",
                                {
                                  "$ul": [
                                    "**bucket**: Google Cloud Storage bucket containing source (see [Bucket Name Requirements] (https://cloud.google.com/storage/docs/bucket-naming#requirements)).",
                                    "**generation**: Google Cloud Storage generation for the object.",
                                    "**object**: Google Cloud Storage object containing source."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**startTime**: Time at which execution of the build was started.",
                        "**triggerId**: Trigger identifier if the build was triggered automatically; empty if not."
                      ]
                    }
                  ],
                  "**provenanceBytes**: Serialized JSON representation of the provenance, used in generating the `BuildSignature` in the corresponding Result. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes."
                ]
              }
            ],
            [
              "**compliance**: An indication that the compliance checks in the associated ComplianceNote were not satisfied for particular resources or a specified reason.",
              {
                "$ul": [
                  "**nonComplianceReason**: The reason for non compliance of these files.",
                  "**nonCompliantFiles**: A list of files which are violating compliance checks."
                ]
              }
            ],
            "**createTime**: Output only. The time this `Occurrence` was created.",
            [
              "**deployment**: The period during which some deployable was active in a runtime.",
              {
                "$ul": [
                  "**address**: Address of the runtime element hosting this deployment.",
                  "**config**: Configuration used to create this deployment.",
                  "**deployTime**: Beginning of the lifetime of this deployment.",
                  "**platform**: Platform hosting this deployment.",
                  "**resourceUri**: Resource URI for the artifact being deployed taken from the deployable field with the same name.",
                  "**undeployTime**: End of the lifetime of this deployment.",
                  "**userEmail**: Identity of the user that triggered this deployment."
                ]
              }
            ],
            [
              "**derivedImage**: Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
              {
                "$ul": [
                  "**baseResourceUrl**: Output only. This contains the base image URL for the derived image occurrence.",
                  "**distance**: Output only. The number of layers by which this image differs from the associated image basis.",
                  [
                    "**fingerprint**: A set of properties that uniquely identify a given Docker image.",
                    {
                      "$ul": [
                        "**v1Name**: The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.",
                        "**v2Blob**: The ordered list of v2 blobs that represent a given image.",
                        "**v2Name**: Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests."
                      ]
                    }
                  ],
                  "**layerInfo**: This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer."
                ]
              }
            ],
            [
              "**discovered**: Provides information about the scan status of a discovered resource.",
              {
                "$ul": [
                  [
                    "**analysisCompleted**: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.",
                    {
                      "$ul": [
                        "**analysisType**: type of analysis that were completed on a resource."
                      ]
                    }
                  ],
                  "**analysisError**: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.",
                  "**analysisStatus**: The status of discovery for the resource.",
                  [
                    "**analysisStatusError**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
                    {
                      "$ul": [
                        "**code**: The status code, which should be an enum value of google.rpc.Code.",
                        "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                        "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                      ]
                    }
                  ],
                  "**archiveTime**: The time occurrences related to this discovery occurrence were archived.",
                  "**continuousAnalysis**: Whether the resource is continuously analyzed.",
                  "**cpe**: The CPE of the resource being scanned.",
                  "**lastScanTime**: The last time this resource was scanned.",
                  [
                    "**operation**: This resource represents a long-running operation that is the result of a network API call.",
                    {
                      "$ul": [
                        "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
                        [
                          "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
                          {
                            "$ul": [
                              "**code**: The status code, which should be an enum value of google.rpc.Code.",
                              "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                              "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                            ]
                          }
                        ],
                        "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
                        "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
                        "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
                      ]
                    }
                  ],
                  [
                    "**sbomStatus**: The status of an SBOM generation.",
                    {
                      "$ul": [
                        "**error**: Output only. If there was an error generating an SBOM, this will indicate what that error was.",
                        "**sbomState**: Output only. The progress of the SBOM generation."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**dsseAttestation**: An occurrence describing an attestation on a resource",
              {
                "$ul": [
                  [
                    "**envelope**: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
                    {
                      "$ul": [
                        "**payload**: The bytes being signed",
                        "**payloadType**: The type of payload being signed",
                        "**signatures**: The signatures over the payload"
                      ]
                    }
                  ],
                  [
                    "**statement**: Spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement The serialized InTotoStatement will be stored as Envelope.payload. Envelope.payloadType is always \"application/vnd.in-toto+json\".",
                    {
                      "$ul": [
                        "**_type**: Always \"https://in-toto.io/Statement/v0.1\".",
                        "**predicateType**: \"https://slsa.dev/provenance/v0.1\" for SlsaProvenance.",
                        [
                          "**provenance**",
                          {
                            "$ul": [
                              [
                                "**builderConfig**",
                                {
                                  "$ul": [
                                    "**id**"
                                  ]
                                }
                              ],
                              "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
                              [
                                "**metadata**: Other properties of the build.",
                                {
                                  "$ul": [
                                    "**buildFinishedOn**: The timestamp of when the build completed.",
                                    "**buildInvocationId**: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
                                    "**buildStartedOn**: The timestamp of when the build started.",
                                    [
                                      "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                      {
                                        "$ul": [
                                          "**arguments**: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
                                          "**environment**: If true, the builder claims that recipe.environment is claimed to be complete.",
                                          "**materials**: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
                                        ]
                                      }
                                    ],
                                    "**reproducible**: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
                                  ]
                                }
                              ],
                              [
                                "**recipe**: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
                                {
                                  "$ul": [
                                    "**arguments**: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint.",
                                    "**definedInMaterial**: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
                                    "**entryPoint**: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
                                    "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy.",
                                    "**type**: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**slsaProvenance**: SlsaProvenance is the slsa provenance as defined by the slsa spec.",
                          {
                            "$ul": [
                              [
                                "**builder**: SlsaBuilder encapsulates the identity of the builder of this provenance.",
                                {
                                  "$ul": [
                                    "**id**: id is the id of the slsa provenance builder"
                                  ]
                                }
                              ],
                              "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on. This is considered to be incomplete unless metadata.completeness.materials is true. Unset or null is equivalent to empty.",
                              [
                                "**metadata**: Other properties of the build.",
                                {
                                  "$ul": [
                                    "**buildFinishedOn**: The timestamp of when the build completed.",
                                    "**buildInvocationId**: Identifies the particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis. The value SHOULD be globally unique, per in-toto Provenance spec.",
                                    "**buildStartedOn**: The timestamp of when the build started.",
                                    [
                                      "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                      {
                                        "$ul": [
                                          "**arguments**: If true, the builder claims that recipe.arguments is complete, meaning that all external inputs are properly captured in the recipe.",
                                          "**environment**: If true, the builder claims that recipe.environment is claimed to be complete.",
                                          "**materials**: If true, the builder claims that materials are complete, usually through some controls to prevent network access. Sometimes called \"hermetic\"."
                                        ]
                                      }
                                    ],
                                    "**reproducible**: If true, the builder claims that running the recipe on materials will produce bit-for-bit identical output."
                                  ]
                                }
                              ],
                              [
                                "**recipe**: Steps taken to build the artifact. For a TaskRun, typically each container corresponds to one step in the recipe.",
                                {
                                  "$ul": [
                                    "**arguments**: Collection of all external inputs that influenced the build on top of recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe type were \"make\", then this might be the flags passed to make aside from the target, which is captured in recipe.entryPoint. Depending on the recipe Type, the structure may be different.",
                                    "**definedInMaterial**: Index in materials containing the recipe steps that are not implied by recipe.type. For example, if the recipe type were \"make\", then this would point to the source containing the Makefile, not the make program itself. Set to -1 if the recipe doesn't come from a material, as zero is default unset value for int64.",
                                    "**entryPoint**: String identifying the entry point into the build. This is often a path to a configuration file and/or a target label within that file. The syntax and meaning are defined by recipe.type. For example, if the recipe type were \"make\", then this would reference the directory in which to run make as well as which target to use.",
                                    "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the recipe. Usually only needed for reproducing the build but not evaluated as part of policy. Depending on the recipe Type, the structure may be different.",
                                    "**type**: URI indicating what type of recipe was performed. It determines the meaning of recipe.entryPoint, recipe.arguments, recipe.environment, and materials."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**slsaProvenanceZeroTwo**: SlsaProvenanceZeroTwo is the slsa provenance as defined by the slsa spec. See full explanation of fields at slsa.dev/provenance/v0.2.",
                          {
                            "$ul": [
                              "**buildConfig**: Lists the steps in the build.",
                              "**buildType**: URI indicating what type of build was performed.",
                              [
                                "**builder**: Identifies the entity that executed the recipe, which is trusted to have correctly performed the operation and populated this provenance.",
                                {
                                  "$ul": [
                                    "**id**: URI indicating the builder’s identity."
                                  ]
                                }
                              ],
                              [
                                "**invocation**: Identifies the event that kicked off the build.",
                                {
                                  "$ul": [
                                    [
                                      "**configSource**: Describes where the config file that kicked off the build came from. This is effectively a pointer to the source where buildConfig came from.",
                                      {
                                        "$ul": [
                                          "**digest**: Collection of cryptographic digests for the contents of the artifact specified by invocation.configSource.uri.",
                                          "**entryPoint**: String identifying the entry point into the build.",
                                          "**uri**: URI indicating the identity of the source of the config."
                                        ]
                                      }
                                    ],
                                    "**environment**: Any other builder-controlled inputs necessary for correctly evaluating the build.",
                                    "**parameters**: Collection of all external inputs that influenced the build on top of invocation.configSource."
                                  ]
                                }
                              ],
                              "**materials**: The collection of artifacts that influenced the build including sources, dependencies, build tools, base images, and so on.",
                              [
                                "**metadata**: Other properties of the build.",
                                {
                                  "$ul": [
                                    "**buildFinishedOn**: The timestamp of when the build completed.",
                                    "**buildInvocationId**: Identifies this particular build invocation, which can be useful for finding associated logs or other ad-hoc analysis.",
                                    "**buildStartedOn**: The timestamp of when the build started.",
                                    [
                                      "**completeness**: Indicates that the builder claims certain fields in this message to be complete.",
                                      {
                                        "$ul": [
                                          "**environment**: If true, the builder claims that invocation.environment is complete.",
                                          "**materials**: If true, the builder claims that materials is complete.",
                                          "**parameters**: If true, the builder claims that invocation.parameters is complete."
                                        ]
                                      }
                                    ],
                                    "**reproducible**: If true, the builder claims that running invocation on materials will produce bit-for-bit identical output."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**subject**: subject is the subjects of the intoto statement"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**envelope**: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
              {
                "$ul": [
                  "**payload**: The bytes being signed",
                  "**payloadType**: The type of payload being signed",
                  "**signatures**: The signatures over the payload"
                ]
              }
            ],
            [
              "**installation**: This represents how a particular software package may be installed on a system.",
              {
                "$ul": [
                  "**architecture**: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
                  "**cpeUri**: Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
                  [
                    "**license**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**location**: All of the places within the filesystem versions of this package have been found.",
                  "**name**: Output only. The name of the installed package.",
                  "**packageType**: Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
                  [
                    "**version**: Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
                    {
                      "$ul": [
                        "**epoch**: Used to correct mistakes in the version numbering scheme.",
                        "**inclusive**: Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
                        "**kind**: Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
                        "**name**: The main part of the version name.",
                        "**revision**: The iteration of the package build from the above version."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**kind**: Output only. This explicitly denotes which of the `Occurrence` details are specified. This field can be used as a filter in list requests.",
            "**name**: Output only. The name of the `Occurrence` in the form \"projects/{project_id}/occurrences/{OCCURRENCE_ID}\"",
            "**noteName**: An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{NOTE_ID}\" This field can be used as a filter in list requests.",
            "**remediation**: A description of actions that can be taken to remedy the `Note`",
            [
              "**resource**:  Resource is an entity that can have metadata. E.g., a Docker image.",
              {
                "$ul": [
                  [
                    "**contentHash**: Container message for hash values.",
                    {
                      "$ul": [
                        "**type**: The type of hash that was performed.",
                        "**value**: The hash value."
                      ]
                    }
                  ],
                  "**name**: The name of the resource. E.g., the name of a Docker image - \"Debian\".",
                  "**uri**: The unique URI of the resource. E.g., \"https://gcr.io/project/image@sha256:foo\" for a Docker image."
                ]
              }
            ],
            "**resourceUrl**: The unique URL of the image or the container for which the `Occurrence` applies. For example, https://gcr.io/project/image@sha256:foo This field can be used as a filter in list requests.",
            [
              "**sbom**: DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
              {
                "$ul": [
                  "**createTime**: Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard",
                  "**creatorComment**: A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields",
                  "**creators**: Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
                  "**documentComment**: A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document",
                  "**externalDocumentRefs**: Identify any external SPDX documents referenced within this SPDX document",
                  "**id**: Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
                  "**licenseListVersion**: A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created",
                  "**namespace**: Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
                  "**title**: Identify name of this document as designated by creator"
                ]
              }
            ],
            [
              "**sbomReference**: The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.",
              {
                "$ul": [
                  [
                    "**payload**: The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.",
                    {
                      "$ul": [
                        "**_type**: Identifier for the schema of the Statement.",
                        [
                          "**predicate**: A predicate which describes the SBOM being referenced.",
                          {
                            "$ul": [
                              "**digest**: A map of algorithm to digest of the contents of the SBOM.",
                              "**location**: The location of the SBOM.",
                              "**mimeType**: The mime type of the SBOM.",
                              "**referrerId**: The person or system referring this predicate to the consumer."
                            ]
                          }
                        ],
                        "**predicateType**: URI identifying the type of the Predicate.",
                        "**subject**: Set of software artifacts that the attestation applies to. Each element represents a single software artifact."
                      ]
                    }
                  ],
                  "**payloadType**: The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.",
                  "**signatures**: The signatures over the payload."
                ]
              }
            ],
            [
              "**spdxFile**: FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
              {
                "$ul": [
                  "**attributions**: This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
                  "**comment**: This field provides a place for the SPDX file creator to record any general comments about the file",
                  "**contributors**: This field provides a place for the SPDX file creator to record file contributors",
                  "**copyright**: Identify the copyright holder of the file, as well as any dates present",
                  "**filesLicenseInfo**: This field contains the license information actually found in the file, if any",
                  "**id**: Uniquely identify any element in an SPDX document which may be referenced by other elements",
                  [
                    "**licenseConcluded**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**notice**: This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file"
                ]
              }
            ],
            [
              "**spdxPackage**: PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
              {
                "$ul": [
                  "**comment**: A place for the SPDX file creator to record any general comments about the package being described",
                  "**filename**: Provide the actual file name of the package, or path of the directory being treated as a package",
                  "**homePage**: Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
                  "**id**: Uniquely identify any element in an SPDX document which may be referenced by other elements",
                  [
                    "**licenseConcluded**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**packageType**: Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
                  "**sourceInfo**: Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package",
                  "**summaryDescription**: Output only. A short description of the package",
                  "**title**: Output only. Identify the full name of the package as given by the Package Originator",
                  "**version**: Output only. Identify the version of the package"
                ]
              }
            ],
            [
              "**spdxRelationship**: RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
              {
                "$ul": [
                  "**comment**: A place for the SPDX file creator to record any general comments about the relationship",
                  "**source**: Also referred to as SPDXRef-A The source SPDX element (file, package, etc)",
                  "**target**: Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it",
                  "**type**: Output only. The type of relationship between the source and target SPDX elements"
                ]
              }
            ],
            "**updateTime**: Output only. The time this `Occurrence` was last updated.",
            [
              "**upgrade**: An Upgrade Occurrence represents that a specific resource_url could install a specific upgrade. This presence is supplied via local sources (i.e. it is present in the mirror and the running system has noticed its availability).",
              {
                "$ul": [
                  [
                    "**distribution**: The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
                    {
                      "$ul": [
                        "**classification**: The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.",
                        "**cpeUri**: Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
                        "**cve**: The cve that would be resolved by this upgrade.",
                        "**severity**: The severity as specified by the upstream operating system."
                      ]
                    }
                  ],
                  "**package**: Required - The package this Upgrade is for.",
                  [
                    "**parsedVersion**: Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
                    {
                      "$ul": [
                        "**epoch**: Used to correct mistakes in the version numbering scheme.",
                        "**inclusive**: Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
                        "**kind**: Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
                        "**name**: The main part of the version name.",
                        "**revision**: The iteration of the package build from the above version."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**vulnerabilityDetails**: Used by Occurrence to point to where the vulnerability exists and how to fix it.",
              {
                "$ul": [
                  "**cvssScore**: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
                  [
                    "**cvssV2**: Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
                    {
                      "$ul": [
                        "**attackComplexity**: Defined in CVSS v3, CVSS v2",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
                        "**authentication**: Defined in CVSS v2",
                        "**availabilityImpact**: Defined in CVSS v3, CVSS v2",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**: Defined in CVSS v3, CVSS v2",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**: Defined in CVSS v3, CVSS v2",
                        "**privilegesRequired**: Defined in CVSS v3",
                        "**scope**: Defined in CVSS v3",
                        "**userInteraction**: Defined in CVSS v3"
                      ]
                    }
                  ],
                  [
                    "**cvssV3**: Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
                    {
                      "$ul": [
                        "**attackComplexity**: Defined in CVSS v3, CVSS v2",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
                        "**authentication**: Defined in CVSS v2",
                        "**availabilityImpact**: Defined in CVSS v3, CVSS v2",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**: Defined in CVSS v3, CVSS v2",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**: Defined in CVSS v3, CVSS v2",
                        "**privilegesRequired**: Defined in CVSS v3",
                        "**scope**: Defined in CVSS v3",
                        "**userInteraction**: Defined in CVSS v3"
                      ]
                    }
                  ],
                  "**cvssVersion**: Output only. CVSS version used to populate cvss_score and severity.",
                  "**effectiveSeverity**: The distro assigned severity for this vulnerability when that is available and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple package issues for this vulnerability, they can have different effective severities because some might come from the distro and some might come from installed language packs (e.g. Maven JARs or Go binaries). For this reason, it is advised to use the effective severity on the PackageIssue level, as this field may eventually be deprecated. In the case where multiple PackageIssues have different effective severities, the one set here will be the highest severity of any of the PackageIssues.",
                  "**extraDetails**: Occurrence-specific extra details about the vulnerability.",
                  "**packageIssue**: The set of affected locations and their fixes (if available) within the associated resource.",
                  "**severity**: Output only. The note provider assigned Severity of the vulnerability.",
                  "**type**: The type of package; whether native or non native(ruby gems, node.js packages etc). This may be deprecated in the future because we can have multiple PackageIssues with different package types.",
                  [
                    "**vexAssessment**: VexAssessment provides all publisher provided Vex information that is related to this vulnerability.",
                    {
                      "$ul": [
                        "**cve**: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.",
                        "**impacts**: Contains information about the impact of this vulnerability, this will change with time.",
                        [
                          "**justification**: Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
                          {
                            "$ul": [
                              "**details**: Additional details on why this justification was chosen.",
                              "**justificationType**: The justification type for this vulnerability."
                            ]
                          }
                        ],
                        "**noteName**: The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.",
                        "**relatedUris**: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.",
                        "**remediations**: Specifies details on how to handle (and presumably, fix) a vulnerability.",
                        "**state**: Provides the state of this Vulnerability assessment.",
                        "**vulnerabilityId**: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
