{
  "name": "containeranalysis_providers_notes_patch",
  "description": "Updates an existing `Note`.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The name of the note. Should be of the form \"projects/{provider_id}/notes/{note_id}\"."
      },
      "updateMask": {
        "type": "string",
        "description": "The fields to update."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Note"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Note": {
        "description": "Provides a detailed description of a `Note`.",
        "properties": {
          "attestationAuthority": {
            "$ref": "#/$defs/AttestationAuthority"
          },
          "baseImage": {
            "$ref": "#/$defs/Basis"
          },
          "buildType": {
            "$ref": "#/$defs/BuildType"
          },
          "compliance": {
            "$ref": "#/$defs/ComplianceNote"
          },
          "createTime": {
            "description": "Output only. The time this note was created. This field can be used as a filter in list requests.",
            "format": "google-datetime",
            "type": "string"
          },
          "deployable": {
            "$ref": "#/$defs/Deployable"
          },
          "discovery": {
            "$ref": "#/$defs/Discovery"
          },
          "dsseAttestation": {
            "$ref": "#/$defs/DSSEAttestationNote"
          },
          "expirationTime": {
            "description": "Time of expiration for this note, null if note does not expire.",
            "format": "google-datetime",
            "type": "string"
          },
          "kind": {
            "description": "Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.",
            "enum": [
              "KIND_UNSPECIFIED",
              "PACKAGE_VULNERABILITY",
              "BUILD_DETAILS",
              "IMAGE_BASIS",
              "PACKAGE_MANAGER",
              "DEPLOYABLE",
              "DISCOVERY",
              "ATTESTATION_AUTHORITY",
              "UPGRADE",
              "COMPLIANCE",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "DSSE_ATTESTATION",
              "VULNERABILITY_ASSESSMENT",
              "SBOM_REFERENCE"
            ],
            "type": "string"
          },
          "longDescription": {
            "description": "A detailed description of this `Note`.",
            "type": "string"
          },
          "name": {
            "description": "The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"",
            "type": "string"
          },
          "package": {
            "$ref": "#/$defs/Package"
          },
          "relatedUrl": {
            "description": "URLs associated with this note",
            "items": {
              "$ref": "#/$defs/RelatedUrl"
            },
            "type": "array"
          },
          "sbom": {
            "$ref": "#/$defs/DocumentNote"
          },
          "sbomReference": {
            "$ref": "#/$defs/SBOMReferenceNote"
          },
          "shortDescription": {
            "description": "A one sentence description of this `Note`.",
            "type": "string"
          },
          "spdxFile": {
            "$ref": "#/$defs/FileNote"
          },
          "spdxPackage": {
            "$ref": "#/$defs/PackageInfoNote"
          },
          "spdxRelationship": {
            "$ref": "#/$defs/RelationshipNote"
          },
          "updateTime": {
            "description": "Output only. The time this note was last updated. This field can be used as a filter in list requests.",
            "format": "google-datetime",
            "type": "string"
          },
          "upgrade": {
            "$ref": "#/$defs/UpgradeNote"
          },
          "vulnerabilityAssessment": {
            "$ref": "#/$defs/VulnerabilityAssessmentNote"
          },
          "vulnerabilityType": {
            "$ref": "#/$defs/VulnerabilityType"
          }
        },
        "type": "object"
      },
      "AttestationAuthority": {
        "description": "Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `AttestationAuthority` for \"QA\" and one for \"build\". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.",
        "properties": {
          "hint": {
            "$ref": "#/$defs/AttestationAuthorityHint"
          }
        },
        "type": "object"
      },
      "AttestationAuthorityHint": {
        "description": "This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.",
        "properties": {
          "humanReadableName": {
            "description": "The human readable name of this Attestation Authority, for example \"qa\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Basis": {
        "description": "Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.",
        "properties": {
          "fingerprint": {
            "$ref": "#/$defs/Fingerprint"
          },
          "resourceUrl": {
            "description": "The resource_url for the resource representing the basis of associated occurrence images.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Fingerprint": {
        "description": "A set of properties that uniquely identify a given Docker image.",
        "properties": {
          "v1Name": {
            "description": "The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "v2Blob": {
            "description": "The ordered list of v2 blobs that represent a given image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "v2Name": {
            "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildType": {
        "description": "Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.",
        "properties": {
          "builderVersion": {
            "description": "Version of the builder which produced this Note.",
            "type": "string"
          },
          "signature": {
            "$ref": "#/$defs/BuildSignature"
          }
        },
        "type": "object"
      },
      "BuildSignature": {
        "description": "Message encapsulating the signature of the verified build.",
        "properties": {
          "keyId": {
            "description": "An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).",
            "type": "string"
          },
          "keyType": {
            "description": "The type of the key, either stored in `public_key` or referenced in `key_id`",
            "enum": [
              "KEY_TYPE_UNSPECIFIED",
              "PGP_ASCII_ARMORED",
              "PKIX_PEM"
            ],
            "type": "string"
          },
          "publicKey": {
            "description": "Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
            "type": "string"
          },
          "signature": {
            "description": "Signature of the related `BuildProvenance`, encoded in a base64 string.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComplianceNote": {
        "description": "ComplianceNote encapsulates all information about a specific compliance check.",
        "properties": {
          "cisBenchmark": {
            "$ref": "#/$defs/CisBenchmark"
          },
          "description": {
            "description": "A description about this compliance check.",
            "type": "string"
          },
          "rationale": {
            "description": "A rationale for the existence of this compliance check.",
            "type": "string"
          },
          "remediation": {
            "description": "A description of remediation steps if the compliance check fails.",
            "type": "string"
          },
          "scanInstructions": {
            "description": "Serialized scan instructions with a predefined format.",
            "format": "byte",
            "type": "string"
          },
          "title": {
            "description": "The title that identifies this compliance check.",
            "type": "string"
          },
          "version": {
            "description": "The OS and config versions the benchmark applies to.",
            "items": {
              "$ref": "#/$defs/ComplianceVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CisBenchmark": {
        "description": "A compliance check that is a CIS benchmark.",
        "properties": {
          "profileLevel": {
            "description": "The profile level of this CIS benchmark check.",
            "format": "int32",
            "type": "integer"
          },
          "severity": {
            "description": "The severity level of this CIS benchmark check.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComplianceVersion": {
        "description": "Describes the CIS benchmark version that is applicable to a given OS and os version.",
        "properties": {
          "benchmarkDocument": {
            "description": "The name of the document that defines this benchmark, e.g. \"CIS Container-Optimized OS\".",
            "type": "string"
          },
          "cpeUri": {
            "description": "The CPE URI (https://cpe.mitre.org/specification/) this benchmark is applicable to.",
            "type": "string"
          },
          "version": {
            "description": "The version of the benchmark. This is set to the version of the OS-specific CIS document the benchmark is defined in.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Deployable": {
        "description": "An artifact that can be deployed in some runtime.",
        "properties": {
          "resourceUri": {
            "description": "Resource URI for the artifact being deployed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Discovery": {
        "description": "A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.",
        "properties": {
          "analysisKind": {
            "description": "The kind of analysis that is handled by this discovery.",
            "enum": [
              "KIND_UNSPECIFIED",
              "PACKAGE_VULNERABILITY",
              "BUILD_DETAILS",
              "IMAGE_BASIS",
              "PACKAGE_MANAGER",
              "DEPLOYABLE",
              "DISCOVERY",
              "ATTESTATION_AUTHORITY",
              "UPGRADE",
              "COMPLIANCE",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "DSSE_ATTESTATION",
              "VULNERABILITY_ASSESSMENT",
              "SBOM_REFERENCE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DSSEAttestationNote": {
        "description": "A note describing an attestation",
        "properties": {
          "hint": {
            "$ref": "#/$defs/DSSEHint"
          }
        },
        "type": "object"
      },
      "DSSEHint": {
        "description": "This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
        "properties": {
          "humanReadableName": {
            "description": "Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Package": {
        "description": "This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.",
        "properties": {
          "architecture": {
            "description": "The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
            "enum": [
              "ARCHITECTURE_UNSPECIFIED",
              "X86",
              "X64"
            ],
            "type": "string"
          },
          "cpeUri": {
            "description": "The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
            "type": "string"
          },
          "description": {
            "description": "The description of this package.",
            "type": "string"
          },
          "digest": {
            "description": "Hash value, typically a file digest, that allows unique identification a specific package.",
            "items": {
              "$ref": "#/$defs/Digest"
            },
            "type": "array"
          },
          "distribution": {
            "description": "The various channels by which a package is distributed.",
            "items": {
              "$ref": "#/$defs/Distribution"
            },
            "type": "array"
          },
          "license": {
            "$ref": "#/$defs/License"
          },
          "maintainer": {
            "description": "A freeform text denoting the maintainer of this package.",
            "type": "string"
          },
          "name": {
            "description": "The name of the package.",
            "type": "string"
          },
          "packageType": {
            "description": "The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
            "type": "string"
          },
          "url": {
            "description": "The homepage for this package.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "Digest": {
        "description": "Digest information.",
        "properties": {
          "algo": {
            "description": "`SHA1`, `SHA512` etc.",
            "type": "string"
          },
          "digestBytes": {
            "description": "Value of the digest.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Distribution": {
        "description": "This represents a particular channel of distribution for a given package. e.g. Debian's jessie-backports dpkg mirror",
        "properties": {
          "architecture": {
            "description": "The CPU architecture for which packages in this distribution channel were built",
            "enum": [
              "ARCHITECTURE_UNSPECIFIED",
              "X86",
              "X64"
            ],
            "type": "string"
          },
          "cpeUri": {
            "description": "The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
            "type": "string"
          },
          "description": {
            "description": "The distribution channel-specific description of this package.",
            "type": "string"
          },
          "latestVersion": {
            "$ref": "#/$defs/Version"
          },
          "maintainer": {
            "description": "A freeform string denoting the maintainer of this package.",
            "type": "string"
          },
          "url": {
            "description": "The distribution channel-specific homepage for this package.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Version": {
        "description": "Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
        "properties": {
          "epoch": {
            "description": "Used to correct mistakes in the version numbering scheme.",
            "format": "int32",
            "type": "integer"
          },
          "inclusive": {
            "description": "Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
            "type": "boolean"
          },
          "kind": {
            "description": "Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
            "enum": [
              "NORMAL",
              "MINIMUM",
              "MAXIMUM"
            ],
            "type": "string"
          },
          "name": {
            "description": "The main part of the version name.",
            "type": "string"
          },
          "revision": {
            "description": "The iteration of the package build from the above version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "License": {
        "description": "License information.",
        "properties": {
          "comments": {
            "description": "Comments",
            "type": "string"
          },
          "expression": {
            "description": "Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelatedUrl": {
        "description": "Metadata for any related URL information",
        "properties": {
          "label": {
            "description": "Label to describe usage of the URL",
            "type": "string"
          },
          "url": {
            "description": "Specific URL to associate with the note",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentNote": {
        "description": "DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
        "properties": {
          "dataLicence": {
            "description": "Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields (\"SPDX-Metadata\")",
            "type": "string"
          },
          "spdxVersion": {
            "description": "Provide a reference number that can be used to understand how to parse and interpret the rest of the file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBOMReferenceNote": {
        "description": "The note representing an SBOM reference.",
        "properties": {
          "format": {
            "description": "The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...",
            "type": "string"
          },
          "version": {
            "description": "The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileNote": {
        "description": "FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
        "properties": {
          "checksum": {
            "description": "Provide a unique identifier to match analysis information on each specific file in a package",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fileType": {
            "description": "This field provides information about the type of file identified",
            "enum": [
              "FILE_TYPE_UNSPECIFIED",
              "SOURCE",
              "BINARY",
              "ARCHIVE",
              "APPLICATION",
              "AUDIO",
              "IMAGE",
              "TEXT",
              "VIDEO",
              "DOCUMENTATION",
              "SPDX",
              "OTHER"
            ],
            "type": "string"
          },
          "title": {
            "description": "Identify the full path and filename that corresponds to the file information in this section",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageInfoNote": {
        "description": "PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
        "properties": {
          "analyzed": {
            "description": "Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document",
            "type": "boolean"
          },
          "attribution": {
            "description": "A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts",
            "type": "string"
          },
          "checksum": {
            "description": "Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file",
            "type": "string"
          },
          "copyright": {
            "description": "Identify the copyright holders of the package, as well as any dates present",
            "type": "string"
          },
          "detailedDescription": {
            "description": "A more detailed description of the package",
            "type": "string"
          },
          "downloadLocation": {
            "description": "This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created",
            "type": "string"
          },
          "externalRefs": {
            "description": "ExternalRef",
            "items": {
              "$ref": "#/$defs/ExternalRef"
            },
            "type": "array"
          },
          "filesLicenseInfo": {
            "description": "Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "homePage": {
            "description": "Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
            "type": "string"
          },
          "licenseDeclared": {
            "$ref": "#/$defs/License"
          },
          "originator": {
            "description": "If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came",
            "type": "string"
          },
          "packageType": {
            "description": "The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
            "type": "string"
          },
          "summaryDescription": {
            "description": "A short description of the package",
            "type": "string"
          },
          "supplier": {
            "description": "Identify the actual distribution source for the package/directory identified in the SPDX file",
            "type": "string"
          },
          "title": {
            "description": "Identify the full name of the package as given by the Package Originator",
            "type": "string"
          },
          "verificationCode": {
            "description": "This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file",
            "type": "string"
          },
          "version": {
            "description": "Identify the version of the package",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalRef": {
        "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package",
        "properties": {
          "category": {
            "description": "An External Reference allows a Package to reference an external source of additional information, metadata, enumerations, asset identifiers, or downloadable content believed to be relevant to the Package",
            "enum": [
              "CATEGORY_UNSPECIFIED",
              "SECURITY",
              "PACKAGE_MANAGER",
              "PERSISTENT_ID",
              "OTHER"
            ],
            "type": "string"
          },
          "comment": {
            "description": "Human-readable information about the purpose and target of the reference",
            "type": "string"
          },
          "locator": {
            "description": "The unique string with no spaces necessary to access the package-specific information, metadata, or content within the target location",
            "type": "string"
          },
          "type": {
            "description": "Type of category (e.g. 'npm' for the PACKAGE_MANAGER category)",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipNote": {
        "description": "RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
        "properties": {
          "type": {
            "description": "The type of relationship between the source and target SPDX elements",
            "enum": [
              "RELATIONSHIP_TYPE_UNSPECIFIED",
              "DESCRIBES",
              "DESCRIBED_BY",
              "CONTAINS",
              "CONTAINED_BY",
              "DEPENDS_ON",
              "DEPENDENCY_OF",
              "DEPENDENCY_MANIFEST_OF",
              "BUILD_DEPENDENCY_OF",
              "DEV_DEPENDENCY_OF",
              "OPTIONAL_DEPENDENCY_OF",
              "PROVIDED_DEPENDENCY_OF",
              "TEST_DEPENDENCY_OF",
              "RUNTIME_DEPENDENCY_OF",
              "EXAMPLE_OF",
              "GENERATES",
              "GENERATED_FROM",
              "ANCESTOR_OF",
              "DESCENDANT_OF",
              "VARIANT_OF",
              "DISTRIBUTION_ARTIFACT",
              "PATCH_FOR",
              "PATCH_APPLIED",
              "COPY_OF",
              "FILE_ADDED",
              "FILE_DELETED",
              "FILE_MODIFIED",
              "EXPANDED_FROM_ARCHIVE",
              "DYNAMIC_LINK",
              "STATIC_LINK",
              "DATA_FILE_OF",
              "TEST_CASE_OF",
              "BUILD_TOOL_OF",
              "DEV_TOOL_OF",
              "TEST_OF",
              "TEST_TOOL_OF",
              "DOCUMENTATION_OF",
              "OPTIONAL_COMPONENT_OF",
              "METAFILE_OF",
              "PACKAGE_OF",
              "AMENDS",
              "PREREQUISITE_FOR",
              "HAS_PREREQUISITE",
              "OTHER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "UpgradeNote": {
        "description": "An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.",
        "properties": {
          "distributions": {
            "description": "Metadata about the upgrade for each specific operating system.",
            "items": {
              "$ref": "#/$defs/UpgradeDistribution"
            },
            "type": "array"
          },
          "package": {
            "description": "Required - The package this Upgrade is for.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "UpgradeDistribution": {
        "description": "The Upgrade Distribution represents metadata about the Upgrade for each operating system (CPE). Some distributions have additional metadata around updates, classifying them into various categories and severities.",
        "properties": {
          "classification": {
            "description": "The operating system classification of this Upgrade, as specified by the upstream operating system upgrade feed.",
            "type": "string"
          },
          "cpeUri": {
            "description": "Required - The specific operating system this metadata applies to. See https://cpe.mitre.org/specification/.",
            "type": "string"
          },
          "cve": {
            "description": "The cve that would be resolved by this upgrade.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "severity": {
            "description": "The severity as specified by the upstream operating system.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityAssessmentNote": {
        "description": "A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.",
        "properties": {
          "assessment": {
            "$ref": "#/$defs/Assessment"
          },
          "languageCode": {
            "description": "Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.",
            "type": "string"
          },
          "longDescription": {
            "description": "A detailed description of this Vex.",
            "type": "string"
          },
          "product": {
            "$ref": "#/$defs/Product"
          },
          "publisher": {
            "$ref": "#/$defs/Publisher"
          },
          "shortDescription": {
            "description": "A one sentence description of this Vex.",
            "type": "string"
          },
          "title": {
            "description": "The title of the note. E.g. `Vex-Debian-11.4`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Assessment": {
        "description": "Assessment provides all information that is related to a single vulnerability for this product.",
        "properties": {
          "cve": {
            "description": "Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.",
            "type": "string"
          },
          "impacts": {
            "description": "Contains information about the impact of this vulnerability, this will change with time.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "justification": {
            "$ref": "#/$defs/Justification"
          },
          "longDescription": {
            "description": "A detailed description of this Vex.",
            "type": "string"
          },
          "relatedUris": {
            "description": "Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.",
            "items": {
              "$ref": "#/$defs/URI"
            },
            "type": "array"
          },
          "remediations": {
            "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
            "items": {
              "$ref": "#/$defs/Remediation"
            },
            "type": "array"
          },
          "shortDescription": {
            "description": "A one sentence description of this Vex.",
            "type": "string"
          },
          "state": {
            "description": "Provides the state of this Vulnerability assessment.",
            "enum": [
              "STATE_UNSPECIFIED",
              "AFFECTED",
              "NOT_AFFECTED",
              "FIXED",
              "UNDER_INVESTIGATION"
            ],
            "type": "string"
          },
          "vulnerabilityId": {
            "description": "The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Justification": {
        "description": "Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
        "properties": {
          "details": {
            "description": "Additional details on why this justification was chosen.",
            "type": "string"
          },
          "justificationType": {
            "description": "The justification type for this vulnerability.",
            "enum": [
              "JUSTIFICATION_TYPE_UNSPECIFIED",
              "COMPONENT_NOT_PRESENT",
              "VULNERABLE_CODE_NOT_PRESENT",
              "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH",
              "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
              "INLINE_MITIGATIONS_ALREADY_EXIST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "URI": {
        "description": "An URI message.",
        "properties": {
          "label": {
            "description": "A label for the URI.",
            "type": "string"
          },
          "uri": {
            "description": "The unique resource identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Remediation": {
        "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
        "properties": {
          "details": {
            "description": "Contains a comprehensive human-readable discussion of the remediation.",
            "type": "string"
          },
          "remediationType": {
            "description": "The type of remediation that can be applied.",
            "enum": [
              "REMEDIATION_TYPE_UNSPECIFIED",
              "MITIGATION",
              "NO_FIX_PLANNED",
              "NONE_AVAILABLE",
              "VENDOR_FIX",
              "WORKAROUND"
            ],
            "type": "string"
          },
          "remediationUri": {
            "$ref": "#/$defs/URI"
          }
        },
        "type": "object"
      },
      "Product": {
        "description": "Product contains information about a product and how to uniquely identify it.",
        "properties": {
          "id": {
            "description": "Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.",
            "type": "string"
          },
          "identifierHelper": {
            "$ref": "#/$defs/IdentifierHelper"
          },
          "name": {
            "description": "Name of the product.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IdentifierHelper": {
        "description": "Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.",
        "properties": {
          "field": {
            "description": "The field that is set in the API proto.",
            "enum": [
              "IDENTIFIER_HELPER_FIELD_UNSPECIFIED",
              "GENERIC_URI"
            ],
            "type": "string"
          },
          "genericUri": {
            "description": "Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Publisher": {
        "description": "Publisher contains information about the publisher of this Note.",
        "properties": {
          "issuingAuthority": {
            "description": "Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.",
            "type": "string"
          },
          "name": {
            "description": "Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.",
            "type": "string"
          },
          "publisherNamespace": {
            "description": "The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityType": {
        "description": "VulnerabilityType provides metadata about a security vulnerability.",
        "properties": {
          "cvssScore": {
            "description": "The CVSS score for this Vulnerability.",
            "format": "float",
            "type": "number"
          },
          "cvssV2": {
            "$ref": "#/$defs/CVSS"
          },
          "cvssVersion": {
            "description": "CVSS version used to populate cvss_score and severity.",
            "enum": [
              "CVSS_VERSION_UNSPECIFIED",
              "CVSS_VERSION_2",
              "CVSS_VERSION_3"
            ],
            "type": "string"
          },
          "cwe": {
            "description": "A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "details": {
            "description": "All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.",
            "items": {
              "$ref": "#/$defs/Detail"
            },
            "type": "array"
          },
          "severity": {
            "description": "Note provider assigned impact of the vulnerability",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "CVSS": {
        "description": "Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
        "properties": {
          "attackComplexity": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "ATTACK_COMPLEXITY_UNSPECIFIED",
              "ATTACK_COMPLEXITY_LOW",
              "ATTACK_COMPLEXITY_HIGH",
              "ATTACK_COMPLEXITY_MEDIUM"
            ],
            "type": "string"
          },
          "attackVector": {
            "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
            "enum": [
              "ATTACK_VECTOR_UNSPECIFIED",
              "ATTACK_VECTOR_NETWORK",
              "ATTACK_VECTOR_ADJACENT",
              "ATTACK_VECTOR_LOCAL",
              "ATTACK_VECTOR_PHYSICAL"
            ],
            "type": "string"
          },
          "authentication": {
            "description": "Defined in CVSS v2",
            "enum": [
              "AUTHENTICATION_UNSPECIFIED",
              "AUTHENTICATION_MULTIPLE",
              "AUTHENTICATION_SINGLE",
              "AUTHENTICATION_NONE"
            ],
            "type": "string"
          },
          "availabilityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "baseScore": {
            "description": "The base score is a function of the base metric scores.",
            "format": "float",
            "type": "number"
          },
          "confidentialityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "exploitabilityScore": {
            "format": "float",
            "type": "number"
          },
          "impactScore": {
            "format": "float",
            "type": "number"
          },
          "integrityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "privilegesRequired": {
            "description": "Defined in CVSS v3",
            "enum": [
              "PRIVILEGES_REQUIRED_UNSPECIFIED",
              "PRIVILEGES_REQUIRED_NONE",
              "PRIVILEGES_REQUIRED_LOW",
              "PRIVILEGES_REQUIRED_HIGH"
            ],
            "type": "string"
          },
          "scope": {
            "description": "Defined in CVSS v3",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_UNCHANGED",
              "SCOPE_CHANGED"
            ],
            "type": "string"
          },
          "userInteraction": {
            "description": "Defined in CVSS v3",
            "enum": [
              "USER_INTERACTION_UNSPECIFIED",
              "USER_INTERACTION_NONE",
              "USER_INTERACTION_REQUIRED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Detail": {
        "description": "Identifies all occurrences of this vulnerability in the package for a specific distro/location For example: glibc in cpe:/o:debian:debian_linux:8 for versions 2.1 - 2.2",
        "properties": {
          "cpeUri": {
            "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) in which the vulnerability manifests. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "description": {
            "description": "A vendor-specific description of this note.",
            "type": "string"
          },
          "fixedLocation": {
            "$ref": "#/$defs/VulnerabilityLocation"
          },
          "isObsolete": {
            "description": "Whether this Detail is obsolete. Occurrences are expected not to point to obsolete details.",
            "type": "boolean"
          },
          "maxAffectedVersion": {
            "$ref": "#/$defs/Version"
          },
          "minAffectedVersion": {
            "$ref": "#/$defs/Version"
          },
          "package": {
            "description": "The name of the package where the vulnerability was found. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "packageType": {
            "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)",
            "type": "string"
          },
          "severityName": {
            "description": "The severity (eg: distro assigned severity) for this vulnerability.",
            "type": "string"
          },
          "source": {
            "description": "The source from which the information in this Detail was obtained.",
            "type": "string"
          },
          "vendor": {
            "description": "The vendor of the product. e.g. \"google\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityLocation": {
        "description": "The location of the vulnerability",
        "properties": {
          "cpeUri": {
            "description": "The cpe_uri in [cpe format] (https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "fileLocation": {
            "description": "The file location at which this package was found.",
            "items": {
              "$ref": "#/$defs/FileLocation"
            },
            "type": "array"
          },
          "package": {
            "description": "The package being described.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "FileLocation": {
        "description": "Indicates the location at which a package was found.",
        "properties": {
          "filePath": {
            "description": "For jars that are contained inside .war files, this filepath can indicate the path to war file combined with the path to jar file.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://containeranalysis.googleapis.com//v1alpha1/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Provides a detailed description of a `Note`.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attestationAuthority**: Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `AttestationAuthority` for \"QA\" and one for \"build\". This Note is intended to act strictly as a grouping mechanism for the attached Occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an Occurrence to a given Note. It also provides a single point of lookup to find all attached Attestation Occurrences, even if they don't all live in the same project.",
              {
                "$ul": [
                  [
                    "**hint**: This submessage provides human-readable hints about the purpose of the AttestationAuthority. Because the name of a Note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should NOT be used to look up AttestationAuthorities in security sensitive contexts, such as when looking up Attestations to verify.",
                    {
                      "$ul": [
                        "**humanReadableName**: The human readable name of this Attestation Authority, for example \"qa\"."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**baseImage**: Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g. a tag of the resource_url.",
              {
                "$ul": [
                  [
                    "**fingerprint**: A set of properties that uniquely identify a given Docker image.",
                    {
                      "$ul": [
                        "**v1Name**: The layer-id of the final layer in the Docker image's v1 representation. This field can be used as a filter in list requests.",
                        "**v2Blob**: The ordered list of v2 blobs that represent a given image.",
                        "**v2Name**: Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept. This field can be used as a filter in list requests."
                      ]
                    }
                  ],
                  "**resourceUrl**: The resource_url for the resource representing the basis of associated occurrence images."
                ]
              }
            ],
            [
              "**buildType**: Note holding the version of the provider's builder and the signature of the provenance message in linked BuildDetails.",
              {
                "$ul": [
                  "**builderVersion**: Version of the builder which produced this Note.",
                  [
                    "**signature**: Message encapsulating the signature of the verified build.",
                    {
                      "$ul": [
                        "**keyId**: An Id for the key used to sign. This could be either an Id for the key stored in `public_key` (such as the Id or fingerprint for a PGP key, or the CN for a cert), or a reference to an external key (such as a reference to a key in Cloud Key Management Service).",
                        "**keyType**: The type of the key, either stored in `public_key` or referenced in `key_id`",
                        "**publicKey**: Public key of the builder which can be used to verify that the related findings are valid and unchanged. If `key_type` is empty, this defaults to PEM encoded public keys. This field may be empty if `key_id` references an external key. For Cloud Build based signatures, this is a PEM encoded public key. To verify the Cloud Build signature, place the contents of this field into a file (public.pem). The signature field is base64-decoded into its binary representation in signature.bin, and the provenance bytes from `BuildDetails` are base64-decoded into a binary representation in signed.bin. OpenSSL can then verify the signature: `openssl sha256 -verify public.pem -signature signature.bin signed.bin`",
                        "**signature**: Signature of the related `BuildProvenance`, encoded in a base64 string."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**compliance**: ComplianceNote encapsulates all information about a specific compliance check.",
              {
                "$ul": [
                  [
                    "**cisBenchmark**: A compliance check that is a CIS benchmark.",
                    {
                      "$ul": [
                        "**profileLevel**: The profile level of this CIS benchmark check.",
                        "**severity**: The severity level of this CIS benchmark check."
                      ]
                    }
                  ],
                  "**description**: A description about this compliance check.",
                  "**rationale**: A rationale for the existence of this compliance check.",
                  "**remediation**: A description of remediation steps if the compliance check fails.",
                  "**scanInstructions**: Serialized scan instructions with a predefined format.",
                  "**title**: The title that identifies this compliance check.",
                  "**version**: The OS and config versions the benchmark applies to."
                ]
              }
            ],
            "**createTime**: Output only. The time this note was created. This field can be used as a filter in list requests.",
            [
              "**deployable**: An artifact that can be deployed in some runtime.",
              {
                "$ul": [
                  "**resourceUri**: Resource URI for the artifact being deployed."
                ]
              }
            ],
            [
              "**discovery**: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis. The occurrence's operation will indicate the status of the analysis. Absence of an occurrence linked to this note for a resource indicates that analysis hasn't started.",
              {
                "$ul": [
                  "**analysisKind**: The kind of analysis that is handled by this discovery."
                ]
              }
            ],
            [
              "**dsseAttestation**: A note describing an attestation",
              {
                "$ul": [
                  [
                    "**hint**: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
                    {
                      "$ul": [
                        "**humanReadableName**: Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\"."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**expirationTime**: Time of expiration for this note, null if note does not expire.",
            "**kind**: Output only. This explicitly denotes which kind of note is specified. This field can be used as a filter in list requests.",
            "**longDescription**: A detailed description of this `Note`.",
            "**name**: The name of the note in the form \"projects/{provider_project_id}/notes/{NOTE_ID}\"",
            [
              "**package**: This represents a particular package that is distributed over various channels. e.g. glibc (aka libc6) is distributed by many, at various versions.",
              {
                "$ul": [
                  "**architecture**: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
                  "**cpeUri**: The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
                  "**description**: The description of this package.",
                  "**digest**: Hash value, typically a file digest, that allows unique identification a specific package.",
                  "**distribution**: The various channels by which a package is distributed.",
                  [
                    "**license**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**maintainer**: A freeform text denoting the maintainer of this package.",
                  "**name**: The name of the package.",
                  "**packageType**: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
                  "**url**: The homepage for this package.",
                  [
                    "**version**: Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
                    {
                      "$ul": [
                        "**epoch**: Used to correct mistakes in the version numbering scheme.",
                        "**inclusive**: Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
                        "**kind**: Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
                        "**name**: The main part of the version name.",
                        "**revision**: The iteration of the package build from the above version."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**relatedUrl**: URLs associated with this note",
            [
              "**sbom**: DocumentNote represents an SPDX Document Creation Infromation section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
              {
                "$ul": [
                  "**dataLicence**: Compliance with the SPDX specification includes populating the SPDX fields therein with data related to such fields (\"SPDX-Metadata\")",
                  "**spdxVersion**: Provide a reference number that can be used to understand how to parse and interpret the rest of the file"
                ]
              }
            ],
            [
              "**sbomReference**: The note representing an SBOM reference.",
              {
                "$ul": [
                  "**format**: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...",
                  "**version**: The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3."
                ]
              }
            ],
            "**shortDescription**: A one sentence description of this `Note`.",
            [
              "**spdxFile**: FileNote represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
              {
                "$ul": [
                  "**checksum**: Provide a unique identifier to match analysis information on each specific file in a package",
                  "**fileType**: This field provides information about the type of file identified",
                  "**title**: Identify the full path and filename that corresponds to the file information in this section"
                ]
              }
            ],
            [
              "**spdxPackage**: PackageInfoNote represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
              {
                "$ul": [
                  "**analyzed**: Indicates whether the file content of this package has been available for or subjected to analysis when creating the SPDX document",
                  "**attribution**: A place for the SPDX data creator to record, at the package level, acknowledgements that may be needed to be communicated in some contexts",
                  "**checksum**: Provide an independently reproducible mechanism that permits unique identification of a specific package that correlates to the data in this SPDX file",
                  "**copyright**: Identify the copyright holders of the package, as well as any dates present",
                  "**detailedDescription**: A more detailed description of the package",
                  "**downloadLocation**: This section identifies the download Universal Resource Locator (URL), or a specific location within a version control system (VCS) for the package at the time that the SPDX file was created",
                  "**externalRefs**: ExternalRef",
                  "**filesLicenseInfo**: Contain the license the SPDX file creator has concluded as governing the This field is to contain a list of all licenses found in the package. The relationship between licenses (i.e., conjunctive, disjunctive) is not specified in this field – it is simply a listing of all licenses found",
                  "**homePage**: Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
                  [
                    "**licenseDeclared**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**originator**: If the package identified in the SPDX file originated from a different person or organization than identified as Package Supplier, this field identifies from where or whom the package originally came",
                  "**packageType**: The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
                  "**summaryDescription**: A short description of the package",
                  "**supplier**: Identify the actual distribution source for the package/directory identified in the SPDX file",
                  "**title**: Identify the full name of the package as given by the Package Originator",
                  "**verificationCode**: This field provides an independently reproducible mechanism identifying specific contents of a package based on the actual files (except the SPDX file itself, if it is included in the package) that make up each package and that correlates to the data in this SPDX file",
                  "**version**: Identify the version of the package"
                ]
              }
            ],
            [
              "**spdxRelationship**: RelationshipNote represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
              {
                "$ul": [
                  "**type**: The type of relationship between the source and target SPDX elements"
                ]
              }
            ],
            "**updateTime**: Output only. The time this note was last updated. This field can be used as a filter in list requests.",
            [
              "**upgrade**: An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be a Upgrade Note.",
              {
                "$ul": [
                  "**distributions**: Metadata about the upgrade for each specific operating system.",
                  "**package**: Required - The package this Upgrade is for.",
                  [
                    "**version**: Version contains structured information about the version of the package. For a discussion of this in Debian/Ubuntu: http://serverfault.com/questions/604541/debian-packages-version-convention For a discussion of this in Redhat/Fedora/Centos: http://blog.jasonantman.com/2014/07/how-yum-and-rpm-compare-versions/",
                    {
                      "$ul": [
                        "**epoch**: Used to correct mistakes in the version numbering scheme.",
                        "**inclusive**: Whether this version is vulnerable, when defining the version bounds. For example, if the minimum version is 2.0, inclusive=true would say 2.0 is vulnerable, while inclusive=false would say it's not",
                        "**kind**: Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored.",
                        "**name**: The main part of the version name.",
                        "**revision**: The iteration of the package build from the above version."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**vulnerabilityAssessment**: A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE. Multiple VulnerabilityAssessmentNotes together form a Vex statement. Please go/sds-vex-example for a sample Vex statement in the CSAF format.",
              {
                "$ul": [
                  [
                    "**assessment**: Assessment provides all information that is related to a single vulnerability for this product.",
                    {
                      "$ul": [
                        "**cve**: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability.",
                        "**impacts**: Contains information about the impact of this vulnerability, this will change with time.",
                        [
                          "**justification**: Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
                          {
                            "$ul": [
                              "**details**: Additional details on why this justification was chosen.",
                              "**justificationType**: The justification type for this vulnerability."
                            ]
                          }
                        ],
                        "**longDescription**: A detailed description of this Vex.",
                        "**relatedUris**: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.",
                        "**remediations**: Specifies details on how to handle (and presumably, fix) a vulnerability.",
                        "**shortDescription**: A one sentence description of this Vex.",
                        "**state**: Provides the state of this Vulnerability assessment.",
                        "**vulnerabilityId**: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc."
                      ]
                    }
                  ],
                  "**languageCode**: Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.",
                  "**longDescription**: A detailed description of this Vex.",
                  [
                    "**product**: Product contains information about a product and how to uniquely identify it.",
                    {
                      "$ul": [
                        "**id**: Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.",
                        [
                          "**identifierHelper**: Helps in identifying the underlying product. This should be treated like a one-of field. Only one field should be set in this proto. This is a workaround because spanner indexes on one-of fields restrict addition and deletion of fields.",
                          {
                            "$ul": [
                              "**field**: The field that is set in the API proto.",
                              "**genericUri**: Contains a URI which is vendor-specific. Example: The artifact repository URL of an image."
                            ]
                          }
                        ],
                        "**name**: Name of the product."
                      ]
                    }
                  ],
                  [
                    "**publisher**: Publisher contains information about the publisher of this Note.",
                    {
                      "$ul": [
                        "**issuingAuthority**: Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.",
                        "**name**: Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.",
                        "**publisherNamespace**: The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io"
                      ]
                    }
                  ],
                  "**shortDescription**: A one sentence description of this Vex.",
                  "**title**: The title of the note. E.g. `Vex-Debian-11.4`"
                ]
              }
            ],
            [
              "**vulnerabilityType**: VulnerabilityType provides metadata about a security vulnerability.",
              {
                "$ul": [
                  "**cvssScore**: The CVSS score for this Vulnerability.",
                  [
                    "**cvssV2**: Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
                    {
                      "$ul": [
                        "**attackComplexity**: Defined in CVSS v3, CVSS v2",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
                        "**authentication**: Defined in CVSS v2",
                        "**availabilityImpact**: Defined in CVSS v3, CVSS v2",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**: Defined in CVSS v3, CVSS v2",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**: Defined in CVSS v3, CVSS v2",
                        "**privilegesRequired**: Defined in CVSS v3",
                        "**scope**: Defined in CVSS v3",
                        "**userInteraction**: Defined in CVSS v3"
                      ]
                    }
                  ],
                  "**cvssVersion**: CVSS version used to populate cvss_score and severity.",
                  "**cwe**: A list of CWE for this vulnerability. For details, see: https://cwe.mitre.org/index.html",
                  "**details**: All information about the package to specifically identify this vulnerability. One entry per (version range and cpe_uri) the package vulnerability has manifested in.",
                  "**severity**: Note provider assigned impact of the vulnerability"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
