{
  "name": "containeranalysis_projects_occurrences_getNotes",
  "description": "Gets the note attached to the specified occurrence. Consumer projects can use this method to get a note that belongs to a provider project.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "name"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://containeranalysis.googleapis.com//v1/{name}/notes{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A type of analysis that can be done for a resource.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attestation**: Note kind that represents a logical attestation \"role\" or \"authority\". For example, an organization might have one `Authority` for \"QA\" and one for \"build\". This note is intended to act strictly as a grouping mechanism for the attached occurrences (Attestations). This grouping mechanism also provides a security boundary, since IAM ACLs gate the ability for a principle to attach an occurrence to a given note. It also provides a single point of lookup to find all attached attestation occurrences, even if they don't all live in the same project.",
              {
                "$ul": [
                  [
                    "**hint**: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
                    {
                      "$ul": [
                        "**humanReadableName**: Required. The human readable name of this attestation authority, for example \"qa\"."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**build**: Note holding the version of the provider's builder and the signature of the provenance message in the build details occurrence.",
              {
                "$ul": [
                  "**builderVersion**: Required. Immutable. Version of the builder which produced this build."
                ]
              }
            ],
            [
              "**compliance**",
              {
                "$ul": [
                  [
                    "**cisBenchmark**: A compliance check that is a CIS benchmark.",
                    {
                      "$ul": [
                        "**profileLevel**",
                        "**severity**"
                      ]
                    }
                  ],
                  "**description**: A description about this compliance check.",
                  "**rationale**: A rationale for the existence of this compliance check.",
                  "**remediation**: A description of remediation steps if the compliance check fails.",
                  "**scanInstructions**: Serialized scan instructions with a predefined format.",
                  "**title**: The title that identifies this compliance check.",
                  "**version**: The OS and config versions the benchmark applies to."
                ]
              }
            ],
            "**createTime**: Output only. The time this note was created. This field can be used as a filter in list requests.",
            [
              "**deployment**: An artifact that can be deployed in some runtime.",
              {
                "$ul": [
                  "**resourceUri**: Required. Resource URI for the artifact being deployed."
                ]
              }
            ],
            [
              "**discovery**: A note that indicates a type of analysis a provider would perform. This note exists in a provider's project. A `Discovery` occurrence is created in a consumer's project at the start of analysis.",
              {
                "$ul": [
                  "**analysisKind**: Required. Immutable. The kind of analysis that is handled by this discovery."
                ]
              }
            ],
            [
              "**dsseAttestation**",
              {
                "$ul": [
                  [
                    "**hint**: This submessage provides human-readable hints about the purpose of the authority. Because the name of a note acts as its resource reference, it is important to disambiguate the canonical name of the Note (which might be a UUID for security purposes) from \"readable\" names more suitable for debug output. Note that these hints should not be used to look up authorities in security sensitive contexts, such as when looking up attestations to verify.",
                    {
                      "$ul": [
                        "**humanReadableName**: Required. The human readable name of this attestation authority, for example \"cloudbuild-prod\"."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**expirationTime**: Time of expiration for this note. Empty if note does not expire.",
            [
              "**image**: Basis describes the base image portion (Note) of the DockerImage relationship. Linked occurrences are derived from this or an equivalent image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.",
              {
                "$ul": [
                  [
                    "**fingerprint**: A set of properties that uniquely identify a given Docker image.",
                    {
                      "$ul": [
                        "**v1Name**: Required. The layer ID of the final layer in the Docker image's v1 representation.",
                        "**v2Blob**: Required. The ordered list of v2 blobs that represent a given image.",
                        "**v2Name**: Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept."
                      ]
                    }
                  ],
                  "**resourceUrl**: Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images."
                ]
              }
            ],
            "**kind**: Output only. The type of analysis. This field can be used as a filter in list requests.",
            "**longDescription**: A detailed description of this note.",
            "**name**: Output only. The name of the note in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.",
            [
              "**package**: PackageNote represents a particular package version.",
              {
                "$ul": [
                  "**architecture**: The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
                  "**cpeUri**: The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
                  "**description**: The description of this package.",
                  "**digest**: Hash value, typically a file digest, that allows unique identification a specific package.",
                  "**distribution**: Deprecated. The various channels by which a package is distributed.",
                  [
                    "**license**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**maintainer**: A freeform text denoting the maintainer of this package.",
                  "**name**: Required. Immutable. The name of the package.",
                  "**packageType**: The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
                  "**url**: The homepage for this package.",
                  [
                    "**version**: Version contains structured information about the version of a package.",
                    {
                      "$ul": [
                        "**epoch**: Used to correct mistakes in the version numbering scheme.",
                        "**fullName**: Human readable version string. This string is of the form :- and is only set when kind is NORMAL.",
                        "**inclusive**: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                        "**kind**: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
                        "**name**: Required only when version kind is NORMAL. The main part of the version name.",
                        "**revision**: The iteration of the package build from the above version."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**relatedNoteNames**: Other notes related to this note.",
            "**relatedUrl**: URLs associated with this note.",
            [
              "**sbomReference**: The note representing an SBOM reference.",
              {
                "$ul": [
                  "**format**: The format that SBOM takes. E.g. may be spdx, cyclonedx, etc...",
                  "**version**: The version of the format that the SBOM takes. E.g. if the format is spdx, the version may be 2.3."
                ]
              }
            ],
            "**shortDescription**: A one sentence description of this note.",
            "**updateTime**: Output only. The time this note was last updated. This field can be used as a filter in list requests.",
            [
              "**upgrade**: An Upgrade Note represents a potential upgrade of a package to a given version. For each package version combination (i.e. bash 4.0, bash 4.1, bash 4.1.2), there will be an Upgrade Note. For Windows, windows_update field represents the information related to the update.",
              {
                "$ul": [
                  "**distributions**: Metadata about the upgrade for each specific operating system.",
                  "**package**: Required for non-Windows OS. The package this Upgrade is for.",
                  [
                    "**version**: Version contains structured information about the version of a package.",
                    {
                      "$ul": [
                        "**epoch**: Used to correct mistakes in the version numbering scheme.",
                        "**fullName**: Human readable version string. This string is of the form :- and is only set when kind is NORMAL.",
                        "**inclusive**: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                        "**kind**: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
                        "**name**: Required only when version kind is NORMAL. The main part of the version name.",
                        "**revision**: The iteration of the package build from the above version."
                      ]
                    }
                  ],
                  [
                    "**windowsUpdate**: Windows Update represents the metadata about the update for the Windows operating system. The fields in this message come from the Windows Update API documented at https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.",
                    {
                      "$ul": [
                        "**categories**: The list of categories to which the update belongs.",
                        "**description**: The localized description of the update.",
                        [
                          "**identity**: The unique identifier of the update.",
                          {
                            "$ul": [
                              "**revision**: The revision number of the update.",
                              "**updateId**: The revision independent identifier of the update."
                            ]
                          }
                        ],
                        "**kbArticleIds**: The Microsoft Knowledge Base article IDs that are associated with the update.",
                        "**lastPublishedTimestamp**: The last published timestamp of the update.",
                        "**supportUrl**: The hyperlink to the support information for the update.",
                        "**title**: The localized title of the update."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**vulnerability**: A security vulnerability that can be found in resources.",
              {
                "$ul": [
                  "**cvssScore**: The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.",
                  [
                    "**cvssV2**: Common Vulnerability Scoring System. For details, see https://www.first.org/cvss/specification-document This is a message we will try to use for storing various versions of CVSS rather than making a separate proto for storing a specific version.",
                    {
                      "$ul": [
                        "**attackComplexity**",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.",
                        "**authentication**",
                        "**availabilityImpact**",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**",
                        "**privilegesRequired**",
                        "**scope**",
                        "**userInteraction**"
                      ]
                    }
                  ],
                  [
                    "**cvssV3**: Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document",
                    {
                      "$ul": [
                        "**attackComplexity**",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments.",
                        "**availabilityImpact**",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**",
                        "**privilegesRequired**",
                        "**scope**",
                        "**userInteraction**"
                      ]
                    }
                  ],
                  "**cvssVersion**: CVSS version used to populate cvss_score and severity.",
                  "**details**: Details of all known distros and packages affected by this vulnerability.",
                  "**severity**: The note provider assigned severity of this vulnerability.",
                  "**sourceUpdateTime**: The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.",
                  "**windowsDetails**: Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version."
                ]
              }
            ],
            [
              "**vulnerabilityAssessment**: A single VulnerabilityAssessmentNote represents one particular product's vulnerability assessment for one CVE.",
              {
                "$ul": [
                  [
                    "**assessment**: Assessment provides all information that is related to a single vulnerability for this product.",
                    {
                      "$ul": [
                        "**cve**: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.",
                        "**impacts**: Contains information about the impact of this vulnerability, this will change with time.",
                        [
                          "**justification**: Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
                          {
                            "$ul": [
                              "**details**: Additional details on why this justification was chosen.",
                              "**justificationType**: The justification type for this vulnerability."
                            ]
                          }
                        ],
                        "**longDescription**: A detailed description of this Vex.",
                        "**relatedUris**: Holds a list of references associated with this vulnerability item and assessment. These uris have additional information about the vulnerability and the assessment itself. E.g. Link to a document which details how this assessment concluded the state of this vulnerability.",
                        "**remediations**: Specifies details on how to handle (and presumably, fix) a vulnerability.",
                        "**shortDescription**: A one sentence description of this Vex.",
                        "**state**: Provides the state of this Vulnerability assessment.",
                        "**vulnerabilityId**: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc."
                      ]
                    }
                  ],
                  "**languageCode**: Identifies the language used by this document, corresponding to IETF BCP 47 / RFC 5646.",
                  "**longDescription**: A detailed description of this Vex.",
                  [
                    "**product**: Product contains information about a product and how to uniquely identify it.",
                    {
                      "$ul": [
                        "**genericUri**: Contains a URI which is vendor-specific. Example: The artifact repository URL of an image.",
                        "**id**: Token that identifies a product so that it can be referred to from other parts in the document. There is no predefined format as long as it uniquely identifies a group in the context of the current document.",
                        "**name**: Name of the product."
                      ]
                    }
                  ],
                  [
                    "**publisher**: Publisher contains information about the publisher of this Note.",
                    {
                      "$ul": [
                        "**issuingAuthority**: Provides information about the authority of the issuing party to release the document, in particular, the party's constituency and responsibilities or other obligations.",
                        "**name**: Name of the publisher. Examples: 'Google', 'Google Cloud Platform'.",
                        "**publisherNamespace**: The context or namespace. Contains a URL which is under control of the issuing party and can be used as a globally unique identifier for that issuing party. Example: https://csaf.io"
                      ]
                    }
                  ],
                  "**shortDescription**: A one sentence description of this Vex.",
                  "**title**: The title of the note. E.g. `Vex-Debian-11.4`"
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
