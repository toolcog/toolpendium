{
  "name": "containeranalysis_projects_occurrences_create",
  "description": "Creates a new occurrence.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the project in the form of `projects/[PROJECT_ID]`, under which the occurrence is to be created."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Occurrence"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Occurrence": {
        "description": "An instance of an analysis type that has been found on a resource.",
        "properties": {
          "attestation": {
            "$ref": "#/$defs/Details"
          },
          "build": {
            "$ref": "#/$defs/GrafeasV1beta1BuildDetails"
          },
          "createTime": {
            "description": "Output only. The time this occurrence was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "deployment": {
            "$ref": "#/$defs/GrafeasV1beta1DeploymentDetails"
          },
          "derivedImage": {
            "$ref": "#/$defs/GrafeasV1beta1ImageDetails"
          },
          "discovered": {
            "$ref": "#/$defs/GrafeasV1beta1DiscoveryDetails"
          },
          "envelope": {
            "$ref": "#/$defs/Envelope"
          },
          "installation": {
            "$ref": "#/$defs/GrafeasV1beta1PackageDetails"
          },
          "intoto": {
            "$ref": "#/$defs/GrafeasV1beta1IntotoDetails"
          },
          "kind": {
            "description": "Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.",
            "enum": [
              "NOTE_KIND_UNSPECIFIED",
              "VULNERABILITY",
              "BUILD",
              "IMAGE",
              "PACKAGE",
              "DEPLOYMENT",
              "DISCOVERY",
              "ATTESTATION",
              "INTOTO",
              "SBOM",
              "SPDX_PACKAGE",
              "SPDX_FILE",
              "SPDX_RELATIONSHIP",
              "VULNERABILITY_ASSESSMENT",
              "SBOM_REFERENCE"
            ],
            "type": "string"
          },
          "name": {
            "description": "Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
            "type": "string"
          },
          "noteName": {
            "description": "Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.",
            "type": "string"
          },
          "remediation": {
            "description": "A description of actions that can be taken to remedy the note.",
            "type": "string"
          },
          "resource": {
            "$ref": "#/$defs/Resource"
          },
          "sbom": {
            "$ref": "#/$defs/DocumentOccurrence"
          },
          "sbomReference": {
            "$ref": "#/$defs/SBOMReferenceOccurrence"
          },
          "spdxFile": {
            "$ref": "#/$defs/FileOccurrence"
          },
          "spdxPackage": {
            "$ref": "#/$defs/PackageInfoOccurrence"
          },
          "spdxRelationship": {
            "$ref": "#/$defs/RelationshipOccurrence"
          },
          "updateTime": {
            "description": "Output only. The time this occurrence was last updated.",
            "format": "google-datetime",
            "type": "string"
          },
          "vulnerability": {
            "$ref": "#/$defs/GrafeasV1beta1VulnerabilityDetails"
          }
        },
        "type": "object"
      },
      "Details": {
        "description": "Details of an attestation occurrence.",
        "properties": {
          "attestation": {
            "$ref": "#/$defs/Attestation"
          }
        },
        "type": "object"
      },
      "Attestation": {
        "description": "Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
        "properties": {
          "genericSignedAttestation": {
            "$ref": "#/$defs/GenericSignedAttestation"
          },
          "pgpSignedAttestation": {
            "$ref": "#/$defs/PgpSignedAttestation"
          }
        },
        "type": "object"
      },
      "GenericSignedAttestation": {
        "description": "An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.",
        "properties": {
          "contentType": {
            "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
            "enum": [
              "CONTENT_TYPE_UNSPECIFIED",
              "SIMPLE_SIGNING_JSON"
            ],
            "type": "string"
          },
          "serializedPayload": {
            "description": "The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.",
            "format": "byte",
            "type": "string"
          },
          "signatures": {
            "description": "One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.",
            "items": {
              "$ref": "#/$defs/Signature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Signature": {
        "description": "Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be \"attached\" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any \"attached\" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).",
        "properties": {
          "publicKeyId": {
            "description": "The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * \"openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA\" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * \"ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU\" * \"nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5\"",
            "type": "string"
          },
          "signature": {
            "description": "The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PgpSignedAttestation": {
        "description": "An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
        "properties": {
          "contentType": {
            "description": "Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
            "enum": [
              "CONTENT_TYPE_UNSPECIFIED",
              "SIMPLE_SIGNING_JSON"
            ],
            "type": "string"
          },
          "pgpKeyId": {
            "description": "The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
            "type": "string"
          },
          "signature": {
            "description": "Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1BuildDetails": {
        "description": "Details of a build occurrence.",
        "properties": {
          "inTotoSlsaProvenanceV1": {
            "$ref": "#/$defs/InTotoSlsaProvenanceV1"
          },
          "provenance": {
            "$ref": "#/$defs/BuildProvenance"
          },
          "provenanceBytes": {
            "description": "Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InTotoSlsaProvenanceV1": {
        "properties": {
          "_type": {
            "description": "InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement",
            "type": "string"
          },
          "predicate": {
            "$ref": "#/$defs/SlsaProvenanceV1"
          },
          "predicateType": {
            "type": "string"
          },
          "subject": {
            "items": {
              "$ref": "#/$defs/Subject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SlsaProvenanceV1": {
        "description": "Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.",
        "properties": {
          "buildDefinition": {
            "$ref": "#/$defs/BuildDefinition"
          },
          "runDetails": {
            "$ref": "#/$defs/RunDetails"
          }
        },
        "type": "object"
      },
      "BuildDefinition": {
        "properties": {
          "buildType": {
            "type": "string"
          },
          "externalParameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "type": "object"
          },
          "internalParameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "type": "object"
          },
          "resolvedDependencies": {
            "items": {
              "$ref": "#/$defs/ResourceDescriptor"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceDescriptor": {
        "properties": {
          "annotations": {
            "additionalProperties": {},
            "type": "object"
          },
          "content": {
            "format": "byte",
            "type": "string"
          },
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "downloadLocation": {
            "type": "string"
          },
          "mediaType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "RunDetails": {
        "properties": {
          "builder": {
            "$ref": "#/$defs/ProvenanceBuilder"
          },
          "byproducts": {
            "items": {
              "$ref": "#/$defs/ResourceDescriptor"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/BuildMetadata"
          }
        },
        "type": "object"
      },
      "ProvenanceBuilder": {
        "properties": {
          "builderDependencies": {
            "items": {
              "$ref": "#/$defs/ResourceDescriptor"
            },
            "type": "array"
          },
          "id": {
            "type": "string"
          },
          "version": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "BuildMetadata": {
        "properties": {
          "finishedOn": {
            "format": "google-datetime",
            "type": "string"
          },
          "invocationId": {
            "type": "string"
          },
          "startedOn": {
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Subject": {
        "description": "Set of software artifacts that the attestation applies to. Each element represents a single software artifact.",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "`\"\": \"\"` Algorithms can be e.g. sha256, sha512 See https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet",
            "type": "object"
          },
          "name": {
            "description": "Identifier to distinguish this artifact from others within the subject.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BuildProvenance": {
        "description": "Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
        "properties": {
          "buildOptions": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
            "type": "object"
          },
          "builderVersion": {
            "description": "Version string of the builder at the time this build was executed.",
            "type": "string"
          },
          "builtArtifacts": {
            "description": "Output of the build.",
            "items": {
              "$ref": "#/$defs/Artifact"
            },
            "type": "array"
          },
          "commands": {
            "description": "Commands requested by the build.",
            "items": {
              "$ref": "#/$defs/Command"
            },
            "type": "array"
          },
          "createTime": {
            "description": "Time at which the build was created.",
            "format": "google-datetime",
            "type": "string"
          },
          "creator": {
            "description": "E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
            "type": "string"
          },
          "endTime": {
            "description": "Time at which execution of the build was finished.",
            "format": "google-datetime",
            "type": "string"
          },
          "id": {
            "description": "Required. Unique identifier of the build.",
            "type": "string"
          },
          "logsUri": {
            "description": "URI where any logs for this provenance were written.",
            "type": "string"
          },
          "projectId": {
            "description": "ID of the project.",
            "type": "string"
          },
          "sourceProvenance": {
            "$ref": "#/$defs/Source"
          },
          "startTime": {
            "description": "Time at which execution of the build was started.",
            "format": "google-datetime",
            "type": "string"
          },
          "triggerId": {
            "description": "Trigger identifier if the build was triggered automatically; empty if not.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Artifact": {
        "description": "Artifact describes a build product.",
        "properties": {
          "checksum": {
            "description": "Hash or checksum value of a binary, or Docker Registry 2.0 digest of a container.",
            "type": "string"
          },
          "id": {
            "description": "Artifact ID, if any; for container images, this will be a URL by digest like `gcr.io/projectID/imagename@sha256:123456`.",
            "type": "string"
          },
          "names": {
            "description": "Related artifact names. This may be the path to a binary or jar file, or in the case of a container build, the name used to push the container image to Google Container Registry, as presented to `docker push`. Note that a single Artifact ID can have multiple names, for example if two tags are applied to one image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Command": {
        "description": "Command describes a step performed as part of the build pipeline.",
        "properties": {
          "args": {
            "description": "Command-line arguments used when executing this command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dir": {
            "description": "Working directory (relative to project source root) used when running this command.",
            "type": "string"
          },
          "env": {
            "description": "Environment variables set before running this command.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Optional unique identifier for this command, used in wait_for to reference this command as a dependency.",
            "type": "string"
          },
          "name": {
            "description": "Required. Name of the command, as presented on the command line, or if the command is packaged as a Docker container, as presented to `docker pull`.",
            "type": "string"
          },
          "waitFor": {
            "description": "The ID(s) of the command(s) that this command depends on.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "Source describes the location of the source used for the build.",
        "properties": {
          "additionalContexts": {
            "description": "If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
            "items": {
              "$ref": "#/$defs/SourceContext"
            },
            "type": "array"
          },
          "artifactStorageSourceUri": {
            "description": "If provided, the input binary artifacts for the build came from this location.",
            "type": "string"
          },
          "context": {
            "$ref": "#/$defs/SourceContext"
          },
          "fileHashes": {
            "additionalProperties": {
              "$ref": "#/$defs/FileHashes"
            },
            "description": "Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SourceContext": {
        "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
        "properties": {
          "cloudRepo": {
            "$ref": "#/$defs/CloudRepoSourceContext"
          },
          "gerrit": {
            "$ref": "#/$defs/GerritSourceContext"
          },
          "git": {
            "$ref": "#/$defs/GitSourceContext"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels with user defined metadata.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "CloudRepoSourceContext": {
        "description": "A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
        "properties": {
          "aliasContext": {
            "$ref": "#/$defs/AliasContext"
          },
          "repoId": {
            "$ref": "#/$defs/RepoId"
          },
          "revisionId": {
            "description": "A revision ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AliasContext": {
        "description": "An alias to a repo revision.",
        "properties": {
          "kind": {
            "description": "The alias kind.",
            "enum": [
              "KIND_UNSPECIFIED",
              "FIXED",
              "MOVABLE",
              "OTHER"
            ],
            "type": "string"
          },
          "name": {
            "description": "The alias name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoId": {
        "description": "A unique identifier for a Cloud Repo.",
        "properties": {
          "projectRepoId": {
            "$ref": "#/$defs/ProjectRepoId"
          },
          "uid": {
            "description": "A server-assigned, globally unique identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectRepoId": {
        "description": "Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
        "properties": {
          "projectId": {
            "description": "The ID of the project.",
            "type": "string"
          },
          "repoName": {
            "description": "The name of the repo. Leave empty for the default repo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GerritSourceContext": {
        "description": "A SourceContext referring to a Gerrit project.",
        "properties": {
          "aliasContext": {
            "$ref": "#/$defs/AliasContext"
          },
          "gerritProject": {
            "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
            "type": "string"
          },
          "hostUri": {
            "description": "The URI of a running Gerrit instance.",
            "type": "string"
          },
          "revisionId": {
            "description": "A revision (commit) ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitSourceContext": {
        "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
        "properties": {
          "revisionId": {
            "description": "Git commit hash.",
            "type": "string"
          },
          "url": {
            "description": "Git repository URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileHashes": {
        "description": "Container message for hashes of byte content of files, used in source messages to verify integrity of source input to the build.",
        "properties": {
          "fileHash": {
            "description": "Required. Collection of file hashes.",
            "items": {
              "$ref": "#/$defs/Hash"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Hash": {
        "description": "Container message for hash values.",
        "properties": {
          "type": {
            "description": "Required. The type of hash that was performed.",
            "enum": [
              "HASH_TYPE_UNSPECIFIED",
              "SHA256",
              "GO_MODULE_H1",
              "SHA512"
            ],
            "type": "string"
          },
          "value": {
            "description": "Required. The hash value.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1DeploymentDetails": {
        "description": "Details of a deployment occurrence.",
        "properties": {
          "deployment": {
            "$ref": "#/$defs/Deployment"
          }
        },
        "type": "object"
      },
      "Deployment": {
        "description": "The period during which some deployable was active in a runtime.",
        "properties": {
          "address": {
            "description": "Address of the runtime element hosting this deployment.",
            "type": "string"
          },
          "config": {
            "description": "Configuration used to create this deployment.",
            "type": "string"
          },
          "deployTime": {
            "description": "Required. Beginning of the lifetime of this deployment.",
            "format": "google-datetime",
            "type": "string"
          },
          "platform": {
            "description": "Platform hosting this deployment.",
            "enum": [
              "PLATFORM_UNSPECIFIED",
              "GKE",
              "FLEX",
              "CUSTOM"
            ],
            "type": "string"
          },
          "resourceUri": {
            "description": "Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "undeployTime": {
            "description": "End of the lifetime of this deployment.",
            "format": "google-datetime",
            "type": "string"
          },
          "userEmail": {
            "description": "Identity of the user that triggered this deployment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1ImageDetails": {
        "description": "Details of an image occurrence.",
        "properties": {
          "derivedImage": {
            "$ref": "#/$defs/Derived"
          }
        },
        "type": "object"
      },
      "Derived": {
        "description": "Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
        "properties": {
          "baseResourceUrl": {
            "description": "Output only. This contains the base image URL for the derived image occurrence.",
            "type": "string"
          },
          "distance": {
            "description": "Output only. The number of layers by which this image differs from the associated image basis.",
            "format": "int32",
            "type": "integer"
          },
          "fingerprint": {
            "$ref": "#/$defs/Fingerprint"
          },
          "layerInfo": {
            "description": "This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer.",
            "items": {
              "$ref": "#/$defs/Layer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Fingerprint": {
        "description": "A set of properties that uniquely identify a given Docker image.",
        "properties": {
          "v1Name": {
            "description": "Required. The layer ID of the final layer in the Docker image's v1 representation.",
            "type": "string"
          },
          "v2Blob": {
            "description": "Required. The ordered list of v2 blobs that represent a given image.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "v2Name": {
            "description": "Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Layer": {
        "description": "Layer holds metadata specific to a layer of a Docker image.",
        "properties": {
          "arguments": {
            "description": "The recovered arguments to the Dockerfile directive.",
            "type": "string"
          },
          "directive": {
            "description": "Required. The recovered Dockerfile directive used to construct this layer.",
            "enum": [
              "DIRECTIVE_UNSPECIFIED",
              "MAINTAINER",
              "RUN",
              "CMD",
              "LABEL",
              "EXPOSE",
              "ENV",
              "ADD",
              "COPY",
              "ENTRYPOINT",
              "VOLUME",
              "USER",
              "WORKDIR",
              "ARG",
              "ONBUILD",
              "STOPSIGNAL",
              "HEALTHCHECK",
              "SHELL"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1DiscoveryDetails": {
        "description": "Details of a discovery occurrence.",
        "properties": {
          "discovered": {
            "$ref": "#/$defs/Discovered"
          }
        },
        "type": "object"
      },
      "Discovered": {
        "description": "Provides information about the analysis status of a discovered resource.",
        "properties": {
          "analysisCompleted": {
            "$ref": "#/$defs/AnalysisCompleted"
          },
          "analysisError": {
            "description": "Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.",
            "items": {
              "$ref": "#/$defs/Status"
            },
            "type": "array"
          },
          "analysisStatus": {
            "description": "The status of discovery for the resource.",
            "enum": [
              "ANALYSIS_STATUS_UNSPECIFIED",
              "PENDING",
              "SCANNING",
              "FINISHED_SUCCESS",
              "COMPLETE",
              "FINISHED_FAILED",
              "FINISHED_UNSUPPORTED"
            ],
            "type": "string"
          },
          "analysisStatusError": {
            "$ref": "#/$defs/Status"
          },
          "continuousAnalysis": {
            "description": "Whether the resource is continuously analyzed.",
            "enum": [
              "CONTINUOUS_ANALYSIS_UNSPECIFIED",
              "ACTIVE",
              "INACTIVE"
            ],
            "type": "string"
          },
          "lastAnalysisTime": {
            "description": "The last time continuous analysis was done for this resource. Deprecated, do not use.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastScanTime": {
            "description": "The last time this resource was scanned.",
            "format": "google-datetime",
            "type": "string"
          },
          "sbomStatus": {
            "$ref": "#/$defs/SBOMStatus"
          }
        },
        "type": "object"
      },
      "AnalysisCompleted": {
        "description": "Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.",
        "properties": {
          "analysisType": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBOMStatus": {
        "description": "The status of an SBOM generation.",
        "properties": {
          "error": {
            "description": "If there was an error generating an SBOM, this will indicate what that error was.",
            "type": "string"
          },
          "sbomState": {
            "description": "The progress of the SBOM generation.",
            "enum": [
              "SBOM_STATE_UNSPECIFIED",
              "PENDING",
              "COMPLETE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Envelope": {
        "description": "MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
        "properties": {
          "payload": {
            "format": "byte",
            "type": "string"
          },
          "payloadType": {
            "type": "string"
          },
          "signatures": {
            "items": {
              "$ref": "#/$defs/EnvelopeSignature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "EnvelopeSignature": {
        "properties": {
          "keyid": {
            "type": "string"
          },
          "sig": {
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1PackageDetails": {
        "description": "Details of a package occurrence.",
        "properties": {
          "installation": {
            "$ref": "#/$defs/Installation"
          }
        },
        "type": "object"
      },
      "Installation": {
        "description": "This represents how a particular software package may be installed on a system.",
        "properties": {
          "architecture": {
            "description": "Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
            "enum": [
              "ARCHITECTURE_UNSPECIFIED",
              "X86",
              "X64"
            ],
            "readOnly": true,
            "type": "string"
          },
          "cpeUri": {
            "description": "Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
            "readOnly": true,
            "type": "string"
          },
          "license": {
            "$ref": "#/$defs/License"
          },
          "location": {
            "description": "All of the places within the filesystem versions of this package have been found.",
            "items": {
              "$ref": "#/$defs/Location"
            },
            "type": "array"
          },
          "name": {
            "description": "Required. Output only. The name of the installed package.",
            "readOnly": true,
            "type": "string"
          },
          "packageType": {
            "description": "Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "License": {
        "description": "License information.",
        "properties": {
          "comments": {
            "description": "Comments",
            "type": "string"
          },
          "expression": {
            "description": "Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Location": {
        "description": "An occurrence of a particular package installation found within a system's filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.",
        "properties": {
          "cpeUri": {
            "description": "Deprecated. The CPE URI in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.",
            "type": "string"
          },
          "path": {
            "description": "The path from which we gathered that this package/version is installed.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "Version": {
        "description": "Version contains structured information about the version of a package.",
        "properties": {
          "epoch": {
            "description": "Used to correct mistakes in the version numbering scheme.",
            "format": "int32",
            "type": "integer"
          },
          "inclusive": {
            "description": "Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
            "type": "boolean"
          },
          "kind": {
            "description": "Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
            "enum": [
              "VERSION_KIND_UNSPECIFIED",
              "NORMAL",
              "MINIMUM",
              "MAXIMUM"
            ],
            "type": "string"
          },
          "name": {
            "description": "Required only when version kind is NORMAL. The main part of the version name.",
            "type": "string"
          },
          "revision": {
            "description": "The iteration of the package build from the above version.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1IntotoDetails": {
        "description": "This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.",
        "properties": {
          "signatures": {
            "items": {
              "$ref": "#/$defs/GrafeasV1beta1IntotoSignature"
            },
            "type": "array"
          },
          "signed": {
            "$ref": "#/$defs/Link"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1IntotoSignature": {
        "description": "A signature object consists of the KeyID used and the signature itself.",
        "properties": {
          "keyid": {
            "type": "string"
          },
          "sig": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Link": {
        "description": "This corresponds to an in-toto link.",
        "properties": {
          "byproducts": {
            "$ref": "#/$defs/ByProducts"
          },
          "command": {
            "description": "This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: \"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"]",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "environment": {
            "$ref": "#/$defs/Environment"
          },
          "materials": {
            "description": "Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: \"materials\": [ { \"resource_uri\": \"foo/bar\", \"hashes\": { \"sha256\": \"ebebf...\", : } } ]",
            "items": {
              "$ref": "#/$defs/GrafeasV1beta1IntotoArtifact"
            },
            "type": "array"
          },
          "products": {
            "description": "Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials.",
            "items": {
              "$ref": "#/$defs/GrafeasV1beta1IntotoArtifact"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ByProducts": {
        "description": "Defines an object for the byproducts field in in-toto links. The suggested fields are \"stderr\", \"stdout\", and \"return-value\".",
        "properties": {
          "customValues": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Environment": {
        "description": "Defines an object for the environment field in in-toto links. The suggested fields are \"variables\", \"filesystem\", and \"workdir\".",
        "properties": {
          "customValues": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1IntotoArtifact": {
        "properties": {
          "hashes": {
            "$ref": "#/$defs/ArtifactHashes"
          },
          "resourceUri": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArtifactHashes": {
        "description": "Defines a hash object for use in Materials and Products.",
        "properties": {
          "sha256": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Resource": {
        "description": "An entity that can have metadata. For example, a Docker image.",
        "properties": {
          "contentHash": {
            "$ref": "#/$defs/Hash"
          },
          "name": {
            "deprecated": true,
            "description": "Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - \"Debian\".",
            "type": "string"
          },
          "uri": {
            "description": "Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DocumentOccurrence": {
        "description": "DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
        "properties": {
          "createTime": {
            "description": "Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard",
            "format": "google-datetime",
            "type": "string"
          },
          "creatorComment": {
            "description": "A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields",
            "type": "string"
          },
          "creators": {
            "description": "Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "documentComment": {
            "description": "A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document",
            "type": "string"
          },
          "externalDocumentRefs": {
            "description": "Identify any external SPDX documents referenced within this SPDX document",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
            "type": "string"
          },
          "licenseListVersion": {
            "description": "A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created",
            "type": "string"
          },
          "namespace": {
            "description": "Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
            "type": "string"
          },
          "title": {
            "description": "Identify name of this document as designated by creator",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SBOMReferenceOccurrence": {
        "description": "The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.",
        "properties": {
          "payload": {
            "$ref": "#/$defs/SbomReferenceIntotoPayload"
          },
          "payloadType": {
            "description": "The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.",
            "type": "string"
          },
          "signatures": {
            "description": "The signatures over the payload.",
            "items": {
              "$ref": "#/$defs/EnvelopeSignature"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SbomReferenceIntotoPayload": {
        "description": "The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.",
        "properties": {
          "_type": {
            "description": "Identifier for the schema of the Statement.",
            "type": "string"
          },
          "predicate": {
            "$ref": "#/$defs/SbomReferenceIntotoPredicate"
          },
          "predicateType": {
            "description": "URI identifying the type of the Predicate.",
            "type": "string"
          },
          "subject": {
            "description": "Set of software artifacts that the attestation applies to. Each element represents a single software artifact.",
            "items": {
              "$ref": "#/$defs/Subject"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SbomReferenceIntotoPredicate": {
        "description": "A predicate which describes the SBOM being referenced.",
        "properties": {
          "digest": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of algorithm to digest of the contents of the SBOM.",
            "type": "object"
          },
          "location": {
            "description": "The location of the SBOM.",
            "type": "string"
          },
          "mimeType": {
            "description": "The mime type of the SBOM.",
            "type": "string"
          },
          "referrerId": {
            "description": "The person or system referring this predicate to the consumer.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileOccurrence": {
        "description": "FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
        "properties": {
          "attributions": {
            "description": "This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "comment": {
            "description": "This field provides a place for the SPDX file creator to record any general comments about the file",
            "type": "string"
          },
          "contributors": {
            "description": "This field provides a place for the SPDX file creator to record file contributors",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "copyright": {
            "description": "Identify the copyright holder of the file, as well as any dates present",
            "type": "string"
          },
          "filesLicenseInfo": {
            "description": "This field contains the license information actually found in the file, if any",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
            "type": "string"
          },
          "licenseConcluded": {
            "$ref": "#/$defs/License"
          },
          "notice": {
            "description": "This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageInfoOccurrence": {
        "description": "PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
        "properties": {
          "comment": {
            "description": "A place for the SPDX file creator to record any general comments about the package being described",
            "type": "string"
          },
          "filename": {
            "description": "Provide the actual file name of the package, or path of the directory being treated as a package",
            "type": "string"
          },
          "homePage": {
            "description": "Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Uniquely identify any element in an SPDX document which may be referenced by other elements",
            "type": "string"
          },
          "licenseConcluded": {
            "$ref": "#/$defs/License"
          },
          "packageType": {
            "description": "Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
            "readOnly": true,
            "type": "string"
          },
          "sourceInfo": {
            "description": "Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package",
            "type": "string"
          },
          "summaryDescription": {
            "description": "Output only. A short description of the package",
            "readOnly": true,
            "type": "string"
          },
          "title": {
            "description": "Output only. Identify the full name of the package as given by the Package Originator",
            "readOnly": true,
            "type": "string"
          },
          "version": {
            "description": "Output only. Identify the version of the package",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipOccurrence": {
        "description": "RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
        "properties": {
          "comment": {
            "description": "A place for the SPDX file creator to record any general comments about the relationship",
            "type": "string"
          },
          "source": {
            "description": "Also referred to as SPDXRef-A The source SPDX element (file, package, etc)",
            "type": "string"
          },
          "target": {
            "description": "Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it",
            "type": "string"
          },
          "type": {
            "description": "Output only. The type of relationship between the source and target SPDX elements",
            "enum": [
              "RELATIONSHIP_TYPE_UNSPECIFIED",
              "DESCRIBES",
              "DESCRIBED_BY",
              "CONTAINS",
              "CONTAINED_BY",
              "DEPENDS_ON",
              "DEPENDENCY_OF",
              "DEPENDENCY_MANIFEST_OF",
              "BUILD_DEPENDENCY_OF",
              "DEV_DEPENDENCY_OF",
              "OPTIONAL_DEPENDENCY_OF",
              "PROVIDED_DEPENDENCY_OF",
              "TEST_DEPENDENCY_OF",
              "RUNTIME_DEPENDENCY_OF",
              "EXAMPLE_OF",
              "GENERATES",
              "GENERATED_FROM",
              "ANCESTOR_OF",
              "DESCENDANT_OF",
              "VARIANT_OF",
              "DISTRIBUTION_ARTIFACT",
              "PATCH_FOR",
              "PATCH_APPLIED",
              "COPY_OF",
              "FILE_ADDED",
              "FILE_DELETED",
              "FILE_MODIFIED",
              "EXPANDED_FROM_ARCHIVE",
              "DYNAMIC_LINK",
              "STATIC_LINK",
              "DATA_FILE_OF",
              "TEST_CASE_OF",
              "BUILD_TOOL_OF",
              "DEV_TOOL_OF",
              "TEST_OF",
              "TEST_TOOL_OF",
              "DOCUMENTATION_OF",
              "OPTIONAL_COMPONENT_OF",
              "METAFILE_OF",
              "PACKAGE_OF",
              "AMENDS",
              "PREREQUISITE_FOR",
              "HAS_PREREQUISITE",
              "OTHER"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GrafeasV1beta1VulnerabilityDetails": {
        "description": "Details of a vulnerability Occurrence.",
        "properties": {
          "cvssScore": {
            "description": "Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
            "format": "float",
            "type": "number"
          },
          "cvssV2": {
            "$ref": "#/$defs/CVSS"
          },
          "cvssV3": {
            "$ref": "#/$defs/CVSS"
          },
          "cvssVersion": {
            "description": "Output only. CVSS version used to populate cvss_score and severity.",
            "enum": [
              "CVSS_VERSION_UNSPECIFIED",
              "CVSS_VERSION_2",
              "CVSS_VERSION_3"
            ],
            "type": "string"
          },
          "effectiveSeverity": {
            "description": "The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "extraDetails": {
            "description": "Occurrence-specific extra details about the vulnerability.",
            "type": "string"
          },
          "longDescription": {
            "description": "Output only. A detailed description of this vulnerability.",
            "type": "string"
          },
          "packageIssue": {
            "description": "Required. The set of affected locations and their fixes (if available) within the associated resource.",
            "items": {
              "$ref": "#/$defs/PackageIssue"
            },
            "type": "array"
          },
          "relatedUrls": {
            "description": "Output only. URLs related to this vulnerability.",
            "items": {
              "$ref": "#/$defs/RelatedUrl"
            },
            "type": "array"
          },
          "severity": {
            "description": "Output only. The note provider assigned Severity of the vulnerability.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "type": "string"
          },
          "shortDescription": {
            "description": "Output only. A one sentence description of this vulnerability.",
            "type": "string"
          },
          "type": {
            "description": "The type of package; whether native or non native(ruby gems, node.js packages etc)",
            "type": "string"
          },
          "vexAssessment": {
            "$ref": "#/$defs/VexAssessment"
          }
        },
        "type": "object"
      },
      "CVSS": {
        "description": "Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
        "properties": {
          "attackComplexity": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "ATTACK_COMPLEXITY_UNSPECIFIED",
              "ATTACK_COMPLEXITY_LOW",
              "ATTACK_COMPLEXITY_HIGH",
              "ATTACK_COMPLEXITY_MEDIUM"
            ],
            "type": "string"
          },
          "attackVector": {
            "description": "Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
            "enum": [
              "ATTACK_VECTOR_UNSPECIFIED",
              "ATTACK_VECTOR_NETWORK",
              "ATTACK_VECTOR_ADJACENT",
              "ATTACK_VECTOR_LOCAL",
              "ATTACK_VECTOR_PHYSICAL"
            ],
            "type": "string"
          },
          "authentication": {
            "description": "Defined in CVSS v2",
            "enum": [
              "AUTHENTICATION_UNSPECIFIED",
              "AUTHENTICATION_MULTIPLE",
              "AUTHENTICATION_SINGLE",
              "AUTHENTICATION_NONE"
            ],
            "type": "string"
          },
          "availabilityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "baseScore": {
            "description": "The base score is a function of the base metric scores.",
            "format": "float",
            "type": "number"
          },
          "confidentialityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "exploitabilityScore": {
            "format": "float",
            "type": "number"
          },
          "impactScore": {
            "format": "float",
            "type": "number"
          },
          "integrityImpact": {
            "description": "Defined in CVSS v3, CVSS v2",
            "enum": [
              "IMPACT_UNSPECIFIED",
              "IMPACT_HIGH",
              "IMPACT_LOW",
              "IMPACT_NONE",
              "IMPACT_PARTIAL",
              "IMPACT_COMPLETE"
            ],
            "type": "string"
          },
          "privilegesRequired": {
            "description": "Defined in CVSS v3",
            "enum": [
              "PRIVILEGES_REQUIRED_UNSPECIFIED",
              "PRIVILEGES_REQUIRED_NONE",
              "PRIVILEGES_REQUIRED_LOW",
              "PRIVILEGES_REQUIRED_HIGH"
            ],
            "type": "string"
          },
          "scope": {
            "description": "Defined in CVSS v3",
            "enum": [
              "SCOPE_UNSPECIFIED",
              "SCOPE_UNCHANGED",
              "SCOPE_CHANGED"
            ],
            "type": "string"
          },
          "userInteraction": {
            "description": "Defined in CVSS v3",
            "enum": [
              "USER_INTERACTION_UNSPECIFIED",
              "USER_INTERACTION_NONE",
              "USER_INTERACTION_REQUIRED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "PackageIssue": {
        "description": "This message wraps a location affected by a vulnerability and its associated fix (if one is available).",
        "properties": {
          "affectedLocation": {
            "$ref": "#/$defs/VulnerabilityLocation"
          },
          "effectiveSeverity": {
            "description": "Output only. The distro or language system assigned severity for this vulnerability when that is available and note provider assigned severity when it is not available.",
            "enum": [
              "SEVERITY_UNSPECIFIED",
              "MINIMAL",
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ],
            "readOnly": true,
            "type": "string"
          },
          "fixedLocation": {
            "$ref": "#/$defs/VulnerabilityLocation"
          },
          "packageType": {
            "description": "The type of package (e.g. OS, MAVEN, GO).",
            "type": "string"
          },
          "severityName": {
            "description": "Deprecated, use Details.effective_severity instead The severity (e.g., distro assigned severity) for this vulnerability.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VulnerabilityLocation": {
        "description": "The location of the vulnerability.",
        "properties": {
          "cpeUri": {
            "description": "Required. The CPE URI in [cpe format](https://cpe.mitre.org/specification/) format. Examples include distro or storage location for vulnerable jar.",
            "type": "string"
          },
          "package": {
            "description": "Required. The package being described.",
            "type": "string"
          },
          "version": {
            "$ref": "#/$defs/Version"
          }
        },
        "type": "object"
      },
      "RelatedUrl": {
        "description": "Metadata for any related URL information.",
        "properties": {
          "label": {
            "description": "Label to describe usage of the URL.",
            "type": "string"
          },
          "url": {
            "description": "Specific URL associated with the resource.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VexAssessment": {
        "description": "VexAssessment provides all publisher provided Vex information that is related to this vulnerability.",
        "properties": {
          "cve": {
            "deprecated": true,
            "description": "Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.",
            "type": "string"
          },
          "impacts": {
            "description": "Contains information about the impact of this vulnerability, this will change with time.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "justification": {
            "$ref": "#/$defs/Justification"
          },
          "noteName": {
            "description": "The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.",
            "type": "string"
          },
          "relatedUris": {
            "description": "Holds a list of references associated with this vulnerability item and assessment.",
            "items": {
              "$ref": "#/$defs/RelatedUrl"
            },
            "type": "array"
          },
          "remediations": {
            "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
            "items": {
              "$ref": "#/$defs/Remediation"
            },
            "type": "array"
          },
          "state": {
            "description": "Provides the state of this Vulnerability assessment.",
            "enum": [
              "STATE_UNSPECIFIED",
              "AFFECTED",
              "NOT_AFFECTED",
              "FIXED",
              "UNDER_INVESTIGATION"
            ],
            "type": "string"
          },
          "vulnerabilityId": {
            "description": "The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Justification": {
        "description": "Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
        "properties": {
          "details": {
            "description": "Additional details on why this justification was chosen.",
            "type": "string"
          },
          "justificationType": {
            "description": "The justification type for this vulnerability.",
            "enum": [
              "JUSTIFICATION_TYPE_UNSPECIFIED",
              "COMPONENT_NOT_PRESENT",
              "VULNERABLE_CODE_NOT_PRESENT",
              "VULNERABLE_CODE_NOT_IN_EXECUTE_PATH",
              "VULNERABLE_CODE_CANNOT_BE_CONTROLLED_BY_ADVERSARY",
              "INLINE_MITIGATIONS_ALREADY_EXIST"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Remediation": {
        "description": "Specifies details on how to handle (and presumably, fix) a vulnerability.",
        "properties": {
          "details": {
            "description": "Contains a comprehensive human-readable discussion of the remediation.",
            "type": "string"
          },
          "remediationType": {
            "description": "The type of remediation that can be applied.",
            "enum": [
              "REMEDIATION_TYPE_UNSPECIFIED",
              "MITIGATION",
              "NO_FIX_PLANNED",
              "NONE_AVAILABLE",
              "VENDOR_FIX",
              "WORKAROUND"
            ],
            "type": "string"
          },
          "remediationUri": {
            "$ref": "#/$defs/RelatedUrl"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://containeranalysis.googleapis.com//v1beta1/{parent}/occurrences{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An instance of an analysis type that has been found on a resource.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**attestation**: Details of an attestation occurrence.",
              {
                "$ul": [
                  [
                    "**attestation**: Occurrence that represents a single \"attestation\". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for look-up (how to find this attestation if you already know the authority and artifact to be verified) and intent (which authority was this attestation intended to sign for).",
                    {
                      "$ul": [
                        [
                          "**genericSignedAttestation**: An attestation wrapper that uses the Grafeas `Signature` message. This attestation must define the `serialized_payload` that the `signatures` verify and any metadata necessary to interpret that plaintext. The signatures should always be over the `serialized_payload` bytestring.",
                          {
                            "$ul": [
                              "**contentType**: Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
                              "**serializedPayload**: The serialized payload that is verified by one or more `signatures`. The encoding and semantic meaning of this payload must match what is set in `content_type`.",
                              "**signatures**: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification."
                            ]
                          }
                        ],
                        [
                          "**pgpSignedAttestation**: An attestation wrapper with a PGP-compatible signature. This message only supports `ATTACHED` signatures, where the payload that is signed is included alongside the signature itself in the same file.",
                          {
                            "$ul": [
                              "**contentType**: Type (for example schema) of the attestation payload that was signed. The verifier must ensure that the provided type is one that the verifier supports, and that the attestation payload is a valid instantiation of that type (for example by validating a JSON schema).",
                              "**pgpKeyId**: The cryptographic fingerprint of the key used to generate the signature, as output by, e.g. `gpg --list-keys`. This should be the version 4, full 160-bit fingerprint, expressed as a 40 character hexadecimal string. See https://tools.ietf.org/html/rfc4880#section-12.2 for details. Implementations may choose to acknowledge \"LONG\", \"SHORT\", or other abbreviated key IDs, but only the full fingerprint is guaranteed to work. In gpg, the full fingerprint can be retrieved from the `fpr` field returned when calling --list-keys with --with-colons. For example: ``` gpg --with-colons --with-fingerprint --force-v4-certs \\ --list-keys attester@example.com tru::1:1513631572:0:3:1:5 pub:...... fpr:::::::::24FF6481B76AC91E66A00AC657A93A81EF3AE6FB: ``` Above, the fingerprint is `24FF6481B76AC91E66A00AC657A93A81EF3AE6FB`.",
                              "**signature**: Required. The raw content of the signature, as output by GNU Privacy Guard (GPG) or equivalent. Since this message only supports attached signatures, the payload that was signed must be attached. While the signature format supported is dependent on the verification implementation, currently only ASCII-armored (`--armor` to gpg), non-clearsigned (`--sign` rather than `--clearsign` to gpg) are supported. Concretely, `gpg --sign --armor --output=signature.gpg payload.json` will create the signature content expected in this field in `signature.gpg` for the `payload.json` attestation payload."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**build**: Details of a build occurrence.",
              {
                "$ul": [
                  [
                    "**inTotoSlsaProvenanceV1**",
                    {
                      "$ul": [
                        "**_type**: InToto spec defined at https://github.com/in-toto/attestation/tree/main/spec#statement",
                        [
                          "**predicate**: Keep in sync with schema at https://github.com/slsa-framework/slsa/blob/main/docs/provenance/schema/v1/provenance.proto Builder renamed to ProvenanceBuilder because of Java conflicts.",
                          {
                            "$ul": [
                              [
                                "**buildDefinition**",
                                {
                                  "$ul": [
                                    "**buildType**",
                                    "**externalParameters**",
                                    "**internalParameters**",
                                    "**resolvedDependencies**"
                                  ]
                                }
                              ],
                              [
                                "**runDetails**",
                                {
                                  "$ul": [
                                    [
                                      "**builder**",
                                      {
                                        "$ul": [
                                          "**builderDependencies**",
                                          "**id**",
                                          "**version**"
                                        ]
                                      }
                                    ],
                                    "**byproducts**",
                                    [
                                      "**metadata**",
                                      {
                                        "$ul": [
                                          "**finishedOn**",
                                          "**invocationId**",
                                          "**startedOn**"
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**predicateType**",
                        "**subject**"
                      ]
                    }
                  ],
                  [
                    "**provenance**: Provenance of a build. Contains all information needed to verify the full details about the build from source to completion.",
                    {
                      "$ul": [
                        "**buildOptions**: Special options applied to this build. This is a catch-all field where build providers can enter any desired additional details.",
                        "**builderVersion**: Version string of the builder at the time this build was executed.",
                        "**builtArtifacts**: Output of the build.",
                        "**commands**: Commands requested by the build.",
                        "**createTime**: Time at which the build was created.",
                        "**creator**: E-mail address of the user who initiated this build. Note that this was the user's e-mail address at the time the build was initiated; this address may not represent the same end-user for all time.",
                        "**endTime**: Time at which execution of the build was finished.",
                        "**id**: Required. Unique identifier of the build.",
                        "**logsUri**: URI where any logs for this provenance were written.",
                        "**projectId**: ID of the project.",
                        [
                          "**sourceProvenance**: Source describes the location of the source used for the build.",
                          {
                            "$ul": [
                              "**additionalContexts**: If provided, some of the source code used for the build may be found in these locations, in the case where the source repository had multiple remotes or submodules. This list will not include the context specified in the context field.",
                              "**artifactStorageSourceUri**: If provided, the input binary artifacts for the build came from this location.",
                              [
                                "**context**: A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
                                {
                                  "$ul": [
                                    [
                                      "**cloudRepo**: A CloudRepoSourceContext denotes a particular revision in a Google Cloud Source Repo.",
                                      {
                                        "$ul": [
                                          [
                                            "**aliasContext**: An alias to a repo revision.",
                                            {
                                              "$ul": [
                                                "**kind**: The alias kind.",
                                                "**name**: The alias name."
                                              ]
                                            }
                                          ],
                                          [
                                            "**repoId**: A unique identifier for a Cloud Repo.",
                                            {
                                              "$ul": [
                                                [
                                                  "**projectRepoId**: Selects a repo using a Google Cloud Platform project ID (e.g., winged-cargo-31) and a repo name within that project.",
                                                  {
                                                    "$ul": [
                                                      "**projectId**: The ID of the project.",
                                                      "**repoName**: The name of the repo. Leave empty for the default repo."
                                                    ]
                                                  }
                                                ],
                                                "**uid**: A server-assigned, globally unique identifier."
                                              ]
                                            }
                                          ],
                                          "**revisionId**: A revision ID."
                                        ]
                                      }
                                    ],
                                    [
                                      "**gerrit**: A SourceContext referring to a Gerrit project.",
                                      {
                                        "$ul": [
                                          [
                                            "**aliasContext**: An alias to a repo revision.",
                                            {
                                              "$ul": [
                                                "**kind**: The alias kind.",
                                                "**name**: The alias name."
                                              ]
                                            }
                                          ],
                                          "**gerritProject**: The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is the hostURI/project.",
                                          "**hostUri**: The URI of a running Gerrit instance.",
                                          "**revisionId**: A revision (commit) ID."
                                        ]
                                      }
                                    ],
                                    [
                                      "**git**: A GitSourceContext denotes a particular revision in a third party Git repository (e.g., GitHub).",
                                      {
                                        "$ul": [
                                          "**revisionId**: Git commit hash.",
                                          "**url**: Git repository URL."
                                        ]
                                      }
                                    ],
                                    "**labels**: Labels with user defined metadata."
                                  ]
                                }
                              ],
                              "**fileHashes**: Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (.tar.gz), the FileHash will be for the single path to that file."
                            ]
                          }
                        ],
                        "**startTime**: Time at which execution of the build was started.",
                        "**triggerId**: Trigger identifier if the build was triggered automatically; empty if not."
                      ]
                    }
                  ],
                  "**provenanceBytes**: Serialized JSON representation of the provenance, used in generating the build signature in the corresponding build note. After verifying the signature, `provenance_bytes` can be unmarshalled and compared to the provenance to confirm that it is unchanged. A base64-encoded string representation of the provenance bytes is used for the signature in order to interoperate with openssl which expects this format for signature verification. The serialized form is captured both to avoid ambiguity in how the provenance is marshalled to json as well to prevent incompatibilities with future changes."
                ]
              }
            ],
            "**createTime**: Output only. The time this occurrence was created.",
            [
              "**deployment**: Details of a deployment occurrence.",
              {
                "$ul": [
                  [
                    "**deployment**: The period during which some deployable was active in a runtime.",
                    {
                      "$ul": [
                        "**address**: Address of the runtime element hosting this deployment.",
                        "**config**: Configuration used to create this deployment.",
                        "**deployTime**: Required. Beginning of the lifetime of this deployment.",
                        "**platform**: Platform hosting this deployment.",
                        "**resourceUri**: Output only. Resource URI for the artifact being deployed taken from the deployable field with the same name.",
                        "**undeployTime**: End of the lifetime of this deployment.",
                        "**userEmail**: Identity of the user that triggered this deployment."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**derivedImage**: Details of an image occurrence.",
              {
                "$ul": [
                  [
                    "**derivedImage**: Derived describes the derived image portion (Occurrence) of the DockerImage relationship. This image would be produced from a Dockerfile with FROM .",
                    {
                      "$ul": [
                        "**baseResourceUrl**: Output only. This contains the base image URL for the derived image occurrence.",
                        "**distance**: Output only. The number of layers by which this image differs from the associated image basis.",
                        [
                          "**fingerprint**: A set of properties that uniquely identify a given Docker image.",
                          {
                            "$ul": [
                              "**v1Name**: Required. The layer ID of the final layer in the Docker image's v1 representation.",
                              "**v2Blob**: Required. The ordered list of v2 blobs that represent a given image.",
                              "**v2Name**: Output only. The name of the image's v2 blobs computed via: [bottom] := v2_blobbottom := sha256(v2_blob[N] + \" \" + v2_name[N+1]) Only the name of the final blob is kept."
                            ]
                          }
                        ],
                        "**layerInfo**: This contains layer-specific metadata, if populated it has length \"distance\" and is ordered with [distance] being the layer immediately following the base image and [1] being the final layer."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**discovered**: Details of a discovery occurrence.",
              {
                "$ul": [
                  [
                    "**discovered**: Provides information about the analysis status of a discovered resource.",
                    {
                      "$ul": [
                        [
                          "**analysisCompleted**: Indicates which analysis completed successfully. Multiple types of analysis can be performed on a single resource.",
                          {
                            "$ul": [
                              "**analysisType**"
                            ]
                          }
                        ],
                        "**analysisError**: Indicates any errors encountered during analysis of a resource. There could be 0 or more of these errors.",
                        "**analysisStatus**: The status of discovery for the resource.",
                        [
                          "**analysisStatusError**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
                          {
                            "$ul": [
                              "**code**: The status code, which should be an enum value of google.rpc.Code.",
                              "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                              "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                            ]
                          }
                        ],
                        "**continuousAnalysis**: Whether the resource is continuously analyzed.",
                        "**lastAnalysisTime**: The last time continuous analysis was done for this resource. Deprecated, do not use.",
                        "**lastScanTime**: The last time this resource was scanned.",
                        [
                          "**sbomStatus**: The status of an SBOM generation.",
                          {
                            "$ul": [
                              "**error**: If there was an error generating an SBOM, this will indicate what that error was.",
                              "**sbomState**: The progress of the SBOM generation."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**envelope**: MUST match https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An authenticated message of arbitrary type.",
              {
                "$ul": [
                  "**payload**",
                  "**payloadType**",
                  "**signatures**"
                ]
              }
            ],
            [
              "**installation**: Details of a package occurrence.",
              {
                "$ul": [
                  [
                    "**installation**: This represents how a particular software package may be installed on a system.",
                    {
                      "$ul": [
                        "**architecture**: Output only. The CPU architecture for which packages in this distribution channel were built. Architecture will be blank for language packages.",
                        "**cpeUri**: Output only. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package. The cpe_uri will be blank for language packages.",
                        [
                          "**license**: License information.",
                          {
                            "$ul": [
                              "**comments**: Comments",
                              "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                            ]
                          }
                        ],
                        "**location**: All of the places within the filesystem versions of this package have been found.",
                        "**name**: Required. Output only. The name of the installed package.",
                        "**packageType**: Output only. The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).",
                        [
                          "**version**: Version contains structured information about the version of a package.",
                          {
                            "$ul": [
                              "**epoch**: Used to correct mistakes in the version numbering scheme.",
                              "**inclusive**: Whether this version is specifying part of an inclusive range. Grafeas does not have the capability to specify version ranges; instead we have fields that specify start version and end versions. At times this is insufficient - we also need to specify whether the version is included in the range or is excluded from the range. This boolean is expected to be set to true when the version is included in a range.",
                              "**kind**: Required. Distinguishes between sentinel MIN/MAX versions and normal versions.",
                              "**name**: Required only when version kind is NORMAL. The main part of the version name.",
                              "**revision**: The iteration of the package build from the above version."
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**intoto**: This corresponds to a signed in-toto link - it is made up of one or more signatures and the in-toto link itself. This is used for occurrences of a Grafeas in-toto note.",
              {
                "$ul": [
                  "**signatures**",
                  [
                    "**signed**: This corresponds to an in-toto link.",
                    {
                      "$ul": [
                        [
                          "**byproducts**: Defines an object for the byproducts field in in-toto links. The suggested fields are \"stderr\", \"stdout\", and \"return-value\".",
                          {
                            "$ul": [
                              "**customValues**"
                            ]
                          }
                        ],
                        "**command**: This field contains the full command executed for the step. This can also be empty if links are generated for operations that aren't directly mapped to a specific command. Each term in the command is an independent string in the list. An example of a command in the in-toto metadata field is: \"command\": [\"git\", \"clone\", \"https://github.com/in-toto/demo-project.git\"]",
                        [
                          "**environment**: Defines an object for the environment field in in-toto links. The suggested fields are \"variables\", \"filesystem\", and \"workdir\".",
                          {
                            "$ul": [
                              "**customValues**"
                            ]
                          }
                        ],
                        "**materials**: Materials are the supply chain artifacts that go into the step and are used for the operation performed. The key of the map is the path of the artifact and the structure contains the recorded hash information. An example is: \"materials\": [ { \"resource_uri\": \"foo/bar\", \"hashes\": { \"sha256\": \"ebebf...\", : } } ]",
                        "**products**: Products are the supply chain artifacts generated as a result of the step. The structure is identical to that of materials."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**kind**: Output only. This explicitly denotes which of the occurrence details are specified. This field can be used as a filter in list requests.",
            "**name**: Output only. The name of the occurrence in the form of `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.",
            "**noteName**: Required. Immutable. The analysis note associated with this occurrence, in the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used as a filter in list requests.",
            "**remediation**: A description of actions that can be taken to remedy the note.",
            [
              "**resource**: An entity that can have metadata. For example, a Docker image.",
              {
                "$ul": [
                  [
                    "**contentHash**: Container message for hash values.",
                    {
                      "$ul": [
                        "**type**: Required. The type of hash that was performed.",
                        "**value**: Required. The hash value."
                      ]
                    }
                  ],
                  "**name**: Deprecated, do not use. Use uri instead. The name of the resource. For example, the name of a Docker image - \"Debian\".",
                  "**uri**: Required. The unique URI of the resource. For example, `https://gcr.io/project/image@sha256:foo` for a Docker image."
                ]
              }
            ],
            [
              "**sbom**: DocumentOccurrence represents an SPDX Document Creation Information section: https://spdx.github.io/spdx-spec/2-document-creation-information/",
              {
                "$ul": [
                  "**createTime**: Identify when the SPDX file was originally created. The date is to be specified according to combined date and time in UTC format as specified in ISO 8601 standard",
                  "**creatorComment**: A field for creators of the SPDX file to provide general comments about the creation of the SPDX file or any other relevant comment not included in the other fields",
                  "**creators**: Identify who (or what, in the case of a tool) created the SPDX file. If the SPDX file was created by an individual, indicate the person's name",
                  "**documentComment**: A field for creators of the SPDX file content to provide comments to the consumers of the SPDX document",
                  "**externalDocumentRefs**: Identify any external SPDX documents referenced within this SPDX document",
                  "**id**: Identify the current SPDX document which may be referenced in relationships by other files, packages internally and documents externally",
                  "**licenseListVersion**: A field for creators of the SPDX file to provide the version of the SPDX License List used when the SPDX file was created",
                  "**namespace**: Provide an SPDX document specific namespace as a unique absolute Uniform Resource Identifier (URI) as specified in RFC-3986, with the exception of the ‘#’ delimiter",
                  "**title**: Identify name of this document as designated by creator"
                ]
              }
            ],
            [
              "**sbomReference**: The occurrence representing an SBOM reference as applied to a specific resource. The occurrence follows the DSSE specification. See https://github.com/secure-systems-lab/dsse/blob/master/envelope.md for more details.",
              {
                "$ul": [
                  [
                    "**payload**: The actual payload that contains the SBOM Reference data. The payload follows the intoto statement specification. See https://github.com/in-toto/attestation/blob/main/spec/v1.0/statement.md for more details.",
                    {
                      "$ul": [
                        "**_type**: Identifier for the schema of the Statement.",
                        [
                          "**predicate**: A predicate which describes the SBOM being referenced.",
                          {
                            "$ul": [
                              "**digest**: A map of algorithm to digest of the contents of the SBOM.",
                              "**location**: The location of the SBOM.",
                              "**mimeType**: The mime type of the SBOM.",
                              "**referrerId**: The person or system referring this predicate to the consumer."
                            ]
                          }
                        ],
                        "**predicateType**: URI identifying the type of the Predicate.",
                        "**subject**: Set of software artifacts that the attestation applies to. Each element represents a single software artifact."
                      ]
                    }
                  ],
                  "**payloadType**: The kind of payload that SbomReferenceIntotoPayload takes. Since it's in the intoto format, this value is expected to be 'application/vnd.in-toto+json'.",
                  "**signatures**: The signatures over the payload."
                ]
              }
            ],
            [
              "**spdxFile**: FileOccurrence represents an SPDX File Information section: https://spdx.github.io/spdx-spec/4-file-information/",
              {
                "$ul": [
                  "**attributions**: This field provides a place for the SPDX data creator to record, at the file level, acknowledgements that may be needed to be communicated in some contexts",
                  "**comment**: This field provides a place for the SPDX file creator to record any general comments about the file",
                  "**contributors**: This field provides a place for the SPDX file creator to record file contributors",
                  "**copyright**: Identify the copyright holder of the file, as well as any dates present",
                  "**filesLicenseInfo**: This field contains the license information actually found in the file, if any",
                  "**id**: Uniquely identify any element in an SPDX document which may be referenced by other elements",
                  [
                    "**licenseConcluded**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**notice**: This field provides a place for the SPDX file creator to record license notices or other such related notices found in the file"
                ]
              }
            ],
            [
              "**spdxPackage**: PackageInfoOccurrence represents an SPDX Package Information section: https://spdx.github.io/spdx-spec/3-package-information/",
              {
                "$ul": [
                  "**comment**: A place for the SPDX file creator to record any general comments about the package being described",
                  "**filename**: Provide the actual file name of the package, or path of the directory being treated as a package",
                  "**homePage**: Output only. Provide a place for the SPDX file creator to record a web site that serves as the package's home page",
                  "**id**: Uniquely identify any element in an SPDX document which may be referenced by other elements",
                  [
                    "**licenseConcluded**: License information.",
                    {
                      "$ul": [
                        "**comments**: Comments",
                        "**expression**: Often a single license can be used to represent the licensing terms. Sometimes it is necessary to include a choice of one or more licenses or some combination of license identifiers. Examples: \"LGPL-2.1-only OR MIT\", \"LGPL-2.1-only AND MIT\", \"GPL-2.0-or-later WITH Bison-exception-2.2\"."
                      ]
                    }
                  ],
                  "**packageType**: Output only. The type of package: OS, MAVEN, GO, GO_STDLIB, etc.",
                  "**sourceInfo**: Provide a place for the SPDX file creator to record any relevant background information or additional comments about the origin of the package",
                  "**summaryDescription**: Output only. A short description of the package",
                  "**title**: Output only. Identify the full name of the package as given by the Package Originator",
                  "**version**: Output only. Identify the version of the package"
                ]
              }
            ],
            [
              "**spdxRelationship**: RelationshipOccurrence represents an SPDX Relationship section: https://spdx.github.io/spdx-spec/7-relationships-between-SPDX-elements/",
              {
                "$ul": [
                  "**comment**: A place for the SPDX file creator to record any general comments about the relationship",
                  "**source**: Also referred to as SPDXRef-A The source SPDX element (file, package, etc)",
                  "**target**: Also referred to as SPDXRef-B The target SPDC element (file, package, etc) In cases where there are \"known unknowns\", the use of the keyword NOASSERTION can be used The keywords NONE can be used to indicate that an SPDX element (package/file/snippet) has no other elements connected by some relationship to it",
                  "**type**: Output only. The type of relationship between the source and target SPDX elements"
                ]
              }
            ],
            "**updateTime**: Output only. The time this occurrence was last updated.",
            [
              "**vulnerability**: Details of a vulnerability Occurrence.",
              {
                "$ul": [
                  "**cvssScore**: Output only. The CVSS score of this vulnerability. CVSS score is on a scale of 0-10 where 0 indicates low severity and 10 indicates high severity.",
                  [
                    "**cvssV2**: Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
                    {
                      "$ul": [
                        "**attackComplexity**: Defined in CVSS v3, CVSS v2",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
                        "**authentication**: Defined in CVSS v2",
                        "**availabilityImpact**: Defined in CVSS v3, CVSS v2",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**: Defined in CVSS v3, CVSS v2",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**: Defined in CVSS v3, CVSS v2",
                        "**privilegesRequired**: Defined in CVSS v3",
                        "**scope**: Defined in CVSS v3",
                        "**userInteraction**: Defined in CVSS v3"
                      ]
                    }
                  ],
                  [
                    "**cvssV3**: Common Vulnerability Scoring System. This message is compatible with CVSS v2 and v3. For CVSS v2 details, see https://www.first.org/cvss/v2/guide CVSS v2 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator For CVSS v3 details, see https://www.first.org/cvss/specification-document CVSS v3 calculator: https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator",
                    {
                      "$ul": [
                        "**attackComplexity**: Defined in CVSS v3, CVSS v2",
                        "**attackVector**: Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Defined in CVSS v3, CVSS v2",
                        "**authentication**: Defined in CVSS v2",
                        "**availabilityImpact**: Defined in CVSS v3, CVSS v2",
                        "**baseScore**: The base score is a function of the base metric scores.",
                        "**confidentialityImpact**: Defined in CVSS v3, CVSS v2",
                        "**exploitabilityScore**",
                        "**impactScore**",
                        "**integrityImpact**: Defined in CVSS v3, CVSS v2",
                        "**privilegesRequired**: Defined in CVSS v3",
                        "**scope**: Defined in CVSS v3",
                        "**userInteraction**: Defined in CVSS v3"
                      ]
                    }
                  ],
                  "**cvssVersion**: Output only. CVSS version used to populate cvss_score and severity.",
                  "**effectiveSeverity**: The distro assigned severity for this vulnerability when it is available, and note provider assigned severity when distro has not yet assigned a severity for this vulnerability. When there are multiple PackageIssues for this vulnerability, they can have different effective severities because some might be provided by the distro while others are provided by the language ecosystem for a language pack. For this reason, it is advised to use the effective severity on the PackageIssue level. In the case where multiple PackageIssues have differing effective severities, this field should be the highest severity for any of the PackageIssues.",
                  "**extraDetails**: Occurrence-specific extra details about the vulnerability.",
                  "**longDescription**: Output only. A detailed description of this vulnerability.",
                  "**packageIssue**: Required. The set of affected locations and their fixes (if available) within the associated resource.",
                  "**relatedUrls**: Output only. URLs related to this vulnerability.",
                  "**severity**: Output only. The note provider assigned Severity of the vulnerability.",
                  "**shortDescription**: Output only. A one sentence description of this vulnerability.",
                  "**type**: The type of package; whether native or non native(ruby gems, node.js packages etc)",
                  [
                    "**vexAssessment**: VexAssessment provides all publisher provided Vex information that is related to this vulnerability.",
                    {
                      "$ul": [
                        "**cve**: Holds the MITRE standard Common Vulnerabilities and Exposures (CVE) tracking number for the vulnerability. Deprecated: Use vulnerability_id instead to denote CVEs.",
                        "**impacts**: Contains information about the impact of this vulnerability, this will change with time.",
                        [
                          "**justification**: Justification provides the justification when the state of the assessment if NOT_AFFECTED.",
                          {
                            "$ul": [
                              "**details**: Additional details on why this justification was chosen.",
                              "**justificationType**: The justification type for this vulnerability."
                            ]
                          }
                        ],
                        "**noteName**: The VulnerabilityAssessment note from which this VexAssessment was generated. This will be of the form: `projects/[PROJECT_ID]/notes/[NOTE_ID]`.",
                        "**relatedUris**: Holds a list of references associated with this vulnerability item and assessment.",
                        "**remediations**: Specifies details on how to handle (and presumably, fix) a vulnerability.",
                        "**state**: Provides the state of this Vulnerability assessment.",
                        "**vulnerabilityId**: The vulnerability identifier for this Assessment. Will hold one of common identifiers e.g. CVE, GHSA etc."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
