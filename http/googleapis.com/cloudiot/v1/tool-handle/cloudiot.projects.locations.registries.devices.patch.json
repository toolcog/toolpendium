{
  "name": "cloudiot_projects_locations_registries_devices_patch",
  "description": "Updates a device.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. Only updates the `device` fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: `credentials`, `blocked`, and `metadata`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Device"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Device": {
        "description": "The device resource.",
        "properties": {
          "blocked": {
            "description": "If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.",
            "type": "boolean"
          },
          "config": {
            "$ref": "#/$defs/DeviceConfig"
          },
          "credentials": {
            "description": "The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.",
            "items": {
              "$ref": "#/$defs/DeviceCredential"
            },
            "type": "array"
          },
          "gatewayConfig": {
            "$ref": "#/$defs/GatewayConfig"
          },
          "id": {
            "description": "The user-defined device identifier. The device ID must be unique within a device registry.",
            "type": "string"
          },
          "lastConfigAckTime": {
            "description": "[Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastConfigSendTime": {
            "description": "[Output only] The last time a cloud-to-device config version was sent to the device.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastErrorStatus": {
            "$ref": "#/$defs/Status"
          },
          "lastErrorTime": {
            "description": "[Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastEventTime": {
            "description": "[Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastHeartbeatTime": {
            "description": "[Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.",
            "format": "google-datetime",
            "type": "string"
          },
          "lastStateTime": {
            "description": "[Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.",
            "format": "google-datetime",
            "type": "string"
          },
          "logLevel": {
            "description": "**Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.",
            "enum": [
              "LOG_LEVEL_UNSPECIFIED",
              "NONE",
              "ERROR",
              "INFO",
              "DEBUG"
            ],
            "type": "string"
          },
          "metadata": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.",
            "type": "object"
          },
          "name": {
            "description": "The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.",
            "type": "string"
          },
          "numId": {
            "description": "[Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.",
            "format": "uint64",
            "type": "string"
          },
          "state": {
            "$ref": "#/$defs/DeviceState"
          }
        },
        "type": "object"
      },
      "DeviceConfig": {
        "description": "The device configuration. Eventually delivered to devices.",
        "properties": {
          "binaryData": {
            "description": "The device configuration data.",
            "format": "byte",
            "type": "string"
          },
          "cloudUpdateTime": {
            "description": "[Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.",
            "format": "google-datetime",
            "type": "string"
          },
          "deviceAckTime": {
            "description": "[Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.",
            "format": "google-datetime",
            "type": "string"
          },
          "version": {
            "description": "[Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceCredential": {
        "description": "A server-stored device credential used for authentication.",
        "properties": {
          "expirationTime": {
            "description": "[Optional] The time at which this credential becomes invalid. This credential will be ignored for new client authentication requests after this timestamp; however, it will not be automatically deleted.",
            "format": "google-datetime",
            "type": "string"
          },
          "publicKey": {
            "$ref": "#/$defs/PublicKeyCredential"
          }
        },
        "type": "object"
      },
      "PublicKeyCredential": {
        "description": "A public key format and data.",
        "properties": {
          "format": {
            "description": "The format of the key.",
            "enum": [
              "UNSPECIFIED_PUBLIC_KEY_FORMAT",
              "RSA_PEM",
              "RSA_X509_PEM",
              "ES256_PEM",
              "ES256_X509_PEM"
            ],
            "type": "string"
          },
          "key": {
            "description": "The key data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GatewayConfig": {
        "description": "Gateway-related configuration and state.",
        "properties": {
          "gatewayAuthMethod": {
            "description": "Indicates how to authorize and/or authenticate devices to access the gateway.",
            "enum": [
              "GATEWAY_AUTH_METHOD_UNSPECIFIED",
              "ASSOCIATION_ONLY",
              "DEVICE_AUTH_TOKEN_ONLY",
              "ASSOCIATION_AND_DEVICE_AUTH_TOKEN"
            ],
            "type": "string"
          },
          "gatewayType": {
            "description": "Indicates whether the device is a gateway.",
            "enum": [
              "GATEWAY_TYPE_UNSPECIFIED",
              "GATEWAY",
              "NON_GATEWAY"
            ],
            "type": "string"
          },
          "lastAccessedGatewayId": {
            "description": "[Output only] The ID of the gateway the device accessed most recently.",
            "type": "string"
          },
          "lastAccessedGatewayTime": {
            "description": "[Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeviceState": {
        "description": "The device state, as reported by the device.",
        "properties": {
          "binaryData": {
            "description": "The device state data.",
            "format": "byte",
            "type": "string"
          },
          "updateTime": {
            "description": "[Output only] The time at which this state version was updated in Cloud IoT Core.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://cloudiot.googleapis.com//v1/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The device resource.",
        "**Key properties:**",
        {
          "$ul": [
            "**blocked**: If a device is blocked, connections or requests from this device will fail. Can be used to temporarily prevent the device from connecting if, for example, the sensor is generating bad data and needs maintenance.",
            [
              "**config**: The device configuration. Eventually delivered to devices.",
              {
                "$ul": [
                  "**binaryData**: The device configuration data.",
                  "**cloudUpdateTime**: [Output only] The time at which this configuration version was updated in Cloud IoT Core. This timestamp is set by the server.",
                  "**deviceAckTime**: [Output only] The time at which Cloud IoT Core received the acknowledgment from the device, indicating that the device has received this configuration version. If this field is not present, the device has not yet acknowledged that it received this version. Note that when the config was sent to the device, many config versions may have been available in Cloud IoT Core while the device was disconnected, and on connection, only the latest version is sent to the device. Some versions may never be sent to the device, and therefore are never acknowledged. This timestamp is set by Cloud IoT Core.",
                  "**version**: [Output only] The version of this update. The version number is assigned by the server, and is always greater than 0 after device creation. The version must be 0 on the `CreateDevice` request if a `config` is specified; the response of `CreateDevice` will always have a value of 1."
                ]
              }
            ],
            "**credentials**: The credentials used to authenticate this device. To allow credential rotation without interruption, multiple device credentials can be bound to this device. No more than 3 credentials can be bound to a single device at a time. When new credentials are added to a device, they are verified against the registry credentials. For details, see the description of the `DeviceRegistry.credentials` field.",
            [
              "**gatewayConfig**: Gateway-related configuration and state.",
              {
                "$ul": [
                  "**gatewayAuthMethod**: Indicates how to authorize and/or authenticate devices to access the gateway.",
                  "**gatewayType**: Indicates whether the device is a gateway.",
                  "**lastAccessedGatewayId**: [Output only] The ID of the gateway the device accessed most recently.",
                  "**lastAccessedGatewayTime**: [Output only] The most recent time at which the device accessed the gateway specified in `last_accessed_gateway`."
                ]
              }
            ],
            "**id**: The user-defined device identifier. The device ID must be unique within a device registry.",
            "**lastConfigAckTime**: [Output only] The last time a cloud-to-device config version acknowledgment was received from the device. This field is only for configurations sent through MQTT.",
            "**lastConfigSendTime**: [Output only] The last time a cloud-to-device config version was sent to the device.",
            [
              "**lastErrorStatus**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**lastErrorTime**: [Output only] The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub. This field is the timestamp of 'last_error_status'.",
            "**lastEventTime**: [Output only] The last time a telemetry event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.",
            "**lastHeartbeatTime**: [Output only] The last time an MQTT `PINGREQ` was received. This field applies only to devices connecting through MQTT. MQTT clients usually only send `PINGREQ` messages if the connection is idle, and no other messages have been sent. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.",
            "**lastStateTime**: [Output only] The last time a state event was received. Timestamps are periodically collected and written to storage; they may be stale by a few minutes.",
            "**logLevel**: **Beta Feature** The logging verbosity for device activity. If unspecified, DeviceRegistry.log_level will be used.",
            "**metadata**: The metadata key-value pairs assigned to the device. This metadata is not interpreted or indexed by Cloud IoT Core. It can be used to add contextual information for the device. Keys must conform to the regular expression a-zA-Z+ and be less than 128 bytes in length. Values are free-form strings. Each value must be less than or equal to 32 KB in size. The total size of all keys and values must be less than 256 KB, and the maximum number of key-value pairs is 500.",
            "**name**: The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID.",
            "**numId**: [Output only] A server-defined unique numeric ID for the device. This is a more compact way to identify devices, and it is globally unique.",
            [
              "**state**: The device state, as reported by the device.",
              {
                "$ul": [
                  "**binaryData**: The device state data.",
                  "**updateTime**: [Output only] The time at which this state version was updated in Cloud IoT Core."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
