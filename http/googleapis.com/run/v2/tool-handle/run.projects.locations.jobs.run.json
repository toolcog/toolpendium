{
  "name": "run_projects_locations_jobs_run",
  "description": "Triggers creation of a new Execution of this Job.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The full name of the Job. Format: projects/{project}/locations/{location}/jobs/{job}, where {project} can be project id or number."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudRunV2RunJobRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "GoogleCloudRunV2RunJobRequest": {
        "description": "Request message to create a new Execution of a Job.",
        "properties": {
          "etag": {
            "description": "A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.",
            "type": "string"
          },
          "overrides": {
            "$ref": "#/$defs/GoogleCloudRunV2Overrides"
          },
          "validateOnly": {
            "description": "Indicates that the request should be validated without actually deleting any resources.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudRunV2Overrides": {
        "description": "RunJob Overrides that contains Execution fields to be overridden.",
        "properties": {
          "containerOverrides": {
            "description": "Per container override specification.",
            "items": {
              "$ref": "#/$defs/GoogleCloudRunV2ContainerOverride"
            },
            "type": "array"
          },
          "taskCount": {
            "description": "Optional. The desired number of tasks the execution should run. Will replace existing task_count value.",
            "format": "int32",
            "type": "integer"
          },
          "timeout": {
            "description": "Duration in seconds the task may be active before the system will actively try to mark it failed and kill associated containers. Will replace existing timeout_seconds value.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudRunV2ContainerOverride": {
        "description": "Per-container override specification.",
        "properties": {
          "args": {
            "description": "Optional. Arguments to the entrypoint. Will replace existing args for override.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "clearArgs": {
            "description": "Optional. True if the intention is to clear out existing args list.",
            "type": "boolean"
          },
          "env": {
            "description": "List of environment variables to set in the container. Will be merged with existing env for override.",
            "items": {
              "$ref": "#/$defs/GoogleCloudRunV2EnvVar"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of the container specified as a DNS_LABEL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudRunV2EnvVar": {
        "description": "EnvVar represents an environment variable present in a Container.",
        "properties": {
          "name": {
            "description": "Required. Name of the environment variable. Must not exceed 32768 characters.",
            "type": "string"
          },
          "value": {
            "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\", and the maximum length is 32768 bytes.",
            "type": "string"
          },
          "valueSource": {
            "$ref": "#/$defs/GoogleCloudRunV2EnvVarSource"
          }
        },
        "type": "object"
      },
      "GoogleCloudRunV2EnvVarSource": {
        "description": "EnvVarSource represents a source for the value of an EnvVar.",
        "properties": {
          "secretKeyRef": {
            "$ref": "#/$defs/GoogleCloudRunV2SecretKeySelector"
          }
        },
        "type": "object"
      },
      "GoogleCloudRunV2SecretKeySelector": {
        "description": "SecretEnvVarSource represents a source for the value of an EnvVar.",
        "properties": {
          "secret": {
            "description": "Required. The name of the secret in Cloud Secret Manager. Format: {secret_name} if the secret is in the same project. projects/{project}/secrets/{secret_name} if the secret is in a different project.",
            "type": "string"
          },
          "version": {
            "description": "The Cloud Secret Manager secret version. Can be 'latest' for the latest version, an integer for a specific version, or a version alias.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://run.googleapis.com//v2/{name}:run{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
