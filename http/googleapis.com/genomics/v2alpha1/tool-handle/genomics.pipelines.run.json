{
  "name": "genomics_pipelines_run",
  "description": "Runs a pipeline. The returned Operation's metadata field will contain a google.genomics.v2alpha1.Metadata object describing the status of the pipeline execution. The [response] field will contain a google.genomics.v2alpha1.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the Genomics Service Agent must have access to your project. This is done automatically when the Cloud Genomics API is first enabled, but if you delete this permission, or if you enabled the Cloud Genomics API before the v2alpha1 API launch, you must disable and re-enable the API to grant the Genomics Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: * `genomics.operations.create` [1]: /genomics/gsa",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/RunPipelineRequest"
      }
    },
    "$defs": {
      "RunPipelineRequest": {
        "description": "The arguments to the `RunPipeline` method. The requesting user must have the `iam.serviceAccounts.actAs` permission for the Cloud Genomics service account or the request will fail.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-defined labels to associate with the returned operation. These labels are not propagated to any Google Cloud Platform resources used by the operation, and can be modified at any time. To associate labels with resources created while executing the operation, see the appropriate resource message (for example, `VirtualMachine`).",
            "type": "object"
          },
          "pipeline": {
            "$ref": "#/$defs/Pipeline"
          },
          "pubSubTopic": {
            "description": "The name of an existing Pub/Sub topic. The server will publish messages to this topic whenever the status of the operation changes. The Genomics Service Agent account must have publisher permissions to the specified topic or notifications will not be sent.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pipeline": {
        "description": "Specifies a series of actions to execute, expressed as Docker containers.",
        "properties": {
          "actions": {
            "description": "The list of actions to execute, in the order they are specified.",
            "items": {
              "$ref": "#/$defs/Action"
            },
            "type": "array"
          },
          "encryptedEnvironment": {
            "$ref": "#/$defs/Secret"
          },
          "environment": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).",
            "type": "object"
          },
          "resources": {
            "$ref": "#/$defs/Resources"
          },
          "timeout": {
            "description": "The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Action": {
        "description": "Specifies a single action that runs a Docker container.",
        "properties": {
          "commands": {
            "description": "If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "credentials": {
            "$ref": "#/$defs/Secret"
          },
          "encryptedEnvironment": {
            "$ref": "#/$defs/Secret"
          },
          "entrypoint": {
            "description": "If specified, overrides the `ENTRYPOINT` specified in the container.",
            "type": "string"
          },
          "environment": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The environment to pass into the container. This environment is merged with values specified in the google.genomics.v2alpha1.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to \"1\" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.",
            "type": "object"
          },
          "flags": {
            "description": "The set of flags to apply to this action.",
            "items": {
              "enum": [
                "FLAG_UNSPECIFIED",
                "IGNORE_EXIT_STATUS",
                "RUN_IN_BACKGROUND",
                "ALWAYS_RUN",
                "ENABLE_FUSE",
                "PUBLISH_EXPOSED_PORTS",
                "DISABLE_IMAGE_PREFETCH",
                "DISABLE_STANDARD_ERROR_CAPTURE",
                "BLOCK_EXTERNAL_NETWORK"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "imageUri": {
            "description": "Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.genomics.v2alpha1.Action.credentials field.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.",
            "type": "object"
          },
          "mounts": {
            "description": "A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action's standard output. - /google/logs/action/*/stderr The complete contents of each individual action's standard error output. ",
            "items": {
              "$ref": "#/$defs/Mount"
            },
            "type": "array"
          },
          "name": {
            "description": "An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.",
            "type": "string"
          },
          "pidNamespace": {
            "description": "An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.",
            "type": "string"
          },
          "portMappings": {
            "additionalProperties": {
              "format": "int32",
              "type": "integer"
            },
            "description": "A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.",
            "type": "object"
          },
          "timeout": {
            "description": "The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Secret": {
        "description": "Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.",
        "properties": {
          "cipherText": {
            "description": "The value of the cipherText response from the `encrypt` method. This field is intentionally unaudited.",
            "type": "string"
          },
          "keyName": {
            "description": "The name of the Cloud KMS key that will be used to decrypt the secret value. The VM service account must have the required permissions and authentication scopes to invoke the `decrypt` method on the specified key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Mount": {
        "description": "Carries information about a particular disk mount inside a container.",
        "properties": {
          "disk": {
            "description": "The name of the disk to mount, as specified in the resources section.",
            "type": "string"
          },
          "path": {
            "description": "The path to mount the disk inside the container.",
            "type": "string"
          },
          "readOnly": {
            "description": "If true, the disk is mounted read-only inside the container.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Resources": {
        "description": "The system resources for the pipeline run. At least one zone or region must be specified or the pipeline run will fail.",
        "properties": {
          "projectId": {
            "description": "The project ID to allocate resources in.",
            "type": "string"
          },
          "regions": {
            "description": "The list of regions allowed for VM allocation. If set, the `zones` field must not be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "virtualMachine": {
            "$ref": "#/$defs/VirtualMachine"
          },
          "zones": {
            "description": "The list of zones allowed for VM allocation. If set, the `regions` field must not be set.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VirtualMachine": {
        "description": "Carries information about a Compute Engine VM resource.",
        "properties": {
          "accelerators": {
            "description": "The list of accelerators to attach to the VM.",
            "items": {
              "$ref": "#/$defs/Accelerator"
            },
            "type": "array"
          },
          "bootDiskSizeGb": {
            "description": "The size of the boot disk, in GB. The boot disk must be large enough to accommodate all of the Docker images from each action in the pipeline at the same time. If not specified, a small but reasonable default value is used.",
            "format": "int32",
            "type": "integer"
          },
          "bootImage": {
            "description": "The host operating system image to use. Currently, only Container-Optimized OS images can be used. The default value is `projects/cos-cloud/global/images/family/cos-stable`, which selects the latest stable release of Container-Optimized OS. This option is provided to allow testing against the beta release of the operating system to ensure that the new version does not interact negatively with production pipelines. To test a pipeline against the beta release of Container-Optimized OS, use the value `projects/cos-cloud/global/images/family/cos-beta`.",
            "type": "string"
          },
          "cpuPlatform": {
            "description": "The CPU platform to request. An instance based on a newer platform can be allocated, but never one with fewer capabilities. The value of this parameter must be a valid Compute Engine CPU platform name (such as \"Intel Skylake\"). This parameter is only useful for carefully optimized work loads where the CPU platform has a significant impact. For more information about the effect of this parameter, see https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.",
            "type": "string"
          },
          "disks": {
            "description": "The list of disks to create and attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.",
            "items": {
              "$ref": "#/$defs/Disk"
            },
            "type": "array"
          },
          "dockerCacheImages": {
            "description": "The Compute Engine Disk Images to use as a Docker cache. The disks will be mounted into the Docker folder in a way that the images present in the cache will not need to be pulled. The digests of the cached images must match those of the tags used or the latest version will still be pulled. The root directory of the ext4 image must contain `image` and `overlay2` directories copied from the Docker directory of a VM where the desired Docker images have already been pulled. Any images pulled that are not cached will be stored on the first cache disk instead of the boot disk. Only a single image is supported.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enableStackdriverMonitoring": {
            "description": "Whether Stackdriver monitoring should be enabled on the VM.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional set of labels to apply to the VM and any attached disk resources. These labels must adhere to the [name and value restrictions](https://cloud.google.com/compute/docs/labeling-resources) on VM labels imposed by Compute Engine. Labels keys with the prefix 'google-' are reserved for use by Google. Labels applied at creation time to the VM. Applied on a best-effort basis to attached disk resources shortly after VM creation.",
            "type": "object"
          },
          "machineType": {
            "description": "Required. The machine type of the virtual machine to create. Must be the short name of a standard machine type (such as \"n1-standard-1\") or a custom machine type (such as \"custom-1-4096\", where \"1\" indicates the number of vCPUs and \"4096\" indicates the memory in MB). See [Creating an instance with a custom machine type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) for more specifications on creating a custom machine type.",
            "type": "string"
          },
          "network": {
            "$ref": "#/$defs/Network"
          },
          "nvidiaDriverVersion": {
            "deprecated": true,
            "description": "The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator. The version specified here must be compatible with the GPU libraries contained in the container being executed, and must be one of the drivers hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.",
            "type": "string"
          },
          "preemptible": {
            "description": "If true, allocate a preemptible VM.",
            "type": "boolean"
          },
          "reservation": {
            "description": "If specified, the VM will only be allocated inside the matching reservation. It will fail if the VM parameters don't match the reservation.",
            "type": "string"
          },
          "serviceAccount": {
            "$ref": "#/$defs/ServiceAccount"
          },
          "volumes": {
            "description": "The list of disks and other storage to create or attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.",
            "items": {
              "$ref": "#/$defs/Volume"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Accelerator": {
        "description": "Carries information about an accelerator that can be attached to a VM.",
        "properties": {
          "count": {
            "description": "How many accelerators of this type to attach.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "The accelerator type string (for example, \"nvidia-tesla-k80\"). Only NVIDIA GPU accelerators are currently supported. If an NVIDIA GPU is attached, the required runtime libraries will be made available to all containers under `/usr/local/nvidia`. The driver version to install must be specified using the NVIDIA driver version parameter on the virtual machine specification. Note that attaching a GPU increases the worker VM startup time by a few minutes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Disk": {
        "description": "Carries information about a disk that can be attached to a VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations. Specify either `Volume` or `Disk`, but not both.",
        "properties": {
          "name": {
            "description": "A user-supplied name for the disk. Used when mounting the disk into actions. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.",
            "type": "string"
          },
          "sizeGb": {
            "description": "The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.",
            "format": "int32",
            "type": "integer"
          },
          "sourceImage": {
            "description": "An optional image to put on the disk before attaching it to the VM.",
            "type": "string"
          },
          "type": {
            "description": "The Compute Engine disk type. If unspecified, `pd-standard` is used.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Network": {
        "description": "VM networking options.",
        "properties": {
          "name": {
            "description": "The network name to attach the VM's network interface to. The value will be prefixed with `global/networks/` unless it contains a `/`, in which case it is assumed to be a fully specified network resource URL. If unspecified, the global default network is used.",
            "type": "string"
          },
          "subnetwork": {
            "description": "If the specified network is configured for custom subnet creation, the name of the subnetwork to attach the instance to must be specified here. The value is prefixed with `regions/*/subnetworks/` unless it contains a `/`, in which case it is assumed to be a fully specified subnetwork resource URL. If the `*` character appears in the value, it is replaced with the region that the virtual machine has been allocated in.",
            "type": "string"
          },
          "usePrivateAddress": {
            "description": "If set to true, do not attach a public IP address to the VM. Note that without a public IP address, additional configuration is required to allow the VM to access Google services. See https://cloud.google.com/vpc/docs/configure-private-google-access for more information.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ServiceAccount": {
        "description": "Carries information about a Google Cloud service account.",
        "properties": {
          "email": {
            "description": "Email address of the service account. If not specified, the default Compute Engine service account for the project will be used.",
            "type": "string"
          },
          "scopes": {
            "description": "List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Volume": {
        "description": "Carries information about storage that can be attached to a VM. Specify either `Volume` or `Disk`, but not both.",
        "properties": {
          "existingDisk": {
            "$ref": "#/$defs/ExistingDisk"
          },
          "nfsMount": {
            "$ref": "#/$defs/NFSMount"
          },
          "persistentDisk": {
            "$ref": "#/$defs/PersistentDisk"
          },
          "volume": {
            "description": "A user-supplied name for the volume. Used when mounting the volume into `Actions`. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExistingDisk": {
        "description": "Configuration for an existing disk to be attached to the VM.",
        "properties": {
          "disk": {
            "description": "If `disk` contains slashes, the Cloud Life Sciences API assumes that it is a complete URL for the disk. If `disk` does not contain slashes, the Cloud Life Sciences API assumes that the disk is a zonal disk and a URL will be generated of the form `zones//disks/`, where `` is the zone in which the instance is allocated. The disk must be ext4 formatted. If all `Mount` references to this disk have the `read_only` flag set to true, the disk will be attached in `read-only` mode and can be shared with other instances. Otherwise, the disk will be available for writing but cannot be shared.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NFSMount": {
        "description": "Configuration for an `NFSMount` to be attached to the VM.",
        "properties": {
          "target": {
            "description": "A target NFS mount. The target must be specified as `address:/mount\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PersistentDisk": {
        "description": "Configuration for a persistent disk to be attached to the VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations.",
        "properties": {
          "sizeGb": {
            "description": "The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.",
            "format": "int32",
            "type": "integer"
          },
          "sourceImage": {
            "description": "An image to put on the disk before attaching it to the VM.",
            "type": "string"
          },
          "type": {
            "description": "The Compute Engine disk type. If unspecified, `pd-standard` is used.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://genomics.googleapis.com//v2alpha1/pipelines:run{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: An OperationMetadata or Metadata object. This will always be returned with the Operation.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. For example: `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`",
            "**response**: An Empty object."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
