{
  "name": "books_myconfig_syncVolumeLicenses",
  "description": "Request downloaded content access for specified volumes on the My eBooks shelf.",
  "parameters": {
    "type": "object",
    "properties": {
      "cpksver": {
        "type": "string",
        "description": "The device/version ID from which to release the restriction."
      },
      "nonce": {
        "type": "string",
        "description": "The client nonce value."
      },
      "source": {
        "type": "string",
        "description": "String to identify the originator of this request."
      },
      "features": {
        "items": {
          "enum": [
            "FEATURES_UNDEFINED",
            "RENTALS"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "List of features supported by the client, i.e., 'RENTALS'"
      },
      "includeNonComicsSeries": {
        "type": "boolean",
        "description": "Set to true to include non-comics series. Defaults to false."
      },
      "locale": {
        "type": "string",
        "description": "ISO-639-1, ISO-3166-1 codes for message localization, i.e. en_US."
      },
      "showPreorders": {
        "type": "boolean",
        "description": "Set to true to show pre-ordered books. Defaults to false."
      },
      "volumeIds": {
        "items": {
          "type": "string"
        },
        "type": "array",
        "description": "The volume(s) to request download restrictions for."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "cpksver",
      "nonce",
      "source"
    ]
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://books.googleapis.com//books/v1/myconfig/syncVolumeLicenses{?cpksver,nonce,source,features,includeNonComicsSeries,locale,showPreorders,volumeIds,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**items**: A list of volumes.",
            "**kind**: Resource type.",
            "**totalItems**: Total number of volumes found. This might be greater than the number of volumes returned in this response if results have been paginated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
