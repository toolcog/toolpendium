{
  "name": "healthcare_projects_locations_datasets_hl7V2Stores_create",
  "description": "Creates a new HL7v2 store within the parent dataset.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the dataset this HL7v2 store belongs to."
      },
      "hl7V2StoreId": {
        "type": "string",
        "description": "Required. The ID of the HL7v2 store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Hl7V2Store"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Hl7V2Store": {
        "description": "Represents an HL7v2 store.",
        "properties": {
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
            "type": "object"
          },
          "name": {
            "description": "Identifier. Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.",
            "type": "string"
          },
          "notificationConfig": {
            "$ref": "#/$defs/NotificationConfig"
          },
          "notificationConfigs": {
            "description": "A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.",
            "items": {
              "$ref": "#/$defs/Hl7V2NotificationConfig"
            },
            "type": "array"
          },
          "parserConfig": {
            "$ref": "#/$defs/ParserConfig"
          },
          "rejectDuplicateMessage": {
            "description": "Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NotificationConfig": {
        "description": "Specifies where to send notifications upon changes to a data store.",
        "properties": {
          "pubsubTopic": {
            "description": "The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.",
            "type": "string"
          },
          "sendForBulkImport": {
            "description": "Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Hl7V2NotificationConfig": {
        "description": "Specifies where and whether to send notifications upon changes to a data store.",
        "properties": {
          "filter": {
            "description": "Restricts notifications sent for messages matching a filter. If this is empty, all messages are matched. The following syntax is available: * A string field value can be written as text inside quotation marks, for example `\"query text\"`. The only valid relational operation for text fields is equality (`=`), where text is searched within the field, rather than having the field be equal to the text. For example, `\"Comment = great\"` returns messages with `great` in the comment field. * A number field value can be written as an integer, a decimal, or an exponential. The valid relational operators for number fields are the equality operator (`=`), along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * A date field value must be written in `yyyy-mm-dd` form. Fields with date and time use the RFC3339 time format. Leading zeros are required for one-digit months and days. The valid relational operators for date fields are the equality operator (`=`) , along with the less than/greater than operators (`<`, `<=`, `>`, `>=`). Note that there is no inequality (`!=`) operator. You can prepend the `NOT` operator to an expression to negate it. * Multiple field query expressions can be combined in one query by adding `AND` or `OR` operators between the expressions. If a boolean operator appears within a quoted string, it is not treated as special, it's just another part of the character string to be matched. You can prepend the `NOT` operator to an expression to negate it. Fields/functions available for filtering are: * `message_type`, from the MSH-9.1 field. For example, `NOT message_type = \"ADT\"`. * `send_date` or `sendDate`, the YYYY-MM-DD date the message was sent in the dataset's time_zone, from the MSH-7 segment. For example, `send_date < \"2017-01-02\"`. * `send_time`, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, `send_time < \"2017-01-02T00:00:00-05:00\"`. * `create_time`, the timestamp when the message was created in the HL7v2 store. Use the RFC3339 time format for comparisons. For example, `create_time < \"2017-01-02T00:00:00-05:00\"`. * `send_facility`, the care center that the message came from, from the MSH-4 segment. For example, `send_facility = \"ABC\"`. * `PatientId(value, type)`, which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, `PatientId(\"123456\", \"MRN\")`. * `labels.x`, a string value of the label with key `x` as set using the Message.labels map. For example, `labels.\"priority\"=\"high\"`. The operator `:*` can be used to assert the existence of a label. For example, `labels.\"priority\":*`.",
            "type": "string"
          },
          "pubsubTopic": {
            "description": "The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ParserConfig": {
        "description": "The configuration for the parser. It determines how the server parses the messages.",
        "properties": {
          "allowNullHeader": {
            "description": "Determines whether messages with no header are allowed.",
            "type": "boolean"
          },
          "schema": {
            "$ref": "#/$defs/SchemaPackage"
          },
          "segmentTerminator": {
            "description": "Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.",
            "format": "byte",
            "type": "string"
          },
          "version": {
            "description": "Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation.",
            "enum": [
              "PARSER_VERSION_UNSPECIFIED",
              "V1",
              "V2",
              "V3"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SchemaPackage": {
        "description": "A schema package contains a set of schemas and type definitions.",
        "properties": {
          "ignoreMinOccurs": {
            "description": "Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.",
            "type": "boolean"
          },
          "schemas": {
            "description": "Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.",
            "items": {
              "$ref": "#/$defs/Hl7SchemaConfig"
            },
            "type": "array"
          },
          "schematizedParsingType": {
            "description": "Determines how messages that fail to parse are handled.",
            "enum": [
              "SCHEMATIZED_PARSING_TYPE_UNSPECIFIED",
              "SOFT_FAIL",
              "HARD_FAIL"
            ],
            "type": "string"
          },
          "types": {
            "description": "Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.",
            "items": {
              "$ref": "#/$defs/Hl7TypesConfig"
            },
            "type": "array"
          },
          "unexpectedSegmentHandling": {
            "description": "Determines how unexpected segments (segments not matched to the schema) are handled.",
            "enum": [
              "UNEXPECTED_SEGMENT_HANDLING_MODE_UNSPECIFIED",
              "FAIL",
              "SKIP",
              "PARSE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Hl7SchemaConfig": {
        "description": "Root config message for HL7v2 schema. This contains a schema structure of groups and segments, and filters that determine which messages to apply the schema structure to.",
        "properties": {
          "messageSchemaConfigs": {
            "additionalProperties": {
              "$ref": "#/$defs/SchemaGroup"
            },
            "description": "Map from each HL7v2 message type and trigger event pair, such as ADT_A04, to its schema configuration root group.",
            "type": "object"
          },
          "version": {
            "description": "Each VersionSource is tested and only if they all match is the schema used for the message.",
            "items": {
              "$ref": "#/$defs/VersionSource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SchemaGroup": {
        "description": "An HL7v2 logical group construct.",
        "properties": {
          "choice": {
            "description": "True indicates that this is a choice group, meaning that only one of its segments can exist in a given message.",
            "type": "boolean"
          },
          "maxOccurs": {
            "description": "The maximum number of times this group can be repeated. 0 or -1 means unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "members": {
            "description": "Nested groups and/or segments.",
            "items": {
              "$ref": "#/$defs/GroupOrSegment"
            },
            "type": "array"
          },
          "minOccurs": {
            "description": "The minimum number of times this group must be present/repeated.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of this group. For example, \"ORDER_DETAIL\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupOrSegment": {
        "description": "Construct representing a logical group or a segment.",
        "properties": {
          "group": {
            "$ref": "#/$defs/SchemaGroup"
          },
          "segment": {
            "$ref": "#/$defs/SchemaSegment"
          }
        },
        "type": "object"
      },
      "SchemaSegment": {
        "description": "An HL7v2 Segment.",
        "properties": {
          "maxOccurs": {
            "description": "The maximum number of times this segment can be present in this group. 0 or -1 means unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "minOccurs": {
            "description": "The minimum number of times this segment can be present in this group.",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The Segment type. For example, \"PID\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VersionSource": {
        "description": "Describes a selector for extracting and matching an MSH field to a value.",
        "properties": {
          "mshField": {
            "description": "The field to extract from the MSH segment. For example, \"3.1\" or \"18[1].1\".",
            "type": "string"
          },
          "value": {
            "description": "The value to match with the field. For example, \"My Application Name\" or \"2.3\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Hl7TypesConfig": {
        "description": "Root config for HL7v2 datatype definitions for a specific HL7v2 version.",
        "properties": {
          "type": {
            "description": "The HL7v2 type definitions.",
            "items": {
              "$ref": "#/$defs/Type"
            },
            "type": "array"
          },
          "version": {
            "description": "The version selectors that this config applies to. A message must match ALL version sources to apply.",
            "items": {
              "$ref": "#/$defs/VersionSource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Type": {
        "description": "A type definition for some HL7v2 type (incl. Segments and Datatypes).",
        "properties": {
          "fields": {
            "description": "The (sub) fields this type has (if not primitive).",
            "items": {
              "$ref": "#/$defs/Field"
            },
            "type": "array"
          },
          "name": {
            "description": "The name of this type. This would be the segment or datatype name. For example, \"PID\" or \"XPN\".",
            "type": "string"
          },
          "primitive": {
            "description": "If this is a primitive type then this field is the type of the primitive For example, STRING. Leave unspecified for composite types.",
            "enum": [
              "PRIMITIVE_UNSPECIFIED",
              "STRING",
              "VARIES",
              "UNESCAPED_STRING"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Field": {
        "description": "A (sub) field of a type.",
        "properties": {
          "maxOccurs": {
            "description": "The maximum number of times this field can be repeated. 0 or -1 means unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "minOccurs": {
            "description": "The minimum number of times this field must be present/repeated.",
            "format": "int32",
            "type": "integer"
          },
          "name": {
            "description": "The name of the field. For example, \"PID-1\" or just \"1\".",
            "type": "string"
          },
          "table": {
            "description": "The HL7v2 table this field refers to. For example, PID-15 (Patient's Primary Language) usually refers to table \"0296\".",
            "type": "string"
          },
          "type": {
            "description": "The type of this field. A Type with this name must be defined in an Hl7TypesConfig.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://healthcare.googleapis.com//v1beta1/{parent}/hl7V2Stores{?hl7V2StoreId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents an HL7v2 store.",
        "**Key properties:**",
        {
          "$ul": [
            "**labels**: User-supplied key-value pairs used to organize HL7v2 stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
            "**name**: Identifier. Resource name of the HL7v2 store, of the form `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.",
            [
              "**notificationConfig**: Specifies where to send notifications upon changes to a data store.",
              {
                "$ul": [
                  "**pubsubTopic**: The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.",
                  "**sendForBulkImport**: Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports."
                ]
              }
            ],
            "**notificationConfigs**: A list of notification configs. Each configuration uses a filter to determine whether to publish a message (both Ingest & Create) on the corresponding notification destination. Only the message name is sent as part of the notification. Supplied by the client.",
            [
              "**parserConfig**: The configuration for the parser. It determines how the server parses the messages.",
              {
                "$ul": [
                  "**allowNullHeader**: Determines whether messages with no header are allowed.",
                  [
                    "**schema**: A schema package contains a set of schemas and type definitions.",
                    {
                      "$ul": [
                        "**ignoreMinOccurs**: Flag to ignore all min_occurs restrictions in the schema. This means that incoming messages can omit any group, segment, field, component, or subcomponent.",
                        "**schemas**: Schema configs that are layered based on their VersionSources that match the incoming message. Schema configs present in higher indices override those in lower indices with the same message type and trigger event if their VersionSources all match an incoming message.",
                        "**schematizedParsingType**: Determines how messages that fail to parse are handled.",
                        "**types**: Schema type definitions that are layered based on their VersionSources that match the incoming message. Type definitions present in higher indices override those in lower indices with the same type name if their VersionSources all match an incoming message.",
                        "**unexpectedSegmentHandling**: Determines how unexpected segments (segments not matched to the schema) are handled."
                      ]
                    }
                  ],
                  "**segmentTerminator**: Byte(s) to use as the segment terminator. If this is unset, '\\r' is used as segment terminator, matching the HL7 version 2 specification.",
                  "**version**: Immutable. Determines the version of both the default parser to be used when `schema` is not given, as well as the schematized parser used when `schema` is specified. This field is immutable after HL7v2 store creation."
                ]
              }
            ],
            "**rejectDuplicateMessage**: Determines whether to reject duplicate messages. A duplicate message is a message with the same raw bytes as a message that has already been ingested/created in this HL7v2 store. The default value is false, meaning that the store accepts the duplicate messages and it also returns the same ACK message in the IngestMessageResponse as has been returned previously. Note that only one resource is created in the store. When this field is set to true, CreateMessage/IngestMessage requests with a duplicate message will be rejected by the store, and IngestMessageErrorDetail returns a NACK message upon rejection."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
