{
  "name": "healthcare_projects_locations_datasets_fhirStores_create",
  "description": "Creates a new FHIR store within the parent dataset.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the dataset this FHIR store belongs to."
      },
      "fhirStoreId": {
        "type": "string",
        "description": "Required. The ID of the FHIR store that is being created. The string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/FhirStore"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "FhirStore": {
        "description": "Represents a FHIR store.",
        "properties": {
          "complexDataTypeReferenceParsing": {
            "description": "Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New stores will have this value set to ENABLED after a notification period. Warning: turning on this flag causes processing existing resources to fail if they contain references to non-existent resources.",
            "enum": [
              "COMPLEX_DATA_TYPE_REFERENCE_PARSING_UNSPECIFIED",
              "DISABLED",
              "ENABLED"
            ],
            "type": "string"
          },
          "defaultSearchHandlingStrict": {
            "description": "If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`.",
            "type": "boolean"
          },
          "disableReferentialIntegrity": {
            "description": "Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.",
            "type": "boolean"
          },
          "disableResourceVersioning": {
            "description": "Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.",
            "type": "boolean"
          },
          "enableUpdateCreate": {
            "description": "Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
            "type": "object"
          },
          "name": {
            "description": "Output only. Identifier. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
            "type": "string"
          },
          "notificationConfig": {
            "$ref": "#/$defs/NotificationConfig"
          },
          "notificationConfigs": {
            "description": "Specifies where and whether to send notifications upon changes to a FHIR store.",
            "items": {
              "$ref": "#/$defs/FhirNotificationConfig"
            },
            "type": "array"
          },
          "streamConfigs": {
            "description": "A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.",
            "items": {
              "$ref": "#/$defs/StreamConfig"
            },
            "type": "array"
          },
          "validationConfig": {
            "$ref": "#/$defs/ValidationConfig"
          },
          "version": {
            "description": "Required. Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store.",
            "enum": [
              "VERSION_UNSPECIFIED",
              "DSTU2",
              "STU3",
              "R4"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "NotificationConfig": {
        "description": "Specifies where to send notifications upon changes to a data store.",
        "properties": {
          "pubsubTopic": {
            "description": "The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.",
            "type": "string"
          },
          "sendForBulkImport": {
            "description": "Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "FhirNotificationConfig": {
        "description": "Contains the configuration for FHIR notifications.",
        "properties": {
          "pubsubTopic": {
            "description": "The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. The notification is a `PubsubMessage` with the following fields: * `PubsubMessage.Data` contains the resource name. * `PubsubMessage.MessageId` is the ID of this notification. It is guaranteed to be unique within the topic. * `PubsubMessage.PublishTime` is the time when the message was published. Note that notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. The Cloud Healthcare API service account, service-@gcp-sa-healthcare.iam.gserviceaccount.com, must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail (https://cloud.google.com/healthcare-api/docs/permissions-healthcare-api-gcp-products#dicom_fhir_and_hl7v2_store_cloud_pubsub_permissions). If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare-api/docs/how-tos/logging).",
            "type": "string"
          },
          "sendFullResource": {
            "description": "Whether to send full FHIR resource to this Pub/Sub topic.",
            "type": "boolean"
          },
          "sendPreviousResourceOnDelete": {
            "description": "Whether to send full FHIR resource to this Pub/Sub topic for deleting FHIR resource. Note that setting this to true does not guarantee that all previous resources will be sent in the format of full FHIR resource. When a resource change is too large or during heavy traffic, only the resource name will be sent. Clients should always check the \"payloadType\" label from a Pub/Sub message to determine whether it needs to fetch the full previous resource as a separate operation.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "StreamConfig": {
        "description": "Contains configuration for streaming FHIR export.",
        "properties": {
          "bigqueryDestination": {
            "$ref": "#/$defs/GoogleCloudHealthcareV1FhirBigQueryDestination"
          },
          "deidentifiedStoreDestination": {
            "$ref": "#/$defs/DeidentifiedStoreDestination"
          },
          "resourceTypes": {
            "description": "Supply a FHIR resource type (such as \"Patient\" or \"Observation\"). See https://www.hl7.org/fhir/valueset-resource-types.html for a list of all FHIR resource types. The server treats an empty list as an intent to stream all the supported resource types in this FHIR store.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudHealthcareV1FhirBigQueryDestination": {
        "description": "The configuration for exporting to BigQuery.",
        "properties": {
          "datasetUri": {
            "description": "BigQuery URI to an existing dataset, up to 2000 characters long, in the format `bq://projectId.bqDatasetId`.",
            "type": "string"
          },
          "force": {
            "description": "If this flag is `TRUE`, all tables are deleted from the dataset before the new exported tables are written. If the flag is not set and the destination dataset contains tables, the export call returns an error. If `write_disposition` is specified, this parameter is ignored. force=false is equivalent to write_disposition=WRITE_EMPTY and force=true is equivalent to write_disposition=WRITE_TRUNCATE.",
            "type": "boolean"
          },
          "schemaConfig": {
            "$ref": "#/$defs/SchemaConfig"
          },
          "writeDisposition": {
            "description": "Determines if existing data in the destination dataset is overwritten, appended to, or not written if the tables contain data. If a write_disposition is specified, the `force` parameter is ignored.",
            "enum": [
              "WRITE_DISPOSITION_UNSPECIFIED",
              "WRITE_EMPTY",
              "WRITE_TRUNCATE",
              "WRITE_APPEND"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "SchemaConfig": {
        "description": "Configuration for the FHIR BigQuery schema. Determines how the server generates the schema.",
        "properties": {
          "lastUpdatedPartitionConfig": {
            "$ref": "#/$defs/TimePartitioning"
          },
          "recursiveStructureDepth": {
            "description": "The depth for all recursive structures in the output analytics schema. For example, `concept` in the CodeSystem resource is a recursive structure; when the depth is 2, the CodeSystem table will have a column called `concept.concept` but not `concept.concept.concept`. If not specified or set to 0, the server will use the default value 2. The maximum depth allowed is 5.",
            "format": "int64",
            "type": "string"
          },
          "schemaType": {
            "description": "Specifies the output schema type. Schema type is required.",
            "enum": [
              "SCHEMA_TYPE_UNSPECIFIED",
              "ANALYTICS",
              "ANALYTICS_V2"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TimePartitioning": {
        "description": "Configuration for FHIR BigQuery time-partitioned tables.",
        "properties": {
          "expirationMs": {
            "description": "Number of milliseconds for which to keep the storage for a partition.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "Type of partitioning.",
            "enum": [
              "PARTITION_TYPE_UNSPECIFIED",
              "HOUR",
              "DAY",
              "MONTH",
              "YEAR"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeidentifiedStoreDestination": {
        "description": "Contains configuration for streaming de-identified FHIR export.",
        "properties": {
          "config": {
            "$ref": "#/$defs/DeidentifyConfig"
          },
          "store": {
            "description": "The full resource name of a Cloud Healthcare FHIR store, for example, `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeidentifyConfig": {
        "description": "Configures de-id options specific to different types of content. Each submessage customizes the handling of an https://tools.ietf.org/html/rfc6838 media type or subtype. Configs are applied in a nested manner at runtime.",
        "properties": {
          "dicom": {
            "$ref": "#/$defs/DicomConfig"
          },
          "fhir": {
            "$ref": "#/$defs/FhirConfig"
          },
          "image": {
            "$ref": "#/$defs/ImageConfig"
          },
          "text": {
            "$ref": "#/$defs/TextConfig"
          },
          "useRegionalDataProcessing": {
            "description": "Ensures in-flight data remains in the region of origin during de-identification. Using this option results in a significant reduction of throughput, and is not compatible with `LOCATION` or `ORGANIZATION_NAME` infoTypes. `LOCATION` must be excluded within TextConfig, and must also be excluded within ImageConfig if image redaction is required.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DicomConfig": {
        "description": "Specifies the parameters needed for de-identification of DICOM stores.",
        "properties": {
          "filterProfile": {
            "description": "Tag filtering profile that determines which tags to keep/remove.",
            "enum": [
              "TAG_FILTER_PROFILE_UNSPECIFIED",
              "MINIMAL_KEEP_LIST_PROFILE",
              "ATTRIBUTE_CONFIDENTIALITY_BASIC_PROFILE",
              "KEEP_ALL_PROFILE",
              "DEIDENTIFY_TAG_CONTENTS"
            ],
            "type": "string"
          },
          "keepList": {
            "$ref": "#/$defs/TagFilterList"
          },
          "removeList": {
            "$ref": "#/$defs/TagFilterList"
          },
          "skipIdRedaction": {
            "description": "If true, skip replacing StudyInstanceUID, SeriesInstanceUID, SOPInstanceUID, and MediaStorageSOPInstanceUID and leave them untouched. The Cloud Healthcare API regenerates these UIDs by default based on the DICOM Standard's reasoning: \"Whilst these UIDs cannot be mapped directly to an individual out of context, given access to the original images, or to a database of the original images containing the UIDs, it would be possible to recover the individual's identity.\" http://dicom.nema.org/medical/dicom/current/output/chtml/part15/sect_E.3.9.html",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TagFilterList": {
        "description": "List of tags to be filtered.",
        "properties": {
          "tags": {
            "description": "Tags to be filtered. Tags must be DICOM Data Elements, File Meta Elements, or Directory Structuring Elements, as defined at: http://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,. They may be provided by \"Keyword\" or \"Tag\". For example \"PatientID\", \"00100010\".",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FhirConfig": {
        "description": "Specifies how to handle de-identification of a FHIR store.",
        "properties": {
          "defaultKeepExtensions": {
            "description": "The behaviour for handling FHIR extensions that aren't otherwise specified for de-identification. If true, all extensions are preserved during de-identification by default. If false or unspecified, all extensions are removed during de-identification by default.",
            "type": "boolean"
          },
          "fieldMetadataList": {
            "description": "Specifies FHIR paths to match and how to transform them. Any field that is not matched by a FieldMetadata is passed through to the output dataset unmodified. All extensions will be processed according to `default_keep_extensions`.",
            "items": {
              "$ref": "#/$defs/FieldMetadata"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FieldMetadata": {
        "description": "Specifies FHIR paths to match, and how to handle de-identification of matching fields.",
        "properties": {
          "action": {
            "description": "Deidentify action for one field.",
            "enum": [
              "ACTION_UNSPECIFIED",
              "TRANSFORM",
              "INSPECT_AND_TRANSFORM",
              "DO_NOT_TRANSFORM"
            ],
            "type": "string"
          },
          "paths": {
            "description": "List of paths to FHIR fields to be redacted. Each path is a period-separated list where each component is either a field name or FHIR type name, for example: Patient, HumanName. For \"choice\" types (those defined in the FHIR spec with the form: field[x]) we use two separate components. For example, \"deceasedAge.unit\" is matched by \"Deceased.Age.unit\". Supported types are: AdministrativeGenderCode, Base64Binary, Boolean, Code, Date, DateTime, Decimal, HumanName, Id, Instant, Integer, LanguageCode, Markdown, Oid, PositiveInt, String, UnsignedInt, Uri, Uuid, Xhtml.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ImageConfig": {
        "description": "Specifies how to handle de-identification of image pixels.",
        "properties": {
          "textRedactionMode": {
            "description": "Determines how to redact text from image.",
            "enum": [
              "TEXT_REDACTION_MODE_UNSPECIFIED",
              "REDACT_ALL_TEXT",
              "REDACT_SENSITIVE_TEXT",
              "REDACT_NO_TEXT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "TextConfig": {
        "properties": {
          "additionalTransformations": {
            "description": "Transformations to apply to the detected data, overridden by `exclude_info_types`.",
            "items": {
              "$ref": "#/$defs/InfoTypeTransformation"
            },
            "type": "array"
          },
          "excludeInfoTypes": {
            "description": "InfoTypes to skip transforming, overriding `additional_transformations`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "transformations": {
            "description": "The transformations to apply to the detected data. Deprecated. Use `additional_transformations` instead.",
            "items": {
              "$ref": "#/$defs/InfoTypeTransformation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InfoTypeTransformation": {
        "description": "A transformation to apply to text that is identified as a specific info_type.",
        "properties": {
          "characterMaskConfig": {
            "$ref": "#/$defs/CharacterMaskConfig"
          },
          "cryptoHashConfig": {
            "$ref": "#/$defs/CryptoHashConfig"
          },
          "dateShiftConfig": {
            "$ref": "#/$defs/DateShiftConfig"
          },
          "infoTypes": {
            "description": "InfoTypes to apply this transformation to. If this is not specified, the transformation applies to any info_type.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "redactConfig": {
            "$ref": "#/$defs/RedactConfig"
          },
          "replaceWithInfoTypeConfig": {
            "$ref": "#/$defs/ReplaceWithInfoTypeConfig"
          }
        },
        "type": "object"
      },
      "CharacterMaskConfig": {
        "description": "Mask a string by replacing its characters with a fixed character.",
        "properties": {
          "maskingCharacter": {
            "description": "Character to mask the sensitive values. If not supplied, defaults to \"*\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CryptoHashConfig": {
        "description": "Pseudonymization method that generates surrogates via cryptographic hashing. Uses SHA-256. Outputs a base64-encoded representation of the hashed output (for example, `L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=`).",
        "properties": {
          "cryptoKey": {
            "description": "An AES 128/192/256 bit key. Causes the hash to be computed based on this key. A default key is generated for each Deidentify operation and is used when neither `crypto_key` nor `kms_wrapped` is specified. Must not be set if `kms_wrapped` is set.",
            "format": "byte",
            "type": "string"
          },
          "kmsWrapped": {
            "$ref": "#/$defs/KmsWrappedCryptoKey"
          }
        },
        "type": "object"
      },
      "KmsWrappedCryptoKey": {
        "description": "Include to use an existing data crypto key wrapped by KMS. The wrapped key must be a 128-, 192-, or 256-bit key. The key must grant the Cloud IAM permission `cloudkms.cryptoKeyVersions.useToDecrypt` to the project's Cloud Healthcare Service Agent service account. For more information, see [Creating a wrapped key] (https://cloud.google.com/dlp/docs/create-wrapped-key).",
        "properties": {
          "cryptoKey": {
            "description": "Required. The resource name of the KMS CryptoKey to use for unwrapping. For example, `projects/{project_id}/locations/{location_id}/keyRings/{keyring}/cryptoKeys/{key}`.",
            "type": "string"
          },
          "wrappedKey": {
            "description": "Required. The wrapped data crypto key.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateShiftConfig": {
        "description": "Shift a date forward or backward in time by a random amount which is consistent for a given patient and crypto key combination.",
        "properties": {
          "cryptoKey": {
            "description": "An AES 128/192/256 bit key. The date shift is computed based on this key and the patient ID. If the patient ID is empty for a DICOM resource, the date shift is computed based on this key and the study instance UID. If `crypto_key` is not set, then `kms_wrapped` is used to calculate the date shift. If neither is set, a default key is generated for each de-identify operation. Must not be set if `kms_wrapped` is set.",
            "format": "byte",
            "type": "string"
          },
          "kmsWrapped": {
            "$ref": "#/$defs/KmsWrappedCryptoKey"
          }
        },
        "type": "object"
      },
      "RedactConfig": {
        "description": "Define how to redact sensitive values. Default behaviour is erase. For example, \"My name is Jane.\" becomes \"My name is .\"",
        "properties": {},
        "type": "object"
      },
      "ReplaceWithInfoTypeConfig": {
        "description": "When using the INSPECT_AND_TRANSFORM action, each match is replaced with the name of the info_type. For example, \"My name is Jane\" becomes \"My name is [PERSON_NAME].\" The TRANSFORM action is equivalent to redacting.",
        "properties": {},
        "type": "object"
      },
      "ValidationConfig": {
        "description": "Contains the configuration for FHIR profiles and validation.",
        "properties": {
          "disableFhirpathValidation": {
            "description": "Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.",
            "type": "boolean"
          },
          "disableProfileValidation": {
            "description": "Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.",
            "type": "boolean"
          },
          "disableReferenceTypeValidation": {
            "description": "Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.",
            "type": "boolean"
          },
          "disableRequiredFieldValidation": {
            "description": "Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.",
            "type": "boolean"
          },
          "enabledImplementationGuides": {
            "description": "A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `[\"http://hl7.org/fhir/us/core/ImplementationGuide/ig\"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using \"value\" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://healthcare.googleapis.com//v1/{parent}/fhirStores{?fhirStoreId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a FHIR store.",
        "**Key properties:**",
        {
          "$ul": [
            "**complexDataTypeReferenceParsing**: Enable parsing of references within complex FHIR data types such as Extensions. If this value is set to ENABLED, then features like referential integrity and Bundle reference rewriting apply to all references. If this flag has not been specified the behavior of the FHIR store will not change, references in complex data types will not be parsed. New stores will have this value set to ENABLED after a notification period. Warning: turning on this flag causes processing existing resources to fail if they contain references to non-existent resources.",
            "**defaultSearchHandlingStrict**: If true, overrides the default search behavior for this FHIR store to `handling=strict` which returns an error for unrecognized search parameters. If false, uses the FHIR specification default `handling=lenient` which ignores unrecognized search parameters. The handling can always be changed from the default on an individual API call by setting the HTTP header `Prefer: handling=strict` or `Prefer: handling=lenient`.",
            "**disableReferentialIntegrity**: Immutable. Whether to disable referential integrity in this FHIR store. This field is immutable after FHIR store creation. The default value is false, meaning that the API enforces referential integrity and fails the requests that result in inconsistent state in the FHIR store. When this field is set to true, the API skips referential integrity checks. Consequently, operations that rely on references, such as GetPatientEverything, do not return all the results if broken references exist.",
            "**disableResourceVersioning**: Immutable. Whether to disable resource versioning for this FHIR store. This field can not be changed after the creation of FHIR store. If set to false, which is the default behavior, all write operations cause historical versions to be recorded automatically. The historical versions can be fetched through the history APIs, but cannot be updated. If set to true, no historical versions are kept. The server sends errors for attempts to read the historical versions.",
            "**enableUpdateCreate**: Whether this FHIR store has the [updateCreate capability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate). This determines if the client can use an Update operation to create a new resource with a client-specified ID. If false, all IDs are server-assigned through the Create operation and attempts to update a non-existent resource return errors. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud audit logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources.",
            "**labels**: User-supplied key-value pairs used to organize FHIR stores. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: \\p{Ll}\\p{Lo}{0,62} Label values are optional, must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} No more than 64 labels can be associated with a given store.",
            "**name**: Output only. Identifier. Resource name of the FHIR store, of the form `projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
            [
              "**notificationConfig**: Specifies where to send notifications upon changes to a data store.",
              {
                "$ul": [
                  "**pubsubTopic**: The [Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that notifications of changes are published on. Supplied by the client. PubsubMessage.Data contains the resource name. PubsubMessage.MessageId is the ID of this message. It is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message was published. Notifications are only sent if the topic is non-empty. [Topic names](https://cloud.google.com/pubsub/docs/overview#names) must be scoped to a project. Cloud Healthcare API service account must have publisher permissions on the given Pub/Sub topic. Not having adequate permissions causes the calls that send notifications to fail. If a notification can't be published to Pub/Sub, errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). If the number of errors exceeds a certain rate, some aren't submitted. Note that not all operations trigger notifications, see [Configuring Pub/Sub notifications](https://cloud.google.com/healthcare/docs/how-tos/pubsub) for specific details.",
                  "**sendForBulkImport**: Indicates whether or not to send Pub/Sub notifications on bulk import. Only supported for DICOM imports."
                ]
              }
            ],
            "**notificationConfigs**: Specifies where and whether to send notifications upon changes to a FHIR store.",
            "**streamConfigs**: A list of streaming configs that configure the destinations of streaming export for every resource mutation in this FHIR store. Each store is allowed to have up to 10 streaming configs. After a new config is added, the next resource mutation is streamed to the new location in addition to the existing ones. When a location is removed from the list, the server stops streaming to that location. Before adding a new config, you must add the required [`bigquery.dataEditor`](https://cloud.google.com/bigquery/docs/access-control#bigquery.dataEditor) role to your project's **Cloud Healthcare Service Agent** [service account](https://cloud.google.com/iam/docs/service-accounts). Some lag (typically on the order of dozens of seconds) is expected before the results show up in the streaming destination.",
            [
              "**validationConfig**: Contains the configuration for FHIR profiles and validation.",
              {
                "$ul": [
                  "**disableFhirpathValidation**: Whether to disable FHIRPath validation for incoming resources. Set this to true to disable checking incoming resources for conformance against FHIRPath requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.",
                  "**disableProfileValidation**: Whether to disable profile validation for this FHIR store. Set this to true to disable checking incoming resources for conformance against structure definitions in this FHIR store.",
                  "**disableReferenceTypeValidation**: Whether to disable reference type validation for incoming resources. Set this to true to disable checking incoming resources for conformance against reference type requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.",
                  "**disableRequiredFieldValidation**: Whether to disable required fields validation for incoming resources. Set this to true to disable checking incoming resources for conformance against required fields requirement defined in the FHIR specification. This property only affects resource types that do not have profiles configured for them, any rules in enabled implementation guides will still be enforced.",
                  "**enabledImplementationGuides**: A list of implementation guide URLs in this FHIR store that are used to configure the profiles to use for validation. For example, to use the US Core profiles for validation, set `enabled_implementation_guides` to `[\"http://hl7.org/fhir/us/core/ImplementationGuide/ig\"]`. If `enabled_implementation_guides` is empty or omitted, then incoming resources are only required to conform to the base FHIR profiles. Otherwise, a resource must conform to at least one profile listed in the `global` property of one of the enabled ImplementationGuides. The Cloud Healthcare API does not currently enforce all of the rules in a StructureDefinition. The following rules are supported: - min/max - minValue/maxValue - maxLength - type - fixed[x] - pattern[x] on simple types - slicing, when using \"value\" as the discriminator type When a URL cannot be resolved (for example, in a type assertion), the server does not return an error."
                ]
              }
            ],
            "**version**: Required. Immutable. The FHIR specification version that this FHIR store supports natively. This field is immutable after store creation. Requests are rejected if they contain FHIR resources of a different version. Version is required for every FHIR store."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
