{
  "name": "dialogflow_projects_locations_agents_testCases_create",
  "description": "Creates a test case for the given agent.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The agent to create the test case for. Format: `projects//locations//agents/`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TestCase"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDialogflowCxV3beta1TestCase": {
        "description": "Represents a test case.",
        "properties": {
          "creationTime": {
            "description": "Output only. When the test was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.",
            "type": "string"
          },
          "lastTestResult": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TestCaseResult"
          },
          "name": {
            "description": "The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.",
            "type": "string"
          },
          "notes": {
            "description": "Additional freeform notes about the test case. Limit of 400 characters.",
            "type": "string"
          },
          "tags": {
            "description": "Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with \"#\" and has a limit of 30 characters.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "testCaseConversationTurns": {
            "description": "The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ConversationTurn"
            },
            "type": "array"
          },
          "testConfig": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TestConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1TestCaseResult": {
        "description": "Represents a result from running a test case in an agent environment.",
        "properties": {
          "conversationTurns": {
            "description": "The conversation turns uttered during the test case replay in chronological order.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ConversationTurn"
            },
            "type": "array"
          },
          "environment": {
            "description": "Environment where the test was run. If not set, it indicates the draft environment.",
            "type": "string"
          },
          "name": {
            "description": "The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.",
            "type": "string"
          },
          "testResult": {
            "description": "Whether the test case passed in the agent environment.",
            "enum": [
              "TEST_RESULT_UNSPECIFIED",
              "PASSED",
              "FAILED"
            ],
            "type": "string"
          },
          "testTime": {
            "description": "The time that the test was run.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ConversationTurn": {
        "description": "One interaction between a human and virtual agent. The human provides some input and the virtual agent provides a response.",
        "properties": {
          "userInput": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput"
          },
          "virtualAgentOutput": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ConversationTurnUserInput": {
        "description": "The input from the human user.",
        "properties": {
          "enableSentimentAnalysis": {
            "description": "Whether sentiment analysis is enabled.",
            "type": "boolean"
          },
          "injectedParameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Parameters that need to be injected into the conversation during intent detection.",
            "type": "object"
          },
          "input": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1QueryInput"
          },
          "isWebhookEnabled": {
            "description": "If webhooks should be allowed to trigger in response to the user utterance. Often if parameters are injected, webhooks should not be enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1QueryInput": {
        "description": "Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client.",
        "properties": {
          "audio": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AudioInput"
          },
          "dtmf": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1DtmfInput"
          },
          "event": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1EventInput"
          },
          "intent": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1IntentInput"
          },
          "languageCode": {
            "description": "Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language.",
            "type": "string"
          },
          "text": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TextInput"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1AudioInput": {
        "description": "Represents the natural speech audio to be processed.",
        "properties": {
          "audio": {
            "description": "The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.",
            "format": "byte",
            "type": "string"
          },
          "config": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1InputAudioConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1InputAudioConfig": {
        "description": "Instructs the speech recognizer on how to process the audio content.",
        "properties": {
          "audioEncoding": {
            "description": "Required. Audio encoding of the audio content to process.",
            "enum": [
              "AUDIO_ENCODING_UNSPECIFIED",
              "AUDIO_ENCODING_LINEAR_16",
              "AUDIO_ENCODING_FLAC",
              "AUDIO_ENCODING_MULAW",
              "AUDIO_ENCODING_AMR",
              "AUDIO_ENCODING_AMR_WB",
              "AUDIO_ENCODING_OGG_OPUS",
              "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE"
            ],
            "type": "string"
          },
          "bargeInConfig": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1BargeInConfig"
          },
          "enableWordInfo": {
            "description": "Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information.",
            "type": "boolean"
          },
          "model": {
            "description": "Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).",
            "type": "string"
          },
          "modelVariant": {
            "description": "Optional. Which variant of the Speech model to use.",
            "enum": [
              "SPEECH_MODEL_VARIANT_UNSPECIFIED",
              "USE_BEST_AVAILABLE",
              "USE_STANDARD",
              "USE_ENHANCED"
            ],
            "type": "string"
          },
          "optOutConformerModelMigration": {
            "description": "If `true`, the request will opt out for STT conformer model migration. This field will be deprecated once force migration takes place in June 2024. Please refer to [Dialogflow CX Speech model migration](https://cloud.google.com/dialogflow/cx/docs/concept/speech-model-migration).",
            "type": "boolean"
          },
          "phraseHints": {
            "description": "Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sampleRateHertz": {
            "description": "Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.",
            "format": "int32",
            "type": "integer"
          },
          "singleUtterance": {
            "description": "Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1BargeInConfig": {
        "description": "Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up.",
        "properties": {
          "noBargeInDuration": {
            "description": "Duration that is not eligible for barge-in at the beginning of the input audio.",
            "format": "google-duration",
            "type": "string"
          },
          "totalDuration": {
            "description": "Total duration for the playback at the beginning of the input audio.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1DtmfInput": {
        "description": "Represents the input for dtmf event.",
        "properties": {
          "digits": {
            "description": "The dtmf digits.",
            "type": "string"
          },
          "finishDigit": {
            "description": "The finish digit (if any).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1EventInput": {
        "description": "Represents the event to trigger.",
        "properties": {
          "event": {
            "description": "Name of the event.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1IntentInput": {
        "description": "Represents the intent to trigger programmatically rather than as a result of natural language processing.",
        "properties": {
          "intent": {
            "description": "Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1TextInput": {
        "description": "Represents the natural language text to be processed.",
        "properties": {
          "text": {
            "description": "Required. The UTF-8 encoded natural language text to be processed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ConversationTurnVirtualAgentOutput": {
        "description": "The output from the virtual agent.",
        "properties": {
          "currentPage": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Page"
          },
          "diagnosticInfo": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Required. Input only. The diagnostic info output for the turn. Required to calculate the testing coverage.",
            "type": "object"
          },
          "differences": {
            "description": "Output only. If this is part of a result conversation turn, the list of differences between the original run and the replay for this output, if any.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TestRunDifference"
            },
            "readOnly": true,
            "type": "array"
          },
          "sessionParameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "The session parameters available to the bot at this point.",
            "type": "object"
          },
          "status": {
            "$ref": "#/$defs/GoogleRpcStatus"
          },
          "textResponses": {
            "description": "The text responses from the agent for the turn.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageText"
            },
            "type": "array"
          },
          "triggeredIntent": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Intent"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1Page": {
        "description": "A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).",
        "properties": {
          "advancedSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AdvancedSettings"
          },
          "description": {
            "description": "The description of the page. The maximum length is 500 characters.",
            "type": "string"
          },
          "displayName": {
            "description": "Required. The human-readable name of the page, unique within the flow.",
            "type": "string"
          },
          "entryFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Fulfillment"
          },
          "eventHandlers": {
            "description": "Handlers associated with the page to handle events such as webhook errors, no match or no input.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1EventHandler"
            },
            "type": "array"
          },
          "form": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Form"
          },
          "knowledgeConnectorSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings"
          },
          "name": {
            "description": "The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "transitionRouteGroups": {
            "description": "Ordered list of `TransitionRouteGroups` added to the page. Transition route groups must be unique within a page. If the page links both flow-level transition route groups and agent-level transition route groups, the flow-level ones will have higher priority and will be put before the agent-level ones. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "transitionRoutes": {
            "description": "A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TransitionRoute"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1AdvancedSettings": {
        "description": "Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
        "properties": {
          "audioExportGcsDestination": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1GcsDestination"
          },
          "dtmfSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings"
          },
          "loggingSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1GcsDestination": {
        "description": "Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
        "properties": {
          "uri": {
            "description": "Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1AdvancedSettingsDtmfSettings": {
        "description": "Define behaviors for DTMF (dual tone multi frequency).",
        "properties": {
          "enabled": {
            "description": "If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
            "type": "boolean"
          },
          "finishDigit": {
            "description": "The digit that terminates a DTMF digit sequence.",
            "type": "string"
          },
          "maxDigits": {
            "description": "Max length of DTMF digits.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1AdvancedSettingsLoggingSettings": {
        "description": "Define behaviors on logging.",
        "properties": {
          "enableInteractionLogging": {
            "description": "If true, DF Interaction logging is currently enabled.",
            "type": "boolean"
          },
          "enableStackdriverLogging": {
            "description": "If true, StackDriver logging is currently enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1Fulfillment": {
        "description": "A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.",
        "properties": {
          "advancedSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AdvancedSettings"
          },
          "conditionalCases": {
            "description": "Conditional cases for this fulfillment.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases"
            },
            "type": "array"
          },
          "enableGenerativeFallback": {
            "description": "If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.",
            "type": "boolean"
          },
          "messages": {
            "description": "The list of rich message responses to present to the user.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessage"
            },
            "type": "array"
          },
          "returnPartialResponses": {
            "description": "Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.",
            "type": "boolean"
          },
          "setParameterActions": {
            "description": "Set parameter values before executing the webhook.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction"
            },
            "type": "array"
          },
          "tag": {
            "description": "The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.",
            "type": "string"
          },
          "webhook": {
            "description": "The webhook to call. Format: `projects//locations//agents//webhooks/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases": {
        "description": "A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.",
        "properties": {
          "cases": {
            "description": "A list of cascading if-else conditions.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCase": {
        "description": "Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively.",
        "properties": {
          "caseContent": {
            "description": "A list of case content.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContent"
            },
            "type": "array"
          },
          "condition": {
            "description": "The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCasesCaseCaseContent": {
        "description": "The list of messages or conditional cases to activate for this case.",
        "properties": {
          "additionalCases": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FulfillmentConditionalCases"
          },
          "message": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessage"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessage": {
        "description": "Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard.",
        "properties": {
          "channel": {
            "description": "The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.",
            "type": "string"
          },
          "conversationSuccess": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccess"
          },
          "endInteraction": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteraction"
          },
          "knowledgeInfoCard": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCard"
          },
          "liveAgentHandoff": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoff"
          },
          "mixedAudio": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudio"
          },
          "outputAudioText": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText"
          },
          "payload": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Returns a response containing a custom, platform-specific payload.",
            "type": "object"
          },
          "playAudio": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudio"
          },
          "telephonyTransferCall": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCall"
          },
          "text": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageText"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageConversationSuccess": {
        "description": "Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue.",
        "properties": {
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Custom metadata. Dialogflow doesn't impose any structure on this.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageEndInteraction": {
        "description": "Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageKnowledgeInfoCard": {
        "description": "Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageLiveAgentHandoff": {
        "description": "Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human.",
        "properties": {
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudio": {
        "description": "Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.",
        "properties": {
          "segments": {
            "description": "Segments this audio response is composed of.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageMixedAudioSegment": {
        "description": "Represents one segment of audio.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "audio": {
            "description": "Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request.",
            "format": "byte",
            "type": "string"
          },
          "uri": {
            "description": "Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageOutputAudioText": {
        "description": "A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "ssml": {
            "description": "The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml).",
            "type": "string"
          },
          "text": {
            "description": "The raw text to be synthesized.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessagePlayAudio": {
        "description": "Specifies an audio clip to be played by the client as part of the response.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "audioUri": {
            "description": "Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageTelephonyTransferCall": {
        "description": "Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.",
        "properties": {
          "phoneNumber": {
            "description": "Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1ResponseMessageText": {
        "description": "The text response message.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "text": {
            "description": "Required. A collection of text responses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FulfillmentSetParameterAction": {
        "description": "Setting a parameter value.",
        "properties": {
          "parameter": {
            "description": "Display name of the parameter.",
            "type": "string"
          },
          "value": {
            "description": "The new value of the parameter. A null value clears the parameter."
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1EventHandler": {
        "description": "An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow.",
        "properties": {
          "event": {
            "description": "Required. The name of the event to handle.",
            "type": "string"
          },
          "name": {
            "description": "Output only. The unique identifier of this event handler.",
            "readOnly": true,
            "type": "string"
          },
          "targetFlow": {
            "description": "The target flow to transition to. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "targetPage": {
            "description": "The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "triggerFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Fulfillment"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1Form": {
        "description": "A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session.",
        "properties": {
          "parameters": {
            "description": "Parameters to collect from the user.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FormParameter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FormParameter": {
        "description": "Represents a form parameter.",
        "properties": {
          "advancedSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AdvancedSettings"
          },
          "defaultValue": {
            "description": "The default value of an optional parameter. If the parameter is required, the default value will be ignored."
          },
          "displayName": {
            "description": "Required. The human-readable name of the parameter, unique within the form.",
            "type": "string"
          },
          "entityType": {
            "description": "Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.",
            "type": "string"
          },
          "fillBehavior": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior"
          },
          "isList": {
            "description": "Indicates whether the parameter represents a list of values.",
            "type": "boolean"
          },
          "redact": {
            "description": "Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.",
            "type": "boolean"
          },
          "required": {
            "description": "Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them. Required parameters must be filled before form filling concludes.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FormParameterFillBehavior": {
        "description": "Configuration for how the filling of a parameter should be handled.",
        "properties": {
          "initialPromptFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Fulfillment"
          },
          "repromptEventHandlers": {
            "description": "The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are: * `sys.no-match-`, where N can be from 1 to 6 * `sys.no-match-default` * `sys.no-input-`, where N can be from 1 to 6 * `sys.no-input-default` * `sys.invalid-parameter` `initial_prompt_fulfillment` provides the first prompt for the parameter. If the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the `sys.no-match-1`/`sys.no-input-1` handler (if defined) will be called to provide a prompt. The `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to the next no-match/no-input event, and so on. A `sys.no-match-default` or `sys.no-input-default` handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed. A `sys.invalid-parameter` handler can be defined to handle the case where the parameter values have been `invalidated` by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the `sys.invalid-parameter` handler (if defined) will be called to provide a prompt. If the event handler for the corresponding event can't be found on the parameter, `initial_prompt_fulfillment` will be re-prompted.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1EventHandler"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1KnowledgeConnectorSettings": {
        "description": "The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment.",
        "properties": {
          "dataStoreConnections": {
            "description": "Optional. List of related data store connections.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1DataStoreConnection"
            },
            "type": "array"
          },
          "enabled": {
            "description": "Whether Knowledge Connector is enabled or not.",
            "type": "boolean"
          },
          "targetFlow": {
            "description": "The target flow to transition to. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "targetPage": {
            "description": "The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "triggerFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Fulfillment"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1DataStoreConnection": {
        "description": "A data store connection. It represents a data store in Discovery Engine and the type of the contents it contains.",
        "properties": {
          "dataStore": {
            "description": "The full name of the referenced data store. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}`",
            "type": "string"
          },
          "dataStoreType": {
            "description": "The type of the connected data store.",
            "enum": [
              "DATA_STORE_TYPE_UNSPECIFIED",
              "PUBLIC_WEB",
              "UNSTRUCTURED",
              "STRUCTURED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1TransitionRoute": {
        "description": "A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow.",
        "properties": {
          "condition": {
            "description": "The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.",
            "type": "string"
          },
          "description": {
            "description": "Optional. The description of the transition route. The maximum length is 500 characters.",
            "type": "string"
          },
          "intent": {
            "description": "The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.",
            "type": "string"
          },
          "name": {
            "description": "Output only. The unique identifier of this transition route.",
            "readOnly": true,
            "type": "string"
          },
          "targetFlow": {
            "description": "The target flow to transition to. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "targetPage": {
            "description": "The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "triggerFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1Fulfillment"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1TestRunDifference": {
        "description": "The description of differences between original and replayed agent output.",
        "properties": {
          "description": {
            "description": "A human readable description of the diff, showing the actual output vs expected output.",
            "type": "string"
          },
          "type": {
            "description": "The type of diff.",
            "enum": [
              "DIFF_TYPE_UNSPECIFIED",
              "INTENT",
              "PAGE",
              "PARAMETERS",
              "UTTERANCE",
              "FLOW"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRpcStatus": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1Intent": {
        "description": "An intent represents a user's intent to interact with a conversational agent. You can provide information for the Dialogflow API to use to match user input to an intent by adding training phrases (i.e., examples of user input) to your intent.",
        "properties": {
          "description": {
            "description": "Human readable description for better understanding an intent like its scope, content, result etc. Maximum character limit: 140 characters.",
            "type": "string"
          },
          "displayName": {
            "description": "Required. The human-readable name of the intent, unique within the agent.",
            "type": "string"
          },
          "isFallback": {
            "description": "Indicates whether this is a fallback intent. Currently only default fallback intent is allowed in the agent, which is added upon agent creation. Adding training phrases to fallback intent is useful in the case of requests that are mistakenly matched, since training phrases assigned to fallback intents act as negative examples that triggers no-match event.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The key/value metadata to label an intent. Labels can contain lowercase letters, digits and the symbols '-' and '_'. International characters are allowed, including letters from unicase alphabets. Keys must start with a letter. Keys and values can be no longer than 63 characters and no more than 128 bytes. Prefix \"sys-\" is reserved for Dialogflow defined labels. Currently allowed Dialogflow defined labels include: * sys-head * sys-contextual The above labels do not require value. \"sys-head\" means the intent is a head intent. \"sys-contextual\" means the intent is a contextual intent.",
            "type": "object"
          },
          "name": {
            "description": "The unique identifier of the intent. Required for the Intents.UpdateIntent method. Intents.CreateIntent populates the name automatically. Format: `projects//locations//agents//intents/`.",
            "type": "string"
          },
          "parameters": {
            "description": "The collection of parameters associated with the intent.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1IntentParameter"
            },
            "type": "array"
          },
          "priority": {
            "description": "The priority of this intent. Higher numbers represent higher priorities. - If the supplied value is unspecified or 0, the service translates the value to 500,000, which corresponds to the `Normal` priority in the console. - If the supplied value is negative, the intent is ignored in runtime detect intent requests.",
            "format": "int32",
            "type": "integer"
          },
          "trainingPhrases": {
            "description": "The collection of training phrases the agent is trained on to identify the intent.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1IntentParameter": {
        "description": "Represents an intent parameter.",
        "properties": {
          "entityType": {
            "description": "Required. The entity type of the parameter. Format: `projects/-/locations/-/agents/-/entityTypes/` for system entity types (for example, `projects/-/locations/-/agents/-/entityTypes/sys.date`), or `projects//locations//agents//entityTypes/` for developer entity types.",
            "type": "string"
          },
          "id": {
            "description": "Required. The unique identifier of the parameter. This field is used by training phrases to annotate their parts.",
            "type": "string"
          },
          "isList": {
            "description": "Indicates whether the parameter represents a list of values.",
            "type": "boolean"
          },
          "redact": {
            "description": "Indicates whether the parameter content should be redacted in log. If redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1IntentTrainingPhrase": {
        "description": "Represents an example that the agent is trained on to identify the intent.",
        "properties": {
          "id": {
            "description": "Output only. The unique identifier of the training phrase.",
            "type": "string"
          },
          "parts": {
            "description": "Required. The ordered list of training phrase parts. The parts are concatenated in order to form the training phrase. Note: The API does not automatically annotate training phrases like the Dialogflow Console does. Note: Do not forget to include whitespace at part boundaries, so the training phrase is well formatted when the parts are concatenated. If the training phrase does not need to be annotated with parameters, you just need a single part with only the Part.text field set. If you want to annotate the training phrase, you must create multiple parts, where the fields of each part are populated in one of two ways: - `Part.text` is set to a part of the phrase that has no parameters. - `Part.text` is set to a part of the phrase that you want to annotate, and the `parameter_id` field is set.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePart"
            },
            "type": "array"
          },
          "repeatCount": {
            "description": "Indicates how many times this example was added to the intent.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1IntentTrainingPhrasePart": {
        "description": "Represents a part of a training phrase.",
        "properties": {
          "parameterId": {
            "description": "The parameter used to annotate this part of the training phrase. This field is required for annotated parts of the training phrase.",
            "type": "string"
          },
          "text": {
            "description": "Required. The text for this part.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1TestConfig": {
        "description": "Represents configurations for a test case.",
        "properties": {
          "flow": {
            "description": "Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.",
            "type": "string"
          },
          "page": {
            "description": "The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.",
            "type": "string"
          },
          "trackingParameters": {
            "description": "Session parameters to be compared when calculating differences.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dialogflow.googleapis.com//v3beta1/{parent}/testCases{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a test case.",
        "**Key properties:**",
        {
          "$ul": [
            "**creationTime**: Output only. When the test was created.",
            "**displayName**: Required. The human-readable name of the test case, unique within the agent. Limit of 200 characters.",
            [
              "**lastTestResult**: Represents a result from running a test case in an agent environment.",
              {
                "$ul": [
                  "**conversationTurns**: The conversation turns uttered during the test case replay in chronological order.",
                  "**environment**: Environment where the test was run. If not set, it indicates the draft environment.",
                  "**name**: The resource name for the test case result. Format: `projects//locations//agents//testCases/ /results/`.",
                  "**testResult**: Whether the test case passed in the agent environment.",
                  "**testTime**: The time that the test was run."
                ]
              }
            ],
            "**name**: The unique identifier of the test case. TestCases.CreateTestCase will populate the name automatically. Otherwise use format: `projects//locations//agents/ /testCases/`.",
            "**notes**: Additional freeform notes about the test case. Limit of 400 characters.",
            "**tags**: Tags are short descriptions that users may apply to test cases for organizational and filtering purposes. Each tag should start with \"#\" and has a limit of 30 characters.",
            "**testCaseConversationTurns**: The conversation turns uttered when the test case was created, in chronological order. These include the canonical set of agent utterances that should occur when the agent is working properly.",
            [
              "**testConfig**: Represents configurations for a test case.",
              {
                "$ul": [
                  "**flow**: Flow name to start the test case with. Format: `projects//locations//agents//flows/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.",
                  "**page**: The page to start the test case with. Format: `projects//locations//agents//flows//pages/`. Only one of `flow` and `page` should be set to indicate the starting point of the test case. If both are set, `page` takes precedence over `flow`. If neither is set, the test case will start with start page on the default start flow.",
                  "**trackingParameters**: Session parameters to be compared when calculating differences."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
