{
  "name": "dialogflow_projects_locations_agents_sessions_matchIntent",
  "description": "Returns preliminary intent match results, doesn't change the session status.",
  "parameters": {
    "type": "object",
    "properties": {
      "session": {
        "type": "string",
        "description": "Required. The name of the session this query is sent to. Format: `projects//locations//agents//sessions/` or `projects//locations//agents//environments//sessions/`. If `Environment ID` is not specified, we assume default 'draft' environment. It's up to the API caller to choose an appropriate `Session ID`. It can be a random number or some type of session identifiers (preferably hashed). The length of the `Session ID` must not exceed 36 characters. For more information, see the [sessions guide](https://cloud.google.com/dialogflow/cx/docs/concept/session)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1MatchIntentRequest"
      }
    },
    "required": [
      "session"
    ],
    "$defs": {
      "GoogleCloudDialogflowCxV3beta1MatchIntentRequest": {
        "description": "Request of MatchIntent.",
        "properties": {
          "persistParameterChanges": {
            "description": "Persist session parameter changes from `query_params`.",
            "type": "boolean"
          },
          "queryInput": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1QueryInput"
          },
          "queryParams": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1QueryParameters"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1QueryInput": {
        "description": "Represents the query input. It can contain one of: 1. A conversational query in the form of text. 2. An intent query that specifies which intent to trigger. 3. Natural language speech audio to be processed. 4. An event to be triggered. 5. DTMF digits to invoke an intent and fill in parameter value. 6. The results of a tool executed by the client.",
        "properties": {
          "audio": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1AudioInput"
          },
          "dtmf": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1DtmfInput"
          },
          "event": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1EventInput"
          },
          "intent": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1IntentInput"
          },
          "languageCode": {
            "description": "Required. The language of the input. See [Language Support](https://cloud.google.com/dialogflow/cx/docs/reference/language) for a list of the currently supported language codes. Note that queries in the same session do not necessarily need to specify the same language.",
            "type": "string"
          },
          "text": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1TextInput"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1AudioInput": {
        "description": "Represents the natural speech audio to be processed.",
        "properties": {
          "audio": {
            "description": "The natural language speech audio to be processed. A single request can contain up to 2 minutes of speech audio data. The transcribed text cannot contain more than 256 bytes. For non-streaming audio detect intent, both `config` and `audio` must be provided. For streaming audio detect intent, `config` must be provided in the first request and `audio` must be provided in all following requests.",
            "format": "byte",
            "type": "string"
          },
          "config": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1InputAudioConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1InputAudioConfig": {
        "description": "Instructs the speech recognizer on how to process the audio content.",
        "properties": {
          "audioEncoding": {
            "description": "Required. Audio encoding of the audio content to process.",
            "enum": [
              "AUDIO_ENCODING_UNSPECIFIED",
              "AUDIO_ENCODING_LINEAR_16",
              "AUDIO_ENCODING_FLAC",
              "AUDIO_ENCODING_MULAW",
              "AUDIO_ENCODING_AMR",
              "AUDIO_ENCODING_AMR_WB",
              "AUDIO_ENCODING_OGG_OPUS",
              "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE"
            ],
            "type": "string"
          },
          "bargeInConfig": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1BargeInConfig"
          },
          "enableWordInfo": {
            "description": "Optional. If `true`, Dialogflow returns SpeechWordInfo in StreamingRecognitionResult with information about the recognized speech words, e.g. start and end time offsets. If false or unspecified, Speech doesn't return any word-level information.",
            "type": "boolean"
          },
          "model": {
            "description": "Optional. Which Speech model to select for the given request. For more information, see [Speech models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).",
            "type": "string"
          },
          "modelVariant": {
            "description": "Optional. Which variant of the Speech model to use.",
            "enum": [
              "SPEECH_MODEL_VARIANT_UNSPECIFIED",
              "USE_BEST_AVAILABLE",
              "USE_STANDARD",
              "USE_ENHANCED"
            ],
            "type": "string"
          },
          "optOutConformerModelMigration": {
            "description": "If `true`, the request will opt out for STT conformer model migration. This field will be deprecated once force migration takes place in June 2024. Please refer to [Dialogflow CX Speech model migration](https://cloud.google.com/dialogflow/cx/docs/concept/speech-model-migration).",
            "type": "boolean"
          },
          "phraseHints": {
            "description": "Optional. A list of strings containing words and phrases that the speech recognizer should recognize with higher likelihood. See [the Cloud Speech documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints) for more details.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "sampleRateHertz": {
            "description": "Sample rate (in Hertz) of the audio content sent in the query. Refer to [Cloud Speech API documentation](https://cloud.google.com/speech-to-text/docs/basics) for more details.",
            "format": "int32",
            "type": "integer"
          },
          "singleUtterance": {
            "description": "Optional. If `false` (default), recognition does not cease until the client closes the stream. If `true`, the recognizer will detect a single spoken utterance in input audio. Recognition ceases when it detects the audio's voice has stopped or paused. In this case, once a detected intent is received, the client should close the stream and start a new request with a new stream as needed. Note: This setting is relevant only for streaming methods.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1BargeInConfig": {
        "description": "Configuration of the barge-in behavior. Barge-in instructs the API to return a detected utterance at a proper time while the client is playing back the response audio from a previous request. When the client sees the utterance, it should stop the playback and immediately get ready for receiving the responses for the current request. The barge-in handling requires the client to start streaming audio input as soon as it starts playing back the audio from the previous response. The playback is modeled into two phases: * No barge-in phase: which goes first and during which speech detection should not be carried out. * Barge-in phase: which follows the no barge-in phase and during which the API starts speech detection and may inform the client that an utterance has been detected. Note that no-speech event is not expected in this phase. The client provides this configuration in terms of the durations of those two phases. The durations are measured in terms of the audio length from the the start of the input audio. No-speech event is a response with END_OF_UTTERANCE without any transcript following up.",
        "properties": {
          "noBargeInDuration": {
            "description": "Duration that is not eligible for barge-in at the beginning of the input audio.",
            "format": "google-duration",
            "type": "string"
          },
          "totalDuration": {
            "description": "Total duration for the playback at the beginning of the input audio.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1DtmfInput": {
        "description": "Represents the input for dtmf event.",
        "properties": {
          "digits": {
            "description": "The dtmf digits.",
            "type": "string"
          },
          "finishDigit": {
            "description": "The finish digit (if any).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1EventInput": {
        "description": "Represents the event to trigger.",
        "properties": {
          "event": {
            "description": "Name of the event.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1IntentInput": {
        "description": "Represents the intent to trigger programmatically rather than as a result of natural language processing.",
        "properties": {
          "intent": {
            "description": "Required. The unique identifier of the intent. Format: `projects//locations//agents//intents/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1TextInput": {
        "description": "Represents the natural language text to be processed.",
        "properties": {
          "text": {
            "description": "Required. The UTF-8 encoded natural language text to be processed.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1QueryParameters": {
        "description": "Represents the parameters of a conversational query.",
        "properties": {
          "analyzeQueryTextSentiment": {
            "description": "Configures whether sentiment analysis should be performed. If not provided, sentiment analysis is not performed.",
            "type": "boolean"
          },
          "channel": {
            "description": "The channel which this query is for. If specified, only the ResponseMessage associated with the channel will be returned. If no ResponseMessage is associated with the channel, it falls back to the ResponseMessage with unspecified channel. If unspecified, the ResponseMessage with unspecified channel will be returned.",
            "type": "string"
          },
          "currentPage": {
            "description": "The unique identifier of the page to override the current page in the session. Format: `projects//locations//agents//flows//pages/`. If `current_page` is specified, the previous state of the session will be ignored by Dialogflow, including the previous page and the previous session parameters. In most cases, current_page and parameters should be configured together to direct a session to a specific state.",
            "type": "string"
          },
          "disableWebhook": {
            "description": "Whether to disable webhook calls for this request.",
            "type": "boolean"
          },
          "endUserMetadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Optional. Information about the end-user to improve the relevance and accuracy of generative answers. This will be interpreted and used by a language model, so, for good results, the data should be self-descriptive, and in a simple structure. Example: ```json { \"subscription plan\": \"Business Premium Plus\", \"devices owned\": [ {\"model\": \"Google Pixel 7\"}, {\"model\": \"Google Pixel Tablet\"} ] } ```",
            "type": "object"
          },
          "flowVersions": {
            "description": "A list of flow versions to override for the request. Format: `projects//locations//agents//flows//versions/`. If version 1 of flow X is included in this list, the traffic of flow X will go through version 1 regardless of the version configuration in the environment. Each flow can have at most one version specified in this list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "geoLocation": {
            "$ref": "#/$defs/GoogleTypeLatLng"
          },
          "parameters": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Additional parameters to be put into session parameters. To remove a parameter from the session, clients should explicitly set the parameter value to null. You can reference the session parameters in the agent with the following format: $session.params.parameter-id. Depending on your protocol or client library language, this is a map, associative array, symbol table, dictionary, or JSON object composed of a collection of (MapKey, MapValue) pairs: * MapKey type: string * MapKey value: parameter name * MapValue type: If parameter's entity type is a composite entity then use map, otherwise, depending on the parameter value type, it could be one of string, number, boolean, null, list or map. * MapValue value: If parameter's entity type is a composite entity then use map from composite entity property names to property values, otherwise, use parameter value.",
            "type": "object"
          },
          "payload": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "This field can be used to pass custom data into the webhook associated with the agent. Arbitrary JSON objects are supported. Some integrations that query a Dialogflow agent may provide additional information in the payload. In particular, for the Dialogflow Phone Gateway integration, this field has the form: ``` { \"telephony\": { \"caller_id\": \"+18558363987\" } } ```",
            "type": "object"
          },
          "searchConfig": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1SearchConfig"
          },
          "sessionEntityTypes": {
            "description": "Additional session entity types to replace or extend developer entity types with. The entity synonyms apply to all languages and persist for the session of this query.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1SessionEntityType"
            },
            "type": "array"
          },
          "sessionTtl": {
            "description": "Optional. Configure lifetime of the Dialogflow session. By default, a Dialogflow session remains active and its data is stored for 30 minutes after the last request is sent for the session. This value should be no longer than 1 day.",
            "format": "google-duration",
            "type": "string"
          },
          "timeZone": {
            "description": "The time zone of this conversational query from the [time zone database](https://www.iana.org/time-zones), e.g., America/New_York, Europe/Paris. If not provided, the time zone specified in the agent is used.",
            "type": "string"
          },
          "webhookHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "This field can be used to pass HTTP headers for a webhook call. These headers will be sent to webhook along with the headers that have been configured through Dialogflow web console. The headers defined within this field will overwrite the headers configured through Dialogflow console if there is a conflict. Header names are case-insensitive. Google's specified headers are not allowed. Including: \"Host\", \"Content-Length\", \"Connection\", \"From\", \"User-Agent\", \"Accept-Encoding\", \"If-Modified-Since\", \"If-None-Match\", \"X-Forwarded-For\", etc.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleTypeLatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1SearchConfig": {
        "description": "Search configuration for UCS search queries.",
        "properties": {
          "boostSpecs": {
            "description": "Optional. Boosting configuration for the datastores.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1BoostSpecs"
            },
            "type": "array"
          },
          "filterSpecs": {
            "description": "Optional. Filter configuration for the datastores.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1FilterSpecs"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1BoostSpecs": {
        "description": "Boost specifications for data stores.",
        "properties": {
          "dataStores": {
            "description": "Optional. Data Stores where the boosting configuration is applied. The full names of the referenced data stores. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "spec": {
            "description": "Optional. A list of boosting specifications.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1BoostSpec"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1BoostSpec": {
        "description": "Boost specification to boost certain documents. A copy of google.cloud.discoveryengine.v1main.BoostSpec, field documentation is available at https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1alpha/BoostSpec",
        "properties": {
          "conditionBoostSpecs": {
            "description": "Optional. Condition boost specifications. If a document matches multiple conditions in the specifictions, boost scores from these specifications are all applied and combined in a non-linear way. Maximum number of specifications is 20.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1BoostSpecConditionBoostSpec": {
        "description": "Boost applies to documents which match a condition.",
        "properties": {
          "boost": {
            "description": "Optional. Strength of the condition boost, which should be in [-1, 1]. Negative boost means demotion. Default is 0.0. Setting to 1.0 gives the document a big promotion. However, it does not necessarily mean that the boosted document will be the top result at all times, nor that other documents will be excluded. Results could still be shown even when none of them matches the condition. And results that are significantly more relevant to the search query can still trump your heavily favored but irrelevant documents. Setting to -1.0 gives the document a big demotion. However, results that are deeply relevant might still be shown. The document will have an upstream battle to get a fairly high ranking, but it is not blocked out completely. Setting to 0.0 means no boost applied. The boosting condition is ignored.",
            "format": "float",
            "type": "number"
          },
          "condition": {
            "description": "Optional. An expression which specifies a boost condition. The syntax and supported fields are the same as a filter expression. Examples: * To boost documents with document ID \"doc_1\" or \"doc_2\", and color \"Red\" or \"Blue\": * (id: ANY(\"doc_1\", \"doc_2\")) AND (color: ANY(\"Red\",\"Blue\"))",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1FilterSpecs": {
        "description": "Filter specifications for data stores.",
        "properties": {
          "dataStores": {
            "description": "Optional. Data Stores where the boosting configuration is applied. The full names of the referenced data stores. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "filter": {
            "description": "Optional. The filter expression to be applied. Expression syntax is documented at https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata#filter-expression-syntax",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1SessionEntityType": {
        "description": "Session entity types are referred to as **User** entity types and are entities that are built for an individual user such as favorites, preferences, playlists, and so on. You can redefine a session entity type at the session level to extend or replace a custom entity type at the user session level (we refer to the entity types defined at the agent level as \"custom entity types\"). Note: session entity types apply to all queries, regardless of the language. For more information about entity types, see the [Dialogflow documentation](https://cloud.google.com/dialogflow/docs/entities-overview).",
        "properties": {
          "entities": {
            "description": "Required. The collection of entities to override or supplement the custom entity type.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3beta1EntityTypeEntity"
            },
            "type": "array"
          },
          "entityOverrideMode": {
            "description": "Required. Indicates whether the additional data should override or supplement the custom entity type definition.",
            "enum": [
              "ENTITY_OVERRIDE_MODE_UNSPECIFIED",
              "ENTITY_OVERRIDE_MODE_OVERRIDE",
              "ENTITY_OVERRIDE_MODE_SUPPLEMENT"
            ],
            "type": "string"
          },
          "name": {
            "description": "Required. The unique identifier of the session entity type. Format: `projects//locations//agents//sessions//entityTypes/` or `projects//locations//agents//environments//sessions//entityTypes/`. If `Environment ID` is not specified, we assume default 'draft' environment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3beta1EntityTypeEntity": {
        "description": "An **entity entry** for an associated entity type.",
        "properties": {
          "synonyms": {
            "description": "Required. A collection of value synonyms. For example, if the entity type is *vegetable*, and `value` is *scallions*, a synonym could be *green onions*. For `KIND_LIST` entity types: * This collection must contain exactly one synonym equal to `value`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "value": {
            "description": "Required. The primary value associated with this entity entry. For example, if the entity type is *vegetable*, the value could be *scallions*. For `KIND_MAP` entity types: * A canonical value to be used in place of synonyms. For `KIND_LIST` entity types: * A string that can contain references to other entity types (with or without aliases).",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dialogflow.googleapis.com//v3beta1/{session}:matchIntent{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response of MatchIntent.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**currentPage**: A Dialogflow CX conversation (session) can be described and visualized as a state machine. The states of a CX session are represented by pages. For each flow, you define many pages, where your combined pages can handle a complete conversation on the topics the flow is designed for. At any given moment, exactly one page is the current page, the current page is considered active, and the flow associated with that page is considered active. Every flow has a special start page. When a flow initially becomes active, the start page page becomes the current page. For each conversational turn, the current page will either stay the same or transition to another page. You configure each page to collect information from the end-user that is relevant for the conversational state represented by the page. For more information, see the [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).",
              {
                "$ul": [
                  [
                    "**advancedSettings**: Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
                    {
                      "$ul": [
                        [
                          "**audioExportGcsDestination**: Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
                          {
                            "$ul": [
                              "**uri**: Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation."
                            ]
                          }
                        ],
                        [
                          "**dtmfSettings**: Define behaviors for DTMF (dual tone multi frequency).",
                          {
                            "$ul": [
                              "**enabled**: If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
                              "**finishDigit**: The digit that terminates a DTMF digit sequence.",
                              "**maxDigits**: Max length of DTMF digits."
                            ]
                          }
                        ],
                        [
                          "**loggingSettings**: Define behaviors on logging.",
                          {
                            "$ul": [
                              "**enableInteractionLogging**: If true, DF Interaction logging is currently enabled.",
                              "**enableStackdriverLogging**: If true, StackDriver logging is currently enabled."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**description**: The description of the page. The maximum length is 500 characters.",
                  "**displayName**: Required. The human-readable name of the page, unique within the flow.",
                  [
                    "**entryFulfillment**: A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.",
                    {
                      "$ul": [
                        [
                          "**advancedSettings**: Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
                          {
                            "$ul": [
                              [
                                "**audioExportGcsDestination**: Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
                                {
                                  "$ul": [
                                    "**uri**: Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation."
                                  ]
                                }
                              ],
                              [
                                "**dtmfSettings**: Define behaviors for DTMF (dual tone multi frequency).",
                                {
                                  "$ul": [
                                    "**enabled**: If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
                                    "**finishDigit**: The digit that terminates a DTMF digit sequence.",
                                    "**maxDigits**: Max length of DTMF digits."
                                  ]
                                }
                              ],
                              [
                                "**loggingSettings**: Define behaviors on logging.",
                                {
                                  "$ul": [
                                    "**enableInteractionLogging**: If true, DF Interaction logging is currently enabled.",
                                    "**enableStackdriverLogging**: If true, StackDriver logging is currently enabled."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**conditionalCases**: Conditional cases for this fulfillment.",
                        "**enableGenerativeFallback**: If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.",
                        "**messages**: The list of rich message responses to present to the user.",
                        "**returnPartialResponses**: Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.",
                        "**setParameterActions**: Set parameter values before executing the webhook.",
                        "**tag**: The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.",
                        "**webhook**: The webhook to call. Format: `projects//locations//agents//webhooks/`."
                      ]
                    }
                  ],
                  "**eventHandlers**: Handlers associated with the page to handle events such as webhook errors, no match or no input.",
                  [
                    "**form**: A form is a data model that groups related parameters that can be collected from the user. The process in which the agent prompts the user and collects parameter values from the user is called form filling. A form can be added to a page. When form filling is done, the filled parameters will be written to the session.",
                    {
                      "$ul": [
                        "**parameters**: Parameters to collect from the user."
                      ]
                    }
                  ],
                  [
                    "**knowledgeConnectorSettings**: The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment.",
                    {
                      "$ul": [
                        "**dataStoreConnections**: Optional. List of related data store connections.",
                        "**enabled**: Whether Knowledge Connector is enabled or not.",
                        "**targetFlow**: The target flow to transition to. Format: `projects//locations//agents//flows/`.",
                        "**targetPage**: The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
                        [
                          "**triggerFulfillment**: A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.",
                          {
                            "$ul": [
                              [
                                "**advancedSettings**: Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
                                {
                                  "$ul": [
                                    [
                                      "**audioExportGcsDestination**: Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
                                      {
                                        "$ul": [
                                          "**uri**: Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation."
                                        ]
                                      }
                                    ],
                                    [
                                      "**dtmfSettings**: Define behaviors for DTMF (dual tone multi frequency).",
                                      {
                                        "$ul": [
                                          "**enabled**: If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
                                          "**finishDigit**: The digit that terminates a DTMF digit sequence.",
                                          "**maxDigits**: Max length of DTMF digits."
                                        ]
                                      }
                                    ],
                                    [
                                      "**loggingSettings**: Define behaviors on logging.",
                                      {
                                        "$ul": [
                                          "**enableInteractionLogging**: If true, DF Interaction logging is currently enabled.",
                                          "**enableStackdriverLogging**: If true, StackDriver logging is currently enabled."
                                        ]
                                      }
                                    ]
                                  ]
                                }
                              ],
                              "**conditionalCases**: Conditional cases for this fulfillment.",
                              "**enableGenerativeFallback**: If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.",
                              "**messages**: The list of rich message responses to present to the user.",
                              "**returnPartialResponses**: Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.",
                              "**setParameterActions**: Set parameter values before executing the webhook.",
                              "**tag**: The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.",
                              "**webhook**: The webhook to call. Format: `projects//locations//agents//webhooks/`."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**name**: The unique identifier of the page. Required for the Pages.UpdatePage method. Pages.CreatePage populates the name automatically. Format: `projects//locations//agents//flows//pages/`.",
                  "**transitionRouteGroups**: Ordered list of `TransitionRouteGroups` added to the page. Transition route groups must be unique within a page. If the page links both flow-level transition route groups and agent-level transition route groups, the flow-level ones will have higher priority and will be put before the agent-level ones. * If multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes. * If multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.",
                  "**transitionRoutes**: A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow. When we are in a certain page, the TransitionRoutes are evalauted in the following order: * TransitionRoutes defined in the page with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in flow with intent specified. * TransitionRoutes defined in the transition route groups with intent specified. * TransitionRoutes defined in the page with only condition specified. * TransitionRoutes defined in the transition route groups with only condition specified."
                ]
              }
            ],
            "**matches**: Match results, if more than one, ordered descendingly by the confidence we have that the particular intent matches the query.",
            "**text**: If natural language text was provided as input, this field will contain a copy of the text.",
            "**transcript**: If natural language speech audio was provided as input, this field will contain the transcript for the audio.",
            "**triggerEvent**: If an event was provided as input, this field will contain a copy of the event name.",
            "**triggerIntent**: If an intent was provided as input, this field will contain a copy of the intent identifier. Format: `projects//locations//agents//intents/`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
