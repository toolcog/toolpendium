{
  "name": "dialogflow_projects_locations_conversations_suggestions_suggestConversationSummary",
  "description": "Suggest summary for a conversation based on specific historical messages. The range of the messages to be used for summary can be specified in the request.",
  "parameters": {
    "type": "object",
    "properties": {
      "conversation": {
        "type": "string",
        "description": "Required. The conversation to fetch suggestion for. Format: `projects//locations//conversations/`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDialogflowV2beta1SuggestConversationSummaryRequest"
      }
    },
    "required": [
      "conversation"
    ],
    "$defs": {
      "GoogleCloudDialogflowV2beta1SuggestConversationSummaryRequest": {
        "description": "The request message for Conversations.SuggestConversationSummary.",
        "properties": {
          "assistQueryParams": {
            "$ref": "#/$defs/GoogleCloudDialogflowV2beta1AssistQueryParameters"
          },
          "contextSize": {
            "description": "Max number of messages prior to and including [latest_message] to use as context when compiling the suggestion. By default 500 and at most 1000.",
            "format": "int32",
            "type": "integer"
          },
          "latestMessage": {
            "description": "The name of the latest conversation message used as context for compiling suggestion. If empty, the latest message of the conversation will be used. Format: `projects//locations//conversations//messages/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowV2beta1AssistQueryParameters": {
        "description": "Represents the parameters of human assist query.",
        "properties": {
          "documentsMetadataFilters": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key-value filters on the metadata of documents returned by article suggestion. If specified, article suggestion only returns suggested documents that match all filters in their Document.metadata. Multiple values for a metadata key should be concatenated by comma. For example, filters to match all documents that have 'US' or 'CA' in their market metadata values and 'agent' in their user metadata values will be ``` documents_metadata_filters { key: \"market\" value: \"US,CA\" } documents_metadata_filters { key: \"user\" value: \"agent\" } ```",
            "type": "object"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dialogflow.googleapis.com//v2beta1/{conversation}/suggestions:suggestConversationSummary{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response message for Conversations.SuggestConversationSummary.",
        "**Key properties:**",
        {
          "$ul": [
            "**contextSize**: Number of messages prior to and including last_conversation_message used to compile the suggestion. It may be smaller than the SuggestSummaryRequest.context_size field in the request if there weren't that many messages in the conversation.",
            "**latestMessage**: The name of the latest conversation message used as context for compiling suggestion. Format: `projects//locations//conversations//messages/`.",
            [
              "**summary**: Generated summary for a conversation.",
              {
                "$ul": [
                  "**answerRecord**: The name of the answer record. Format: \"projects//answerRecords/\"",
                  "**baselineModelVersion**: The baseline model version used to generate this summary. It is empty if a baseline model was not used to generate this summary.",
                  "**text**: The summary content that is concatenated into one string.",
                  "**textSections**: The summary content that is divided into sections. The key is the section's name and the value is the section's content. There is no specific format for the key or value."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
