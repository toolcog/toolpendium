{
  "name": "dialogflow_projects_locations_agents_flows_create",
  "description": "Creates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The agent to create a flow for. Format: `projects//locations//agents/`."
      },
      "languageCode": {
        "type": "string",
        "description": "The language of the following fields in `flow`: * `Flow.event_handlers.trigger_fulfillment.messages` * `Flow.event_handlers.trigger_fulfillment.conditional_cases` * `Flow.transition_routes.trigger_fulfillment.messages` * `Flow.transition_routes.trigger_fulfillment.conditional_cases` If not specified, the agent's default language is used. [Many languages](https://cloud.google.com/dialogflow/cx/docs/reference/language) are supported. Note: languages must be enabled in the agent before they can be used."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDialogflowCxV3Flow"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDialogflowCxV3Flow": {
        "description": "Flows represents the conversation flows when you build your chatbot agent. A flow consists of many pages connected by the transition routes. Conversations always start with the built-in Start Flow (with an all-0 ID). Transition routes can direct the conversation session from the current flow (parent flow) to another flow (sub flow). When the sub flow is finished, Dialogflow will bring the session back to the parent flow, where the sub flow is started. Usually, when a transition route is followed by a matched intent, the intent will be \"consumed\". This means the intent won't activate more transition routes. However, when the followed transition route moves the conversation session into a different flow, the matched intent can be carried over and to be consumed in the target flow.",
        "properties": {
          "advancedSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3AdvancedSettings"
          },
          "description": {
            "description": "The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.",
            "type": "string"
          },
          "displayName": {
            "description": "Required. The human-readable name of the flow.",
            "type": "string"
          },
          "eventHandlers": {
            "description": "A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3EventHandler"
            },
            "type": "array"
          },
          "knowledgeConnectorSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3KnowledgeConnectorSettings"
          },
          "name": {
            "description": "The unique identifier of the flow. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "nluSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3NluSettings"
          },
          "transitionRouteGroups": {
            "description": "A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "transitionRoutes": {
            "description": "A flow's transition routes serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition routes and can support use cases such as the user saying \"help\" or \"can I talk to a human?\", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3TransitionRoute"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3AdvancedSettings": {
        "description": "Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
        "properties": {
          "audioExportGcsDestination": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3GcsDestination"
          },
          "dtmfSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettings"
          },
          "loggingSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettings"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3GcsDestination": {
        "description": "Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
        "properties": {
          "uri": {
            "description": "Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3AdvancedSettingsDtmfSettings": {
        "description": "Define behaviors for DTMF (dual tone multi frequency).",
        "properties": {
          "enabled": {
            "description": "If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
            "type": "boolean"
          },
          "finishDigit": {
            "description": "The digit that terminates a DTMF digit sequence.",
            "type": "string"
          },
          "maxDigits": {
            "description": "Max length of DTMF digits.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3AdvancedSettingsLoggingSettings": {
        "description": "Define behaviors on logging.",
        "properties": {
          "enableInteractionLogging": {
            "description": "If true, DF Interaction logging is currently enabled.",
            "type": "boolean"
          },
          "enableStackdriverLogging": {
            "description": "If true, StackDriver logging is currently enabled.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3EventHandler": {
        "description": "An event handler specifies an event that can be handled during a session. When the specified event happens, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the event, it will be called. * If there is a `target_page` associated with the event, the session will transition into the specified page. * If there is a `target_flow` associated with the event, the session will transition into the specified flow.",
        "properties": {
          "event": {
            "description": "Required. The name of the event to handle.",
            "type": "string"
          },
          "name": {
            "description": "Output only. The unique identifier of this event handler.",
            "readOnly": true,
            "type": "string"
          },
          "targetFlow": {
            "description": "The target flow to transition to. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "targetPage": {
            "description": "The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "triggerFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3Fulfillment"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3Fulfillment": {
        "description": "A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.",
        "properties": {
          "advancedSettings": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3AdvancedSettings"
          },
          "conditionalCases": {
            "description": "Conditional cases for this fulfillment.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3FulfillmentConditionalCases"
            },
            "type": "array"
          },
          "enableGenerativeFallback": {
            "description": "If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.",
            "type": "boolean"
          },
          "messages": {
            "description": "The list of rich message responses to present to the user.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessage"
            },
            "type": "array"
          },
          "returnPartialResponses": {
            "description": "Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.",
            "type": "boolean"
          },
          "setParameterActions": {
            "description": "Set parameter values before executing the webhook.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3FulfillmentSetParameterAction"
            },
            "type": "array"
          },
          "tag": {
            "description": "The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.",
            "type": "string"
          },
          "webhook": {
            "description": "The webhook to call. Format: `projects//locations//agents//webhooks/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3FulfillmentConditionalCases": {
        "description": "A list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.",
        "properties": {
          "cases": {
            "description": "A list of cascading if-else conditions.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCase": {
        "description": "Each case has a Boolean condition. When it is evaluated to be True, the corresponding messages will be selected and evaluated recursively.",
        "properties": {
          "caseContent": {
            "description": "A list of case content.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent"
            },
            "type": "array"
          },
          "condition": {
            "description": "The condition to activate and select this case. Empty means the condition is always true. The condition is evaluated against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3FulfillmentConditionalCasesCaseCaseContent": {
        "description": "The list of messages or conditional cases to activate for this case.",
        "properties": {
          "additionalCases": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3FulfillmentConditionalCases"
          },
          "message": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessage"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessage": {
        "description": "Represents a response message that can be returned by a conversational agent. Response messages are also used for output audio synthesis. The approach is as follows: * If at least one OutputAudioText response is present, then all OutputAudioText responses are linearly concatenated, and the result is used for output audio synthesis. * If the OutputAudioText responses are a mixture of text and SSML, then the concatenated result is treated as SSML; otherwise, the result is treated as either text or SSML as appropriate. The agent designer should ideally use either text or SSML consistently throughout the bot design. * Otherwise, all Text responses are linearly concatenated, and the result is used for output audio synthesis. This approach allows for more sophisticated user experience scenarios, where the text displayed to the user may differ from what is heard.",
        "properties": {
          "channel": {
            "description": "The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.",
            "type": "string"
          },
          "conversationSuccess": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess"
          },
          "endInteraction": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageEndInteraction"
          },
          "knowledgeInfoCard": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCard"
          },
          "liveAgentHandoff": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff"
          },
          "mixedAudio": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageMixedAudio"
          },
          "outputAudioText": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText"
          },
          "payload": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Returns a response containing a custom, platform-specific payload.",
            "type": "object"
          },
          "playAudio": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessagePlayAudio"
          },
          "responseType": {
            "description": "Response type.",
            "enum": [
              "RESPONSE_TYPE_UNSPECIFIED",
              "ENTRY_PROMPT",
              "PARAMETER_PROMPT",
              "HANDLER_PROMPT"
            ],
            "type": "string"
          },
          "telephonyTransferCall": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall"
          },
          "text": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageText"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageConversationSuccess": {
        "description": "Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about. Dialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates that the conversation succeeded. * In a webhook response when you determine that you handled the customer issue.",
        "properties": {
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Custom metadata. Dialogflow doesn't impose any structure on this.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageEndInteraction": {
        "description": "Indicates that interaction with the Dialogflow agent has ended. This message is generated by Dialogflow only and not supposed to be defined by the user.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageKnowledgeInfoCard": {
        "description": "Represents info card response. If the response contains generative knowledge prediction, Dialogflow will return a payload with Infobot Messenger compatible info card. Otherwise, the info card response is skipped.",
        "properties": {},
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageLiveAgentHandoff": {
        "description": "Indicates that the conversation should be handed off to a live agent. Dialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures. You may set this, for example: * In the entry_fulfillment of a Page if entering the page indicates something went extremely wrong in the conversation. * In a webhook response when you determine that the customer issue can only be handled by a human.",
        "properties": {
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Custom metadata for your handoff procedure. Dialogflow doesn't impose any structure on this.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageMixedAudio": {
        "description": "Represents an audio message that is composed of both segments synthesized from the Dialogflow agent prompts and ones hosted externally at the specified URIs. The external URIs are specified via play_audio. This message is generated by Dialogflow only and not supposed to be defined by the user.",
        "properties": {
          "segments": {
            "description": "Segments this audio response is composed of.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageMixedAudioSegment": {
        "description": "Represents one segment of audio.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this segment can be interrupted by the end user's speech and the client should then start the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "audio": {
            "description": "Raw audio synthesized from the Dialogflow agent's response using the output config specified in the request.",
            "format": "byte",
            "type": "string"
          },
          "uri": {
            "description": "Client-specific URI that points to an audio clip accessible to the client. Dialogflow does not impose any validation on it.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageOutputAudioText": {
        "description": "A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "ssml": {
            "description": "The SSML text to be synthesized. For more information, see [SSML](/speech/text-to-speech/docs/ssml).",
            "type": "string"
          },
          "text": {
            "description": "The raw text to be synthesized.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessagePlayAudio": {
        "description": "Specifies an audio clip to be played by the client as part of the response.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "audioUri": {
            "description": "Required. URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageTelephonyTransferCall": {
        "description": "Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.",
        "properties": {
          "phoneNumber": {
            "description": "Transfer the call to a phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3ResponseMessageText": {
        "description": "The text response message.",
        "properties": {
          "allowPlaybackInterruption": {
            "description": "Output only. Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
            "readOnly": true,
            "type": "boolean"
          },
          "text": {
            "description": "Required. A collection of text responses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3FulfillmentSetParameterAction": {
        "description": "Setting a parameter value.",
        "properties": {
          "parameter": {
            "description": "Display name of the parameter.",
            "type": "string"
          },
          "value": {
            "description": "The new value of the parameter. A null value clears the parameter."
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3KnowledgeConnectorSettings": {
        "description": "The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment.",
        "properties": {
          "dataStoreConnections": {
            "description": "Optional. List of related data store connections.",
            "items": {
              "$ref": "#/$defs/GoogleCloudDialogflowCxV3DataStoreConnection"
            },
            "type": "array"
          },
          "enabled": {
            "description": "Whether Knowledge Connector is enabled or not.",
            "type": "boolean"
          },
          "targetFlow": {
            "description": "The target flow to transition to. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "targetPage": {
            "description": "The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "triggerFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3Fulfillment"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3DataStoreConnection": {
        "description": "A data store connection. It represents a data store in Discovery Engine and the type of the contents it contains.",
        "properties": {
          "dataStore": {
            "description": "The full name of the referenced data store. Formats: `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}` `projects/{project}/locations/{location}/dataStores/{data_store}`",
            "type": "string"
          },
          "dataStoreType": {
            "description": "The type of the connected data store.",
            "enum": [
              "DATA_STORE_TYPE_UNSPECIFIED",
              "PUBLIC_WEB",
              "UNSTRUCTURED",
              "STRUCTURED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3NluSettings": {
        "description": "Settings related to NLU.",
        "properties": {
          "classificationThreshold": {
            "description": "To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.",
            "format": "float",
            "type": "number"
          },
          "modelTrainingMode": {
            "description": "Indicates NLU model training mode.",
            "enum": [
              "MODEL_TRAINING_MODE_UNSPECIFIED",
              "MODEL_TRAINING_MODE_AUTOMATIC",
              "MODEL_TRAINING_MODE_MANUAL"
            ],
            "type": "string"
          },
          "modelType": {
            "description": "Indicates the type of NLU model.",
            "enum": [
              "MODEL_TYPE_UNSPECIFIED",
              "MODEL_TYPE_STANDARD",
              "MODEL_TYPE_ADVANCED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3TransitionRoute": {
        "description": "A transition route specifies a intent that can be matched and/or a data condition that can be evaluated during a session. When a specified transition is matched, the following actions are taken in order: * If there is a `trigger_fulfillment` associated with the transition, it will be called. * If there is a `target_page` associated with the transition, the session will transition into the specified page. * If there is a `target_flow` associated with the transition, the session will transition into the specified flow.",
        "properties": {
          "condition": {
            "description": "The condition to evaluate against form parameters or session parameters. See the [conditions reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition). At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.",
            "type": "string"
          },
          "description": {
            "description": "Optional. The description of the transition route. The maximum length is 500 characters.",
            "type": "string"
          },
          "intent": {
            "description": "The unique identifier of an Intent. Format: `projects//locations//agents//intents/`. Indicates that the transition can only happen when the given intent is matched. At least one of `intent` or `condition` must be specified. When both `intent` and `condition` are specified, the transition can only happen when both are fulfilled.",
            "type": "string"
          },
          "name": {
            "description": "Output only. The unique identifier of this transition route.",
            "readOnly": true,
            "type": "string"
          },
          "targetFlow": {
            "description": "The target flow to transition to. Format: `projects//locations//agents//flows/`.",
            "type": "string"
          },
          "targetPage": {
            "description": "The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
            "type": "string"
          },
          "triggerFulfillment": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3Fulfillment"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dialogflow.googleapis.com//v3/{parent}/flows{?languageCode,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Flows represents the conversation flows when you build your chatbot agent. A flow consists of many pages connected by the transition routes. Conversations always start with the built-in Start Flow (with an all-0 ID). Transition routes can direct the conversation session from the current flow (parent flow) to another flow (sub flow). When the sub flow is finished, Dialogflow will bring the session back to the parent flow, where the sub flow is started. Usually, when a transition route is followed by a matched intent, the intent will be \"consumed\". This means the intent won't activate more transition routes. However, when the followed transition route moves the conversation session into a different flow, the matched intent can be carried over and to be consumed in the target flow.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**advancedSettings**: Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
              {
                "$ul": [
                  [
                    "**audioExportGcsDestination**: Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
                    {
                      "$ul": [
                        "**uri**: Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation."
                      ]
                    }
                  ],
                  [
                    "**dtmfSettings**: Define behaviors for DTMF (dual tone multi frequency).",
                    {
                      "$ul": [
                        "**enabled**: If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
                        "**finishDigit**: The digit that terminates a DTMF digit sequence.",
                        "**maxDigits**: Max length of DTMF digits."
                      ]
                    }
                  ],
                  [
                    "**loggingSettings**: Define behaviors on logging.",
                    {
                      "$ul": [
                        "**enableInteractionLogging**: If true, DF Interaction logging is currently enabled.",
                        "**enableStackdriverLogging**: If true, StackDriver logging is currently enabled."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**description**: The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.",
            "**displayName**: Required. The human-readable name of the flow.",
            "**eventHandlers**: A flow's event handlers serve two purposes: * They are responsible for handling events (e.g. no match, webhook errors) in the flow. * They are inherited by every page's event handlers, which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow. Unlike transition_routes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.",
            [
              "**knowledgeConnectorSettings**: The Knowledge Connector settings for this page or flow. This includes information such as the attached Knowledge Bases, and the way to execute fulfillment.",
              {
                "$ul": [
                  "**dataStoreConnections**: Optional. List of related data store connections.",
                  "**enabled**: Whether Knowledge Connector is enabled or not.",
                  "**targetFlow**: The target flow to transition to. Format: `projects//locations//agents//flows/`.",
                  "**targetPage**: The target page to transition to. Format: `projects//locations//agents//flows//pages/`.",
                  [
                    "**triggerFulfillment**: A fulfillment can do one or more of the following actions at the same time: * Generate rich message responses. * Set parameter values. * Call the webhook. Fulfillments can be called at various stages in the Page or Form lifecycle. For example, when a DetectIntentRequest drives a session to enter a new page, the page's entry fulfillment can add a static response to the QueryResult in the returning DetectIntentResponse, call the webhook (for example, to load user data from a database), or both.",
                    {
                      "$ul": [
                        [
                          "**advancedSettings**: Hierarchical advanced settings for agent/flow/page/fulfillment/parameter. Settings exposed at lower level overrides the settings exposed at higher level. Overriding occurs at the sub-setting level. For example, the playback_interruption_settings at fulfillment level only overrides the playback_interruption_settings at the agent level, leaving other settings at the agent level unchanged. DTMF settings does not override each other. DTMF settings set at different levels define DTMF detections running in parallel. Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.",
                          {
                            "$ul": [
                              [
                                "**audioExportGcsDestination**: Google Cloud Storage location for a Dialogflow operation that writes or exports objects (e.g. exported agent or transcripts) outside of Dialogflow.",
                                {
                                  "$ul": [
                                    "**uri**: Required. The Google Cloud Storage URI for the exported objects. A URI is of the form: `gs://bucket/object-name-or-prefix` Whether a full object name, or just a prefix, its usage depends on the Dialogflow operation."
                                  ]
                                }
                              ],
                              [
                                "**dtmfSettings**: Define behaviors for DTMF (dual tone multi frequency).",
                                {
                                  "$ul": [
                                    "**enabled**: If true, incoming audio is processed for DTMF (dual tone multi frequency) events. For example, if the caller presses a button on their telephone keypad and DTMF processing is enabled, Dialogflow will detect the event (e.g. a \"3\" was pressed) in the incoming audio and pass the event to the bot to drive business logic (e.g. when 3 is pressed, return the account balance).",
                                    "**finishDigit**: The digit that terminates a DTMF digit sequence.",
                                    "**maxDigits**: Max length of DTMF digits."
                                  ]
                                }
                              ],
                              [
                                "**loggingSettings**: Define behaviors on logging.",
                                {
                                  "$ul": [
                                    "**enableInteractionLogging**: If true, DF Interaction logging is currently enabled.",
                                    "**enableStackdriverLogging**: If true, StackDriver logging is currently enabled."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**conditionalCases**: Conditional cases for this fulfillment.",
                        "**enableGenerativeFallback**: If the flag is true, the agent will utilize LLM to generate a text response. If LLM generation fails, the defined responses in the fulfillment will be respected. This flag is only useful for fulfillments associated with no-match event handlers.",
                        "**messages**: The list of rich message responses to present to the user.",
                        "**returnPartialResponses**: Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.",
                        "**setParameterActions**: Set parameter values before executing the webhook.",
                        "**tag**: The value of this field will be populated in the WebhookRequest `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is called. The tag is typically used by the webhook service to identify which fulfillment is being called, but it could be used for other purposes. This field is required if `webhook` is specified.",
                        "**webhook**: The webhook to call. Format: `projects//locations//agents//webhooks/`."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**name**: The unique identifier of the flow. Format: `projects//locations//agents//flows/`.",
            [
              "**nluSettings**: Settings related to NLU.",
              {
                "$ul": [
                  "**classificationThreshold**: To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold. If the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.",
                  "**modelTrainingMode**: Indicates NLU model training mode.",
                  "**modelType**: Indicates the type of NLU model."
                ]
              }
            ],
            "**transitionRouteGroups**: A flow's transition route group serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition route groups. Transition route groups defined in the page have higher priority than those defined in the flow. Format:`projects//locations//agents//flows//transitionRouteGroups/` or `projects//locations//agents//transitionRouteGroups/` for agent-level groups.",
            "**transitionRoutes**: A flow's transition routes serve two purposes: * They are responsible for matching the user's first utterances in the flow. * They are inherited by every page's transition routes and can support use cases such as the user saying \"help\" or \"can I talk to a human?\", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow. TransitionRoutes are evalauted in the following order: * TransitionRoutes with intent specified. * TransitionRoutes with only condition specified. TransitionRoutes with intent specified are inherited by pages in the flow."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
