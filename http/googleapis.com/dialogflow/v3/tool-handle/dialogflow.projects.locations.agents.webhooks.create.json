{
  "name": "dialogflow_projects_locations_agents_webhooks_create",
  "description": "Creates a webhook in the specified agent.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The agent to create a webhook for. Format: `projects//locations//agents/`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudDialogflowCxV3Webhook"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudDialogflowCxV3Webhook": {
        "description": "Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend.",
        "properties": {
          "disabled": {
            "description": "Indicates whether the webhook is disabled.",
            "type": "boolean"
          },
          "displayName": {
            "description": "Required. The human-readable name of the webhook, unique within the agent.",
            "type": "string"
          },
          "genericWebService": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3WebhookGenericWebService"
          },
          "name": {
            "description": "The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`.",
            "type": "string"
          },
          "serviceDirectory": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig"
          },
          "timeout": {
            "description": "Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3WebhookGenericWebService": {
        "description": "Represents configuration for a generic web service.",
        "properties": {
          "allowedCaCerts": {
            "description": "Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```",
            "items": {
              "format": "byte",
              "type": "string"
            },
            "type": "array"
          },
          "httpMethod": {
            "description": "Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.",
            "enum": [
              "HTTP_METHOD_UNSPECIFIED",
              "POST",
              "GET",
              "HEAD",
              "PUT",
              "DELETE",
              "PATCH",
              "OPTIONS"
            ],
            "type": "string"
          },
          "parameterMapping": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response",
            "type": "object"
          },
          "password": {
            "deprecated": true,
            "description": "The password for HTTP Basic authentication.",
            "type": "string"
          },
          "requestBody": {
            "description": "Optional. Defines a custom JSON object as request body to send to flexible webhook.",
            "type": "string"
          },
          "requestHeaders": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The HTTP request headers to send together with webhook requests.",
            "type": "object"
          },
          "uri": {
            "description": "Required. The webhook URI for receiving POST requests. It must use https protocol.",
            "type": "string"
          },
          "username": {
            "deprecated": true,
            "description": "The user name for HTTP Basic authentication.",
            "type": "string"
          },
          "webhookType": {
            "description": "Optional. Type of the webhook.",
            "enum": [
              "WEBHOOK_TYPE_UNSPECIFIED",
              "STANDARD",
              "FLEXIBLE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudDialogflowCxV3WebhookServiceDirectoryConfig": {
        "description": "Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service.",
        "properties": {
          "genericWebService": {
            "$ref": "#/$defs/GoogleCloudDialogflowCxV3WebhookGenericWebService"
          },
          "service": {
            "description": "Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dialogflow.googleapis.com//v3/{parent}/webhooks{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Webhooks host the developer's business logic. During a session, webhooks allow the developer to use the data extracted by Dialogflow's natural language processing to generate dynamic responses, validate collected data, or trigger actions on the backend.",
        "**Key properties:**",
        {
          "$ul": [
            "**disabled**: Indicates whether the webhook is disabled.",
            "**displayName**: Required. The human-readable name of the webhook, unique within the agent.",
            [
              "**genericWebService**: Represents configuration for a generic web service.",
              {
                "$ul": [
                  "**allowedCaCerts**: Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```",
                  "**httpMethod**: Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.",
                  "**parameterMapping**: Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response",
                  "**password**: The password for HTTP Basic authentication.",
                  "**requestBody**: Optional. Defines a custom JSON object as request body to send to flexible webhook.",
                  "**requestHeaders**: The HTTP request headers to send together with webhook requests.",
                  "**uri**: Required. The webhook URI for receiving POST requests. It must use https protocol.",
                  "**username**: The user name for HTTP Basic authentication.",
                  "**webhookType**: Optional. Type of the webhook."
                ]
              }
            ],
            "**name**: The unique identifier of the webhook. Required for the Webhooks.UpdateWebhook method. Webhooks.CreateWebhook populates the name automatically. Format: `projects//locations//agents//webhooks/`.",
            [
              "**serviceDirectory**: Represents configuration for a [Service Directory](https://cloud.google.com/service-directory) service.",
              {
                "$ul": [
                  [
                    "**genericWebService**: Represents configuration for a generic web service.",
                    {
                      "$ul": [
                        "**allowedCaCerts**: Optional. Specifies a list of allowed custom CA certificates (in DER format) for HTTPS verification. This overrides the default SSL trust store. If this is empty or unspecified, Dialogflow will use Google's default trust store to verify certificates. N.B. Make sure the HTTPS server certificates are signed with \"subject alt name\". For instance a certificate can be self-signed using the following command, ``` openssl x509 -req -days 200 -in example.com.csr \\ -signkey example.com.key \\ -out example.com.crt \\ -extfile <(printf \"\\nsubjectAltName='DNS:www.example.com'\") ```",
                        "**httpMethod**: Optional. HTTP method for the flexible webhook calls. Standard webhook always uses POST.",
                        "**parameterMapping**: Optional. Maps the values extracted from specific fields of the flexible webhook response into session parameters. - Key: session parameter name - Value: field path in the webhook response",
                        "**password**: The password for HTTP Basic authentication.",
                        "**requestBody**: Optional. Defines a custom JSON object as request body to send to flexible webhook.",
                        "**requestHeaders**: The HTTP request headers to send together with webhook requests.",
                        "**uri**: Required. The webhook URI for receiving POST requests. It must use https protocol.",
                        "**username**: The user name for HTTP Basic authentication.",
                        "**webhookType**: Optional. Type of the webhook."
                      ]
                    }
                  ],
                  "**service**: Required. The name of [Service Directory](https://cloud.google.com/service-directory) service. Format: `projects//locations//namespaces//services/`. `Location ID` of the service directory must be the same as the location of the agent."
                ]
              }
            ],
            "**timeout**: Webhook execution timeout. Execution is considered failed if Dialogflow doesn't receive a response from webhook at the end of the timeout period. Defaults to 5 seconds, maximum allowed timeout is 30 seconds."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
