{
  "name": "sheets_spreadsheets_values_append",
  "description": "Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.",
  "parameters": {
    "type": "object",
    "properties": {
      "spreadsheetId": {
        "type": "string",
        "description": "The ID of the spreadsheet to update."
      },
      "range": {
        "type": "string",
        "description": "The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table."
      },
      "includeValuesInResponse": {
        "type": "boolean",
        "description": "Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values."
      },
      "insertDataOption": {
        "enum": [
          "OVERWRITE",
          "INSERT_ROWS"
        ],
        "type": "string",
        "description": "How the input data should be inserted."
      },
      "responseDateTimeRenderOption": {
        "enum": [
          "SERIAL_NUMBER",
          "FORMATTED_STRING"
        ],
        "type": "string",
        "description": "Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER."
      },
      "responseValueRenderOption": {
        "enum": [
          "FORMATTED_VALUE",
          "UNFORMATTED_VALUE",
          "FORMULA"
        ],
        "type": "string",
        "description": "Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE."
      },
      "valueInputOption": {
        "enum": [
          "INPUT_VALUE_OPTION_UNSPECIFIED",
          "RAW",
          "USER_ENTERED"
        ],
        "type": "string",
        "description": "How the input data should be interpreted."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ValueRange"
      }
    },
    "required": [
      "spreadsheetId",
      "range"
    ],
    "$defs": {
      "ValueRange": {
        "description": "Data within a range of the spreadsheet.",
        "properties": {
          "majorDimension": {
            "description": "The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
            "enum": [
              "DIMENSION_UNSPECIFIED",
              "ROWS",
              "COLUMNS"
            ],
            "type": "string"
          },
          "range": {
            "description": "The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.",
            "type": "string"
          },
          "values": {
            "description": "The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.",
            "items": {
              "items": {},
              "type": "array"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://sheets.googleapis.com//v4/spreadsheets/{spreadsheetId}/values/{range}:append{?includeValuesInResponse,insertDataOption,responseDateTimeRenderOption,responseValueRenderOption,valueInputOption,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response when updating a range of values in a spreadsheet.",
        "**Key properties:**",
        {
          "$ul": [
            "**spreadsheetId**: The spreadsheet the updates were applied to.",
            "**tableRange**: The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.",
            [
              "**updates**: The response when updating a range of values in a spreadsheet.",
              {
                "$ul": [
                  "**spreadsheetId**: The spreadsheet the updates were applied to.",
                  "**updatedCells**: The number of cells updated.",
                  "**updatedColumns**: The number of columns where at least one cell in the column was updated.",
                  [
                    "**updatedData**: Data within a range of the spreadsheet.",
                    {
                      "$ul": [
                        "**majorDimension**: The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.",
                        "**range**: The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.",
                        "**values**: The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string."
                      ]
                    }
                  ],
                  "**updatedRange**: The range (in A1 notation) that updates were applied to.",
                  "**updatedRows**: The number of rows where at least one cell in the row was updated."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
