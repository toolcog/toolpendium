{
  "name": "sheets_spreadsheets_developerMetadata_search",
  "description": "Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.",
  "parameters": {
    "type": "object",
    "properties": {
      "spreadsheetId": {
        "type": "string",
        "description": "The ID of the spreadsheet to retrieve metadata from."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/SearchDeveloperMetadataRequest"
      }
    },
    "required": [
      "spreadsheetId"
    ],
    "$defs": {
      "SearchDeveloperMetadataRequest": {
        "description": "A request to retrieve all developer metadata matching the set of specified criteria.",
        "properties": {
          "dataFilters": {
            "description": "The data filters describing the criteria used to determine which DeveloperMetadata entries to return. DeveloperMetadata matching any of the specified filters are included in the response.",
            "items": {
              "$ref": "#/$defs/DataFilter"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataFilter": {
        "description": "Filter that describes what data should be selected or returned from a request.",
        "properties": {
          "a1Range": {
            "description": "Selects data that matches the specified A1 range.",
            "type": "string"
          },
          "developerMetadataLookup": {
            "$ref": "#/$defs/DeveloperMetadataLookup"
          },
          "gridRange": {
            "$ref": "#/$defs/GridRange"
          }
        },
        "type": "object"
      },
      "DeveloperMetadataLookup": {
        "description": "Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.",
        "properties": {
          "locationMatchingStrategy": {
            "description": "Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.",
            "enum": [
              "DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED",
              "EXACT_LOCATION",
              "INTERSECTING_LOCATION"
            ],
            "type": "string"
          },
          "locationType": {
            "description": "Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.",
            "enum": [
              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
              "ROW",
              "COLUMN",
              "SHEET",
              "SPREADSHEET"
            ],
            "type": "string"
          },
          "metadataId": {
            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.",
            "format": "int32",
            "type": "integer"
          },
          "metadataKey": {
            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.",
            "type": "string"
          },
          "metadataLocation": {
            "$ref": "#/$defs/DeveloperMetadataLocation"
          },
          "metadataValue": {
            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.",
            "type": "string"
          },
          "visibility": {
            "description": "Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.",
            "enum": [
              "DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED",
              "DOCUMENT",
              "PROJECT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeveloperMetadataLocation": {
        "description": "A location where metadata may be associated in a spreadsheet.",
        "properties": {
          "dimensionRange": {
            "$ref": "#/$defs/DimensionRange"
          },
          "locationType": {
            "description": "The type of location this object represents. This field is read-only.",
            "enum": [
              "DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED",
              "ROW",
              "COLUMN",
              "SHEET",
              "SPREADSHEET"
            ],
            "type": "string"
          },
          "sheetId": {
            "description": "The ID of the sheet when metadata is associated with an entire sheet.",
            "format": "int32",
            "type": "integer"
          },
          "spreadsheet": {
            "description": "True when metadata is associated with an entire spreadsheet.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DimensionRange": {
        "description": "A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.",
        "properties": {
          "dimension": {
            "description": "The dimension of the span.",
            "enum": [
              "DIMENSION_UNSPECIFIED",
              "ROWS",
              "COLUMNS"
            ],
            "type": "string"
          },
          "endIndex": {
            "description": "The end (exclusive) of the span, or not set if unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "sheetId": {
            "description": "The sheet this span is on.",
            "format": "int32",
            "type": "integer"
          },
          "startIndex": {
            "description": "The start (inclusive) of the span, or not set if unbounded.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GridRange": {
        "description": "A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `\"Sheet1\"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.",
        "properties": {
          "endColumnIndex": {
            "description": "The end column (exclusive) of the range, or not set if unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "endRowIndex": {
            "description": "The end row (exclusive) of the range, or not set if unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "sheetId": {
            "description": "The sheet this range is on.",
            "format": "int32",
            "type": "integer"
          },
          "startColumnIndex": {
            "description": "The start column (inclusive) of the range, or not set if unbounded.",
            "format": "int32",
            "type": "integer"
          },
          "startRowIndex": {
            "description": "The start row (inclusive) of the range, or not set if unbounded.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://sheets.googleapis.com//v4/spreadsheets/{spreadsheetId}/developerMetadata:search{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A reply to a developer metadata search request.",
        "**Key properties:**",
        {
          "$ul": [
            "**matchedDeveloperMetadata**: The metadata matching the criteria of the search request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
