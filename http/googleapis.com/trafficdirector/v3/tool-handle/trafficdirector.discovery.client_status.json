{
  "name": "trafficdirector_discovery_client_status",
  "description": "",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ClientStatusRequest"
      }
    },
    "$defs": {
      "ClientStatusRequest": {
        "description": "Request for client status of clients identified by a list of NodeMatchers.",
        "properties": {
          "excludeResourceContents": {
            "description": "If true, the server will not include the resource contents in the response (i.e., the generic_xds_configs.xds_config field will not be populated). [#not-implemented-hide:]",
            "type": "boolean"
          },
          "node": {
            "$ref": "#/$defs/Node"
          },
          "nodeMatchers": {
            "description": "Management server can use these match criteria to identify clients. The match follows OR semantics.",
            "items": {
              "$ref": "#/$defs/NodeMatcher"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Node": {
        "description": "Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 13]",
        "properties": {
          "clientFeatures": {
            "description": "Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example ``com.acme.feature``. See :ref:`the list of features ` that xDS client may support.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cluster": {
            "description": "Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.",
            "type": "string"
          },
          "dynamicParameters": {
            "additionalProperties": {
              "$ref": "#/$defs/ContextParams"
            },
            "description": "Map from xDS resource type URL to dynamic context parameters. These may vary at runtime (unlike other fields in this message). For example, the xDS client may have a shard identifier that changes during the lifetime of the xDS client. In Envoy, this would be achieved by updating the dynamic context on the Server::Instance's LocalInfo context provider. The shard ID dynamic parameter then appears in this field during future discovery requests.",
            "type": "object"
          },
          "extensions": {
            "description": "List of extensions and their versions supported by the node.",
            "items": {
              "$ref": "#/$defs/Extension"
            },
            "type": "array"
          },
          "id": {
            "description": "An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.",
            "type": "string"
          },
          "listeningAddresses": {
            "deprecated": true,
            "description": "Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress ``(0.0.0.0,80)``. The field is optional and just a hint.",
            "items": {
              "$ref": "#/$defs/Address"
            },
            "type": "array"
          },
          "locality": {
            "$ref": "#/$defs/Locality"
          },
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.",
            "type": "object"
          },
          "userAgentBuildVersion": {
            "$ref": "#/$defs/BuildVersion"
          },
          "userAgentName": {
            "description": "Free-form string that identifies the entity requesting config. E.g. \"envoy\" or \"grpc\"",
            "type": "string"
          },
          "userAgentVersion": {
            "description": "Free-form string that identifies the version of the entity requesting config. E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ContextParams": {
        "description": "Additional parameters that can be used to select resource variants. These include any global context parameters, per-resource type client feature capabilities and per-resource type functional attributes. All per-resource type attributes will be `xds.resource.` prefixed and some of these are documented below: `xds.resource.listening_address`: The value is \"IP:port\" (e.g. \"10.1.1.3:8080\") which is the listening address of a Listener. Used in a Listener resource query.",
        "properties": {
          "params": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          }
        },
        "type": "object"
      },
      "Extension": {
        "description": "Version and identification for an Envoy extension. [#next-free-field: 7]",
        "properties": {
          "category": {
            "description": "Category of the extension. Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\" for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from acme.com vendor. [#comment:",
            "type": "string"
          },
          "disabled": {
            "description": "Indicates that the extension is present but was disabled via dynamic configuration.",
            "type": "boolean"
          },
          "name": {
            "description": "This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.",
            "type": "string"
          },
          "typeDescriptor": {
            "deprecated": true,
            "description": "[#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:",
            "type": "string"
          },
          "typeUrls": {
            "description": "Type URLs of extension configuration protos.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "$ref": "#/$defs/BuildVersion"
          }
        },
        "type": "object"
      },
      "BuildVersion": {
        "description": "BuildVersion combines SemVer version of extension with free-form build information (i.e. 'alpha', 'private-build') as a set of strings.",
        "properties": {
          "metadata": {
            "additionalProperties": {
              "description": "Properties of the object."
            },
            "description": "Free-form build information. Envoy defines several well known keys in the source/common/version/version.h file",
            "type": "object"
          },
          "version": {
            "$ref": "#/$defs/SemanticVersion"
          }
        },
        "type": "object"
      },
      "SemanticVersion": {
        "description": "Envoy uses SemVer (https://semver.org/). Major/minor versions indicate expected behaviors and APIs, the patch version field is used only for security fixes and can be generally ignored.",
        "properties": {
          "majorNumber": {
            "format": "uint32",
            "type": "integer"
          },
          "minorNumber": {
            "format": "uint32",
            "type": "integer"
          },
          "patch": {
            "format": "uint32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Address": {
        "description": "Addresses specify either a logical or physical address and port, which are used to tell Envoy where to bind/listen, connect to upstream and find management servers.",
        "properties": {
          "envoyInternalAddress": {
            "$ref": "#/$defs/EnvoyInternalAddress"
          },
          "pipe": {
            "$ref": "#/$defs/Pipe"
          },
          "socketAddress": {
            "$ref": "#/$defs/SocketAddress"
          }
        },
        "type": "object"
      },
      "EnvoyInternalAddress": {
        "description": "The address represents an envoy internal listener. [#comment: ",
        "properties": {
          "endpointId": {
            "description": "Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for example, may be set to the final destination IP for the target internal listener.",
            "type": "string"
          },
          "serverListenerName": {
            "description": "Specifies the :ref:`name ` of the internal listener.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pipe": {
        "properties": {
          "mode": {
            "description": "The mode for the Pipe. Not applicable for abstract sockets.",
            "format": "uint32",
            "type": "integer"
          },
          "path": {
            "description": "Unix Domain Socket path. On Linux, paths starting with '@' will use the abstract namespace. The starting '@' is replaced by a null byte by Envoy. Paths starting with '@' will result in an error in environments other than Linux.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocketAddress": {
        "description": "[#next-free-field: 7]",
        "properties": {
          "address": {
            "description": "The address for this socket. :ref:`Listeners ` will bind to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::`` to bind to any address. [#comment:TODO(zuercher) reinstate when implemented: It is possible to distinguish a Listener address via the prefix/suffix matching in :ref:`FilterChainMatch `.] When used within an upstream :ref:`BindConfig `, the address controls the source address of outbound connections. For :ref:`clusters `, the cluster type determines whether the address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized via :ref:`resolver_name `.",
            "type": "string"
          },
          "ipv4Compat": {
            "description": "When binding to an IPv6 address above, this enables `IPv4 compatibility `_. Binding to ``::`` will allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into IPv6 space as ``::FFFF:``.",
            "type": "boolean"
          },
          "namedPort": {
            "description": "This is only valid if :ref:`resolver_name ` is specified below and the named resolver is capable of named port resolution.",
            "type": "string"
          },
          "portValue": {
            "format": "uint32",
            "type": "integer"
          },
          "protocol": {
            "enum": [
              "TCP",
              "UDP"
            ],
            "type": "string"
          },
          "resolverName": {
            "description": "The name of the custom resolver. This must have been registered with Envoy. If this is empty, a context dependent default applies. If the address is a concrete IP address, no resolution will occur. If address is a hostname this should be set for resolution other than DNS. Specifying a custom resolver with ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Locality": {
        "description": "Identifies location of where either Envoy runs or where upstream hosts run.",
        "properties": {
          "region": {
            "description": "Region this :ref:`zone ` belongs to.",
            "type": "string"
          },
          "subZone": {
            "description": "When used for locality of upstream hosts, this field further splits zone into smaller chunks of sub-zones so they can be load balanced independently.",
            "type": "string"
          },
          "zone": {
            "description": "Defines the local service zone where Envoy is running. Though optional, it should be set if discovery service routing is used and the discovery service exposes :ref:`zone data `, either in this message or via :option:`--service-zone`. The meaning of zone is context dependent, e.g. `Availability Zone (AZ) `_ on AWS, `Zone `_ on GCP, etc.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeMatcher": {
        "description": "Specifies the way to match a Node. The match follows AND semantics.",
        "properties": {
          "nodeId": {
            "$ref": "#/$defs/StringMatcher"
          },
          "nodeMetadatas": {
            "description": "Specifies match criteria on the node metadata.",
            "items": {
              "$ref": "#/$defs/StructMatcher"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StringMatcher": {
        "description": "Specifies the way to match a string. [#next-free-field: 8]",
        "properties": {
          "contains": {
            "description": "The input string must have the substring specified here. Note: empty contains match is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``xyz.abc.def``",
            "type": "string"
          },
          "exact": {
            "description": "The input string must match exactly the string specified here. Examples: * ``abc`` only matches the value ``abc``.",
            "type": "string"
          },
          "ignoreCase": {
            "description": "If true, indicates the exact/prefix/suffix/contains matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher ``data`` will match both input string ``Data`` and ``data`` if set to true.",
            "type": "boolean"
          },
          "prefix": {
            "description": "The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``abc.xyz``",
            "type": "string"
          },
          "safeRegex": {
            "$ref": "#/$defs/RegexMatcher"
          },
          "suffix": {
            "description": "The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * ``abc`` matches the value ``xyz.abc``",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegexMatcher": {
        "description": "A regex matcher designed for safety when used with untrusted input.",
        "properties": {
          "googleRe2": {
            "$ref": "#/$defs/GoogleRE2"
          },
          "regex": {
            "description": "The regex match string. The string must be supported by the configured engine. The regex is matched against the full string, not as a partial match.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRE2": {
        "description": "Google's `RE2 `_ regex engine. The regex string must adhere to the documented `syntax `_. The engine is designed to complete execution in linear time as well as limit the amount of memory used. Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level`` and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or complexity that a compiled regex can have before an exception is thrown or a warning is logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning). Envoy emits two stats for tracking the program size of regexes: the histogram ``re2.program_size``, which records the program size, and the counter ``re2.exceeded_warn_level``, which is incremented each time the program size exceeds the warn level threshold.",
        "properties": {
          "maxProgramSize": {
            "deprecated": true,
            "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a compiled regex is to evaluate. A regex that has a program size greater than the configured value will fail to compile. In this case, the configured max program size can be increased or the regex can be simplified. If not specified, the default is 100. This field is deprecated; regexp validation should be performed on the management server instead of being done by each individual client. .. note:: Although this field is deprecated, the program size will still be checked against the global ``re2.max_program_size.error_level`` runtime value.",
            "format": "uint32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StructMatcher": {
        "description": "StructMatcher provides a general interface to check if a given value is matched in google.protobuf.Struct. It uses ``path`` to retrieve the value from the struct and then check if it's matched to the specified value. For example, for the following Struct: .. code-block:: yaml fields: a: struct_value: fields: b: struct_value: fields: c: string_value: pro t: list_value: values: - string_value: m - string_value: n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value \"pro\" from the Metadata which is matched to the specified prefix match. .. code-block:: yaml path: - key: a - key: b - key: c value: string_match: prefix: pr The following StructMatcher is matched as the code will match one of the string values in the list at the path [a, t]. .. code-block:: yaml path: - key: a - key: t value: list_match: one_of: string_match: exact: m An example use of StructMatcher is to match metadata in envoy.v*.core.Node.",
        "properties": {
          "path": {
            "description": "The path to retrieve the Value from the Struct.",
            "items": {
              "$ref": "#/$defs/PathSegment"
            },
            "type": "array"
          },
          "value": {
            "$ref": "#/$defs/ValueMatcher"
          }
        },
        "type": "object"
      },
      "PathSegment": {
        "description": "Specifies the segment in a path to retrieve value from Struct.",
        "properties": {
          "key": {
            "description": "If specified, use the key to retrieve the value in a Struct.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValueMatcher": {
        "description": "Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 8]",
        "properties": {
          "boolMatch": {
            "description": "If specified, a match occurs if and only if the target value is a bool value and is equal to this field.",
            "type": "boolean"
          },
          "doubleMatch": {
            "$ref": "#/$defs/DoubleMatcher"
          },
          "listMatch": {
            "$ref": "#/$defs/ListMatcher"
          },
          "nullMatch": {
            "$ref": "#/$defs/NullMatch"
          },
          "orMatch": {
            "$ref": "#/$defs/OrMatcher"
          },
          "presentMatch": {
            "description": "If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.",
            "type": "boolean"
          },
          "stringMatch": {
            "$ref": "#/$defs/StringMatcher"
          }
        },
        "type": "object"
      },
      "DoubleMatcher": {
        "description": "Specifies the way to match a double value.",
        "properties": {
          "exact": {
            "description": "If specified, the input double value must be equal to the value specified here.",
            "format": "double",
            "type": "number"
          },
          "range": {
            "$ref": "#/$defs/DoubleRange"
          }
        },
        "type": "object"
      },
      "DoubleRange": {
        "description": "Specifies the double start and end of the range using half-open interval semantics [start, end).",
        "properties": {
          "end": {
            "description": "end of the range (exclusive)",
            "format": "double",
            "type": "number"
          },
          "start": {
            "description": "start of the range (inclusive)",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ListMatcher": {
        "description": "Specifies the way to match a list value.",
        "properties": {
          "oneOf": {
            "$ref": "#/$defs/ValueMatcher"
          }
        },
        "type": "object"
      },
      "NullMatch": {
        "description": "NullMatch is an empty message to specify a null value.",
        "properties": {},
        "type": "object"
      },
      "OrMatcher": {
        "description": "Specifies a list of alternatives for the match.",
        "properties": {
          "valueMatchers": {
            "items": {
              "$ref": "#/$defs/ValueMatcher"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://trafficdirector.googleapis.com//v3/discovery:client_status{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**config**: Client configs for the clients specified in the ClientStatusRequest."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
