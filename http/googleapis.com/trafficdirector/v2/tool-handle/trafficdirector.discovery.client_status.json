{
  "name": "trafficdirector_discovery_client_status",
  "description": "",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ClientStatusRequest"
      }
    },
    "$defs": {
      "ClientStatusRequest": {
        "description": "Request for client status of clients identified by a list of NodeMatchers.",
        "properties": {
          "nodeMatchers": {
            "description": "Management server can use these match criteria to identify clients. The match follows OR semantics.",
            "items": {
              "$ref": "#/$defs/NodeMatcher"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "NodeMatcher": {
        "description": "Specifies the way to match a Node. The match follows AND semantics.",
        "properties": {
          "nodeId": {
            "$ref": "#/$defs/StringMatcher"
          },
          "nodeMetadatas": {
            "description": "Specifies match criteria on the node metadata.",
            "items": {
              "$ref": "#/$defs/StructMatcher"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StringMatcher": {
        "description": "Specifies the way to match a string. [#next-free-field: 7]",
        "properties": {
          "exact": {
            "description": "The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.",
            "type": "string"
          },
          "ignoreCase": {
            "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.",
            "type": "boolean"
          },
          "prefix": {
            "description": "The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*",
            "type": "string"
          },
          "regex": {
            "deprecated": true,
            "description": "The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\\d{3}`` matches the value *123* * The regex ``\\d{3}`` does not match the value *1234* * The regex ``\\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.",
            "type": "string"
          },
          "safeRegex": {
            "$ref": "#/$defs/RegexMatcher"
          },
          "suffix": {
            "description": "The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RegexMatcher": {
        "description": "A regex matcher designed for safety when used with untrusted input.",
        "properties": {
          "googleRe2": {
            "$ref": "#/$defs/GoogleRE2"
          },
          "regex": {
            "description": "The regex match string. The string must be supported by the configured engine.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleRE2": {
        "description": "Google's `RE2 `_ regex engine. The regex string must adhere to the documented `syntax `_. The engine is designed to complete execution in linear time as well as limit the amount of memory used. Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level`` and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or complexity that a compiled regex can have before an exception is thrown or a warning is logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning). Envoy emits two stats for tracking the program size of regexes: the histogram `re2.program_size`, which records the program size, and the counter `re2.exceeded_warn_level`, which is incremented each time the program size exceeds the warn level threshold.",
        "properties": {
          "maxProgramSize": {
            "deprecated": true,
            "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a compiled regex is to evaluate. A regex that has a program size greater than the configured value will fail to compile. In this case, the configured max program size can be increased or the regex can be simplified. If not specified, the default is 100. This field is deprecated; regexp validation should be performed on the management server instead of being done by each individual client.",
            "format": "uint32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StructMatcher": {
        "description": "StructMatcher provides a general interface to check if a given value is matched in google.protobuf.Struct. It uses `path` to retrieve the value from the struct and then check if it's matched to the specified value. For example, for the following Struct: .. code-block:: yaml fields: a: struct_value: fields: b: struct_value: fields: c: string_value: pro t: list_value: values: - string_value: m - string_value: n The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value \"pro\" from the Metadata which is matched to the specified prefix match. .. code-block:: yaml path: - key: a - key: b - key: c value: string_match: prefix: pr The following StructMatcher is matched as the code will match one of the string values in the list at the path [a, t]. .. code-block:: yaml path: - key: a - key: t value: list_match: one_of: string_match: exact: m An example use of StructMatcher is to match metadata in envoy.v*.core.Node.",
        "properties": {
          "path": {
            "description": "The path to retrieve the Value from the Struct.",
            "items": {
              "$ref": "#/$defs/PathSegment"
            },
            "type": "array"
          },
          "value": {
            "$ref": "#/$defs/ValueMatcher"
          }
        },
        "type": "object"
      },
      "PathSegment": {
        "description": "Specifies the segment in a path to retrieve value from Struct.",
        "properties": {
          "key": {
            "description": "If specified, use the key to retrieve the value in a Struct.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValueMatcher": {
        "description": "Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 7]",
        "properties": {
          "boolMatch": {
            "description": "If specified, a match occurs if and only if the target value is a bool value and is equal to this field.",
            "type": "boolean"
          },
          "doubleMatch": {
            "$ref": "#/$defs/DoubleMatcher"
          },
          "listMatch": {
            "$ref": "#/$defs/ListMatcher"
          },
          "nullMatch": {
            "$ref": "#/$defs/NullMatch"
          },
          "presentMatch": {
            "description": "If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.",
            "type": "boolean"
          },
          "stringMatch": {
            "$ref": "#/$defs/StringMatcher"
          }
        },
        "type": "object"
      },
      "DoubleMatcher": {
        "description": "Specifies the way to match a double value.",
        "properties": {
          "exact": {
            "description": "If specified, the input double value must be equal to the value specified here.",
            "format": "double",
            "type": "number"
          },
          "range": {
            "$ref": "#/$defs/DoubleRange"
          }
        },
        "type": "object"
      },
      "DoubleRange": {
        "description": "Specifies the double start and end of the range using half-open interval semantics [start, end).",
        "properties": {
          "end": {
            "description": "end of the range (exclusive)",
            "format": "double",
            "type": "number"
          },
          "start": {
            "description": "start of the range (inclusive)",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "ListMatcher": {
        "description": "Specifies the way to match a list value.",
        "properties": {
          "oneOf": {
            "$ref": "#/$defs/ValueMatcher"
          }
        },
        "type": "object"
      },
      "NullMatch": {
        "description": "NullMatch is an empty message to specify a null value.",
        "properties": {},
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://trafficdirector.googleapis.com//v2/discovery:client_status{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**config**: Client configs for the clients specified in the ClientStatusRequest."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
