{
  "name": "datastore_projects_commit",
  "description": "Commits a transaction, optionally creating, deleting or modifying some entities.",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Required. The ID of the project against which to make the request."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CommitRequest"
      }
    },
    "required": [
      "projectId"
    ],
    "$defs": {
      "CommitRequest": {
        "description": "The request for Datastore.Commit.",
        "properties": {
          "mode": {
            "description": "The type of commit to perform. Defaults to `TRANSACTIONAL`.",
            "enum": [
              "MODE_UNSPECIFIED",
              "TRANSACTIONAL",
              "NON_TRANSACTIONAL"
            ],
            "type": "string"
          },
          "mutations": {
            "description": "The mutations to perform. When mode is `TRANSACTIONAL`, mutations affecting a single entity are applied in order. The following sequences of mutations affecting a single entity are not permitted in a single `Commit` request: - `insert` followed by `insert` - `update` followed by `insert` - `upsert` followed by `insert` - `delete` followed by `update` When mode is `NON_TRANSACTIONAL`, no two mutations may affect a single entity.",
            "items": {
              "$ref": "#/$defs/Mutation"
            },
            "type": "array"
          },
          "transaction": {
            "description": "The identifier of the transaction associated with the commit. A transaction identifier is returned by a call to Datastore.BeginTransaction.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Mutation": {
        "description": "A mutation to apply to an entity.",
        "properties": {
          "baseVersion": {
            "description": "The version of the entity that this mutation is being applied to. If this does not match the current version on the server, the mutation conflicts.",
            "format": "int64",
            "type": "string"
          },
          "delete": {
            "$ref": "#/$defs/Key"
          },
          "insert": {
            "$ref": "#/$defs/Entity"
          },
          "update": {
            "$ref": "#/$defs/Entity"
          },
          "updateTime": {
            "description": "The update time of the entity that this mutation is being applied to. If this does not match the current update time on the server, the mutation conflicts.",
            "format": "google-datetime",
            "type": "string"
          },
          "upsert": {
            "$ref": "#/$defs/Entity"
          }
        },
        "type": "object"
      },
      "Key": {
        "description": "A unique identifier for an entity. If a key's partition ID or any of its path kinds or names are reserved/read-only, the key is reserved/read-only. A reserved/read-only key is forbidden in certain documented contexts.",
        "properties": {
          "partitionId": {
            "$ref": "#/$defs/PartitionId"
          },
          "path": {
            "description": "The entity path. An entity path consists of one or more elements composed of a kind and a string or numerical identifier, which identify entities. The first element identifies a _root entity_, the second element identifies a _child_ of the root entity, the third element identifies a child of the second entity, and so forth. The entities identified by all prefixes of the path are called the element's _ancestors_. An entity path is always fully complete: *all* of the entity's ancestors are required to be in the path along with the entity identifier itself. The only exception is that in some documented cases, the identifier in the last path element (for the entity) itself may be omitted. For example, the last path element of the key of `Mutation.insert` may have no identifier. A path can never be empty, and a path can have at most 100 elements.",
            "items": {
              "$ref": "#/$defs/PathElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PartitionId": {
        "description": "A partition ID identifies a grouping of entities. The grouping is always by project and namespace, however the namespace ID may be empty. A partition ID contains several dimensions: project ID and namespace ID. Partition dimensions: - May be `\"\"`. - Must be valid UTF-8 bytes. - Must have values that match regex `[A-Za-z\\d\\.\\-_]{1,100}` If the value of any dimension matches regex `__.*__`, the partition is reserved/read-only. A reserved/read-only partition ID is forbidden in certain documented contexts. Foreign partition IDs (in which the project ID does not match the context project ID ) are discouraged. Reads and writes of foreign partition IDs may fail if the project is not in an active state.",
        "properties": {
          "namespaceId": {
            "description": "If not empty, the ID of the namespace to which the entities belong.",
            "type": "string"
          },
          "projectId": {
            "description": "The ID of the project to which the entities belong.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PathElement": {
        "description": "A (kind, ID/name) pair used to construct a key path. If either name or ID is set, the element is complete. If neither is set, the element is incomplete.",
        "properties": {
          "id": {
            "description": "The auto-allocated ID of the entity. Never equal to zero. Values less than zero are discouraged and may not be supported in the future.",
            "format": "int64",
            "type": "string"
          },
          "kind": {
            "description": "The kind of the entity. A kind matching regex `__.*__` is reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.",
            "type": "string"
          },
          "name": {
            "description": "The name of the entity. A name matching regex `__.*__` is reserved/read-only. A name must not be more than 1500 bytes when UTF-8 encoded. Cannot be `\"\"`. Must be valid UTF-8 bytes. Legacy values that are not valid UTF-8 are encoded as `__bytes__` where `` is the base-64 encoding of the bytes.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Entity": {
        "description": "A Datastore data object. Must not exceed 1 MiB - 4 bytes.",
        "properties": {
          "key": {
            "$ref": "#/$defs/Key"
          },
          "properties": {
            "additionalProperties": {
              "$ref": "#/$defs/Value"
            },
            "description": "The entity's properties. The map's keys are property names. A property name matching regex `__.*__` is reserved. A reserved property name is forbidden in certain documented contexts. The map keys, represented as UTF-8, must not exceed 1,500 bytes and cannot be empty.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Value": {
        "description": "A message that can hold any of the supported value types and associated metadata.",
        "properties": {
          "arrayValue": {
            "$ref": "#/$defs/ArrayValue"
          },
          "blobValue": {
            "description": "A blob value. May have at most 1,000,000 bytes. When `exclude_from_indexes` is false, may have at most 1500 bytes. In JSON requests, must be base64-encoded.",
            "format": "byte",
            "type": "string"
          },
          "booleanValue": {
            "description": "A boolean value.",
            "type": "boolean"
          },
          "doubleValue": {
            "description": "A double value.",
            "format": "double",
            "type": "number"
          },
          "entityValue": {
            "$ref": "#/$defs/Entity"
          },
          "excludeFromIndexes": {
            "description": "If the value should be excluded from all indexes including those defined explicitly.",
            "type": "boolean"
          },
          "geoPointValue": {
            "$ref": "#/$defs/LatLng"
          },
          "integerValue": {
            "description": "An integer value.",
            "format": "int64",
            "type": "string"
          },
          "keyValue": {
            "$ref": "#/$defs/Key"
          },
          "meaning": {
            "description": "The `meaning` field should only be populated for backwards compatibility.",
            "format": "int32",
            "type": "integer"
          },
          "nullValue": {
            "description": "A null value.",
            "enum": [
              "NULL_VALUE"
            ],
            "type": "string"
          },
          "stringValue": {
            "description": "A UTF-8 encoded string value. When `exclude_from_indexes` is false (it is indexed) , may have at most 1500 bytes. Otherwise, may be set to at most 1,000,000 bytes.",
            "type": "string"
          },
          "timestampValue": {
            "description": "A timestamp value. When stored in the Datastore, precise only to microseconds; any additional precision is rounded down.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArrayValue": {
        "description": "An array value.",
        "properties": {
          "values": {
            "description": "Values in the array. The order of values in an array is preserved as long as all values have identical settings for 'exclude_from_indexes'.",
            "items": {
              "$ref": "#/$defs/Value"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "LatLng": {
        "description": "An object that represents a latitude/longitude pair. This is expressed as a pair of doubles to represent degrees latitude and degrees longitude. Unless specified otherwise, this object must conform to the WGS84 standard. Values must be within normalized ranges.",
        "properties": {
          "latitude": {
            "description": "The latitude in degrees. It must be in the range [-90.0, +90.0].",
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude in degrees. It must be in the range [-180.0, +180.0].",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://datastore.googleapis.com//v1beta3/projects/{projectId}:commit{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response for Datastore.Commit.",
        "**Key properties:**",
        {
          "$ul": [
            "**commitTime**: The transaction commit timestamp. Not set for non-transactional commits.",
            "**indexUpdates**: The number of index entries updated during the commit, or zero if none were updated.",
            "**mutationResults**: The result of performing the mutations. The i-th mutation result corresponds to the i-th mutation in the request."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
