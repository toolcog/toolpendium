{
  "name": "apigateway_projects_locations_apis_configs_create",
  "description": "Creates a new ApiConfig in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Parent resource of the API Config, of the form: `projects/*/locations/global/apis/*`"
      },
      "apiConfigId": {
        "type": "string",
        "description": "Required. Identifier to assign to the API Config. Must be unique within scope of the parent resource."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ApigatewayApiConfig"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "ApigatewayApiConfig": {
        "description": "An API Configuration is a combination of settings for both the Managed Service and Gateways serving this API Config.",
        "properties": {
          "createTime": {
            "description": "Output only. Created time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Optional. Display name.",
            "type": "string"
          },
          "gatewayServiceAccount": {
            "description": "Immutable. The Google Cloud IAM Service Account that Gateways serving this config should use to authenticate to other services. This may either be the Service Account's email (`{ACCOUNT_ID}@{PROJECT}.iam.gserviceaccount.com`) or its full resource name (`projects/{PROJECT}/accounts/{UNIQUE_ID}`). This is most often used when the service is a GCP resource such as a Cloud Run Service or an IAP-secured service.",
            "type": "string"
          },
          "grpcServices": {
            "description": "Optional. gRPC service definition files. If specified, openapi_documents must not be included.",
            "items": {
              "$ref": "#/$defs/ApigatewayApiConfigGrpcServiceDefinition"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources",
            "type": "object"
          },
          "managedServiceConfigs": {
            "description": "Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents. If multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using \"last one wins\" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.",
            "items": {
              "$ref": "#/$defs/ApigatewayApiConfigFile"
            },
            "type": "array"
          },
          "name": {
            "description": "Output only. Resource name of the API Config. Format: projects/{project}/locations/global/apis/{api}/configs/{api_config}",
            "readOnly": true,
            "type": "string"
          },
          "openapiDocuments": {
            "description": "Optional. OpenAPI specification documents. If specified, grpc_services and managed_service_configs must not be included.",
            "items": {
              "$ref": "#/$defs/ApigatewayApiConfigOpenApiDocument"
            },
            "type": "array"
          },
          "serviceConfigId": {
            "description": "Output only. The ID of the associated Service Config ( https://cloud.google.com/service-infrastructure/docs/glossary#config).",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the API Config.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "FAILED",
              "DELETING",
              "UPDATING",
              "ACTIVATING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Updated time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApigatewayApiConfigGrpcServiceDefinition": {
        "description": "A gRPC service definition.",
        "properties": {
          "fileDescriptorSet": {
            "$ref": "#/$defs/ApigatewayApiConfigFile"
          },
          "source": {
            "description": "Optional. Uncompiled proto files associated with the descriptor set, used for display purposes (server-side compilation is not supported). These should match the inputs to 'protoc' command used to generate file_descriptor_set.",
            "items": {
              "$ref": "#/$defs/ApigatewayApiConfigFile"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ApigatewayApiConfigFile": {
        "description": "A lightweight description of a file.",
        "properties": {
          "contents": {
            "description": "The bytes that constitute the file.",
            "format": "byte",
            "type": "string"
          },
          "path": {
            "description": "The file path (full or relative path). This is typically the path of the file when it is uploaded.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApigatewayApiConfigOpenApiDocument": {
        "description": "An OpenAPI Specification Document describing an API.",
        "properties": {
          "document": {
            "$ref": "#/$defs/ApigatewayApiConfigFile"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://apigateway.googleapis.com//v1/{parent}/configs{?apiConfigId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
