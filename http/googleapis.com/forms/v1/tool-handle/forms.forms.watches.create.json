{
  "name": "forms_forms_watches_create",
  "description": "Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time).",
  "parameters": {
    "type": "object",
    "properties": {
      "formId": {
        "type": "string",
        "description": "Required. ID of the Form to watch."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CreateWatchRequest"
      }
    },
    "required": [
      "formId"
    ],
    "$defs": {
      "CreateWatchRequest": {
        "description": "Create a new watch.",
        "properties": {
          "watch": {
            "$ref": "#/$defs/Watch"
          },
          "watchId": {
            "description": "The ID to use for the watch. If specified, the ID must not already be in use. If not specified, an ID is generated. This value should be 4-63 characters, and valid characters are /a-z-/.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Watch": {
        "description": "A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew",
        "properties": {
          "createTime": {
            "description": "Output only. Timestamp of when this was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "errorType": {
            "description": "Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.",
            "enum": [
              "ERROR_TYPE_UNSPECIFIED",
              "PROJECT_NOT_AUTHORIZED",
              "NO_USER_ACCESS",
              "OTHER_ERRORS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "eventType": {
            "description": "Required. Which event type to watch for.",
            "enum": [
              "EVENT_TYPE_UNSPECIFIED",
              "SCHEMA",
              "RESPONSES"
            ],
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "description": "Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "SUSPENDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "target": {
            "$ref": "#/$defs/WatchTarget"
          }
        },
        "type": "object"
      },
      "WatchTarget": {
        "description": "The target for notification delivery.",
        "properties": {
          "topic": {
            "$ref": "#/$defs/CloudPubsubTopic"
          }
        },
        "type": "object"
      },
      "CloudPubsubTopic": {
        "description": "A Pub/Sub topic.",
        "properties": {
          "topicName": {
            "description": "Required. A fully qualified Pub/Sub topic name to publish the events to. This topic must be owned by the calling project and already exist in Pub/Sub.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://forms.googleapis.com//v1/forms/{formId}/watches{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. Timestamp of when this was created.",
            "**errorType**: Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.",
            "**eventType**: Required. Which event type to watch for.",
            "**expireTime**: Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.",
            "**id**: Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.",
            "**state**: Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.",
            [
              "**target**: The target for notification delivery.",
              {
                "$ul": [
                  [
                    "**topic**: A Pub/Sub topic.",
                    {
                      "$ul": [
                        "**topicName**: Required. A fully qualified Pub/Sub topic name to publish the events to. This topic must be owned by the calling project and already exist in Pub/Sub."
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
