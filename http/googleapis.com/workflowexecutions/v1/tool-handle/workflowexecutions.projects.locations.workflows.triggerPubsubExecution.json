{
  "name": "workflowexecutions_projects_locations_workflows_triggerPubsubExecution",
  "description": "Triggers a new execution using the latest revision of the given workflow by a Pub/Sub push notification.",
  "parameters": {
    "type": "object",
    "properties": {
      "workflow": {
        "type": "string",
        "description": "Required. Name of the workflow for which an execution should be created. Format: projects/{project}/locations/{location}/workflows/{workflow}"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/TriggerPubsubExecutionRequest"
      }
    },
    "required": [
      "workflow"
    ],
    "$defs": {
      "TriggerPubsubExecutionRequest": {
        "description": "Request for the TriggerPubsubExecution method.",
        "properties": {
          "GCPCloudEventsMode": {
            "description": "Required. LINT: LEGACY_NAMES The query parameter value for __GCP_CloudEventsMode, set by the Eventarc service when configuring triggers.",
            "type": "string"
          },
          "deliveryAttempt": {
            "description": "The number of attempts that have been made to deliver this message. This is set by Pub/Sub for subscriptions that have the \"dead letter\" feature enabled, and hence provided here for compatibility, but is ignored by Workflows.",
            "format": "int32",
            "type": "integer"
          },
          "message": {
            "$ref": "#/$defs/PubsubMessage"
          },
          "subscription": {
            "description": "Required. The subscription of the Pub/Sub push notification. Format: projects/{project}/subscriptions/{sub}",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PubsubMessage": {
        "description": "A message that is published by publishers and consumed by subscribers. The message must contain either a non-empty data field or at least one attribute. Note that client libraries represent this object differently depending on the language. See the corresponding [client library documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for more information. See [quotas and limits] (https://cloud.google.com/pubsub/quotas) for more information about message limits.",
        "properties": {
          "attributes": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Attributes for this message. If this field is empty, the message must contain non-empty data. This can be used to filter messages on the subscription.",
            "type": "object"
          },
          "data": {
            "description": "Optional. The message data field. If this field is empty, the message must contain at least one attribute.",
            "format": "byte",
            "type": "string"
          },
          "messageId": {
            "description": "ID of this message, assigned by the server when the message is published. Guaranteed to be unique within the topic. This value may be read by a subscriber that receives a `PubsubMessage` via a `Pull` call or a push delivery. It must not be populated by the publisher in a `Publish` call.",
            "type": "string"
          },
          "orderingKey": {
            "description": "Optional. If non-empty, identifies related messages for which publish order should be respected. If a `Subscription` has `enable_message_ordering` set to `true`, messages published with the same non-empty `ordering_key` value will be delivered to subscribers in the order in which they are received by the Pub/Sub system. All `PubsubMessage`s published in a given `PublishRequest` must specify the same `ordering_key` value. For more information, see [ordering messages](https://cloud.google.com/pubsub/docs/ordering).",
            "type": "string"
          },
          "publishTime": {
            "description": "The time at which the message was published, populated by the server when it receives the `Publish` call. It must not be populated by the publisher in a `Publish` call.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://workflowexecutions.googleapis.com//v1/{workflow}:triggerPubsubExecution{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A running instance of a [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).",
        "**Key properties:**",
        {
          "$ul": [
            "**argument**: Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`",
            "**callLogLevel**: The call logging level associated to this execution.",
            "**createTime**: Output only. Marks the creation of the execution.",
            "**disableConcurrencyQuotaOverflowBuffering**: Optional. If set to true, the execution will not be backlogged when the concurrency quota is exhausted. The backlog execution starts when the concurrency quota becomes available.",
            "**duration**: Output only. Measures the duration of the execution.",
            "**endTime**: Output only. Marks the end of execution, successful or not.",
            [
              "**error**: Error describes why the execution was abnormally terminated.",
              {
                "$ul": [
                  "**context**: Human-readable stack trace string.",
                  "**payload**: Error message and data returned represented as a JSON string.",
                  [
                    "**stackTrace**: A collection of stack elements (frames) where an error occurred.",
                    {
                      "$ul": [
                        "**elements**: An array of stack elements."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**labels**: Labels associated with this execution. Labels can contain at most 64 entries. Keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, and dashes. Label keys must start with a letter. International characters are allowed. By default, labels are inherited from the workflow but are overridden by any labels associated with the execution.",
            "**name**: Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}",
            "**result**: Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.",
            "**startTime**: Output only. Marks the beginning of execution.",
            "**state**: Output only. Current state of the execution.",
            [
              "**stateError**: Describes an error related to the current state of the Execution resource.",
              {
                "$ul": [
                  "**details**: Provides specifics about the error.",
                  "**type**: The type of this state error."
                ]
              }
            ],
            [
              "**status**: Represents the current status of this execution.",
              {
                "$ul": [
                  "**currentSteps**: A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step."
                ]
              }
            ],
            "**workflowRevisionId**: Output only. Revision of the workflow this execution is using."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
