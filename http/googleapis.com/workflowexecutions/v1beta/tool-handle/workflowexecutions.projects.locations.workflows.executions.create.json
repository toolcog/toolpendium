{
  "name": "workflowexecutions_projects_locations_workflows_executions_create",
  "description": "Creates a new execution using the latest revision of the given workflow.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Name of the workflow for which an execution should be created. Format: projects/{project}/locations/{location}/workflows/{workflow} The latest revision of the workflow will be used."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Execution"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Execution": {
        "description": "A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).",
        "properties": {
          "argument": {
            "description": "Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`",
            "type": "string"
          },
          "callLogLevel": {
            "description": "The call logging level associated to this execution.",
            "enum": [
              "CALL_LOG_LEVEL_UNSPECIFIED",
              "LOG_ALL_CALLS",
              "LOG_ERRORS_ONLY"
            ],
            "type": "string"
          },
          "endTime": {
            "description": "Output only. Marks the end of execution, successful or not.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Error"
          },
          "name": {
            "description": "Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}",
            "readOnly": true,
            "type": "string"
          },
          "result": {
            "description": "Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.",
            "readOnly": true,
            "type": "string"
          },
          "startTime": {
            "description": "Output only. Marks the beginning of execution.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. Current state of the execution.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ACTIVE",
              "SUCCEEDED",
              "FAILED",
              "CANCELLED",
              "UNAVAILABLE",
              "QUEUED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/Status"
          },
          "workflowRevisionId": {
            "description": "Output only. Revision of the workflow this execution is using.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Error": {
        "description": "Error describes why the execution was abnormally terminated.",
        "properties": {
          "context": {
            "description": "Human-readable stack trace string.",
            "type": "string"
          },
          "payload": {
            "description": "Error message and data returned represented as a JSON string.",
            "type": "string"
          },
          "stackTrace": {
            "$ref": "#/$defs/StackTrace"
          }
        },
        "type": "object"
      },
      "StackTrace": {
        "description": "A collection of stack elements (frames) where an error occurred.",
        "properties": {
          "elements": {
            "description": "An array of stack elements.",
            "items": {
              "$ref": "#/$defs/StackTraceElement"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "StackTraceElement": {
        "description": "A single stack element (frame) where an error occurred.",
        "properties": {
          "position": {
            "$ref": "#/$defs/Position"
          },
          "routine": {
            "description": "The routine where the error occurred.",
            "type": "string"
          },
          "step": {
            "description": "The step the error occurred at.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Position": {
        "description": "Position contains source position information about the stack trace element such as line number, column number and length of the code block in bytes.",
        "properties": {
          "column": {
            "description": "The source code column position (of the line) the current instruction was generated from.",
            "format": "int64",
            "type": "string"
          },
          "length": {
            "description": "The number of bytes of source code making up this stack trace element.",
            "format": "int64",
            "type": "string"
          },
          "line": {
            "description": "The source code line number the current instruction was generated from.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "Represents the current status of this execution.",
        "properties": {
          "currentSteps": {
            "description": "A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step.",
            "items": {
              "$ref": "#/$defs/Step"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Step": {
        "description": "Represents a step of the workflow this execution is running.",
        "properties": {
          "routine": {
            "description": "Name of a routine within the workflow.",
            "type": "string"
          },
          "step": {
            "description": "Name of a step within the routine.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://workflowexecutions.googleapis.com//v1beta/{parent}/executions{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A running instance of a [Workflow](/workflows/docs/reference/rest/v1beta/projects.locations.workflows).",
        "**Key properties:**",
        {
          "$ul": [
            "**argument**: Input parameters of the execution represented as a JSON string. The size limit is 32KB. *Note*: If you are using the REST API directly to run your workflow, you must escape any JSON string value of `argument`. Example: `'{\"argument\":\"{\\\"firstName\\\":\\\"FIRST\\\",\\\"lastName\\\":\\\"LAST\\\"}\"}'`",
            "**callLogLevel**: The call logging level associated to this execution.",
            "**endTime**: Output only. Marks the end of execution, successful or not.",
            [
              "**error**: Error describes why the execution was abnormally terminated.",
              {
                "$ul": [
                  "**context**: Human-readable stack trace string.",
                  "**payload**: Error message and data returned represented as a JSON string.",
                  [
                    "**stackTrace**: A collection of stack elements (frames) where an error occurred.",
                    {
                      "$ul": [
                        "**elements**: An array of stack elements."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**name**: Output only. The resource name of the execution. Format: projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}",
            "**result**: Output only. Output of the execution represented as a JSON string. The value can only be present if the execution's state is `SUCCEEDED`.",
            "**startTime**: Output only. Marks the beginning of execution.",
            "**state**: Output only. Current state of the execution.",
            [
              "**status**: Represents the current status of this execution.",
              {
                "$ul": [
                  "**currentSteps**: A list of currently executing or last executed step names for the workflow execution currently running. If the workflow has succeeded or failed, this is the last attempted or executed step. Presently, if the current step is inside a subworkflow, the list only includes that step. In the future, the list will contain items for each step in the call stack, starting with the outermost step in the `main` subworkflow, and ending with the most deeply nested step."
                ]
              }
            ],
            "**workflowRevisionId**: Output only. Revision of the workflow this execution is using."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
