{
  "name": "accesscontextmanager_accessPolicies_accessLevels_create",
  "description": "Creates an access level. The long-running operation from this RPC has a successful status after the access level propagates to long-lasting storage. If access levels contain errors, an error response is returned for the first error encountered.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Resource name for the access policy which owns this Access Level. Format: `accessPolicies/{policy_id}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/AccessLevel"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "AccessLevel": {
        "description": "An `AccessLevel` is a label that can be applied to requests to Google Cloud services, along with a list of requirements necessary for the label to be applied.",
        "properties": {
          "basic": {
            "$ref": "#/$defs/BasicLevel"
          },
          "custom": {
            "$ref": "#/$defs/CustomLevel"
          },
          "description": {
            "description": "Description of the `AccessLevel` and its use. Does not affect behavior.",
            "type": "string"
          },
          "name": {
            "description": "Resource name for the `AccessLevel`. Format: `accessPolicies/{access_policy}/accessLevels/{access_level}`. The `access_level` component must begin with a letter, followed by alphanumeric characters or `_`. Its maximum length is 50 characters. After you create an `AccessLevel`, you cannot change its `name`.",
            "type": "string"
          },
          "title": {
            "description": "Human readable title. Must be unique within the Policy.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BasicLevel": {
        "description": "`BasicLevel` is an `AccessLevel` using a set of recommended features.",
        "properties": {
          "combiningFunction": {
            "description": "How the `conditions` list should be combined to determine if a request is granted this `AccessLevel`. If AND is used, each `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. If OR is used, at least one `Condition` in `conditions` must be satisfied for the `AccessLevel` to be applied. Default behavior is AND.",
            "enum": [
              "AND",
              "OR"
            ],
            "type": "string"
          },
          "conditions": {
            "description": "Required. A list of requirements for the `AccessLevel` to be granted.",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Condition": {
        "description": "A condition necessary for an `AccessLevel` to be granted. The Condition is an AND over its fields. So a Condition is true if: 1) the request IP is from one of the listed subnetworks AND 2) the originating device complies with the listed device policy AND 3) all listed access levels are granted AND 4) the request was sent at a time allowed by the DateTimeRestriction.",
        "properties": {
          "devicePolicy": {
            "$ref": "#/$defs/DevicePolicy"
          },
          "ipSubnetworks": {
            "description": "CIDR block IP subnetwork specification. May be IPv4 or IPv6. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. Similarly, for IPv6, \"2001:db8::/32\" is accepted whereas \"2001:db8::1/32\" is not. The originating IP of a request must be in one of the listed subnets in order for this Condition to be true. If empty, all IP addresses are allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "members": {
            "description": "The request must be made by one of the provided user or service accounts. Groups are not supported. Syntax: `user:{emailid}` `serviceAccount:{emailid}` If not specified, a request may come from any user.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "negate": {
            "description": "Whether to negate the Condition. If true, the Condition becomes a NAND over its non-empty fields. Any non-empty field criteria evaluating to false will result in the Condition to be satisfied. Defaults to false.",
            "type": "boolean"
          },
          "regions": {
            "description": "The request must originate from one of the provided countries/regions. Must be valid ISO 3166-1 alpha-2 codes.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "requiredAccessLevels": {
            "description": "A list of other access levels defined in the same `Policy`, referenced by resource name. Referencing an `AccessLevel` which does not exist is an error. All access levels listed must be granted for the Condition to be true. Example: \"`accessPolicies/MY_POLICY/accessLevels/LEVEL_NAME\"`",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "vpcNetworkSources": {
            "description": "The request must originate from one of the provided VPC networks in Google Cloud. Cannot specify this field together with `ip_subnetworks`.",
            "items": {
              "$ref": "#/$defs/VpcNetworkSource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DevicePolicy": {
        "description": "`DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.",
        "properties": {
          "allowedDeviceManagementLevels": {
            "description": "Allowed device management levels, an empty list allows all management levels.",
            "items": {
              "enum": [
                "MANAGEMENT_UNSPECIFIED",
                "NONE",
                "BASIC",
                "COMPLETE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "allowedEncryptionStatuses": {
            "description": "Allowed encryptions statuses, an empty list allows all statuses.",
            "items": {
              "enum": [
                "ENCRYPTION_UNSPECIFIED",
                "ENCRYPTION_UNSUPPORTED",
                "UNENCRYPTED",
                "ENCRYPTED"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "osConstraints": {
            "description": "Allowed OS versions, an empty list allows all types and all versions.",
            "items": {
              "$ref": "#/$defs/OsConstraint"
            },
            "type": "array"
          },
          "requireAdminApproval": {
            "description": "Whether the device needs to be approved by the customer admin.",
            "type": "boolean"
          },
          "requireCorpOwned": {
            "description": "Whether the device needs to be corp owned.",
            "type": "boolean"
          },
          "requireScreenlock": {
            "description": "Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "OsConstraint": {
        "description": "A restriction on the OS type and version of devices making requests.",
        "properties": {
          "minimumVersion": {
            "description": "The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `\"major.minor.patch\"`. Examples: `\"10.5.301\"`, `\"9.2.1\"`.",
            "type": "string"
          },
          "osType": {
            "description": "Required. The allowed OS type.",
            "enum": [
              "OS_UNSPECIFIED",
              "DESKTOP_MAC",
              "DESKTOP_WINDOWS",
              "DESKTOP_LINUX",
              "DESKTOP_CHROME_OS",
              "ANDROID",
              "IOS"
            ],
            "type": "string"
          },
          "requireVerifiedChromeOs": {
            "description": "Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "VpcNetworkSource": {
        "description": "The originating network source in Google Cloud.",
        "properties": {
          "vpcSubnetwork": {
            "$ref": "#/$defs/VpcSubNetwork"
          }
        },
        "type": "object"
      },
      "VpcSubNetwork": {
        "description": "Sub-segment ranges inside of a VPC Network.",
        "properties": {
          "network": {
            "description": "Required. Network name. If the network is not part of the organization, the `compute.network.get` permission must be granted to the caller. Format: `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NETWORK_NAME}` Example: `//compute.googleapis.com/projects/my-project/global/networks/network-1`",
            "type": "string"
          },
          "vpcIpSubnetworks": {
            "description": "CIDR block IP subnetwork specification. The IP address must be an IPv4 address and can be a public or private IP address. Note that for a CIDR IP address block, the specified IP address portion must be properly truncated (i.e. all the host bits must be zero) or the input is considered malformed. For example, \"192.0.2.0/24\" is accepted but \"192.0.2.1/24\" is not. If empty, all IP addresses are allowed.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CustomLevel": {
        "description": "`CustomLevel` is an `AccessLevel` using the Cloud Common Expression Language to represent the necessary conditions for the level to apply to a request. See CEL spec at: https://github.com/google/cel-spec",
        "properties": {
          "expr": {
            "$ref": "#/$defs/Expr"
          }
        },
        "type": "object"
      },
      "Expr": {
        "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
        "properties": {
          "description": {
            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
            "type": "string"
          },
          "expression": {
            "description": "Textual representation of an expression in Common Expression Language syntax.",
            "type": "string"
          },
          "location": {
            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
            "type": "string"
          },
          "title": {
            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://accesscontextmanager.googleapis.com//v1/{parent}/accessLevels{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
