{
  "name": "retail_projects_locations_catalogs_models_create",
  "description": "Creates a new model.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource under which to create the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}`"
      },
      "dryRun": {
        "type": "boolean",
        "description": "Optional. Whether to run a dry run to validate the request (without actually creating the model)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudRetailV2Model"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudRetailV2Model": {
        "description": "Metadata that describes the training and serving parameters of a Model. A Model can be associated with a ServingConfig and then queried through the Predict API.",
        "properties": {
          "createTime": {
            "description": "Output only. Timestamp the Recommendation Model was created at.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "dataState": {
            "description": "Output only. The state of data requirements for this model: `DATA_OK` and `DATA_ERROR`. Recommendation model cannot be trained if the data is in `DATA_ERROR` state. Recommendation model can have `DATA_ERROR` state even if serving state is `ACTIVE`: models were trained successfully before, but cannot be refreshed because model no longer has sufficient data for training.",
            "enum": [
              "DATA_STATE_UNSPECIFIED",
              "DATA_OK",
              "DATA_ERROR"
            ],
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "Required. The display name of the model. Should be human readable, used to display Recommendation Models in the Retail Cloud Console Dashboard. UTF-8 encoded string with limit of 1024 characters.",
            "type": "string"
          },
          "filteringOption": {
            "description": "Optional. If `RECOMMENDATIONS_FILTERING_ENABLED`, recommendation filtering by attributes is enabled for the model.",
            "enum": [
              "RECOMMENDATIONS_FILTERING_OPTION_UNSPECIFIED",
              "RECOMMENDATIONS_FILTERING_DISABLED",
              "RECOMMENDATIONS_FILTERING_ENABLED"
            ],
            "type": "string"
          },
          "lastTuneTime": {
            "description": "Output only. The timestamp when the latest successful tune finished.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "modelFeaturesConfig": {
            "$ref": "#/$defs/GoogleCloudRetailV2ModelModelFeaturesConfig"
          },
          "name": {
            "description": "Required. The fully qualified resource name of the model. Format: `projects/{project_number}/locations/{location_id}/catalogs/{catalog_id}/models/{model_id}` catalog_id has char limit of 50. recommendation_model_id has char limit of 40.",
            "type": "string"
          },
          "optimizationObjective": {
            "description": "Optional. The optimization objective e.g. `cvr`. Currently supported values: `ctr`, `cvr`, `revenue-per-order`. If not specified, we choose default based on model type. Default depends on type of recommendation: `recommended-for-you` => `ctr` `others-you-may-like` => `ctr` `frequently-bought-together` => `revenue_per_order` This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.",
            "type": "string"
          },
          "periodicTuningState": {
            "description": "Optional. The state of periodic tuning. The period we use is 3 months - to do a one-off tune earlier use the `TuneModel` method. Default value is `PERIODIC_TUNING_ENABLED`.",
            "enum": [
              "PERIODIC_TUNING_STATE_UNSPECIFIED",
              "PERIODIC_TUNING_DISABLED",
              "ALL_TUNING_DISABLED",
              "PERIODIC_TUNING_ENABLED"
            ],
            "type": "string"
          },
          "servingConfigLists": {
            "description": "Output only. The list of valid serving configs associated with the PageOptimizationConfig.",
            "items": {
              "$ref": "#/$defs/GoogleCloudRetailV2ModelServingConfigList"
            },
            "readOnly": true,
            "type": "array"
          },
          "servingState": {
            "description": "Output only. The serving state of the model: `ACTIVE`, `NOT_ACTIVE`.",
            "enum": [
              "SERVING_STATE_UNSPECIFIED",
              "INACTIVE",
              "ACTIVE",
              "TUNED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "trainingState": {
            "description": "Optional. The training state that the model is in (e.g. `TRAINING` or `PAUSED`). Since part of the cost of running the service is frequency of training - this can be used to determine when to train model in order to control cost. If not specified: the default value for `CreateModel` method is `TRAINING`. The default value for `UpdateModel` method is to keep the state the same as before.",
            "enum": [
              "TRAINING_STATE_UNSPECIFIED",
              "PAUSED",
              "TRAINING"
            ],
            "type": "string"
          },
          "tuningOperation": {
            "description": "Output only. The tune operation associated with the model. Can be used to determine if there is an ongoing tune for this recommendation. Empty field implies no tune is goig on.",
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Required. The type of model e.g. `home-page`. Currently supported values: `recommended-for-you`, `others-you-may-like`, `frequently-bought-together`, `page-optimization`, `similar-items`, `buy-it-again`, `on-sale-items`, and `recently-viewed`(readonly value). This field together with optimization_objective describe model metadata to use to control model training and serving. See https://cloud.google.com/retail/docs/models for more details on what the model metadata control and which combination of parameters are valid. For invalid combinations of parameters (e.g. type = `frequently-bought-together` and optimization_objective = `ctr`), you receive an error 400 if you try to create/update a recommendation with this set of knobs.",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Timestamp the Recommendation Model was last updated. E.g. if a Recommendation Model was paused - this would be the time the pause was initiated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudRetailV2ModelModelFeaturesConfig": {
        "description": "Additional model features config.",
        "properties": {
          "frequentlyBoughtTogetherConfig": {
            "$ref": "#/$defs/GoogleCloudRetailV2ModelFrequentlyBoughtTogetherFeaturesConfig"
          }
        },
        "type": "object"
      },
      "GoogleCloudRetailV2ModelFrequentlyBoughtTogetherFeaturesConfig": {
        "description": "Additional configs for the frequently-bought-together model type.",
        "properties": {
          "contextProductsType": {
            "description": "Optional. Specifies the context of the model when it is used in predict requests. Can only be set for the `frequently-bought-together` type. If it isn't specified, it defaults to MULTIPLE_CONTEXT_PRODUCTS.",
            "enum": [
              "CONTEXT_PRODUCTS_TYPE_UNSPECIFIED",
              "SINGLE_CONTEXT_PRODUCT",
              "MULTIPLE_CONTEXT_PRODUCTS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudRetailV2ModelServingConfigList": {
        "description": "Represents an ordered combination of valid serving configs, which can be used for `PAGE_OPTIMIZATION` recommendations.",
        "properties": {
          "servingConfigIds": {
            "description": "Optional. A set of valid serving configs that may be used for `PAGE_OPTIMIZATION`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://retail.googleapis.com//v2/{parent}/models{?dryRun,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
