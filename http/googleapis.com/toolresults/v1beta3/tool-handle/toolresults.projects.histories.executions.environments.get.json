{
  "name": "toolresults_projects_histories_executions_environments_get",
  "description": "Gets an Environment. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Environment does not exist",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Required. A Project id."
      },
      "historyId": {
        "type": "string",
        "description": "Required. A History id."
      },
      "executionId": {
        "type": "string",
        "description": "Required. An Execution id."
      },
      "environmentId": {
        "type": "string",
        "description": "Required. An Environment id."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "projectId",
      "historyId",
      "executionId",
      "environmentId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://toolresults.googleapis.com//toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments/{environmentId}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An Environment represents the set of test runs (Steps) from the parent Execution that are configured with the same set of dimensions (Model, Version, Locale, and Orientation). Multiple such runs occur particularly because of features like sharding (splitting up a test suite to run in parallel across devices) and reruns (running a test multiple times to check for different outcomes).",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**completionTime**: A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
              {
                "$ul": [
                  "**nanos**: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
                ]
              }
            ],
            [
              "**creationTime**: A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
              {
                "$ul": [
                  "**nanos**: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
                ]
              }
            ],
            "**dimensionValue**: Dimension values describing the environment. Dimension values always consist of \"Model\", \"Version\", \"Locale\", and \"Orientation\". - In response: always set - In create request: always set - In update request: never set",
            "**displayName**: A short human-readable name to display in the UI. Maximum of 100 characters. For example: Nexus 5, API 27.",
            "**environmentId**: Output only. An Environment id.",
            [
              "**environmentResult**: Merged test result for environment. If the environment has only one step (no reruns or shards), then the merged result is the same as the step result. If the environment has multiple shards and/or reruns, then the results of shards and reruns that belong to the same environment are merged into one environment result.",
              {
                "$ul": [
                  [
                    "**outcome**: Interprets a result so that humans and machines can act on it.",
                    {
                      "$ul": [
                        [
                          "**failureDetail**: Details for an outcome with a FAILURE outcome summary.",
                          {
                            "$ul": [
                              "**crashed**: If the failure was severe because the system (app) under test crashed.",
                              "**deviceOutOfMemory**: If the device ran out of memory during a test, causing the test to crash.",
                              "**failedRoboscript**: If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.",
                              "**notInstalled**: If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.",
                              "**otherNativeCrash**: If a native process (including any other than the app) crashed.",
                              "**timedOut**: If the test overran some time limit, and that is why it failed.",
                              "**unableToCrawl**: If the robo was unable to crawl the app; perhaps because the app did not start."
                            ]
                          }
                        ],
                        [
                          "**inconclusiveDetail**: Details for an outcome with an INCONCLUSIVE outcome summary.",
                          {
                            "$ul": [
                              "**abortedByUser**: If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.",
                              "**hasErrorLogs**: If results are being provided to the user in certain cases of infrastructure failures",
                              "**infrastructureFailure**: If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail."
                            ]
                          }
                        ],
                        [
                          "**skippedDetail**: Details for an outcome with a SKIPPED outcome summary.",
                          {
                            "$ul": [
                              "**incompatibleAppVersion**: If the App doesn't support the specific API level.",
                              "**incompatibleArchitecture**: If the App doesn't run on the specific architecture, for example, x86.",
                              "**incompatibleDevice**: If the requested OS version doesn't run on the specific device model."
                            ]
                          }
                        ],
                        [
                          "**successDetail**: Details for an outcome with a SUCCESS outcome summary. LINT.IfChange",
                          {
                            "$ul": [
                              "**otherNativeCrash**: If a native process other than the app crashed."
                            ]
                          }
                        ],
                        "**summary**: The simplest way to interpret a result. Required"
                      ]
                    }
                  ],
                  "**state**: State of the resource",
                  "**testSuiteOverviews**: The combined and rolled-up result of each test suite that was run as part of this environment. Combining: When the test cases from a suite are run in different steps (sharding), the results are added back together in one overview. (e.g., if shard1 has 2 failures and shard2 has 1 failure than the overview failure_count = 3). Rollup: When test cases from the same suite are run multiple times (flaky), the results are combined (e.g., if testcase1.run1 fails, testcase1.run2 passes, and both testcase2.run1 and testcase2.run2 fail then the overview flaky_count = 1 and failure_count = 1)."
                ]
              }
            ],
            "**executionId**: Output only. An Execution id.",
            "**historyId**: Output only. A History id.",
            "**projectId**: Output only. A Project id.",
            [
              "**resultsStorage**: The storage for test results.",
              {
                "$ul": [
                  [
                    "**resultsStoragePath**: A reference to a file.",
                    {
                      "$ul": [
                        "**fileUri**: The URI of a file stored in Google Cloud Storage. For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000 An INVALID_ARGUMENT error will be returned if the URI format is not supported. - In response: always set - In create/update request: always set"
                      ]
                    }
                  ],
                  [
                    "**xunitXmlFile**: A reference to a file.",
                    {
                      "$ul": [
                        "**fileUri**: The URI of a file stored in Google Cloud Storage. For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000 An INVALID_ARGUMENT error will be returned if the URI format is not supported. - In response: always set - In create/update request: always set"
                      ]
                    }
                  ]
                ]
              }
            ],
            "**shardSummaries**: Output only. Summaries of shards. Only one shard will present unless sharding feature is enabled in TestExecutionService."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
