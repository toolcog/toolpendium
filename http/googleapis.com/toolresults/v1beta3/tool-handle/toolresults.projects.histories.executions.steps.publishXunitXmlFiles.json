{
  "name": "toolresults_projects_histories_executions_steps_publishXunitXmlFiles",
  "description": "Publish xml files to an existing Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal, e.g. try to upload a duplicate xml file or a file too large. - NOT_FOUND - if the containing Execution does not exist",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "A Project id. Required."
      },
      "historyId": {
        "type": "string",
        "description": "A History id. Required."
      },
      "executionId": {
        "type": "string",
        "description": "A Execution id. Required."
      },
      "stepId": {
        "type": "string",
        "description": "A Step id. Note: This step must include a TestExecutionStep. Required."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/PublishXunitXmlFilesRequest"
      }
    },
    "required": [
      "projectId",
      "historyId",
      "executionId",
      "stepId"
    ],
    "$defs": {
      "PublishXunitXmlFilesRequest": {
        "description": "Request message for StepService.PublishXunitXmlFiles.",
        "properties": {
          "xunitXmlFiles": {
            "description": "URI of the Xunit XML files to publish. The maximum size of the file this reference is pointing to is 50MB. Required.",
            "items": {
              "$ref": "#/$defs/FileReference"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "FileReference": {
        "description": "A reference to a file.",
        "properties": {
          "fileUri": {
            "description": "The URI of a file stored in Google Cloud Storage. For example: http://storage.googleapis.com/mybucket/path/to/test.xml or in gsutil format: gs://mybucket/path/to/test.xml with version-specific info, gs://mybucket/path/to/test.xml#1360383693690000 An INVALID_ARGUMENT error will be returned if the URI format is not supported. - In response: always set - In create/update request: always set",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://toolresults.googleapis.com//toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Step represents a single operation performed as part of Execution. A step can be used to represent the execution of a tool ( for example a test runner execution or an execution of a compiler). Steps can overlap (for instance two steps might have the same start time if some operations are done in parallel). Here is an example, let's consider that we have a continuous build is executing a test runner for each iteration. The workflow would look like: - user creates a Execution with id 1 - user creates a TestExecutionStep with id 100 for Execution 1 - user update TestExecutionStep with id 100 to add a raw xml log + the service parses the xml logs and returns a TestExecutionStep with updated TestResult(s). - user update the status of TestExecutionStep with id 100 to COMPLETE A Step can be updated until its state is set to COMPLETE at which points it becomes immutable.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**completionTime**: A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
              {
                "$ul": [
                  "**nanos**: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
                ]
              }
            ],
            [
              "**creationTime**: A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
              {
                "$ul": [
                  "**nanos**: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
                ]
              }
            ],
            "**description**: A description of this tool For example: mvn clean package -D skipTests=true - In response: present if set by create/update request - In create/update request: optional",
            [
              "**deviceUsageDuration**:  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.",
              {
                "$ul": [
                  "**nanos**: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                  "**seconds**: Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                ]
              }
            ],
            "**dimensionValue**: If the execution containing this step has any dimension_definition set, then this field allows the child to specify the values of the dimensions. The keys must exactly match the dimension_definition of the execution. For example, if the execution has `dimension_definition = ['attempt', 'device']` then a step must define values for those dimensions, eg. `dimension_value = ['attempt': '1', 'device': 'Nexus 6']` If a step does not participate in one dimension of the matrix, the value for that dimension should be empty string. For example, if one of the tests is executed by a runner which does not support retries, the step could have `dimension_value = ['attempt': '', 'device': 'Nexus 6']` If the step does not participate in any dimensions of the matrix, it may leave dimension_value unset. A PRECONDITION_FAILED will be returned if any of the keys do not exist in the dimension_definition of the execution. A PRECONDITION_FAILED will be returned if another step in this execution already has the same name and dimension_value, but differs on other data fields, for example, step field is different. A PRECONDITION_FAILED will be returned if dimension_value is set, and there is a dimension_definition in the execution which is not specified as one of the keys. - In response: present if set by create - In create request: optional - In update request: never set",
            "**hasImages**: Whether any of the outputs of this step are images whose thumbnails can be fetched with ListThumbnails. - In response: always set - In create/update request: never set",
            "**labels**: Arbitrary user-supplied key/value pairs that are associated with the step. Users are responsible for managing the key namespace such that keys don't accidentally collide. An INVALID_ARGUMENT will be returned if the number of labels exceeds 100 or if the length of any of the keys or values exceeds 100 characters. - In response: always set - In create request: optional - In update request: optional; any new key/value pair will be added to the map, and any new value for an existing key will update that key's value",
            [
              "**multiStep**: Details when multiple steps are run with the same configuration as a group.",
              {
                "$ul": [
                  "**multistepNumber**: Unique int given to each step. Ranges from 0(inclusive) to total number of steps(exclusive). The primary step is 0.",
                  [
                    "**primaryStep**: Stores rollup test status of multiple steps that were run as a group and outcome of each individual step.",
                    {
                      "$ul": [
                        "**individualOutcome**: Step Id and outcome of each individual step.",
                        "**rollUp**: Rollup test status of multiple steps that were run with the same configuration as a group."
                      ]
                    }
                  ],
                  "**primaryStepId**: Step Id of the primary (original) step, which might be this step."
                ]
              }
            ],
            "**name**: A short human-readable name to display in the UI. Maximum of 100 characters. For example: Clean build A PRECONDITION_FAILED will be returned upon creating a new step if it shares its name and dimension_value with an existing step. If two steps represent a similar action, but have different dimension values, they should share the same name. For instance, if the same set of tests is run on two different platforms, the two steps should have the same name. - In response: always set - In create request: always set - In update request: never set",
            [
              "**outcome**: Interprets a result so that humans and machines can act on it.",
              {
                "$ul": [
                  [
                    "**failureDetail**: Details for an outcome with a FAILURE outcome summary.",
                    {
                      "$ul": [
                        "**crashed**: If the failure was severe because the system (app) under test crashed.",
                        "**deviceOutOfMemory**: If the device ran out of memory during a test, causing the test to crash.",
                        "**failedRoboscript**: If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.",
                        "**notInstalled**: If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.",
                        "**otherNativeCrash**: If a native process (including any other than the app) crashed.",
                        "**timedOut**: If the test overran some time limit, and that is why it failed.",
                        "**unableToCrawl**: If the robo was unable to crawl the app; perhaps because the app did not start."
                      ]
                    }
                  ],
                  [
                    "**inconclusiveDetail**: Details for an outcome with an INCONCLUSIVE outcome summary.",
                    {
                      "$ul": [
                        "**abortedByUser**: If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.",
                        "**hasErrorLogs**: If results are being provided to the user in certain cases of infrastructure failures",
                        "**infrastructureFailure**: If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail."
                      ]
                    }
                  ],
                  [
                    "**skippedDetail**: Details for an outcome with a SKIPPED outcome summary.",
                    {
                      "$ul": [
                        "**incompatibleAppVersion**: If the App doesn't support the specific API level.",
                        "**incompatibleArchitecture**: If the App doesn't run on the specific architecture, for example, x86.",
                        "**incompatibleDevice**: If the requested OS version doesn't run on the specific device model."
                      ]
                    }
                  ],
                  [
                    "**successDetail**: Details for an outcome with a SUCCESS outcome summary. LINT.IfChange",
                    {
                      "$ul": [
                        "**otherNativeCrash**: If a native process other than the app crashed."
                      ]
                    }
                  ],
                  "**summary**: The simplest way to interpret a result. Required"
                ]
              }
            ],
            [
              "**runDuration**:  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.",
              {
                "$ul": [
                  "**nanos**: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                  "**seconds**: Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                ]
              }
            ],
            "**state**: The initial state is IN_PROGRESS. The only legal state transitions are * IN_PROGRESS -> COMPLETE A PRECONDITION_FAILED will be returned if an invalid transition is requested. It is valid to create Step with a state set to COMPLETE. The state can only be set to COMPLETE once. A PRECONDITION_FAILED will be returned if the state is set to COMPLETE multiple times. - In response: always set - In create/update request: optional",
            "**stepId**: A unique identifier within a Execution for this Step. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response: always set - In create/update request: never set",
            [
              "**testExecutionStep**: A step that represents running tests. It accepts ant-junit xml files which will be parsed into structured test results by the service. Xml file paths are updated in order to append more files, however they can't be deleted. Users can also add test results manually by using the test_result field.",
              {
                "$ul": [
                  "**testIssues**: Issues observed during the test execution. For example, if the mobile app under test crashed during the test, the error message and the stack trace content can be recorded here to assist debugging. - In response: present if set by create or update - In create/update request: optional",
                  "**testSuiteOverviews**: List of test suite overview contents. This could be parsed from xUnit XML log by server, or uploaded directly by user. This references should only be called when test suites are fully parsed or uploaded. The maximum allowed number of test suite overviews per step is 1000. - In response: always set - In create request: optional - In update request: never (use publishXunitXmlFiles custom method instead)",
                  [
                    "**testTiming**: Testing timing break down to know phases.",
                    {
                      "$ul": [
                        [
                          "**testProcessDuration**:  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.",
                          {
                            "$ul": [
                              "**nanos**: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                              "**seconds**: Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**toolExecution**: An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.",
                    {
                      "$ul": [
                        "**commandLineArguments**: The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set",
                        [
                          "**exitCode**: Exit code from a tool execution.",
                          {
                            "$ul": [
                              "**number**: Tool execution exit code. A value of 0 means that the execution was successful. - In response: always set - In create/update request: always set"
                            ]
                          }
                        ],
                        "**toolLogs**: References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list",
                        "**toolOutputs**: References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list"
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**toolExecutionStep**: Generic tool step to be used for binaries we do not explicitly support. For example: running cp to copy artifacts from one location to another.",
              {
                "$ul": [
                  [
                    "**toolExecution**: An execution of an arbitrary tool. It could be a test runner or a tool copying artifacts or deploying code.",
                    {
                      "$ul": [
                        "**commandLineArguments**: The full tokenized command line including the program name (equivalent to argv in a C program). - In response: present if set by create request - In create request: optional - In update request: never set",
                        [
                          "**exitCode**: Exit code from a tool execution.",
                          {
                            "$ul": [
                              "**number**: Tool execution exit code. A value of 0 means that the execution was successful. - In response: always set - In create/update request: always set"
                            ]
                          }
                        ],
                        "**toolLogs**: References to any plain text logs output the tool execution. This field can be set before the tool has exited in order to be able to have access to a live view of the logs while the tool is running. The maximum allowed number of tool logs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list",
                        "**toolOutputs**: References to opaque files of any format output by the tool execution. The maximum allowed number of tool outputs per step is 1000. - In response: present if set by create/update request - In create request: optional - In update request: optional, any value provided will be appended to the existing list"
                      ]
                    }
                  ]
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
