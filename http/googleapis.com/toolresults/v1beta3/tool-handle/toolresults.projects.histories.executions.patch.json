{
  "name": "toolresults_projects_histories_executions_patch",
  "description": "Updates an existing Execution with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal - NOT_FOUND - if the containing History does not exist",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "A Project id. Required."
      },
      "historyId": {
        "type": "string",
        "description": "Required."
      },
      "executionId": {
        "type": "string",
        "description": "Required."
      },
      "requestId": {
        "type": "string",
        "description": "A unique request ID for server to detect duplicated requests. For example, a UUID. Optional, but strongly recommended."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Execution"
      }
    },
    "required": [
      "projectId",
      "historyId",
      "executionId"
    ],
    "$defs": {
      "Execution": {
        "description": "An Execution represents a collection of Steps. For instance, it could represent: - a mobile test executed across a range of device configurations - a jenkins job with a build step followed by a test step The maximum size of an execution message is 1 MiB. An Execution can be updated until its state is set to COMPLETE at which point it becomes immutable.",
        "properties": {
          "completionTime": {
            "$ref": "#/$defs/Timestamp"
          },
          "creationTime": {
            "$ref": "#/$defs/Timestamp"
          },
          "dimensionDefinitions": {
            "description": "The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set",
            "items": {
              "$ref": "#/$defs/MatrixDimensionDefinition"
            },
            "type": "array"
          },
          "executionId": {
            "description": "A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set",
            "type": "string"
          },
          "outcome": {
            "$ref": "#/$defs/Outcome"
          },
          "specification": {
            "$ref": "#/$defs/Specification"
          },
          "state": {
            "description": "The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional",
            "enum": [
              "unknownState",
              "pending",
              "inProgress",
              "complete"
            ],
            "type": "string"
          },
          "testExecutionMatrixId": {
            "description": "TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Timestamp": {
        "description": "A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
        "properties": {
          "nanos": {
            "description": "Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "description": "Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MatrixDimensionDefinition": {
        "description": "One dimension of the matrix of different runs of a step.",
        "properties": {},
        "type": "object"
      },
      "Outcome": {
        "description": "Interprets a result so that humans and machines can act on it.",
        "properties": {
          "failureDetail": {
            "$ref": "#/$defs/FailureDetail"
          },
          "inconclusiveDetail": {
            "$ref": "#/$defs/InconclusiveDetail"
          },
          "skippedDetail": {
            "$ref": "#/$defs/SkippedDetail"
          },
          "successDetail": {
            "$ref": "#/$defs/SuccessDetail"
          },
          "summary": {
            "description": "The simplest way to interpret a result. Required",
            "enum": [
              "unset",
              "success",
              "failure",
              "inconclusive",
              "skipped",
              "flaky"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FailureDetail": {
        "description": "Details for an outcome with a FAILURE outcome summary.",
        "properties": {
          "crashed": {
            "description": "If the failure was severe because the system (app) under test crashed.",
            "type": "boolean"
          },
          "deviceOutOfMemory": {
            "description": "If the device ran out of memory during a test, causing the test to crash.",
            "type": "boolean"
          },
          "failedRoboscript": {
            "description": "If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.",
            "type": "boolean"
          },
          "notInstalled": {
            "description": "If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.",
            "type": "boolean"
          },
          "otherNativeCrash": {
            "description": "If a native process (including any other than the app) crashed.",
            "type": "boolean"
          },
          "timedOut": {
            "description": "If the test overran some time limit, and that is why it failed.",
            "type": "boolean"
          },
          "unableToCrawl": {
            "description": "If the robo was unable to crawl the app; perhaps because the app did not start.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InconclusiveDetail": {
        "description": "Details for an outcome with an INCONCLUSIVE outcome summary.",
        "properties": {
          "abortedByUser": {
            "description": "If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.",
            "type": "boolean"
          },
          "hasErrorLogs": {
            "description": "If results are being provided to the user in certain cases of infrastructure failures",
            "type": "boolean"
          },
          "infrastructureFailure": {
            "description": "If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SkippedDetail": {
        "description": "Details for an outcome with a SKIPPED outcome summary.",
        "properties": {
          "incompatibleAppVersion": {
            "description": "If the App doesn't support the specific API level.",
            "type": "boolean"
          },
          "incompatibleArchitecture": {
            "description": "If the App doesn't run on the specific architecture, for example, x86.",
            "type": "boolean"
          },
          "incompatibleDevice": {
            "description": "If the requested OS version doesn't run on the specific device model.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SuccessDetail": {
        "description": "Details for an outcome with a SUCCESS outcome summary. LINT.IfChange",
        "properties": {
          "otherNativeCrash": {
            "description": "If a native process other than the app crashed.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Specification": {
        "description": "The details about how to run the execution.",
        "properties": {
          "androidTest": {
            "$ref": "#/$defs/AndroidTest"
          },
          "iosTest": {
            "$ref": "#/$defs/IosTest"
          }
        },
        "type": "object"
      },
      "AndroidTest": {
        "description": "An Android mobile test specification.",
        "properties": {
          "androidAppInfo": {
            "$ref": "#/$defs/AndroidAppInfo"
          },
          "androidInstrumentationTest": {
            "$ref": "#/$defs/AndroidInstrumentationTest"
          },
          "androidRoboTest": {
            "$ref": "#/$defs/AndroidRoboTest"
          },
          "androidTestLoop": {
            "$ref": "#/$defs/AndroidTestLoop"
          },
          "testTimeout": {
            "$ref": "#/$defs/Duration"
          }
        },
        "type": "object"
      },
      "AndroidAppInfo": {
        "description": "Android app information.",
        "properties": {
          "name": {
            "description": "The name of the app. Optional",
            "type": "string"
          },
          "packageName": {
            "description": "The package name of the app. Required.",
            "type": "string"
          },
          "versionCode": {
            "description": "The internal version code of the app. Optional.",
            "type": "string"
          },
          "versionName": {
            "description": "The version name of the app. Optional.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AndroidInstrumentationTest": {
        "description": "A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.",
        "properties": {
          "testPackageId": {
            "description": "The java package for the test to be executed. Required",
            "type": "string"
          },
          "testRunnerClass": {
            "description": "The InstrumentationTestRunner class. Required",
            "type": "string"
          },
          "testTargets": {
            "description": "Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "useOrchestrator": {
            "description": "The flag indicates whether Android Test Orchestrator will be used to run test or not.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AndroidRoboTest": {
        "description": "A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes.",
        "properties": {
          "appInitialActivity": {
            "description": "The initial activity that should be used to start the app. Optional",
            "type": "string"
          },
          "bootstrapPackageId": {
            "description": "The java package for the bootstrap. Optional",
            "type": "string"
          },
          "bootstrapRunnerClass": {
            "description": "The runner class for the bootstrap. Optional",
            "type": "string"
          },
          "maxDepth": {
            "description": "The max depth of the traversal stack Robo can explore. Optional",
            "format": "int32",
            "type": "integer"
          },
          "maxSteps": {
            "description": "The max number of steps/actions Robo can execute. Default is no limit (0). Optional",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AndroidTestLoop": {
        "description": "Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent.",
        "properties": {},
        "type": "object"
      },
      "Duration": {
        "description": " A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.",
        "properties": {
          "nanos": {
            "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
            "format": "int32",
            "type": "integer"
          },
          "seconds": {
            "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IosTest": {
        "description": "A iOS mobile test specification",
        "properties": {
          "iosAppInfo": {
            "$ref": "#/$defs/IosAppInfo"
          },
          "iosRoboTest": {
            "$ref": "#/$defs/IosRoboTest"
          },
          "iosTestLoop": {
            "$ref": "#/$defs/IosTestLoop"
          },
          "iosXcTest": {
            "$ref": "#/$defs/IosXcTest"
          },
          "testTimeout": {
            "$ref": "#/$defs/Duration"
          }
        },
        "type": "object"
      },
      "IosAppInfo": {
        "description": "iOS app information",
        "properties": {
          "name": {
            "description": "The name of the app. Required",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IosRoboTest": {
        "description": "A Robo test for an iOS application.",
        "properties": {},
        "type": "object"
      },
      "IosTestLoop": {
        "description": "A game loop test of an iOS application.",
        "properties": {
          "bundleId": {
            "description": "Bundle ID of the app.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IosXcTest": {
        "description": "A test of an iOS application that uses the XCTest framework.",
        "properties": {
          "bundleId": {
            "description": "Bundle ID of the app.",
            "type": "string"
          },
          "xcodeVersion": {
            "description": "Xcode version that the test was run with.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://toolresults.googleapis.com//toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}{?requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An Execution represents a collection of Steps. For instance, it could represent: - a mobile test executed across a range of device configurations - a jenkins job with a build step followed by a test step The maximum size of an execution message is 1 MiB. An Execution can be updated until its state is set to COMPLETE at which point it becomes immutable.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**completionTime**: A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
              {
                "$ul": [
                  "**nanos**: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
                ]
              }
            ],
            [
              "**creationTime**: A Timestamp represents a point in time independent of any time zone or local calendar, encoded as a count of seconds and fractions of seconds at nanosecond resolution. The count is relative to an epoch at UTC midnight on January 1, 1970, in the proleptic Gregorian calendar which extends the Gregorian calendar backwards to year one. All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap second table is needed for interpretation, using a [24-hour linear smear](https://developers.google.com/time/smear). The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By restricting to that range, we ensure that we can convert to and from [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.",
              {
                "$ul": [
                  "**nanos**: Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive.",
                  "**seconds**: Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
                ]
              }
            ],
            "**dimensionDefinitions**: The dimensions along which different steps in this execution may vary. This must remain fixed over the life of the execution. Returns INVALID_ARGUMENT if this field is set in an update request. Returns INVALID_ARGUMENT if the same name occurs in more than one dimension_definition. Returns INVALID_ARGUMENT if the size of the list is over 100. - In response: present if set by create - In create request: optional - In update request: never set",
            "**executionId**: A unique identifier within a History for this Execution. Returns INVALID_ARGUMENT if this field is set or overwritten by the caller. - In response always set - In create/update request: never set",
            [
              "**outcome**: Interprets a result so that humans and machines can act on it.",
              {
                "$ul": [
                  [
                    "**failureDetail**: Details for an outcome with a FAILURE outcome summary.",
                    {
                      "$ul": [
                        "**crashed**: If the failure was severe because the system (app) under test crashed.",
                        "**deviceOutOfMemory**: If the device ran out of memory during a test, causing the test to crash.",
                        "**failedRoboscript**: If the Roboscript failed to complete successfully, e.g., because a Roboscript action or assertion failed or a Roboscript action could not be matched during the entire crawl.",
                        "**notInstalled**: If an app is not installed and thus no test can be run with the app. This might be caused by trying to run a test on an unsupported platform.",
                        "**otherNativeCrash**: If a native process (including any other than the app) crashed.",
                        "**timedOut**: If the test overran some time limit, and that is why it failed.",
                        "**unableToCrawl**: If the robo was unable to crawl the app; perhaps because the app did not start."
                      ]
                    }
                  ],
                  [
                    "**inconclusiveDetail**: Details for an outcome with an INCONCLUSIVE outcome summary.",
                    {
                      "$ul": [
                        "**abortedByUser**: If the end user aborted the test execution before a pass or fail could be determined. For example, the user pressed ctrl-c which sent a kill signal to the test runner while the test was running.",
                        "**hasErrorLogs**: If results are being provided to the user in certain cases of infrastructure failures",
                        "**infrastructureFailure**: If the test runner could not determine success or failure because the test depends on a component other than the system under test which failed. For example, a mobile test requires provisioning a device where the test executes, and that provisioning can fail."
                      ]
                    }
                  ],
                  [
                    "**skippedDetail**: Details for an outcome with a SKIPPED outcome summary.",
                    {
                      "$ul": [
                        "**incompatibleAppVersion**: If the App doesn't support the specific API level.",
                        "**incompatibleArchitecture**: If the App doesn't run on the specific architecture, for example, x86.",
                        "**incompatibleDevice**: If the requested OS version doesn't run on the specific device model."
                      ]
                    }
                  ],
                  [
                    "**successDetail**: Details for an outcome with a SUCCESS outcome summary. LINT.IfChange",
                    {
                      "$ul": [
                        "**otherNativeCrash**: If a native process other than the app crashed."
                      ]
                    }
                  ],
                  "**summary**: The simplest way to interpret a result. Required"
                ]
              }
            ],
            [
              "**specification**: The details about how to run the execution.",
              {
                "$ul": [
                  [
                    "**androidTest**: An Android mobile test specification.",
                    {
                      "$ul": [
                        [
                          "**androidAppInfo**: Android app information.",
                          {
                            "$ul": [
                              "**name**: The name of the app. Optional",
                              "**packageName**: The package name of the app. Required.",
                              "**versionCode**: The internal version code of the app. Optional.",
                              "**versionName**: The version name of the app. Optional."
                            ]
                          }
                        ],
                        [
                          "**androidInstrumentationTest**: A test of an Android application that can control an Android component independently of its normal lifecycle. See for more information on types of Android tests.",
                          {
                            "$ul": [
                              "**testPackageId**: The java package for the test to be executed. Required",
                              "**testRunnerClass**: The InstrumentationTestRunner class. Required",
                              "**testTargets**: Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.",
                              "**useOrchestrator**: The flag indicates whether Android Test Orchestrator will be used to run test or not."
                            ]
                          }
                        ],
                        [
                          "**androidRoboTest**: A test of an android application that explores the application on a virtual or physical Android device, finding culprits and crashes as it goes.",
                          {
                            "$ul": [
                              "**appInitialActivity**: The initial activity that should be used to start the app. Optional",
                              "**bootstrapPackageId**: The java package for the bootstrap. Optional",
                              "**bootstrapRunnerClass**: The runner class for the bootstrap. Optional",
                              "**maxDepth**: The max depth of the traversal stack Robo can explore. Optional",
                              "**maxSteps**: The max number of steps/actions Robo can execute. Default is no limit (0). Optional"
                            ]
                          }
                        ],
                        "**androidTestLoop**: Test Loops are tests that can be launched by the app itself, determining when to run by listening for an intent.",
                        [
                          "**testTimeout**:  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.",
                          {
                            "$ul": [
                              "**nanos**: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                              "**seconds**: Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**iosTest**: A iOS mobile test specification",
                    {
                      "$ul": [
                        [
                          "**iosAppInfo**: iOS app information",
                          {
                            "$ul": [
                              "**name**: The name of the app. Required"
                            ]
                          }
                        ],
                        "**iosRoboTest**: A Robo test for an iOS application.",
                        [
                          "**iosTestLoop**: A game loop test of an iOS application.",
                          {
                            "$ul": [
                              "**bundleId**: Bundle ID of the app."
                            ]
                          }
                        ],
                        [
                          "**iosXcTest**: A test of an iOS application that uses the XCTest framework.",
                          {
                            "$ul": [
                              "**bundleId**: Bundle ID of the app.",
                              "**xcodeVersion**: Xcode version that the test was run with."
                            ]
                          }
                        ],
                        [
                          "**testTimeout**:  A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years.",
                          {
                            "$ul": [
                              "**nanos**: Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
                              "**seconds**: Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                            ]
                          }
                        ]
                      ]
                    }
                  ]
                ]
              }
            ],
            "**state**: The initial state is IN_PROGRESS. The only legal state transitions is from IN_PROGRESS to COMPLETE. A PRECONDITION_FAILED will be returned if an invalid transition is requested. The state can only be set to COMPLETE once. A FAILED_PRECONDITION will be returned if the state is set to COMPLETE multiple times. If the state is set to COMPLETE, all the in-progress steps within the execution will be set as COMPLETE. If the outcome of the step is not set, the outcome will be set to INCONCLUSIVE. - In response always set - In create/update request: optional",
            "**testExecutionMatrixId**: TestExecution Matrix ID that the TestExecutionService uses. - In response: present if set by create - In create: optional - In update: never set"
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
