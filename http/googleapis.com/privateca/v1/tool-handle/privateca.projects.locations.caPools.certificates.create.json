{
  "name": "privateca_projects_locations_caPools_certificates_create",
  "description": "Create a new Certificate in a given Project, Location from a particular CaPool.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the CaPool associated with the Certificate, in the format `projects/*/locations/*/caPools/*`."
      },
      "certificateId": {
        "type": "string",
        "description": "Optional. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`. This field is required when using a CertificateAuthority in the Enterprise CertificateAuthority.Tier, but is optional and its value is ignored otherwise."
      },
      "issuingCertificateAuthorityId": {
        "type": "string",
        "description": "Optional. The resource ID of the CertificateAuthority that should issue the certificate. This optional field will ignore the load-balancing scheme of the Pool and directly issue the certificate from the CA with the specified ID, contained in the same CaPool referenced by `parent`. Per-CA quota rules apply. If left empty, a CertificateAuthority will be chosen from the CaPool by the service. For example, to issue a Certificate from a Certificate Authority with resource name \"projects/my-project/locations/us-central1/caPools/my-pool/certificateAuthorities/my-ca\", you can set the parent to \"projects/my-project/locations/us-central1/caPools/my-pool\" and the issuing_certificate_authority_id to \"my-ca\"."
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "validateOnly": {
        "type": "boolean",
        "description": "Optional. If this is true, no Certificate resource will be persisted regardless of the CaPool's tier, and the returned Certificate will not contain the pem_certificate field."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Certificate"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Certificate": {
        "description": "A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.",
        "properties": {
          "certificateDescription": {
            "$ref": "#/$defs/CertificateDescription"
          },
          "certificateTemplate": {
            "description": "Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.",
            "type": "string"
          },
          "config": {
            "$ref": "#/$defs/CertificateConfig"
          },
          "createTime": {
            "description": "Output only. The time at which this Certificate was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "issuerCertificateAuthority": {
            "description": "Output only. The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels with user-defined metadata.",
            "type": "object"
          },
          "lifetime": {
            "description": "Required. Immutable. The desired lifetime of a certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.",
            "format": "google-duration",
            "type": "string"
          },
          "name": {
            "description": "Output only. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.",
            "readOnly": true,
            "type": "string"
          },
          "pemCertificate": {
            "description": "Output only. The pem-encoded, signed X.509 certificate.",
            "readOnly": true,
            "type": "string"
          },
          "pemCertificateChain": {
            "description": "Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "pemCsr": {
            "description": "Immutable. A pem-encoded X.509 certificate signing request (CSR).",
            "type": "string"
          },
          "revocationDetails": {
            "$ref": "#/$defs/RevocationDetails"
          },
          "subjectMode": {
            "description": "Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.",
            "enum": [
              "SUBJECT_REQUEST_MODE_UNSPECIFIED",
              "DEFAULT",
              "REFLECTED_SPIFFE"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which this Certificate was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateDescription": {
        "description": "A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.",
        "properties": {
          "aiaIssuingCertificateUrls": {
            "description": "Describes lists of issuer CA certificate URLs that appear in the \"Authority Information Access\" extension in the certificate.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "authorityKeyId": {
            "$ref": "#/$defs/KeyId"
          },
          "certFingerprint": {
            "$ref": "#/$defs/CertificateFingerprint"
          },
          "crlDistributionPoints": {
            "description": "Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "publicKey": {
            "$ref": "#/$defs/PublicKey"
          },
          "subjectDescription": {
            "$ref": "#/$defs/SubjectDescription"
          },
          "subjectKeyId": {
            "$ref": "#/$defs/KeyId"
          },
          "x509Description": {
            "$ref": "#/$defs/X509Parameters"
          }
        },
        "type": "object"
      },
      "KeyId": {
        "description": "A KeyId identifies a specific public key, usually by hashing the public key.",
        "properties": {
          "keyId": {
            "description": "Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateFingerprint": {
        "description": "A group of fingerprints for the x509 certificate.",
        "properties": {
          "sha256Hash": {
            "description": "The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicKey": {
        "description": "A PublicKey describes a public key.",
        "properties": {
          "format": {
            "description": "Required. The format of the public key.",
            "enum": [
              "KEY_FORMAT_UNSPECIFIED",
              "PEM"
            ],
            "type": "string"
          },
          "key": {
            "description": "Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubjectDescription": {
        "description": "These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.",
        "properties": {
          "hexSerialNumber": {
            "description": "The serial number encoded in lowercase hexadecimal.",
            "type": "string"
          },
          "lifetime": {
            "description": "For convenience, the actual lifetime of an issued certificate.",
            "format": "google-duration",
            "type": "string"
          },
          "notAfterTime": {
            "description": "The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.",
            "format": "google-datetime",
            "type": "string"
          },
          "notBeforeTime": {
            "description": "The time at which the certificate becomes valid.",
            "format": "google-datetime",
            "type": "string"
          },
          "subject": {
            "$ref": "#/$defs/Subject"
          },
          "subjectAltName": {
            "$ref": "#/$defs/SubjectAltNames"
          }
        },
        "type": "object"
      },
      "Subject": {
        "description": "Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.",
        "properties": {
          "commonName": {
            "description": "The \"common name\" of the subject.",
            "type": "string"
          },
          "countryCode": {
            "description": "The country code of the subject.",
            "type": "string"
          },
          "locality": {
            "description": "The locality or city of the subject.",
            "type": "string"
          },
          "organization": {
            "description": "The organization of the subject.",
            "type": "string"
          },
          "organizationalUnit": {
            "description": "The organizational_unit of the subject.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the subject.",
            "type": "string"
          },
          "province": {
            "description": "The province, territory, or regional state of the subject.",
            "type": "string"
          },
          "streetAddress": {
            "description": "The street address of the subject.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubjectAltNames": {
        "description": "SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \"common name\" in the distinguished name).",
        "properties": {
          "customSans": {
            "description": "Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.",
            "items": {
              "$ref": "#/$defs/X509Extension"
            },
            "type": "array"
          },
          "dnsNames": {
            "description": "Contains only valid, fully-qualified host names.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "emailAddresses": {
            "description": "Contains only valid RFC 2822 E-mail addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipAddresses": {
            "description": "Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uris": {
            "description": "Contains only valid RFC 3986 URIs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "X509Extension": {
        "description": "An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.",
        "properties": {
          "critical": {
            "description": "Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).",
            "type": "boolean"
          },
          "objectId": {
            "$ref": "#/$defs/ObjectId"
          },
          "value": {
            "description": "Required. The value of this X.509 extension.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectId": {
        "description": "An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.",
        "properties": {
          "objectIdPath": {
            "description": "Required. The parts of an OID path. The most significant parts of the path come first.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "X509Parameters": {
        "description": "An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.",
        "properties": {
          "additionalExtensions": {
            "description": "Optional. Describes custom X.509 extensions.",
            "items": {
              "$ref": "#/$defs/X509Extension"
            },
            "type": "array"
          },
          "aiaOcspServers": {
            "description": "Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "caOptions": {
            "$ref": "#/$defs/CaOptions"
          },
          "keyUsage": {
            "$ref": "#/$defs/KeyUsage"
          },
          "nameConstraints": {
            "$ref": "#/$defs/NameConstraints"
          },
          "policyIds": {
            "description": "Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CaOptions": {
        "description": "Describes values that are relevant in a CA certificate.",
        "properties": {
          "isCa": {
            "description": "Optional. Refers to the \"CA\" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.",
            "type": "boolean"
          },
          "maxIssuerPathLength": {
            "description": "Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "KeyUsage": {
        "description": "A KeyUsage describes key usage values that may appear in an X.509 certificate.",
        "properties": {
          "baseKeyUsage": {
            "$ref": "#/$defs/KeyUsageOptions"
          },
          "extendedKeyUsage": {
            "$ref": "#/$defs/ExtendedKeyUsageOptions"
          },
          "unknownExtendedKeyUsages": {
            "description": "Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KeyUsageOptions": {
        "description": "KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.",
        "properties": {
          "certSign": {
            "description": "The key may be used to sign certificates.",
            "type": "boolean"
          },
          "contentCommitment": {
            "description": "The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".",
            "type": "boolean"
          },
          "crlSign": {
            "description": "The key may be used sign certificate revocation lists.",
            "type": "boolean"
          },
          "dataEncipherment": {
            "description": "The key may be used to encipher data.",
            "type": "boolean"
          },
          "decipherOnly": {
            "description": "The key may be used to decipher only.",
            "type": "boolean"
          },
          "digitalSignature": {
            "description": "The key may be used for digital signatures.",
            "type": "boolean"
          },
          "encipherOnly": {
            "description": "The key may be used to encipher only.",
            "type": "boolean"
          },
          "keyAgreement": {
            "description": "The key may be used in a key agreement protocol.",
            "type": "boolean"
          },
          "keyEncipherment": {
            "description": "The key may be used to encipher other keys.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ExtendedKeyUsageOptions": {
        "description": "KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.",
        "properties": {
          "clientAuth": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \"TLS WWW client authentication\", though regularly used for non-WWW TLS.",
            "type": "boolean"
          },
          "codeSigning": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \"Signing of downloadable executable code client authentication\".",
            "type": "boolean"
          },
          "emailProtection": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \"Email protection\".",
            "type": "boolean"
          },
          "ocspSigning": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \"Signing OCSP responses\".",
            "type": "boolean"
          },
          "serverAuth": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \"TLS WWW server authentication\", though regularly used for non-WWW TLS.",
            "type": "boolean"
          },
          "timeStamping": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \"Binding the hash of an object to a time\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NameConstraints": {
        "description": "Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10",
        "properties": {
          "critical": {
            "description": "Indicates whether or not the name constraints are marked critical.",
            "type": "boolean"
          },
          "excludedDnsNames": {
            "description": "Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedEmailAddresses": {
            "description": "Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedIpRanges": {
            "description": "Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedUris": {
            "description": "Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedDnsNames": {
            "description": "Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedEmailAddresses": {
            "description": "Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedIpRanges": {
            "description": "Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedUris": {
            "description": "Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateConfig": {
        "description": "A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.",
        "properties": {
          "publicKey": {
            "$ref": "#/$defs/PublicKey"
          },
          "subjectConfig": {
            "$ref": "#/$defs/SubjectConfig"
          },
          "subjectKeyId": {
            "$ref": "#/$defs/CertificateConfigKeyId"
          },
          "x509Config": {
            "$ref": "#/$defs/X509Parameters"
          }
        },
        "type": "object"
      },
      "SubjectConfig": {
        "description": "These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.",
        "properties": {
          "subject": {
            "$ref": "#/$defs/Subject"
          },
          "subjectAltName": {
            "$ref": "#/$defs/SubjectAltNames"
          }
        },
        "type": "object"
      },
      "CertificateConfigKeyId": {
        "description": "A KeyId identifies a specific public key, usually by hashing the public key.",
        "properties": {
          "keyId": {
            "description": "Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RevocationDetails": {
        "description": "Describes fields that are relavent to the revocation of a Certificate.",
        "properties": {
          "revocationState": {
            "description": "Indicates why a Certificate was revoked.",
            "enum": [
              "REVOCATION_REASON_UNSPECIFIED",
              "KEY_COMPROMISE",
              "CERTIFICATE_AUTHORITY_COMPROMISE",
              "AFFILIATION_CHANGED",
              "SUPERSEDED",
              "CESSATION_OF_OPERATION",
              "CERTIFICATE_HOLD",
              "PRIVILEGE_WITHDRAWN",
              "ATTRIBUTE_AUTHORITY_COMPROMISE"
            ],
            "type": "string"
          },
          "revocationTime": {
            "description": "The time at which this Certificate was revoked.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://privateca.googleapis.com//v1/{parent}/certificates{?certificateId,issuingCertificateAuthorityId,requestId,validateOnly,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**certificateDescription**: A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.",
              {
                "$ul": [
                  "**aiaIssuingCertificateUrls**: Describes lists of issuer CA certificate URLs that appear in the \"Authority Information Access\" extension in the certificate.",
                  [
                    "**authorityKeyId**: A KeyId identifies a specific public key, usually by hashing the public key.",
                    {
                      "$ul": [
                        "**keyId**: Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key."
                      ]
                    }
                  ],
                  [
                    "**certFingerprint**: A group of fingerprints for the x509 certificate.",
                    {
                      "$ul": [
                        "**sha256Hash**: The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate."
                      ]
                    }
                  ],
                  "**crlDistributionPoints**: Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13",
                  [
                    "**publicKey**: A PublicKey describes a public key.",
                    {
                      "$ul": [
                        "**format**: Required. The format of the public key.",
                        "**key**: Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field."
                      ]
                    }
                  ],
                  [
                    "**subjectDescription**: These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.",
                    {
                      "$ul": [
                        "**hexSerialNumber**: The serial number encoded in lowercase hexadecimal.",
                        "**lifetime**: For convenience, the actual lifetime of an issued certificate.",
                        "**notAfterTime**: The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.",
                        "**notBeforeTime**: The time at which the certificate becomes valid.",
                        [
                          "**subject**: Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.",
                          {
                            "$ul": [
                              "**commonName**: The \"common name\" of the subject.",
                              "**countryCode**: The country code of the subject.",
                              "**locality**: The locality or city of the subject.",
                              "**organization**: The organization of the subject.",
                              "**organizationalUnit**: The organizational_unit of the subject.",
                              "**postalCode**: The postal code of the subject.",
                              "**province**: The province, territory, or regional state of the subject.",
                              "**streetAddress**: The street address of the subject."
                            ]
                          }
                        ],
                        [
                          "**subjectAltName**: SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \"common name\" in the distinguished name).",
                          {
                            "$ul": [
                              "**customSans**: Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.",
                              "**dnsNames**: Contains only valid, fully-qualified host names.",
                              "**emailAddresses**: Contains only valid RFC 2822 E-mail addresses.",
                              "**ipAddresses**: Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.",
                              "**uris**: Contains only valid RFC 3986 URIs."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**subjectKeyId**: A KeyId identifies a specific public key, usually by hashing the public key.",
                    {
                      "$ul": [
                        "**keyId**: Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key."
                      ]
                    }
                  ],
                  [
                    "**x509Description**: An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.",
                    {
                      "$ul": [
                        "**additionalExtensions**: Optional. Describes custom X.509 extensions.",
                        "**aiaOcspServers**: Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.",
                        [
                          "**caOptions**: Describes values that are relevant in a CA certificate.",
                          {
                            "$ul": [
                              "**isCa**: Optional. Refers to the \"CA\" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.",
                              "**maxIssuerPathLength**: Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate."
                            ]
                          }
                        ],
                        [
                          "**keyUsage**: A KeyUsage describes key usage values that may appear in an X.509 certificate.",
                          {
                            "$ul": [
                              [
                                "**baseKeyUsage**: KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.",
                                {
                                  "$ul": [
                                    "**certSign**: The key may be used to sign certificates.",
                                    "**contentCommitment**: The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".",
                                    "**crlSign**: The key may be used sign certificate revocation lists.",
                                    "**dataEncipherment**: The key may be used to encipher data.",
                                    "**decipherOnly**: The key may be used to decipher only.",
                                    "**digitalSignature**: The key may be used for digital signatures.",
                                    "**encipherOnly**: The key may be used to encipher only.",
                                    "**keyAgreement**: The key may be used in a key agreement protocol.",
                                    "**keyEncipherment**: The key may be used to encipher other keys."
                                  ]
                                }
                              ],
                              [
                                "**extendedKeyUsage**: KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.",
                                {
                                  "$ul": [
                                    "**clientAuth**: Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \"TLS WWW client authentication\", though regularly used for non-WWW TLS.",
                                    "**codeSigning**: Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \"Signing of downloadable executable code client authentication\".",
                                    "**emailProtection**: Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \"Email protection\".",
                                    "**ocspSigning**: Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \"Signing OCSP responses\".",
                                    "**serverAuth**: Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \"TLS WWW server authentication\", though regularly used for non-WWW TLS.",
                                    "**timeStamping**: Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \"Binding the hash of an object to a time\"."
                                  ]
                                }
                              ],
                              "**unknownExtendedKeyUsages**: Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message."
                            ]
                          }
                        ],
                        [
                          "**nameConstraints**: Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10",
                          {
                            "$ul": [
                              "**critical**: Indicates whether or not the name constraints are marked critical.",
                              "**excludedDnsNames**: Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
                              "**excludedEmailAddresses**: Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
                              "**excludedIpRanges**: Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
                              "**excludedUris**: Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
                              "**permittedDnsNames**: Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
                              "**permittedEmailAddresses**: Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
                              "**permittedIpRanges**: Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
                              "**permittedUris**: Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)"
                            ]
                          }
                        ],
                        "**policyIds**: Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**certificateTemplate**: Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.",
            [
              "**config**: A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.",
              {
                "$ul": [
                  [
                    "**publicKey**: A PublicKey describes a public key.",
                    {
                      "$ul": [
                        "**format**: Required. The format of the public key.",
                        "**key**: Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field."
                      ]
                    }
                  ],
                  [
                    "**subjectConfig**: These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.",
                    {
                      "$ul": [
                        [
                          "**subject**: Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.",
                          {
                            "$ul": [
                              "**commonName**: The \"common name\" of the subject.",
                              "**countryCode**: The country code of the subject.",
                              "**locality**: The locality or city of the subject.",
                              "**organization**: The organization of the subject.",
                              "**organizationalUnit**: The organizational_unit of the subject.",
                              "**postalCode**: The postal code of the subject.",
                              "**province**: The province, territory, or regional state of the subject.",
                              "**streetAddress**: The street address of the subject."
                            ]
                          }
                        ],
                        [
                          "**subjectAltName**: SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \"common name\" in the distinguished name).",
                          {
                            "$ul": [
                              "**customSans**: Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.",
                              "**dnsNames**: Contains only valid, fully-qualified host names.",
                              "**emailAddresses**: Contains only valid RFC 2822 E-mail addresses.",
                              "**ipAddresses**: Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.",
                              "**uris**: Contains only valid RFC 3986 URIs."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**subjectKeyId**: A KeyId identifies a specific public key, usually by hashing the public key.",
                    {
                      "$ul": [
                        "**keyId**: Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key."
                      ]
                    }
                  ],
                  [
                    "**x509Config**: An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.",
                    {
                      "$ul": [
                        "**additionalExtensions**: Optional. Describes custom X.509 extensions.",
                        "**aiaOcspServers**: Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.",
                        [
                          "**caOptions**: Describes values that are relevant in a CA certificate.",
                          {
                            "$ul": [
                              "**isCa**: Optional. Refers to the \"CA\" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.",
                              "**maxIssuerPathLength**: Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate."
                            ]
                          }
                        ],
                        [
                          "**keyUsage**: A KeyUsage describes key usage values that may appear in an X.509 certificate.",
                          {
                            "$ul": [
                              [
                                "**baseKeyUsage**: KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.",
                                {
                                  "$ul": [
                                    "**certSign**: The key may be used to sign certificates.",
                                    "**contentCommitment**: The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".",
                                    "**crlSign**: The key may be used sign certificate revocation lists.",
                                    "**dataEncipherment**: The key may be used to encipher data.",
                                    "**decipherOnly**: The key may be used to decipher only.",
                                    "**digitalSignature**: The key may be used for digital signatures.",
                                    "**encipherOnly**: The key may be used to encipher only.",
                                    "**keyAgreement**: The key may be used in a key agreement protocol.",
                                    "**keyEncipherment**: The key may be used to encipher other keys."
                                  ]
                                }
                              ],
                              [
                                "**extendedKeyUsage**: KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.",
                                {
                                  "$ul": [
                                    "**clientAuth**: Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \"TLS WWW client authentication\", though regularly used for non-WWW TLS.",
                                    "**codeSigning**: Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \"Signing of downloadable executable code client authentication\".",
                                    "**emailProtection**: Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \"Email protection\".",
                                    "**ocspSigning**: Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \"Signing OCSP responses\".",
                                    "**serverAuth**: Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \"TLS WWW server authentication\", though regularly used for non-WWW TLS.",
                                    "**timeStamping**: Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \"Binding the hash of an object to a time\"."
                                  ]
                                }
                              ],
                              "**unknownExtendedKeyUsages**: Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message."
                            ]
                          }
                        ],
                        [
                          "**nameConstraints**: Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10",
                          {
                            "$ul": [
                              "**critical**: Indicates whether or not the name constraints are marked critical.",
                              "**excludedDnsNames**: Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
                              "**excludedEmailAddresses**: Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
                              "**excludedIpRanges**: Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
                              "**excludedUris**: Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
                              "**permittedDnsNames**: Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
                              "**permittedEmailAddresses**: Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
                              "**permittedIpRanges**: Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
                              "**permittedUris**: Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)"
                            ]
                          }
                        ],
                        "**policyIds**: Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**createTime**: Output only. The time at which this Certificate was created.",
            "**issuerCertificateAuthority**: Output only. The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.",
            "**labels**: Optional. Labels with user-defined metadata.",
            "**lifetime**: Required. Immutable. The desired lifetime of a certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.",
            "**name**: Output only. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.",
            "**pemCertificate**: Output only. The pem-encoded, signed X.509 certificate.",
            "**pemCertificateChain**: Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.",
            "**pemCsr**: Immutable. A pem-encoded X.509 certificate signing request (CSR).",
            [
              "**revocationDetails**: Describes fields that are relavent to the revocation of a Certificate.",
              {
                "$ul": [
                  "**revocationState**: Indicates why a Certificate was revoked.",
                  "**revocationTime**: The time at which this Certificate was revoked."
                ]
              }
            ],
            "**subjectMode**: Immutable. Specifies how the Certificate's identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.",
            "**updateTime**: Output only. The time at which this Certificate was updated."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
