{
  "name": "privateca_projects_locations_caPools_create",
  "description": "Create a CaPool.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the location associated with the CaPool, in the format `projects/*/locations/*`."
      },
      "caPoolId": {
        "type": "string",
        "description": "Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`"
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CaPool"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CaPool": {
        "description": "A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor.",
        "properties": {
          "issuancePolicy": {
            "$ref": "#/$defs/IssuancePolicy"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels with user-defined metadata.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.",
            "readOnly": true,
            "type": "string"
          },
          "publishingOptions": {
            "$ref": "#/$defs/PublishingOptions"
          },
          "tier": {
            "description": "Required. Immutable. The Tier of this CaPool.",
            "enum": [
              "TIER_UNSPECIFIED",
              "ENTERPRISE",
              "DEVOPS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "IssuancePolicy": {
        "description": "Defines controls over all certificate issuance within a CaPool.",
        "properties": {
          "allowedIssuanceModes": {
            "$ref": "#/$defs/IssuanceModes"
          },
          "allowedKeyTypes": {
            "description": "Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.",
            "items": {
              "$ref": "#/$defs/AllowedKeyType"
            },
            "type": "array"
          },
          "baselineValues": {
            "$ref": "#/$defs/X509Parameters"
          },
          "identityConstraints": {
            "$ref": "#/$defs/CertificateIdentityConstraints"
          },
          "maximumLifetime": {
            "description": "Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.",
            "format": "google-duration",
            "type": "string"
          },
          "passthroughExtensions": {
            "$ref": "#/$defs/CertificateExtensionConstraints"
          }
        },
        "type": "object"
      },
      "IssuanceModes": {
        "description": "IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.",
        "properties": {
          "allowConfigBasedIssuance": {
            "description": "Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.",
            "type": "boolean"
          },
          "allowCsrBasedIssuance": {
            "description": "Optional. When true, allows callers to create Certificates by specifying a CSR.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AllowedKeyType": {
        "description": "Describes a \"type\" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.",
        "properties": {
          "ellipticCurve": {
            "$ref": "#/$defs/EcKeyType"
          },
          "rsa": {
            "$ref": "#/$defs/RsaKeyType"
          }
        },
        "type": "object"
      },
      "EcKeyType": {
        "description": "Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.",
        "properties": {
          "signatureAlgorithm": {
            "description": "Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.",
            "enum": [
              "EC_SIGNATURE_ALGORITHM_UNSPECIFIED",
              "ECDSA_P256",
              "ECDSA_P384",
              "EDDSA_25519"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "RsaKeyType": {
        "description": "Describes an RSA key that may be used in a Certificate issued from a CaPool.",
        "properties": {
          "maxModulusSize": {
            "description": "Optional. The maximum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.",
            "format": "int64",
            "type": "string"
          },
          "minModulusSize": {
            "description": "Optional. The minimum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "X509Parameters": {
        "description": "An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.",
        "properties": {
          "additionalExtensions": {
            "description": "Optional. Describes custom X.509 extensions.",
            "items": {
              "$ref": "#/$defs/X509Extension"
            },
            "type": "array"
          },
          "aiaOcspServers": {
            "description": "Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "caOptions": {
            "$ref": "#/$defs/CaOptions"
          },
          "keyUsage": {
            "$ref": "#/$defs/KeyUsage"
          },
          "nameConstraints": {
            "$ref": "#/$defs/NameConstraints"
          },
          "policyIds": {
            "description": "Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "X509Extension": {
        "description": "An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.",
        "properties": {
          "critical": {
            "description": "Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).",
            "type": "boolean"
          },
          "objectId": {
            "$ref": "#/$defs/ObjectId"
          },
          "value": {
            "description": "Required. The value of this X.509 extension.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectId": {
        "description": "An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.",
        "properties": {
          "objectIdPath": {
            "description": "Required. The parts of an OID path. The most significant parts of the path come first.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CaOptions": {
        "description": "Describes values that are relevant in a CA certificate.",
        "properties": {
          "isCa": {
            "description": "Optional. Refers to the \"CA\" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.",
            "type": "boolean"
          },
          "maxIssuerPathLength": {
            "description": "Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "KeyUsage": {
        "description": "A KeyUsage describes key usage values that may appear in an X.509 certificate.",
        "properties": {
          "baseKeyUsage": {
            "$ref": "#/$defs/KeyUsageOptions"
          },
          "extendedKeyUsage": {
            "$ref": "#/$defs/ExtendedKeyUsageOptions"
          },
          "unknownExtendedKeyUsages": {
            "description": "Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KeyUsageOptions": {
        "description": "KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.",
        "properties": {
          "certSign": {
            "description": "The key may be used to sign certificates.",
            "type": "boolean"
          },
          "contentCommitment": {
            "description": "The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".",
            "type": "boolean"
          },
          "crlSign": {
            "description": "The key may be used sign certificate revocation lists.",
            "type": "boolean"
          },
          "dataEncipherment": {
            "description": "The key may be used to encipher data.",
            "type": "boolean"
          },
          "decipherOnly": {
            "description": "The key may be used to decipher only.",
            "type": "boolean"
          },
          "digitalSignature": {
            "description": "The key may be used for digital signatures.",
            "type": "boolean"
          },
          "encipherOnly": {
            "description": "The key may be used to encipher only.",
            "type": "boolean"
          },
          "keyAgreement": {
            "description": "The key may be used in a key agreement protocol.",
            "type": "boolean"
          },
          "keyEncipherment": {
            "description": "The key may be used to encipher other keys.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ExtendedKeyUsageOptions": {
        "description": "KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.",
        "properties": {
          "clientAuth": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \"TLS WWW client authentication\", though regularly used for non-WWW TLS.",
            "type": "boolean"
          },
          "codeSigning": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \"Signing of downloadable executable code client authentication\".",
            "type": "boolean"
          },
          "emailProtection": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \"Email protection\".",
            "type": "boolean"
          },
          "ocspSigning": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \"Signing OCSP responses\".",
            "type": "boolean"
          },
          "serverAuth": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \"TLS WWW server authentication\", though regularly used for non-WWW TLS.",
            "type": "boolean"
          },
          "timeStamping": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \"Binding the hash of an object to a time\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NameConstraints": {
        "description": "Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10",
        "properties": {
          "critical": {
            "description": "Indicates whether or not the name constraints are marked critical.",
            "type": "boolean"
          },
          "excludedDnsNames": {
            "description": "Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedEmailAddresses": {
            "description": "Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedIpRanges": {
            "description": "Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedUris": {
            "description": "Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedDnsNames": {
            "description": "Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedEmailAddresses": {
            "description": "Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedIpRanges": {
            "description": "Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedUris": {
            "description": "Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateIdentityConstraints": {
        "description": "Describes constraints on a Certificate's Subject and SubjectAltNames.",
        "properties": {
          "allowSubjectAltNamesPassthrough": {
            "description": "Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.",
            "type": "boolean"
          },
          "allowSubjectPassthrough": {
            "description": "Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.",
            "type": "boolean"
          },
          "celExpression": {
            "$ref": "#/$defs/Expr"
          }
        },
        "type": "object"
      },
      "Expr": {
        "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
        "properties": {
          "description": {
            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
            "type": "string"
          },
          "expression": {
            "description": "Textual representation of an expression in Common Expression Language syntax.",
            "type": "string"
          },
          "location": {
            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
            "type": "string"
          },
          "title": {
            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateExtensionConstraints": {
        "description": "Describes a set of X.509 extensions that may be part of some certificate issuance controls.",
        "properties": {
          "additionalExtensions": {
            "description": "Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          },
          "knownExtensions": {
            "description": "Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.",
            "items": {
              "enum": [
                "KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED",
                "BASE_KEY_USAGE",
                "EXTENDED_KEY_USAGE",
                "CA_OPTIONS",
                "POLICY_IDS",
                "AIA_OCSP_SERVERS",
                "NAME_CONSTRAINTS"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PublishingOptions": {
        "description": "Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.",
        "properties": {
          "encodingFormat": {
            "description": "Optional. Specifies the encoding format of each CertificateAuthority's CA certificate and CRLs. If this is omitted, CA certificates and CRLs will be published in PEM.",
            "enum": [
              "ENCODING_FORMAT_UNSPECIFIED",
              "PEM",
              "DER"
            ],
            "type": "string"
          },
          "publishCaCert": {
            "description": "Optional. When true, publishes each CertificateAuthority's CA certificate and includes its URL in the \"Authority Information Access\" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.",
            "type": "boolean"
          },
          "publishCrl": {
            "description": "Optional. When true, publishes each CertificateAuthority's CRL and includes its URL in the \"CRL Distribution Points\" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.",
            "type": "boolean"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://privateca.googleapis.com//v1/{parent}/caPools{?caPoolId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
