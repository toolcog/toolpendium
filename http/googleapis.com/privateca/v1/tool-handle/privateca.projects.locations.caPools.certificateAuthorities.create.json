{
  "name": "privateca_projects_locations_caPools_certificateAuthorities_create",
  "description": "Create a new CertificateAuthority in a given Project and Location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the CaPool associated with the CertificateAuthorities, in the format `projects/*/locations/*/caPools/*`."
      },
      "certificateAuthorityId": {
        "type": "string",
        "description": "Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`"
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CertificateAuthority"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CertificateAuthority": {
        "description": "A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.",
        "properties": {
          "accessUrls": {
            "$ref": "#/$defs/AccessUrls"
          },
          "caCertificateDescriptions": {
            "description": "Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.",
            "items": {
              "$ref": "#/$defs/CertificateDescription"
            },
            "readOnly": true,
            "type": "array"
          },
          "config": {
            "$ref": "#/$defs/CertificateConfig"
          },
          "createTime": {
            "description": "Output only. The time at which this CertificateAuthority was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "deleteTime": {
            "description": "Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "gcsBucket": {
            "description": "Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.",
            "type": "string"
          },
          "keySpec": {
            "$ref": "#/$defs/KeyVersionSpec"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Labels with user-defined metadata.",
            "type": "object"
          },
          "lifetime": {
            "description": "Required. Immutable. The desired lifetime of the CA certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate.",
            "format": "google-duration",
            "type": "string"
          },
          "name": {
            "description": "Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.",
            "readOnly": true,
            "type": "string"
          },
          "pemCaCertificates": {
            "description": "Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "state": {
            "description": "Output only. The State for this CertificateAuthority.",
            "enum": [
              "STATE_UNSPECIFIED",
              "ENABLED",
              "DISABLED",
              "STAGED",
              "AWAITING_USER_ACTIVATION",
              "DELETED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "subordinateConfig": {
            "$ref": "#/$defs/SubordinateConfig"
          },
          "tier": {
            "description": "Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.",
            "enum": [
              "TIER_UNSPECIFIED",
              "ENTERPRISE",
              "DEVOPS"
            ],
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "description": "Required. Immutable. The Type of this CertificateAuthority.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "SELF_SIGNED",
              "SUBORDINATE"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The time at which this CertificateAuthority was last updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessUrls": {
        "description": "URLs where a CertificateAuthority will publish content.",
        "properties": {
          "caCertificateAccessUrl": {
            "description": "The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.",
            "type": "string"
          },
          "crlAccessUrls": {
            "description": "The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateDescription": {
        "description": "A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.",
        "properties": {
          "aiaIssuingCertificateUrls": {
            "description": "Describes lists of issuer CA certificate URLs that appear in the \"Authority Information Access\" extension in the certificate.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "authorityKeyId": {
            "$ref": "#/$defs/KeyId"
          },
          "certFingerprint": {
            "$ref": "#/$defs/CertificateFingerprint"
          },
          "crlDistributionPoints": {
            "description": "Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "publicKey": {
            "$ref": "#/$defs/PublicKey"
          },
          "subjectDescription": {
            "$ref": "#/$defs/SubjectDescription"
          },
          "subjectKeyId": {
            "$ref": "#/$defs/KeyId"
          },
          "x509Description": {
            "$ref": "#/$defs/X509Parameters"
          }
        },
        "type": "object"
      },
      "KeyId": {
        "description": "A KeyId identifies a specific public key, usually by hashing the public key.",
        "properties": {
          "keyId": {
            "description": "Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateFingerprint": {
        "description": "A group of fingerprints for the x509 certificate.",
        "properties": {
          "sha256Hash": {
            "description": "The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PublicKey": {
        "description": "A PublicKey describes a public key.",
        "properties": {
          "format": {
            "description": "Required. The format of the public key.",
            "enum": [
              "KEY_FORMAT_UNSPECIFIED",
              "PEM"
            ],
            "type": "string"
          },
          "key": {
            "description": "Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubjectDescription": {
        "description": "These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.",
        "properties": {
          "hexSerialNumber": {
            "description": "The serial number encoded in lowercase hexadecimal.",
            "type": "string"
          },
          "lifetime": {
            "description": "For convenience, the actual lifetime of an issued certificate.",
            "format": "google-duration",
            "type": "string"
          },
          "notAfterTime": {
            "description": "The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.",
            "format": "google-datetime",
            "type": "string"
          },
          "notBeforeTime": {
            "description": "The time at which the certificate becomes valid.",
            "format": "google-datetime",
            "type": "string"
          },
          "subject": {
            "$ref": "#/$defs/Subject"
          },
          "subjectAltName": {
            "$ref": "#/$defs/SubjectAltNames"
          }
        },
        "type": "object"
      },
      "Subject": {
        "description": "Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.",
        "properties": {
          "commonName": {
            "description": "The \"common name\" of the subject.",
            "type": "string"
          },
          "countryCode": {
            "description": "The country code of the subject.",
            "type": "string"
          },
          "locality": {
            "description": "The locality or city of the subject.",
            "type": "string"
          },
          "organization": {
            "description": "The organization of the subject.",
            "type": "string"
          },
          "organizationalUnit": {
            "description": "The organizational_unit of the subject.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the subject.",
            "type": "string"
          },
          "province": {
            "description": "The province, territory, or regional state of the subject.",
            "type": "string"
          },
          "streetAddress": {
            "description": "The street address of the subject.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubjectAltNames": {
        "description": "SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \"common name\" in the distinguished name).",
        "properties": {
          "customSans": {
            "description": "Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.",
            "items": {
              "$ref": "#/$defs/X509Extension"
            },
            "type": "array"
          },
          "dnsNames": {
            "description": "Contains only valid, fully-qualified host names.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "emailAddresses": {
            "description": "Contains only valid RFC 2822 E-mail addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ipAddresses": {
            "description": "Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "uris": {
            "description": "Contains only valid RFC 3986 URIs.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "X509Extension": {
        "description": "An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.",
        "properties": {
          "critical": {
            "description": "Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).",
            "type": "boolean"
          },
          "objectId": {
            "$ref": "#/$defs/ObjectId"
          },
          "value": {
            "description": "Required. The value of this X.509 extension.",
            "format": "byte",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ObjectId": {
        "description": "An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.",
        "properties": {
          "objectIdPath": {
            "description": "Required. The parts of an OID path. The most significant parts of the path come first.",
            "items": {
              "format": "int32",
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "X509Parameters": {
        "description": "An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.",
        "properties": {
          "additionalExtensions": {
            "description": "Optional. Describes custom X.509 extensions.",
            "items": {
              "$ref": "#/$defs/X509Extension"
            },
            "type": "array"
          },
          "aiaOcspServers": {
            "description": "Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the \"Authority Information Access\" extension in the certificate.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "caOptions": {
            "$ref": "#/$defs/CaOptions"
          },
          "keyUsage": {
            "$ref": "#/$defs/KeyUsage"
          },
          "nameConstraints": {
            "$ref": "#/$defs/NameConstraints"
          },
          "policyIds": {
            "description": "Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CaOptions": {
        "description": "Describes values that are relevant in a CA certificate.",
        "properties": {
          "isCa": {
            "description": "Optional. Refers to the \"CA\" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.",
            "type": "boolean"
          },
          "maxIssuerPathLength": {
            "description": "Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "KeyUsage": {
        "description": "A KeyUsage describes key usage values that may appear in an X.509 certificate.",
        "properties": {
          "baseKeyUsage": {
            "$ref": "#/$defs/KeyUsageOptions"
          },
          "extendedKeyUsage": {
            "$ref": "#/$defs/ExtendedKeyUsageOptions"
          },
          "unknownExtendedKeyUsages": {
            "description": "Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.",
            "items": {
              "$ref": "#/$defs/ObjectId"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "KeyUsageOptions": {
        "description": "KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.",
        "properties": {
          "certSign": {
            "description": "The key may be used to sign certificates.",
            "type": "boolean"
          },
          "contentCommitment": {
            "description": "The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".",
            "type": "boolean"
          },
          "crlSign": {
            "description": "The key may be used sign certificate revocation lists.",
            "type": "boolean"
          },
          "dataEncipherment": {
            "description": "The key may be used to encipher data.",
            "type": "boolean"
          },
          "decipherOnly": {
            "description": "The key may be used to decipher only.",
            "type": "boolean"
          },
          "digitalSignature": {
            "description": "The key may be used for digital signatures.",
            "type": "boolean"
          },
          "encipherOnly": {
            "description": "The key may be used to encipher only.",
            "type": "boolean"
          },
          "keyAgreement": {
            "description": "The key may be used in a key agreement protocol.",
            "type": "boolean"
          },
          "keyEncipherment": {
            "description": "The key may be used to encipher other keys.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ExtendedKeyUsageOptions": {
        "description": "KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.",
        "properties": {
          "clientAuth": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as \"TLS WWW client authentication\", though regularly used for non-WWW TLS.",
            "type": "boolean"
          },
          "codeSigning": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as \"Signing of downloadable executable code client authentication\".",
            "type": "boolean"
          },
          "emailProtection": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as \"Email protection\".",
            "type": "boolean"
          },
          "ocspSigning": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as \"Signing OCSP responses\".",
            "type": "boolean"
          },
          "serverAuth": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as \"TLS WWW server authentication\", though regularly used for non-WWW TLS.",
            "type": "boolean"
          },
          "timeStamping": {
            "description": "Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as \"Binding the hash of an object to a time\".",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "NameConstraints": {
        "description": "Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10",
        "properties": {
          "critical": {
            "description": "Indicates whether or not the name constraints are marked critical.",
            "type": "boolean"
          },
          "excludedDnsNames": {
            "description": "Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedEmailAddresses": {
            "description": "Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedIpRanges": {
            "description": "Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "excludedUris": {
            "description": "Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedDnsNames": {
            "description": "Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedEmailAddresses": {
            "description": "Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedIpRanges": {
            "description": "Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "permittedUris": {
            "description": "Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "CertificateConfig": {
        "description": "A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.",
        "properties": {
          "publicKey": {
            "$ref": "#/$defs/PublicKey"
          },
          "subjectConfig": {
            "$ref": "#/$defs/SubjectConfig"
          },
          "subjectKeyId": {
            "$ref": "#/$defs/CertificateConfigKeyId"
          },
          "x509Config": {
            "$ref": "#/$defs/X509Parameters"
          }
        },
        "type": "object"
      },
      "SubjectConfig": {
        "description": "These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.",
        "properties": {
          "subject": {
            "$ref": "#/$defs/Subject"
          },
          "subjectAltName": {
            "$ref": "#/$defs/SubjectAltNames"
          }
        },
        "type": "object"
      },
      "CertificateConfigKeyId": {
        "description": "A KeyId identifies a specific public key, usually by hashing the public key.",
        "properties": {
          "keyId": {
            "description": "Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeyVersionSpec": {
        "description": "A Cloud KMS key configuration that a CertificateAuthority will use.",
        "properties": {
          "algorithm": {
            "description": "The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.",
            "enum": [
              "SIGN_HASH_ALGORITHM_UNSPECIFIED",
              "RSA_PSS_2048_SHA256",
              "RSA_PSS_3072_SHA256",
              "RSA_PSS_4096_SHA256",
              "RSA_PKCS1_2048_SHA256",
              "RSA_PKCS1_3072_SHA256",
              "RSA_PKCS1_4096_SHA256",
              "EC_P256_SHA256",
              "EC_P384_SHA384"
            ],
            "type": "string"
          },
          "cloudKmsKeyVersion": {
            "description": "The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SubordinateConfig": {
        "description": "Describes a subordinate CA's issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.",
        "properties": {
          "certificateAuthority": {
            "description": "Required. This can refer to a CertificateAuthority that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.",
            "type": "string"
          },
          "pemIssuerChain": {
            "$ref": "#/$defs/SubordinateConfigChain"
          }
        },
        "type": "object"
      },
      "SubordinateConfigChain": {
        "description": "This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.",
        "properties": {
          "pemCertificates": {
            "description": "Required. Expected to be in leaf-to-root order according to RFC 5246.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://privateca.googleapis.com//v1/{parent}/certificateAuthorities{?certificateAuthorityId,requestId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
