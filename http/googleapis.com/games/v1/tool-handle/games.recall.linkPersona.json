{
  "name": "games_recall_linkPersona",
  "description": "Associate the PGS Player principal encoded in the provided recall session id with an in-game account",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/LinkPersonaRequest"
      }
    },
    "$defs": {
      "LinkPersonaRequest": {
        "description": "Request to link an in-game account with a PGS principal (encoded in the session id).",
        "properties": {
          "cardinalityConstraint": {
            "description": "Required. Cardinality constraint to observe when linking a persona to a player in the scope of a game.",
            "enum": [
              "ONE_PERSONA_TO_ONE_PLAYER"
            ],
            "type": "string"
          },
          "conflictingLinksResolutionPolicy": {
            "description": "Required. Resolution policy to apply when the linking of a persona to a player would result in violating the specified cardinality constraint.",
            "enum": [
              "KEEP_EXISTING_LINKS",
              "CREATE_NEW_LINK"
            ],
            "type": "string"
          },
          "expireTime": {
            "description": "Input only. Optional expiration time.",
            "format": "google-datetime",
            "type": "string"
          },
          "persona": {
            "description": "Required. Stable identifier of the in-game account. Please refrain from re-using the same persona for different games.",
            "type": "string"
          },
          "sessionId": {
            "description": "Required. Opaque server-generated string that encodes all the necessary information to identify the PGS player / Google user and application.",
            "type": "string"
          },
          "token": {
            "description": "Required. Value of the token to create. Opaque to Play Games and assumed to be non-stable (encrypted with key rotation).",
            "type": "string"
          },
          "ttl": {
            "description": "Input only. Optional time-to-live.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://games.googleapis.com//games/v1/recall:linkPersona{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Outcome of a persona linking attempt.",
        "**Key properties:**",
        {
          "$ul": [
            "**state**: Output only. State of a persona linking attempt."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
