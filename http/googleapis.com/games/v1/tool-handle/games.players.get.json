{
  "name": "games_players_get",
  "description": "Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.",
  "parameters": {
    "type": "object",
    "properties": {
      "playerId": {
        "type": "string",
        "description": "A player ID. A value of `me` may be used in place of the authenticated player's ID."
      },
      "language": {
        "type": "string",
        "description": "The preferred language to use for strings returned by this method."
      },
      "playerIdConsistencyToken": {
        "type": "string",
        "description": "Consistency token of the player id. The call returns a 'not found' result when the token is present and invalid. Empty value is ignored. See also GlobalPlayerIdConsistencyTokenProto"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "playerId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://games.googleapis.com//games/v1/players/{playerId}{?language,playerIdConsistencyToken,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Player resource.",
        "**Key properties:**",
        {
          "$ul": [
            "**avatarImageUrl**: The base URL for the image that represents the player.",
            "**bannerUrlLandscape**: The url to the landscape mode player banner image.",
            "**bannerUrlPortrait**: The url to the portrait mode player banner image.",
            "**displayName**: The name to display for the player.",
            [
              "**experienceInfo**: 1P/3P metadata about the player's experience.",
              {
                "$ul": [
                  "**currentExperiencePoints**: The current number of experience points for the player.",
                  [
                    "**currentLevel**: 1P/3P metadata about a user's level.",
                    {
                      "$ul": [
                        "**kind**: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`.",
                        "**level**: The level for the user.",
                        "**maxExperiencePoints**: The maximum experience points for this level.",
                        "**minExperiencePoints**: The minimum experience points for this level."
                      ]
                    }
                  ],
                  "**kind**: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerExperienceInfo`.",
                  "**lastLevelUpTimestampMillis**: The timestamp when the player was leveled up, in millis since Unix epoch UTC.",
                  [
                    "**nextLevel**: 1P/3P metadata about a user's level.",
                    {
                      "$ul": [
                        "**kind**: Uniquely identifies the type of this resource. Value is always the fixed string `games#playerLevel`.",
                        "**level**: The level for the user.",
                        "**maxExperiencePoints**: The maximum experience points for this level.",
                        "**minExperiencePoints**: The minimum experience points for this level."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**friendStatus**: The friend status of the given player, relative to the requester. This is unset if the player is not sharing their friends list with the game.",
            "**gamePlayerId**: Per-application unique player identifier.",
            "**kind**: Uniquely identifies the type of this resource. Value is always the fixed string `games#player`",
            [
              "**name**: A representation of the individual components of the name.",
              {
                "$ul": [
                  "**familyName**: The family name of this player. In some places, this is known as the last name.",
                  "**givenName**: The given name of this player. In some places, this is known as the first name."
                ]
              }
            ],
            "**originalPlayerId**: The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.",
            "**playerId**: The ID of the player.",
            [
              "**profileSettings**: Profile settings",
              {
                "$ul": [
                  "**friendsListVisibility**",
                  "**kind**: Uniquely identifies the type of this resource. Value is always the fixed string `games#profileSettings`.",
                  "**profileVisible**: Whether the player's profile is visible to the currently signed in player."
                ]
              }
            ],
            "**title**: The player's title rewarded for their game activities."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
