{
  "name": "youtubeAnalytics_groups_insert",
  "description": "Creates a group.",
  "parameters": {
    "type": "object",
    "properties": {
      "onBehalfOfContentOwner": {
        "type": "string",
        "description": "This parameter can only be used in a properly authorized request. **Note:** This parameter is intended exclusively for YouTube content partners that own and manage many different YouTube channels. The `onBehalfOfContentOwner` parameter indicates that the request's authorization credentials identify a YouTube user who is acting on behalf of the content owner specified in the parameter value. It allows content owners to authenticate once and get access to all their video and channel data, without having to provide authentication credentials for each individual channel. The account that the user authenticates with must be linked to the specified YouTube content owner."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Group"
      }
    },
    "$defs": {
      "Group": {
        "description": "A group.",
        "properties": {
          "contentDetails": {
            "$ref": "#/$defs/GroupContentDetails"
          },
          "errors": {
            "$ref": "#/$defs/Errors"
          },
          "etag": {
            "description": "The Etag of this resource.",
            "type": "string"
          },
          "id": {
            "description": "The ID that YouTube uses to uniquely identify the group.",
            "type": "string"
          },
          "kind": {
            "description": "Identifies the API resource's type. The value will be `youtube#group`.",
            "type": "string"
          },
          "snippet": {
            "$ref": "#/$defs/GroupSnippet"
          }
        },
        "type": "object"
      },
      "GroupContentDetails": {
        "description": "A group's content details.",
        "properties": {
          "itemCount": {
            "description": "The number of items in the group.",
            "format": "uint64",
            "type": "string"
          },
          "itemType": {
            "description": "The type of resources that the group contains. Valid values for this property are: * `youtube#channel` * `youtube#playlist` * `youtube#video` * `youtubePartner#asset`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Errors": {
        "description": "Request Error information. The presence of an error field signals that the operation has failed.",
        "properties": {
          "code": {
            "deprecated": true,
            "description": "Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead.",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "NOT_FOUND",
              "CONFLICT",
              "GONE",
              "PRECONDITION_FAILED",
              "INTERNAL_ERROR",
              "SERVICE_UNAVAILABLE"
            ],
            "type": "string"
          },
          "error": {
            "description": "Specific error description and codes",
            "items": {
              "$ref": "#/$defs/ErrorProto"
            },
            "type": "array"
          },
          "requestId": {
            "description": "Request identifier generated by the service, which can be used to identify the error in the logs",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ErrorProto": {
        "description": "Describes one specific error.",
        "properties": {
          "argument": {
            "description": "Error arguments, to be used when building user-friendly error messages given the error domain and code. Different error codes require different arguments.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "code": {
            "description": "Error code in the error domain. This should correspond to a value of the enum type whose name is in domain. See the core error domain in error_domain.proto.",
            "type": "string"
          },
          "debugInfo": {
            "description": "Debugging information, which should not be shared externally.",
            "type": "string"
          },
          "domain": {
            "description": "Error domain. RoSy services can define their own domain and error codes. This should normally be the name of an enum type, such as: gdata.CoreErrorDomain",
            "type": "string"
          },
          "externalErrorMessage": {
            "description": "A short explanation for the error, which can be shared outside Google. Please set domain, code and arguments whenever possible instead of this error message so that external APIs can build safe error messages themselves. External messages built in a RoSy interface will most likely refer to information and concepts that are not available externally and should not be exposed. It is safer if external APIs can understand the errors and decide what the error message should look like.",
            "type": "string"
          },
          "location": {
            "description": "Location of the error, as specified by the location type. If location_type is PATH, this should be a path to a field that's relative to the request, using FieldPath notation (net/proto2/util/public/field_path.h). Examples: authenticated_user.gaia_id resource.address[2].country",
            "type": "string"
          },
          "locationType": {
            "enum": [
              "PATH",
              "OTHER",
              "PARAMETER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "GroupSnippet": {
        "description": "A group snippet.",
        "properties": {
          "publishedAt": {
            "description": "The date and time that the group was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
            "format": "google-datetime",
            "type": "string"
          },
          "title": {
            "description": "The group name. The value must be a non-empty string.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://youtubeanalytics.googleapis.com//v2/groups{?onBehalfOfContentOwner,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A group.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**contentDetails**: A group's content details.",
              {
                "$ul": [
                  "**itemCount**: The number of items in the group.",
                  "**itemType**: The type of resources that the group contains. Valid values for this property are: * `youtube#channel` * `youtube#playlist` * `youtube#video` * `youtubePartner#asset`"
                ]
              }
            ],
            [
              "**errors**: Request Error information. The presence of an error field signals that the operation has failed.",
              {
                "$ul": [
                  "**code**: Global error code. Deprecated and ignored. Set custom error codes in ErrorProto.domain and ErrorProto.code instead.",
                  "**error**: Specific error description and codes",
                  "**requestId**: Request identifier generated by the service, which can be used to identify the error in the logs"
                ]
              }
            ],
            "**etag**: The Etag of this resource.",
            "**id**: The ID that YouTube uses to uniquely identify the group.",
            "**kind**: Identifies the API resource's type. The value will be `youtube#group`.",
            [
              "**snippet**: A group snippet.",
              {
                "$ul": [
                  "**publishedAt**: The date and time that the group was created. The value is specified in ISO 8601 (YYYY-MM-DDThh:mm:ss.sZ) format.",
                  "**title**: The group name. The value must be a non-empty string."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
