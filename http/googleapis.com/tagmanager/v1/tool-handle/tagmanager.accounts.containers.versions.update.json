{
  "name": "tagmanager_accounts_containers_versions_update",
  "description": "Updates a Container Version.",
  "parameters": {
    "type": "object",
    "properties": {
      "accountId": {
        "type": "string",
        "description": "The GTM Account ID."
      },
      "containerId": {
        "type": "string",
        "description": "The GTM Container ID."
      },
      "containerVersionId": {
        "type": "string",
        "description": "The GTM Container Version ID."
      },
      "fingerprint": {
        "type": "string",
        "description": "When provided, this fingerprint must match the fingerprint of the container version in storage."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ContainerVersion"
      }
    },
    "required": [
      "accountId",
      "containerId",
      "containerVersionId"
    ],
    "$defs": {
      "ContainerVersion": {
        "description": "Represents a Google Tag Manager Container Version.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "container": {
            "$ref": "#/$defs/Container"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "containerVersionId": {
            "description": "The Container Version ID uniquely identifies the GTM Container Version.",
            "type": "string"
          },
          "deleted": {
            "description": "A value of true indicates this container version has been deleted.",
            "type": "boolean"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.",
            "type": "string"
          },
          "folder": {
            "description": "The folders in the container that this version was taken from.",
            "items": {
              "$ref": "#/$defs/Folder"
            },
            "type": "array"
          },
          "macro": {
            "deprecated": true,
            "description": "The macros in the container that this version was taken from.",
            "items": {
              "$ref": "#/$defs/Macro"
            },
            "type": "array"
          },
          "name": {
            "description": "Container version display name. @mutable tagmanager.accounts.containers.versions.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update",
            "type": "string"
          },
          "rule": {
            "deprecated": true,
            "description": "The rules in the container that this version was taken from.",
            "items": {
              "$ref": "#/$defs/Rule"
            },
            "type": "array"
          },
          "tag": {
            "description": "The tags in the container that this version was taken from.",
            "items": {
              "$ref": "#/$defs/Tag"
            },
            "type": "array"
          },
          "trigger": {
            "description": "The triggers in the container that this version was taken from.",
            "items": {
              "$ref": "#/$defs/Trigger"
            },
            "type": "array"
          },
          "variable": {
            "description": "The variables in the container that this version was taken from.",
            "items": {
              "$ref": "#/$defs/Variable"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Container": {
        "description": "Represents a Google Tag Manager Container.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "The Container ID uniquely identifies the GTM Container.",
            "type": "string"
          },
          "domainName": {
            "description": "Optional list of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabledBuiltInVariable": {
            "description": "List of enabled built-in variables. Valid values include: pageUrl, pageHostname, pagePath, referrer, event, clickElement, clickClasses, clickId, clickTarget, clickUrl, clickText, formElement, formClasses, formId, formTarget, formUrl, formText, errorMessage, errorUrl, errorLine, newHistoryFragment, oldHistoryFragment, newHistoryState, oldHistoryState, historySource, containerVersion, debugMode, randomNumber, containerId. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "items": {
              "enum": [
                "pageUrl",
                "pageHostname",
                "pagePath",
                "referrer",
                "event",
                "clickElement",
                "clickClasses",
                "clickId",
                "clickTarget",
                "clickUrl",
                "clickText",
                "firstPartyServingUrl",
                "formElement",
                "formClasses",
                "formId",
                "formTarget",
                "formUrl",
                "formText",
                "environmentName",
                "errorMessage",
                "errorUrl",
                "errorLine",
                "newHistoryUrl",
                "oldHistoryUrl",
                "newHistoryFragment",
                "oldHistoryFragment",
                "newHistoryState",
                "oldHistoryState",
                "historySource",
                "containerVersion",
                "debugMode",
                "randomNumber",
                "containerId",
                "appId",
                "appName",
                "appVersionCode",
                "appVersionName",
                "language",
                "osVersion",
                "platform",
                "sdkVersion",
                "deviceName",
                "resolution",
                "advertiserId",
                "advertisingTrackingEnabled",
                "htmlId",
                "ampBrowserLanguage",
                "ampCanonicalPath",
                "ampCanonicalUrl",
                "ampCanonicalHost",
                "ampReferrer",
                "ampTitle",
                "ampClientId",
                "ampClientTimezone",
                "ampClientTimestamp",
                "ampClientScreenWidth",
                "ampClientScreenHeight",
                "ampClientScrollX",
                "ampClientScrollY",
                "ampClientMaxScrollX",
                "ampClientMaxScrollY",
                "ampTotalEngagedTime",
                "ampPageViewId",
                "ampPageLoadTime",
                "ampPageDownloadTime",
                "ampGtmEvent",
                "eventName",
                "firebaseEventParameterCampaign",
                "firebaseEventParameterCampaignAclid",
                "firebaseEventParameterCampaignAnid",
                "firebaseEventParameterCampaignClickTimestamp",
                "firebaseEventParameterCampaignContent",
                "firebaseEventParameterCampaignCp1",
                "firebaseEventParameterCampaignGclid",
                "firebaseEventParameterCampaignSource",
                "firebaseEventParameterCampaignTerm",
                "firebaseEventParameterCurrency",
                "firebaseEventParameterDynamicLinkAcceptTime",
                "firebaseEventParameterDynamicLinkLinkid",
                "firebaseEventParameterNotificationMessageDeviceTime",
                "firebaseEventParameterNotificationMessageId",
                "firebaseEventParameterNotificationMessageName",
                "firebaseEventParameterNotificationMessageTime",
                "firebaseEventParameterNotificationTopic",
                "firebaseEventParameterPreviousAppVersion",
                "firebaseEventParameterPreviousOsVersion",
                "firebaseEventParameterPrice",
                "firebaseEventParameterProductId",
                "firebaseEventParameterQuantity",
                "firebaseEventParameterValue",
                "videoProvider",
                "videoUrl",
                "videoTitle",
                "videoDuration",
                "videoPercent",
                "videoVisible",
                "videoStatus",
                "videoCurrentTime",
                "scrollDepthThreshold",
                "scrollDepthUnits",
                "scrollDepthDirection",
                "elementVisibilityRatio",
                "elementVisibilityTime",
                "elementVisibilityFirstTime",
                "elementVisibilityRecentTime"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.",
            "type": "string"
          },
          "name": {
            "description": "Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "type": "string"
          },
          "notes": {
            "description": "Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "type": "string"
          },
          "publicId": {
            "description": "Container Public ID.",
            "type": "string"
          },
          "timeZoneCountryId": {
            "description": "Container Country ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "type": "string"
          },
          "timeZoneId": {
            "description": "Container Time Zone ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "type": "string"
          },
          "usageContext": {
            "description": "List of Usage Contexts for the Container. Valid values include: web, android, ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
            "items": {
              "enum": [
                "web",
                "android",
                "ios",
                "androidSdk5",
                "iosSdk5",
                "amp"
              ],
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Folder": {
        "description": "Represents a Google Tag Manager Folder.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Folder as computed at storage time. This value is recomputed whenever the folder is modified.",
            "type": "string"
          },
          "folderId": {
            "description": "The Folder ID uniquely identifies the GTM Folder.",
            "type": "string"
          },
          "name": {
            "description": "Folder display name. @mutable tagmanager.accounts.containers.folders.create @mutable tagmanager.accounts.containers.folders.update",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Macro": {
        "description": "Represents a Google Tag Manager Macro.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "disablingRuleId": {
            "description": "For mobile containers only: A list of rule IDs for disabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enablingRuleId": {
            "description": "For mobile containers only: A list of rule IDs for enabling conditional macros; the macro is enabled if one of the enabling rules is true while all the disabling rules are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Macro as computed at storage time. This value is recomputed whenever the macro is modified.",
            "type": "string"
          },
          "macroId": {
            "description": "The Macro ID uniquely identifies the GTM Macro.",
            "type": "string"
          },
          "name": {
            "description": "Macro display name. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this macro in the container. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "type": "string"
          },
          "parameter": {
            "description": "The macro's parameters. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "scheduleEndMs": {
            "description": "The end timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "format": "int64",
            "type": "string"
          },
          "scheduleStartMs": {
            "description": "The start timestamp in milliseconds to schedule a macro. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "GTM Macro Type. @mutable tagmanager.accounts.containers.macros.create @mutable tagmanager.accounts.containers.macros.update",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Parameter": {
        "description": "Represents a Google Tag Manager Parameter.",
        "properties": {
          "key": {
            "description": "The named key that uniquely identifies a parameter. Required for top-level parameters, as well as map values. Ignored for list values. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "string"
          },
          "list": {
            "description": "This list parameter's parameters (keys will be ignored). @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "map": {
            "description": "This map parameter's parameters (must have keys; keys must be unique). @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "The parameter type. Valid values are: - boolean: The value represents a boolean, represented as 'true' or 'false' - integer: The value represents a 64-bit signed integer value, in base 10 - list: A list of parameters should be specified - map: A map of parameters should be specified - template: The value represents any text; this can include variable references (even variable references that might return non-string types) - trigger_reference: The value represents a trigger, represented as the trigger id - tag_reference: The value represents a tag, represented as the tag name @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "enum": [
              "template",
              "integer",
              "boolean",
              "list",
              "map",
              "triggerReference",
              "tagReference"
            ],
            "type": "string"
          },
          "value": {
            "description": "A parameter's value (may contain variable references such as \"{{myVariable}}\") as appropriate to the specified type. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rule": {
        "description": "Represents a Google Tag Manager Rule.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "condition": {
            "description": "The list of conditions that make up this rule (implicit AND between them). @mutable tagmanager.accounts.containers.rules.create @mutable tagmanager.accounts.containers.rules.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Rule as computed at storage time. This value is recomputed whenever the rule is modified.",
            "type": "string"
          },
          "name": {
            "description": "Rule display name. @mutable tagmanager.accounts.containers.rules.create @mutable tagmanager.accounts.containers.rules.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this rule in the container. @mutable tagmanager.accounts.containers.rules.create @mutable tagmanager.accounts.containers.rules.update",
            "type": "string"
          },
          "ruleId": {
            "description": "The Rule ID uniquely identifies the GTM Rule.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Condition": {
        "description": "Represents a predicate.",
        "properties": {
          "parameter": {
            "description": "A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of operator for this condition. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "enum": [
              "equals",
              "contains",
              "startsWith",
              "endsWith",
              "matchRegex",
              "greater",
              "greaterOrEquals",
              "less",
              "lessOrEquals",
              "cssSelector",
              "urlMatches"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tag": {
        "description": "Represents a Google Tag Manager Tag.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "blockingRuleId": {
            "deprecated": true,
            "description": "Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blockingTriggerId": {
            "description": "Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.",
            "type": "string"
          },
          "firingRuleId": {
            "deprecated": true,
            "description": "Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "firingTriggerId": {
            "description": "Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "liveOnly": {
            "description": "If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "boolean"
          },
          "name": {
            "description": "Tag display name. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "string"
          },
          "parameter": {
            "description": "The tag's parameters. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "paused": {
            "description": "True if the tag is paused. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "boolean"
          },
          "priority": {
            "$ref": "#/$defs/Parameter"
          },
          "scheduleEndMs": {
            "description": "The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "format": "int64",
            "type": "string"
          },
          "scheduleStartMs": {
            "description": "The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "format": "int64",
            "type": "string"
          },
          "setupTag": {
            "description": "The list of setup tags. Currently we only allow one.",
            "items": {
              "$ref": "#/$defs/SetupTag"
            },
            "type": "array"
          },
          "tagFiringOption": {
            "description": "Option to fire this tag.",
            "enum": [
              "unlimited",
              "oncePerEvent",
              "oncePerLoad"
            ],
            "type": "string"
          },
          "tagId": {
            "description": "The Tag ID uniquely identifies the GTM Tag.",
            "type": "string"
          },
          "teardownTag": {
            "description": "The list of teardown tags. Currently we only allow one.",
            "items": {
              "$ref": "#/$defs/TeardownTag"
            },
            "type": "array"
          },
          "type": {
            "description": "GTM Tag Type. @mutable tagmanager.accounts.containers.tags.create @mutable tagmanager.accounts.containers.tags.update",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SetupTag": {
        "properties": {
          "stopOnSetupFailure": {
            "description": "If true, fire the main tag if and only if the setup tag fires successfully. If false, fire the main tag regardless of setup tag firing status.",
            "type": "boolean"
          },
          "tagName": {
            "description": "The name of the setup tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeardownTag": {
        "properties": {
          "stopTeardownOnFailure": {
            "description": "If true, fire the teardown tag if and only if the main tag fires successfully. If false, fire the teardown tag regardless of main tag firing status.",
            "type": "boolean"
          },
          "tagName": {
            "description": "The name of the teardown tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trigger": {
        "description": "Represents a Google Tag Manager Trigger",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "autoEventFilter": {
            "description": "Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "checkValidation": {
            "$ref": "#/$defs/Parameter"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "continuousTimeMinMilliseconds": {
            "$ref": "#/$defs/Parameter"
          },
          "customEventFilter": {
            "description": "Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "eventName": {
            "$ref": "#/$defs/Parameter"
          },
          "filter": {
            "description": "The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.",
            "type": "string"
          },
          "horizontalScrollPercentageList": {
            "$ref": "#/$defs/Parameter"
          },
          "interval": {
            "$ref": "#/$defs/Parameter"
          },
          "intervalSeconds": {
            "$ref": "#/$defs/Parameter"
          },
          "limit": {
            "$ref": "#/$defs/Parameter"
          },
          "maxTimerLengthSeconds": {
            "$ref": "#/$defs/Parameter"
          },
          "name": {
            "description": "Trigger display name. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "type": "string"
          },
          "parameter": {
            "description": "Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "selector": {
            "$ref": "#/$defs/Parameter"
          },
          "totalTimeMinMilliseconds": {
            "$ref": "#/$defs/Parameter"
          },
          "triggerId": {
            "description": "The Trigger ID uniquely identifies the GTM Trigger.",
            "type": "string"
          },
          "type": {
            "description": "Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.triggers.create @mutable tagmanager.accounts.containers.triggers.update",
            "enum": [
              "pageview",
              "domReady",
              "windowLoaded",
              "customEvent",
              "triggerGroup",
              "always",
              "formSubmission",
              "click",
              "linkClick",
              "jsError",
              "historyChange",
              "timer",
              "ampClick",
              "ampTimer",
              "ampScroll",
              "ampVisibility",
              "youTubeVideo",
              "scrollDepth",
              "elementVisibility"
            ],
            "type": "string"
          },
          "uniqueTriggerId": {
            "$ref": "#/$defs/Parameter"
          },
          "verticalScrollPercentageList": {
            "$ref": "#/$defs/Parameter"
          },
          "visibilitySelector": {
            "$ref": "#/$defs/Parameter"
          },
          "visiblePercentageMax": {
            "$ref": "#/$defs/Parameter"
          },
          "visiblePercentageMin": {
            "$ref": "#/$defs/Parameter"
          },
          "waitForTags": {
            "$ref": "#/$defs/Parameter"
          },
          "waitForTagsTimeout": {
            "$ref": "#/$defs/Parameter"
          }
        },
        "type": "object"
      },
      "Variable": {
        "description": "Represents a Google Tag Manager Variable.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "disablingTriggerId": {
            "description": "For mobile containers only: A list of trigger IDs for disabling conditional variables; the variable is enabled if one of the enabling trigger is true while all the disabling trigger are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enablingTriggerId": {
            "description": "For mobile containers only: A list of trigger IDs for enabling conditional variables; the variable is enabled if one of the enabling triggers is true while all the disabling triggers are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Variable as computed at storage time. This value is recomputed whenever the variable is modified.",
            "type": "string"
          },
          "name": {
            "description": "Variable display name. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this variable in the container. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "type": "string"
          },
          "parameter": {
            "description": "The variable's parameters. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "scheduleEndMs": {
            "description": "The end timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "format": "int64",
            "type": "string"
          },
          "scheduleStartMs": {
            "description": "The start timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "GTM Variable Type. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update",
            "type": "string"
          },
          "variableId": {
            "description": "The Variable ID uniquely identifies the GTM Variable.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PUT",
    "url": {
      "$uri": "https://tagmanager.googleapis.com//tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}{?fingerprint,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a Google Tag Manager Container Version.",
        "**Key properties:**",
        {
          "$ul": [
            "**accountId**: GTM Account ID.",
            [
              "**container**: Represents a Google Tag Manager Container.",
              {
                "$ul": [
                  "**accountId**: GTM Account ID.",
                  "**containerId**: The Container ID uniquely identifies the GTM Container.",
                  "**domainName**: Optional list of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
                  "**enabledBuiltInVariable**: List of enabled built-in variables. Valid values include: pageUrl, pageHostname, pagePath, referrer, event, clickElement, clickClasses, clickId, clickTarget, clickUrl, clickText, formElement, formClasses, formId, formTarget, formUrl, formText, errorMessage, errorUrl, errorLine, newHistoryFragment, oldHistoryFragment, newHistoryState, oldHistoryState, historySource, containerVersion, debugMode, randomNumber, containerId. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
                  "**fingerprint**: The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.",
                  "**name**: Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
                  "**notes**: Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
                  "**publicId**: Container Public ID.",
                  "**timeZoneCountryId**: Container Country ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
                  "**timeZoneId**: Container Time Zone ID. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update",
                  "**usageContext**: List of Usage Contexts for the Container. Valid values include: web, android, ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update"
                ]
              }
            ],
            "**containerId**: GTM Container ID.",
            "**containerVersionId**: The Container Version ID uniquely identifies the GTM Container Version.",
            "**deleted**: A value of true indicates this container version has been deleted.",
            "**fingerprint**: The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.",
            "**folder**: The folders in the container that this version was taken from.",
            "**macro**: The macros in the container that this version was taken from.",
            "**name**: Container version display name. @mutable tagmanager.accounts.containers.versions.update",
            "**notes**: User notes on how to apply this container version in the container. @mutable tagmanager.accounts.containers.versions.update",
            "**rule**: The rules in the container that this version was taken from.",
            "**tag**: The tags in the container that this version was taken from.",
            "**trigger**: The triggers in the container that this version was taken from.",
            "**variable**: The variables in the container that this version was taken from."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
