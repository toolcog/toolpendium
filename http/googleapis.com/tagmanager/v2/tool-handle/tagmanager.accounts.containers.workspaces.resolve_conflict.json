{
  "name": "tagmanager_accounts_containers_workspaces_resolve_conflict",
  "description": "Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request.",
  "parameters": {
    "type": "object",
    "properties": {
      "path": {
        "type": "string",
        "description": "GTM Workspace's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}"
      },
      "fingerprint": {
        "type": "string",
        "description": "When provided, this fingerprint must match the fingerprint of the entity_in_workspace in the merge conflict."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Entity"
      }
    },
    "required": [
      "path"
    ],
    "$defs": {
      "Entity": {
        "description": "A workspace entity that may represent a tag, trigger, variable, or folder in addition to its status in the workspace.",
        "properties": {
          "builtInVariable": {
            "$ref": "#/$defs/BuiltInVariable"
          },
          "changeStatus": {
            "description": "Represents how the entity has been changed in the workspace.",
            "enum": [
              "changeStatusUnspecified",
              "none",
              "added",
              "deleted",
              "updated"
            ],
            "type": "string"
          },
          "client": {
            "$ref": "#/$defs/Client"
          },
          "customTemplate": {
            "$ref": "#/$defs/CustomTemplate"
          },
          "folder": {
            "$ref": "#/$defs/Folder"
          },
          "gtagConfig": {
            "$ref": "#/$defs/GtagConfig"
          },
          "tag": {
            "$ref": "#/$defs/Tag"
          },
          "transformation": {
            "$ref": "#/$defs/Transformation"
          },
          "trigger": {
            "$ref": "#/$defs/Trigger"
          },
          "variable": {
            "$ref": "#/$defs/Variable"
          },
          "zone": {
            "$ref": "#/$defs/Zone"
          }
        },
        "type": "object"
      },
      "BuiltInVariable": {
        "description": "Built-in variables are a special category of variables that are pre-created and non-customizable. They provide common functionality like accessing properties of the gtm data layer, monitoring clicks, or accessing elements of a page URL.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "name": {
            "description": "Name of the built-in variable to be used to refer to the built-in variable.",
            "type": "string"
          },
          "path": {
            "description": "GTM BuiltInVariable's API relative path.",
            "type": "string"
          },
          "type": {
            "description": "Type of built-in variable. @required.tagmanager.accounts.containers.workspaces.built_in_variable.update @mutable tagmanager.accounts.containers.workspaces.built_in_variable.update",
            "enum": [
              "builtInVariableTypeUnspecified",
              "pageUrl",
              "pageHostname",
              "pagePath",
              "referrer",
              "event",
              "clickElement",
              "clickClasses",
              "clickId",
              "clickTarget",
              "clickUrl",
              "clickText",
              "firstPartyServingUrl",
              "formElement",
              "formClasses",
              "formId",
              "formTarget",
              "formUrl",
              "formText",
              "errorMessage",
              "errorUrl",
              "errorLine",
              "newHistoryUrl",
              "oldHistoryUrl",
              "newHistoryFragment",
              "oldHistoryFragment",
              "newHistoryState",
              "oldHistoryState",
              "historySource",
              "containerVersion",
              "debugMode",
              "randomNumber",
              "containerId",
              "appId",
              "appName",
              "appVersionCode",
              "appVersionName",
              "language",
              "osVersion",
              "platform",
              "sdkVersion",
              "deviceName",
              "resolution",
              "advertiserId",
              "advertisingTrackingEnabled",
              "htmlId",
              "environmentName",
              "ampBrowserLanguage",
              "ampCanonicalPath",
              "ampCanonicalUrl",
              "ampCanonicalHost",
              "ampReferrer",
              "ampTitle",
              "ampClientId",
              "ampClientTimezone",
              "ampClientTimestamp",
              "ampClientScreenWidth",
              "ampClientScreenHeight",
              "ampClientScrollX",
              "ampClientScrollY",
              "ampClientMaxScrollX",
              "ampClientMaxScrollY",
              "ampTotalEngagedTime",
              "ampPageViewId",
              "ampPageLoadTime",
              "ampPageDownloadTime",
              "ampGtmEvent",
              "eventName",
              "firebaseEventParameterCampaign",
              "firebaseEventParameterCampaignAclid",
              "firebaseEventParameterCampaignAnid",
              "firebaseEventParameterCampaignClickTimestamp",
              "firebaseEventParameterCampaignContent",
              "firebaseEventParameterCampaignCp1",
              "firebaseEventParameterCampaignGclid",
              "firebaseEventParameterCampaignSource",
              "firebaseEventParameterCampaignTerm",
              "firebaseEventParameterCurrency",
              "firebaseEventParameterDynamicLinkAcceptTime",
              "firebaseEventParameterDynamicLinkLinkid",
              "firebaseEventParameterNotificationMessageDeviceTime",
              "firebaseEventParameterNotificationMessageId",
              "firebaseEventParameterNotificationMessageName",
              "firebaseEventParameterNotificationMessageTime",
              "firebaseEventParameterNotificationTopic",
              "firebaseEventParameterPreviousAppVersion",
              "firebaseEventParameterPreviousOsVersion",
              "firebaseEventParameterPrice",
              "firebaseEventParameterProductId",
              "firebaseEventParameterQuantity",
              "firebaseEventParameterValue",
              "videoProvider",
              "videoUrl",
              "videoTitle",
              "videoDuration",
              "videoPercent",
              "videoVisible",
              "videoStatus",
              "videoCurrentTime",
              "scrollDepthThreshold",
              "scrollDepthUnits",
              "scrollDepthDirection",
              "elementVisibilityRatio",
              "elementVisibilityTime",
              "elementVisibilityFirstTime",
              "elementVisibilityRecentTime",
              "requestPath",
              "requestMethod",
              "clientName",
              "queryString",
              "serverPageLocationUrl",
              "serverPageLocationPath",
              "serverPageLocationHostname",
              "visitorRegion"
            ],
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Client": {
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "clientId": {
            "description": "The Client ID uniquely identifies the GTM client.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Client as computed at storage time. This value is recomputed whenever the client is modified.",
            "type": "string"
          },
          "name": {
            "description": "Client display name. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "parameter": {
            "description": "The client's parameters. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "path": {
            "description": "GTM client's API relative path.",
            "type": "string"
          },
          "priority": {
            "description": "Priority determines relative firing order. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update",
            "format": "int32",
            "type": "integer"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "type": {
            "description": "Client type. @mutable tagmanager.accounts.containers.workspaces.clients.create @mutable tagmanager.accounts.containers.workspaces.clients.update",
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Parameter": {
        "description": "Represents a Google Tag Manager Parameter.",
        "properties": {
          "isWeakReference": {
            "description": "Whether or not a reference type parameter is strongly or weakly referenced. Only used by Transformations. @mutable tagmanager.accounts.containers.workspaces.transformations.create @mutable tagmanager.accounts.containers.workspaces.transformations.update",
            "type": "boolean"
          },
          "key": {
            "description": "The named key that uniquely identifies a parameter. Required for top-level parameters, as well as map values. Ignored for list values. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "list": {
            "description": "This list parameter's parameters (keys will be ignored). @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "map": {
            "description": "This map parameter's parameters (must have keys; keys must be unique). @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "The parameter type. Valid values are: - boolean: The value represents a boolean, represented as 'true' or 'false' - integer: The value represents a 64-bit signed integer value, in base 10 - list: A list of parameters should be specified - map: A map of parameters should be specified - template: The value represents any text; this can include variable references (even variable references that might return non-string types) - trigger_reference: The value represents a trigger, represented as the trigger id - tag_reference: The value represents a tag, represented as the tag name @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "enum": [
              "typeUnspecified",
              "template",
              "integer",
              "boolean",
              "list",
              "map",
              "triggerReference",
              "tagReference"
            ],
            "type": "string"
          },
          "value": {
            "description": "A parameter's value (may contain variable references such as \"{{myVariable}}\") as appropriate to the specified type. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CustomTemplate": {
        "description": "Represents a Google Tag Manager Custom Template's contents.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Custom Template as computed at storage time. This value is recomputed whenever the template is modified.",
            "type": "string"
          },
          "galleryReference": {
            "$ref": "#/$defs/GalleryReference"
          },
          "name": {
            "description": "Custom Template display name.",
            "type": "string"
          },
          "path": {
            "description": "GTM Custom Template's API relative path.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "templateData": {
            "description": "The custom template in text format.",
            "type": "string"
          },
          "templateId": {
            "description": "The Custom Template ID uniquely identifies the GTM custom template.",
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GalleryReference": {
        "description": "Represents the link between a custom template and an entry on the Community Template Gallery site.",
        "properties": {
          "host": {
            "description": "The name of the host for the community gallery template.",
            "type": "string"
          },
          "isModified": {
            "description": "If a user has manually edited the community gallery template.",
            "type": "boolean"
          },
          "owner": {
            "description": "The name of the owner for the community gallery template.",
            "type": "string"
          },
          "repository": {
            "description": "The name of the repository for the community gallery template.",
            "type": "string"
          },
          "signature": {
            "description": "The signature of the community gallery template as computed at import time. This value is recomputed whenever the template is updated from the gallery.",
            "type": "string"
          },
          "version": {
            "description": "The version of the community gallery template.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Folder": {
        "description": "Represents a Google Tag Manager Folder.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Folder as computed at storage time. This value is recomputed whenever the folder is modified.",
            "type": "string"
          },
          "folderId": {
            "description": "The Folder ID uniquely identifies the GTM Folder.",
            "type": "string"
          },
          "name": {
            "description": "Folder display name. @mutable tagmanager.accounts.containers.workspaces.folders.create @mutable tagmanager.accounts.containers.workspaces.folders.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this folder in the container. @mutable tagmanager.accounts.containers.workspaces.folders.create @mutable tagmanager.accounts.containers.workspaces.folders.update",
            "type": "string"
          },
          "path": {
            "description": "GTM Folder's API relative path.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GtagConfig": {
        "description": "Represents a Google tag configuration.",
        "properties": {
          "accountId": {
            "description": "Google tag account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "Google tag container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the Google tag config as computed at storage time. This value is recomputed whenever the config is modified.",
            "type": "string"
          },
          "gtagConfigId": {
            "description": "The ID uniquely identifies the Google tag config.",
            "type": "string"
          },
          "parameter": {
            "description": "The Google tag config's parameters. @mutable tagmanager.accounts.containers.workspaces.gtag_config.create @mutable tagmanager.accounts.containers.workspaces.gtag_config.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "path": {
            "description": "Google tag config's API relative path.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "type": {
            "description": "Google tag config type. @required tagmanager.accounts.containers.workspaces.gtag_config.create @required tagmanager.accounts.containers.workspaces.gtag_config.update @mutable tagmanager.accounts.containers.workspaces.gtag_config.create @mutable tagmanager.accounts.containers.workspaces.gtag_config.update",
            "type": "string"
          },
          "workspaceId": {
            "description": "Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tag": {
        "description": "Represents a Google Tag Manager Tag.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "blockingRuleId": {
            "deprecated": true,
            "description": "Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "blockingTriggerId": {
            "description": "Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "consentSettings": {
            "$ref": "#/$defs/TagConsentSetting"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.",
            "type": "string"
          },
          "firingRuleId": {
            "deprecated": true,
            "description": "Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "firingTriggerId": {
            "description": "Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "liveOnly": {
            "description": "If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "boolean"
          },
          "monitoringMetadata": {
            "$ref": "#/$defs/Parameter"
          },
          "monitoringMetadataTagNameKey": {
            "description": "If non-empty, then the tag display name will be included in the monitoring metadata map using the key specified. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "name": {
            "description": "Tag display name. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "parameter": {
            "description": "The tag's parameters. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "path": {
            "description": "GTM Tag's API relative path.",
            "type": "string"
          },
          "paused": {
            "description": "Indicates whether the tag is paused, which prevents the tag from firing. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "boolean"
          },
          "priority": {
            "$ref": "#/$defs/Parameter"
          },
          "scheduleEndMs": {
            "description": "The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "format": "int64",
            "type": "string"
          },
          "scheduleStartMs": {
            "description": "The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "format": "int64",
            "type": "string"
          },
          "setupTag": {
            "description": "The list of setup tags. Currently we only allow one.",
            "items": {
              "$ref": "#/$defs/SetupTag"
            },
            "type": "array"
          },
          "tagFiringOption": {
            "description": "Option to fire this tag.",
            "enum": [
              "tagFiringOptionUnspecified",
              "unlimited",
              "oncePerEvent",
              "oncePerLoad"
            ],
            "type": "string"
          },
          "tagId": {
            "description": "The Tag ID uniquely identifies the GTM Tag.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "teardownTag": {
            "description": "The list of teardown tags. Currently we only allow one.",
            "items": {
              "$ref": "#/$defs/TeardownTag"
            },
            "type": "array"
          },
          "type": {
            "description": "GTM Tag Type. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TagConsentSetting": {
        "properties": {
          "consentStatus": {
            "description": "The tag's consent status. If set to NEEDED, the runtime will check that the consent types specified by the consent_type field have been granted.",
            "enum": [
              "notSet",
              "notNeeded",
              "needed"
            ],
            "type": "string"
          },
          "consentType": {
            "$ref": "#/$defs/Parameter"
          }
        },
        "type": "object"
      },
      "SetupTag": {
        "description": "Represents a reference to atag that fires before another tag in order to set up dependencies.",
        "properties": {
          "stopOnSetupFailure": {
            "description": "If true, fire the main tag if and only if the setup tag fires successfully. If false, fire the main tag regardless of setup tag firing status.",
            "type": "boolean"
          },
          "tagName": {
            "description": "The name of the setup tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TeardownTag": {
        "description": "Represents a tag that fires after another tag in order to tear down dependencies.",
        "properties": {
          "stopTeardownOnFailure": {
            "description": "If true, fire the teardown tag if and only if the main tag fires successfully. If false, fire the teardown tag regardless of main tag firing status.",
            "type": "boolean"
          },
          "tagName": {
            "description": "The name of the teardown tag.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transformation": {
        "description": "Represents a Google Tag Manager Transformation.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Transformation as computed at storage time. This value is recomputed whenever the transformation is modified.",
            "type": "string"
          },
          "name": {
            "description": "Transformation display name. @mutable tagmanager.accounts.containers.workspaces.transformations.create @mutable tagmanager.accounts.containers.workspaces.transformations.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this transformation in the container. @mutable tagmanager.accounts.containers.workspaces.transformations.create @mutable tagmanager.accounts.containers.workspaces.transformations.update",
            "type": "string"
          },
          "parameter": {
            "description": "The transformation's parameters. @mutable tagmanager.accounts.containers.workspaces.transformations.create @mutable tagmanager.accounts.containers.workspaces.transformations.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "path": {
            "description": "GTM transformation's API relative path.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "transformationId": {
            "description": "The Transformation ID uniquely identifies the GTM transformation.",
            "type": "string"
          },
          "type": {
            "description": "Transformation type. @mutable tagmanager.accounts.containers.workspaces.transformations.create @mutable tagmanager.accounts.containers.workspaces.transformations.update",
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Trigger": {
        "description": "Represents a Google Tag Manager Trigger",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "autoEventFilter": {
            "description": "Used in the case of auto event tracking. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "checkValidation": {
            "$ref": "#/$defs/Parameter"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "continuousTimeMinMilliseconds": {
            "$ref": "#/$defs/Parameter"
          },
          "customEventFilter": {
            "description": "Used in the case of custom event, which is fired iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "eventName": {
            "$ref": "#/$defs/Parameter"
          },
          "filter": {
            "description": "The trigger will only fire iff all Conditions are true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Trigger as computed at storage time. This value is recomputed whenever the trigger is modified.",
            "type": "string"
          },
          "horizontalScrollPercentageList": {
            "$ref": "#/$defs/Parameter"
          },
          "interval": {
            "$ref": "#/$defs/Parameter"
          },
          "intervalSeconds": {
            "$ref": "#/$defs/Parameter"
          },
          "limit": {
            "$ref": "#/$defs/Parameter"
          },
          "maxTimerLengthSeconds": {
            "$ref": "#/$defs/Parameter"
          },
          "name": {
            "description": "Trigger display name. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this trigger in the container. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "type": "string"
          },
          "parameter": {
            "description": "Additional parameters. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "path": {
            "description": "GTM Trigger's API relative path.",
            "type": "string"
          },
          "selector": {
            "$ref": "#/$defs/Parameter"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "totalTimeMinMilliseconds": {
            "$ref": "#/$defs/Parameter"
          },
          "triggerId": {
            "description": "The Trigger ID uniquely identifies the GTM Trigger.",
            "type": "string"
          },
          "type": {
            "description": "Defines the data layer event that causes this trigger. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "enum": [
              "eventTypeUnspecified",
              "pageview",
              "domReady",
              "windowLoaded",
              "customEvent",
              "triggerGroup",
              "init",
              "consentInit",
              "serverPageview",
              "always",
              "firebaseAppException",
              "firebaseAppUpdate",
              "firebaseCampaign",
              "firebaseFirstOpen",
              "firebaseInAppPurchase",
              "firebaseNotificationDismiss",
              "firebaseNotificationForeground",
              "firebaseNotificationOpen",
              "firebaseNotificationReceive",
              "firebaseOsUpdate",
              "firebaseSessionStart",
              "firebaseUserEngagement",
              "formSubmission",
              "click",
              "linkClick",
              "jsError",
              "historyChange",
              "timer",
              "ampClick",
              "ampTimer",
              "ampScroll",
              "ampVisibility",
              "youTubeVideo",
              "scrollDepth",
              "elementVisibility"
            ],
            "type": "string"
          },
          "uniqueTriggerId": {
            "$ref": "#/$defs/Parameter"
          },
          "verticalScrollPercentageList": {
            "$ref": "#/$defs/Parameter"
          },
          "visibilitySelector": {
            "$ref": "#/$defs/Parameter"
          },
          "visiblePercentageMax": {
            "$ref": "#/$defs/Parameter"
          },
          "visiblePercentageMin": {
            "$ref": "#/$defs/Parameter"
          },
          "waitForTags": {
            "$ref": "#/$defs/Parameter"
          },
          "waitForTagsTimeout": {
            "$ref": "#/$defs/Parameter"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Condition": {
        "description": "Represents a predicate.",
        "properties": {
          "parameter": {
            "description": "A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of operator for this condition. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "enum": [
              "conditionTypeUnspecified",
              "equals",
              "contains",
              "startsWith",
              "endsWith",
              "matchRegex",
              "greater",
              "greaterOrEquals",
              "less",
              "lessOrEquals",
              "cssSelector",
              "urlMatches"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Variable": {
        "description": "Represents a Google Tag Manager Variable.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "disablingTriggerId": {
            "description": "For mobile containers only: A list of trigger IDs for disabling conditional variables; the variable is enabled if one of the enabling trigger is true while all the disabling trigger are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enablingTriggerId": {
            "description": "For mobile containers only: A list of trigger IDs for enabling conditional variables; the variable is enabled if one of the enabling triggers is true while all the disabling triggers are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Variable as computed at storage time. This value is recomputed whenever the variable is modified.",
            "type": "string"
          },
          "formatValue": {
            "$ref": "#/$defs/VariableFormatValue"
          },
          "name": {
            "description": "Variable display name. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this variable in the container. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "type": "string"
          },
          "parameter": {
            "description": "The variable's parameters. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "parentFolderId": {
            "description": "Parent folder id.",
            "type": "string"
          },
          "path": {
            "description": "GTM Variable's API relative path.",
            "type": "string"
          },
          "scheduleEndMs": {
            "description": "The end timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "format": "int64",
            "type": "string"
          },
          "scheduleStartMs": {
            "description": "The start timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "format": "int64",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "type": {
            "description": "GTM Variable Type. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update",
            "type": "string"
          },
          "variableId": {
            "description": "The Variable ID uniquely identifies the GTM Variable.",
            "type": "string"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VariableFormatValue": {
        "properties": {
          "caseConversionType": {
            "description": "The option to convert a string-type variable value to either lowercase or uppercase.",
            "enum": [
              "none",
              "lowercase",
              "uppercase"
            ],
            "type": "string"
          },
          "convertFalseToValue": {
            "$ref": "#/$defs/Parameter"
          },
          "convertNullToValue": {
            "$ref": "#/$defs/Parameter"
          },
          "convertTrueToValue": {
            "$ref": "#/$defs/Parameter"
          },
          "convertUndefinedToValue": {
            "$ref": "#/$defs/Parameter"
          }
        },
        "type": "object"
      },
      "Zone": {
        "description": "Represents a Google Tag Manager Zone's contents.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "boundary": {
            "$ref": "#/$defs/ZoneBoundary"
          },
          "childContainer": {
            "description": "Containers that are children of this Zone.",
            "items": {
              "$ref": "#/$defs/ZoneChildContainer"
            },
            "type": "array"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Zone as computed at storage time. This value is recomputed whenever the zone is modified.",
            "type": "string"
          },
          "name": {
            "description": "Zone display name.",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this zone in the container.",
            "type": "string"
          },
          "path": {
            "description": "GTM Zone's API relative path.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "typeRestriction": {
            "$ref": "#/$defs/ZoneTypeRestriction"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          },
          "zoneId": {
            "description": "The Zone ID uniquely identifies the GTM Zone.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ZoneBoundary": {
        "description": "Represents a Zone's boundaries.",
        "properties": {
          "condition": {
            "description": "The conditions that, when conjoined, make up the boundary.",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "customEvaluationTriggerId": {
            "description": "Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ZoneChildContainer": {
        "description": "Represents a child container of a Zone.",
        "properties": {
          "nickname": {
            "description": "The zone's nickname for the child container.",
            "type": "string"
          },
          "publicId": {
            "description": "The child container's public id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ZoneTypeRestriction": {
        "description": "Represents a Zone's type restrictions.",
        "properties": {
          "enable": {
            "description": "True if type restrictions have been enabled for this Zone.",
            "type": "boolean"
          },
          "whitelistedTypeId": {
            "description": "List of type public ids that have been whitelisted for use in this Zone.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://tagmanager.googleapis.com//tagmanager/v2/{path}:resolve_conflict{?fingerprint,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {}
}
