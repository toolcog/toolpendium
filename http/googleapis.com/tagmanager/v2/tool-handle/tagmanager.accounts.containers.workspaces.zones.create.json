{
  "name": "tagmanager_accounts_containers_workspaces_zones_create",
  "description": "Creates a GTM Zone.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "GTM Workspace's API relative path. Example: accounts/{account_id}/containers/{container_id}/workspaces/{workspace_id}"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Zone"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Zone": {
        "description": "Represents a Google Tag Manager Zone's contents.",
        "properties": {
          "accountId": {
            "description": "GTM Account ID.",
            "type": "string"
          },
          "boundary": {
            "$ref": "#/$defs/ZoneBoundary"
          },
          "childContainer": {
            "description": "Containers that are children of this Zone.",
            "items": {
              "$ref": "#/$defs/ZoneChildContainer"
            },
            "type": "array"
          },
          "containerId": {
            "description": "GTM Container ID.",
            "type": "string"
          },
          "fingerprint": {
            "description": "The fingerprint of the GTM Zone as computed at storage time. This value is recomputed whenever the zone is modified.",
            "type": "string"
          },
          "name": {
            "description": "Zone display name.",
            "type": "string"
          },
          "notes": {
            "description": "User notes on how to apply this zone in the container.",
            "type": "string"
          },
          "path": {
            "description": "GTM Zone's API relative path.",
            "type": "string"
          },
          "tagManagerUrl": {
            "description": "Auto generated link to the tag manager UI",
            "type": "string"
          },
          "typeRestriction": {
            "$ref": "#/$defs/ZoneTypeRestriction"
          },
          "workspaceId": {
            "description": "GTM Workspace ID.",
            "type": "string"
          },
          "zoneId": {
            "description": "The Zone ID uniquely identifies the GTM Zone.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ZoneBoundary": {
        "description": "Represents a Zone's boundaries.",
        "properties": {
          "condition": {
            "description": "The conditions that, when conjoined, make up the boundary.",
            "items": {
              "$ref": "#/$defs/Condition"
            },
            "type": "array"
          },
          "customEvaluationTriggerId": {
            "description": "Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Condition": {
        "description": "Represents a predicate.",
        "properties": {
          "parameter": {
            "description": "A list of named parameters (key/value), depending on the condition's type. Notes: - For binary operators, include parameters named arg0 and arg1 for specifying the left and right operands, respectively. - At this time, the left operand (arg0) must be a reference to a variable. - For case-insensitive Regex matching, include a boolean parameter named ignore_case that is set to true. If not specified or set to any other value, the matching will be case sensitive. - To negate an operator, include a boolean parameter named negate boolean parameter that is set to true. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "The type of operator for this condition. @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update",
            "enum": [
              "conditionTypeUnspecified",
              "equals",
              "contains",
              "startsWith",
              "endsWith",
              "matchRegex",
              "greater",
              "greaterOrEquals",
              "less",
              "lessOrEquals",
              "cssSelector",
              "urlMatches"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Parameter": {
        "description": "Represents a Google Tag Manager Parameter.",
        "properties": {
          "isWeakReference": {
            "description": "Whether or not a reference type parameter is strongly or weakly referenced. Only used by Transformations. @mutable tagmanager.accounts.containers.workspaces.transformations.create @mutable tagmanager.accounts.containers.workspaces.transformations.update",
            "type": "boolean"
          },
          "key": {
            "description": "The named key that uniquely identifies a parameter. Required for top-level parameters, as well as map values. Ignored for list values. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          },
          "list": {
            "description": "This list parameter's parameters (keys will be ignored). @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "map": {
            "description": "This map parameter's parameters (must have keys; keys must be unique). @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "items": {
              "$ref": "#/$defs/Parameter"
            },
            "type": "array"
          },
          "type": {
            "description": "The parameter type. Valid values are: - boolean: The value represents a boolean, represented as 'true' or 'false' - integer: The value represents a 64-bit signed integer value, in base 10 - list: A list of parameters should be specified - map: A map of parameters should be specified - template: The value represents any text; this can include variable references (even variable references that might return non-string types) - trigger_reference: The value represents a trigger, represented as the trigger id - tag_reference: The value represents a tag, represented as the tag name @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "enum": [
              "typeUnspecified",
              "template",
              "integer",
              "boolean",
              "list",
              "map",
              "triggerReference",
              "tagReference"
            ],
            "type": "string"
          },
          "value": {
            "description": "A parameter's value (may contain variable references such as \"{{myVariable}}\") as appropriate to the specified type. @mutable tagmanager.accounts.containers.workspaces.variables.create @mutable tagmanager.accounts.containers.workspaces.variables.update @mutable tagmanager.accounts.containers.workspaces.triggers.create @mutable tagmanager.accounts.containers.workspaces.triggers.update @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ZoneChildContainer": {
        "description": "Represents a child container of a Zone.",
        "properties": {
          "nickname": {
            "description": "The zone's nickname for the child container.",
            "type": "string"
          },
          "publicId": {
            "description": "The child container's public id.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ZoneTypeRestriction": {
        "description": "Represents a Zone's type restrictions.",
        "properties": {
          "enable": {
            "description": "True if type restrictions have been enabled for this Zone.",
            "type": "boolean"
          },
          "whitelistedTypeId": {
            "description": "List of type public ids that have been whitelisted for use in this Zone.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://tagmanager.googleapis.com//tagmanager/v2/{parent}/zones{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a Google Tag Manager Zone's contents.",
        "**Key properties:**",
        {
          "$ul": [
            "**accountId**: GTM Account ID.",
            [
              "**boundary**: Represents a Zone's boundaries.",
              {
                "$ul": [
                  "**condition**: The conditions that, when conjoined, make up the boundary.",
                  "**customEvaluationTriggerId**: Custom evaluation trigger IDs. A zone will evaluate its boundary conditions when any of the listed triggers are true."
                ]
              }
            ],
            "**childContainer**: Containers that are children of this Zone.",
            "**containerId**: GTM Container ID.",
            "**fingerprint**: The fingerprint of the GTM Zone as computed at storage time. This value is recomputed whenever the zone is modified.",
            "**name**: Zone display name.",
            "**notes**: User notes on how to apply this zone in the container.",
            "**path**: GTM Zone's API relative path.",
            "**tagManagerUrl**: Auto generated link to the tag manager UI",
            [
              "**typeRestriction**: Represents a Zone's type restrictions.",
              {
                "$ul": [
                  "**enable**: True if type restrictions have been enabled for this Zone.",
                  "**whitelistedTypeId**: List of type public ids that have been whitelisted for use in this Zone."
                ]
              }
            ],
            "**workspaceId**: GTM Workspace ID.",
            "**zoneId**: The Zone ID uniquely identifies the GTM Zone."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
