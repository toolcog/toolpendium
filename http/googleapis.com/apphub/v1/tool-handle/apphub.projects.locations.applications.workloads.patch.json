{
  "name": "apphub_projects_locations_applications_workloads_patch",
  "description": "Updates a Workload in an Application.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Identifier. The resource name of the Workload. Format: \"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}\""
      },
      "requestId": {
        "type": "string",
        "description": "Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000)."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. Field mask is used to specify the fields to be overwritten in the Workload resource by the update. The fields specified in the update_mask are relative to the resource, not the full request. The API changes the values of the fields as specified in the update_mask. The API ignores the values of all fields not covered by the update_mask. You can also unset a field by not specifying it in the updated message, but adding the field to the mask. This clears whatever value the field previously had."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Workload"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Workload": {
        "description": "Workload is an App Hub data model that contains a discovered workload, which represents a binary deployment (such as managed instance groups (MIGs) and GKE deployments) that performs the smallest logical subset of business functionality.",
        "properties": {
          "attributes": {
            "$ref": "#/$defs/Attributes"
          },
          "createTime": {
            "description": "Output only. Create time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. User-defined description of a Workload. Can have a maximum length of 2048 characters.",
            "type": "string"
          },
          "discoveredWorkload": {
            "description": "Required. Immutable. The resource name of the original discovered workload.",
            "type": "string"
          },
          "displayName": {
            "description": "Optional. User-defined name for the Workload. Can have a maximum length of 63 characters.",
            "type": "string"
          },
          "name": {
            "description": "Identifier. The resource name of the Workload. Format: \"projects/{host-project-id}/locations/{location}/applications/{application-id}/workloads/{workload-id}\"",
            "type": "string"
          },
          "state": {
            "description": "Output only. Workload state.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "ACTIVE",
              "DELETING",
              "DETACHED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "uid": {
            "description": "Output only. A universally unique identifier (UUID) for the `Workload` in the UUID4 format.",
            "readOnly": true,
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. Update time.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "workloadProperties": {
            "$ref": "#/$defs/WorkloadProperties"
          },
          "workloadReference": {
            "$ref": "#/$defs/WorkloadReference"
          }
        },
        "type": "object"
      },
      "Attributes": {
        "description": "Consumer provided attributes.",
        "properties": {
          "businessOwners": {
            "description": "Optional. Business team that ensures user needs are met and value is delivered",
            "items": {
              "$ref": "#/$defs/ContactInfo"
            },
            "type": "array"
          },
          "criticality": {
            "$ref": "#/$defs/Criticality"
          },
          "developerOwners": {
            "description": "Optional. Developer team that owns development and coding.",
            "items": {
              "$ref": "#/$defs/ContactInfo"
            },
            "type": "array"
          },
          "environment": {
            "$ref": "#/$defs/Environment"
          },
          "operatorOwners": {
            "description": "Optional. Operator team that ensures runtime and operations.",
            "items": {
              "$ref": "#/$defs/ContactInfo"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ContactInfo": {
        "description": "Contact information of stakeholders.",
        "properties": {
          "displayName": {
            "description": "Optional. Contact's name. Can have a maximum length of 63 characters.",
            "type": "string"
          },
          "email": {
            "description": "Required. Email address of the contacts.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Criticality": {
        "description": "Criticality of the Application, Service, or Workload",
        "properties": {
          "type": {
            "description": "Required. Criticality Type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "MISSION_CRITICAL",
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "Environment": {
        "description": "Environment of the Application, Service, or Workload",
        "properties": {
          "type": {
            "description": "Required. Environment Type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "PRODUCTION",
              "STAGING",
              "TEST",
              "DEVELOPMENT"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkloadProperties": {
        "description": "Properties of an underlying compute resource represented by the Workload.",
        "properties": {
          "gcpProject": {
            "description": "Output only. The service project identifier that the underlying cloud resource resides in. Empty for non cloud resources.",
            "readOnly": true,
            "type": "string"
          },
          "location": {
            "description": "Output only. The location that the underlying compute resource resides in (e.g us-west1).",
            "readOnly": true,
            "type": "string"
          },
          "zone": {
            "description": "Output only. The location that the underlying compute resource resides in if it is zonal (e.g us-west1-a).",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "WorkloadReference": {
        "description": "Reference of an underlying compute resource represented by the Workload.",
        "properties": {
          "uri": {
            "description": "Output only. The underlying compute resource uri.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://apphub.googleapis.com//v1/{name}{?requestId,updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
