{
  "name": "clouddebugger_controller_debuggees_register",
  "description": "Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the `debuggee_id` format. Agents must handle `debuggee_id` value changing upon re-registration.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/RegisterDebuggeeRequest"
      }
    },
    "$defs": {
      "RegisterDebuggeeRequest": {
        "description": "Request to register a debuggee.",
        "properties": {
          "debuggee": {
            "$ref": "#/$defs/Debuggee"
          }
        },
        "type": "object"
      },
      "Debuggee": {
        "description": "Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.",
        "properties": {
          "agentVersion": {
            "description": "Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).",
            "type": "string"
          },
          "canaryMode": {
            "description": "Used when setting breakpoint canary for this debuggee.",
            "enum": [
              "CANARY_MODE_UNSPECIFIED",
              "CANARY_MODE_ALWAYS_ENABLED",
              "CANARY_MODE_ALWAYS_DISABLED",
              "CANARY_MODE_DEFAULT_ENABLED",
              "CANARY_MODE_DEFAULT_DISABLED"
            ],
            "type": "string"
          },
          "description": {
            "description": "Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.",
            "type": "string"
          },
          "extSourceContexts": {
            "deprecated": true,
            "description": "References to the locations and revisions of the source code used in the deployed application.",
            "items": {
              "$ref": "#/$defs/ExtendedSourceContext"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the debuggee generated by the controller service.",
            "type": "string"
          },
          "isDisabled": {
            "description": "If set to `true`, indicates that the agent should disable itself and detach from the debuggee.",
            "type": "boolean"
          },
          "isInactive": {
            "description": "If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of custom debuggee properties, populated by the agent, to be displayed to the user.",
            "type": "object"
          },
          "project": {
            "description": "Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.",
            "type": "string"
          },
          "sourceContexts": {
            "description": "References to the locations and revisions of the source code used in the deployed application.",
            "items": {
              "$ref": "#/$defs/SourceContext"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/$defs/StatusMessage"
          },
          "uniquifier": {
            "description": "Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtendedSourceContext": {
        "description": "An ExtendedSourceContext is a SourceContext combined with additional details describing the context.",
        "properties": {
          "context": {
            "$ref": "#/$defs/SourceContext"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels with user defined metadata.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "SourceContext": {
        "description": "A SourceContext is a reference to a tree of files. A SourceContext together with a path point to a unique revision of a single file or directory.",
        "properties": {
          "cloudRepo": {
            "$ref": "#/$defs/CloudRepoSourceContext"
          },
          "cloudWorkspace": {
            "$ref": "#/$defs/CloudWorkspaceSourceContext"
          },
          "gerrit": {
            "$ref": "#/$defs/GerritSourceContext"
          },
          "git": {
            "$ref": "#/$defs/GitSourceContext"
          }
        },
        "type": "object"
      },
      "CloudRepoSourceContext": {
        "description": "A CloudRepoSourceContext denotes a particular revision in a cloud repo (a repo hosted by the Google Cloud Platform).",
        "properties": {
          "aliasContext": {
            "$ref": "#/$defs/AliasContext"
          },
          "aliasName": {
            "deprecated": true,
            "description": "The name of an alias (branch, tag, etc.).",
            "type": "string"
          },
          "repoId": {
            "$ref": "#/$defs/RepoId"
          },
          "revisionId": {
            "description": "A revision ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AliasContext": {
        "description": "An alias to a repo revision.",
        "properties": {
          "kind": {
            "description": "The alias kind.",
            "enum": [
              "ANY",
              "FIXED",
              "MOVABLE",
              "OTHER"
            ],
            "type": "string"
          },
          "name": {
            "description": "The alias name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RepoId": {
        "description": "A unique identifier for a cloud repo.",
        "properties": {
          "projectRepoId": {
            "$ref": "#/$defs/ProjectRepoId"
          },
          "uid": {
            "description": "A server-assigned, globally unique identifier.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProjectRepoId": {
        "description": "Selects a repo using a Google Cloud Platform project ID (e.g. winged-cargo-31) and a repo name within that project.",
        "properties": {
          "projectId": {
            "description": "The ID of the project.",
            "type": "string"
          },
          "repoName": {
            "description": "The name of the repo. Leave empty for the default repo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CloudWorkspaceSourceContext": {
        "description": "A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.",
        "properties": {
          "snapshotId": {
            "description": "The ID of the snapshot. An empty snapshot_id refers to the most recent snapshot.",
            "type": "string"
          },
          "workspaceId": {
            "$ref": "#/$defs/CloudWorkspaceId"
          }
        },
        "type": "object"
      },
      "CloudWorkspaceId": {
        "description": "A CloudWorkspaceId is a unique identifier for a cloud workspace. A cloud workspace is a place associated with a repo where modified files can be stored before they are committed.",
        "properties": {
          "name": {
            "description": "The unique name of the workspace within the repo. This is the name chosen by the client in the Source API's CreateWorkspace method.",
            "type": "string"
          },
          "repoId": {
            "$ref": "#/$defs/RepoId"
          }
        },
        "type": "object"
      },
      "GerritSourceContext": {
        "description": "A SourceContext referring to a Gerrit project.",
        "properties": {
          "aliasContext": {
            "$ref": "#/$defs/AliasContext"
          },
          "aliasName": {
            "deprecated": true,
            "description": "The name of an alias (branch, tag, etc.).",
            "type": "string"
          },
          "gerritProject": {
            "description": "The full project name within the host. Projects may be nested, so \"project/subproject\" is a valid project name. The \"repo name\" is hostURI/project.",
            "type": "string"
          },
          "hostUri": {
            "description": "The URI of a running Gerrit instance.",
            "type": "string"
          },
          "revisionId": {
            "description": "A revision (commit) ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GitSourceContext": {
        "description": "A GitSourceContext denotes a particular revision in a third party Git repository (e.g. GitHub).",
        "properties": {
          "revisionId": {
            "description": "Git commit hash. required.",
            "type": "string"
          },
          "url": {
            "description": "Git repository URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatusMessage": {
        "description": "Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
        "properties": {
          "description": {
            "$ref": "#/$defs/FormatMessage"
          },
          "isError": {
            "description": "Distinguishes errors from informational messages.",
            "type": "boolean"
          },
          "refersTo": {
            "description": "Reference to which the message applies.",
            "enum": [
              "UNSPECIFIED",
              "BREAKPOINT_SOURCE_LOCATION",
              "BREAKPOINT_CONDITION",
              "BREAKPOINT_EXPRESSION",
              "BREAKPOINT_AGE",
              "BREAKPOINT_CANARY_FAILED",
              "VARIABLE_NAME",
              "VARIABLE_VALUE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatMessage": {
        "description": "Represents a message with parameters.",
        "properties": {
          "format": {
            "description": "Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`",
            "type": "string"
          },
          "parameters": {
            "description": "Optional parameters to be embedded into the message.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://clouddebugger.googleapis.com//v2/controller/debuggees/register{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response for registering a debuggee.",
        "**Key properties:**",
        {
          "$ul": [
            "**agentId**: A unique ID generated for the agent. Each RegisterDebuggee request will generate a new agent ID.",
            [
              "**debuggee**: Represents the debugged application. The application may include one or more replicated processes executing the same code. Each of these processes is attached with a debugger agent, carrying out the debugging commands. Agents attached to the same debuggee identify themselves as such by using exactly the same Debuggee message value when registering.",
              {
                "$ul": [
                  "**agentVersion**: Version ID of the agent. Schema: `domain/language-platform/vmajor.minor` (for example `google.com/java-gcp/v1.1`).",
                  "**canaryMode**: Used when setting breakpoint canary for this debuggee.",
                  "**description**: Human readable description of the debuggee. Including a human-readable project name, environment name and version information is recommended.",
                  "**extSourceContexts**: References to the locations and revisions of the source code used in the deployed application.",
                  "**id**: Unique identifier for the debuggee generated by the controller service.",
                  "**isDisabled**: If set to `true`, indicates that the agent should disable itself and detach from the debuggee.",
                  "**isInactive**: If set to `true`, indicates that Controller service does not detect any activity from the debuggee agents and the application is possibly stopped.",
                  "**labels**: A set of custom debuggee properties, populated by the agent, to be displayed to the user.",
                  "**project**: Project the debuggee is associated with. Use project number or id when registering a Google Cloud Platform project.",
                  "**sourceContexts**: References to the locations and revisions of the source code used in the deployed application.",
                  [
                    "**status**: Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
                    {
                      "$ul": [
                        [
                          "**description**: Represents a message with parameters.",
                          {
                            "$ul": [
                              "**format**: Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`",
                              "**parameters**: Optional parameters to be embedded into the message."
                            ]
                          }
                        ],
                        "**isError**: Distinguishes errors from informational messages.",
                        "**refersTo**: Reference to which the message applies."
                      ]
                    }
                  ],
                  "**uniquifier**: Uniquifier to further distinguish the application. It is possible that different applications might have identical values in the debuggee message, thus, incorrectly identified as a single application by the Controller service. This field adds salt to further distinguish the application. Agents should consider seeding this field with value that identifies the code, binary, configuration and environment."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
