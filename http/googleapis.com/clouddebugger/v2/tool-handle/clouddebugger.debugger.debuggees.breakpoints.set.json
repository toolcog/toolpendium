{
  "name": "clouddebugger_debugger_debuggees_breakpoints_set",
  "description": "Sets the breakpoint to the debuggee.",
  "parameters": {
    "type": "object",
    "properties": {
      "debuggeeId": {
        "type": "string",
        "description": "Required. ID of the debuggee where the breakpoint is to be set."
      },
      "canaryOption": {
        "enum": [
          "CANARY_OPTION_UNSPECIFIED",
          "CANARY_OPTION_TRY_ENABLE",
          "CANARY_OPTION_TRY_DISABLE"
        ],
        "type": "string",
        "description": "The canary option set by the user upon setting breakpoint."
      },
      "clientVersion": {
        "type": "string",
        "description": "Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Breakpoint"
      }
    },
    "required": [
      "debuggeeId"
    ],
    "$defs": {
      "Breakpoint": {
        "description": "------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.",
        "properties": {
          "action": {
            "description": "Action that the agent should perform when the code at the breakpoint location is hit.",
            "enum": [
              "CAPTURE",
              "LOG"
            ],
            "type": "string"
          },
          "canaryExpireTime": {
            "description": "The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state.",
            "format": "google-datetime",
            "type": "string"
          },
          "condition": {
            "description": "Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location.",
            "type": "string"
          },
          "createTime": {
            "description": "Time this breakpoint was created by the server in seconds resolution.",
            "format": "google-datetime",
            "type": "string"
          },
          "evaluatedExpressions": {
            "description": "Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.",
            "items": {
              "$ref": "#/$defs/Variable"
            },
            "type": "array"
          },
          "expressions": {
            "description": "List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "finalTime": {
            "description": "Time this breakpoint was finalized as seen by the server in seconds resolution.",
            "format": "google-datetime",
            "type": "string"
          },
          "id": {
            "description": "Breakpoint identifier, unique in the scope of the debuggee.",
            "type": "string"
          },
          "isFinalState": {
            "description": "When true, indicates that this is a final result and the breakpoint state will not change from here on.",
            "type": "boolean"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "A set of custom breakpoint properties, populated by the agent, to be displayed to the user.",
            "type": "object"
          },
          "location": {
            "$ref": "#/$defs/SourceLocation"
          },
          "logLevel": {
            "description": "Indicates the severity of the log. Only relevant when action is `LOG`.",
            "enum": [
              "INFO",
              "WARNING",
              "ERROR"
            ],
            "type": "string"
          },
          "logMessageFormat": {
            "description": "Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`.",
            "type": "string"
          },
          "stackFrames": {
            "description": "The stack at breakpoint time, where stack_frames[0] represents the most recently entered function.",
            "items": {
              "$ref": "#/$defs/StackFrame"
            },
            "type": "array"
          },
          "state": {
            "description": "The current state of the breakpoint.",
            "enum": [
              "STATE_UNSPECIFIED",
              "STATE_CANARY_PENDING_AGENTS",
              "STATE_CANARY_ACTIVE",
              "STATE_ROLLING_TO_ALL",
              "STATE_IS_FINAL"
            ],
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/StatusMessage"
          },
          "userEmail": {
            "description": "E-mail address of the user that created this breakpoint",
            "type": "string"
          },
          "variableTable": {
            "description": "The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable.",
            "items": {
              "$ref": "#/$defs/Variable"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Variable": {
        "description": "Represents a variable or an argument possibly of a compound object type. Note how the following variables are represented: 1) A simple variable: int x = 5 { name: \"x\", value: \"5\", type: \"int\" } // Captured variable 2) A compound object: struct T { int m1; int m2; }; T x = { 3, 7 }; { // Captured variable name: \"x\", type: \"T\", members { name: \"m1\", value: \"3\", type: \"int\" }, members { name: \"m2\", value: \"7\", type: \"int\" } } 3) A pointer where the pointee was captured: T x = { 3, 7 }; T* p = &x; { // Captured variable name: \"p\", type: \"T*\", value: \"0x00500500\", members { name: \"m1\", value: \"3\", type: \"int\" }, members { name: \"m2\", value: \"7\", type: \"int\" } } 4) A pointer where the pointee was not captured: T* p = new T; { // Captured variable name: \"p\", type: \"T*\", value: \"0x00400400\" status { is_error: true, description { format: \"unavailable\" } } } The status should describe the reason for the missing value, such as ``, ``, ``. Note that a null pointer should not have members. 5) An unnamed value: int* p = new int(7); { // Captured variable name: \"p\", value: \"0x00500500\", type: \"int*\", members { value: \"7\", type: \"int\" } } 6) An unnamed pointer where the pointee was not captured: int* p = new int(7); int** pp = &p; { // Captured variable name: \"pp\", value: \"0x00500500\", type: \"int**\", members { value: \"0x00400400\", type: \"int*\" status { is_error: true, description: { format: \"unavailable\" } } } } } To optimize computation, memory and network traffic, variables that repeat in the output multiple times can be stored once in a shared variable table and be referenced using the `var_table_index` field. The variables stored in the shared table are nameless and are essentially a partition of the complete variable. To reconstruct the complete variable, merge the referencing variable with the referenced variable. When using the shared variable table, the following variables: T x = { 3, 7 }; T* p = &x; T& r = x; { name: \"x\", var_table_index: 3, type: \"T\" } // Captured variables { name: \"p\", value \"0x00500500\", type=\"T*\", var_table_index: 3 } { name: \"r\", type=\"T&\", var_table_index: 3 } { // Shared variable table entry #3: members { name: \"m1\", value: \"3\", type: \"int\" }, members { name: \"m2\", value: \"7\", type: \"int\" } } Note that the pointer address is stored with the referencing variable and not with the referenced variable. This allows the referenced variable to be shared between pointers and references. The type field is optional. The debugger agent may or may not support it.",
        "properties": {
          "members": {
            "description": "Members contained or pointed to by the variable.",
            "items": {
              "$ref": "#/$defs/Variable"
            },
            "type": "array"
          },
          "name": {
            "description": "Name of the variable, if any.",
            "type": "string"
          },
          "status": {
            "$ref": "#/$defs/StatusMessage"
          },
          "type": {
            "description": "Variable type (e.g. `MyClass`). If the variable is split with `var_table_index`, `type` goes next to `value`. The interpretation of a type is agent specific. It is recommended to include the dynamic type rather than a static type of an object.",
            "type": "string"
          },
          "value": {
            "description": "Simple value of the variable.",
            "type": "string"
          },
          "varTableIndex": {
            "description": "Reference to a variable in the shared variable table. More than one variable can reference the same variable in the table. The `var_table_index` field is an index into `variable_table` in Breakpoint.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "StatusMessage": {
        "description": "Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
        "properties": {
          "description": {
            "$ref": "#/$defs/FormatMessage"
          },
          "isError": {
            "description": "Distinguishes errors from informational messages.",
            "type": "boolean"
          },
          "refersTo": {
            "description": "Reference to which the message applies.",
            "enum": [
              "UNSPECIFIED",
              "BREAKPOINT_SOURCE_LOCATION",
              "BREAKPOINT_CONDITION",
              "BREAKPOINT_EXPRESSION",
              "BREAKPOINT_AGE",
              "BREAKPOINT_CANARY_FAILED",
              "VARIABLE_NAME",
              "VARIABLE_VALUE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatMessage": {
        "description": "Represents a message with parameters.",
        "properties": {
          "format": {
            "description": "Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`",
            "type": "string"
          },
          "parameters": {
            "description": "Optional parameters to be embedded into the message.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "SourceLocation": {
        "description": "Represents a location in the source code.",
        "properties": {
          "column": {
            "description": "Column within a line. The first column in a line as the value `1`. Agents that do not support setting breakpoints on specific columns ignore this field.",
            "format": "int32",
            "type": "integer"
          },
          "line": {
            "description": "Line inside the file. The first line in the file has the value `1`.",
            "format": "int32",
            "type": "integer"
          },
          "path": {
            "description": "Path to the source file within the source context of the target binary.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StackFrame": {
        "description": "Represents a stack frame context.",
        "properties": {
          "arguments": {
            "description": "Set of arguments passed to this function. Note that this might not be populated for all stack frames.",
            "items": {
              "$ref": "#/$defs/Variable"
            },
            "type": "array"
          },
          "function": {
            "description": "Demangled function name at the call site.",
            "type": "string"
          },
          "locals": {
            "description": "Set of local variables at the stack frame location. Note that this might not be populated for all stack frames.",
            "items": {
              "$ref": "#/$defs/Variable"
            },
            "type": "array"
          },
          "location": {
            "$ref": "#/$defs/SourceLocation"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://clouddebugger.googleapis.com//v2/debugger/debuggees/{debuggeeId}/breakpoints/set{?canaryOption,clientVersion,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response for setting a breakpoint.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**breakpoint**: ------------------------------------------------------------------------------ ## Breakpoint (the resource) Represents the breakpoint specification, status and results.",
              {
                "$ul": [
                  "**action**: Action that the agent should perform when the code at the breakpoint location is hit.",
                  "**canaryExpireTime**: The deadline for the breakpoint to stay in CANARY_ACTIVE state. The value is meaningless when the breakpoint is not in CANARY_ACTIVE state.",
                  "**condition**: Condition that triggers the breakpoint. The condition is a compound boolean expression composed using expressions in a programming language at the source location.",
                  "**createTime**: Time this breakpoint was created by the server in seconds resolution.",
                  "**evaluatedExpressions**: Values of evaluated expressions at breakpoint time. The evaluated expressions appear in exactly the same order they are listed in the `expressions` field. The `name` field holds the original expression text, the `value` or `members` field holds the result of the evaluated expression. If the expression cannot be evaluated, the `status` inside the `Variable` will indicate an error and contain the error text.",
                  "**expressions**: List of read-only expressions to evaluate at the breakpoint location. The expressions are composed using expressions in the programming language at the source location. If the breakpoint action is `LOG`, the evaluated expressions are included in log statements.",
                  "**finalTime**: Time this breakpoint was finalized as seen by the server in seconds resolution.",
                  "**id**: Breakpoint identifier, unique in the scope of the debuggee.",
                  "**isFinalState**: When true, indicates that this is a final result and the breakpoint state will not change from here on.",
                  "**labels**: A set of custom breakpoint properties, populated by the agent, to be displayed to the user.",
                  [
                    "**location**: Represents a location in the source code.",
                    {
                      "$ul": [
                        "**column**: Column within a line. The first column in a line as the value `1`. Agents that do not support setting breakpoints on specific columns ignore this field.",
                        "**line**: Line inside the file. The first line in the file has the value `1`.",
                        "**path**: Path to the source file within the source context of the target binary."
                      ]
                    }
                  ],
                  "**logLevel**: Indicates the severity of the log. Only relevant when action is `LOG`.",
                  "**logMessageFormat**: Only relevant when action is `LOG`. Defines the message to log when the breakpoint hits. The message may include parameter placeholders `$0`, `$1`, etc. These placeholders are replaced with the evaluated value of the appropriate expression. Expressions not referenced in `log_message_format` are not logged. Example: `Message received, id = $0, count = $1` with `expressions` = `[ message.id, message.count ]`.",
                  "**stackFrames**: The stack at breakpoint time, where stack_frames[0] represents the most recently entered function.",
                  "**state**: The current state of the breakpoint.",
                  [
                    "**status**: Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.",
                    {
                      "$ul": [
                        [
                          "**description**: Represents a message with parameters.",
                          {
                            "$ul": [
                              "**format**: Format template for the message. The `format` uses placeholders `$0`, `$1`, etc. to reference parameters. `$$` can be used to denote the `$` character. Examples: * `Failed to load '$0' which helps debug $1 the first time it is loaded. Again, $0 is very important.` * `Please pay $$10 to use $0 instead of $1.`",
                              "**parameters**: Optional parameters to be embedded into the message."
                            ]
                          }
                        ],
                        "**isError**: Distinguishes errors from informational messages.",
                        "**refersTo**: Reference to which the message applies."
                      ]
                    }
                  ],
                  "**userEmail**: E-mail address of the user that created this breakpoint",
                  "**variableTable**: The `variable_table` exists to aid with computation, memory and network traffic optimization. It enables storing a variable once and reference it from multiple variables, including variables stored in the `variable_table` itself. For example, the same `this` object, which may appear at many levels of the stack, can have all of its data stored once in this table. The stack frame variables then would hold only a reference to it. The variable `var_table_index` field is an index into this repeated field. The stored objects are nameless and get their name from the referencing variable. The effective variable is a merge of the referencing variable and the referenced variable."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
