{
  "name": "clouddebugger_debugger_debuggees_breakpoints_list",
  "description": "Lists all breakpoints for the debuggee.",
  "parameters": {
    "type": "object",
    "properties": {
      "debuggeeId": {
        "type": "string",
        "description": "Required. ID of the debuggee whose breakpoints to list."
      },
      "action.value": {
        "enum": [
          "CAPTURE",
          "LOG"
        ],
        "type": "string",
        "description": "Only breakpoints with the specified action will pass the filter."
      },
      "clientVersion": {
        "type": "string",
        "description": "Required. The client version making the call. Schema: `domain/type/version` (e.g., `google.com/intellij/v1`)."
      },
      "includeAllUsers": {
        "type": "boolean",
        "description": "When set to `true`, the response includes the list of breakpoints set by any user. Otherwise, it includes only breakpoints set by the caller."
      },
      "includeInactive": {
        "type": "boolean",
        "description": "When set to `true`, the response includes active and inactive breakpoints. Otherwise, it includes only active breakpoints."
      },
      "stripResults": {
        "type": "boolean",
        "description": "This field is deprecated. The following fields are always stripped out of the result: `stack_frames`, `evaluated_expressions` and `variable_table`."
      },
      "waitToken": {
        "type": "string",
        "description": "A wait token that, if specified, blocks the call until the breakpoints list has changed, or a server selected timeout has expired. The value should be set from the last response. The error code `google.rpc.Code.ABORTED` (RPC) is returned on wait timeout, which should be called again with the same `wait_token`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "debuggeeId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://clouddebugger.googleapis.com//v2/debugger/debuggees/{debuggeeId}/breakpoints{?action.value,clientVersion,includeAllUsers,includeInactive,stripResults,waitToken,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response for listing breakpoints.",
        "**Key properties:**",
        {
          "$ul": [
            "**breakpoints**: List of breakpoints matching the request. The fields `id` and `location` are guaranteed to be set on each breakpoint. The fields: `stack_frames`, `evaluated_expressions` and `variable_table` are cleared on each breakpoint regardless of its status.",
            "**nextWaitToken**: A wait token that can be used in the next call to `list` (REST) or `ListBreakpoints` (RPC) to block until the list of breakpoints has changes."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
