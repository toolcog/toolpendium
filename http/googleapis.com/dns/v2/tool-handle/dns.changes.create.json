{
  "name": "dns_changes_create",
  "description": "Atomically updates the ResourceRecordSet collection.",
  "parameters": {
    "type": "object",
    "properties": {
      "project": {
        "type": "string",
        "description": "Identifies the project addressed by this request."
      },
      "location": {
        "type": "string"
      },
      "managedZone": {
        "type": "string",
        "description": "Identifies the managed zone addressed by this request. Can be the managed zone name or ID."
      },
      "clientOperationId": {
        "type": "string",
        "description": "For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Change"
      }
    },
    "required": [
      "project",
      "location",
      "managedZone"
    ],
    "$defs": {
      "Change": {
        "description": "A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.",
        "properties": {
          "additions": {
            "description": "Which ResourceRecordSets to add?",
            "items": {
              "$ref": "#/$defs/ResourceRecordSet"
            },
            "type": "array"
          },
          "deletions": {
            "description": "Which ResourceRecordSets to remove? Must match existing data exactly.",
            "items": {
              "$ref": "#/$defs/ResourceRecordSet"
            },
            "type": "array"
          },
          "id": {
            "description": "Unique identifier for the resource; defined by the server (output only).",
            "type": "string"
          },
          "isServing": {
            "description": "If the DNS queries for the zone will be served.",
            "type": "boolean"
          },
          "kind": {
            "default": "dns#change",
            "type": "string"
          },
          "startTime": {
            "description": "The time that this operation was started by the server (output only). This is in RFC3339 text format.",
            "type": "string"
          },
          "status": {
            "description": "Status of the operation (output only). A status of \"done\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.",
            "enum": [
              "PENDING",
              "DONE"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ResourceRecordSet": {
        "description": "A unit of data that is returned by the DNS servers.",
        "properties": {
          "kind": {
            "default": "dns#resourceRecordSet",
            "type": "string"
          },
          "name": {
            "description": "For example, www.example.com.",
            "type": "string"
          },
          "routingPolicy": {
            "$ref": "#/$defs/RRSetRoutingPolicy"
          },
          "rrdatas": {
            "description": "As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "signatureRrdatas": {
            "description": "As defined in RFC 4034 (section 3.2).",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ttl": {
            "description": "Number of seconds that this ResourceRecordSet can be cached by resolvers.",
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "description": "The identifier of a supported record type. See the list of Supported DNS record types.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicy": {
        "description": "A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.",
        "properties": {
          "geo": {
            "$ref": "#/$defs/RRSetRoutingPolicyGeoPolicy"
          },
          "healthCheck": {
            "description": "The selfLink attribute of the HealthCheck resource to use for this RRSetRoutingPolicy. https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks",
            "type": "string"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicy",
            "type": "string"
          },
          "primaryBackup": {
            "$ref": "#/$defs/RRSetRoutingPolicyPrimaryBackupPolicy"
          },
          "wrr": {
            "$ref": "#/$defs/RRSetRoutingPolicyWrrPolicy"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyGeoPolicy": {
        "description": "Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.",
        "properties": {
          "enableFencing": {
            "description": "Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.",
            "type": "boolean"
          },
          "items": {
            "description": "The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.",
            "items": {
              "$ref": "#/$defs/RRSetRoutingPolicyGeoPolicyGeoPolicyItem"
            },
            "type": "array"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicyGeoPolicy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyGeoPolicyGeoPolicyItem": {
        "description": "ResourceRecordSet data for one geo location.",
        "properties": {
          "healthCheckedTargets": {
            "$ref": "#/$defs/RRSetRoutingPolicyHealthCheckTargets"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem",
            "type": "string"
          },
          "location": {
            "description": "The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. \"us-east1\", \"southamerica-east1\", \"asia-east1\", etc.",
            "type": "string"
          },
          "rrdatas": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "signatureRrdatas": {
            "description": "DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyHealthCheckTargets": {
        "description": "HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Only one of internal_load_balancer and external_endpoints should be set.",
        "properties": {
          "externalEndpoints": {
            "description": "The Internet IP addresses to be health checked. The format matches the format of ResourceRecordSet.rrdata as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "internalLoadBalancers": {
            "description": "Configuration for internal load balancers to be health checked.",
            "items": {
              "$ref": "#/$defs/RRSetRoutingPolicyLoadBalancerTarget"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyLoadBalancerTarget": {
        "description": "The configuration for an individual load balancer to health check.",
        "properties": {
          "ipAddress": {
            "description": "The frontend IP address of the load balancer to health check.",
            "type": "string"
          },
          "ipProtocol": {
            "description": "The protocol of the load balancer to health check.",
            "enum": [
              "UNDEFINED",
              "TCP",
              "UDP"
            ],
            "type": "string"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicyLoadBalancerTarget",
            "type": "string"
          },
          "loadBalancerType": {
            "description": "The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. ",
            "enum": [
              "NONE",
              "GLOBAL_L7ILB",
              "REGIONAL_L4ILB",
              "REGIONAL_L7ILB"
            ],
            "type": "string"
          },
          "networkUrl": {
            "description": "The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .",
            "type": "string"
          },
          "port": {
            "description": "The configured port of the load balancer.",
            "type": "string"
          },
          "project": {
            "description": "The project ID in which the load balancer is located.",
            "type": "string"
          },
          "region": {
            "description": "The region in which the load balancer is located.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyPrimaryBackupPolicy": {
        "description": "Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.",
        "properties": {
          "backupGeoTargets": {
            "$ref": "#/$defs/RRSetRoutingPolicyGeoPolicy"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicyPrimaryBackupPolicy",
            "type": "string"
          },
          "primaryTargets": {
            "$ref": "#/$defs/RRSetRoutingPolicyHealthCheckTargets"
          },
          "trickleTraffic": {
            "description": "When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyWrrPolicy": {
        "description": "Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.",
        "properties": {
          "items": {
            "items": {
              "$ref": "#/$defs/RRSetRoutingPolicyWrrPolicyWrrPolicyItem"
            },
            "type": "array"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicyWrrPolicy",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RRSetRoutingPolicyWrrPolicyWrrPolicyItem": {
        "description": "A routing block which contains the routing information for one WRR item.",
        "properties": {
          "healthCheckedTargets": {
            "$ref": "#/$defs/RRSetRoutingPolicyHealthCheckTargets"
          },
          "kind": {
            "default": "dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem",
            "type": "string"
          },
          "rrdatas": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "signatureRrdatas": {
            "description": "DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "weight": {
            "description": "The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://dns.googleapis.com//dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes{?clientOperationId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.",
        "**Key properties:**",
        {
          "$ul": [
            "**additions**: Which ResourceRecordSets to add?",
            "**deletions**: Which ResourceRecordSets to remove? Must match existing data exactly.",
            "**id**: Unique identifier for the resource; defined by the server (output only).",
            "**isServing**: If the DNS queries for the zone will be served.",
            "**kind** (default: dns#change)",
            "**startTime**: The time that this operation was started by the server (output only). This is in RFC3339 text format.",
            "**status**: Status of the operation (output only). A status of \"done\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
