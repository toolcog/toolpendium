{
  "name": "testing_projects_testMatrices_get",
  "description": "Checks the status of a test matrix and the executions once they are created. The test matrix will contain the list of test executions to run if and only if the resultStorage.toolResultsExecution fields have been populated. Note: Flaky test executions may be added to the matrix at a later stage. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist",
  "parameters": {
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "description": "Cloud project that owns the test matrix."
      },
      "testMatrixId": {
        "type": "string",
        "description": "Unique test matrix id which was assigned by the service."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "projectId",
      "testMatrixId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://testing.googleapis.com//v1/projects/{projectId}/testMatrices/{testMatrixId}{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome.",
        "**Key properties:**",
        {
          "$ul": [
            [
              "**clientInfo**: Information about the client which invoked the test.",
              {
                "$ul": [
                  "**clientInfoDetails**: The list of detailed information about client.",
                  "**name**: Required. Client name, such as gcloud."
                ]
              }
            ],
            [
              "**environmentMatrix**: The matrix of environments in which the test is to be executed.",
              {
                "$ul": [
                  [
                    "**androidDeviceList**: A list of Android device configurations in which the test is to be executed.",
                    {
                      "$ul": [
                        "**androidDevices**: Required. A list of Android devices."
                      ]
                    }
                  ],
                  [
                    "**androidMatrix**: A set of Android device configuration permutations is defined by the the cross-product of the given axes. Internally, the given AndroidMatrix will be expanded into a set of AndroidDevices. Only supported permutations will be instantiated. Invalid permutations (e.g., incompatible models/versions) are ignored.",
                    {
                      "$ul": [
                        "**androidModelIds**: Required. The ids of the set of Android device to be used. Use the TestEnvironmentDiscoveryService to get supported options.",
                        "**androidVersionIds**: Required. The ids of the set of Android OS version to be used. Use the TestEnvironmentDiscoveryService to get supported options.",
                        "**locales**: Required. The set of locales the test device will enable for testing. Use the TestEnvironmentDiscoveryService to get supported options.",
                        "**orientations**: Required. The set of orientations to test with. Use the TestEnvironmentDiscoveryService to get supported options."
                      ]
                    }
                  ],
                  [
                    "**iosDeviceList**: A list of iOS device configurations in which the test is to be executed.",
                    {
                      "$ul": [
                        "**iosDevices**: Required. A list of iOS devices."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**extendedInvalidMatrixDetails**: Output only. Details about why a matrix was deemed invalid. If multiple checks can be safely performed, they will be reported but no assumptions should be made about the length of this list.",
            "**failFast**: If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.",
            "**flakyTestAttempts**: The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.",
            "**invalidMatrixDetails**: Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.",
            "**outcomeSummary**: Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.",
            "**projectId**: The cloud project that owns the test matrix.",
            [
              "**resultStorage**: Locations where the results of running the test are stored.",
              {
                "$ul": [
                  [
                    "**googleCloudStorage**: A storage location within Google cloud storage (GCS).",
                    {
                      "$ul": [
                        "**gcsPath**: Required. The path to a directory in GCS that will eventually contain the results for this test. The requesting user must have write access on the bucket in the supplied path."
                      ]
                    }
                  ],
                  "**resultsUrl**: Output only. URL to the results in the Firebase Web Console.",
                  [
                    "**toolResultsExecution**: Represents a tool results execution resource. This has the results of a TestMatrix.",
                    {
                      "$ul": [
                        "**executionId**: Output only. A tool results execution ID.",
                        "**historyId**: Output only. A tool results history ID.",
                        "**projectId**: Output only. The cloud project that owns the tool results execution."
                      ]
                    }
                  ],
                  [
                    "**toolResultsHistory**: Represents a tool results history resource.",
                    {
                      "$ul": [
                        "**historyId**: Required. A tool results history ID.",
                        "**projectId**: Required. The cloud project that owns the tool results history."
                      ]
                    }
                  ]
                ]
              }
            ],
            "**state**: Output only. Indicates the current progress of the test matrix.",
            "**testExecutions**: Output only. The list of test executions that the service creates for this matrix.",
            "**testMatrixId**: Output only. Unique id set by the service.",
            [
              "**testSpecification**: A description of how to run the test.",
              {
                "$ul": [
                  [
                    "**androidInstrumentationTest**: A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.",
                    {
                      "$ul": [
                        [
                          "**appApk**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        [
                          "**appBundle**: An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.",
                          {
                            "$ul": [
                              [
                                "**bundleLocation**: A reference to a file, used for user inputs.",
                                {
                                  "$ul": [
                                    "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**appPackageId**: The java package for the application under test. The default value is determined by examining the application's manifest.",
                        "**orchestratorOption**: The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.",
                        [
                          "**shardingOption**: Options for enabling sharding.",
                          {
                            "$ul": [
                              [
                                "**manualSharding**: Shards test cases into the specified groups of packages, classes, and/or methods. With manual sharding enabled, specifying test targets via environment_variables or in InstrumentationTest is invalid.",
                                {
                                  "$ul": [
                                    "**testTargetsForShard**: Required. Group of packages, classes, and/or test methods to be run for each manually-created shard. You must specify at least one shard if this field is present. When you select one or more physical devices, the number of repeated test_targets_for_shard must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500."
                                  ]
                                }
                              ],
                              [
                                "**smartSharding**: Shards test based on previous test case timing records.",
                                {
                                  "$ul": [
                                    "**targetedShardDuration**: The amount of time tests within a shard should take. Default: 300 seconds (5 minutes). The minimum allowed: 120 seconds (2 minutes). The shard count is dynamically set based on time, up to the maximum shard limit (described below). To guarantee at least one test case for each shard, the number of shards will not exceed the number of test cases. Shard duration will be exceeded if: - The maximum shard limit is reached and there is more calculated test time remaining to allocate into shards. - Any individual test is estimated to be longer than the targeted shard duration. Shard duration is not guaranteed because smart sharding uses test case history and default durations which may not be accurate. The rules for finding the test case timing records are: - If the service has processed a test case in the last 30 days, the record of the latest successful test case will be used. - For new test cases, the average duration of other known test cases will be used. - If there are no previous test case timing records available, the default test case duration is 15 seconds. Because the actual shard duration can exceed the targeted shard duration, we recommend that you set the targeted value at least 5 minutes less than the maximum allowed test timeout (45 minutes for physical devices and 60 minutes for virtual), or that you use the custom test timeout value that you set. This approach avoids cancelling the shard before all tests can finish. Note that there is a limit for maximum number of shards. When you select one or more physical devices, the number of shards must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500. To guarantee at least one test case for per shard, the number of shards will not exceed the number of test cases. Each shard created counts toward daily test quota."
                                  ]
                                }
                              ],
                              [
                                "**uniformSharding**: Uniformly shards test cases given a total number of shards. For instrumentation tests, it will be translated to \"-e numShard\" and \"-e shardIndex\" AndroidJUnitRunner arguments. With uniform sharding enabled, specifying either of these sharding arguments via `environment_variables` is invalid. Based on the sharding mechanism AndroidJUnitRunner uses, there is no guarantee that test cases will be distributed uniformly across all shards.",
                                {
                                  "$ul": [
                                    "**numShards**: Required. The total number of shards to create. This must always be a positive number that is no greater than the total number of test cases. When you select one or more physical devices, the number of shards must be <= 50. When you select one or more ARM virtual devices, it must be <= 200. When you select only x86 virtual devices, it must be <= 500."
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        [
                          "**testApk**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        "**testPackageId**: The java package for the test to be executed. The default value is determined by examining the application's manifest.",
                        "**testRunnerClass**: The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.",
                        "**testTargets**: Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run."
                      ]
                    }
                  ],
                  [
                    "**androidRoboTest**: A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.",
                    {
                      "$ul": [
                        [
                          "**appApk**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        [
                          "**appBundle**: An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.",
                          {
                            "$ul": [
                              [
                                "**bundleLocation**: A reference to a file, used for user inputs.",
                                {
                                  "$ul": [
                                    "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**appInitialActivity**: The initial activity that should be used to start the app.",
                        "**appPackageId**: The java package for the application under test. The default value is determined by examining the application's manifest.",
                        "**maxDepth**: The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.",
                        "**maxSteps**: The max number of steps Robo can execute. Default is no limit.",
                        "**roboDirectives**: A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.",
                        "**roboMode**: The mode in which Robo should run. Most clients should allow the server to populate this field automatically.",
                        [
                          "**roboScript**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        "**startingIntents**: The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly)."
                      ]
                    }
                  ],
                  [
                    "**androidTestLoop**: A test of an Android Application with a Test Loop. The intent \\ will be implicitly added, since Games is the only user of this api, for the time being.",
                    {
                      "$ul": [
                        [
                          "**appApk**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        [
                          "**appBundle**: An Android App Bundle file format, containing a BundleConfig.pb file, a base module directory, zero or more dynamic feature module directories. See https://developer.android.com/guide/app-bundle/build for guidance on building App Bundles.",
                          {
                            "$ul": [
                              [
                                "**bundleLocation**: A reference to a file, used for user inputs.",
                                {
                                  "$ul": [
                                    "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                                  ]
                                }
                              ]
                            ]
                          }
                        ],
                        "**appPackageId**: The java package for the application under test. The default is determined by examining the application's manifest.",
                        "**scenarioLabels**: The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.",
                        "**scenarios**: The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest."
                      ]
                    }
                  ],
                  "**disablePerformanceMetrics**: Disables performance metrics recording. May reduce test latency.",
                  "**disableVideoRecording**: Disables video recording. May reduce test latency.",
                  [
                    "**iosRoboTest**: A test that explores an iOS application on an iOS device.",
                    {
                      "$ul": [
                        "**appBundleId**: The bundle ID for the app-under-test. This is determined by examining the application's \"Info.plist\" file.",
                        [
                          "**appIpa**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        [
                          "**roboScript**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**iosTestLoop**: A test of an iOS application that implements one or more game loop scenarios. This test type accepts an archived application (.ipa file) and a list of integer scenarios that will be executed on the app sequentially.",
                    {
                      "$ul": [
                        "**appBundleId**: Output only. The bundle id for the application under test.",
                        [
                          "**appIpa**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        "**scenarios**: The list of scenarios that should be run during the test. Defaults to the single scenario 0 if unspecified."
                      ]
                    }
                  ],
                  [
                    "**iosTestSetup**: A description of how to set up an iOS device prior to running the test.",
                    {
                      "$ul": [
                        "**additionalIpas**: iOS apps to install in addition to those being directly tested.",
                        "**networkProfile**: The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.",
                        "**pullDirectories**: List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.",
                        "**pushFiles**: List of files to push to the device before starting the test."
                      ]
                    }
                  ],
                  [
                    "**iosXcTest**: A test of an iOS application that uses the XCTest framework. Xcode supports the option to \"build for testing\", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.",
                    {
                      "$ul": [
                        "**appBundleId**: Output only. The bundle id for the application under test.",
                        "**testSpecialEntitlements**: The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.",
                        [
                          "**testsZip**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ],
                        "**xcodeVersion**: The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.",
                        [
                          "**xctestrun**: A reference to a file, used for user inputs.",
                          {
                            "$ul": [
                              "**gcsPath**: A path to a file in Google Cloud Storage. Example: gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are expected to be url encoded (percent encoding)"
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**testSetup**: A description of how to set up the Android device prior to running the test.",
                    {
                      "$ul": [
                        [
                          "**account**: Identifies an account and how to log into it.",
                          {
                            "$ul": [
                              "**googleAuto**: Enables automatic Google account login. If set, the service automatically generates a Google test account and adds it to the device, before executing the test. Note that test accounts might be reused. Many applications show their full set of functionalities when an account is present on the device. Logging into the device with these generated accounts allows testing more functionalities."
                            ]
                          }
                        ],
                        "**additionalApks**: APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.",
                        "**directoriesToPull**: List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.",
                        "**dontAutograntPermissions**: Whether to prevent all runtime permissions to be granted at app install",
                        "**environmentVariables**: Environment variables to set for the test (only applicable for instrumentation tests).",
                        "**filesToPush**: List of files to push to the device before starting the test.",
                        "**initialSetupApks**: Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.",
                        "**networkProfile**: The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.",
                        [
                          "**systrace**",
                          {
                            "$ul": [
                              "**durationSeconds**: Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables systrace."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  "**testTimeout**: Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min."
                ]
              }
            ],
            "**timestamp**: Output only. The time this test matrix was initially created."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
