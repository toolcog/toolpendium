{
  "name": "firebaserules_projects_test",
  "description": "Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. Tests may either provide `source` or a `Ruleset` resource name. For tests against `source`, the resource name must refer to the project: Format: `projects/{project_id}` For tests against a `Ruleset`, this must be the `Ruleset` resource name: Format: `projects/{project_id}/rulesets/{ruleset_id}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/TestRulesetRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "TestRulesetRequest": {
        "description": "The request for FirebaseRulesService.TestRuleset.",
        "properties": {
          "source": {
            "$ref": "#/$defs/Source"
          },
          "testSuite": {
            "$ref": "#/$defs/TestSuite"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "`Source` is one or more `File` messages comprising a logical set of rules.",
        "properties": {
          "files": {
            "description": "Required. `File` set constituting the `Source` bundle.",
            "items": {
              "$ref": "#/$defs/File"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "File": {
        "description": "`File` containing source content.",
        "properties": {
          "content": {
            "description": "Required. Textual Content.",
            "type": "string"
          },
          "fingerprint": {
            "description": "Fingerprint (e.g. github sha) associated with the `File`.",
            "format": "byte",
            "type": "string"
          },
          "name": {
            "description": "Required. File name.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TestSuite": {
        "description": "`TestSuite` is a collection of `TestCase` instances that validate the logical correctness of a `Ruleset`. The `TestSuite` may be referenced in-line within a `TestRuleset` invocation or as part of a `Release` object as a pre-release check.",
        "properties": {
          "testCases": {
            "description": "Collection of test cases associated with the `TestSuite`.",
            "items": {
              "$ref": "#/$defs/TestCase"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TestCase": {
        "description": "`TestCase` messages provide the request context and an expectation as to whether the given context will be allowed or denied. Test cases may specify the `request`, `resource`, and `function_mocks` to mock a function call to a service-provided function. The `request` object represents context present at request-time. The `resource` is the value of the target resource as it appears in persistent storage before the request is executed.",
        "properties": {
          "expectation": {
            "description": "Test expectation.",
            "enum": [
              "EXPECTATION_UNSPECIFIED",
              "ALLOW",
              "DENY"
            ],
            "type": "string"
          },
          "expressionReportLevel": {
            "description": "Specifies what should be included in the response.",
            "enum": [
              "LEVEL_UNSPECIFIED",
              "NONE",
              "FULL",
              "VISITED"
            ],
            "type": "string"
          },
          "functionMocks": {
            "description": "Optional function mocks for service-defined functions. If not set, any service defined function is expected to return an error, which may or may not influence the test outcome.",
            "items": {
              "$ref": "#/$defs/FunctionMock"
            },
            "type": "array"
          },
          "pathEncoding": {
            "description": "Specifies whether paths (such as request.path) are encoded and how.",
            "enum": [
              "ENCODING_UNSPECIFIED",
              "URL_ENCODED",
              "PLAIN"
            ],
            "type": "string"
          },
          "request": {
            "description": "Request context. The exact format of the request context is service-dependent. See the appropriate service documentation for information about the supported fields and types on the request. Minimally, all services support the following fields and types: Request field | Type ---------------|----------------- auth.uid | `string` auth.token | `map` headers | `map` method | `string` params | `map` path | `string` time | `google.protobuf.Timestamp` If the request value is not well-formed for the service, the request will be rejected as an invalid argument."
          },
          "resource": {
            "description": "Optional resource value as it appears in persistent storage before the request is fulfilled. The resource type depends on the `request.path` value."
          }
        },
        "type": "object"
      },
      "FunctionMock": {
        "description": "Mock function definition. Mocks must refer to a function declared by the target service. The type of the function args and result will be inferred at test time. If either the arg or result values are not compatible with function type declaration, the request will be considered invalid. More than one `FunctionMock` may be provided for a given function name so long as the `Arg` matchers are distinct. There may be only one function for a given overload where all `Arg` values are `Arg.any_value`.",
        "properties": {
          "args": {
            "description": "The list of `Arg` values to match. The order in which the arguments are provided is the order in which they must appear in the function invocation.",
            "items": {
              "$ref": "#/$defs/Arg"
            },
            "type": "array"
          },
          "function": {
            "description": "The name of the function. The function name must match one provided by a service declaration.",
            "type": "string"
          },
          "result": {
            "$ref": "#/$defs/Result"
          }
        },
        "type": "object"
      },
      "Arg": {
        "description": "Arg matchers for the mock function.",
        "properties": {
          "anyValue": {
            "$ref": "#/$defs/Empty"
          },
          "exactValue": {
            "description": "Argument exactly matches value provided."
          }
        },
        "type": "object"
      },
      "Empty": {
        "description": "A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }",
        "properties": {},
        "type": "object"
      },
      "Result": {
        "description": "Possible result values from the function mock invocation.",
        "properties": {
          "undefined": {
            "$ref": "#/$defs/Empty"
          },
          "value": {
            "description": "The result is an actual value. The type of the value must match that of the type declared by the service."
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://firebaserules.googleapis.com//v1/{name}:test{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "The response for FirebaseRulesService.TestRuleset.",
        "**Key properties:**",
        {
          "$ul": [
            "**issues**: Syntactic and semantic `Source` issues of varying severity. Issues of `ERROR` severity will prevent tests from executing.",
            "**testResults**: The set of test results given the test cases in the `TestSuite`. The results will appear in the same order as the test cases appear in the `TestSuite`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
