{
  "name": "identitytoolkit_relyingparty_verifyAssertion",
  "description": "Verifies the assertion returned by the IdP.",
  "parameters": {
    "type": "object",
    "properties": {
      "alt": {
        "enum": [
          "json"
        ],
        "type": "string",
        "description": "Data format for the response."
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
      },
      "userIp": {
        "type": "string",
        "description": "Deprecated. Please use quotaUser instead."
      },
      "body": {
        "$ref": "#/$defs/IdentitytoolkitRelyingpartyVerifyAssertionRequest"
      }
    },
    "$defs": {
      "IdentitytoolkitRelyingpartyVerifyAssertionRequest": {
        "description": "Request to verify the IDP assertion.",
        "properties": {
          "autoCreate": {
            "description": "When it's true, automatically creates a new account if the user doesn't exist. When it's false, allows existing user to sign in normally and throws exception if the user doesn't exist.",
            "type": "boolean"
          },
          "delegatedProjectNumber": {
            "description": "GCP project number of the requesting delegated app. Currently only intended for Firebase V1 migration.",
            "format": "int64",
            "type": "string"
          },
          "idToken": {
            "description": "The GITKit token of the authenticated user.",
            "type": "string"
          },
          "instanceId": {
            "description": "Instance id token of the app.",
            "type": "string"
          },
          "pendingIdToken": {
            "description": "The GITKit token for the non-trusted IDP pending to be confirmed by the user.",
            "type": "string"
          },
          "postBody": {
            "description": "The post body if the request is a HTTP POST.",
            "type": "string"
          },
          "requestUri": {
            "description": "The URI to which the IDP redirects the user back. It may contain federated login result params added by the IDP.",
            "type": "string"
          },
          "returnIdpCredential": {
            "description": "Whether return 200 and IDP credential rather than throw exception when federated id is already linked.",
            "type": "boolean"
          },
          "returnRefreshToken": {
            "description": "Whether to return refresh tokens.",
            "type": "boolean"
          },
          "returnSecureToken": {
            "description": "Whether return sts id token and refresh token instead of gitkit token.",
            "type": "boolean"
          },
          "sessionId": {
            "description": "Session ID, which should match the one in previous createAuthUri request.",
            "type": "string"
          },
          "tenantId": {
            "description": "For multi-tenant use cases, in order to construct sign-in URL with the correct IDP parameters, Firebear needs to know which Tenant to retrieve IDP configs from.",
            "type": "string"
          },
          "tenantProjectNumber": {
            "description": "Tenant project number to be used for idp discovery.",
            "format": "uint64",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyAssertion{?alt,fields,key,oauth_token,prettyPrint,quotaUser,userIp}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Response of verifying the IDP assertion.",
        "**Key properties:**",
        {
          "$ul": [
            "**action**: The action code.",
            "**appInstallationUrl**: URL for OTA app installation.",
            "**appScheme**: The custom scheme used by mobile app.",
            "**context**: The opaque value used by the client to maintain context info between the authentication request and the IDP callback.",
            "**dateOfBirth**: The birth date of the IdP account.",
            "**displayName**: The display name of the user.",
            "**email**: The email returned by the IdP. NOTE: The federated login user may not own the email.",
            "**emailRecycled**: It's true if the email is recycled.",
            "**emailVerified**: The value is true if the IDP is also the email provider. It means the user owns the email.",
            "**errorMessage**: Client error code.",
            "**expiresIn**: If idToken is STS id token, then this field will be expiration time of STS id token in seconds.",
            "**federatedId**: The unique ID identifies the IdP account.",
            "**firstName**: The first name of the user.",
            "**fullName**: The full name of the user.",
            "**idToken**: The ID token.",
            "**inputEmail**: It's the identifier param in the createAuthUri request if the identifier is an email. It can be used to check whether the user input email is different from the asserted email.",
            "**isNewUser**: True if it's a new user sign-in, false if it's a returning user.",
            "**kind**: The fixed string \"identitytoolkit#VerifyAssertionResponse\". (default: identitytoolkit#VerifyAssertionResponse)",
            "**language**: The language preference of the user.",
            "**lastName**: The last name of the user.",
            "**localId**: The RP local ID if it's already been mapped to the IdP account identified by the federated ID.",
            "**needConfirmation**: Whether the assertion is from a non-trusted IDP and need account linking confirmation.",
            "**needEmail**: Whether need client to supply email to complete the federated login flow.",
            "**nickName**: The nick name of the user.",
            "**oauthAccessToken**: The OAuth2 access token.",
            "**oauthAuthorizationCode**: The OAuth2 authorization code.",
            "**oauthExpireIn**: The lifetime in seconds of the OAuth2 access token.",
            "**oauthIdToken**: The OIDC id token.",
            "**oauthRequestToken**: The user approved request token for the OpenID OAuth extension.",
            "**oauthScope**: The scope for the OpenID OAuth extension.",
            "**oauthTokenSecret**: The OAuth1 access token secret.",
            "**originalEmail**: The original email stored in the mapping storage. It's returned when the federated ID is associated to a different email.",
            "**photoUrl**: The URI of the public accessible profiel picture.",
            "**providerId**: The IdP ID. For white listed IdPs it's a short domain name e.g. google.com, aol.com, live.net and yahoo.com. If the \"providerId\" param is set to OpenID OP identifer other than the whilte listed IdPs the OP identifier is returned. If the \"identifier\" param is federated ID in the createAuthUri request. The domain part of the federated ID is returned.",
            "**rawUserInfo**: Raw IDP-returned user info.",
            "**refreshToken**: If idToken is STS id token, then this field will be refresh token.",
            "**screenName**: The screen_name of a Twitter user or the login name at Github.",
            "**timeZone**: The timezone of the user.",
            "**verifiedProvider**: When action is 'map', contains the idps which can be used for confirmation."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
