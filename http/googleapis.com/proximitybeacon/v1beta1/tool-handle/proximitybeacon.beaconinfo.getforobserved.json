{
  "name": "proximitybeacon_beaconinfo_getforobserved",
  "description": "Given one or more beacon observations, returns any beacon information and attachments accessible to your application. Authorize by using the [API key](https://developers.google.com/beacons/proximity/get-started#request_a_browser_api_key) for the application.",
  "parameters": {
    "type": "object",
    "properties": {
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GetInfoForObservedBeaconsRequest"
      }
    },
    "$defs": {
      "GetInfoForObservedBeaconsRequest": {
        "description": "Request for beacon and attachment information about beacons that a mobile client has encountered \"in the wild\".",
        "properties": {
          "namespacedTypes": {
            "description": "Specifies what kind of attachments to include in the response. When given, the response will include only attachments of the given types. When empty, no attachments will be returned. Must be in the format namespace/type. Accepts `*` to specify all types in all namespaces owned by the client. Optional.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "observations": {
            "description": "The beacons that the client has encountered. At least one must be given.",
            "items": {
              "$ref": "#/$defs/Observation"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Observation": {
        "description": "Represents one beacon observed once.",
        "properties": {
          "advertisedId": {
            "$ref": "#/$defs/AdvertisedId"
          },
          "telemetry": {
            "description": "The array of telemetry bytes received from the beacon. The server is responsible for parsing it. This field may frequently be empty, as with a beacon that transmits telemetry only occasionally.",
            "format": "byte",
            "type": "string"
          },
          "timestampMs": {
            "description": "Time when the beacon was observed.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AdvertisedId": {
        "description": "Defines a unique identifier of a beacon as broadcast by the device.",
        "properties": {
          "id": {
            "description": "The actual beacon identifier, as broadcast by the beacon hardware. Must be [base64](http://tools.ietf.org/html/rfc4648#section-4) encoded in HTTP requests, and will be so encoded (with padding) in responses. The base64 encoding should be of the binary byte-stream and not any textual (such as hex) representation thereof. Required.",
            "format": "byte",
            "type": "string"
          },
          "type": {
            "description": "Specifies the identifier type. Required.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "EDDYSTONE",
              "IBEACON",
              "ALTBEACON",
              "EDDYSTONE_EID"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://proximitybeacon.googleapis.com//v1beta1/beaconinfo:getforobserved{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Information about the requested beacons, optionally including attachment data.",
        "**Key properties:**",
        {
          "$ul": [
            "**beacons**: Public information about beacons. May be empty if the request matched no beacons."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
