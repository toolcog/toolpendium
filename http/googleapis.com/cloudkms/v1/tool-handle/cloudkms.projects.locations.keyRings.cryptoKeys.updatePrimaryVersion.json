{
  "name": "cloudkms_projects_locations_keyRings_cryptoKeys_updatePrimaryVersion",
  "description": "Update the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The resource name of the CryptoKey to update."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/UpdateCryptoKeyPrimaryVersionRequest"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "UpdateCryptoKeyPrimaryVersionRequest": {
        "description": "Request message for KeyManagementService.UpdateCryptoKeyPrimaryVersion.",
        "properties": {
          "cryptoKeyVersionId": {
            "description": "Required. The id of the child CryptoKeyVersion to use as primary.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudkms.googleapis.com//v1/{name}:updatePrimaryVersion{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A CryptoKey represents a logical key that can be used for cryptographic operations. A CryptoKey is made up of zero or more versions, which represent the actual key material used in cryptographic operations.",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. The time at which this CryptoKey was created.",
            "**cryptoKeyBackend**: Immutable. The resource name of the backend environment where the key material for all CryptoKeyVersions associated with this CryptoKey reside and where all related cryptographic operations are performed. Only applicable if CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource name in the format `projects/*/locations/*/ekmConnections/*`. Note, this list is non-exhaustive and may apply to additional ProtectionLevels in the future.",
            "**destroyScheduledDuration**: Immutable. The period of time that versions of this key spend in the DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified at creation time, the default duration is 24 hours.",
            "**importOnly**: Immutable. Whether this key may contain imported versions only.",
            "**labels**: Labels with user-defined metadata. For more information, see [Labeling Keys](https://cloud.google.com/kms/docs/labeling-keys).",
            "**name**: Output only. The resource name for this CryptoKey in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*`.",
            "**nextRotationTime**: At next_rotation_time, the Key Management Service will automatically: 1. Create a new version of this CryptoKey. 2. Mark the new version as primary. Key rotations performed manually via CreateCryptoKeyVersion and UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.",
            [
              "**primary**: A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.",
              {
                "$ul": [
                  "**algorithm**: Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.",
                  [
                    "**attestation**: Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).",
                    {
                      "$ul": [
                        [
                          "**certChains**: Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.",
                          {
                            "$ul": [
                              "**caviumCerts**: Cavium certificate chain corresponding to the attestation.",
                              "**googleCardCerts**: Google card certificate chain corresponding to the attestation.",
                              "**googlePartitionCerts**: Google partition certificate chain corresponding to the attestation."
                            ]
                          }
                        ],
                        "**content**: Output only. The attestation data provided by the HSM when the key operation was performed.",
                        "**format**: Output only. The format of the attestation data."
                      ]
                    }
                  ],
                  "**createTime**: Output only. The time at which this CryptoKeyVersion was created.",
                  "**destroyEventTime**: Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.",
                  "**destroyTime**: Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.",
                  "**externalDestructionFailureReason**: Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.",
                  [
                    "**externalProtectionLevelOptions**: ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.",
                    {
                      "$ul": [
                        "**ekmConnectionKeyPath**: The path to the external key material on the EKM when using EkmConnection e.g., \"v0/my/key\". Set this field instead of external_key_uri when using an EkmConnection.",
                        "**externalKeyUri**: The URI for an external resource that this CryptoKeyVersion represents."
                      ]
                    }
                  ],
                  "**generateTime**: Output only. The time this CryptoKeyVersion's key material was generated.",
                  "**generationFailureReason**: Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.",
                  "**importFailureReason**: Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.",
                  "**importJob**: Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.",
                  "**importTime**: Output only. The time at which this CryptoKeyVersion's key material was most recently imported.",
                  "**name**: Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.",
                  "**protectionLevel**: Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.",
                  "**reimportEligible**: Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.",
                  "**state**: The current state of the CryptoKeyVersion."
                ]
              }
            ],
            "**purpose**: Immutable. The immutable purpose of this CryptoKey.",
            "**rotationPeriod**: next_rotation_time will be advanced by this period when the service automatically rotates a key. Must be at least 24 hours and at most 876,000 hours. If rotation_period is set, next_rotation_time must also be set. Keys with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this field must be omitted.",
            [
              "**versionTemplate**: A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.",
              {
                "$ul": [
                  "**algorithm**: Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.",
                  "**protectionLevel**: ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE."
                ]
              }
            ]
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
