{
  "name": "cloudkms_projects_locations_ekmConnections_create",
  "description": "Creates a new EkmConnection in a given Project and Location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The resource name of the location associated with the EkmConnection, in the format `projects/*/locations/*`."
      },
      "ekmConnectionId": {
        "type": "string",
        "description": "Required. It must be unique within a location and match the regular expression `[a-zA-Z0-9_-]{1,63}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/EkmConnection"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "EkmConnection": {
        "description": "An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.",
        "properties": {
          "createTime": {
            "description": "Output only. The time at which the EkmConnection was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "cryptoSpacePath": {
            "description": "Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.",
            "type": "string"
          },
          "etag": {
            "description": "Optional. Etag of the currently stored EkmConnection.",
            "type": "string"
          },
          "keyManagementMode": {
            "description": "Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.",
            "enum": [
              "KEY_MANAGEMENT_MODE_UNSPECIFIED",
              "MANUAL",
              "CLOUD_KMS"
            ],
            "type": "string"
          },
          "name": {
            "description": "Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.",
            "readOnly": true,
            "type": "string"
          },
          "serviceResolvers": {
            "description": "A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported.",
            "items": {
              "$ref": "#/$defs/ServiceResolver"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ServiceResolver": {
        "description": "A ServiceResolver represents an EKM replica that can be reached within an EkmConnection.",
        "properties": {
          "endpointFilter": {
            "description": "Optional. The filter applied to the endpoints of the resolved service. If no filter is specified, all endpoints will be considered. An endpoint will be chosen arbitrarily from the filtered list for each request. For endpoint filter syntax and examples, see https://cloud.google.com/service-directory/docs/reference/rpc/google.cloud.servicedirectory.v1#resolveservicerequest.",
            "type": "string"
          },
          "hostname": {
            "description": "Required. The hostname of the EKM replica used at TLS and HTTP layers.",
            "type": "string"
          },
          "serverCertificates": {
            "description": "Required. A list of leaf server certificates used to authenticate HTTPS connections to the EKM replica. Currently, a maximum of 10 Certificate is supported.",
            "items": {
              "$ref": "#/$defs/Certificate"
            },
            "type": "array"
          },
          "serviceDirectoryService": {
            "description": "Required. The resource name of the Service Directory service pointing to an EKM replica, in the format `projects/*/locations/*/namespaces/*/services/*`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Certificate": {
        "description": "A Certificate represents an X.509 certificate used to authenticate HTTPS connections to EKM replicas.",
        "properties": {
          "issuer": {
            "description": "Output only. The issuer distinguished name in RFC 2253 format. Only present if parsed is true.",
            "readOnly": true,
            "type": "string"
          },
          "notAfterTime": {
            "description": "Output only. The certificate is not valid after this time. Only present if parsed is true.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "notBeforeTime": {
            "description": "Output only. The certificate is not valid before this time. Only present if parsed is true.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "parsed": {
            "description": "Output only. True if the certificate was parsed successfully.",
            "readOnly": true,
            "type": "boolean"
          },
          "rawDer": {
            "description": "Required. The raw certificate bytes in DER format.",
            "format": "byte",
            "type": "string"
          },
          "serialNumber": {
            "description": "Output only. The certificate serial number as a hex string. Only present if parsed is true.",
            "readOnly": true,
            "type": "string"
          },
          "sha256Fingerprint": {
            "description": "Output only. The SHA-256 certificate fingerprint as a hex string. Only present if parsed is true.",
            "readOnly": true,
            "type": "string"
          },
          "subject": {
            "description": "Output only. The subject distinguished name in RFC 2253 format. Only present if parsed is true.",
            "readOnly": true,
            "type": "string"
          },
          "subjectAlternativeDnsNames": {
            "description": "Output only. The subject Alternative DNS names. Only present if parsed is true.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudkms.googleapis.com//v1/{parent}/ekmConnections{?ekmConnectionId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "An EkmConnection represents an individual EKM connection. It can be used for creating CryptoKeys and CryptoKeyVersions with a ProtectionLevel of EXTERNAL_VPC, as well as performing cryptographic operations using keys created within the EkmConnection.",
        "**Key properties:**",
        {
          "$ul": [
            "**createTime**: Output only. The time at which the EkmConnection was created.",
            "**cryptoSpacePath**: Optional. Identifies the EKM Crypto Space that this EkmConnection maps to. Note: This field is required if KeyManagementMode is CLOUD_KMS.",
            "**etag**: Optional. Etag of the currently stored EkmConnection.",
            "**keyManagementMode**: Optional. Describes who can perform control plane operations on the EKM. If unset, this defaults to MANUAL.",
            "**name**: Output only. The resource name for the EkmConnection in the format `projects/*/locations/*/ekmConnections/*`.",
            "**serviceResolvers**: A list of ServiceResolvers where the EKM can be reached. There should be one ServiceResolver per EKM replica. Currently, only a single ServiceResolver is supported."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
