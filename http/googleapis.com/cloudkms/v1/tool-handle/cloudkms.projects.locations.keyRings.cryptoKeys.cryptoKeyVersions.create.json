{
  "name": "cloudkms_projects_locations_keyRings_cryptoKeys_cryptoKeyVersions_create",
  "description": "Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the CryptoKey associated with the CryptoKeyVersions."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CryptoKeyVersion"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CryptoKeyVersion": {
        "description": "A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.",
        "properties": {
          "algorithm": {
            "description": "Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.",
            "enum": [
              "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED",
              "GOOGLE_SYMMETRIC_ENCRYPTION",
              "AES_128_GCM",
              "AES_256_GCM",
              "AES_128_CBC",
              "AES_256_CBC",
              "AES_128_CTR",
              "AES_256_CTR",
              "RSA_SIGN_PSS_2048_SHA256",
              "RSA_SIGN_PSS_3072_SHA256",
              "RSA_SIGN_PSS_4096_SHA256",
              "RSA_SIGN_PSS_4096_SHA512",
              "RSA_SIGN_PKCS1_2048_SHA256",
              "RSA_SIGN_PKCS1_3072_SHA256",
              "RSA_SIGN_PKCS1_4096_SHA256",
              "RSA_SIGN_PKCS1_4096_SHA512",
              "RSA_SIGN_RAW_PKCS1_2048",
              "RSA_SIGN_RAW_PKCS1_3072",
              "RSA_SIGN_RAW_PKCS1_4096",
              "RSA_DECRYPT_OAEP_2048_SHA256",
              "RSA_DECRYPT_OAEP_3072_SHA256",
              "RSA_DECRYPT_OAEP_4096_SHA256",
              "RSA_DECRYPT_OAEP_4096_SHA512",
              "RSA_DECRYPT_OAEP_2048_SHA1",
              "RSA_DECRYPT_OAEP_3072_SHA1",
              "RSA_DECRYPT_OAEP_4096_SHA1",
              "EC_SIGN_P256_SHA256",
              "EC_SIGN_P384_SHA384",
              "EC_SIGN_SECP256K1_SHA256",
              "HMAC_SHA256",
              "HMAC_SHA1",
              "HMAC_SHA384",
              "HMAC_SHA512",
              "HMAC_SHA224",
              "EXTERNAL_SYMMETRIC_ENCRYPTION"
            ],
            "readOnly": true,
            "type": "string"
          },
          "attestation": {
            "$ref": "#/$defs/KeyOperationAttestation"
          },
          "createTime": {
            "description": "Output only. The time at which this CryptoKeyVersion was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "destroyEventTime": {
            "description": "Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "destroyTime": {
            "description": "Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "externalDestructionFailureReason": {
            "description": "Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.",
            "readOnly": true,
            "type": "string"
          },
          "externalProtectionLevelOptions": {
            "$ref": "#/$defs/ExternalProtectionLevelOptions"
          },
          "generateTime": {
            "description": "Output only. The time this CryptoKeyVersion's key material was generated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "generationFailureReason": {
            "description": "Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.",
            "readOnly": true,
            "type": "string"
          },
          "importFailureReason": {
            "description": "Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.",
            "readOnly": true,
            "type": "string"
          },
          "importJob": {
            "description": "Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.",
            "readOnly": true,
            "type": "string"
          },
          "importTime": {
            "description": "Output only. The time at which this CryptoKeyVersion's key material was most recently imported.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "description": "Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.",
            "readOnly": true,
            "type": "string"
          },
          "protectionLevel": {
            "description": "Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.",
            "enum": [
              "PROTECTION_LEVEL_UNSPECIFIED",
              "SOFTWARE",
              "HSM",
              "EXTERNAL",
              "EXTERNAL_VPC"
            ],
            "readOnly": true,
            "type": "string"
          },
          "reimportEligible": {
            "description": "Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.",
            "readOnly": true,
            "type": "boolean"
          },
          "state": {
            "description": "The current state of the CryptoKeyVersion.",
            "enum": [
              "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED",
              "PENDING_GENERATION",
              "ENABLED",
              "DISABLED",
              "DESTROYED",
              "DESTROY_SCHEDULED",
              "PENDING_IMPORT",
              "IMPORT_FAILED",
              "GENERATION_FAILED",
              "PENDING_EXTERNAL_DESTRUCTION",
              "EXTERNAL_DESTRUCTION_FAILED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "KeyOperationAttestation": {
        "description": "Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).",
        "properties": {
          "certChains": {
            "$ref": "#/$defs/CertificateChains"
          },
          "content": {
            "description": "Output only. The attestation data provided by the HSM when the key operation was performed.",
            "format": "byte",
            "readOnly": true,
            "type": "string"
          },
          "format": {
            "description": "Output only. The format of the attestation data.",
            "enum": [
              "ATTESTATION_FORMAT_UNSPECIFIED",
              "CAVIUM_V1_COMPRESSED",
              "CAVIUM_V2_COMPRESSED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "CertificateChains": {
        "description": "Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.",
        "properties": {
          "caviumCerts": {
            "description": "Cavium certificate chain corresponding to the attestation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "googleCardCerts": {
            "description": "Google card certificate chain corresponding to the attestation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "googlePartitionCerts": {
            "description": "Google partition certificate chain corresponding to the attestation.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "ExternalProtectionLevelOptions": {
        "description": "ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.",
        "properties": {
          "ekmConnectionKeyPath": {
            "description": "The path to the external key material on the EKM when using EkmConnection e.g., \"v0/my/key\". Set this field instead of external_key_uri when using an EkmConnection.",
            "type": "string"
          },
          "externalKeyUri": {
            "description": "The URI for an external resource that this CryptoKeyVersion represents.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://cloudkms.googleapis.com//v1/{parent}/cryptoKeyVersions{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.",
        "**Key properties:**",
        {
          "$ul": [
            "**algorithm**: Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.",
            [
              "**attestation**: Contains an HSM-generated attestation about a key operation. For more information, see [Verifying attestations] (https://cloud.google.com/kms/docs/attest-key).",
              {
                "$ul": [
                  [
                    "**certChains**: Certificate chains needed to verify the attestation. Certificates in chains are PEM-encoded and are ordered based on https://tools.ietf.org/html/rfc5246#section-7.4.2.",
                    {
                      "$ul": [
                        "**caviumCerts**: Cavium certificate chain corresponding to the attestation.",
                        "**googleCardCerts**: Google card certificate chain corresponding to the attestation.",
                        "**googlePartitionCerts**: Google partition certificate chain corresponding to the attestation."
                      ]
                    }
                  ],
                  "**content**: Output only. The attestation data provided by the HSM when the key operation was performed.",
                  "**format**: Output only. The format of the attestation data."
                ]
              }
            ],
            "**createTime**: Output only. The time at which this CryptoKeyVersion was created.",
            "**destroyEventTime**: Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.",
            "**destroyTime**: Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.",
            "**externalDestructionFailureReason**: Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.",
            [
              "**externalProtectionLevelOptions**: ExternalProtectionLevelOptions stores a group of additional fields for configuring a CryptoKeyVersion that are specific to the EXTERNAL protection level and EXTERNAL_VPC protection levels.",
              {
                "$ul": [
                  "**ekmConnectionKeyPath**: The path to the external key material on the EKM when using EkmConnection e.g., \"v0/my/key\". Set this field instead of external_key_uri when using an EkmConnection.",
                  "**externalKeyUri**: The URI for an external resource that this CryptoKeyVersion represents."
                ]
              }
            ],
            "**generateTime**: Output only. The time this CryptoKeyVersion's key material was generated.",
            "**generationFailureReason**: Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.",
            "**importFailureReason**: Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.",
            "**importJob**: Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.",
            "**importTime**: Output only. The time at which this CryptoKeyVersion's key material was most recently imported.",
            "**name**: Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.",
            "**protectionLevel**: Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.",
            "**reimportEligible**: Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.",
            "**state**: The current state of the CryptoKeyVersion."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
