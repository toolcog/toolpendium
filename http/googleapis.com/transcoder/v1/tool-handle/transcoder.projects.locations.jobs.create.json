{
  "name": "transcoder_projects_locations_jobs_create",
  "description": "Creates a job in the specified region.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent location to create and process this job. Format: `projects/{project}/locations/{location}`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Job"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Job": {
        "description": "Transcoding job resource.",
        "properties": {
          "batchModePriority": {
            "description": "The processing priority of a batch job. This field can only be set for batch mode jobs. The default value is 0. This value cannot be negative. Higher values correspond to higher priorities for the job.",
            "format": "int32",
            "type": "integer"
          },
          "config": {
            "$ref": "#/$defs/JobConfig"
          },
          "createTime": {
            "description": "Output only. The time the job was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "endTime": {
            "description": "Output only. The time the transcoding finished.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "error": {
            "$ref": "#/$defs/Status"
          },
          "inputUri": {
            "description": "Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels associated with this job. You can use these to organize and group your jobs.",
            "type": "object"
          },
          "mode": {
            "description": "The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.",
            "enum": [
              "PROCESSING_MODE_UNSPECIFIED",
              "PROCESSING_MODE_INTERACTIVE",
              "PROCESSING_MODE_BATCH"
            ],
            "type": "string"
          },
          "name": {
            "description": "The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`",
            "type": "string"
          },
          "optimization": {
            "description": "Optional. The optimization strategy of the job. The default is `AUTODETECT`.",
            "enum": [
              "OPTIMIZATION_STRATEGY_UNSPECIFIED",
              "AUTODETECT",
              "DISABLED"
            ],
            "type": "string"
          },
          "outputUri": {
            "description": "Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).",
            "type": "string"
          },
          "startTime": {
            "description": "Output only. The time the transcoding started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. The current state of the job.",
            "enum": [
              "PROCESSING_STATE_UNSPECIFIED",
              "PENDING",
              "RUNNING",
              "SUCCEEDED",
              "FAILED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "templateId": {
            "description": "Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`",
            "type": "string"
          },
          "ttlAfterCompletionDays": {
            "description": "Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "JobConfig": {
        "description": "Job configuration",
        "properties": {
          "adBreaks": {
            "description": "List of ad breaks. Specifies where to insert ad break tags in the output manifests.",
            "items": {
              "$ref": "#/$defs/AdBreak"
            },
            "type": "array"
          },
          "editList": {
            "description": "List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.",
            "items": {
              "$ref": "#/$defs/EditAtom"
            },
            "type": "array"
          },
          "elementaryStreams": {
            "description": "List of elementary streams.",
            "items": {
              "$ref": "#/$defs/ElementaryStream"
            },
            "type": "array"
          },
          "encryptions": {
            "description": "List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.",
            "items": {
              "$ref": "#/$defs/Encryption"
            },
            "type": "array"
          },
          "inputs": {
            "description": "List of input assets stored in Cloud Storage.",
            "items": {
              "$ref": "#/$defs/Input"
            },
            "type": "array"
          },
          "manifests": {
            "description": "List of output manifests.",
            "items": {
              "$ref": "#/$defs/Manifest"
            },
            "type": "array"
          },
          "muxStreams": {
            "description": "List of multiplexing settings for output streams.",
            "items": {
              "$ref": "#/$defs/MuxStream"
            },
            "type": "array"
          },
          "output": {
            "$ref": "#/$defs/Output"
          },
          "overlays": {
            "description": "List of overlays on the output video, in descending Z-order.",
            "items": {
              "$ref": "#/$defs/Overlay"
            },
            "type": "array"
          },
          "pubsubDestination": {
            "$ref": "#/$defs/PubsubDestination"
          },
          "spriteSheets": {
            "description": "List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig.",
            "items": {
              "$ref": "#/$defs/SpriteSheet"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AdBreak": {
        "description": "Ad break.",
        "properties": {
          "startTimeOffset": {
            "description": "Start time in seconds for the ad break, relative to the output file timeline. The default is `0s`.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EditAtom": {
        "description": "Edit atom.",
        "properties": {
          "endTimeOffset": {
            "description": "End time in seconds for the atom, relative to the input file timeline. When `end_time_offset` is not specified, the `inputs` are used until the end of the atom.",
            "format": "google-duration",
            "type": "string"
          },
          "inputs": {
            "description": "List of Input.key values identifying files that should be used in this atom. The listed `inputs` must have the same timeline.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "key": {
            "description": "A unique key for this atom. Must be specified when using advanced mapping.",
            "type": "string"
          },
          "startTimeOffset": {
            "description": "Start time in seconds for the atom, relative to the input file timeline. The default is `0s`.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ElementaryStream": {
        "description": "Encoding of an input file such as an audio, video, or text track. Elementary streams must be packaged before mapping and sharing between different output formats.",
        "properties": {
          "audioStream": {
            "$ref": "#/$defs/AudioStream"
          },
          "key": {
            "description": "A unique key for this elementary stream.",
            "type": "string"
          },
          "textStream": {
            "$ref": "#/$defs/TextStream"
          },
          "videoStream": {
            "$ref": "#/$defs/VideoStream"
          }
        },
        "type": "object"
      },
      "AudioStream": {
        "description": "Audio stream resource.",
        "properties": {
          "bitrateBps": {
            "description": "Required. Audio bitrate in bits per second. Must be between 1 and 10,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "channelCount": {
            "description": "Number of audio channels. Must be between 1 and 6. The default is 2.",
            "format": "int32",
            "type": "integer"
          },
          "channelLayout": {
            "description": "A list of channel names specifying layout of the audio channels. This only affects the metadata embedded in the container headers, if supported by the specified format. The default is `[\"fl\", \"fr\"]`. Supported channel names: - `fl` - Front left channel - `fr` - Front right channel - `sl` - Side left channel - `sr` - Side right channel - `fc` - Front center channel - `lfe` - Low frequency",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "codec": {
            "description": "The codec for this audio stream. The default is `aac`. Supported audio codecs: - `aac` - `aac-he` - `aac-he-v2` - `mp3` - `ac3` - `eac3`",
            "type": "string"
          },
          "displayName": {
            "description": "The name for this particular audio stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.",
            "type": "string"
          },
          "languageCode": {
            "description": "The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.",
            "type": "string"
          },
          "mapping": {
            "description": "The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.",
            "items": {
              "$ref": "#/$defs/AudioMapping"
            },
            "type": "array"
          },
          "sampleRateHertz": {
            "description": "The audio sample rate in Hertz. The default is 48000 Hertz.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "AudioMapping": {
        "description": "The mapping for the JobConfig.edit_list atoms with audio EditAtom.inputs.",
        "properties": {
          "atomKey": {
            "description": "Required. The EditAtom.key that references the atom with audio inputs in the JobConfig.edit_list.",
            "type": "string"
          },
          "gainDb": {
            "description": "Audio volume control in dB. Negative values decrease volume, positive values increase. The default is 0.",
            "format": "double",
            "type": "number"
          },
          "inputChannel": {
            "description": "Required. The zero-based index of the channel in the input audio stream.",
            "format": "int32",
            "type": "integer"
          },
          "inputKey": {
            "description": "Required. The Input.key that identifies the input file.",
            "type": "string"
          },
          "inputTrack": {
            "description": "Required. The zero-based index of the track in the input file.",
            "format": "int32",
            "type": "integer"
          },
          "outputChannel": {
            "description": "Required. The zero-based index of the channel in the output audio stream.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "TextStream": {
        "description": "Encoding of a text stream. For example, closed captions or subtitles.",
        "properties": {
          "codec": {
            "description": "The codec for this text stream. The default is `webvtt`. Supported text codecs: - `srt` - `ttml` - `cea608` - `cea708` - `webvtt`",
            "type": "string"
          },
          "displayName": {
            "description": "The name for this particular text stream that will be added to the HLS/DASH manifest. Not supported in MP4 files.",
            "type": "string"
          },
          "languageCode": {
            "description": "The BCP-47 language code, such as `en-US` or `sr-Latn`. For more information, see https://www.unicode.org/reports/tr35/#Unicode_locale_identifier. Not supported in MP4 files.",
            "type": "string"
          },
          "mapping": {
            "description": "The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.",
            "items": {
              "$ref": "#/$defs/TextMapping"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "TextMapping": {
        "description": "The mapping for the JobConfig.edit_list atoms with text EditAtom.inputs.",
        "properties": {
          "atomKey": {
            "description": "Required. The EditAtom.key that references atom with text inputs in the JobConfig.edit_list.",
            "type": "string"
          },
          "inputKey": {
            "description": "Required. The Input.key that identifies the input file.",
            "type": "string"
          },
          "inputTrack": {
            "description": "Required. The zero-based index of the track in the input file.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "VideoStream": {
        "description": "Video stream resource.",
        "properties": {
          "h264": {
            "$ref": "#/$defs/H264CodecSettings"
          },
          "h265": {
            "$ref": "#/$defs/H265CodecSettings"
          },
          "vp9": {
            "$ref": "#/$defs/Vp9CodecSettings"
          }
        },
        "type": "object"
      },
      "H264CodecSettings": {
        "description": "H264 codec settings.",
        "properties": {
          "allowOpenGop": {
            "description": "Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.",
            "type": "boolean"
          },
          "aqStrength": {
            "description": "Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.",
            "format": "double",
            "type": "number"
          },
          "bFrameCount": {
            "description": "The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H264CodecSettings.gop_frame_count if set. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "bPyramid": {
            "description": "Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.",
            "type": "boolean"
          },
          "bitrateBps": {
            "description": "Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "crfLevel": {
            "description": "Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.",
            "format": "int32",
            "type": "integer"
          },
          "enableTwoPass": {
            "description": "Use two-pass encoding strategy to achieve better video quality. H264CodecSettings.rate_control_mode must be `vbr`. The default is `false`.",
            "type": "boolean"
          },
          "entropyCoder": {
            "description": "The entropy coder to use. The default is `cabac`. Supported entropy coders: - `cavlc` - `cabac`",
            "type": "string"
          },
          "frameRate": {
            "description": "Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.",
            "format": "double",
            "type": "number"
          },
          "frameRateConversionStrategy": {
            "description": "Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.",
            "enum": [
              "FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED",
              "DOWNSAMPLE",
              "DROP_DUPLICATE"
            ],
            "type": "string"
          },
          "gopDuration": {
            "description": "Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.",
            "format": "google-duration",
            "type": "string"
          },
          "gopFrameCount": {
            "description": "Select the GOP size based on the specified frame count. Must be greater than zero.",
            "format": "int32",
            "type": "integer"
          },
          "heightPixels": {
            "description": "The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          },
          "hlg": {
            "$ref": "#/$defs/H264ColorFormatHLG"
          },
          "pixelFormat": {
            "description": "Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format",
            "type": "string"
          },
          "preset": {
            "description": "Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.",
            "type": "string"
          },
          "profile": {
            "description": "Enforces the specified codec profile. The following profiles are supported: * `baseline` * `main` * `high` (default) The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.",
            "type": "string"
          },
          "rateControlMode": {
            "description": "Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor",
            "type": "string"
          },
          "sdr": {
            "$ref": "#/$defs/H264ColorFormatSDR"
          },
          "tune": {
            "description": "Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune). Note that certain values for this field may cause the transcoder to override other fields you set in the `H264CodecSettings` message.",
            "type": "string"
          },
          "vbvFullnessBits": {
            "description": "Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H264CodecSettings.vbv_size_bits.",
            "format": "int32",
            "type": "integer"
          },
          "vbvSizeBits": {
            "description": "Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to H264CodecSettings.bitrate_bps.",
            "format": "int32",
            "type": "integer"
          },
          "widthPixels": {
            "description": "The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "H264ColorFormatHLG": {
        "description": "Convert the input video to a Hybrid Log Gamma (HLG) video.",
        "properties": {},
        "type": "object"
      },
      "H264ColorFormatSDR": {
        "description": "Convert the input video to a Standard Dynamic Range (SDR) video.",
        "properties": {},
        "type": "object"
      },
      "H265CodecSettings": {
        "description": "H265 codec settings.",
        "properties": {
          "allowOpenGop": {
            "description": "Specifies whether an open Group of Pictures (GOP) structure should be allowed or not. The default is `false`.",
            "type": "boolean"
          },
          "aqStrength": {
            "description": "Specify the intensity of the adaptive quantizer (AQ). Must be between 0 and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A higher value equals a lower bitrate but smoother image. The default is 0.",
            "format": "double",
            "type": "number"
          },
          "bFrameCount": {
            "description": "The number of consecutive B-frames. Must be greater than or equal to zero. Must be less than H265CodecSettings.gop_frame_count if set. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "bPyramid": {
            "description": "Allow B-pyramid for reference frame selection. This may not be supported on all decoders. The default is `false`.",
            "type": "boolean"
          },
          "bitrateBps": {
            "description": "Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 800,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "crfLevel": {
            "description": "Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21.",
            "format": "int32",
            "type": "integer"
          },
          "enableTwoPass": {
            "description": "Use two-pass encoding strategy to achieve better video quality. H265CodecSettings.rate_control_mode must be `vbr`. The default is `false`.",
            "type": "boolean"
          },
          "frameRate": {
            "description": "Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.",
            "format": "double",
            "type": "number"
          },
          "frameRateConversionStrategy": {
            "description": "Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.",
            "enum": [
              "FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED",
              "DOWNSAMPLE",
              "DROP_DUPLICATE"
            ],
            "type": "string"
          },
          "gopDuration": {
            "description": "Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.",
            "format": "google-duration",
            "type": "string"
          },
          "gopFrameCount": {
            "description": "Select the GOP size based on the specified frame count. Must be greater than zero.",
            "format": "int32",
            "type": "integer"
          },
          "hdr10": {
            "$ref": "#/$defs/H265ColorFormatHDR10"
          },
          "heightPixels": {
            "description": "The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          },
          "hlg": {
            "$ref": "#/$defs/H265ColorFormatHLG"
          },
          "pixelFormat": {
            "description": "Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format",
            "type": "string"
          },
          "preset": {
            "description": "Enforces the specified codec preset. The default is `veryfast`. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.",
            "type": "string"
          },
          "profile": {
            "description": "Enforces the specified codec profile. The following profiles are supported: * 8-bit profiles * `main` (default) * `main-intra` * `mainstillpicture` * 10-bit profiles * `main10` (default) * `main10-intra` * `main422-10` * `main422-10-intra` * `main444-10` * `main444-10-intra` * 12-bit profiles * `main12` (default) * `main12-intra` * `main422-12` * `main422-12-intra` * `main444-12` * `main444-12-intra` The available options are [FFmpeg-compatible](https://x265.readthedocs.io/). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.",
            "type": "string"
          },
          "rateControlMode": {
            "description": "Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate - `crf` - constant rate factor",
            "type": "string"
          },
          "sdr": {
            "$ref": "#/$defs/H265ColorFormatSDR"
          },
          "tune": {
            "description": "Enforces the specified codec tune. The available options are [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265). Note that certain values for this field may cause the transcoder to override other fields you set in the `H265CodecSettings` message.",
            "type": "string"
          },
          "vbvFullnessBits": {
            "description": "Initial fullness of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to 90% of H265CodecSettings.vbv_size_bits.",
            "format": "int32",
            "type": "integer"
          },
          "vbvSizeBits": {
            "description": "Size of the Video Buffering Verifier (VBV) buffer in bits. Must be greater than zero. The default is equal to `VideoStream.bitrate_bps`.",
            "format": "int32",
            "type": "integer"
          },
          "widthPixels": {
            "description": "The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "H265ColorFormatHDR10": {
        "description": "Convert the input video to a High Dynamic Range 10 (HDR10) video.",
        "properties": {},
        "type": "object"
      },
      "H265ColorFormatHLG": {
        "description": "Convert the input video to a Hybrid Log Gamma (HLG) video.",
        "properties": {},
        "type": "object"
      },
      "H265ColorFormatSDR": {
        "description": "Convert the input video to a Standard Dynamic Range (SDR) video.",
        "properties": {},
        "type": "object"
      },
      "Vp9CodecSettings": {
        "description": "VP9 codec settings.",
        "properties": {
          "bitrateBps": {
            "description": "Required. The video bitrate in bits per second. The minimum value is 1,000. The maximum value is 480,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "crfLevel": {
            "description": "Target CRF level. Must be between 10 and 36, where 10 is the highest quality and 36 is the most efficient compression. The default is 21. **Note:** This field is not supported.",
            "format": "int32",
            "type": "integer"
          },
          "frameRate": {
            "description": "Required. The target video frame rate in frames per second (FPS). Must be less than or equal to 120.",
            "format": "double",
            "type": "number"
          },
          "frameRateConversionStrategy": {
            "description": "Optional. Frame rate conversion strategy for desired frame rate. The default is `DOWNSAMPLE`.",
            "enum": [
              "FRAME_RATE_CONVERSION_STRATEGY_UNSPECIFIED",
              "DOWNSAMPLE",
              "DROP_DUPLICATE"
            ],
            "type": "string"
          },
          "gopDuration": {
            "description": "Select the GOP size based on the specified duration. The default is `3s`. Note that `gopDuration` must be less than or equal to [`segmentDuration`](#SegmentSettings), and [`segmentDuration`](#SegmentSettings) must be divisible by `gopDuration`.",
            "format": "google-duration",
            "type": "string"
          },
          "gopFrameCount": {
            "description": "Select the GOP size based on the specified frame count. Must be greater than zero.",
            "format": "int32",
            "type": "integer"
          },
          "heightPixels": {
            "description": "The height of the video in pixels. Must be an even integer. When not specified, the height is adjusted to match the specified width and input aspect ratio. If both are omitted, the input height is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          },
          "hlg": {
            "$ref": "#/$defs/Vp9ColorFormatHLG"
          },
          "pixelFormat": {
            "description": "Pixel format to use. The default is `yuv420p`. Supported pixel formats: - `yuv420p` pixel format - `yuv422p` pixel format - `yuv444p` pixel format - `yuv420p10` 10-bit HDR pixel format - `yuv422p10` 10-bit HDR pixel format - `yuv444p10` 10-bit HDR pixel format - `yuv420p12` 12-bit HDR pixel format - `yuv422p12` 12-bit HDR pixel format - `yuv444p12` 12-bit HDR pixel format",
            "type": "string"
          },
          "profile": {
            "description": "Enforces the specified codec profile. The following profiles are supported: * `profile0` (default) * `profile1` * `profile2` * `profile3` The available options are [WebM-compatible](https://www.webmproject.org/vp9/profiles/). Note that certain values for this field may cause the transcoder to override other fields you set in the `Vp9CodecSettings` message.",
            "type": "string"
          },
          "rateControlMode": {
            "description": "Specify the mode. The default is `vbr`. Supported rate control modes: - `vbr` - variable bitrate",
            "type": "string"
          },
          "sdr": {
            "$ref": "#/$defs/Vp9ColorFormatSDR"
          },
          "widthPixels": {
            "description": "The width of the video in pixels. Must be an even integer. When not specified, the width is adjusted to match the specified height and input aspect ratio. If both are omitted, the input width is used. For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Vp9ColorFormatHLG": {
        "description": "Convert the input video to a Hybrid Log Gamma (HLG) video.",
        "properties": {},
        "type": "object"
      },
      "Vp9ColorFormatSDR": {
        "description": "Convert the input video to a Standard Dynamic Range (SDR) video.",
        "properties": {},
        "type": "object"
      },
      "Encryption": {
        "description": "Encryption settings.",
        "properties": {
          "aes128": {
            "$ref": "#/$defs/Aes128Encryption"
          },
          "drmSystems": {
            "$ref": "#/$defs/DrmSystems"
          },
          "id": {
            "description": "Required. Identifier for this set of encryption options.",
            "type": "string"
          },
          "mpegCenc": {
            "$ref": "#/$defs/MpegCommonEncryption"
          },
          "sampleAes": {
            "$ref": "#/$defs/SampleAesEncryption"
          },
          "secretManagerKeySource": {
            "$ref": "#/$defs/SecretManagerSource"
          }
        },
        "type": "object"
      },
      "Aes128Encryption": {
        "description": "Configuration for AES-128 encryption.",
        "properties": {},
        "type": "object"
      },
      "DrmSystems": {
        "description": "Defines configuration for DRM systems in use.",
        "properties": {
          "clearkey": {
            "$ref": "#/$defs/Clearkey"
          },
          "fairplay": {
            "$ref": "#/$defs/Fairplay"
          },
          "playready": {
            "$ref": "#/$defs/Playready"
          },
          "widevine": {
            "$ref": "#/$defs/Widevine"
          }
        },
        "type": "object"
      },
      "Clearkey": {
        "description": "Clearkey configuration.",
        "properties": {},
        "type": "object"
      },
      "Fairplay": {
        "description": "Fairplay configuration.",
        "properties": {},
        "type": "object"
      },
      "Playready": {
        "description": "Playready configuration.",
        "properties": {},
        "type": "object"
      },
      "Widevine": {
        "description": "Widevine configuration.",
        "properties": {},
        "type": "object"
      },
      "MpegCommonEncryption": {
        "description": "Configuration for MPEG Common Encryption (MPEG-CENC).",
        "properties": {
          "scheme": {
            "description": "Required. Specify the encryption scheme. Supported encryption schemes: - `cenc` - `cbcs`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SampleAesEncryption": {
        "description": "Configuration for SAMPLE-AES encryption.",
        "properties": {},
        "type": "object"
      },
      "SecretManagerSource": {
        "description": "Configuration for secrets stored in Google Secret Manager.",
        "properties": {
          "secretVersion": {
            "description": "Required. The name of the Secret Version containing the encryption key in the following format: `projects/{project}/secrets/{secret_id}/versions/{version_number}` Note that only numbered versions are supported. Aliases like \"latest\" are not supported.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Input": {
        "description": "Input asset.",
        "properties": {
          "key": {
            "description": "A unique key for this input. Must be specified when using advanced mapping and edit lists.",
            "type": "string"
          },
          "preprocessingConfig": {
            "$ref": "#/$defs/PreprocessingConfig"
          },
          "uri": {
            "description": "URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). If empty, the value is populated from Job.input_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PreprocessingConfig": {
        "description": "Preprocessing configurations.",
        "properties": {
          "audio": {
            "$ref": "#/$defs/Audio"
          },
          "color": {
            "$ref": "#/$defs/Color"
          },
          "crop": {
            "$ref": "#/$defs/Crop"
          },
          "deblock": {
            "$ref": "#/$defs/Deblock"
          },
          "deinterlace": {
            "$ref": "#/$defs/Deinterlace"
          },
          "denoise": {
            "$ref": "#/$defs/Denoise"
          },
          "pad": {
            "$ref": "#/$defs/Pad"
          }
        },
        "type": "object"
      },
      "Audio": {
        "description": "Audio preprocessing configuration.",
        "properties": {
          "highBoost": {
            "description": "Enable boosting high frequency components. The default is `false`. **Note:** This field is not supported.",
            "type": "boolean"
          },
          "lowBoost": {
            "description": "Enable boosting low frequency components. The default is `false`. **Note:** This field is not supported.",
            "type": "boolean"
          },
          "lufs": {
            "description": "Specify audio loudness normalization in loudness units relative to full scale (LUFS). Enter a value between -24 and 0 (the default), where: * -24 is the Advanced Television Systems Committee (ATSC A/85) standard * -23 is the EU R128 broadcast standard * -19 is the prior standard for online mono audio * -18 is the ReplayGain standard * -16 is the prior standard for stereo audio * -14 is the new online audio standard recommended by Spotify, as well as Amazon Echo * 0 disables normalization",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Color": {
        "description": "Color preprocessing configuration. **Note:** This configuration is not supported.",
        "properties": {
          "brightness": {
            "description": "Control brightness of the video. Enter a value between -1 and 1, where -1 is minimum brightness and 1 is maximum brightness. 0 is no change. The default is 0.",
            "format": "double",
            "type": "number"
          },
          "contrast": {
            "description": "Control black and white contrast of the video. Enter a value between -1 and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no change. The default is 0.",
            "format": "double",
            "type": "number"
          },
          "saturation": {
            "description": "Control color saturation of the video. Enter a value between -1 and 1, where -1 is fully desaturated and 1 is maximum saturation. 0 is no change. The default is 0.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Crop": {
        "description": "Video cropping configuration for the input video. The cropped input video is scaled to match the output resolution.",
        "properties": {
          "bottomPixels": {
            "description": "The number of pixels to crop from the bottom. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "leftPixels": {
            "description": "The number of pixels to crop from the left. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "rightPixels": {
            "description": "The number of pixels to crop from the right. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "topPixels": {
            "description": "The number of pixels to crop from the top. The default is 0.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Deblock": {
        "description": "Deblock preprocessing configuration. **Note:** This configuration is not supported.",
        "properties": {
          "enabled": {
            "description": "Enable deblocker. The default is `false`.",
            "type": "boolean"
          },
          "strength": {
            "description": "Set strength of the deblocker. Enter a value between 0 and 1. The higher the value, the stronger the block removal. 0 is no deblocking. The default is 0.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "Deinterlace": {
        "description": "Deinterlace configuration for input video.",
        "properties": {
          "bwdif": {
            "$ref": "#/$defs/BwdifConfig"
          },
          "yadif": {
            "$ref": "#/$defs/YadifConfig"
          }
        },
        "type": "object"
      },
      "BwdifConfig": {
        "description": "Bob Weaver Deinterlacing Filter Configuration.",
        "properties": {
          "deinterlaceAllFrames": {
            "description": "Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.",
            "type": "boolean"
          },
          "mode": {
            "description": "Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field",
            "type": "string"
          },
          "parity": {
            "description": "The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity",
            "type": "string"
          }
        },
        "type": "object"
      },
      "YadifConfig": {
        "description": "Yet Another Deinterlacing Filter Configuration.",
        "properties": {
          "deinterlaceAllFrames": {
            "description": "Deinterlace all frames rather than just the frames identified as interlaced. The default is `false`.",
            "type": "boolean"
          },
          "disableSpatialInterlacing": {
            "description": "Disable spacial interlacing. The default is `false`.",
            "type": "boolean"
          },
          "mode": {
            "description": "Specifies the deinterlacing mode to adopt. The default is `send_frame`. Supported values: - `send_frame`: Output one frame for each frame - `send_field`: Output one frame for each field",
            "type": "string"
          },
          "parity": {
            "description": "The picture field parity assumed for the input interlaced video. The default is `auto`. Supported values: - `tff`: Assume the top field is first - `bff`: Assume the bottom field is first - `auto`: Enable automatic detection of field parity",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Denoise": {
        "description": "Denoise preprocessing configuration. **Note:** This configuration is not supported.",
        "properties": {
          "strength": {
            "description": "Set strength of the denoise. Enter a value between 0 and 1. The higher the value, the smoother the image. 0 is no denoising. The default is 0.",
            "format": "double",
            "type": "number"
          },
          "tune": {
            "description": "Set the denoiser mode. The default is `standard`. Supported denoiser modes: - `standard` - `grain`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Pad": {
        "description": "Pad filter configuration for the input video. The padded input video is scaled after padding with black to match the output resolution.",
        "properties": {
          "bottomPixels": {
            "description": "The number of pixels to add to the bottom. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "leftPixels": {
            "description": "The number of pixels to add to the left. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "rightPixels": {
            "description": "The number of pixels to add to the right. The default is 0.",
            "format": "int32",
            "type": "integer"
          },
          "topPixels": {
            "description": "The number of pixels to add to the top. The default is 0.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Manifest": {
        "description": "Manifest configuration.",
        "properties": {
          "dash": {
            "$ref": "#/$defs/DashConfig"
          },
          "fileName": {
            "description": "The name of the generated file. The default is `manifest` with the extension suffix corresponding to the Manifest.type.",
            "type": "string"
          },
          "muxStreams": {
            "description": "Required. List of user supplied MuxStream.key values that should appear in this manifest. When Manifest.type is `HLS`, a media manifest with name MuxStream.key and `.m3u8` extension is generated for each element in this list.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "type": {
            "description": "Required. Type of the manifest.",
            "enum": [
              "MANIFEST_TYPE_UNSPECIFIED",
              "HLS",
              "DASH"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "DashConfig": {
        "description": "`DASH` manifest configuration.",
        "properties": {
          "segmentReferenceScheme": {
            "description": "The segment reference scheme for a `DASH` manifest. The default is `SEGMENT_LIST`.",
            "enum": [
              "SEGMENT_REFERENCE_SCHEME_UNSPECIFIED",
              "SEGMENT_LIST",
              "SEGMENT_TEMPLATE_NUMBER"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "MuxStream": {
        "description": "Multiplexing settings for output stream.",
        "properties": {
          "container": {
            "description": "The container format. The default is `mp4` Supported container formats: - `ts` - `fmp4`- the corresponding file extension is `.m4s` - `mp4` - `vtt` See also: [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)",
            "type": "string"
          },
          "elementaryStreams": {
            "description": "List of ElementaryStream.key values multiplexed in this stream.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "encryptionId": {
            "description": "Identifier of the encryption configuration to use. If omitted, output will be unencrypted.",
            "type": "string"
          },
          "fileName": {
            "description": "The name of the generated file. The default is MuxStream.key with the extension suffix corresponding to the MuxStream.container. Individual segments also have an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `mux_stream0000000123.ts`.",
            "type": "string"
          },
          "fmp4": {
            "$ref": "#/$defs/Fmp4Config"
          },
          "key": {
            "description": "A unique key for this multiplexed stream.",
            "type": "string"
          },
          "segmentSettings": {
            "$ref": "#/$defs/SegmentSettings"
          }
        },
        "type": "object"
      },
      "Fmp4Config": {
        "description": "`fmp4` container configuration.",
        "properties": {
          "codecTag": {
            "description": "Optional. Specify the codec tag string that will be used in the media bitstream. When not specified, the codec appropriate value is used. Supported H265 codec tags: - `hvc1` (default) - `hev1`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SegmentSettings": {
        "description": "Segment settings for `ts`, `fmp4` and `vtt`.",
        "properties": {
          "individualSegments": {
            "description": "Required. Create an individual segment file. The default is `false`.",
            "type": "boolean"
          },
          "segmentDuration": {
            "description": "Duration of the segments in seconds. The default is `6.0s`. Note that `segmentDuration` must be greater than or equal to [`gopDuration`](#videostream), and `segmentDuration` must be divisible by [`gopDuration`](#videostream).",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Output": {
        "description": "Location of output file(s) in a Cloud Storage bucket.",
        "properties": {
          "uri": {
            "description": "URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Overlay": {
        "description": "Overlay configuration.",
        "properties": {
          "animations": {
            "description": "List of animations. The list should be chronological, without any time overlap.",
            "items": {
              "$ref": "#/$defs/Animation"
            },
            "type": "array"
          },
          "image": {
            "$ref": "#/$defs/Image"
          }
        },
        "type": "object"
      },
      "Animation": {
        "description": "Animation types.",
        "properties": {
          "animationEnd": {
            "$ref": "#/$defs/AnimationEnd"
          },
          "animationFade": {
            "$ref": "#/$defs/AnimationFade"
          },
          "animationStatic": {
            "$ref": "#/$defs/AnimationStatic"
          }
        },
        "type": "object"
      },
      "AnimationEnd": {
        "description": "End previous overlay animation from the video. Without `AnimationEnd`, the overlay object will keep the state of previous animation until the end of the video.",
        "properties": {
          "startTimeOffset": {
            "description": "The time to end overlay object, in seconds. Default: 0",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AnimationFade": {
        "description": "Display overlay object with fade animation.",
        "properties": {
          "endTimeOffset": {
            "description": "The time to end the fade animation, in seconds. Default: `start_time_offset` + 1s",
            "format": "google-duration",
            "type": "string"
          },
          "fadeType": {
            "description": "Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.",
            "enum": [
              "FADE_TYPE_UNSPECIFIED",
              "FADE_IN",
              "FADE_OUT"
            ],
            "type": "string"
          },
          "startTimeOffset": {
            "description": "The time to start the fade animation, in seconds. Default: 0",
            "format": "google-duration",
            "type": "string"
          },
          "xy": {
            "$ref": "#/$defs/NormalizedCoordinate"
          }
        },
        "type": "object"
      },
      "NormalizedCoordinate": {
        "description": "2D normalized coordinates. Default: `{0.0, 0.0}`",
        "properties": {
          "x": {
            "description": "Normalized x coordinate.",
            "format": "double",
            "type": "number"
          },
          "y": {
            "description": "Normalized y coordinate.",
            "format": "double",
            "type": "number"
          }
        },
        "type": "object"
      },
      "AnimationStatic": {
        "description": "Display static overlay object.",
        "properties": {
          "startTimeOffset": {
            "description": "The time to start displaying the overlay object, in seconds. Default: 0",
            "format": "google-duration",
            "type": "string"
          },
          "xy": {
            "$ref": "#/$defs/NormalizedCoordinate"
          }
        },
        "type": "object"
      },
      "Image": {
        "description": "Overlaid image.",
        "properties": {
          "alpha": {
            "description": "Target image opacity. Valid values are from `1.0` (solid, default) to `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.",
            "format": "double",
            "type": "number"
          },
          "resolution": {
            "$ref": "#/$defs/NormalizedCoordinate"
          },
          "uri": {
            "description": "Required. URI of the image in Cloud Storage. For example, `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PubsubDestination": {
        "description": "A Pub/Sub destination.",
        "properties": {
          "topic": {
            "description": "The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SpriteSheet": {
        "description": "Sprite sheet configuration.",
        "properties": {
          "columnCount": {
            "description": "The maximum number of sprites per row in a sprite sheet. The default is 0, which indicates no maximum limit.",
            "format": "int32",
            "type": "integer"
          },
          "endTimeOffset": {
            "description": "End time in seconds, relative to the output file timeline. When `end_time_offset` is not specified, the sprites are generated until the end of the output file.",
            "format": "google-duration",
            "type": "string"
          },
          "filePrefix": {
            "description": "Required. File name prefix for the generated sprite sheets. Each sprite sheet has an incremental 10-digit zero-padded suffix starting from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.",
            "type": "string"
          },
          "format": {
            "description": "Format type. The default is `jpeg`. Supported formats: - `jpeg`",
            "type": "string"
          },
          "interval": {
            "description": "Starting from `0s`, create sprites at regular intervals. Specify the interval value in seconds.",
            "format": "google-duration",
            "type": "string"
          },
          "quality": {
            "description": "The quality of the generated sprite sheet. Enter a value between 1 and 100, where 1 is the lowest quality and 100 is the highest quality. The default is 100. A high quality value corresponds to a low image data compression ratio.",
            "format": "int32",
            "type": "integer"
          },
          "rowCount": {
            "description": "The maximum number of rows per sprite sheet. When the sprite sheet is full, a new sprite sheet is created. The default is 0, which indicates no maximum limit.",
            "format": "int32",
            "type": "integer"
          },
          "spriteHeightPixels": {
            "description": "Required. The height of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_height_pixels field or the SpriteSheet.sprite_width_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the height, in pixels, per the horizontal ASR. The API calculates the width per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          },
          "spriteWidthPixels": {
            "description": "Required. The width of sprite in pixels. Must be an even integer. To preserve the source aspect ratio, set the SpriteSheet.sprite_width_pixels field or the SpriteSheet.sprite_height_pixels field, but not both (the API will automatically calculate the missing field). For portrait videos that contain horizontal ASR and rotation metadata, provide the width, in pixels, per the horizontal ASR. The API calculates the height per the horizontal ASR. The API detects any rotation metadata and swaps the requested height and width for the output.",
            "format": "int32",
            "type": "integer"
          },
          "startTimeOffset": {
            "description": "Start time in seconds, relative to the output file timeline. Determines the first sprite to pick. The default is `0s`.",
            "format": "google-duration",
            "type": "string"
          },
          "totalCount": {
            "description": "Total number of sprites. Create the specified number of sprites distributed evenly across the timeline of the output media. The default is 100.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://transcoder.googleapis.com//v1/{parent}/jobs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Transcoding job resource.",
        "**Key properties:**",
        {
          "$ul": [
            "**batchModePriority**: The processing priority of a batch job. This field can only be set for batch mode jobs. The default value is 0. This value cannot be negative. Higher values correspond to higher priorities for the job.",
            [
              "**config**: Job configuration",
              {
                "$ul": [
                  "**adBreaks**: List of ad breaks. Specifies where to insert ad break tags in the output manifests.",
                  "**editList**: List of edit atoms. Defines the ultimate timeline of the resulting file or manifest.",
                  "**elementaryStreams**: List of elementary streams.",
                  "**encryptions**: List of encryption configurations for the content. Each configuration has an ID. Specify this ID in the MuxStream.encryption_id field to indicate the configuration to use for that `MuxStream` output.",
                  "**inputs**: List of input assets stored in Cloud Storage.",
                  "**manifests**: List of output manifests.",
                  "**muxStreams**: List of multiplexing settings for output streams.",
                  [
                    "**output**: Location of output file(s) in a Cloud Storage bucket.",
                    {
                      "$ul": [
                        "**uri**: URI for the output file(s). For example, `gs://my-bucket/outputs/`. If empty, the value is populated from Job.output_uri. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)."
                      ]
                    }
                  ],
                  "**overlays**: List of overlays on the output video, in descending Z-order.",
                  [
                    "**pubsubDestination**: A Pub/Sub destination.",
                    {
                      "$ul": [
                        "**topic**: The name of the Pub/Sub topic to publish job completion notification to. For example: `projects/{project}/topics/{topic}`."
                      ]
                    }
                  ],
                  "**spriteSheets**: List of output sprite sheets. Spritesheets require at least one VideoStream in the Jobconfig."
                ]
              }
            ],
            "**createTime**: Output only. The time the job was created.",
            "**endTime**: Output only. The time the transcoding finished.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**inputUri**: Input only. Specify the `input_uri` to populate empty `uri` fields in each element of `Job.config.inputs` or `JobTemplate.config.inputs` when using template. URI of the media. Input files must be at least 5 seconds in duration and stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`). See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).",
            "**labels**: The labels associated with this job. You can use these to organize and group your jobs.",
            "**mode**: The processing mode of the job. The default is `PROCESSING_MODE_INTERACTIVE`.",
            "**name**: The resource name of the job. Format: `projects/{project_number}/locations/{location}/jobs/{job}`",
            "**optimization**: Optional. The optimization strategy of the job. The default is `AUTODETECT`.",
            "**outputUri**: Input only. Specify the `output_uri` to populate an empty `Job.config.output.uri` or `JobTemplate.config.output.uri` when using template. URI for the output file(s). For example, `gs://my-bucket/outputs/`. See [Supported input and output formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).",
            "**startTime**: Output only. The time the transcoding started.",
            "**state**: Output only. The current state of the job.",
            "**templateId**: Input only. Specify the `template_id` to use for populating `Job.config`. The default is `preset/web-hd`, which is the only supported preset. User defined JobTemplate: `{job_template_id}`",
            "**ttlAfterCompletionDays**: Job time to live value in days, which will be effective after job completion. Job should be deleted automatically after the given TTL. Enter a value between 1 and 90. The default is 30."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
