{
  "name": "spanner_projects_instances_databases_patch",
  "description": "Updates a Cloud Spanner database. The returned long-running operation can be used to track the progress of updating the database. If the named database does not exist, returns `NOT_FOUND`. While the operation is pending: * The database's reconciling field is set to true. * Cancelling the operation is best-effort. If the cancellation succeeds, the operation metadata's cancel_time is set, the updates are reverted, and the operation terminates with a `CANCELLED` status. * New UpdateDatabase requests will return a `FAILED_PRECONDITION` error until the pending operation is done (returns successfully or with error). * Reading the database via the API continues to give the pre-request values. Upon completion of the returned operation: * The new values are in effect and readable via the API. * The database's reconciling field becomes false. The returned long-running operation will have a name of the format `projects//instances//databases//operations/` and can be used to track the database modification. The metadata field type is UpdateDatabaseMetadata. The response field type is Database, if successful.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Required. The name of the database. Values are of the form `projects//instances//databases/`, where `` is as specified in the `CREATE DATABASE` statement. This name can be passed to other API methods to identify the database."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. The list of fields to update. Currently, only `enable_drop_protection` field can be updated."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Database"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Database": {
        "description": "A Cloud Spanner database.",
        "properties": {
          "createTime": {
            "description": "Output only. If exists, the time at which the database creation started.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "databaseDialect": {
            "description": "Output only. The dialect of the Cloud Spanner Database.",
            "enum": [
              "DATABASE_DIALECT_UNSPECIFIED",
              "GOOGLE_STANDARD_SQL",
              "POSTGRESQL"
            ],
            "readOnly": true,
            "type": "string"
          },
          "defaultLeader": {
            "description": "Output only. The read-write region which contains the database's leader replicas. This is the same as the value of default_leader database option set using DatabaseAdmin.CreateDatabase or DatabaseAdmin.UpdateDatabaseDdl. If not explicitly set, this is empty.",
            "readOnly": true,
            "type": "string"
          },
          "earliestVersionTime": {
            "description": "Output only. Earliest timestamp at which older versions of the data can be read. This value is continuously updated by Cloud Spanner and becomes stale the moment it is queried. If you are using this value to recover data, make sure to account for the time from the moment when the value is queried to the moment when you initiate the recovery.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "enableDropProtection": {
            "description": "Whether drop protection is enabled for this database. Defaults to false, if not set. For more details, please see how to [prevent accidental database deletion](https://cloud.google.com/spanner/docs/prevent-database-deletion).",
            "type": "boolean"
          },
          "encryptionConfig": {
            "$ref": "#/$defs/EncryptionConfig"
          },
          "encryptionInfo": {
            "description": "Output only. For databases that are using customer managed encryption, this field contains the encryption information for the database, such as all Cloud KMS key versions that are in use. The `encryption_status' field inside of each `EncryptionInfo` is not populated. For databases that are using Google default or other types of encryption, this field is empty. This field is propagated lazily from the backend. There might be a delay from when a key version is being used and when it appears in this field.",
            "items": {
              "$ref": "#/$defs/EncryptionInfo"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Required. The name of the database. Values are of the form `projects//instances//databases/`, where `` is as specified in the `CREATE DATABASE` statement. This name can be passed to other API methods to identify the database.",
            "type": "string"
          },
          "reconciling": {
            "description": "Output only. If true, the database is being updated. If false, there are no ongoing update operations for the database.",
            "readOnly": true,
            "type": "boolean"
          },
          "restoreInfo": {
            "$ref": "#/$defs/RestoreInfo"
          },
          "state": {
            "description": "Output only. The current database state.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY",
              "READY_OPTIMIZING"
            ],
            "readOnly": true,
            "type": "string"
          },
          "versionRetentionPeriod": {
            "description": "Output only. The period in which Cloud Spanner retains all versions of data for the database. This is the same as the value of version_retention_period database option set using UpdateDatabaseDdl. Defaults to 1 hour, if not set.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionConfig": {
        "description": "Encryption configuration for a Cloud Spanner database.",
        "properties": {
          "kmsKeyName": {
            "description": "The Cloud KMS key to be used for encrypting and decrypting the database. Values are of the form `projects//locations//keyRings//cryptoKeys/`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EncryptionInfo": {
        "description": "Encryption information for a Cloud Spanner database or backup.",
        "properties": {
          "encryptionStatus": {
            "$ref": "#/$defs/Status"
          },
          "encryptionType": {
            "description": "Output only. The type of encryption.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "GOOGLE_DEFAULT_ENCRYPTION",
              "CUSTOMER_MANAGED_ENCRYPTION"
            ],
            "readOnly": true,
            "type": "string"
          },
          "kmsKeyVersion": {
            "description": "Output only. A Cloud KMS key version that is being used to protect the database or backup.",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "Status": {
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
        "properties": {
          "code": {
            "description": "The status code, which should be an enum value of google.rpc.Code.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "description": "A list of messages that carry the error details. There is a common set of message types for APIs to use.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          },
          "message": {
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RestoreInfo": {
        "description": "Information about the database restore.",
        "properties": {
          "backupInfo": {
            "$ref": "#/$defs/BackupInfo"
          },
          "sourceType": {
            "description": "The type of the restore source.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "BACKUP"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackupInfo": {
        "description": "Information about a backup.",
        "properties": {
          "backup": {
            "description": "Name of the backup.",
            "type": "string"
          },
          "createTime": {
            "description": "The time the CreateBackup request was received.",
            "format": "google-datetime",
            "type": "string"
          },
          "sourceDatabase": {
            "description": "Name of the database the backup was created from.",
            "type": "string"
          },
          "versionTime": {
            "description": "The backup contains an externally consistent copy of `source_database` at the timestamp specified by `version_time`. If the CreateBackup request did not specify `version_time`, the `version_time` of the backup is equivalent to the `create_time`.",
            "format": "google-datetime",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://spanner.googleapis.com//v1/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
