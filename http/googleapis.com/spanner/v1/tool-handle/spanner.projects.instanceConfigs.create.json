{
  "name": "spanner_projects_instanceConfigs_create",
  "description": "Creates an instance config and begins preparing it to be used. The returned long-running operation can be used to track the progress of preparing the new instance config. The instance config name is assigned by the caller. If the named instance config already exists, `CreateInstanceConfig` returns `ALREADY_EXISTS`. Immediately after the request returns: * The instance config is readable via the API, with all requested attributes. The instance config's reconciling field is set to true. Its state is `CREATING`. While the operation is pending: * Cancelling the operation renders the instance config immediately unreadable via the API. * Except for deleting the creating resource, all other attempts to modify the instance config are rejected. Upon completion of the returned operation: * Instances can be created using the instance configuration. * The instance config's reconciling field becomes false. Its state becomes `READY`. The returned long-running operation will have a name of the format `/operations/` and can be used to track creation of the instance config. The metadata field type is CreateInstanceConfigMetadata. The response field type is InstanceConfig, if successful. Authorization requires `spanner.instanceConfigs.create` permission on the resource parent.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The name of the project in which to create the instance config. Values are of the form `projects/`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/CreateInstanceConfigRequest"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "CreateInstanceConfigRequest": {
        "description": "The request for CreateInstanceConfigRequest.",
        "properties": {
          "instanceConfig": {
            "$ref": "#/$defs/InstanceConfig"
          },
          "instanceConfigId": {
            "description": "Required. The ID of the instance config to create. Valid identifiers are of the form `custom-[-a-z0-9]*[a-z0-9]` and must be between 2 and 64 characters in length. The `custom-` prefix is required to avoid name conflicts with Google managed configurations.",
            "type": "string"
          },
          "validateOnly": {
            "description": "An option to validate, but not actually execute, a request, and provide the same response.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "InstanceConfig": {
        "description": "A possible configuration for a Cloud Spanner instance. Configurations define the geographic placement of nodes and their replication.",
        "properties": {
          "baseConfig": {
            "description": "Base configuration name, e.g. projects//instanceConfigs/nam3, based on which this configuration is created. Only set for user managed configurations. `base_config` must refer to a configuration of type GOOGLE_MANAGED in the same project as this configuration.",
            "type": "string"
          },
          "configType": {
            "description": "Output only. Whether this instance config is a Google or User Managed Configuration.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "GOOGLE_MANAGED",
              "USER_MANAGED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "displayName": {
            "description": "The name of this instance configuration as it appears in UIs.",
            "type": "string"
          },
          "etag": {
            "description": "etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a instance config from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform instance config updates in order to avoid race conditions: An etag is returned in the response which contains instance configs, and systems are expected to put that etag in the request to update instance config to ensure that their change will be applied to the same version of the instance config. If no etag is provided in the call to update instance config, then the existing instance config is overwritten blindly.",
            "type": "string"
          },
          "freeInstanceAvailability": {
            "description": "Output only. Describes whether free instances are available to be created in this instance config.",
            "enum": [
              "FREE_INSTANCE_AVAILABILITY_UNSPECIFIED",
              "AVAILABLE",
              "UNSUPPORTED",
              "DISABLED",
              "QUOTA_EXCEEDED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Cloud Labels are a flexible and lightweight mechanism for organizing cloud resources into groups that reflect a customer's organizational needs and deployment strategies. Cloud Labels can be used to filter collections of resources. They can be used to control how resource metrics are aggregated. And they can be used as arguments to policy management rules (e.g. route, firewall, load balancing, etc.). * Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `a-z{0,62}`. * Label values must be between 0 and 63 characters long and must conform to the regular expression `[a-z0-9_-]{0,63}`. * No more than 64 labels can be associated with a given resource. See https://goo.gl/xmQnxf for more information on and examples of labels. If you plan to use labels in your own code, please note that additional characters may be allowed in the future. Therefore, you are advised to use an internal label representation, such as JSON, which doesn't rely upon specific characters being disallowed. For example, representing labels as the string: name + \"_\" + value would prove problematic if we were to allow \"_\" in a future release.",
            "type": "object"
          },
          "leaderOptions": {
            "description": "Allowed values of the \"default_leader\" schema option for databases in instances that use this instance configuration.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "A unique identifier for the instance configuration. Values are of the form `projects//instanceConfigs/a-z*`.",
            "type": "string"
          },
          "optionalReplicas": {
            "description": "Output only. The available optional replicas to choose from for user managed configurations. Populated for Google managed configurations.",
            "items": {
              "$ref": "#/$defs/ReplicaInfo"
            },
            "readOnly": true,
            "type": "array"
          },
          "reconciling": {
            "description": "Output only. If true, the instance config is being created or updated. If false, there are no ongoing operations for the instance config.",
            "readOnly": true,
            "type": "boolean"
          },
          "replicas": {
            "description": "The geographic placement of nodes in this instance configuration and their replication properties.",
            "items": {
              "$ref": "#/$defs/ReplicaInfo"
            },
            "type": "array"
          },
          "state": {
            "description": "Output only. The current instance config state. Applicable only for USER_MANAGED configs.",
            "enum": [
              "STATE_UNSPECIFIED",
              "CREATING",
              "READY"
            ],
            "readOnly": true,
            "type": "string"
          },
          "storageLimitPerProcessingUnit": {
            "description": "Output only. The storage limit in bytes per processing unit.",
            "format": "int64",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ReplicaInfo": {
        "properties": {
          "defaultLeaderLocation": {
            "description": "If true, this location is designated as the default leader location where leader replicas are placed. See the [region types documentation](https://cloud.google.com/spanner/docs/instances#region_types) for more details.",
            "type": "boolean"
          },
          "location": {
            "description": "The location of the serving resources, e.g., \"us-central1\".",
            "type": "string"
          },
          "type": {
            "description": "The type of replica.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "READ_WRITE",
              "READ_ONLY",
              "WITNESS"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://spanner.googleapis.com//v1/{parent}/instanceConfigs{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
