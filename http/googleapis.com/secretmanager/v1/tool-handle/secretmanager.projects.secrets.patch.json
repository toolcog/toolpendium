{
  "name": "secretmanager_projects_secrets_patch",
  "description": "Updates metadata of an existing Secret.",
  "parameters": {
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`."
      },
      "updateMask": {
        "type": "string",
        "description": "Required. Specifies the fields to be updated."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Secret"
      }
    },
    "required": [
      "name"
    ],
    "$defs": {
      "Secret": {
        "description": "A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.",
            "type": "object"
          },
          "createTime": {
            "description": "Output only. The time at which the Secret was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "etag": {
            "description": "Optional. Etag of the currently stored Secret.",
            "type": "string"
          },
          "expireTime": {
            "description": "Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.",
            "format": "google-datetime",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.",
            "type": "object"
          },
          "name": {
            "description": "Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
            "readOnly": true,
            "type": "string"
          },
          "replication": {
            "$ref": "#/$defs/Replication"
          },
          "rotation": {
            "$ref": "#/$defs/Rotation"
          },
          "topics": {
            "description": "Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.",
            "items": {
              "$ref": "#/$defs/Topic"
            },
            "type": "array"
          },
          "ttl": {
            "description": "Input only. The TTL for the Secret.",
            "format": "google-duration",
            "type": "string"
          },
          "versionAliases": {
            "additionalProperties": {
              "format": "int64",
              "type": "string"
            },
            "description": "Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "Replication": {
        "description": "A policy that defines the replication and encryption configuration of data.",
        "properties": {
          "automatic": {
            "$ref": "#/$defs/Automatic"
          },
          "userManaged": {
            "$ref": "#/$defs/UserManaged"
          }
        },
        "type": "object"
      },
      "Automatic": {
        "description": "A replication policy that replicates the Secret payload without any restrictions.",
        "properties": {
          "customerManagedEncryption": {
            "$ref": "#/$defs/CustomerManagedEncryption"
          }
        },
        "type": "object"
      },
      "CustomerManagedEncryption": {
        "description": "Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).",
        "properties": {
          "kmsKeyName": {
            "description": "Required. The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserManaged": {
        "description": "A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas",
        "properties": {
          "replicas": {
            "description": "Required. The list of Replicas for this Secret. Cannot be empty.",
            "items": {
              "$ref": "#/$defs/Replica"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Replica": {
        "description": "Represents a Replica for this Secret.",
        "properties": {
          "customerManagedEncryption": {
            "$ref": "#/$defs/CustomerManagedEncryption"
          },
          "location": {
            "description": "The canonical IDs of the location to replicate data. For example: `\"us-east1\"`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Rotation": {
        "description": "The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.",
        "properties": {
          "nextRotationTime": {
            "description": "Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.",
            "format": "google-datetime",
            "type": "string"
          },
          "rotationPeriod": {
            "description": "Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications.",
            "format": "google-duration",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Topic": {
        "description": "A Pub/Sub topic which Secret Manager will publish to when control plane events occur on this secret.",
        "properties": {
          "name": {
            "description": "Required. The resource name of the Pub/Sub topic that will be published to, in the following format: `projects/*/topics/*`. For publication to succeed, the Secret Manager service agent must have the `pubsub.topic.publish` permission on the topic. The Pub/Sub Publisher role (`roles/pubsub.publisher`) includes this permission.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://secretmanager.googleapis.com//v1/{name}{?updateMask,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "A Secret is a logical secret whose value and versions can be accessed. A Secret is made up of zero or more SecretVersions that represent the secret data.",
        "**Key properties:**",
        {
          "$ul": [
            "**annotations**: Optional. Custom metadata about the secret. Annotations are distinct from various forms of labels. Annotations exist to allow client tools to store their own state information without requiring a database. Annotation keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, begin and end with an alphanumeric character ([a-z0-9A-Z]), and may have dashes (-), underscores (_), dots (.), and alphanumerics in between these symbols. The total size of annotation keys and values must be less than 16KiB.",
            "**createTime**: Output only. The time at which the Secret was created.",
            "**etag**: Optional. Etag of the currently stored Secret.",
            "**expireTime**: Optional. Timestamp in UTC when the Secret is scheduled to expire. This is always provided on output, regardless of what was sent on input.",
            "**labels**: The labels assigned to this Secret. Label keys must be between 1 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `\\p{Ll}\\p{Lo}{0,62}` Label values must be between 0 and 63 characters long, have a UTF-8 encoding of maximum 128 bytes, and must conform to the following PCRE regular expression: `[\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}` No more than 64 labels can be assigned to a given resource.",
            "**name**: Output only. The resource name of the Secret in the format `projects/*/secrets/*`.",
            [
              "**replication**: A policy that defines the replication and encryption configuration of data.",
              {
                "$ul": [
                  [
                    "**automatic**: A replication policy that replicates the Secret payload without any restrictions.",
                    {
                      "$ul": [
                        [
                          "**customerManagedEncryption**: Configuration for encrypting secret payloads using customer-managed encryption keys (CMEK).",
                          {
                            "$ul": [
                              "**kmsKeyName**: Required. The resource name of the Cloud KMS CryptoKey used to encrypt secret payloads. For secrets using the UserManaged replication policy type, Cloud KMS CryptoKeys must reside in the same location as the replica location. For secrets using the Automatic replication policy type, Cloud KMS CryptoKeys must reside in `global`. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`."
                            ]
                          }
                        ]
                      ]
                    }
                  ],
                  [
                    "**userManaged**: A replication policy that replicates the Secret payload into the locations specified in Secret.replication.user_managed.replicas",
                    {
                      "$ul": [
                        "**replicas**: Required. The list of Replicas for this Secret. Cannot be empty."
                      ]
                    }
                  ]
                ]
              }
            ],
            [
              "**rotation**: The rotation time and period for a Secret. At next_rotation_time, Secret Manager will send a Pub/Sub notification to the topics configured on the Secret. Secret.topics must be set to configure rotation.",
              {
                "$ul": [
                  "**nextRotationTime**: Optional. Timestamp in UTC at which the Secret is scheduled to rotate. Cannot be set to less than 300s (5 min) in the future and at most 3153600000s (100 years). next_rotation_time MUST be set if rotation_period is set.",
                  "**rotationPeriod**: Input only. The Duration between rotation notifications. Must be in seconds and at least 3600s (1h) and at most 3153600000s (100 years). If rotation_period is set, next_rotation_time must be set. next_rotation_time will be advanced by this period when the service automatically sends rotation notifications."
                ]
              }
            ],
            "**topics**: Optional. A list of up to 10 Pub/Sub topics to which messages are published when control plane operations are called on the secret or its versions.",
            "**ttl**: Input only. The TTL for the Secret.",
            "**versionAliases**: Optional. Mapping from version alias to version name. A version alias is a string with a maximum length of 63 characters and can contain uppercase and lowercase letters, numerals, and the hyphen (`-`) and underscore ('_') characters. An alias string must start with a letter and cannot be the string 'latest' or 'NEW'. No more than 50 aliases can be assigned to a given secret. Version-Alias pairs will be viewable via GetSecret and modifiable via UpdateSecret. Access by alias is only be supported on GetSecretVersion and AccessSecretVersion."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
