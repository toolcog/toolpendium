{
  "name": "policysimulator_organizations_locations_orgPolicyViolationsPreviews_generate",
  "description": "GenerateOrgPolicyViolationsPreview generates an OrgPolicyViolationsPreview for the proposed changes in the provided OrgPolicyViolationsPreview.OrgPolicyOverlay. The changes to OrgPolicy are specified by this `OrgPolicyOverlay`. The resources to scan are inferred from these specified changes.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The organization under which this OrgPolicyViolationsPreview will be created. Example: `organizations/my-example-org/locations/global`"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview": {
        "description": "OrgPolicyViolationsPreview is a resource providing a preview of the violations that will exist if an OrgPolicy change is made. The list of violations are modeled as child resources and retrieved via a ListOrgPolicyViolations API call. There are potentially more OrgPolicyViolations than could fit in an embedded field. Thus, the use of a child resource instead of a field.",
        "properties": {
          "createTime": {
            "description": "Output only. Time when this `OrgPolicyViolationsPreview` was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "customConstraints": {
            "description": "Output only. The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "name": {
            "description": "Output only. The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`",
            "readOnly": true,
            "type": "string"
          },
          "overlay": {
            "$ref": "#/$defs/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay"
          },
          "resourceCounts": {
            "$ref": "#/$defs/GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts"
          },
          "state": {
            "description": "Output only. The state of the `OrgPolicyViolationsPreview`.",
            "enum": [
              "PREVIEW_STATE_UNSPECIFIED",
              "PREVIEW_PENDING",
              "PREVIEW_RUNNING",
              "PREVIEW_SUCCEEDED",
              "PREVIEW_FAILED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "violationsCount": {
            "description": "Output only. The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay": {
        "description": "The proposed changes to OrgPolicy.",
        "properties": {
          "customConstraints": {
            "description": "Optional. The OrgPolicy CustomConstraint changes to preview violations for. Any existing CustomConstraints with the same name will be overridden in the simulation. That is, violations will be determined as if all custom constraints in the overlay were instantiated. Only a single custom_constraint is supported in the overlay at a time. For evaluating multiple constraints, multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a single constraint.",
            "items": {
              "$ref": "#/$defs/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay"
            },
            "type": "array"
          },
          "policies": {
            "description": "Optional. The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name will be overridden in the simulation. That is, violations will be determined as if all policies in the overlay were created or updated.",
            "items": {
              "$ref": "#/$defs/GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayCustomConstraintOverlay": {
        "description": "A change to an OrgPolicy custom constraint.",
        "properties": {
          "customConstraint": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2CustomConstraint"
          },
          "customConstraintParent": {
            "description": "Optional. Resource the constraint is attached to. Example: \"organization/987654\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudOrgpolicyV2CustomConstraint": {
        "description": "A custom constraint defined by customers which can *only* be applied to the given resource types and organization. By creating a custom constraint, customers can apply policies of this custom constraint. *Creating a custom constraint itself does NOT apply any policy enforcement*.",
        "properties": {
          "actionType": {
            "description": "Allow or deny type.",
            "enum": [
              "ACTION_TYPE_UNSPECIFIED",
              "ALLOW",
              "DENY"
            ],
            "type": "string"
          },
          "condition": {
            "description": "Org policy condition/expression. For example: `resource.instanceName.matches(\"[production|test]_.*_(\\d)+\")` or, `resource.management.auto_upgrade == true` The max length of the condition is 1000 characters.",
            "type": "string"
          },
          "description": {
            "description": "Detailed information about this custom policy constraint. The max length of the description is 2000 characters.",
            "type": "string"
          },
          "displayName": {
            "description": "One line display name for the UI. The max length of the display_name is 200 characters.",
            "type": "string"
          },
          "methodTypes": {
            "description": "All the operations being applied for this constraint.",
            "items": {
              "enum": [
                "METHOD_TYPE_UNSPECIFIED",
                "CREATE",
                "UPDATE",
                "DELETE"
              ],
              "type": "string"
            },
            "type": "array"
          },
          "name": {
            "description": "Immutable. Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms` The max length is 70 characters and the minimum length is 1. Note that the prefix `organizations/{organization_id}/customConstraints/` is not counted.",
            "type": "string"
          },
          "resourceTypes": {
            "description": "Immutable. The resource instance type on which this policy applies. Format will be of the form : `/` Example: * `compute.googleapis.com/Instance`.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "updateTime": {
            "description": "Output only. The last time this custom constraint was updated. This represents the last time that the `CreateCustomConstraint` or `UpdateCustomConstraint` RPC was called",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlayPolicyOverlay": {
        "description": "A change to an OrgPolicy.",
        "properties": {
          "policy": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2Policy"
          },
          "policyParent": {
            "description": "Optional. The parent of the policy we are attaching to. Example: \"projects/123456\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudOrgpolicyV2Policy": {
        "description": "Defines an organization policy which is used to specify constraints for configurations of Google Cloud resources.",
        "properties": {
          "alternate": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2AlternatePolicySpec"
          },
          "dryRunSpec": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2PolicySpec"
          },
          "etag": {
            "description": "Optional. An opaque tag indicating the current state of the policy, used for concurrency control. This 'etag' is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.",
            "type": "string"
          },
          "name": {
            "description": "Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.",
            "type": "string"
          },
          "spec": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2PolicySpec"
          }
        },
        "type": "object"
      },
      "GoogleCloudOrgpolicyV2AlternatePolicySpec": {
        "description": "Similar to PolicySpec but with an extra 'launch' field for launch reference. The PolicySpec here is specific for dry-run/darklaunch.",
        "properties": {
          "launch": {
            "description": "Reference to the launch that will be used while audit logging and to control the launch. Should be set only in the alternate policy.",
            "type": "string"
          },
          "spec": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2PolicySpec"
          }
        },
        "type": "object"
      },
      "GoogleCloudOrgpolicyV2PolicySpec": {
        "description": "Defines a Google Cloud policy specification which is used to specify constraints for configurations of Google Cloud resources.",
        "properties": {
          "etag": {
            "description": "An opaque tag indicating the current version of the policySpec, used for concurrency control. This field is ignored if used in a `CreatePolicy` request. When the policy is returned from either a `GetPolicy` or a `ListPolicies` request, this `etag` indicates the version of the current policySpec to use when executing a read-modify-write loop. When the policy is returned from a `GetEffectivePolicy` request, the `etag` will be unset.",
            "type": "string"
          },
          "inheritFromParent": {
            "description": "Determines the inheritance behavior for this policy. If `inherit_from_parent` is true, policy rules set higher up in the hierarchy (up to the closest root) are inherited and present in the effective policy. If it is false, then no rules are inherited, and this policy becomes the new root for evaluation. This field can be set only for policies which configure list constraints.",
            "type": "boolean"
          },
          "reset": {
            "description": "Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific constraint at this resource. This field can be set in policies for either list or boolean constraints. If set, `rules` must be empty and `inherit_from_parent` must be set to false.",
            "type": "boolean"
          },
          "rules": {
            "description": "In policies for boolean constraints, the following requirements apply: - There must be one and only one policy rule where condition is unset. - Boolean policy rules with conditions must set `enforced` to the opposite of the policy rule without a condition. - During policy evaluation, policy rules with conditions that are true for a target resource take precedence.",
            "items": {
              "$ref": "#/$defs/GoogleCloudOrgpolicyV2PolicySpecPolicyRule"
            },
            "type": "array"
          },
          "updateTime": {
            "description": "Output only. The time stamp this was previously updated. This represents the last time a call to `CreatePolicy` or `UpdatePolicy` was made for that policy.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudOrgpolicyV2PolicySpecPolicyRule": {
        "description": "A rule used to express this policy.",
        "properties": {
          "allowAll": {
            "description": "Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.",
            "type": "boolean"
          },
          "condition": {
            "$ref": "#/$defs/GoogleTypeExpr"
          },
          "denyAll": {
            "description": "Setting this to true means that all values are denied. This field can be set only in policies for list constraints.",
            "type": "boolean"
          },
          "enforce": {
            "description": "If `true`, then the policy is enforced. If `false`, then any configuration is acceptable. This field can be set only in policies for boolean constraints.",
            "type": "boolean"
          },
          "values": {
            "$ref": "#/$defs/GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues"
          }
        },
        "type": "object"
      },
      "GoogleTypeExpr": {
        "description": "Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: \"Summary size limit\" description: \"Determines if a summary is less than 100 chars\" expression: \"document.summary.size() < 100\" Example (Equality): title: \"Requestor is owner\" description: \"Determines if requestor is the document owner\" expression: \"document.owner == request.auth.claims.email\" Example (Logic): title: \"Public documents\" description: \"Determine whether the document should be publicly visible\" expression: \"document.type != 'private' && document.type != 'internal'\" Example (Data Manipulation): title: \"Notification string\" description: \"Create a notification string with a timestamp.\" expression: \"'New message received at ' + string(document.create_time)\" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.",
        "properties": {
          "description": {
            "description": "Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.",
            "type": "string"
          },
          "expression": {
            "description": "Textual representation of an expression in Common Expression Language syntax.",
            "type": "string"
          },
          "location": {
            "description": "Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.",
            "type": "string"
          },
          "title": {
            "description": "Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues": {
        "description": "A message that holds specific allowed and denied values. This message can define specific values and subtrees of the Resource Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that are allowed or denied. This is achieved by using the `under:` and optional `is:` prefixes. The `under:` prefix is used to denote resource subtree values. The `is:` prefix is used to denote specific values, and is required only if the value contains a \":\". Values prefixed with \"is:\" are treated the same as values with no prefix. Ancestry subtrees must be in one of the following formats: - `projects/` (for example, `projects/tokyo-rain-123`) - `folders/` (for example, `folders/1234`) - `organizations/` (for example, `organizations/1234`) The `supports_under` field of the associated `Constraint` defines whether ancestry prefixes can be used.",
        "properties": {
          "allowedValues": {
            "description": "List of values allowed at this resource.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "deniedValues": {
            "description": "List of values denied at this resource.",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts": {
        "description": "A summary of the state of all resources scanned for compliance with the changed OrgPolicy.",
        "properties": {
          "compliant": {
            "description": "Output only. Number of scanned resources with zero violations.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "errors": {
            "description": "Output only. Number of resources that returned an error when scanned.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "noncompliant": {
            "description": "Output only. Number of scanned resources with at least one violation.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "scanned": {
            "description": "Output only. Number of resources checked for compliance. Must equal: unenforced + noncompliant + compliant + error",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          },
          "unenforced": {
            "description": "Output only. Number of resources where the constraint was not enforced, i.e. the Policy set `enforced: false` for that resource.",
            "format": "int32",
            "readOnly": true,
            "type": "integer"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://policysimulator.googleapis.com//v1alpha/{parent}/orgPolicyViolationsPreviews:generate{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
