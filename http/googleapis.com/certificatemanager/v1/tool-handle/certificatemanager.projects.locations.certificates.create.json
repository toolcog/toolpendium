{
  "name": "certificatemanager_projects_locations_certificates_create",
  "description": "Creates a new Certificate in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource of the certificate. Must be in the format `projects/*/locations/*`."
      },
      "certificateId": {
        "type": "string",
        "description": "Required. A user-provided name of the certificate."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Certificate"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "Certificate": {
        "description": "Defines TLS certificate.",
        "properties": {
          "createTime": {
            "description": "Output only. The creation timestamp of a Certificate.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "One or more paragraphs of text description of a certificate.",
            "type": "string"
          },
          "expireTime": {
            "description": "Output only. The expiry timestamp of a Certificate.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Set of labels associated with a Certificate.",
            "type": "object"
          },
          "managed": {
            "$ref": "#/$defs/ManagedCertificate"
          },
          "name": {
            "description": "A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.",
            "type": "string"
          },
          "pemCertificate": {
            "description": "Output only. The PEM-encoded certificate chain.",
            "readOnly": true,
            "type": "string"
          },
          "sanDnsnames": {
            "description": "Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "scope": {
            "description": "Immutable. The scope of the certificate.",
            "enum": [
              "DEFAULT",
              "EDGE_CACHE",
              "ALL_REGIONS"
            ],
            "type": "string"
          },
          "selfManaged": {
            "$ref": "#/$defs/SelfManagedCertificate"
          },
          "updateTime": {
            "description": "Output only. The last update timestamp of a Certificate.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManagedCertificate": {
        "description": "Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.",
        "properties": {
          "authorizationAttemptInfo": {
            "description": "Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.",
            "items": {
              "$ref": "#/$defs/AuthorizationAttemptInfo"
            },
            "readOnly": true,
            "type": "array"
          },
          "dnsAuthorizations": {
            "description": "Immutable. Authorizations that will be used for performing domain authorization.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "domains": {
            "description": "Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "issuanceConfig": {
            "description": "Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.",
            "type": "string"
          },
          "provisioningIssue": {
            "$ref": "#/$defs/ProvisioningIssue"
          },
          "state": {
            "description": "Output only. State of the managed certificate resource.",
            "enum": [
              "STATE_UNSPECIFIED",
              "PROVISIONING",
              "FAILED",
              "ACTIVE"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthorizationAttemptInfo": {
        "description": "State of the latest attempt to authorize a domain for certificate issuance.",
        "properties": {
          "details": {
            "description": "Output only. Human readable explanation for reaching the state. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use FailureReason enum.",
            "readOnly": true,
            "type": "string"
          },
          "domain": {
            "description": "Domain name of the authorization attempt.",
            "type": "string"
          },
          "failureReason": {
            "description": "Output only. Reason for failure of the authorization attempt for the domain.",
            "enum": [
              "FAILURE_REASON_UNSPECIFIED",
              "CONFIG",
              "CAA",
              "RATE_LIMITED"
            ],
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "Output only. State of the domain for managed certificate issuance.",
            "enum": [
              "STATE_UNSPECIFIED",
              "AUTHORIZING",
              "AUTHORIZED",
              "FAILED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProvisioningIssue": {
        "description": "Information about issues with provisioning a Managed Certificate.",
        "properties": {
          "details": {
            "description": "Output only. Human readable explanation about the issue. Provided to help address the configuration issues. Not guaranteed to be stable. For programmatic access use Reason enum.",
            "readOnly": true,
            "type": "string"
          },
          "reason": {
            "description": "Output only. Reason for provisioning failures.",
            "enum": [
              "REASON_UNSPECIFIED",
              "AUTHORIZATION_ISSUE",
              "RATE_LIMITED"
            ],
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "SelfManagedCertificate": {
        "description": "Certificate data for a SelfManaged Certificate. SelfManaged Certificates are uploaded by the user. Updating such certificates before they expire remains the user's responsibility.",
        "properties": {
          "pemCertificate": {
            "description": "Input only. The PEM-encoded certificate chain. Leaf certificate comes first, followed by intermediate ones if any.",
            "type": "string"
          },
          "pemPrivateKey": {
            "description": "Input only. The PEM-encoded private key of the leaf certificate.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://certificatemanager.googleapis.com//v1/{parent}/certificates{?certificateId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
