{
  "name": "authorizedbuyersmarketplace_buyers_proposals_sendRfp",
  "description": "Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED` state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal.",
  "parameters": {
    "type": "object",
    "properties": {
      "buyer": {
        "type": "string",
        "description": "Required. The current buyer who is sending the RFP in the format: `buyers/{accountId}`."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/SendRfpRequest"
      }
    },
    "required": [
      "buyer"
    ],
    "$defs": {
      "SendRfpRequest": {
        "description": "Request to send an RFP. All fields in this request are proposed to publisher and subject to changes by publisher during later negotiation.",
        "properties": {
          "buyerContacts": {
            "description": "Contact information for the buyer.",
            "items": {
              "$ref": "#/$defs/Contact"
            },
            "type": "array"
          },
          "client": {
            "description": "If the current buyer is sending the RFP on behalf of its client, use this field to specify the name of the client in the format: `buyers/{accountId}/clients/{clientAccountid}`.",
            "type": "string"
          },
          "displayName": {
            "description": "Required. The display name of the proposal being created by this RFP.",
            "type": "string"
          },
          "estimatedGrossSpend": {
            "$ref": "#/$defs/Money"
          },
          "flightEndTime": {
            "description": "Required. Proposed flight end time of the RFP. A timestamp in RFC3339 UTC \"Zulu\" format. Note that the specified value will be truncated to a granularity of one second.",
            "format": "google-datetime",
            "type": "string"
          },
          "flightStartTime": {
            "description": "Required. Proposed flight start time of the RFP. A timestamp in RFC3339 UTC \"Zulu\" format. Note that the specified value will be truncated to a granularity of one second.",
            "format": "google-datetime",
            "type": "string"
          },
          "geoTargeting": {
            "$ref": "#/$defs/CriteriaTargeting"
          },
          "inventorySizeTargeting": {
            "$ref": "#/$defs/InventorySizeTargeting"
          },
          "note": {
            "description": "A message that is sent to the publisher. Maximum length is 1024 characters.",
            "type": "string"
          },
          "preferredDealTerms": {
            "$ref": "#/$defs/PreferredDealTerms"
          },
          "programmaticGuaranteedTerms": {
            "$ref": "#/$defs/ProgrammaticGuaranteedTerms"
          },
          "publisherProfile": {
            "description": "Required. The profile of the publisher who will receive this RFP in the format: `buyers/{accountId}/publisherProfiles/{publisherProfileId}`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Contact": {
        "description": "Contains information on how a buyer or seller can be reached.",
        "properties": {
          "displayName": {
            "description": "The display_name of the contact.",
            "type": "string"
          },
          "email": {
            "description": "Email address for the contact.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Money": {
        "description": "Represents an amount of money with its currency type.",
        "properties": {
          "currencyCode": {
            "description": "The three-letter currency code defined in ISO 4217.",
            "type": "string"
          },
          "nanos": {
            "description": "Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.",
            "format": "int32",
            "type": "integer"
          },
          "units": {
            "description": "The whole units of the amount. For example if `currencyCode` is `\"USD\"`, then 1 unit is one US dollar.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CriteriaTargeting": {
        "description": "Generic targeting used for targeting dimensions that contains a list of included and excluded numeric IDs. This cannot be filtered using list filter syntax.",
        "properties": {
          "excludedCriteriaIds": {
            "description": "A list of numeric IDs to be excluded.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          },
          "targetedCriteriaIds": {
            "description": "A list of numeric IDs to be included.",
            "items": {
              "format": "int64",
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "InventorySizeTargeting": {
        "description": "Represents the size of an ad unit that can be targeted on a bid request.",
        "properties": {
          "excludedInventorySizes": {
            "description": "A list of inventory sizes to be excluded.",
            "items": {
              "$ref": "#/$defs/AdSize"
            },
            "type": "array"
          },
          "targetedInventorySizes": {
            "description": "A list of inventory sizes to be included.",
            "items": {
              "$ref": "#/$defs/AdSize"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AdSize": {
        "description": "Represents size of a single ad slot, or a creative.",
        "properties": {
          "height": {
            "description": "The height of the ad slot in pixels. This field will be present only when size type is `PIXEL`.",
            "format": "int64",
            "type": "string"
          },
          "type": {
            "description": "The type of the ad slot size.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "PIXEL",
              "INTERSTITIAL",
              "NATIVE",
              "FLUID"
            ],
            "type": "string"
          },
          "width": {
            "description": "The width of the ad slot in pixels. This field will be present only when size type is `PIXEL`.",
            "format": "int64",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PreferredDealTerms": {
        "description": "Pricing terms for Preferred Deals.",
        "properties": {
          "fixedPrice": {
            "$ref": "#/$defs/Price"
          }
        },
        "type": "object"
      },
      "Price": {
        "description": "Represents a price and a pricing type for a deal.",
        "properties": {
          "amount": {
            "$ref": "#/$defs/Money"
          },
          "type": {
            "description": "The pricing type for the deal.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "CPM",
              "CPD"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProgrammaticGuaranteedTerms": {
        "description": "Pricing terms for Programmatic Guaranteed Deals.",
        "properties": {
          "fixedPrice": {
            "$ref": "#/$defs/Price"
          },
          "guaranteedLooks": {
            "description": "Count of guaranteed looks. For CPD deals, buyer changes to guaranteed_looks will be ignored.",
            "format": "int64",
            "type": "string"
          },
          "impressionCap": {
            "description": "The lifetime impression cap for CPM Sponsorship deals. Deal will stop serving when cap is reached.",
            "format": "int64",
            "type": "string"
          },
          "minimumDailyLooks": {
            "description": "Daily minimum looks for CPD deal types. For CPD deals, buyer should negotiate on this field instead of guaranteed_looks.",
            "format": "int64",
            "type": "string"
          },
          "percentShareOfVoice": {
            "description": "For sponsorship deals, this is the percentage of the seller's eligible impressions that the deal will serve until the cap is reached. Valid value is within range 0~100.",
            "format": "int64",
            "type": "string"
          },
          "reservationType": {
            "description": "The reservation type for a Programmatic Guaranteed deal. This indicates whether the number of impressions is fixed, or a percent of available impressions. If not specified, the default reservation type is STANDARD.",
            "enum": [
              "RESERVATION_TYPE_UNSPECIFIED",
              "STANDARD",
              "SPONSORSHIP"
            ],
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://authorizedbuyersmarketplace.googleapis.com//v1/{buyer}/proposals:sendRfp{?$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer.",
        "**Key properties:**",
        {
          "$ul": [
            "**billedBuyer**: Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`",
            "**buyer**: Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`",
            "**buyerContacts**: Contact information for the buyer.",
            [
              "**buyerPrivateData**: Buyers are allowed to store certain types of private data in a proposal or deal.",
              {
                "$ul": [
                  "**referenceId**: A buyer specified reference ID. This can be queried in the list operations (max-length: 1024 unicode code units)."
                ]
              }
            ],
            "**client**: Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`",
            "**dealType**: Output only. Type of deal the proposal contains.",
            "**displayName**: Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.",
            "**isRenegotiating**: Output only. True if the proposal was previously finalized and is now being renegotiated.",
            "**lastUpdaterOrCommentorRole**: Output only. The role of the last user that either updated the proposal or left a comment.",
            "**name**: Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}",
            "**notes**: A list of notes from the buyer and the seller attached to this proposal.",
            "**originatorRole**: Output only. Indicates whether the buyer/seller created the proposal.",
            "**pausingConsented**: Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.",
            "**proposalRevision**: Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.",
            "**publisherProfile**: Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.",
            "**sellerContacts**: Output only. Contact information for the seller.",
            "**state**: Output only. Indicates the state of the proposal.",
            "**termsAndConditions**: Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.",
            "**updateTime**: Output only. The time when the proposal was last revised."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
