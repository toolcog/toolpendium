{
  "name": "gmail_users_history_list",
  "description": "Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).",
  "parameters": {
    "type": "object",
    "properties": {
      "userId": {
        "type": "string",
        "description": "The user's email address. The special value `me` can be used to indicate the authenticated user."
      },
      "historyTypes": {
        "items": {
          "enum": [
            "messageAdded",
            "messageDeleted",
            "labelAdded",
            "labelRemoved"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "History types to be returned by the function"
      },
      "labelId": {
        "type": "string",
        "description": "Only return messages with a label matching the ID."
      },
      "maxResults": {
        "type": "integer",
        "description": "Maximum number of history records to return. This field defaults to 100. The maximum allowed value for this field is 500."
      },
      "pageToken": {
        "type": "string",
        "description": "Page token to retrieve a specific page of results in the list."
      },
      "startHistoryId": {
        "type": "string",
        "description": "Required. Returns history records after the specified `startHistoryId`. The supplied `startHistoryId` should be obtained from the `historyId` of a message, thread, or previous `list` response. History IDs increase chronologically but are not contiguous with random gaps in between valid IDs. Supplying an invalid or out of date `startHistoryId` typically returns an `HTTP 404` error code. A `historyId` is typically valid for at least a week, but in some rare circumstances may be valid for only a few hours. If you receive an `HTTP 404` error response, your application should perform a full sync. If you receive no `nextPageToken` in the response, there are no updates to retrieve and you can store the returned `historyId` for a future request."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "userId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://gmail.googleapis.com//gmail/v1/users/{userId}/history{?historyTypes,labelId,maxResults,pageToken,startHistoryId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**history**: List of history records. Any `messages` contained in the response will typically only have `id` and `threadId` fields populated.",
            "**historyId**: The ID of the mailbox's current history record.",
            "**nextPageToken**: Page token to retrieve the next page of results in the list."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
