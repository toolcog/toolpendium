{
  "name": "networksecurity_projects_locations_clientTlsPolicies_create",
  "description": "Creates a new ClientTlsPolicy in a given project and location.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. The parent resource of the ClientTlsPolicy. Must be in the format `projects/*/locations/{location}`."
      },
      "clientTlsPolicyId": {
        "type": "string",
        "description": "Required. Short name of the ClientTlsPolicy resource to be created. This value should be 1-63 characters long, containing only letters, numbers, hyphens, and underscores, and should not start with a number. E.g. \"client_mtls_policy\"."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/ClientTlsPolicy"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "ClientTlsPolicy": {
        "description": "ClientTlsPolicy is a resource that specifies how a client should authenticate connections to backends of a service. This resource itself does not affect configuration unless it is attached to a backend service resource.",
        "properties": {
          "clientCertificate": {
            "$ref": "#/$defs/GoogleCloudNetworksecurityV1CertificateProvider"
          },
          "createTime": {
            "description": "Output only. The timestamp when the resource was created.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Optional. Free-text description of the resource.",
            "type": "string"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Optional. Set of label tags associated with the resource.",
            "type": "object"
          },
          "name": {
            "description": "Required. Name of the ClientTlsPolicy resource. It matches the pattern `projects/*/locations/{location}/clientTlsPolicies/{client_tls_policy}`",
            "type": "string"
          },
          "serverValidationCa": {
            "description": "Optional. Defines the mechanism to obtain the Certificate Authority certificate to validate the server certificate. If empty, client does not validate the server certificate.",
            "items": {
              "$ref": "#/$defs/ValidationCA"
            },
            "type": "array"
          },
          "sni": {
            "description": "Optional. Server Name Indication string to present to the server during TLS handshake. E.g: \"secure.example.com\".",
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. The timestamp when the resource was updated.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudNetworksecurityV1CertificateProvider": {
        "description": "Specification of certificate provider. Defines the mechanism to obtain the certificate and private key for peer to peer authentication.",
        "properties": {
          "certificateProviderInstance": {
            "$ref": "#/$defs/CertificateProviderInstance"
          },
          "grpcEndpoint": {
            "$ref": "#/$defs/GoogleCloudNetworksecurityV1GrpcEndpoint"
          }
        },
        "type": "object"
      },
      "CertificateProviderInstance": {
        "description": "Specification of a TLS certificate provider instance. Workloads may have one or more CertificateProvider instances (plugins) and one of them is enabled and configured by specifying this message. Workloads use the values from this message to locate and load the CertificateProvider instance configuration.",
        "properties": {
          "pluginInstance": {
            "description": "Required. Plugin instance name, used to locate and load CertificateProvider instance configuration. Set to \"google_cloud_private_spiffe\" to use Certificate Authority Service certificate provider instance.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleCloudNetworksecurityV1GrpcEndpoint": {
        "description": "Specification of the GRPC Endpoint.",
        "properties": {
          "targetUri": {
            "description": "Required. The target URI of the gRPC endpoint. Only UDS path is supported, and should start with \"unix:\".",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ValidationCA": {
        "description": "Specification of ValidationCA. Defines the mechanism to obtain the Certificate Authority certificate to validate the peer certificate.",
        "properties": {
          "certificateProviderInstance": {
            "$ref": "#/$defs/CertificateProviderInstance"
          },
          "grpcEndpoint": {
            "$ref": "#/$defs/GoogleCloudNetworksecurityV1GrpcEndpoint"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://networksecurity.googleapis.com//v1/{parent}/clientTlsPolicies{?clientTlsPolicyId,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "This resource represents a long-running operation that is the result of a network API call.",
        "**Key properties:**",
        {
          "$ul": [
            "**done**: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.",
            [
              "**error**: The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).",
              {
                "$ul": [
                  "**code**: The status code, which should be an enum value of google.rpc.Code.",
                  "**details**: A list of messages that carry the error details. There is a common set of message types for APIs to use.",
                  "**message**: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client."
                ]
              }
            ],
            "**metadata**: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.",
            "**name**: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.",
            "**response**: The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
