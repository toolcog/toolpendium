{
  "name": "calendar_events_instances",
  "description": "Returns instances of the specified recurring event.",
  "parameters": {
    "type": "object",
    "properties": {
      "calendarId": {
        "type": "string",
        "description": "Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the \"primary\" keyword."
      },
      "eventId": {
        "type": "string",
        "description": "Recurring event identifier."
      },
      "alwaysIncludeEmail": {
        "type": "boolean",
        "description": "Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided)."
      },
      "maxAttendees": {
        "minimum": 1,
        "type": "integer",
        "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional."
      },
      "maxResults": {
        "minimum": 1,
        "type": "integer",
        "description": "Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional."
      },
      "originalStart": {
        "type": "string",
        "description": "The original start time of the instance in the result. Optional."
      },
      "pageToken": {
        "type": "string",
        "description": "Token specifying which result page to return. Optional."
      },
      "showDeleted": {
        "type": "boolean",
        "description": "Whether to include deleted events (with status equals \"cancelled\") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False."
      },
      "timeMax": {
        "type": "string",
        "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset."
      },
      "timeMin": {
        "type": "string",
        "description": "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset."
      },
      "timeZone": {
        "type": "string",
        "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
      },
      "alt": {
        "enum": [
          "json"
        ],
        "type": "string",
        "description": "Data format for the response."
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "An opaque string that represents a user for quota purposes. Must not exceed 40 characters."
      },
      "userIp": {
        "type": "string",
        "description": "Deprecated. Please use quotaUser instead."
      }
    },
    "required": [
      "calendarId",
      "eventId"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://www.googleapis.com/calendar/v3/calendars/{calendarId}/events/{eventId}/instances{?alwaysIncludeEmail,maxAttendees,maxResults,originalStart,pageToken,showDeleted,timeMax,timeMin,timeZone,alt,fields,key,oauth_token,prettyPrint,quotaUser,userIp}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "**Key properties:**",
        {
          "$ul": [
            "**accessRole**: The user's access role for this calendar. Read-only. Possible values are:  ",
            "**defaultReminders**: The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True).",
            "**description**: Description of the calendar. Read-only.",
            "**etag**: ETag of the collection.",
            "**items**: List of events on the calendar.",
            "**kind**: Type of the collection (\"calendar#events\"). (default: calendar#events)",
            "**nextPageToken**: Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided.",
            "**nextSyncToken**: Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided.",
            "**summary**: Title of the calendar. Read-only.",
            "**timeZone**: The time zone of the calendar. Read-only.",
            "**updated**: Last modification time of the calendar (as a RFC3339 timestamp). Read-only."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
