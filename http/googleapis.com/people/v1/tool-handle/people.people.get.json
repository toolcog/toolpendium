{
  "name": "people_people_get",
  "description": "Provides information about a person by specifying a resource name. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.",
  "parameters": {
    "type": "object",
    "properties": {
      "resourceName": {
        "type": "string",
        "description": "Required. The resource name of the person to provide information about. - To get information about the authenticated user, specify `people/me`. - To get information about a google account, specify `people/{account_id}`. - To get information about a contact, specify the resource name that identifies the contact as returned by `people.connections.list`."
      },
      "personFields": {
        "type": "string",
        "description": "Required. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined"
      },
      "requestMask.includeField": {
        "type": "string",
        "description": "Required. Comma-separated list of person fields to be included in the response. Each path should start with `person.`: for example, `person.names` or `person.photos`."
      },
      "sources": {
        "items": {
          "enum": [
            "READ_SOURCE_TYPE_UNSPECIFIED",
            "READ_SOURCE_TYPE_PROFILE",
            "READ_SOURCE_TYPE_CONTACT",
            "READ_SOURCE_TYPE_DOMAIN_CONTACT"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_PROFILE and READ_SOURCE_TYPE_CONTACT if not set."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      }
    },
    "required": [
      "resourceName"
    ]
  },
  "handler": "http",
  "request": {
    "method": "GET",
    "url": {
      "$uri": "https://people.googleapis.com//v1/{resourceName}{?personFields,requestMask.includeField,sources,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
        "**Key properties:**",
        {
          "$ul": [
            "**addresses**: The person's street addresses.",
            "**ageRange**: Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.",
            "**ageRanges**: Output only. The person's age ranges.",
            "**biographies**: The person's biographies. This field is a singleton for contact sources.",
            "**birthdays**: The person's birthdays. This field is a singleton for contact sources.",
            "**braggingRights**: **DEPRECATED**: No data will be returned The person's bragging rights.",
            "**calendarUrls**: The person's calendar URLs.",
            "**clientData**: The person's client data.",
            "**coverPhotos**: Output only. The person's cover photos.",
            "**emailAddresses**: The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.",
            "**etag**: The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
            "**events**: The person's events.",
            "**externalIds**: The person's external IDs.",
            "**fileAses**: The person's file-ases.",
            "**genders**: The person's genders. This field is a singleton for contact sources.",
            "**imClients**: The person's instant messaging clients.",
            "**interests**: The person's interests.",
            "**locales**: The person's locale preferences.",
            "**locations**: The person's locations.",
            "**memberships**: The person's group memberships.",
            [
              "**metadata**: The metadata about a person.",
              {
                "$ul": [
                  "**deleted**: Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.",
                  "**linkedPeopleResourceNames**: Output only. Resource names of people linked to this resource.",
                  "**objectType**: Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.",
                  "**previousResourceNames**: Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
                  "**sources**: The sources of data for the person."
                ]
              }
            ],
            "**miscKeywords**: The person's miscellaneous keywords.",
            "**names**: The person's names. This field is a singleton for contact sources.",
            "**nicknames**: The person's nicknames.",
            "**occupations**: The person's occupations.",
            "**organizations**: The person's past or current organizations.",
            "**phoneNumbers**: The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.",
            "**photos**: Output only. The person's photos.",
            "**relations**: The person's relations.",
            "**relationshipInterests**: Output only. **DEPRECATED**: No data will be returned The person's relationship interests.",
            "**relationshipStatuses**: Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.",
            "**residences**: **DEPRECATED**: (Please use `person.locations` instead) The person's residences.",
            "**resourceName**: The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.",
            "**sipAddresses**: The person's SIP addresses.",
            "**skills**: The person's skills.",
            "**taglines**: Output only. **DEPRECATED**: No data will be returned The person's taglines.",
            "**urls**: The person's associated URLs.",
            "**userDefined**: The person's user defined data."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
