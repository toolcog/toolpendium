{
  "name": "people_people_updateContact",
  "description": "Update contact data for an existing contact person. Any non-contact data will not be modified. Any non-contact data in the person to update will be ignored. All fields specified in the `update_mask` will be replaced. The server returns a 400 error if `person.metadata.sources` is not specified for the contact to be updated or if there is no contact source. The server returns a 400 error with reason `\"failedPrecondition\"` if `person.metadata.sources.etag` is different than the contact's etag, which indicates the contact has changed since its data was read. Clients should get the latest person and merge their updates into the latest person. The server returns a 400 error if `memberships` are being updated and there are no contact group memberships specified on the person. The server returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names Mutate requests for the same user should be sent sequentially to avoid increased latency and failures.",
  "parameters": {
    "type": "object",
    "properties": {
      "resourceName": {
        "type": "string",
        "description": "The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`."
      },
      "personFields": {
        "type": "string",
        "description": "Optional. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. Defaults to all fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined"
      },
      "sources": {
        "items": {
          "enum": [
            "READ_SOURCE_TYPE_UNSPECIFIED",
            "READ_SOURCE_TYPE_PROFILE",
            "READ_SOURCE_TYPE_CONTACT",
            "READ_SOURCE_TYPE_DOMAIN_CONTACT"
          ],
          "type": "string"
        },
        "type": "array",
        "description": "Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set."
      },
      "updatePersonFields": {
        "type": "string",
        "description": "Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All updated fields will be replaced. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined"
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/Person"
      }
    },
    "required": [
      "resourceName"
    ],
    "$defs": {
      "Person": {
        "description": "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
        "properties": {
          "addresses": {
            "description": "The person's street addresses.",
            "items": {
              "$ref": "#/$defs/Address"
            },
            "type": "array"
          },
          "ageRange": {
            "deprecated": true,
            "description": "Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.",
            "enum": [
              "AGE_RANGE_UNSPECIFIED",
              "LESS_THAN_EIGHTEEN",
              "EIGHTEEN_TO_TWENTY",
              "TWENTY_ONE_OR_OLDER"
            ],
            "readOnly": true,
            "type": "string"
          },
          "ageRanges": {
            "description": "Output only. The person's age ranges.",
            "items": {
              "$ref": "#/$defs/AgeRangeType"
            },
            "readOnly": true,
            "type": "array"
          },
          "biographies": {
            "description": "The person's biographies. This field is a singleton for contact sources.",
            "items": {
              "$ref": "#/$defs/Biography"
            },
            "type": "array"
          },
          "birthdays": {
            "description": "The person's birthdays. This field is a singleton for contact sources.",
            "items": {
              "$ref": "#/$defs/Birthday"
            },
            "type": "array"
          },
          "braggingRights": {
            "deprecated": true,
            "description": "**DEPRECATED**: No data will be returned The person's bragging rights.",
            "items": {
              "$ref": "#/$defs/BraggingRights"
            },
            "type": "array"
          },
          "calendarUrls": {
            "description": "The person's calendar URLs.",
            "items": {
              "$ref": "#/$defs/CalendarUrl"
            },
            "type": "array"
          },
          "clientData": {
            "description": "The person's client data.",
            "items": {
              "$ref": "#/$defs/ClientData"
            },
            "type": "array"
          },
          "coverPhotos": {
            "description": "Output only. The person's cover photos.",
            "items": {
              "$ref": "#/$defs/CoverPhoto"
            },
            "readOnly": true,
            "type": "array"
          },
          "emailAddresses": {
            "description": "The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.",
            "items": {
              "$ref": "#/$defs/EmailAddress"
            },
            "type": "array"
          },
          "etag": {
            "description": "The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
            "type": "string"
          },
          "events": {
            "description": "The person's events.",
            "items": {
              "$ref": "#/$defs/Event"
            },
            "type": "array"
          },
          "externalIds": {
            "description": "The person's external IDs.",
            "items": {
              "$ref": "#/$defs/ExternalId"
            },
            "type": "array"
          },
          "fileAses": {
            "description": "The person's file-ases.",
            "items": {
              "$ref": "#/$defs/FileAs"
            },
            "type": "array"
          },
          "genders": {
            "description": "The person's genders. This field is a singleton for contact sources.",
            "items": {
              "$ref": "#/$defs/Gender"
            },
            "type": "array"
          },
          "imClients": {
            "description": "The person's instant messaging clients.",
            "items": {
              "$ref": "#/$defs/ImClient"
            },
            "type": "array"
          },
          "interests": {
            "description": "The person's interests.",
            "items": {
              "$ref": "#/$defs/Interest"
            },
            "type": "array"
          },
          "locales": {
            "description": "The person's locale preferences.",
            "items": {
              "$ref": "#/$defs/Locale"
            },
            "type": "array"
          },
          "locations": {
            "description": "The person's locations.",
            "items": {
              "$ref": "#/$defs/Location"
            },
            "type": "array"
          },
          "memberships": {
            "description": "The person's group memberships.",
            "items": {
              "$ref": "#/$defs/Membership"
            },
            "type": "array"
          },
          "metadata": {
            "$ref": "#/$defs/PersonMetadata"
          },
          "miscKeywords": {
            "description": "The person's miscellaneous keywords.",
            "items": {
              "$ref": "#/$defs/MiscKeyword"
            },
            "type": "array"
          },
          "names": {
            "description": "The person's names. This field is a singleton for contact sources.",
            "items": {
              "$ref": "#/$defs/Name"
            },
            "type": "array"
          },
          "nicknames": {
            "description": "The person's nicknames.",
            "items": {
              "$ref": "#/$defs/Nickname"
            },
            "type": "array"
          },
          "occupations": {
            "description": "The person's occupations.",
            "items": {
              "$ref": "#/$defs/Occupation"
            },
            "type": "array"
          },
          "organizations": {
            "description": "The person's past or current organizations.",
            "items": {
              "$ref": "#/$defs/Organization"
            },
            "type": "array"
          },
          "phoneNumbers": {
            "description": "The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.",
            "items": {
              "$ref": "#/$defs/PhoneNumber"
            },
            "type": "array"
          },
          "photos": {
            "description": "Output only. The person's photos.",
            "items": {
              "$ref": "#/$defs/Photo"
            },
            "readOnly": true,
            "type": "array"
          },
          "relations": {
            "description": "The person's relations.",
            "items": {
              "$ref": "#/$defs/Relation"
            },
            "type": "array"
          },
          "relationshipInterests": {
            "deprecated": true,
            "description": "Output only. **DEPRECATED**: No data will be returned The person's relationship interests.",
            "items": {
              "$ref": "#/$defs/RelationshipInterest"
            },
            "readOnly": true,
            "type": "array"
          },
          "relationshipStatuses": {
            "deprecated": true,
            "description": "Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.",
            "items": {
              "$ref": "#/$defs/RelationshipStatus"
            },
            "readOnly": true,
            "type": "array"
          },
          "residences": {
            "deprecated": true,
            "description": "**DEPRECATED**: (Please use `person.locations` instead) The person's residences.",
            "items": {
              "$ref": "#/$defs/Residence"
            },
            "type": "array"
          },
          "resourceName": {
            "description": "The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.",
            "type": "string"
          },
          "sipAddresses": {
            "description": "The person's SIP addresses.",
            "items": {
              "$ref": "#/$defs/SipAddress"
            },
            "type": "array"
          },
          "skills": {
            "description": "The person's skills.",
            "items": {
              "$ref": "#/$defs/Skill"
            },
            "type": "array"
          },
          "taglines": {
            "deprecated": true,
            "description": "Output only. **DEPRECATED**: No data will be returned The person's taglines.",
            "items": {
              "$ref": "#/$defs/Tagline"
            },
            "readOnly": true,
            "type": "array"
          },
          "urls": {
            "description": "The person's associated URLs.",
            "items": {
              "$ref": "#/$defs/Url"
            },
            "type": "array"
          },
          "userDefined": {
            "description": "The person's user defined data.",
            "items": {
              "$ref": "#/$defs/UserDefined"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "Address": {
        "description": "A person's physical address. May be a P.O. box or street address. All fields are optional.",
        "properties": {
          "city": {
            "description": "The city of the address.",
            "type": "string"
          },
          "country": {
            "description": "The country of the address.",
            "type": "string"
          },
          "countryCode": {
            "description": "The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.",
            "type": "string"
          },
          "extendedAddress": {
            "description": "The extended address of the address; for example, the apartment number.",
            "type": "string"
          },
          "formattedType": {
            "description": "Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "formattedValue": {
            "description": "The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "poBox": {
            "description": "The P.O. box of the address.",
            "type": "string"
          },
          "postalCode": {
            "description": "The postal code of the address.",
            "type": "string"
          },
          "region": {
            "description": "The region of the address; for example, the state or province.",
            "type": "string"
          },
          "streetAddress": {
            "description": "The street address.",
            "type": "string"
          },
          "type": {
            "description": "The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FieldMetadata": {
        "description": "Metadata about a field.",
        "properties": {
          "primary": {
            "description": "Output only. True if the field is the primary field for all sources in the person. Each person will have at most one field with `primary` set to true.",
            "readOnly": true,
            "type": "boolean"
          },
          "source": {
            "$ref": "#/$defs/Source"
          },
          "sourcePrimary": {
            "description": "True if the field is the primary field for the source. Each source must have at most one field with `source_primary` set to true.",
            "type": "boolean"
          },
          "verified": {
            "description": "Output only. True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.",
            "readOnly": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "Source": {
        "description": "The source of a field.",
        "properties": {
          "etag": {
            "description": "**Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.",
            "type": "string"
          },
          "id": {
            "description": "The unique identifier within the source type generated by the server.",
            "type": "string"
          },
          "profileMetadata": {
            "$ref": "#/$defs/ProfileMetadata"
          },
          "type": {
            "description": "The source type.",
            "enum": [
              "SOURCE_TYPE_UNSPECIFIED",
              "ACCOUNT",
              "PROFILE",
              "DOMAIN_PROFILE",
              "CONTACT",
              "OTHER_CONTACT",
              "DOMAIN_CONTACT"
            ],
            "type": "string"
          },
          "updateTime": {
            "description": "Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.",
            "format": "google-datetime",
            "readOnly": true,
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProfileMetadata": {
        "description": "The metadata about a profile.",
        "properties": {
          "objectType": {
            "description": "Output only. The profile object type.",
            "enum": [
              "OBJECT_TYPE_UNSPECIFIED",
              "PERSON",
              "PAGE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "userTypes": {
            "description": "Output only. The user types.",
            "items": {
              "enum": [
                "USER_TYPE_UNKNOWN",
                "GOOGLE_USER",
                "GPLUS_USER",
                "GOOGLE_APPS_USER"
              ],
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "AgeRangeType": {
        "description": "A person's age range.",
        "properties": {
          "ageRange": {
            "description": "The age range.",
            "enum": [
              "AGE_RANGE_UNSPECIFIED",
              "LESS_THAN_EIGHTEEN",
              "EIGHTEEN_TO_TWENTY",
              "TWENTY_ONE_OR_OLDER"
            ],
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          }
        },
        "type": "object"
      },
      "Biography": {
        "description": "A person's short biography.",
        "properties": {
          "contentType": {
            "description": "The content type of the biography.",
            "enum": [
              "CONTENT_TYPE_UNSPECIFIED",
              "TEXT_PLAIN",
              "TEXT_HTML"
            ],
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The short biography.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Birthday": {
        "description": "A person's birthday. At least one of the `date` and `text` fields are specified. The `date` and `text` fields typically represent the same date, but are not guaranteed to. Clients should always set the `date` field when mutating birthdays.",
        "properties": {
          "date": {
            "$ref": "#/$defs/Date"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "text": {
            "deprecated": true,
            "description": "Prefer to use the `date` field if set. A free-form string representing the user's birthday. This value is not validated.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Date": {
        "description": "Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp",
        "properties": {
          "day": {
            "description": "Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
            "format": "int32",
            "type": "integer"
          },
          "month": {
            "description": "Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.",
            "format": "int32",
            "type": "integer"
          },
          "year": {
            "description": "Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "BraggingRights": {
        "deprecated": true,
        "description": "**DEPRECATED**: No data will be returned A person's bragging rights.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The bragging rights; for example, `climbed mount everest`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CalendarUrl": {
        "description": "A person's calendar URL.",
        "properties": {
          "formattedType": {
            "description": "Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`",
            "type": "string"
          },
          "url": {
            "description": "The calendar URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClientData": {
        "description": "Arbitrary client data that is populated by clients. Duplicate keys and values are allowed.",
        "properties": {
          "key": {
            "description": "The client specified key of the client data.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The client specified value of the client data.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CoverPhoto": {
        "description": "A person's cover photo. A large image shown on the person's profile page that represents who they are or what they care about.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "url": {
            "description": "The URL of the cover photo.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmailAddress": {
        "description": "A person's email address.",
        "properties": {
          "displayName": {
            "description": "The display name of the email.",
            "type": "string"
          },
          "formattedType": {
            "description": "Output only. The type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the email address. The type can be custom or one of these predefined values: * `home` * `work` * `other`",
            "type": "string"
          },
          "value": {
            "description": "The email address.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Event": {
        "description": "An event related to the person.",
        "properties": {
          "date": {
            "$ref": "#/$defs/Date"
          },
          "formattedType": {
            "description": "Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExternalId": {
        "description": "An identifier from an external entity related to the person.",
        "properties": {
          "formattedType": {
            "description": "Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the external ID. The type can be custom or one of these predefined values: * `account` * `customer` * `loginId` * `network` * `organization`",
            "type": "string"
          },
          "value": {
            "description": "The value of the external ID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileAs": {
        "description": "The name that should be used to sort the person in a list.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The file-as value",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Gender": {
        "description": "A person's gender.",
        "properties": {
          "addressMeAs": {
            "description": "Free form text field for pronouns that should be used to address the person. Common values are: * `he`/`him` * `she`/`her` * `they`/`them`",
            "type": "string"
          },
          "formattedValue": {
            "description": "Output only. The value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale. Unspecified or custom value are not localized.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The gender for the person. The gender can be custom or one of these predefined values: * `male` * `female` * `unspecified`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ImClient": {
        "description": "A person's instant messaging client.",
        "properties": {
          "formattedProtocol": {
            "description": "Output only. The protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "formattedType": {
            "description": "Output only. The type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "protocol": {
            "description": "The protocol of the IM client. The protocol can be custom or one of these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`",
            "type": "string"
          },
          "type": {
            "description": "The type of the IM client. The type can be custom or one of these predefined values: * `home` * `work` * `other`",
            "type": "string"
          },
          "username": {
            "description": "The user name used in the IM client.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Interest": {
        "description": "One of the person's interests.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The interest; for example, `stargazing`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Locale": {
        "description": "A person's locale preference.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Location": {
        "description": "A person's location.",
        "properties": {
          "buildingId": {
            "description": "The building identifier.",
            "type": "string"
          },
          "current": {
            "description": "Whether the location is the current location.",
            "type": "boolean"
          },
          "deskCode": {
            "description": "The individual desk location.",
            "type": "string"
          },
          "floor": {
            "description": "The floor name or number.",
            "type": "string"
          },
          "floorSection": {
            "description": "The floor section in `floor_name`.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`",
            "type": "string"
          },
          "value": {
            "description": "The free-form value of the location.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Membership": {
        "description": "A person's membership in a group. Only contact group memberships can be modified.",
        "properties": {
          "contactGroupMembership": {
            "$ref": "#/$defs/ContactGroupMembership"
          },
          "domainMembership": {
            "$ref": "#/$defs/DomainMembership"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          }
        },
        "type": "object"
      },
      "ContactGroupMembership": {
        "description": "A Google contact group membership.",
        "properties": {
          "contactGroupId": {
            "deprecated": true,
            "description": "Output only. The contact group ID for the contact group membership.",
            "readOnly": true,
            "type": "string"
          },
          "contactGroupResourceName": {
            "description": "The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or \"myContacts\" or \"starred\" system groups memberships can be added. A contact must always have at least one contact group membership.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DomainMembership": {
        "description": "A Google Workspace Domain membership.",
        "properties": {
          "inViewerDomain": {
            "description": "True if the person is in the viewer's Google Workspace domain.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "PersonMetadata": {
        "description": "The metadata about a person.",
        "properties": {
          "deleted": {
            "description": "Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.",
            "readOnly": true,
            "type": "boolean"
          },
          "linkedPeopleResourceNames": {
            "description": "Output only. Resource names of people linked to this resource.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "objectType": {
            "deprecated": true,
            "description": "Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.",
            "enum": [
              "OBJECT_TYPE_UNSPECIFIED",
              "PERSON",
              "PAGE"
            ],
            "readOnly": true,
            "type": "string"
          },
          "previousResourceNames": {
            "description": "Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
            "items": {
              "type": "string"
            },
            "readOnly": true,
            "type": "array"
          },
          "sources": {
            "description": "The sources of data for the person.",
            "items": {
              "$ref": "#/$defs/Source"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MiscKeyword": {
        "description": "A person's miscellaneous keyword.",
        "properties": {
          "formattedType": {
            "description": "Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The miscellaneous keyword type.",
            "enum": [
              "TYPE_UNSPECIFIED",
              "OUTLOOK_BILLING_INFORMATION",
              "OUTLOOK_DIRECTORY_SERVER",
              "OUTLOOK_KEYWORD",
              "OUTLOOK_MILEAGE",
              "OUTLOOK_PRIORITY",
              "OUTLOOK_SENSITIVITY",
              "OUTLOOK_SUBJECT",
              "OUTLOOK_USER",
              "HOME",
              "WORK",
              "OTHER"
            ],
            "type": "string"
          },
          "value": {
            "description": "The value of the miscellaneous keyword.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Name": {
        "description": "A person's name. If the name is a mononym, the family name is empty.",
        "properties": {
          "displayName": {
            "description": "Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
            "readOnly": true,
            "type": "string"
          },
          "displayNameLastFirst": {
            "description": "Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
            "readOnly": true,
            "type": "string"
          },
          "familyName": {
            "description": "The family name.",
            "type": "string"
          },
          "givenName": {
            "description": "The given name.",
            "type": "string"
          },
          "honorificPrefix": {
            "description": "The honorific prefixes, such as `Mrs.` or `Dr.`",
            "type": "string"
          },
          "honorificSuffix": {
            "description": "The honorific suffixes, such as `Jr.`",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "middleName": {
            "description": "The middle name(s).",
            "type": "string"
          },
          "phoneticFamilyName": {
            "description": "The family name spelled as it sounds.",
            "type": "string"
          },
          "phoneticFullName": {
            "description": "The full name spelled as it sounds.",
            "type": "string"
          },
          "phoneticGivenName": {
            "description": "The given name spelled as it sounds.",
            "type": "string"
          },
          "phoneticHonorificPrefix": {
            "description": "The honorific prefixes spelled as they sound.",
            "type": "string"
          },
          "phoneticHonorificSuffix": {
            "description": "The honorific suffixes spelled as they sound.",
            "type": "string"
          },
          "phoneticMiddleName": {
            "description": "The middle name(s) spelled as they sound.",
            "type": "string"
          },
          "unstructuredName": {
            "description": "The free form name value.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Nickname": {
        "description": "A person's nickname.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the nickname.",
            "enum": [
              "DEFAULT",
              "MAIDEN_NAME",
              "INITIALS",
              "GPLUS",
              "OTHER_NAME",
              "ALTERNATE_NAME",
              "SHORT_NAME"
            ],
            "type": "string",
            "x-enumDeprecated": [
              false,
              true,
              true,
              true,
              true,
              false,
              true
            ]
          },
          "value": {
            "description": "The nickname.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Occupation": {
        "description": "A person's occupation.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The occupation; for example, `carpenter`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Organization": {
        "description": "A person's past or current organization. Overlapping date ranges are permitted.",
        "properties": {
          "costCenter": {
            "description": "The person's cost center at the organization.",
            "type": "string"
          },
          "current": {
            "description": "True if the organization is the person's current organization; false if the organization is a past organization.",
            "type": "boolean"
          },
          "department": {
            "description": "The person's department at the organization.",
            "type": "string"
          },
          "domain": {
            "description": "The domain name associated with the organization; for example, `google.com`.",
            "type": "string"
          },
          "endDate": {
            "$ref": "#/$defs/Date"
          },
          "formattedType": {
            "description": "Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "fullTimeEquivalentMillipercent": {
            "description": "The person's full-time equivalent millipercent within the organization (100000 = 100%).",
            "format": "int32",
            "type": "integer"
          },
          "jobDescription": {
            "description": "The person's job description at the organization.",
            "type": "string"
          },
          "location": {
            "description": "The location of the organization office the person works at.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "name": {
            "description": "The name of the organization.",
            "type": "string"
          },
          "phoneticName": {
            "description": "The phonetic name of the organization.",
            "type": "string"
          },
          "startDate": {
            "$ref": "#/$defs/Date"
          },
          "symbol": {
            "description": "The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.",
            "type": "string"
          },
          "title": {
            "description": "The person's job title at the organization.",
            "type": "string"
          },
          "type": {
            "description": "The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PhoneNumber": {
        "description": "A person's phone number.",
        "properties": {
          "canonicalForm": {
            "description": "Output only. The canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.",
            "readOnly": true,
            "type": "string"
          },
          "formattedType": {
            "description": "Output only. The type of the phone number translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the phone number. The type can be custom or one of these predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`",
            "type": "string"
          },
          "value": {
            "description": "The phone number.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Photo": {
        "description": "A person's photo. A picture shown next to the person's name to help others recognize the person.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "url": {
            "description": "The URL of the photo. You can change the desired size by appending a query parameter `sz={size}` at the end of the url, where {size} is the size in pixels. Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Relation": {
        "description": "A person's relation to another person.",
        "properties": {
          "formattedType": {
            "description": "Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "person": {
            "description": "The name of the other person this relation refers to.",
            "type": "string"
          },
          "type": {
            "description": "The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipInterest": {
        "deprecated": true,
        "description": "**DEPRECATED**: No data will be returned A person's relationship interest .",
        "properties": {
          "formattedValue": {
            "description": "Output only. The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The kind of relationship the person is looking for. The value can be custom or one of these predefined values: * `friend` * `date` * `relationship` * `networking`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RelationshipStatus": {
        "deprecated": true,
        "description": "**DEPRECATED**: No data will be returned A person's relationship status.",
        "properties": {
          "formattedValue": {
            "description": "Output only. The value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The relationship status. The value can be custom or one of these predefined values: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Residence": {
        "deprecated": true,
        "description": "**DEPRECATED**: Please use `person.locations` instead. A person's past or current residence.",
        "properties": {
          "current": {
            "description": "True if the residence is the person's current residence; false if the residence is a past residence.",
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The address of the residence.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SipAddress": {
        "description": "A person's SIP address. Session Initial Protocol addresses are used for VoIP communications to make voice or video calls over the internet.",
        "properties": {
          "formattedType": {
            "description": "Output only. The type of the SIP address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`",
            "type": "string"
          },
          "value": {
            "description": "The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Skill": {
        "description": "A skill that the person has.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The skill; for example, `underwater basket weaving`.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Tagline": {
        "deprecated": true,
        "description": "**DEPRECATED**: No data will be returned A brief one-line description of the person.",
        "properties": {
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The tagline.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Url": {
        "description": "A person's associated URLs.",
        "properties": {
          "formattedType": {
            "description": "Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
            "readOnly": true,
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "type": {
            "description": "The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`",
            "type": "string"
          },
          "value": {
            "description": "The URL.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserDefined": {
        "description": "Arbitrary user data that is populated by the end users.",
        "properties": {
          "key": {
            "description": "The end user specified key of the user defined data.",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/$defs/FieldMetadata"
          },
          "value": {
            "description": "The end user specified value of the user defined data.",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "PATCH",
    "url": {
      "$uri": "https://people.googleapis.com//v1/{resourceName}:updateContact{?personFields,sources,updatePersonFields,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "Information about a person merged from various data sources such as the authenticated user's contacts and profile data. Most fields can have multiple items. The items in a field have no guaranteed order, but each non-empty field is guaranteed to have exactly one field with `metadata.primary` set to true.",
        "**Key properties:**",
        {
          "$ul": [
            "**addresses**: The person's street addresses.",
            "**ageRange**: Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.",
            "**ageRanges**: Output only. The person's age ranges.",
            "**biographies**: The person's biographies. This field is a singleton for contact sources.",
            "**birthdays**: The person's birthdays. This field is a singleton for contact sources.",
            "**braggingRights**: **DEPRECATED**: No data will be returned The person's bragging rights.",
            "**calendarUrls**: The person's calendar URLs.",
            "**clientData**: The person's client data.",
            "**coverPhotos**: Output only. The person's cover photos.",
            "**emailAddresses**: The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.",
            "**etag**: The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.",
            "**events**: The person's events.",
            "**externalIds**: The person's external IDs.",
            "**fileAses**: The person's file-ases.",
            "**genders**: The person's genders. This field is a singleton for contact sources.",
            "**imClients**: The person's instant messaging clients.",
            "**interests**: The person's interests.",
            "**locales**: The person's locale preferences.",
            "**locations**: The person's locations.",
            "**memberships**: The person's group memberships.",
            [
              "**metadata**: The metadata about a person.",
              {
                "$ul": [
                  "**deleted**: Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.",
                  "**linkedPeopleResourceNames**: Output only. Resource names of people linked to this resource.",
                  "**objectType**: Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.",
                  "**previousResourceNames**: Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.",
                  "**sources**: The sources of data for the person."
                ]
              }
            ],
            "**miscKeywords**: The person's miscellaneous keywords.",
            "**names**: The person's names. This field is a singleton for contact sources.",
            "**nicknames**: The person's nicknames.",
            "**occupations**: The person's occupations.",
            "**organizations**: The person's past or current organizations.",
            "**phoneNumbers**: The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.",
            "**photos**: Output only. The person's photos.",
            "**relations**: The person's relations.",
            "**relationshipInterests**: Output only. **DEPRECATED**: No data will be returned The person's relationship interests.",
            "**relationshipStatuses**: Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.",
            "**residences**: **DEPRECATED**: (Please use `person.locations` instead) The person's residences.",
            "**resourceName**: The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.",
            "**sipAddresses**: The person's SIP addresses.",
            "**skills**: The person's skills.",
            "**taglines**: Output only. **DEPRECATED**: No data will be returned The person's taglines.",
            "**urls**: The person's associated URLs.",
            "**userDefined**: The person's user defined data."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
