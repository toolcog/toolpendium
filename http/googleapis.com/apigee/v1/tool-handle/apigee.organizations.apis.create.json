{
  "name": "apigee_organizations_apis_create",
  "description": "Creates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment. Create a new API proxy by setting the `name` query parameter to the name of the API proxy. Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following: * Set the `name` query parameter to the name of the API proxy. * Set the `action` query parameter to `import`. * Set the `Content-Type` header to `multipart/form-data`. * Pass as a file the name of API proxy configuration bundle stored in zip format on your local machine using the `file` form field. **Note**: To validate the API proxy configuration bundle only without importing it, set the `action` query parameter to `validate`. When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.",
  "parameters": {
    "type": "object",
    "properties": {
      "parent": {
        "type": "string",
        "description": "Required. Name of the organization in the following format: `organizations/{org}`"
      },
      "action": {
        "type": "string",
        "description": "Action to perform when importing an API proxy configuration bundle. Set this parameter to one of the following values: * `import` to import the API proxy configuration bundle. * `validate` to validate the API proxy configuration bundle without importing it."
      },
      "name": {
        "type": "string",
        "description": "Name of the API proxy. Restrict the characters used to: A-Za-z0-9._-"
      },
      "validate": {
        "type": "boolean",
        "description": "Ignored. All uploads are validated regardless of the value of this field. Maintained for compatibility with Apigee Edge API."
      },
      "$.xgafv": {
        "enum": [
          "1",
          "2"
        ],
        "type": "string",
        "description": "V1 error format."
      },
      "access_token": {
        "type": "string",
        "description": "OAuth access token."
      },
      "alt": {
        "enum": [
          "json",
          "media",
          "proto"
        ],
        "type": "string",
        "description": "Data format for response."
      },
      "callback": {
        "type": "string",
        "description": "JSONP"
      },
      "fields": {
        "type": "string",
        "description": "Selector specifying which fields to include in a partial response."
      },
      "key": {
        "type": "string",
        "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
      },
      "oauth_token": {
        "type": "string",
        "description": "OAuth 2.0 token for the current user."
      },
      "prettyPrint": {
        "type": "boolean",
        "description": "Returns response with indentations and line breaks."
      },
      "quotaUser": {
        "type": "string",
        "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters."
      },
      "upload_protocol": {
        "type": "string",
        "description": "Upload protocol for media (e.g. \"raw\", \"multipart\")."
      },
      "uploadType": {
        "type": "string",
        "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\")."
      },
      "body": {
        "$ref": "#/$defs/GoogleApiHttpBody"
      }
    },
    "required": [
      "parent"
    ],
    "$defs": {
      "GoogleApiHttpBody": {
        "description": "Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.",
        "properties": {
          "contentType": {
            "description": "The HTTP Content-Type header value specifying the content type of the body.",
            "type": "string"
          },
          "data": {
            "description": "The HTTP request/response body as raw binary.",
            "format": "byte",
            "type": "string"
          },
          "extensions": {
            "description": "Application specific response metadata. Must be set in the first response for streaming APIs.",
            "items": {
              "additionalProperties": {
                "description": "Properties of the object. Contains field @type with type URL."
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      }
    }
  },
  "handler": "http",
  "request": {
    "method": "POST",
    "url": {
      "$uri": "https://apigee.googleapis.com//v1/{parent}/apis{?action,name,validate,$.xgafv,access_token,alt,callback,fields,key,oauth_token,prettyPrint,quotaUser,upload_protocol,uploadType}"
    },
    "body": {
      "$": "body",
      "encode": "json"
    }
  },
  "responses": {
    "200": {
      "$encode": "markdown",
      "$block": [
        {
          "$h1": "Object"
        },
        "API proxy revision.",
        "**Key properties:**",
        {
          "$ul": [
            "**archive**: Output only. The archive that generated this proxy revision. This field is only present on proxy revisions that were generated by an archive. Proxies generated by archives cannot be updated, deleted, or deployed to other environments. Format: `organizations/*/environments/*/archiveDeployments/*`",
            "**basepaths**: Base URL of the API proxy.",
            [
              "**configurationVersion**: Version of the API proxy configuration schema. Currently, only 4.0 is supported.",
              {
                "$ul": [
                  "**majorVersion**: Major version of the API proxy configuration schema.",
                  "**minorVersion**: Minor version of the API proxy configuration schema."
                ]
              }
            ],
            "**contextInfo**: Revision number, app name, and organization for the API proxy.",
            "**createdAt**: Time that the API proxy revision was created in milliseconds since epoch.",
            "**description**: Description of the API proxy revision.",
            "**displayName**: Human-readable name of the API proxy.",
            "**entityMetaDataAsProperties**: Metadata describing the API proxy revision as a key-value map.",
            "**hasExtensiblePolicy**: Output only. This field will be marked as true if revision contains any policies marked as extensible.",
            "**integrationEndpoints**: List of IntegrationEndpoints in the '/integration-endpoints' directory of the API proxy. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
            "**lastModifiedAt**: Time that the API proxy revision was last modified in milliseconds since epoch.",
            "**name**: Name of the API proxy.",
            "**policies**: List of policy names included in the API proxy revision..",
            "**proxies**: List of proxy names included in the API proxy revision.",
            "**proxyEndpoints**: List of ProxyEndpoints in the `/proxies` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
            [
              "**resourceFiles**: List of resource files.",
              {
                "$ul": [
                  "**resourceFile**: List of resource files."
                ]
              }
            ],
            "**resources**: List of the resources included in the API proxy revision formatted as \"{type}://{name}\".",
            "**revision**: API proxy revision.",
            "**sharedFlows**: List of the shared flows included in the API proxy revision.",
            "**spec**: OpenAPI Specification that is associated with the API proxy. The value is set to a URL or to a path in the specification store.",
            "**targetEndpoints**: List of TargetEndpoints in the `/targets` directory of the API proxy. Typically, this element is included only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
            "**targetServers**: List of TargetServers referenced in any TargetEndpoint in the API proxy. Typically, you will see this element only when the API proxy was created using the Edge UI. This is a 'manifest' setting designed to provide visibility into the contents of the API proxy.",
            "**targets**: List of the targets included in the API proxy revision.",
            "**teams**: List of the teams included in the API proxy revision.",
            "**type**: Type. Set to `Application`. Maintained for compatibility with the Apigee Edge API."
          ]
        },
        {
          "$lang": "json",
          "$code": {
            "$encode": "json",
            "$indent": true,
            "$content": {
              "$": "$.body"
            }
          }
        }
      ]
    }
  }
}
